/* Minification failed. Returning unminified contents.
(99286,68-69): run-time warning JS1195: Expected expression: >
(99288,26-27): run-time warning JS1195: Expected expression: )
(99289,25-30): run-time warning JS1019: Can't have 'break' outside of loop: break
(99326,21-26): run-time warning JS1019: Can't have 'break' outside of loop: break
(99356,21-26): run-time warning JS1019: Can't have 'break' outside of loop: break
(99361,25-26): run-time warning JS1195: Expected expression: )
(99363,5-6): run-time warning JS1002: Syntax error: }
(99366,40-41): run-time warning JS1195: Expected expression: )
(99370,5-6): run-time warning JS1002: Syntax error: }
(99371,5-28): run-time warning JS1197: Too many errors. The file might not be a JavaScript file: set_IsSortSelectRecords
(99362,9-37): run-time warning JS1018: 'return' statement outside of function: return ControlType.DataGrid;
(99369,9-43): run-time warning JS1018: 'return' statement outside of function: return this.m_IsSortSelectRecords;
 */


;var  ZlayerCallBackItem = function(key, func) {
    this.key = key;
    this.showDialogCallback = func;
    this.index = ZlayerCallBackArray.length;
 }
//隐藏无内容的容器元素
//Reference SPS OWS.JS
function MSOLayout_MakeInvisibleIfEmpty() {
    var allElements = document.getElementsByName("_invisibleIfEmpty");
    var agt = navigator.userAgent.toLowerCase();
    var isNav = ((agt.indexOf('mozilla') != -1) && ((agt.indexOf('spoofer') == -1) && (agt.indexOf('compatible') == -1)));
    var isIE = (agt.indexOf("msie") != -1);
    for (var curElement = 0; curElement < allElements.length; curElement++) {
        if ((isIE && allElements[curElement].childNodes.length == 0) || (isNav && allElements[curElement].childNodes.length <= 1)) {
            allElements[curElement].style.display = "none";
        }
    }
}
//
//如果容器内容隐藏则隐藏容器
//
function MSOLayout_MakeInvisibleIfHidden() {
    /*
	获取参与控制的容器
	*/
    var allElements = document.getElementsByName("_invisibleIfHidden");
    var agt = navigator.userAgent.toLowerCase();
    for (var cur = 0; cur < allElements.length; cur++) {
        var curElement = allElements[cur];
        var hiddenAll = true;
        for (var child = 0; child < curElement.children.length ; child++) {
            var childElement = curElement.children[child];
            /*
	        如果容器内存在显示内容，则显示容器。
	        */
            if (childElement.style.display != "none") {
                hiddenAll = false;
            }
        }
        if (hiddenAll) {
            curElement.style.display = "none";
        }
    }
}

function ValidateForm() {
    alert("ok");
}

function Fix40Decode(str) {
    return str.replace(/&#39;/g, "\'");
}

function HideZone(zone) {
    var zoneElement = document.getElementById(zone);
    if (zoneElement != null) {
        zoneElement.style.display = "none";
    }
    if (typeof (MSOLayout_MakeInvisibleIfHidden) == "function") {
        MSOLayout_MakeInvisibleIfHidden();
    }
}

function ToggleDisplay(element) {
    if (element != null) {
        if (element.style.display == "") {
            element.style.display = "none";
        } else {
            element.style.display = ""
        }
    }
    return false;
}

//Modified by YMJ ---- 2012.04.01
//set as alias of _uf$escapeHTML and _uf$unescapeHTML
var escapeHTML = _uf$escapeHTML;
var unescapeHTML = _uf$unescapeHTML;

function RegisterShowQueryCase(lookCaseBtnClientID, lookCaseBtnClientName, url) { //debugger;
    var btnOnLookCase = window.document.all(lookCaseBtnClientID + '_button');
    if (!btnOnLookCase)
        btnOnLookCase = window.document.all(lookCaseBtnClientID);
    if (btnOnLookCase) {
        if (btnOnLookCase.length) {
            if (btnOnLookCase.length > 0) {
                btnOnLookCase = btn[1];
            }
        }
    }

    btnOnLookCase.onclick = BtnLookCase_onClick;
    btnOnLookCase.onclick_url = url;
    //findBtn.onclick_refreshCtrlClientName = findBtnClientName;    //暂时不需要
}

function BtnLookCase_onClick() {
    //onShowQueryCaseUI_handler(this.onclick_js,this.onclick_findBtnClientName,this.onclick_returnId); 
    ShowQueryCaseModalDialog(this.onclick_url);
}

function ShowQueryCaseModalDialog(url) {
    var width = "900";
    var height = "470";

    //function ShowModalDialog(url,title,height,width,hideStatusBar,isModelessDialog)
    //var ret = ShowModalDialog('../ufsoft/simple.aspx?lnk=639f9280-954f-4506-b96f-470ffba84ab3&chromeType=4&ShowType=ShowModal&ParentTaskID=adc90220-f57e-4d3f-9cc3-46842029db1f&PFID=6e972ac2-852f-4df3-bd25-50096ed13ada&__sk=__SK42298&__curOId=1001202263224223&ShowAtlasModalDialog=true','','470','900','False','False');
    var ret = ShowModalDialog(url, '', height, width, 'False', 'False');

    //子窗体刷新父窗体，故父窗体直接return    
    return;

    if (AfterCloseDialog)
        AfterCloseDialog(ret);
    if (ret == typeof ('')) {
        window.setTimeout(function a() {
            __doPostBack('u$M$p1$ctl05', '');
        }, 10);
    } else {
        if (ret == true) {
            window.setTimeout(function a() {
                __doPostBack('u$M$p1$ctl05', '');
            }, 10);
        }
    }
}

function showQuery() {
    var url = "simple.aspx?lnk=d3b07634-12e7-4a10-8cdf-a9a0d2c98f2f&chromeType=4&ShowType=ShowModal&ParentTaskID=3c83b0a6-ae4b-487b-ab9b-ed4383ea1ddb&PFID=f8bf81f5-29dd-4e15-95ae-ec1d74b457ba";
    var _features = "dialogHeight:159px; dialogWidth: 370px; edge: Raised; center: Yes; help: No; resizable:No; status: No;scrollBars:No;";
    window.showModalDialog(url, window, _features);
}

//Modified By Yin Mingjun 2012/04/10
//  ----moved to UI.Common.js

//function AppendNavigateUrl(url){
//    if($ID("__sk") && $ID("__sk").value!=null && url.indexOf("__fsk")==-1){
//       if(url.indexOf("?") != -1){
//          //url += "&__fsk="+$ID("__sk").value;
//          url += "&__fsk="+$ID("__sk").value+"*"+$ID("__psk").value;
//       }else{
//          //url += "?__fsk="+$ID("__sk").value;
//          url += "?__fsk="+$ID("__sk").value+"*"+$ID("__psk").value;
//       }
//    }
//    if($ID("__curOId") && url.indexOf("__curOId")==-1){
//       if(url.indexOf("?") != -1){
//          url += "&__curOId="+$ID("__curOId").value;
//       }else{
//          url += "?__curOId="+$ID("__curOId").value;
//       }
//    }
//    return url;
//}

function GetUniqueID(srcControlID) {
    srcControlID = srcControlID.replace("_", "$")
    var lastIndex = srcControlID.lastIndexOf('$');
    var uniqueID = "";
    if (lastIndex > -1)
        uniqueID = srcControlID.substring(0, lastIndex);
    return uniqueID
}

//Modified By Yin Mingjun 2012/04/10
//  ----moved to UI.Common.js

//function AppendPopupUrl(url, title) {
//    if($ID("__sk") && url.indexOf("__sk")==-1){
//       if(url.indexOf("?") != -1){
//          url += "&__sk="+$ID("__sk").value;
//       }else{
//          url += "?__sk="+$ID("__sk").value;
//       }
//    }
//    if($ID("__curOId") && url.indexOf("__curOId")==-1){
//       if(url.indexOf("?") != -1){
//          url += "&__curOId="+$ID("__curOId").value;
//       }else{
//          url += "?__curOId="+$ID("__curOId").value;
//       }
//    }
//    if(title!=null&&(title!="")){
//        if(url.indexOf("?") != -1){
//            if(url.indexOf("UBF_Title=") == -1){            
//                url += "&UBF_Title="+encodeURIComponent(title);
//            }
//        }else{
//            url += "?UBF_Title="+encodeURIComponent(title);
//        }
//    }
//    return url;
//}

function ShowModalDialog(url, title, height, width, hideStatusBar, isModelessDialog) {
    _ClientPostBackManager.Runing = false;
    //url = encodeURI(url);
    url = AppendPopupUrl(url, title);
    //20101130 lzhm 特殊处理，当编码后出现 %2501时，url会被截断，是微软在showModalDialog上的bug，
    //特殊转义一下，到服务器端由BaseWebForm中的GetPageNameValues中再转回来
    url = url.replace(/\%2501/g, "%25_@U9URLEncodeForNull@_01");
    // 新版公式编辑器、新附件重新计算宽高
    var newVersionWindowSize =  getNewVersionWindowSize(url)
    if(newVersionWindowSize){
        height = newVersionWindowSize.height;
        width = newVersionWindowSize.width;
    }
    hideStatusBar = ToBoolean(hideStatusBar);
    isModelessDialog = ToBoolean(isModelessDialog);
    var winHeight = parseInt(height, 10);
    if (isNaN(winHeight)) {
        winHeight = 418;
    }
    /*if (!hideStatusBar) {
        winHeight += 18;//加上工具条高度
    }*/
    /*if (navigator.userAgent.indexOf("MSIE 7") > 0 || navigator.userAgent.indexOf("MSIE 8") > 0) {
        winHeight += 11;
    } else {
        winHeight += 56;
    }*/
    var winWidth = parseInt(width, 10);
    if (isNaN(winWidth)) {
        winWidth = 590;
    }
    else {
        winWidth += 5;
    }
    winWidth += 12;//个性化图标TD占用
    var _features = "dialogHeight:" + winHeight + "px; dialogWidth: " + winWidth + "px; edge: Raised; center: Yes; help: No; resizable:No; status: No;scrollBars:No;";
    window.ufTitle = title;
    window.hideStatusBar = hideStatusBar;

    if (title) {
        window.ufTitle = title;
    }

    var retv;

    if (url.indexOf("lnk=ccfac9a4-841b-4686-b340-8e1e2ffeb569") >= 0)//报表
    {
        //延时1500
        window.setTimeout(function () { window.showModalDialog(url, window, _features); }, 1500);
        //return ShowQueryRptDialog(url,window,_features);
    }
    else if (url.indexOf("lnk=d3b07634-12e7-4a10-8cdf-a9a0d2c98f2f") >= 0
	    || url.indexOf("lnk=5a381f50-eb2b-4332-a1b4-0841bcaca313") >= 0
		|| url.indexOf("lnk=ee206f24-1f0a-498d-b31e-74eb8f91586e") >= 0) {
        //对查询方案画面中的保存、另存为、栏目快速定位弹出框做特殊处理
        window.showModalDialog(url, window, _features);
    }
    else {
        if (isModelessDialog) {
            _features = "status:off;dialogWidth:" + winWidth + "px;dialogHeight:" + winHeight + "px";
            //modified by YMJ ---- 2012/03/28
            //retv = window.showModelessDialog(url, null, _features);
            retv = _uf$fi$showModelessDialog(url, null, _features);
        } else {
            //modified by YMJ ---- 2012/03/28
            //retv = window.showModalDialog(url, window, _features);
            retv = _uf$fi$showModalDialog(url, window, _features);
        }
        retv = _uf$fi$showModalCallbackFunction(retv);
        //For 清除无用的UIModel 20100712 lzhm BasicInfor.js的onbeforeunload事件配合处理，以及服务器端SimplePage的OnInitComplete配合使用
        if (window.clearUIState) {
            //alert(window.clearUIState);
            if (window.$) {
                $.get(window.clearUIState);
            }
            window.clearUIState = null;
        }
        if (retv && typeof (retv) == "string" && !(window.Escaped == "true"))
            retv = unescapeHTML(retv);
        window.Escaped = null;

        return retv;
    }
} //end ShowModalDialog  

//function ShowModalDialogForAll(url, title, height, width, hideStatusBar, isModelessDialog, showModalDialogCallback,obj) {
//ShowModalDialog(url, title, height, width, hideStatusBar, isModelessDialog) {
//===================
function ShowModalDialog(url, title, height, width, hideStatusBar, isModelessDialog, btnName, rid, func, closeId, activeId, position, warning, activeIndex, progress) {
    _ClientPostBackManager.Runing = false;
    //url = encodeURI(url);
    url = AppendPopupUrl(url, title);
    url = url.replace(/\%2501/g, "%25_@U9URLEncodeForNull@_01");
    
    // 新版公式编辑器、新附件重新计算宽高
    var newVersionWindowSize =  getNewVersionWindowSize(url)
    if(newVersionWindowSize){
        height = newVersionWindowSize.height;
        width = newVersionWindowSize.width;
    }

    hideStatusBar = ToBoolean(hideStatusBar);
    isModelessDialog = ToBoolean(isModelessDialog);
    var winHeight = parseInt(height, 10);
    if (isNaN(winHeight)) {
        winHeight = 418;
    }
    /*if (!hideStatusBar) {
        winHeight += 18; //?óé?1¤??ì????è
    }*/
    /*if (navigator.userAgent.indexOf("MSIE 7") > 0 || navigator.userAgent.indexOf("MSIE 8") > 0) {
        winHeight += 11;
    } else {
        winHeight += 56;
    }*/
    var winWidth = parseInt(width, 10);
    if (isNaN(winWidth)) {
        winWidth = 590;
    } else {
        winWidth += 5;
    }
    winWidth += 12; //??D??ˉí?±êTD??ó?
    var _features = "dialogHeight:" + winHeight + "px; dialogWidth: " + winWidth + "px; edge: Raised; center: Yes; help: No; resizable:No; status: No;scrollBars:No;";
    window.ufTitle = title;
    window.hideStatusBar = hideStatusBar;

    if (title) {
        window.ufTitle = title;
    }

    var retv;

    if (url.indexOf("lnk=ccfac9a4-841b-4686-b340-8e1e2ffeb569") >= 0) //±¨±í
    {
        //?óê±1500
        window.setTimeout(function () {
            window.showModalDialog(url, window, _features, obj);
        }, 1500);
        //return ShowQueryRptDialog(url,window,_features);
    } else if (url.indexOf("lnk=d3b07634-12e7-4a10-8cdf-a9a0d2c98f2f") >= 0 || url.indexOf("lnk=5a381f50-eb2b-4332-a1b4-0841bcaca313") >= 0 || url.indexOf("lnk=ee206f24-1f0a-498d-b31e-74eb8f91586e") >= 0) {
        //??2é?ˉ·?°??-???Dμ?±￡′??￠áí′??a?￠à????ì?ù?¨??μˉ3??ò×?ì?êa′|àí
        window.showModalDialog(url, window, _features, obj);
    } else {
        // if (isModelessDialog) {
        //     _features = "status:off;dialogWidth:" + winWidth + "px;dialogHeight:" + winHeight + "px";
        //     //modified by YMJ ---- 2012/03/28
        //     //retv = window.showModelessDialog(url, null, _features);
        //     retv = _uf$fi$showModelessDialog(url, null, _features);
        // } else {
            zlayer.open({
                title: title,
                area: [winWidth + "px", winHeight + "px"], //===by zzq添加高度
                argument: window,
                content: url,
                endHandle: function (retv) {
                    retv = _uf$fi$showModalCallbackFunction(retv);
                    //没有返回值的返回认为是客户直接点[X]关闭的窗口，无所谓什么返回模式
                    if (window.clearUIState) {
                        //alert(window.clearUIState);
                        if (window.$) {
                            $.get(window.clearUIState);
                        }
                        window.clearUIState = null;
                    }
                    if (retv && typeof (retv) == "string" && !(window.Escaped == "true"))
                        retv = unescapeHTML(retv);
                    window.Escaped = null;


                    if (btnName && btnName._showDialogCallback) {
                        if (rid) {
                            btnName._showDialogCallback(retv, rid);
                        } else {
                            btnName._showDialogCallback(retv, func, closeId, activeId, position, warning, activeIndex, progress);
                        }

                    } else {
                        if (btnName) {//===by  zzq  由于之前的按钮类型具体判断导致 弃审按钮不可用
                            if (btnName.indexOf("Find") > -1 && rid) {
                                var keyValue = GetRecordId(retv);
                                if (keyValue == "") return;
                                if (keyValue != "") {
                                    window.document.getElementById(rid).value = keyValue;
                                }
                                __doPostBack(btnName, '');
                            } else {
                                if (retv == "" || retv == undefined) return;
                                __doPostBack(btnName, '');
                            }
                        }
                        //if (btnName && btnName.indexOf("Btn") > 0) {
                        //    if (btnName.indexOf("BtnDelete") > -1) {
                        //        retv
                        //        if (retv == "" || retv == undefined) return;
                        //        if (retv != "") {
                        //            __doPostBack(btnName, '');
                        //        }
                        //    }
                        //    if (btnName.indexOf("BtnFind") > -1 && rid) {
                        //        var keyValue = GetRecordId(retv);
                        //        if (keyValue == "") return;
                        //        if (keyValue != "") {
                        //            window.document.getElementById(rid).value = keyValue;
                        //        }
                        //        __doPostBack(btnName, '');
                        //    }
                        //}
                    }
                }
            });
        //}
    }
}
//end ShowModalDialog  
//===================
function ShowModalDialogForAll(url, title, height, width, hideStatusBar, isModelessDialog, obj, args, func, showSaveDialogStatusList, _frameWindow, closeId, i) {
    _ClientPostBackManager.Runing = false;
    //url = encodeURI(url);
    url = AppendPopupUrl(url, title);
    //20101130 lzhm ì?êa′|àí￡?μ±±à??oó3??? %2501ê±￡?url?á±?????￡?ê??￠èí?úshowModalDialogé?μ?bug￡?
    //ì?êa×aò?ò???￡?μ?·t???÷??óéBaseWebForm?Dμ?GetPageNameValues?D?ù×a??à′
    url = url.replace(/\%2501/g, "%25_@U9URLEncodeForNull@_01");
    // 新版公式编辑器、新附件重新计算宽高
    var newVersionWindowSize =  getNewVersionWindowSize(url)
    if(newVersionWindowSize){
        height = newVersionWindowSize.height;
        width = newVersionWindowSize.width;
    }
    hideStatusBar = ToBoolean(hideStatusBar);
    isModelessDialog = ToBoolean(isModelessDialog);
    var winHeight = parseInt(height, 10);
    if (isNaN(winHeight)) {
        winHeight = 418;
    }
    /*if (!hideStatusBar) {
        winHeight += 18; //?óé?1¤??ì????è
    }*/
   /* if (navigator.userAgent.indexOf("MSIE 7") > 0 || navigator.userAgent.indexOf("MSIE 8") > 0) {
        winHeight += 11;
    } else {
        winHeight += 56;
    }*/
    var winWidth = parseInt(width, 10);
    if (isNaN(winWidth)) {
        winWidth = 590;
    } else {
        winWidth += 5;
    }
    winWidth += 12; //??D??ˉí?±êTD??ó?
    var _features = "dialogHeight:" + winHeight + "px; dialogWidth: " + winWidth + "px; edge: Raised; center: Yes; help: No; resizable:No; status: No;scrollBars:No;";
    window.ufTitle = title;
    window.hideStatusBar = hideStatusBar;

    if (title) {
        window.ufTitle = title;
    }

    if (url.indexOf("lnk=ccfac9a4-841b-4686-b340-8e1e2ffeb569") >= 0) //±¨±í
    {
        //?óê±1500
        window.setTimeout(function () {
            window.showModalDialog(url, window, _features, obj);
        }, 1500);
        //return ShowQueryRptDialog(url,window,_features);
    } else if (url.indexOf("lnk=d3b07634-12e7-4a10-8cdf-a9a0d2c98f2f") >= 0 || url.indexOf("lnk=5a381f50-eb2b-4332-a1b4-0841bcaca313") >= 0 || url.indexOf("lnk=ee206f24-1f0a-498d-b31e-74eb8f91586e") >= 0) {
        //??2é?ˉ·?°??-???Dμ?±￡′??￠áí′??a?￠à????ì?ù?¨??μˉ3??ò×?ì?êa′|àí
        window.showModalDialog(url, window, _features, obj);
    } else {
        // if (isModelessDialog) {
        //     _features = "status:off;dialogWidth:" + winWidth + "px;dialogHeight:" + winHeight + "px";
        //     //modified by YMJ ---- 2012/03/28
        //     //retv = window.showModelessDialog(url, null, _features);
        //     retv = _uf$fi$showModelessDialog(url, null, _features);
        // } else {
            zlayer.open({
                title: title,
                area: [width + "px", height + "px"],
                argument: window,
                content: url,
                endHandle: function (data) {
                    //先电泳ubf.interopBase.js里的内容，将数据进行一次转换。
                    //JMF-U9V2 或者U9V2-JMF
                    try {
                        data = _uf$fi$showModalCallbackFunction(data);
                    } catch(e) {}
                    //For ??3y?Tó?μ?UIModel 20100712 lzhm BasicInfor.jsμ?onbeforeunloadê??t??o?′|àí￡?ò??°·t???÷??SimplePageμ?OnInitComplete??o?ê1ó?
                    //没有返回值的返回认为是客户直接点[X]关闭的窗口，无所谓什么返回模式
                    if (window.clearUIState) {
                        //alert(window.clearUIState);
                        if (window.$) {
                            $.get(window.clearUIState);
                        }
                        window.clearUIState = null;
                    }
                    if (data && typeof (data) == "string" && !(window.Escaped == "true"))
                        try {
                            data = unescapeHTML(data);
                        } catch (error) {
                            data=data;
                        }
                        
                    window.Escaped = null;
                    if (obj && obj.showDialogCallback) {
                        if (args) {
                            obj.showDialogCallback(data, args);
                        } else {
                            obj.showDialogCallback(data, func, showSaveDialogStatusList, _frameWindow, closeId, i);
                        }

                    }
                    else if (typeof obj === "function") {
                        obj(data);
                    }
                    while (window.ZlayerCallBackArray.length > 0) {
                        var callbackFun = window.ZlayerCallBackArray.pop();
                        if (typeof callbackFun === "function") {//是方法的直接调用
                            callbackFun(data);
                        }
                        else {
                            callbackFun.showDialogCallback(data);
                        }
                    }
                }
            });
        // }
    }
} //end ShowModalDialogForAll  
showModalDialogForAll = ShowModalDialogForAll;
function BeforeShowModalDialog(url, title, height, width) {
    _ClientPostBackManager.Runing = false;
    //url = encodeURI(url);
    url = AppendPopupUrl(url, title);

    url = url.replace(/\%2501/g, "%25_@U9URLEncodeForNull@_01");

    var winHeight = parseInt(height, 10);
    if (isNaN(winHeight)) {
        winHeight = 418;
    }

    /*if (navigator.userAgent.indexOf("MSIE 7") > 0 || navigator.userAgent.indexOf("MSIE 8") > 0) {
        winHeight += 11;
    } else {
        winHeight += 56;
    }*/
    var winWidth = parseInt(width, 10);
    if (isNaN(winWidth)) {
        winWidth = 590;
    } else {
        winWidth += 5;
    }
    winWidth += 12; //??D??ˉí?±êTD??ó?
    var _features = "dialogHeight:" + winHeight + "px; dialogWidth: " + winWidth + "px; edge: Raised; center: Yes; help: No; resizable:No; status: No;scrollBars:No;";
    window.ufTitle = title;

    if (title) {
        window.ufTitle = title;
    }

    return url;

} //end ShowModalDialog  

var _ret;

function AfterCloseDialog(ret) {
    _ret = ret;
    if (window.Sys && Sys.WebForms) {
        Sys.WebForms.PageRequestManager.getInstance().add_pageLoaded(RunParseFormReturnValue);
    } else {
        ParseFormReturnValue(ret);
    }
}

function RunParseFormReturnValue() {
    window.setTimeout(function () {
        try {
            ParseFormReturnValue(_ret);
        } catch (e) { }

    }, 0);
}

function ParseFormReturnValue(refInfoXml) {
    if (Sys && Sys.WebForms) {
        Sys.WebForms.PageRequestManager.getInstance().remove_pageLoaded(RunParseFormReturnValue);
    }
    var results = new ReferenceData();
    if (refInfoXml == null || refInfoXml == "") return results;
    var dom = PopupFormHelper.StringToXMLDom(refInfoXml);
    var returnNodes = dom.getElementsByTagName("FormReturn");
    if (returnNodes.length == 0)
        return;

    for (var i = 0; i < returnNodes.length; i++) {
        var returnNode = returnNodes[i];
        var assNodes = returnNode.getElementsByTagName("AssociationControl");
        var assScript = "";
        for (var j = 0; j < assNodes.length; j++) {
            var assNode = assNodes[j];
            var itemNodes = assNode.getElementsByTagName("AssociationItem");
            for (var k = 0; k < itemNodes.length; k++) {
                var item = itemNodes[k];
                var columnID = item.getAttribute("columnId");
                if (columnID) {
                    var rowIndex = item.getAttribute("rowIndex");
                    assScript += "if($find('" + item.getAttribute("controlId") + "')){$find('" + item.getAttribute("controlId") + "').SetReferenceCellValue(" + rowIndex + "," + columnID + ",";
                    assScript += "'" + item.getAttribute("value") + "',";
                    assScript += "'" + item.getAttribute("value") + "',";
                    assScript += "'" + item.getAttribute("value") + "');}";
                } else {
                    var strID = item.getAttribute("controlId");
                    if (strID.indexOf("_&_") == -1) {
                        assScript += "$find('" + item.getAttribute("controlId") + "').set_" + item.getAttribute("property") + "( ";
                        assScript += "'" + item.getAttribute("value") + "');";
                    } else //gct20080917:DropDownButtonμ?IDoíPopMenuItemμ?ItemID￡?·???·?ê?_&_
                    {
                        var ids = strID.split("_&_");
                        if (ids.length != 2) continue;
                        if (item.getAttribute("property").toString() == "Enabled")
                            assScript += "if($find('" + ids[0] + "')){$find('" + ids[0] + "').SetMenuItemEnableByItemID('" + ids[1] + "','" + item.getAttribute("value") + "');}";
                        else if (item.getAttribute("property").toString() == "Visible")
                            assScript += "if($find('" + ids[0] + "')){$find('" + ids[0] + "').SetMenuItemVisibleByItemID('" + ids[1] + "','" + item.getAttribute("value") + "');}";
                    }
                }

            }

        }
        eval(assScript);
        var refreshNodes = returnNode.getElementsByTagName("RefreshWindow");
        if (refreshNodes.lenght > 0) {
            var refreshNode = refreshNodes[0];
            var ctrl = refreshNode.getAttribute["eventControl"];
            __doPostBack(ctrl.id);
        }
    }
    _ret = null;
    return;
}

//暂时先这样修改，后面出了问题再进行修正。后面需要补一个包含回调函数的对象
function ShowQueryRptDialog(url, window, _features, obj) {
    //zlayer.open({
    //    //  type: 2,
    //    //skin: 'layui-layer-lan',
    //    title: title,
    //    // fix: false,
    //    //  shadeClose: false,
    //    // maxmin: false,
    //    area: [width + "px", height + "px"],
    //    content: url,
    //    endHandle: function (data) {
    //        var retv = window.returnValue;
    //        if (retv && typeof (retv) == "string") {
    //            retv = unescapeHTML(retv);
    //        }
    //        if (obj && obj.showDialogCallback) {
    //            obj.showDialogCallback(retv);
    //        }
    //    }
    //});
    window.showModalDialog(url, window, _features, obj);
}

function AddtoFavorites() {
    var url = GetRealUrl4Fav();
    if (url.split("/display.aspx?").length > 1) {
        url = "display.aspx?" + url.split("/display.aspx?")[1];
    }
    var rect = showModalDialog('../ufsoft/AddQuickMenu.aspx?title=' + encodeURIComponent(window.document.title) + '&url=' + encodeURIComponent(url), window, 'dialogWidth:305px;dialogHeight:100px;edge: Raised; center: Yes; help: No; resizable:No; status: No;scrollBars:No;');
    if (rect && rect == "true")
        this.theForm.submit();
    return false;
}

function replaceValue(urlStr, iKeyLocation, iKeyLength, replaceValue) {
    var replacedUrl = "";
    var startUrlStr = urlStr.substr(0, iKeyLocation + iKeyLength)
    var tempEndUrlStr = urlStr.substr(iKeyLocation + iKeyLength, urlStr.length);
    var iEndUrlStr = tempEndUrlStr.indexOf("&");
    var endUrlStr = "";
    if (iEndUrlStr > 0) {
        endUrlStr = tempEndUrlStr.substr(iEndUrlStr, tempEndUrlStr.length);
        replacedUrl = startUrlStr + replaceValue + endUrlStr;
    } else {
        replacedUrl = startUrlStr + replaceValue;
    }
    return replacedUrl;
}
function IsContainKey(targetStr, key) {
    re = new RegExp(key, "g");
    r = targetStr.search(re);            // 查找字符串。
    return (r);
}

function ToggleSettings() {
    var frame = window.frames[0].window.frames["__split_area"];
    var element = frame.document.getElementById("navSettings");
    ToggleDisplay(element);
    return false;
}
// 修改密码 By fanfree at 071129
function ChangePWD() {
    ShowModalDialog("../erp/simple.aspx?lnk=f2e0a1fe-2c65-495b-8e18-518387b3e596", "", "116", "270", "no", "no");
}
//显示帮助
function openHelp() {
    var cultureName = getCultureName();
    window.open("../help/" + cultureName + "/U9help-" + cultureName + ".htm");
}

function openContextHelp() {
    if (window.event.keyCode == 118) {
        var helpID = "";
        if (window.url2HelpID_Custom != undefined) {
            helpID = url2HelpID_Custom();
        } else {
            helpID = url2HelpID();
        }
        FMCOpenHelp(helpID, null, null, null);
        window.event.keyCode = 0;
        $Event(event).preventDefault();
        $Event(event).stopPropagation();
        return false;
    } else if (window.event.keyCode == 116 && !window.event.ctrlKey) {
        if (window.top.DocumentManager) {
            window.top.DocumentManager.liceseKeyDown(window);
        }
    } else if(window.event.keyCode == 8){  //判断按键为backSpace键 -- 屏蔽backspace按键 -- weiyina -- 20170828
        //获取按键按下时光标做指向的element
        var elem = window.event.relatedTarget || window.event.srcElement || window.event.target || window.event.currentTarget; 
        
        //判断是否需要阻止按下键盘的事件默认传递
        var name = elem.nodeName;
        if(name!='INPUT' && name!='TEXTAREA'){
            $Event(event).preventDefault();
            $Event(event).stopPropagation();
            return false;
        }
        var type_e = elem.type.toUpperCase();
        if(name=='INPUT' && (type_e!='TEXT' && type_e!='TEXTAREA' && type_e!='PASSWORD' && type_e!='FILE')){
            $Event(event).preventDefault();
            $Event(event).stopPropagation();
            return false;
        }
        if(name=='INPUT' && (elem.readOnly==true || elem.disabled ==true)){
            $Event(event).preventDefault();
            $Event(event).stopPropagation();
            return false;
        }
    }
}

//Modified By Yin Mingjun 2012/04/10
//  ----Move to UI.Common.js
//
//function getCultureName()
//{
//    if(window.CurrentCultureName)
//        return window.CurrentCultureName;
//    var cultureName;
//    cultureField=document.getElementById("CultureName");
//    if (cultureField==null)
//    {
//        cultureName="zh-CN";
//    }
//    else
//    {
//        cultureName=cultureField.value;
//    }
//    window.CurrentCultureName = cultureName;
//    return cultureName;
//}

//替换规则 "."-->"__" 参数中的"="替换为"__"
function url2HelpID() {
    var helpID, re, paraValue;
    re = /\./g;
    var pageUri = getPageUri();
    if (window.top.menuManager)
        paraValue = getPageFristPara(pageUri);
    else
        paraValue = getPageFristPara();
    var helpID = pageUri.replace(re, "__");
    if (paraValue != null) {
        helpID += "__" + paraValue
    }
    return helpID;
}

function getPageUri() {
    var pageUri;
    pageUri = document.getElementById("CurrentPage").value;
    return pageUri;
}

function getPageFristPara() {
    var pageFirstPara;
    var pageRawUrl = document.getElementById("RawUrl").value;
    var pageParas = pageRawUrl.split("&");
    if (pageParas.length > 1) {
        var paraNameValue = pageParas[1];
        var paraItem = paraNameValue.split("=");
        if (paraItem[0] != "sId") {
            pageFirstPara = paraItem[1];
        }
    }
    return pageFirstPara;
}

function getPageFristPara(lnk) {
    var firstPara;
    if (window.top.menuManager) {
        var menuManager = window.top.menuManager;
        var paras = menuManager.urlCompare.getParameters(document.getElementById("RawUrl").value);
        var appList = menuManager.urlApplicationNodeList[lnk];
        firstPara = paras[appList[0]];
        return firstPara;
    }
    return firstPara;
}
//EditorWebpart展开收合节点 BY Fanfree At：2006-03-30
function collapseFunc(EditotPartID, ImageName) {
    if (document.all(EditotPartID.id).style.display == "block") {
        document.all(EditotPartID.id).style.display = "none";
        document.all(ImageName.id).src = '../images/plus.gif';
    }
    else {
        document.all(EditotPartID.id).style.display = "block";
        document.all(ImageName.id).src = "../images/minus.gif";
    }
}
//EditorWebpart的宽度的收缩 By Fanfree At：2006－04－05
function changeWidth() {
    var minMaxIcon = document.all['minMaxIcon'];
    //var imageSrc = minMaxIcon.src.substring(0, minMaxIcon.src.lastIndexOf('/')+1);
    var imageName = minMaxIcon.src.substring(minMaxIcon.src.lastIndexOf('/') + 1, minMaxIcon.src.length);
    //alert(imageName);
    if (imageName == "tpmax.gif") {
        //change width
        document.all('webpartTd').style.width = "70%";
        minMaxIcon.src = "../images/tpmin.gif";
    }
    else {
        document.all('webpartTd').style.width = "75%";
        minMaxIcon.src = "../images/tpmax.gif";
    }
}
//*************Longhorn Glass*************/
var current = null;
var dragging = false;
var startedDragging = false;

function setCurrent(w) {
    if (w != current) {
        // unset old current
        if (current)
            current.className = 'window';
        // set current
        current = w;
        current.className = 'current window';
        // put current on top
        //document.getElementById("windows").appendChild(current);
    }

    // init drag
    var offsetX = event.x - parseInt(w.currentStyle.left);
    var offsetY = event.y - parseInt(w.currentStyle.top);
    if (offsetY < 80) {
        dragging = true;
        dragEffect = function () {
            w.style.pixelLeft = event.x - offsetX;
            w.style.pixelTop = event.y - offsetY;
        }
    } else {
        var width = parseInt(w.currentStyle.width);
        var resizeX = offsetX > width - 10;
        var height = parseInt(w.currentStyle.height);
        var resizeY = offsetY > height - 10;
        if (resizeX || resizeY) {
            dragging = true;
            var offsetX = event.x - width;
            var offsetY = event.y - height;

            dragEffect = function () {
                if (resizeX)
                    w.style.pixelWidth = event.x - offsetX;
                if (resizeY)
                    w.style.pixelHeight = event.y - offsetY;
            }
        }
    }
}

function calcResize(w) {
    var offsetX = event.x - parseInt(w.currentStyle.left);
    var offsetY = event.y - parseInt(w.currentStyle.top);
    var width = parseInt(w.currentStyle.width);
    var resizeX = offsetX > width - 10;
    var height = parseInt(w.currentStyle.height);
    var resizeY = offsetY > height - 10;
    w.style.cursor = (resizeX || resizeY) ? (resizeY ? "S" : "") + (resizeX ? "E" : "") + "-resize" : "default";
}

var dragEffect;

function moveCurrent() {
    if (!dragging || !current)
        return;

    if (event.button == 0) {
        releaseCurrent();
        return;
    }

    if (!startedDragging) {
        current.className = 'dragging current window';
        startedDragging = true;
    }

    dragEffect();
}

function releaseCurrent() {
    if (!current)
        return;

    current.className = 'current window';
    dragging = false;
    startedDragging = false;
}

function makeUnselectable(e) {
    e.unselectable = true;
    if (e.className == 'content')
        return;

    for (var c = e.firstChild; c; c = c.nextSibling)
        if (c.nodeType == 1)
            makeUnselectable(c);
}

//zjx

function onClickEvent() {
    setCurContainer();
    //alert(PD_textBox_HiddenContainer.value);      
}
var PD_textBox_HiddenContainer = null;

function setCurContainer() {
    //
    if (PD_textBox_HiddenContainer == null) {
        PD_textBox_HiddenContainer = document.all(strPD_textBox_HiddenContainer);
    }
    //
    var elementid = event.srcElement.id;
    var nCount = 0;
    var ele = event.srcElement;
    while (elementid == "") {
        if (nCount > 10) {
            break;
        }
        //
        elementid = ele.parentElement.id;
        if (ele.tagName != 'IMG') {
            PD_textBox_HiddenContainer.value = elementid;
        }
        ele = ele.parentElement;
        nCount++;
    }

    return elementid;
}

function setEnabledByContainer(c, bEnabled) {
    var nodes = c.childNodes;

    if (nodes) {
        for (var i = 0; i < nodes.length; i++) {
            try {

                nodes[i].Enabled = bEnabled;
            } catch (E) { }

            setEnabledByContainer(nodes[i], bEnabled);

        }
    } else {
        try {
            c.Enabled = bEnabled;
        } catch (E) { }
    }
}

function setValuedByContainer(c, val) {
    var nodes = c.childNodes;

    if (nodes) {
        for (var i = 0; i < nodes.length; i++) {
            try {
                nodes[i].Value = val;
            } catch (E) { }

            setEnabledByContainer(nodes[i], val);

        }
    } else {
        try {
            c.Value = val;
        } catch (E) { }
    }
}
//window.status="UFIDA U9 M1...             ";

function isNumber(para) {
    var isNumber = false;
    try {
        parseFloat(para);
        isNumber = true;
    } catch (e) { }
    return isNumber;
}


function GetSelectedNodes(treeID, toGrid) {
    var grid = eval(toGrid).control;
    var tree = eval(treeID);
    var selectedNodes = [];
    for (var i = 0; i < tree.AllNodes.length; i++) {
        if (tree.AllNodes[i].Checked) {
            selectedNodes.push(tree.AllNodes[i]);
        }
    }
    var text = "";
    var value = "";
    if (selectedNodes != 0) {
        for (var i = 0; i < selectedNodes.length; i++) {
            text = selectedNodes[i].Text;
            value = selectedNodes[i].Value;
            if (!grid.ContainOf("Item", value)) {
                grid.AddNewRow();
                grid.SelectRow(grid.get_Rows() - 1, true);
                grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("Item"), value);
                grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("FieldDisplayName"), text);
                grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("FieldTitle"), text);
            }
        } //end for
    } else { //alert("There are no selected nodes!")
    };
}

function GetSelectedNodes(treeID, toGrid, PTflag) {
    var tree = document.getElementById(treeID);
    if (tree) {


        var grid = eval(toGrid).control;
        var tree = eval(treeID);
        //var selectedNodes=[]; 
        var selectedNodes = new Array();
        for (var i = 0; i < tree.AllNodes.length; i++) {
            if (tree.AllNodes[i].Checked) {
                selectedNodes.push(tree.AllNodes[i]);
            }
        }
        var text = "";
        var value = "";
        if (selectedNodes.Count != 0) {
            for (var i = 0; i < selectedNodes.length; i++) {
                text = selectedNodes[i].Text;
                value = selectedNodes[i].Value;
                if (!grid.ContainOf("Item", value) && value.lastIndexOf(PTflag) < 0) {
                    text = GetParentNode(selectedNodes[i]);
                    grid.AddNewRow();
                    grid.SelectRow(grid.get_Rows() - 1, true);
                    grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("Item"), value);
                    grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("FieldDisplayName"), text);
                    grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("FieldTitle"), text);
                }
            } //end for
        } else { //alert("There are no selected nodes!")
        };
    }
}


function GetParentNode(node) {
    var displayName = node.Text;
    if (node.Parent != null) {
        return GetParentNode(node.Parent) + "." + node.Text;
    } else {
        return displayName = node.Text;
    }
}

function DeleteRow(toGrid) {
    var grid = eval(toGrid).control;
    var rowIndex = grid.get_CurrentRowIndex();
    var columnIndex = grid.GetColumnIndex("IsFixed");
    if (grid.GetCellValue(rowIndex, columnIndex) == null || grid.GetCellValue(rowIndex, columnIndex).Value != 'true') {
        grid.DeleteRowAlways();
    }
}

function GetReportSelectedNodes(treeID, toGrid) {
    var grid = eval(toGrid).control;
    var tree = eval(treeID);
    var selectedNodes = [];
    for (var i = 0; i < tree.AllNodes.length; i++) {
        if (tree.AllNodes[i].Checked) {
            selectedNodes.push(tree.AllNodes[i]);
        }
    }
    var text = "";
    var value = "";
    if (selectedNodes != 0) {
        for (var i = 0; i < selectedNodes.length; i++) {
            text = selectedNodes[i].Text;
            value = selectedNodes[i].Value;
            var values = value.split("^^")
            if (values.length > 1) {
                if (values[1] == "catalog") continue;
            }
            if (!grid.ContainOf("Item", value)) {
                grid.AddNewRow();
                grid.SelectRow(grid.get_Rows() - 1, true);
                grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("Item"), value);
                grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("FieldDisplayName"), text);
                grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("FieldTitle"), text);
            }
        } //end for
    }
}


function ReportTreeAfterClientCheck(node) {
    var check = true;


    if (node.Checked == false) {
        node.UnCheck();
        check = false;
    } else {
        node.Check();
        check = true;
    }


    if (node.Nodes != null) {
        for (var i = 0; i < node.Nodes.length; i++) {
            if (check == true) {
                if (node.Nodes[i].Checked == false)
                    node.Nodes[i].Check();
            } else {
                if (node.Nodes[i].Checked == true)
                    node.Nodes[i].UnCheck();

            }


            if (node.Nodes[i].Nodes != null)
                ReportTreeAfterClientCheck(node.Nodes[i]);
        }
    }

    return;
}

function GetRealUrl4Fav(url)  //快捷方式 中使用，取得页面地址
{
    // var ref = window.location.href;
    //传入导航菜单项中原始的url作为快捷方式的地址 -- weiyina -- 20170428
    var ref = null;
    if (url) {
        ref = url;
    } else {
        ref = window.Location.href;
    }
    
    var field4Favorite = document.getElementById("keyValues4Favorite");
    if (field4Favorite) {
        var keyValues4Favorite = document.getElementById("keyValues4Favorite").value;
        if (keyValues4Favorite) {
            var favoriteKVStr = keyValues4Favorite.substr(0, keyValues4Favorite.length - 1);
            var favoriteKeyValues = favoriteKVStr.split(";");
            for (var i = 0; i < favoriteKeyValues.length; i++) {
                favoriteKeyValue = favoriteKeyValues[i].split("=");
                //替换key的Value 
                var keyLocation = IsContainKey(ref, "\\?" + favoriteKeyValue[0] + "=")
                if (keyLocation < 0)
                    keyLocation = IsContainKey(ref, "&" + favoriteKeyValue[0] + "=")

                if (keyLocation > 0) {
                    keyLocation += 1;
                    ref = replaceValue(ref, keyLocation, favoriteKeyValue[0].length + 1, favoriteKeyValue[1]);
                } else {
                    ref += "&" + favoriteKeyValue[0] + "=" + favoriteKeyValue[1];
                }
            }
            //window.external.AddFavorite(url, document.title);
        }
    }
    // ref = AppendNavigateUrl(ref);
    return ref;
}


/*
var DelFirst = true;
function RemoveRow (id){
                
                if(_ClientCallBackManager.Runing&&DelFirst){DelFirst = false;return false;}  
                var _this = $find(id);
                if(!_this){return;}
                DelFirst = true;
                _this.m_gridBodyEventsHandler.CanEndEdit(false);
                var sumColumnsDataList = _this.m_gridBodyEventsHandler.GridEditHelper.GetSumColumnsDataList();
                if(_this.m_rows == 1){
                    if(_this.m_gridBodyEventsHandler !=null)
                    {   
                        _this.m_gridBodyEventsHandler.ClearData();                      
                    }   
                }else{              
                    _this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.DeleteRow(_this.m_currentRowIndex);
                }
                _this.m_tableDimentionManager.AdjustTableHeadPosition();
                //zjx add                              
                _this.m_currentColumnIndex = _this.GetFirstColumn();               
                _this.m_gridFaciesManager.Focus();
                _this.StartEdit();
  
                _this.m_gridBodyEventsHandler.GridEditHelper.CalculateHelper.ResetCalculateAggregations(sumColumnsDataList);

                _this.OnAfterRowDeleted();    
                _this.OnRowChanged();
                return true;
                
    }
  */
//
function RedirectToMe(url) {
    window.location.href = url;
}

function Redirect(url) {
    window.setTimeout("RedirectToMe('" + url + "')", 0);
    //window.setTimeout("alert(123)",1000);
}

function EndPage() {
    //if(null!=_Flag){_Flag.value="";}
}

//个性化设计WebPart中的，关联控件设计器按钮js事件
function ShowAssociationDesigner(url, btn) {
    lockElement(true);
    var _features = "dialogHeight:546px; dialogWidth: 984px; edge: Raised; center: Yes; help: No; resizable:Yes; status: No;scrollBars:Yes;";
    if (btn)
        window.btnRelatedControlID = btn.name;
    url = AppendPopupUrl(url);
    //showModelessDialog(url, window, _features);
    //function ShowModalDialogForAll(url, title, height, width, hideStatusBar, isModelessDialog, obj,args) {
    //原来646 修改为500
    ShowModalDialogForAll(url, '', '500', '984', true, false, window, undefined);
    return false;
}

function openAbout() {
    ShowModalDialog("../ufsoft/About.aspx", "", 310, 497, true, false);
}

function InitPage(func) {
    var func = document.getElementById("BehaviorExcute").value;
    var othersFunc = null;
    var ele = document.getElementById("NeedInitControls");
    if (ele) {
        othersFunc = ele.value;
    }
    if (func) {
        var funcs = func.split(":");
        for (var j = 0; j < funcs.length; j++) {
            if (funcs[j]) {
                try {
                    eval(funcs[j] + "()");
                } catch (ee) { }
            }
        }
    }
    if (othersFunc) {
        var othersFunc = othersFunc.split(";");
        for (var j = 0; j < othersFunc.length; j++) {
            if (othersFunc[j]) {
                try {
                    eval(othersFunc[j]);
                } catch (ee) { }
            }
        }
    }
}

function SetFindBtnConfirm(findBtnClientID, findBtnClientName, url, returnId) {
    var findBtn = window.document.all(findBtnClientID + '_button');
    if (!findBtn) findBtn = window.document.all(findBtnClientID);
    if (findBtn) {
        if (findBtn.length) {
            if (findBtn.length > 0) {
                findBtn = findBtn[1];
            }
        }
    }

    //gct20091117￡oóéóú2úéú?ú′?D1??￡?DT??????ò???′ú??
    //findBtn.onclick=function(){FindButton_Confirm(url,findBtnClientName,returnId);};

    findBtn.onclick = onFindBtnClick;
    findBtn.onclick_url = url;
    findBtn.onclick_findBtnClientName = findBtnClientName;
    findBtn.onclick_returnId = returnId;
}

function onFindBtnClick() {
    FindButton_Confirm(this.onclick_url, this.onclick_findBtnClientName, this.onclick_returnId);
}

function FindButton_Confirm(url, findBtnName, returnId) {
    //var ConfirmValue = "";
    //var url = url.substring(0, url.lastIndexOf(")"));

    //url += ",false,\"" + findBtnName + "\",\"" + returnId + "\")";
   
    window.ZlayerCallBackArray.push(function (ConfirmValue) {
        var keyValue = GetRecordId(ConfirmValue);
        if (keyValue == "") return;
        if (keyValue != "") //?aà?Dèòa?D??ConfirmValue?aêy×?￡¨?y?ò±í′?ê?￡?
        {
            window.document.getElementById(returnId).value = keyValue;
        }
        __doPostBack(findBtnName, '');
    });
    eval(url);
}

function SetButtonConfirm(btnClientID, btnClientName, url) {
    var eleBtn = window.document.all(btnClientID + '_button');
    if (!eleBtn) eleBtn = window.document.all(btnClientID);
    if (eleBtn) {
        if (eleBtn.length) {
            if (eleBtn.length > 0) {
                eleBtn = eleBtn[1];
            }
        }
    }

    //gct20091117￡oóéóú2úéú?ú′?D1??￡?DT??????ò???′ú??
    //eleBtn.onclick=function(){Button_Confirm(url,btnClientName);};

    eleBtn.onclick = onToolbarButtonClick;
    eleBtn.onclick_url = url;
    eleBtn.onclick_btnClientName = btnClientName;
}

function onToolbarButtonClick() {
    Button_Confirm(this.onclick_url, this.onclick_btnClientName);
}

function Button_Confirm(url, btnName) {
    var Ie = navigator.userAgent;
    function checkValue(ConfirmValue) {
        if (ConfirmValue == "" || ConfirmValue == undefined) return;
        if (ConfirmValue != "")//这里需要判断ConfirmValue为数字（正则表达式）
        {
            if (caCheck(btnName) === false) {
                return false;
            }
            __doPostBack(btnName, '');
        }
    }
   
    //如果ret有返回值，则代表经过eval后，没有弹出框，反而返回了值，那么直接调用checkValue即可。如果没有返回值则代表弹出了框，对返回值的操作放到回调里。
    var ret = eval(url);
    if (ret == undefined) {
        window.ZlayerCallBackArray.push(checkValue);
    }
    else
        checkValue(ret);
}

function SetDDBtn_PopUpMenu(url, menuID, menuClientID, index) {
    var popUpMenuID = window.document.all(menuClientID);
    setTimeout(function () {
        SetDDBtn_PopUpMenuBind(url, popUpMenuID, menuClientID, index);
    }, 0);
}

function SetDDBtn_PopUpMenuBind(url, popUpMenuID, menuClientID, index) {
    if (!popUpMenuID.control) {
        setTimeout(function () {
            SetDDBtn_PopUpMenuBind(url, popUpMenuID, menuClientID, index);
        }, 0);
        return;
    }
    popUpMenuID.control.add_BeforeMenuItemClick(function () {
        SetDDBtn_PopUpMenuConfirm(url, popUpMenuID, menuClientID, index);
    });
}

function SetDDBtn_PopUpMenuConfirm(url, popUpMenuID, menuClientID, index) {
    //if(popUpMenuID.control.eventSource.index.substr(2,1) != index) 
    var eventSource = popUpMenuID.control.eventSource;
    var indexSource = eventSource.cusAttr("index");
    if (eventSource.cusAttr("index") && eventSource.cusAttr("index").split('.').length > 1)
        indexSource = eventSource.cusAttr("index").split('.')[1];
    if (indexSource != index)
        return;
    var Ie = navigator.userAgent;
    var ConfirmValue = "";
    //弹出框之后执行的代码，放到回调函数里
    window.ZlayerCallBackArray.push(function (ConfirmValue) {
        if (ConfirmValue == "" || ConfirmValue == undefined) {
            popUpMenuID.control.set_DeleteFlag(false);
            return;
        }
        if (ConfirmValue != "") //?aà?Dèòa?D??ConfirmValue?aêy×?￡¨?y?ò±í′?ê?￡?
        {
            popUpMenuID.control.set_DeleteFlag(true);
            return;
            //__doPostBack(popUpMenuID.id,'');          
        }
    });
    eval(url);
}

function GetRecordId(returnXML) {
    var dom;
    var result = "";

    try {
        //if (window.ActiveXObject)
        //    dom = new ActiveXObject("Microsoft.XMLDOM");
        //else if (document.implementation && document.implementation.createDocument)
        //    dom = document.implementation.createDocument("", "doc", null);

        //dom.async = false;
        //dom.loadXML(returnXML);

        dom = XMLHelper.createXMLDocument(returnXML);

        var returnNodes = dom.getElementsByTagName("ReferenceReturn");

        for (var i = 0; i < returnNodes.length; i++) {
            var curRow = returnNodes[i];

            var fieldNodes = curRow.getElementsByTagName("ReturnField");

            for (var j = 0; j < fieldNodes.length; j++) {
                var item = fieldNodes[j];
                result = item.getAttribute("value");
                break;
            }

            break;
        }
    } catch (e) { }
    return result;
}

function ResetLayout(strPara) {
    // alert(strPara);return;
    document.getElementById("layoutInfor").value = strPara;
}

function ResetArea(strPara) {
    document.getElementById("hiddenArea").value = strPara;
    if (strPara) {
        var para = strPara.split(';');
        for (var i = 0; i < para.length; i++) {
            var vs = para[i].split(':');
            if (vs.length == 2) {
                if (vs[0]) {
                    var o = document.getElementById(vs[0]);
                    if (o) {
                        o.style.display = "none";
                    }
                }
            }

        }
    }
}

function ResetHiddenArea(id, changeHeight) {
    var v = document.getElementById("hiddenArea").value;
    v += id + ":" + changeHeight + ";";
    document.getElementById("hiddenArea").value = v;
}

function layoutThis(type, objectDiv) {
    if (type == 0) {
        objectDiv.style.backgroundColor = "#eeeeee";
    } else if (type == 1) {
        objectDiv.style.backgroundColor = "";
    } else if (type == 2) {
        if (event.ctrlKey) {
            ResetHiddenArea(objectDiv.id, objectDiv.style.pixelHeight);
            objectDiv.style.display = "none";
            __doPostBack("", "HideArea");
        }
    }
}

var outerLayout, middleLayout, innerLayout;

function DoLayout() {
    var str = document.getElementById("layoutInfor").value;
    if (str) {
        var para = str.split('*');
        if (para.length >= 4) {
            if (para[0].trim()) {
                if (para[3] == "close") {
                    if (para[0] == "outer") {
                        outerLayout.close(para[1]);
                    } else {
                        innerLayout.close(para[1]);
                    }
                }
            }
        }
    }
}

function initLayout() {
    outerLayout = $('body').layout({
        center__paneSelector: ".outer-center",
        west__paneSelector: ".outer-west",
        east__paneSelector: ".outer-east",
        west__size: 125,
        east__size: 125,
        spacing_open: 0 // ALL panes
            ,
        spacing_closed: 0 // ALL panes      
            ,
        center__onresize: "innerLayout.resizeAll"
    });

    innerLayout = $('div.toppanel').layout({
        center__paneSelector: ".inner-center",
        west__paneSelector: ".inner-west",
        east__paneSelector: ".inner-east",
        west__size: 75,
        east__size: 75,
        spacing_open: 0 // ALL panes
            ,
        spacing_closed: 0 // ALL panes
            ,
        west__spacing_closed: 0,
        east__spacing_closed: 0
    });
}

function EndRequestAction() {
    initLayout();
    DoLayout();
}

function getSize() {
    return window.screen.width + ':' + window.screen.height;
}
function caCheck(script) {
    var btnIds = $("#_CAVerifyBtnClientIds_").val();
    if (btnIds) {
        var ca = 0;
        var caTip = 0;
        var uuid = 0;
        if (!top.CA && window.dialogArguments) {
            ca = window.dialogArguments.top.CA;
            caTip = window.dialogArguments.top.CATip;
            uuid = window.dialogArguments.top.Math.uuid();
        } else {
            ca = top.CA;
            caTip = top.CATip;
            uuid = top.Math.uuid();
        }
        if (ca) {
            var btnId = script.substring(14, script.length - 5).replace(/\$/g, "_");
            if (btnIds && btnIds.indexOf(btnId) > -1) {
                if (ca.enableCA(true) === false) {
                    return false;
                }
                if (ca.status == 1) {
                    var isGoSubmit = false;
                    var signId = uuid;
                    var signMsg = ca.sign(signId);
                    var caSignCode = 0;
                    if (signMsg.indexOf('signCode:') != -1) {
                        caSignCode = signMsg.replace('signCode:', '');
                    } else {
                        caTip.setText(signMsg);
                        return false;
                    }
                    $.ajax({
                        type: 'POST',
                        url: '../mvc/Login/SignVerifyData?certSN=' + ca.getCertSN(),
                        async: false,
                        data: {
                            //---
                            //certSN: ca.getCertSN(),//证书序列号
                            signId: signId,
                            caSignCode: caSignCode//提交签名Str到后端校验
                            //---
                        },
                        success: function (data) {
                            //根据data  决定是否return false;
                            isGoSubmit = data;
                        }
                    });
                    if (isGoSubmit === 'False') {
                        ca.tipMsg('USB Key签名校验失败！');
                        return false;
                    }
                    $('#_CertSNField_').val(ca.getCertSN());//设置hidden
                } else {
                    if (ca.status == 0)
                        return false;
                }
            }
        }
    }
};
 var _dropdown_box=null;//
var _date_dropdown_box=null;//
var _calendarControl=null;//
var constErrType = "";
var constErrDescription = "";
var constErrUnknown = "";
//
function _showCalendar(button,parentID)
{
//debugger;
	var _editor=button.parentElement.parentElement.getElementsByTagName("input")[0];
	if(!_editor.disabled)
	{
	_editor.setAttribute("dropDown_mode","calendar");
	_dropdown_btn_onmousedown(_editor);
	$Event(event).stopPropagation();
	$Event(event).preventDefault();
	}
}
//
function _showCalculator(button,parentID)
{
	var _editor=document.getElementById(parentID);
	_editor.setAttribute("dropDown_mode","calculator");
	_dropdown_btn_onmousedown(_editor);
}
//
function _dropdown_btn_onmousedown(editor)
{
	if (!isDropdownBoxVisible()){
		if (editor) showDropDownBox(editor);
	}
	else
		hideDropDownBox();	
}
function isChild(obj, parentObj) {
	var tmpObj=obj;
	var result=false;
	if (parentObj) {
		while (tmpObj) {
			if (tmpObj==parentObj){
				result=true;
				break;
			}
			tmpObj=tmpObj.parentElement;
		}
	}
	return result;
}
function onPropertyChanged(){
	var div=_dropdown_box;
	if(typeof(div)=="undefined"||div==null)return 1;
	var active=document.activeElement;
	if(typeof(active)=="undefined"||active==null)return 1;
	var bl=isChild(active,div);	
	if(!bl&&active!=div.editor) {
		hideDropDownBox();
	}
}
document.onpropertychange=onPropertyChanged;
//
function isDropdownBoxVisible(){
	if (typeof(_dropdown_box)!="undefined" && _dropdown_box)
		return (_dropdown_box.style.visibility=="visible")
	else
		return false;
}
//
function showDropDownBox(_editor){
	try{
		if (!isDropdownBoxVisible()){
			getDropDownBox(_editor);
			with (_dropdown_box){
				style.overflowY="hidden";
				setAttribute("editor", _editor);

				if (filters.blendTrans.status!=2) {
					if (!(getIEVersion()<"5.5")) filters.blendTrans.apply();
					style.visibility="visible";
				}

				if (!_dropdown_box.cached){
					var dropDown_mode=_editor.getAttribute("dropDown_mode");
					switch(dropDown_mode){
						case "calendar":{
							createCalendar(_dropdown_box);
							_dropdown_box.onkeydown=_calendar_onkeydown;
							break;
						}
						case "calculator":{
							createCalculator(_dropdown_box);
							break;
						}
						case "combox":{
							createCombox(_dropdown_box);
							break;
						}
					}
				}
				else{
					if (getIEVersion()<"5.5"){
						for (var i=0; i<_dropdown_box.children.length; i++){
							_dropdown_box.children[i].style.visibility="visible";
						}
					}
				}
				initDropDownBox();
			}
		}
	}
	catch(e){
		processException(e);
	}
}
function dropDownLocate(){
	var editor=_dropdown_parentbox.editor;
    var d=editor.value;
    d=disFormatDate(d);
	var _date=new Date(d);
	if (!isNaN(_date)) setCalendarDate(_date);
}
//
function getDropDownBox(editor){
	_dropdown_box=_date_dropdown_box;	
	if (!_dropdown_box){
		_dropdown_box=document.createElement("<DIV style=\" background-color: white; padding: 0px; "+
			"overflow-X: hidden; position: absolute; visibility: hidden; filter: blendTrans(duration=0.3); z-index: 10000\"></DIV>");
		document.body.appendChild(_dropdown_box);
	}
}
//
function initDropDownBox(){
	_dropdown_parentwindow=window;
	_dropdown_parentbox=_dropdown_parentwindow._dropdown_box;
	_dropdown_parentwindow._dropdown_window=window;
	sizeDropDownBox();
	if ((getIEVersion()>="5.5") &&
		_dropdown_parentbox.filters.blendTrans.status!=2)
		_dropdown_parentbox.filters.blendTrans.play();
	
	var editor=_dropdown_parentbox.editor;
	editor.focus();
	var dropDown_mode=editor.getAttribute("dropDown_mode");
	switch(dropDown_mode){
		case "calendar":{
			_calender_year.focus();
			if (editor) dropDownLocate();
			break;
		}
		case "calculator":{
			calculator_display.focus();
			var temp=getValidStr(editor.value);
			if(temp=="")
				temp=0;
			_calculator_setDisplay(temp);
			break;
		}
		case "combox":
		{
			var cmb = _dropdown_parentbox.firstChild;
			var cmbid = cmb.id.substring(0,cmb.id.indexOf("table")-1);	
			var para = eval(cmbid + "_para");
			var h = document.all(para[9]);
			var t = cmb;
			var sels = para[6];///
			var len1 =sels.length;
			for(var i=0;i<len1;i++)
			{
				var tmp = sels[i];
					
			}
			
			if(h.value.length>0)
			{
						if(para[2]!=null)
						{
							var a = para[2].parentElement.rowIndex;
							var b = para[2].cellIndex;
							para[2] = t.rows[a].cells[1];
							para[2].focus();
							
							if(para[0]!=null)
							{
								para[0] = t.rows[para[0].rowIndex];
							}
							if(para[1] != null)
							{
								para[1] = t.rows[para[1].rowIndex];
							}
							
							
							
						}
						else
						{
						/*
							if(para[0]!=null)
							{
								para[0] = t.rows[para[0].rowIndex];
							}
							if(para[1] != null)
							{
								para[1] = t.rows[para[1].rowIndex];
							}
						*/
									
							sels[0].cells[1].focus();
							selectcmbfirst(sels[0].cells[1],cmb,para,cmbid);
						}
			}
			else
			{
			para[0] = t.rows[0];
			para[1] = t.rows[0];
			if(t.rows.length>0)
			{
			para[2] = t.rows[0].cells[1];	
			t.rows[0].cells[1].focus();
		    selectcmbfirst(t.rows[0].cells[1],cmb,para,cmbid);
		    }

			}


		}
	}
}
//
function getAbsPosition(element, offsetObj){
//    debugger;
//	var _offsetObj=(offsetObj)?offsetObj:document.body;
//	var x=obj.offsetLeft;
//	var y=obj.offsetTop;
//	var tmpObj=obj.offsetParent;

//	while ((tmpObj!=_offsetObj) && tmpObj){
//		x+=tmpObj.offsetLeft+tmpObj.clientLeft-tmpObj.scrollLeft;
//		y+=tmpObj.offsetTop+tmpObj.clientTop-tmpObj.scrollTop;
//		tmpObj=tmpObj.offsetParent;
//	}
//	return ([x, y]);
var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
//      if (element) {
//        p = getStyle(element, 'position');
//        if (p == 'relative' || p == 'absolute') break;
//      }
    } while (element);
    return [valueL, valueT];
}
 function getStyle(element, style) {
    
    var value = element.style[style];
    if (!value) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        var css = document.defaultView.getComputedStyle(element, null);
        value = css ? css.getPropertyValue(style) : null;
      } else if (element.currentStyle) {
        value = element.currentStyle[style];
      }
    }

    if (window.opera && ['left', 'top', 'right', 'bottom'].include(style))
      if (getStyle(element, 'position') == 'static') value = 'auto';

    return value == 'auto' ? null : value;
  }
function sizeDropDownBox(){
	function _sizeDropDownBox(new_width, new_height){
		with (_dropdown_box){
			var editor=_dropdown_box.editor;
			var maxHeight=parseInt(editor.getAttribute("dropdown_height"));
			if (isNaN(maxHeight) || maxHeight<20) maxHeight=220;

			var pos=getAbsPosition(editor, document.body);
			var _posLeft=pos[0];
			var _posTop=pos[1]+editor.offsetHeight+1;
			
			if (document.body.offsetHeight>0)
			{
			if (_posTop+new_height>document.body.offsetHeight)
			{
			    _posTop=document.body.offsetHeight-new_height-editor.offsetHeight-2;
			}
			}

			if (new_height>maxHeight){
				new_height=maxHeight;
				new_width+=16;
				if (!(getIEVersion()<"5.5"))
					style.overflowY="scroll";
				else
					style.overflowY="visible";
			}
			else{
				style.overflowY="hidden";
			}			

			var document_width=document.body.clientWidth + document.body.scrollLeft;
			var document_height=document.body.clientHeight + document.body.scrollTop;

			if (_posLeft+new_width>document_width && document_width>new_width) _posLeft=document_width-new_width-10;
			if (_posTop+new_height>document_height && pos[1]>new_height) _posTop=pos[1]-new_height-1;
			style.posLeft=_posLeft;
			style.posTop=_posTop;
			style.posHeight=new_height+4;
			if (new_width>style.posWidth) style.posWidth=new_width;
			style.borderWidth="2px";
		}
	}
	try{
		var _width, _height;
		var dropdown=_dropdown_box.firstChild;
		switch(_dropdown_box.getAttribute("dropDown_mode")){
			case "calendar":{
				_width=CalendarTable.offsetWidth;
				_height=CalendarTable.offsetHeight;
				break;
			}
			case "calculator":{
				_width=CalculatorTable.offsetWidth;
				_height=CalculatorTable.offsetHeight;
				break;
			}
			default:{
				_width=dropdown.offsetWidth;
				_height=dropdown.offsetHeight;
				break;				
			}
		}
		_sizeDropDownBox(_width, _height);
	}
	catch(e){
	}
}
//
function hideDropDown() {
	var editor=_dropdown_parentbox.editor;
	_dropdown_parentwindow.hideDropDownBox();
	editor.focus();
}
//
function hideDropDownBox(){
	if (!_dropdown_box) return;
	if (isDropdownBoxVisible()){	
		_skip_activeChanged=true;
		var editor=_dropdown_box.editor;
		_dropdown_box.editor=null;			
		editor.cached_dropdownbox=null;
		_dropdown_window=null;
		if (getIEVersion()<"5.5"){
			for (var i=0; i<_dropdown_box.children.length; i++){
				_dropdown_box.children[i].style.visibility="hidden"
			}
		}
		_dropdown_box.style.visibility="hidden";
		_dropdown_box.removeNode(true);
		_dropdown_box=null;

		editor.dropDown_visible=false;
		if  (typeof(_dropdown_btn)!="undefined") _dropdown_btn.value="6";
		editor.focus();
	}
}

function dropDownSelected(){
	var editor=_dropdown_parentbox.editor;
	var d;
	var dropDown_mode=editor.getAttribute("dropDown_mode");
	switch(dropDown_mode){
		case "calendar":
		{
			var datatype=editor.getAttribute("dateType");
			d=formatDateTime(new Date(_calendarControl.year, _calendarControl.month, _calendarControl.day),datatype);
			break;
		}
		case "calculator":{
			d=_calculator_getResult();
			break;
		}
	}
	editor.value=d;
	var autoPostBack=editor.getAttribute("autopostback")=="True";
	if (autoPostBack)
	{
        __doPostBack(editor.id,"");
    }

	//hideDropDown();
	hideDropDownBox();
	//return false;
}

//
function getIEVersion(){
	var index=window.clientInformation.userAgent.indexOf("MSIE");
	if (index<0){
		return "";
	}
	else{
		return window.clientInformation.userAgent.substring(index+5, index+8);
	}
}
//
function processException(e){
	switch (typeof(e)){
		case "string":{
			if (e!="abort"){
				if (e)
					alert(e);
				else
					alert(constErrUnknown);
			}
			break;
		}

		case "object":{
			alert(e.description+"\n"+constErrType+":"+(e.number & 0xFFFF));
			break;
		}
	}
}
//
function compareText(str1, str2){
	str1=getValidStr(str1);
	str2=getValidStr(str2);
	if (str1==str2) return true;
	if (str1=="" || str2=="") return false;
	return (str1.toLowerCase()==str2.toLowerCase());
}
//
function isTrue(value){
	return (value==true || (typeof(value)=="number" && value!=0) ||
		compareText(value, "true") || compareText(value, "T") ||
		compareText(value, "yes") || compareText(value, "on"));
}
//
function getValidStr(str) {
	str+="";
	if (str=="undefined" || str=="null")
		return "";
	else
		return str;
}
//
function getInt(value){
	var result=parseInt(value);
	if (isNaN(result)) result=0;
	return result;
}
function InitPage(func){

	$("[ICK]").each(function(i,item){

	var controlType ="UF.UI."+item.getAttribute("ICK");
	/*var controlID=item.id;
	Init(controlID,eval(controlType));*/
 	var controlID=item.getAttribute("id");
	var controlTypeFn=(new Function("return "+controlType))();
	Init(controlID,controlTypeFn);

})
	 var func ;
	var tempInput=document.getElementById("BehaviorExcute");
	if(tempInput!=null){
 		 func = tempInput.value;
	}
   
    var funcAssHandler = "";
    if(document.getElementById("FixupEventHandler") != null)
        funcAssHandler = document.getElementById("FixupEventHandler").value;
    var othersFunc = null;
    var ele = document.getElementById("NeedInitControls");
    if(ele){
        othersFunc = ele.value;
    }
    if(func){
        var funcs = func.split(":");
        for(var j=0;j<funcs.length;j++){ 
            if(funcs[j]){
            try{
                eval(funcs[j]+"()");            
             }catch(ee){}
            }
        }
    }
    if(othersFunc){
        var othersFunc = othersFunc.split(";");
        for(var j=0;j<othersFunc.length;j++){ 
            if(othersFunc[j]){
            try{
                eval(othersFunc[j]);            
             }catch(ee){}
            }
        }
    }
    if(funcAssHandler){
        var funcAssHandlers = funcAssHandler.split(":");
        for(var j=0;j<funcAssHandlers.length;j++){ 
            if(funcAssHandlers[j]){
            try{
                eval(funcAssHandlers[j]+"()");            
             }catch(ee){}
            }
        }
    }
  var _onRowChanged = document.getElementById("_onRowChanged");//---绑定行点击事件  获得“工作流”新面板展示需要的数据（在此时机比较正确）
    if (_onRowChanged) {
        eval(_onRowChanged.value);
    }
};
/*******************************************
 ******Modified By Fanfree at 2006-8-16******
 ******说明:加入对鼠标在日历区域移动的控制***
 ******用以实现日历的字段隐藏;鼠标不能移动***
 ******太快，否则事件函数来不及反应       ***
 *******************************************/
/*******************************************
******Modified By Fanfree at 2006-9-2******
******说明:由于多个实例时实例彼此相互干扰***
******现修改为每次使用创建实例；故此在"关闭"、***
******"鼠标移出区域"、"选择日期"事件后对当前实例***
******卸载：
      1.鼠标移出卸载：document.body.removeChild(document.getElementById(this.id));
      window._dynarch_popupCalendar=null;
      2.关闭：cal.callCloseHandler()-->htc的onClose()方法-->cal.hide();
      3.选定日期后：Calendar.prototype._cell_onclick()-->cal.callHandler()-->htc的onSelected()方法
      -->cal.callCloseHandler()-->htc的onClose()方法-->cal.hide();      
*******************************************/
function GetTablesCells(tableItem) {
    var i, j;
    var cells = [];
    for (i = 0; i < tableItem.rows.length; i++) {
        for (j = 0; j < tableItem.rows[i].cells.length; j++) {
            cells.push(tableItem.rows[i].cells[j]);
        }
    }
    return cells;
}
var mouseOverTime = 0; //是否是第一次进入日历区域(当鼠标以从上至下的轨迹进入日历区域)
var calendarObj;
//标记日历区域的起始坐标
var startCalendarX;
var endCalendarX;
var startCalendarY;
var endCalendarY;
var calDivID;
var _isShow = 1;
var clickTimer;

Calendar = function (date, culture, onSelected, onClose, ID, ele) {
    //要以服务器发过来的时间为基准
    //if (!date) date = new Date();
    if (!date) date = ele.serverDateTime;
    this._date = date;
    calDivID = ID + "calDiv";
    this._onSelected = onSelected;
    this._onClose = onClose;
    this.dateClicked = false;
    this.show = false;
    this._ele = ele;
    function CalendarDate() {
        //日期控件中的今天取服务器端的今天
        var today = new Date();
        // today.setTime(ele.serverDateTime.getTime());//要用克隆的方式，不然下面的setMilliseconds会把serverDateTime也重写
        // //var today = ele.serverDateTime;
        // var curNow = new Date();
        // var timeSpan = curNow - ele.initDateTime;
        // today.setMilliseconds(today.getMilliseconds() + timeSpan);

        this.todayDay = today.getDate();
        this.todayMonth = today.getMonth();
        this.todayYear = today.getFullYear();
        this.today = today;
        this.activeCellIndex = 0;
        //lty
        this.useDate=date; //当前输入框中使用的日期
        this.focusYear=''; //选中的焦点年
        this.focusMonth='' //选中的焦点月
    }
    this._calendarDate = new CalendarDate();
    this._date = this._calendarDate.today;//要把时间设置为最新的时间，而不能直接取服务器时间，要把偏差也计算上
    this._culture = culture;
    this._dtf = Sys.CultureInfo[culture].DateTimeFormat;
    this._resx = Sys.CultureInfo[culture].Resources;
    var calendarContainer = document.createElement("OBJECT");
    this._popup = document.createElement("div");
    this._popup.id = calDivID;
    this._popup.className = "calendar_container";
    this._popup.style.wordWrap = "break-word";
    this._popup.innerHTML = this.get_innerHtml();
    this._popup.style.display = "none";
    this._calendarTable = this.getElementById("CalendarTable");
    this._calenderYear = this.getElementById("CalenderYear");
    this._calenderMonth = this.getElementById("CalenderMonth");
    this._calendarData = this.getElementById("calendarData");
    if (!this._calendarData.cells) {
        this._calendarData.cells = GetTablesCells(this._calendarData);
    }

    //V2.1增加设置时间部分by wangxiaoliang
    //--begin--
    if (this.IsFullDate()) {
        this._calenderTime = this.getElementById("CalenderTime");
        if (this._calenderTime) {
            this._calenderTime.value = Date$toFormattedStringEx(this._date, "T", this._culture);
            this._calendarDate.time = this._calenderTime.value; //缓存最后一次修改的时间
            // this._calenderTime.attachEvent("onchange", this._calendar_time_onchange);
            $(this._calenderTime).bind("change", this._calendar_time_onchange);
            // this._calenderTime.attachEvent("onkeydown", this._calendar_time_onkeydown);
            $(this._calenderTime).bind("keydown", this._calendar_time_onkeydown);
        }
    }
    //--end--
    // this._popup.attachEvent("onkeydown", this._calendar_onkeydown);
    $(this._popup).bind("keydown", this._calendar_onkeydown);

    //
    $(this._calenderYear).bind("change", function () { });
    //标记鼠标不是第一次进入区域
    //  this._popup.onmouseover=function() 
    //  {
    //      if((event.srcElement.id==calDivID)&&(document.getElementById(calDivID).style.display!="none"))
    //        {
    //            mouseOverTime += 1;
    //        }
    //    };
    if (this._calenderYear) {
        // this._calenderYear.attachEvent("onchange", this._calendar_year_onchange);
        $(this._calenderYear).bind("change", this._calendar_year_onchange);
    }
    if (this._calenderMonth) {
        // this._calenderMonth.attachEvent("onchange", this._calendar_month_onchange);
        $(this._calenderMonth).bind("change", this._calendar_month_onchange);
    }
    if (this._calendarData) {
        $(this._calendarData).bind("mousedown", this._cell_onclick);
    }
    //V2.1增加设置时间部分by wangxiaoliang
    //--begin--
    if (this._calendarData) {
        // this._calendarData.attachEvent("ondblclick", this._cell_ondoubleclick);
        $(this._calendarData).bind("dblclick", this._cell_ondoubleclick);
    }
    //--end--

    this._btnLastYear = this.getElementById("btnLastYear");
    if (this._btnLastYear) {
        // this._btnLastYear.attachEvent("onclick", this._btnLastYear_click);
        //===by zzq 之前的事件绑定错误
        $(this._btnLastYear).bind("click", this._btnLastYear_click);
    }
    this._btnNextYear = this.getElementById("btnNextYear");
    if (this._btnNextYear) {
        // this._btnNextYear.attachEvent("onclick", this._btnNextYear_click);
        //===by zzq 之前的事件绑定错误
        $(this._btnNextYear).bind("click", this._btnNextYear_click);
    }
    this._btnLastMonth = this.getElementById("btnLastMonth");
    if (this._btnLastMonth) {
        // this._btnLastMonth.attachEvent("onclick", this._btnLastMonth_click);
        //===by zzq 之前的事件绑定错误
        $(this._btnLastMonth).bind("click", this._btnLastMonth_click);
    }
    this._btnNextMonth = this.getElementById("btnNextMonth");
    if (this._btnNextMonth) {
        // this._btnNextMonth.attachEvent("onclick", this._btnNextMonth_click);
        //===by zzq 之前的事件绑定错误
        $(this._btnNextMonth).bind("click", this._btnNextMonth_click);
    }
    this._btnToday = this.getElementById("btnToday");
    if (this._btnToday) {
        // this._btnToday.attachEvent("onclick", this._btnToday_click);
        //===by zzq 之前的事件绑定错误
        $(this._btnToday).bind("click", this._btnToday_click);
        // this._btnToday.attachEvent("onclick", this._btnToday_click);
        $(this._btnToday).bind("keydown", this._btnToday_onkeydown);
    }
    if (this.IsFullDate()) {
        this._btnTime = this.getElementById("btnTime");
        if (this._btnTime) {
            // this._btnTime.attachEvent("onclick", this._btnTime_click);
            $(this._btnTime).bind("click", this._btnTime_click);
            // this._btnTime.attachEvent("onkeydown", this._btnTime_onkeydown);
            $(this._btnTime).bind("keydown", this._btnTime_onkeydown);
            // this._btnTime.attachEvent("ondblclick", this._btnTime_ondblclick); //ondblclick
            $(this._btnTime).bind("dblclick", this._btnTime_ondblclick); //ondblclick
        }
    }

    //calendarContainer.appendChild(this._popup);
    // this.setCalendarDate(this._date);
    //lty 日期控件回显
    this.setCalendarDate(date);
    document.body.appendChild(this._popup);
    if (window._dynarch_popupCalendar != null) {
        window._dynarch_popupCalendar._popup.style.display = "none";
        document.body.removeChild(document.getElementById(window._dynarch_popupCalendar._popup.id));
        window._dynarch_popupCalendar = this;
    } else {
        window._dynarch_popupCalendar = this;
    }
}

Calendar.get_current = function () {
    if (window._dynarch_popupCalendar == null) {

    }
    return window._dynarch_popupCalendar;
}

//V2.1增加设置时间部分by wangxiaoliang
//--begin--
//判断主控件是否包括时间部分
Calendar.prototype.IsFullDate = function () {
    //来源：BaseComponent\UFDateTimePicker\UFDateTimePicker.cs>DateTimeType属性
    return this._ele.get_FormatString() == "G";
}
//--end--

Calendar.prototype.getElementById = function (id) {
    if (this._popup) {
        //return this._popup.document.getElementById(id);
        return $(this._popup).find("#" + id)[0];
    }
    return null;
}
Calendar.prototype.get_innerHtml = function () {
    var tIndex = 1;
    var tmpHTML = "";
    tmpHTML += "<TABLE tabIndex=\"1\"  id=\"CalendarTable\" rule=\"all\" width=\"220px\"  cellspacing=\"0\" cellpadding=\"0\"  class=\"calendar_maintable\">";
    tmpHTML += "<TR class=\"calendar_title\" valign=\"top\"><TD>";
    tmpHTML += "<TABLE WIDTH=\"100%\" HEIGHT=\"100%\" CELLSPACING=\"1\" CELLPADDING=\"0\" border=\"0\"  class=\"calendar_ymtable\">";
    tmpHTML += "<TR><TD align=\"right\"  class=\"calendar_ytd0\">";
    // tmpHTML += "<INPUT type=\"button\" attrib=\"button\" value=\"3\" id=\"btnLastYear\" title=\"" + this._resx.Calendar_LastYear + "\" class='calendar_ybutton0'>";
    tmpHTML += "<i  id=\"btnLastYear\" title=\"" + this._resx.Calendar_LastYear + "\" class='fa fa-chevron-left calendar-chevron'></i>";
    tmpHTML += "</TD><TD width=\"1\"  class=\"calendar_ytd1\">";
    tmpHTML += "<INPUT id=\"CalenderYear\" type=\"text\" class=\"calendar_textbox\" size=\"4\" maxlength=\"4\" tabIndex=\"" + (tIndex++) + "\">";
    tmpHTML += "</TD><TD align=\"left\" width=\"20px\"  class=\"calendar_ytd2\">";
    // tmpHTML += "<INPUT type=\"button\" attrib=\"button\" value=\"4\" id=\"btnNextYear\" title=\"" + this._resx.Calendar_NextYear + "\" class='calendar_ybutton0'>";
    tmpHTML += "<i id=\"btnNextYear\" title=\"" + this._resx.Calendar_NextYear + "\" class='fa fa-chevron-right calendar-chevron'></i>";
    tmpHTML += "</TD>";
    //tmpHTML+="<TD align=\"right\" width=\"20px\"  class=\"calendar_mtd0\">";
    tmpHTML += "<TD align=\"right\" width=\"55px\"  class=\"calendar_mtd0\">";
    // tmpHTML += "<INPUT type=\"button\" attrib=\"button\" value=\"3\" id=\"btnLastMonth\" title=\"" + this._resx.Calendar_LastMonth + "\" class='calendar_ybutton0'>";
     tmpHTML += "<i id=\"btnLastMonth\" title=\"" + this._resx.Calendar_LastMonth + "\" class='fa fa-chevron-left calendar-chevron'></i>";
    tmpHTML += "</TD><TD width=1  class='calendar_mtd1'>";
    tmpHTML += "<INPUT id=\"CalenderMonth\" type=text class=calendar_textbox size=2 maxlength=2 tabIndex=\"" + (tIndex++) + "\">";
    tmpHTML += "</TD><TD align=left  class='calendar_mtd2'>";
    // tmpHTML += "<INPUT type=button attrib=button value=4 id=\"btnNextMonth\" title=\"" + this._resx.Calendar_NextMonth + "\" class='calendar_ybutton0'>";
    tmpHTML += "<i id=\"btnNextMonth\" title=\"" + this._resx.Calendar_NextMonth + "\" class='fa fa-chevron-right calendar-chevron'></i>";
    tmpHTML += "</TD></TR>";
    tmpHTML += "</TABLE></TD></TR>";
    tmpHTML += "<TR class=calendar_data><TD>";
    tmpHTML += "<TABLE border=0 bordercolor=silver id=\"calendarData\" HEIGHT=100% WIDTH=100% CELLSPACING=0 CELLPADDING=0 class='calendar_daytable'>";
    tmpHTML += "<TR height=20px >";
    tIndex++; //空一个索引
    var _calendar_days = this._dtf.AbbreviatedDayNames;
    for (var i = 0; i <= 6; i++) {
        tmpHTML += "<TD align=center  class='calendar_weektd'>" + _calendar_days[i] + "</TD>";
    }
    tmpHTML += "</TR>";
    for (var i = 0; i <= 5; i++) {
        tmpHTML += "<TR height=18px>";
        for (var j = 0; j <= 6; j++) {
            tmpHTML += "<TD align=center  class='calendar_daytd' ></TD>";
        }
        tmpHTML += "</TR>";
    }
    tmpHTML += "</TABLE></TD></TR>";

    //V2.1增加设置时间部分by wangxiaoliang
    //--begin--
    if (this.IsFullDate()) {
        tmpHTML += "<TR class=calendar_footer ><Td>";
        tmpHTML += "<TABLE width='100%' height='100%'border='0'>";
        tmpHTML += "<TR ><TD align=left>";
    } else {
        tmpHTML += "<TR ><TD class=calendar_footer align=right>";
    }
    //--end--

    //var today = this._ele.serverDateTime;
    //var curNow = new Date();
    //var timeSpan = curNow - this._ele.initDateTime;
    //today.setMilliseconds(today.getMilliseconds() + timeSpan);

    var _text = this._calendarDate.today.toFormattedStringEx("D", this._culture);
    tmpHTML += "<label id=\"btnToday\"   class='calendar_todaybutton' tabIndex='" + (tIndex++) + "'>" + this._resx.Calendar_Today + " " + _text + "</label></TD>";

    //V2.1增加设置时间部分by wangxiaoliang
    //--begin--
    //增加显示时间
    if (this.IsFullDate()) {
        //拼装时间字符串
        var serverTime = Date$toFormattedStringEx(this._calendarDate.today, "T", this._culture);
        tmpHTML += "<TD align=right>";
        tmpHTML += "<label id=\"btnTime\"   class='calendar_todaybutton' tabIndex='" + (tIndex++) + "'>" + serverTime + "</label></TD>";
        //tmpHTML += "<label>" + serverTime + "</label></TD></TR>";
        tmpHTML += "</TABLE></TD>";
    }
    //--end--

    tmpHTML += "</TR>";

    //V2.1增加设置时间部分by wangxiaoliang
    //--begin--
    //增加设置时间部分
    if (this.IsFullDate()) {
        tmpHTML += "<TR class=calendar_footer ><Td>";
        tmpHTML += "<TABLE width='100%' height='100%'border='0'>";
        tmpHTML += "<TR ><TD align=left>";
        tmpHTML += "<label>" + this._resx.Calendar_Time + "</label></TD>";

        tmpHTML += "<TD align=left>";
        //todo:全键盘似乎还有问题
        tmpHTML += "<input width='100%'class='textbox' id='CalenderTime' type='text' tabIndex='" + (tIndex++) + "'/></TD></TR>";
        tmpHTML += "</TABLE></TD></TR>";
    }
    //--end--
    tmpHTML += "</TABLE>";
    //tmpHTML+="<iframe src=\"javascript:false\" scrolling=\"no\" frameborder=\"0\" style=\"z-index:-1;position:absolute; top:0px; left:0px;width:200;height:100%\">";
    tmpHTML += "<iframe src=\"about:blank\" scrolling=\"no\" frameborder=\"0\" style=\"z-index:-1;position:absolute; top:0px; left:0px;width:100%;height:100%\">";
    tmpHTML += "</iframe>";
    return tmpHTML;
}

Calendar.prototype.showAt = function (x, y) {
    var s = this._popup.style;
    s.left = x + "px";
    s.top = y + "px";
    // By--weiyin -- 跨浏览器兼容性 -- 2016.11.04 
    $(this._popup).find(".calendar_daytable td").each(function(i){
        if($(this).attr("classname") == 'calendar_activeday'){
            $(this).removeClass().addClass("calendar_activeday");
        }
    })
    s.display = "";
    //===
    //this._calenderYear.focus();
    //
    //===by zzq 失去焦点时  要隐藏
    $("#CalendarTable").focus();
    $("#CalendarTable").on("mouseout", function () {
        _isShow = 1;
    }).on("mouseover", function () {
        _isShow = 0;
    }).on("focusout", function () {
        if (_isShow) {
            var cal = Calendar.get_current();
            cal.cancelPopup();
            $(this).hide();
        }
    });
    //$(this._popup).mousedown(this.popupMousedown)
    $(this._popup).mouseover(this.popupMouseOver);
    $(this._popup).mouseout(this.popupMouseOut);
    //===
    //if (this.show == false) {
    //    this._calenderMonth.focus();
    //}
    this.show = true;
} //end showAt

Calendar.prototype.popupMouseOver = function () {
    var cal = Calendar.get_current();
    //cal._popup.releaseCapture();
    if (cal.clickInRect()) {
        if (event.srcElement.tagName == "TD" && event.srcElement.className == "calendar_curday") {
            event.srcElement.className = "calendar_daytd_mo";
        }
        if (event.srcElement.tagName == "LABEL" && event.srcElement.className == "calendar_todaybutton") {
            event.srcElement.className = "calendar_todaybutton_MO";
        }
    }
    //cal._popup.setCapture();
    if (!cal._ele.get_element()) {
        cal.cancelPopup();
    }
}
Calendar.prototype.popupMouseOut = function () {
    var cal = Calendar.get_current();
    //cal._popup.releaseCapture();
    if (cal.clickInRect()) {
        if (event.srcElement.tagName == "TD" && event.srcElement.className == "calendar_daytd_mo") {
            event.srcElement.className = "calendar_curday";
        }
        if (event.srcElement.tagName == "LABEL" && event.srcElement.className == "calendar_todaybutton_MO") {
            event.srcElement.className = "calendar_todaybutton";
        }
    }
    //cal._popup.setCapture();
}

//Calendar.prototype.popupMousedown = function () {
//    var cal = Calendar.get_current();
//    //cal._popup.releaseCapture();
//    cal.cancelPopup();
//} //end popupmousedown

//点击在当前区域之内
Calendar.prototype.cancelPopup = function () {
    if (this.clickInRect()) {
        if (event.srcElement.tagName == "TD") {
            this._cell_onclick();
        }
    } else {
        if (document.getElementById(calDivID) != null) {
            document.body.removeChild(document.getElementById(calDivID));
            //TODO:change by portal theme
            if (document.getElementById(this._buttonID)) {
                document.getElementById(this._buttonID).className = "btn DateBtn";
            }
            window._dynarch_popupCalendar = null;
            this.show = false;
        }
    }
} //end clickInRect

Calendar.prototype.clickInRect = function () {
    var calendarObj = document.getElementById(calDivID);
    if (calendarObj == null) return;
    //    var startCalendarY=calendarObj.offsetTop+2;
    //    var endCalendarY=calendarObj.offsetTop+calendarObj.offsetHeight-2;
    //    var startCalendarX=calendarObj.offsetLeft+5;
    //    var endCalendarX=calendarObj.offsetLeft+calendarObj.offsetWidth-5;
    var oRect = calendarObj.getBoundingClientRect();
    var startCalendarY = oRect.top + 2;
    var endCalendarY = oRect.top + calendarObj.offsetHeight - 2;
    var startCalendarX = oRect.left + 5;
    var endCalendarX = oRect.left + calendarObj.offsetWidth - 5;
    if (event.clientX > startCalendarX && event.clientX < endCalendarX) {
        if (event.clientY > startCalendarY && event.clientY < endCalendarY) {
            return true;
        }
    }
    return false;
} //end clickInRect

Calendar.prototype.setCalendarDate = function (date) {
    this.changeCalendarDate(date.getFullYear(), date.getMonth(), date.getDate());
}
Calendar.prototype.changeCalendarDate = function (year, month, day) {
    if (isNaN(year))
        return;
    if (isNaN(month))
        return;
    //V2.1增加设置时间部分by wangxiaoliang
    //--begin--
    //如果包含时间，则每次在最后同步时间信息。
    if (this.IsFullDate()) {
        //取得时间框里的小时、分钟、秒
        if (this._calenderTime) {
            //在此之前，时间的格式应该已经经过严格的校验，这里不默认为格式没问题
            var tmpTime = this._calenderTime.value;
            //            if (tmpTime) {
            //                var timeSegs = tmpTime.split(":");
            //                this._calendarDate.hour = timeSegs[0] * 1;
            //                this._calendarDate.minute = timeSegs[1] * 1;
            //                this._calendarDate.second = timeSegs[2] * 1;
            //            }
            //在这里不校验，传递给前端主控件校验
            this._calendarDate.time = tmpTime;
        }
    }
    //--end--

    if (this._calendarDate.year == year && this._calendarDate.month == month && (!day || this._calendarDate.day == day)) return;

    if (this._calendarDate.year != year || this._calendarDate.month != month) {
        this._calendarDate.year = year;
        this._calendarDate.month = month;

        if (month == 0) {
            this._calendarDate.preMonth = 11;
            this._calendarDate.preYear = this._calendarDate.year - 1;
        } else {
            this._calendarDate.preMonth = this._calendarDate.month - 1;
            this._calendarDate.preYear = this._calendarDate.year;
        }
        if (month == 11) {
            this._calendarDate.nextMonth = 0;
            this._calendarDate.nextYear = this._calendarDate.year + 1;
        } else {
            this._calendarDate.nextMonth = this._calendarDate.month + 1;
            this._calendarDate.nextYear = this._calendarDate.year;

        }
        this._calendarDate.startday = (new Date(year, month, 1)).getDay();
        if (this._calendarDate.startday == 0) this._calendarDate.startday = 7;
        var curNumdays = this.getNumberOfDays(this._calendarDate.month, this._calendarDate.year);
        var preNumdays = this.getNumberOfDays(this._calendarDate.preMonth, this._calendarDate.preYear);
        var nextNumdays = this.getNumberOfDays(this._calendarDate.nextMonth, this._calendarDate.nextYear);
        var startDate = preNumdays - this._calendarDate.startday + 1;
        var endDate = 42 - curNumdays - this._calendarDate.startday;
        if (this._calenderMonth) this._calenderMonth.value = (this._calendarDate.month + 1);
        if (this._calenderYear) this._calenderYear.value = this._calendarDate.year;

        var datenum = 0;
        for (var i = startDate; i <= preNumdays; i++) {
            var cell = this._calendarData.cells[datenum + 7];
            //cell.monthAttribute = "pre";
            cell.setAttribute("monthAttribute", "pre");
            cell.setAttribute("className", "calendar_preday");
            cell.innerText = i;
            datenum++;
        }
        for (var i = 1; i <= curNumdays; i++) {
            var cell = this._calendarData.cells[datenum + 7];
            //cell.monthAttribute = "cur";
            cell.setAttribute("monthAttribute", "cur");
            if (datenum != this._calendarDate.activeCellIndex) {
                cell.setAttribute("className", "calendar_curday");
            }
            cell.innerText = i;
            datenum++;
        }
        for (var i = 1; i <= endDate; i++) {
            var cell = this._calendarData.cells[datenum + 7];
            cell.setAttribute("className", "calendar_nextday");
            //cell.monthAttribute = "next";
            cell.setAttribute("monthAttribute", "next");
            cell.innerText = i;
            datenum++;
        }
    }

    if (day) this._calendarDate.day = day;
    var expectedday = this._calendarData.cells[this._calendarDate.day + this._calendarDate.startday - 1 + 7].innerHTML;
    var iexpectedday = parseInt(expectedday);
    if (this._calendarDate.day > iexpectedday)
        this.setCalendarActiveCell(this._calendarData.cells[this._calendarDate.day + this._calendarDate.startday - 1 + 7 - iexpectedday]);
    else
        this.setCalendarActiveCell(this._calendarData.cells[this._calendarDate.day + this._calendarDate.startday - 1 + 7]);
}
Calendar.prototype.setCalendarActiveCell = function (cell) {
    if (!cell) return;
    if (cell.tagName.toLowerCase() != "td") return;
    var _activeCellIndex = cell.parentElement.rowIndex * 7 + cell.cellIndex - 7;

    with (this._calendarDate) {
        if (activeCellIndex == _activeCellIndex) return;

        //var monthAttribute=cell.monthAttribute;
        var monthAttribute = cell.getAttribute("monthAttribute");
        switch (monthAttribute) {
            case "pre":
                {
                    this.changeCalendarDate(preYear, preMonth, this.getNumberOfDays(preMonth, preYear) - startday + _activeCellIndex + 1);
                    this.setActiveCell(startday + day - 1);
                    $('.calendar_daytd_focus').removeClass('calendar_daytd_focus');
                    $('.calendar_focus_temp').removeClass('calendar_focus_temp');
                    $('[classname="calendar_activeday"]').addClass('calendar_daytd_focus');
                    break;
                }
            case "cur":
                {
                    this.changeCalendarDate(year, month, _activeCellIndex - startday + 1);
                    this.setActiveCell(_activeCellIndex);
                    $('.calendar_daytd_focus').removeClass('calendar_daytd_focus');
                    $('.calendar_focus_temp').removeClass('calendar_focus_temp');
                    $('[classname="calendar_activeday"]').addClass('calendar_daytd_focus');
                    break;
                }
            case "next":
                {
                    this.changeCalendarDate(nextYear, nextMonth, _activeCellIndex - this.getNumberOfDays(month, year) - startday + 1);
                    this.setActiveCell(startday + day - 1);
                    $('.calendar_daytd_focus').removeClass('calendar_daytd_focus');
                    $('.calendar_focus_temp').removeClass('calendar_focus_temp');
                    $('[classname="calendar_activeday"]').addClass('calendar_daytd_focus');
                    break;
                }
        }
    }
}
Calendar.prototype.setActiveCell = function (cellIndex) {
    var cell = this._calendarData.cells[this._calendarDate.activeCellIndex + 7];
    var cellmonthAttribute = cell.getAttribute("monthAttribute");
    if (cellmonthAttribute == "cur") {
        cell.setAttribute("className", "calendar_curday");
    } else if (cellmonthAttribute == "pre") {
        cell.setAttribute("className", "calendar_preday");
    } else if (cellmonthAttribute == "next") {
        cell.setAttribute("className", "calendar_nextday");
    }
    var actDayTabIndex = cell.getAttribute("tabIndex");
    if (actDayTabIndex) {
        cell.setAttribute("tabIndex", "");
    } else {
        actDayTabIndex = this._calenderMonth.getAttribute("tabIndex") * 1 + 1;
    }
    var cell = this._calendarData.cells[cellIndex + 7];
    cell.setAttribute("className", "calendar_activeday");
    cell.setAttribute("tabIndex", actDayTabIndex);
    if (this.show == true && this.getFocusedArea() == CalendarArea.Day) {
        cell.focus();
    }
    this._calendarDate.activeCellIndex = cellIndex;
    // lty 
    if($('#CalenderMonth').length>0){
        //当前日历上的年月
        var curYear=$('#CalenderYear').val();
        var curMounth=$('#CalenderMonth').val();
        //已使用日期
        var useYear = this._calendarDate.useDate.getFullYear();
        var useMonth = this._calendarDate.useDate.getMonth() + 1;
        // 使用日期
        if (curYear != useYear || curMounth != useMonth) {
            $('.calendar_activeday').addClass('calendar_use_temp');
            $('.calendar_activeday').removeClass('calendar_activeday')
        }else{
            $('.calendar_use_temp').addClass('calendar_activeday');
        }
        // 焦点日期
        if (curYear != this._calendarDate.focusYear || curMounth != this._calendarDate.focusMonth) {
            $('.calendar_daytd_focus').addClass('calendar_focus_temp');
            $('.calendar_daytd_focus').removeClass('calendar_daytd_focus')
        }else{
            if($('.calendar_daytd_focus').length==0){
                $('.calendar_focus_temp').addClass('calendar_daytd_focus');
            }
        }
    }
}
Calendar.prototype.getActiveCell = function () {
    return this._calendarData.cells[this._calendarDate.activeCellIndex + 7];
}

Calendar.prototype.getNumberOfDays = function (month, year) {
    var numDays = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
    n = numDays[month]
    if (month == 1 && (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)) n++
    return n
}


/** Calls the second user handler (closeHandler). */
Calendar.prototype.callCloseHandler = function () {
    if (this._onClose) {
        this.show = false;
        this._onClose(this);
    }
}
Calendar.prototype.hide = function () {
    if (this._popup) {
        this._popup.style.display = "none";
        if (document.getElementById(this._popup.id) != null) {
            document.body.removeChild(document.getElementById(this._popup.id));
        }
    }
    window._dynarch_popupCalendar = null;
    this.show = false;
}
Calendar.prototype.hideShowCovered = function () {
    if (this._popup) {
        if (this._popup.style.display == "") {
            this._popup.style.display = "none";
        } else {
            this._popup.style.display = "";
        }
    }
    window._dynarch_popupCalendar = null;
} //end hideShowCovered 

Calendar.prototype.getFocusedArea = function () {
    var actElement = document.activeElement;
    if (actElement) {
        if (actElement == this._calenderYear) {
            return CalendarArea.Year;
        } else if (actElement == this._calenderMonth) {
            return CalendarArea.Month;
        } else if (actElement.getAttribute("monthAttribute")) {
            return CalendarArea.Day;
        } else if (actElement == this._btnToday) {
            return CalendarArea.Today;
        }
    }
    return CalendarArea.Empty;
}

Calendar.prototype.unload = function () {
    var cal = Calendar.get_current();
    cal.hide();
}
Calendar.prototype.load = function () {
    var cal = Calendar.get_current();
    cal._popup.style.display = "";
}
Calendar.prototype._cell_onclick = function () {
    clearTimeout(clickTimer)
    var cal = Calendar.get_current();
    var cell = event.srcElement;
    //获取当前焦点的年月
    cal._calendarDate.focusYear=$('#CalenderYear').val();
    cal._calendarDate.focusMonth=$('#CalenderMonth').val();
    clickTimer=setTimeout(function(){
        cal.setCalendarActiveCell(cell);
        cal.dateClicked = true;
        //V2.1增加设置时间部分by wangxiaoliang
        //--begin--
        //只有不带时间部分时，才单选返回
        if (!cal.IsFullDate()) {
            cal.callHandler();
        }
    },300)
    //--end-
}
//V2.1增加设置时间部分by wangxiaoliang
//--begin--
Calendar.prototype._cell_ondoubleclick = function (ev) {
    ev.stopPropagation();
    clearTimeout(clickTimer);
    $alert("ondoubleclick");
    var cell = event.srcElement;
    var cal = Calendar.get_current();
    cal.setCalendarActiveCell(cell);
    cal.dateClicked = true;
    cal.callHandler();
}
//--end--


/** Calls the first user handler (selectedHandler). */
Calendar.prototype.callHandler = function () {
    if (this._onSelected) {
        this._onSelected(this);
    }
}

Calendar.prototype._btnLastYear_click = function () {
    var cal = Calendar.get_current();
    var year = cal._calendarDate.year - 1;
    if (parseInt(year) < 1753) return;
    var month = cal._calendarDate.month;
    cal.changeCalendarDate(year, month);
    //cal._popup.setCapture(); //write by lxd
}
Calendar.prototype._btnNextYear_click = function () {
    var cal = Calendar.get_current();
    var year = cal._calendarDate.year + 1;
    if (parseInt(year) > 9999) return;
    var month = cal._calendarDate.month;
    cal.changeCalendarDate(year, month);
    //cal._popup.setCapture(); //write by lxd
}
Calendar.prototype._btnLastMonth_click = function () {
    var cal = Calendar.get_current();
    var year = cal._calendarDate.preYear;
    if (parseInt(year) < 1753) return;
    var month = cal._calendarDate.preMonth;
    cal.changeCalendarDate(year, month);
    //cal._popup.setCapture(); //write by lxd
}
Calendar.prototype._btnNextMonth_click = function () {
    var cal = Calendar.get_current();
    var year = cal._calendarDate.nextYear;
    if (parseInt(year) > 9999) return;
    var month = cal._calendarDate.nextMonth;
    cal.changeCalendarDate(year, month);
    //cal._popup.setCapture(); //write by lxd
}
Calendar.prototype._btnToday_click = function () {
    var cal = Calendar.get_current();
    var year = cal._calendarDate.todayYear;
    var month = cal._calendarDate.todayMonth;
    var day = cal._calendarDate.todayDay;
    cal.changeCalendarDate(year, month, day)
    var index = cal._calendarDate.todayDay + cal._calendarDate.startday - 1;
    cal.setCalendarActiveCell(cal._calendarData.cells[index + 7]);
    cal.dateClicked = true;
    cal.callHandler();
}
Calendar.prototype._btnToday_onkeydown = function () {
    if (window.event.keyCode = KeyCode.tab) {
        var cal = Calendar.get_current();
        if (!cal.IsFullDate()) {
            cal._calenderYear.focus();
            $Event(event).stopPropagation();
            $Event(event).preventDefault();
        }
    }
}

Calendar.prototype._btnTime_click = function () {
    var cal = Calendar.get_current();
    cal._calenderTime.value = cal._btnTime.innerHTML;

}
Calendar.prototype._btnTime_onkeydown = function () {
    if (window.event.keyCode = KeyCode.tab) {
        //      var cal=Calendar.get_current();
        //      cal._calenderYear.focus();
        //      $Event(event).stopPropagation();
        //      window.event.returnValue=false;
    }
}
Calendar.prototype._btnTime_ondblclick = function () {
    var cal = Calendar.get_current();
    var year = cal._calendarDate.todayYear;
    var month = cal._calendarDate.todayMonth;
    var day = cal._calendarDate.todayDay;
    cal.changeCalendarDate(year, month, day)
    cal.dateClicked = true;
    cal.callHandler();
}
//设置当前输入的年月
Calendar.prototype.SetInputYearMonth = function () {
    var calendarMonth = document.getElementById("CalenderMonth");
    var calendarYear = document.getElementById("CalenderYear");
    var year = parseInt(calendarYear.value, 10);
    var month = parseInt(calendarMonth.value, 10);
    this.changeCalendarDate(year, month - 1);
} //end SetInputYearMonth  

Calendar.prototype._calendar_onkeydown = function () {
    var cal = Calendar.get_current();
    _calendarControl = cal._calendarDate;
    switch (event.keyCode) {
        case 18:
            { //alt
                // why do not break 
                cal.callHandler();
            }
        case 13:
            { //enter
                var calendarYear = document.getElementById("CalenderYear");
                var year = parseInt(calendarYear.value);
                if (calendarYear.value.length != 4 || year < 1753 || year > 9999) {
                    calendarYear.value = cal._calendarDate.year;
                    event.cancelBubble = false;
                    $Event(event).preventDefault();
                }
                var calendarYear = document.getElementById("CalenderYear");
                var year = parseInt(calendarYear.value);

                var calendarMonth = document.getElementById("CalenderMonth");
                var curMonth = parseInt(calendarMonth.value);

                if (calendarYear.value.length != 4 || year < 1753 || year > 9999) {
                    calendarYear.value = cal._calendarDate.year;
                    event.cancelBubble = false;
                    $Event(event).preventDefault();
                }
                //达到临界值时
                if (year == 1753) {
                    if (curMonth < 1) {
                        calendarMonth.value = cal._calendarDate.month + 1;
                        event.cancelBubble = false;
                        $Event(event).preventDefault();
                    }
                }
                if (year == 9999) {
                    if (curMonth > 12) {
                        calendarMonth.value = cal._calendarDate.month + 1;
                        event.cancelBubble = false;
                        $Event(event).preventDefault();
                    }
                }
                var cal = Calendar.get_current();
                var index = _calendarControl.activeCellIndex;
                if (index < 0) index = 0;
                var cell = calendarData.cells[index + 7];
                cal.setCalendarActiveCell(cell);
                cal.SetInputYearMonth();
                cal.dateClicked = true;
                cal.callHandler();
                $Event(event).stopPropagation();
                $Event(event).preventDefault();
                break;
            }
        case 27:
            { //esc
                hideDropDownBox();
                cal.callCloseHandler();
                break;
            }
        case 33:
            { //PgUp
                if (event.ctrlKey) {
                    cal.changeCalendarDate(_calendarControl.year - 1, _calendarControl.month)
                } else {
                    cal.changeCalendarDate(_calendarControl.preYear, _calendarControl.preMonth)
                }
                break
            }
        case 34:
            { //PgDn
                if (event.ctrlKey) {
                    cal.changeCalendarDate(_calendarControl.year + 1, _calendarControl.month)
                } else {
                    cal.changeCalendarDate(_calendarControl.nextYear, _calendarControl.nextMonth)
                }
                break
            }
        case 35:
            { //End         
                break
            }
        case 36:
            { //Home            
                break
            }
        case 37:
            { //<--
                if (cal.getFocusedArea() == CalendarArea.Day) {
                    var index = _calendarControl.activeCellIndex - 1;
                    if (index < 0) index = 0;
                    cal.setCalendarActiveCell(calendarData.cells[index + 7]);
                    $Event(event).stopPropagation();
                    $Event(event).preventDefault();
                }
                break
            }
        case 38:
            { //
                var fArea = cal.getFocusedArea();
                if (fArea == CalendarArea.Day) {
                    if (_calendarControl.activeCellIndex < 14) {
                        var day = cal.getNumberOfDays(_calendarControl.preMonth, _calendarControl.preYear) + _calendarControl.day - 7;
                        cal.setCalendarDate(new Date(_calendarControl.preYear, _calendarControl.preMonth, day));
                    } else {
                        var index = _calendarControl.activeCellIndex - 7;
                        cal.setCalendarActiveCell(calendarData.cells[index + 7]);
                    }
                } else if (fArea == CalendarArea.Month) {
                    cal.changeCalendarDate(_calendarControl.preYear, _calendarControl.preMonth);
                } else if (fArea == CalendarArea.Year) {
                    cal.changeCalendarDate(_calendarControl.year - 1, _calendarControl.month);
                }
                $Event(event).stopPropagation();
                $Event(event).preventDefault();
                break
            }
        case 39:
            { //-->
                if (cal.getFocusedArea() == CalendarArea.Day) {
                    var index = _calendarControl.activeCellIndex + 1;
                    if (index >= calendarData.cells.length - 7) index = calendarData.cells.length - 8;
                    cal.setCalendarActiveCell(calendarData.cells[index + 7]);
                    $Event(event).stopPropagation();
                    $Event(event).preventDefault();
                }
                break
            }
        case 40:
            { //
                var fArea = cal.getFocusedArea();
                if (fArea == CalendarArea.Day) {
                    if (_calendarControl.activeCellIndex > 34) {
                        //if (_calendarControl.activeCellIndex>41){
                        var day = 7 - (cal.getNumberOfDays(_calendarControl.month, _calendarControl.year) - _calendarControl.day);
                        cal.setCalendarDate(new Date(_calendarControl.nextYear, _calendarControl.nextMonth, day));
                    } else {
                        var index = _calendarControl.activeCellIndex + 7;
                        cal.setCalendarActiveCell(calendarData.cells[index + 7]);
                    }
                } else if (fArea == CalendarArea.Month) {
                    cal.changeCalendarDate(_calendarControl.nextYear, _calendarControl.nextMonth);
                } else if (fArea == CalendarArea.Year) {
                    cal.changeCalendarDate(_calendarControl.year + 1, _calendarControl.month);
                }
                $Event(event).stopPropagation();
                $Event(event).preventDefault();
                break
            }
    }
}
//V2.1增加设置时间部分by wangxiaoliang
//--begin--
Calendar.prototype._calendar_time_onchange = function () {
    var cal = Calendar.get_current();
    var calendarTime = document.getElementById("CalenderTime");

    //    //校验时间格式，不正确则还原成原来的值。  
    //    var timeIsOK=cal.validateInputTime(calendarTime.value);
    //    
    //    if (timeIsOK) {
    //        cal._calendarDate.time = calendarTime.value;
    //    }
    //    else{
    //        calendarTime.value = cal._calendarDate.time;
    //    }    
    //这里不进行校验，传递给前端主控件去校验
    cal._calendarDate.time = calendarTime.value;
}
Calendar.prototype._calendar_time_onkeydown = function () {
    //为了处理全键盘
    if (window.event.keyCode === KeyCode.tab) {
        var cal = Calendar.get_current();
        cal._calenderYear.focus();
        $Event(event).stopPropagation();
        $Event(event).preventDefault();
    }
}
Calendar.prototype.validateInputTime = function (time) {

    if (time) {
        // 这种方式同样可以交易非数字的情况
        var tryDate = new Date();
        var timeSegs = time.split(":");
        if (timeSegs.length != 3) {
            return false;
        }
        tryDate.setHours(timeSegs[0] * 1);
        if (timeSegs[0] == "" || tryDate.getHours() != timeSegs[0] * 1) {
            return false;
        }
        tryDate.setMinutes(timeSegs[1] * 1);
        if (timeSegs[1] == "" || tryDate.getMinutes() != timeSegs[1] * 1) {
            return false;
        }
        tryDate.setSeconds(timeSegs[2] * 1);
        if (timeSegs[2] == "" || tryDate.getSeconds() != timeSegs[2] * 1) {
            return false;
        }
        return true;
    }
    return false;
}

//--end--
Calendar.prototype._calendar_year_onchange = function () {
    var cal = Calendar.get_current();
    var calendarYear = document.getElementById("CalenderYear");
    var year = parseInt(calendarYear.value);
    if (calendarYear.value.length != 4 || year < 1753 || year > 9999) {
        calendarYear.value = cal._calendarDate.year;
        return;
    }
    if (isNaN(year))
        year = cal._calendarDate.year;
    var month = cal._calendarDate.month;
    cal.changeCalendarDate(year, month);
}
Calendar.prototype._calendar_month_onchange = function () {
    var cal = Calendar.get_current();
    var calendarMonth = document.getElementById("CalenderMonth");
    if (!(calendarMonth.value.length == 1 || calendarMonth.value.length == 2)) {
        calendarMonth.value = cal._calendarDate.month + 1;
        return;
    }
    var year = cal._calendarDate.year;
    var month = parseInt(calendarMonth.value, 10);
    if (isNaN(month))
        month = cal._calendarDate.month;
    month--;
    if (month < 0 || month > 11) {
        calendarMonth.value = cal._calendarDate.month + 1;
        return;
    }
    cal.changeCalendarDate(year, month);
}

var CalendarArea = {
    Empty: -1,
    Year: 0,
    Month: 1,
    Day: 2,
    Today: 3
};
;
	
	var CallbackLaunchArray = new Array();
	var CallbackSourceArray = new Array();
	var CallbackTargetArray = new Array();
	var SetDivstring   = "^@~&*_"
	var RowDivstring   = "^@$&*_";
	var ColDivstring   = "^*$&@_";
	
	function CallbackEventLauncher(ClientId) {
		var reParam = '';
		var eSource = getCallbackObject(ClientId, 'launcher');
		var id = eSource.Id;
		var clientId = eSource.ClientId;

		reParam = reParam + id + ColDivstring;
		reParam = reParam + clientId+ ColDivstring;
		reParam = reParam + eSource.Type+ ColDivstring;
		reParam = reParam + eSource.eleNum+ ColDivstring;
		reParam = reParam + eSource.DataRow+ ColDivstring+ RowDivstring;

		var srcControl = getCallbackObject(ClientId, 'sourcer');
		var srcIds = srcControl.SrcIds;
		var srcClientIds = srcControl.SrcClientIds;
		var srcTypes = srcControl.SrcTypes;

		reParam = reParam + getArrayContact(srcIds, ColDivstring) + RowDivstring;
		reParam = reParam + getArrayContact(srcClientIds, ColDivstring) + RowDivstring;
		reParam = reParam + getArrayContact(srcTypes, ColDivstring) + RowDivstring;

		var dataStr = getControlsValue(srcClientIds, srcTypes, ColDivstring, RowDivstring);
		reParam = reParam + dataStr;

        debugger;
        var ex = srcControl.Methods[0];
        var ret = eval(ex);
		CallbackHandler(reParam, ClientId);
	}
	
	function getXXXXX(id)
	{	
	    var temp = new Array(2);
	    temp[0] = id;
	    temp[1] = "ssswwww";
			     
	    return temp;
	}
	
	function CallbackResponseProcess(paramter, ClientId) {
		var tarControl = getCallbackObject(ClientId, 'targeteer');
		var Ids = tarControl.SrcIds;
		var ClientIds = tarControl.SrcClientIds;
		var Types = tarControl.SrcTypes;
		var param = paramter;
		var cwidth = ColDivstring.length;
		var rwidth = RowDivstring.length;

		for(var i=0; i<4; i++)
			param = param.substr(param.indexOf(RowDivstring)+rwidth);
		param = param.substr(0, param.indexOf(RowDivstring));

		var length  = ClientIds.length;
		if(length<=0)
			return;
		for(var i=0; i<length-1; i++){
			var elem = document.getElementById(ClientIds[i]);
			var cvar = param.substr(0, param.indexOf(ColDivstring));
			param = param.substr(param.indexOf(ColDivstring)+cwidth);

			if(Types[i]=='TextBox')
				elem.value  = cvar;
		}

		var lastElem = document.getElementById(ClientIds[length-1]);
		var lastVars = param.substr(0, param.indexOf(ColDivstring));

		if(Types[length-1]=='TextBox')
			lastElem.value = lastVars;
	}
	
	function getCallbackObject(clientId, type){
		var arg = null;

		if(type=='launcher')
		{
			var length = CallbackLaunchArray.length;

			if(length==0)
				return arg;

			for(var i=0; i<length; i++){
				if(CallbackLaunchArray[i].ClientId==clientId){
					arg = CallbackLaunchArray[i];
					break;
				}
			}
		}
		else if(type=='sourcer')
		{
			var length = CallbackSourceArray.length;

			if(length==0)
				return arg;

			for(var i=0; i<length; i++){
				if(CallbackSourceArray[i].ClientId==clientId){
					arg = CallbackSourceArray[i];
					break;
				}
			}
		}
		else
		{
			var length = CallbackTargetArray.length;

			if(length==0)
				return arg;

			for(var i=0; i<length; i++){
				if(CallbackTargetArray[i].ClientId==clientId){
					arg = CallbackTargetArray[i];
					break;
				}
			}
		}

		return arg;
	}
	
	function getArrayContact(clientIds, divs){
		var reParam = '';
		var length  = clientIds.length;
		for(var i=0; i<length; i++)
			reParam = reParam + clientIds[i] + divs;

		return reParam;
	}
	
	function getControlsValue(clientIds, types, cDiv, rDiv){
		var reParam = '';
		var length  = clientIds.length;
		for(var i=0; i<length; i++){
			var elem = document.getElementById(clientIds[i]);
			if(types[i]=='TextBox')
				reParam = reParam + elem.value + cDiv;
		}

		reParam = reParam + rDiv;
		return reParam;
	}
	
	function LaunchRegister(Id, ClientId, Type, num, dataRow){
		this.Id = Id;
		this.ClientId = ClientId;
		this.Type = Type;
		this.eleNum  = num;
		this.DataRow = dataRow;
	}
	
	function SourceRegister(Id, ClientId){
		this.Id = Id;
		this.ClientId = ClientId;

		this.SrcIds = new Array();;
		this.SrcClientIds = new Array();;
		this.SrcTypes = new Array();;
		this.Methods = new Array();
	}
	
	function TargetRegister(Id, ClientId){
		this.Id = Id;
		this.ClientId = ClientId;

		this.SrcIds = new Array();;
		this.SrcClientIds = new Array();;
		this.SrcTypes = new Array();;
		this.Methods = new Array();
	}
	
	function AddLaunchRegister(id, clientId, type, number, rows){
		CallbackLaunchArray[CallbackLaunchArray.length] = new LaunchRegister(id, clientId, type, number, rows);
	}
	
	function ParseString(Cstring, sizes){
		var width = ColDivstring.length;
		var param = Cstring;
		var temps = new Array(sizes);

		if(Cstring==null || sizes<=0)
			return null;

		for(var i=0; i<sizes-1; i++)
		{
			temps[i] = param.substr(0, param.indexOf(ColDivstring));
			param = param.substr(param.indexOf(ColDivstring)+width);
		}
		temps[sizes-1] = param.substr(0, param.indexOf(ColDivstring));
		
		return temps
	}
	
	function AddControlsRegister(id, clientId, Controlstring, type, funcstring, sizes){
		var rwidth = RowDivstring.length;
		var cwidth = ColDivstring.length;
		var tempCon = Controlstring;
		var conId, conClientId, conType, functions;
		
		if(type=='sourcer')
			CallbackSourceArray[CallbackSourceArray.length] = new SourceRegister(id, clientId);
		else
			CallbackTargetArray[CallbackTargetArray.length] = new TargetRegister(id, clientId);

		var elemControl = getCallbackObject(clientId, type);

		conId = ParseString(tempCon.substr(0, tempCon.indexOf(RowDivstring)), sizes);
		tempCon = tempCon.substr(tempCon.indexOf(RowDivstring)+rwidth);
		elemControl.SrcIds = conId;						
		
		conClientId = ParseString(tempCon.substr(0, tempCon.indexOf(RowDivstring)), sizes);
		tempCon = tempCon.substr(tempCon.indexOf(RowDivstring)+rwidth);
		elemControl.SrcClientIds = conClientId;

		conType = ParseString(tempCon.substr(0, tempCon.indexOf(RowDivstring)), sizes);
		elemControl.SrcTypes = conType;
		
		functions = ParseString(funcstring, sizes);
		elemControl.Methods = functions;
	}

;
var Global_Debugger4P = false;
function $OpenCalAlert(val) {
    isCalAlert = val;
}
//wangl:
$(function () {
    window.document.onclick = function () {
        var webimDom = window.top.document.getElementById("ykj-frame");
        if (webimDom) {
            $(webimDom).css("display", "none");
        }
    }
    if (window.location.href.indexOf("simple.aspx?") == -1) {
        return;
    }
    $(document).bind("keydown", {}, function (event) {
        if (event.keyCode == 27) {
            window.close();
        }
    });
});


//暂存
var autoRecover = {   //自动缓存
    recoverState: function (a, b, c) {
        if (a) {
            zlayer.open({
                title: "自动恢复",
                area: ["850px", "360px"],
                argument: window,
                content: '../mvc/tempstorage/ShowRecover?formID=' + a + '&sessionID=' + b + '&operateSymbol=' + c + '',
                endHandle: function (data) {

                    //var TabPanel = window.top.TabPanelManager.getActiveTab();
                    //var frame = window.top.frames[TabPanel.id + "Frame"];
                    //var _frameWindow = $F(frame).getFrameWindow();

                    if (data.id) {
                        var hiddenField = document.createElement("input");
                        hiddenField.type = "hidden";
                        hiddenField.id = "fileid";
                        hiddenField.name = "fileid";
                        hiddenField.value = data.id;

                        $("form").append(hiddenField);

                        __doPostBack("", "");
                    }
                    if (!data.checked) {
                        $.post("../mvc/tempstorage/ClearTempStroage", { fromID: a, OperateSymbol: c, "mt": window.top.Math.uuid() }, function (data) {
                            console.log(data);
                        });
                    }
                }
            })
        }
    }
}

// JScript File

//Modified By Yin Mingjun 2012/04/10
//  ----moved to UI.Common.js
//
//function ControlType(){}
//ControlType.CheckBox="CHECKBOX";
//ControlType.TextBox   ="NORMAL";
////added by u9lkc 20100517 无人使用
////ControlType.RadioButton="CHECKBOX";
//ControlType.Combox="COMBOX";
//ControlType.Date="DATE";
//ControlType.TextArea="TEXTAREA";
//ControlType.RefControl="REF";
//ControlType.MultiInput="MULTIINPUT";
//ControlType.Numberic="NUMBERIC";
//ControlType.DateTime      ="DateTime";
//ControlType.DataGrid      ="DataGrid";
//ControlType.DropDownList="DropDownList";
//ControlType.DropDownButton="DropDownButton";
//ControlType.FlexField     ="FlexField";
//ControlType.GlobalInput   ="GlobalInput";
//ControlType.Panel             ="Panel";
//ControlType.Reference     ="Reference";
//ControlType.TabControl    ="TabControl";
//ControlType.ToolBar           ="ToolBar";
//ControlType.RichImage  ="RichImage";
//ControlType.Expression     ="Expression";
//ControlType.Button = "Button";
//ControlType.Label = "Label";
//ControlType.RadioButtonList = "RadioButtonList";

var _Sys_Busy = null;
var GridIsInFocus = false;
var _xmlhttpRequest = null;
var curPopMenu; //Menu.js中使用，记录当前Menu
var _LoadingSpan = null;
//Autotest DIM^^

//Modified By Yin Mingjun 2012/04/10
//  ----moved to UI.Portal.js
////
//function GetCurrentOrg(){
//    return document.getElementById("OrgID").value;
//}
//function GetCurrentEnterpriseID(){
//    return document.getElementById("EnterpriseID").value;
//}

//Modified By Yin Mingjun 2012/04/10
//  ----moved to UI.Common.js
//function DataGetter(){
//    DataGetter.prototype.Do = function(params, GetResult,userContext)
//    {
//        var jsonObject =
//            Sys.Serialization.JavaScriptSerializer.serialize(params);
//        UFDataService.GetData(jsonObject,eval(GetResult),this.OnError,userContext);
//    }
//    DataGetter.prototype.OnError = function(error)
//    {
//        //调试用信息
//        alert(
//            "操作发生严重问题！错误信息是：" + error.get_message() +
//            "\n堆栈追踪结果是：" + error.get_stackTrace() +
//            "\n状态码是：" + error.get_statusCode() +
//            "\n异常类型是：" + error.get_exceptionType() +
//            "\n超时状态是：" + error.get_timedOut());
//    }
//}

//Modified By Yin Mingjun 2012/04/10
//  ----be moved to UI.Common.js
//
//function MultiOrgParams() {
//    this.IDs = [];
//    this.AllDatas = [];
//    this.entityFullName = "";
//    this.OrgID = "";
//    this.EnterpriseID = "";
//}
function PDCallBackHandler_Light(customerOper) {
    if (_xmlhttpRequest)
        if (_xmlhttpRequest.readyState == 4) {
            if (_xmlhttpRequest.statusText == "OK" || _xmlhttpRequest.status == 200) {
                var result = _xmlhttpRequest.responseText;
                EvalFunction(result);
                if (customerOper && customerOper.length > 0) {
                    eval(customerOper);
                }
            }
        }
}
function PDCallBackHandler_Normal(result, context) {
    EvalFunction(result);
    if (context && context.length > 1) {
        eval(context);
    }
}

/*function CallPDServerCallBack(strParaControls,SrcColIndex,SrcRowIndex,refIDs, ctx,bLightCallback,srcId) {*/
function CallPDServerCallBack(arg, strParaControls, SrcColIndex, SrcRowIndex, refIDs, ctx, bLightCallback, srcId, taskIdHF, isAsync) {
    if (!_ClientCallBackManager.StartCallBack()) {
        return;
    }


    //BugFix: By YMJ
    //Callback不需要EventTarget,而伴随callback的动作会设置EventTarget，会对callback造成干扰
    var eventTargetDom = $get("__EVENTTARGET");
    var eventTargetDomValue = "";

    //取出__EVENTTARGET的值，并清空__EVENTTARGET
    if (eventTargetDom) {
        eventTargetDomValue = eventTargetDom.value;
        eventTargetDom.value = "";
    }

    /*var arg = createQueryString(strParaControls,SrcColIndex,SrcRowIndex,refIDs,bLightCallback)*/
    if (WebForm_InitCallback) {
        if (!__theFormPostData || __theFormPostData == "")
            WebForm_InitCallback();
    }
    //wanglei:callback 机制重构.全部 callback 统一 交互通道.
    WebForm_DoCallback(srcId, arg, PDCallBackHandler_Normal, ctx, null, true);

    //恢复__EVENTTARGET的值
    if (eventTargetDom) {
        eventTargetDom.value = eventTargetDomValue;
    }

    //if(bLightCallback){
    //CallServerPage(arg,"PDCallBackHandler_Light('"+ctx+"')");
    //    CallServerPage(arg,"PDCallBackHandler_Light",ctx,srcId,taskIdHF,isAsync);
    //}else{
    //    WebForm_DoCallback(srcId,arg,PDCallBackHandler_Normal,ctx,null,true);
    //}
}

//wanglei:callback 机制重构
// 获取表格及时 发起 callback 的状态信息
function getStatusString(lst, colIndex, rowIndex, refIDs, ctx, bLightCallback, callBackSrcID) {
    var arrs = lst.split(',');
    var res = {};
    var lastIndex = callBackSrcID.lastIndexOf('$');
    var uniqueID = callBackSrcID.substring(0, lastIndex);
    var reg = /\$/g;
    var srcCtrlID = uniqueID.replace(reg, "_");
    for (var i = 0; i < arrs.length; ++i) {
        try {
            var id = arrs[i];
            if (id.indexOf('_ALL_GRIDDATA') < 0 && $find(id) == null)
                continue;
            if (id.indexOf('_ALL_GRIDDATA') > 0 && $find(id.substring(0, id.indexOf('_ALL_GRIDDATA'))) == null)
                continue;
            if (id.indexOf('_ALL_GRIDDATA') >= 0) {
                var gridID = id.substring(0, id.indexOf('_ALL_GRIDDATA'));
                var grid = $find(gridID);
                res[gridID] = grid.getFocusInfo();
            }
        } //-------------end try
        catch (e) { }
    } //-----------------end for
    return res;
}


/*function createQueryString(lst,colIndex,rowIndex,refIDs,bLightCallback)*/
function createQueryString(lst, colIndex, rowIndex, refIDs, ctx, bLightCallback, callBackSrcID, taskIdHF, isAsync, status) {
    var splitter = "__&URS3&_";
    var arrs = lst.split(',');
    var res = 'SrcColIndex=' + colIndex + splitter + 'SrcRowIndex=' + rowIndex + splitter;
    var lastIndex = callBackSrcID.lastIndexOf('$');
    var uniqueID = callBackSrcID.substring(0, lastIndex);
    var reg = /\$/g;
    var srcCtrlID = uniqueID.replace(reg, "_");
    for (var i = 0; i < arrs.length; ++i) {
        try {
            var id = arrs[i];
            //为DB分页异步加载的Callback做特殊处理
            if (id.indexOf('_ALL_TOTALPAGE') > 0) {
                res = "TotalPage";
                continue;
            }
            if (id.indexOf('_ALL_GRIDDATA') < 0 && $find(id) == null)
                continue;
            if (id.indexOf('_ALL_GRIDDATA') > 0 && $find(id.substring(0, id.indexOf('_ALL_GRIDDATA'))) == null)
                continue;
            res += id;
            res += '=';
            if (id.indexOf('_ALL_GRIDDATA') >= 0) {

                //wanglei:callback 机制重构
                var gridID = id.substring(0, id.indexOf('_ALL_GRIDDATA'));
                var grid = $find(gridID);
                //保存状态信息
                var focusInfo = grid.getFocusInfo();

                //设置状态信息
                if (status !== undefined && status[gridID] !== undefined)
                    grid.setFocusInfo(status[gridID]);

                res += (bLightCallback ? grid.get_SelectedData() : grid.get_AllData());
                //恢复状态信息
                grid.setFocusInfo(focusInfo);

            } else {
                var jsControl = $find(id);
                if (jsControl == null)
                    continue;
                if (id == srcCtrlID || jsControl.get_element().cusAttr("GridCltID4P") == null || jsControl.get_element().cusAttr("ColFldID4P") == null) //非个性化正常数据收集 + 个性化后的CallBack源控件
                {
                    if (refIDs.indexOf(id + ",") >= 0) //有可能非参照控件的id正好一个参照控件的id符合。例如客户节点资本额币种u_M_P1_RegisterCapitalCurrency0和资本额u_M_P1_RegisterCapital，所以应该加上","进行indexOf()判断
                    {
                        res += jsControl.get_Key();
                        res += splitter + id + '_Value=' + jsControl.get_Value();
                        res += splitter + id + '_Text=' + jsControl.get_Text();
                    }
                    //else if($ID(id).className.indexOf('DateTimePicker')>=0)//gct：没有为"DateTimePicker"的className
                    else if (jsControl.get_Type() == ControlType.DateTime) {
                        res += jsControl.get_TextFromInput();
                    }
                    //else if($ID(id).className.indexOf('DDB')>=0)//Add DropDowmButton
                    else if (jsControl.get_Type() == ControlType.DropDownButton) //Add DropDowmButton
                    {
                        res += jsControl.get_SelectedMenuItemText();
                    } else {
                        res += jsControl.get_Value();
                    }

                    //gct20081227:个性化处理，CallBack数据收集时，暂存CallBack源控件对应的当前Grid的CurrentRowIndex
                    if (id == srcCtrlID && jsControl.get_element().cusAttr("GridCltID4P") != null && jsControl.get_element().cusAttr("ColFldID4P") != "") {
                        var gridID = jsControl.get_element().cusAttr("GridCltID4P");
                        if ($find(gridID)) //为什么找不到Grid的呢？因为用户可能在源页签上操作CallBack源控件（我认为这个控件个性化跨页签移动后应该隐藏，目前仍然显示在这里！遗留问题！！！）
                        {
                            //yangkuna20100717:个性化扩展列改变时，需要收集对应Grid的数据
                            res += splitter + gridID + "_ALL_GRIDDATA=" + $find(gridID).get_AllData();
                            var rowIndex = $find(gridID).get_CurrentRowIndex();
                            //added by u9lkc 20100324
                            //目前缓存当前行号在args里 同步更新的时候使用这个值
                            if (res.indexOf("SrcRowIndex=undefined") >= 0) {
                                res = res.replace("SrcRowIndex=undefined", "SrcRowIndex=" + rowIndex);
                            }
                            //yangkuna20100625_列也需要缓存
                            if (res.indexOf("SrcColIndex=undefined") >= 0) {
                                var columnIndex = $find(gridID).GetPersonelColumnIndexById(id);
                                res = res.replace("SrcColIndex=undefined", "SrcColIndex=" + columnIndex);
                            }

                            Set_GridCurrentRowIndex4PIsValid(true);
                            Set_GridCurrentRowIndex4P(rowIndex); //暂存，多于的Post完毕后，用到该rowIndex
                        }
                    }
                } else //非CallBack源控件，并且个性化后的，走此逻辑
                {
                    var gridID = jsControl.get_element().cusAttr("GridCltID4P");
                    var colID = jsControl.get_element().cusAttr("ColFldID4P");
                    if (gridID != null && colID != null) //！！！注意：个性化跨页签移动到Grid，CalBack数据收集应该是收集原来控件对应的Grid个性化列Cell上的Value
                    {
                        var jsGrid = $find(gridID);
                        if (jsGrid == null) //目前控件在原页签上还可以显示（这是无奈之举，我不知道为什么还允许这样！遗留问题！！），用户在原页签仍旧操作控件的时候，走此逻辑
                        {
                            if (refIDs.indexOf(id + ",") >= 0) //有可能非参照控件的id正好一个参照控件的id符合。例如客户节点资本额币种u_M_P1_RegisterCapitalCurrency0和资本额u_M_P1_RegisterCapital，所以应该加上","进行indexOf()判断
                            {
                                res += jsControl.get_Key();
                                res += splitter + id + '_Value=' + jsControl.get_Value();
                                res += splitter + id + '_Text=' + jsControl.get_Text();
                            }
                            //else if($ID(id).className.indexOf('DateTimePicker')>=0)//gct：没有为"DateTimePicker"的className
                            else if (jsControl.get_Type() == ControlType.DateTime) {
                                res += jsControl.get_TextFromInput();
                            }
                            //else if($ID(id).className.indexOf('DDB')>=0)//Add DropDowmButton
                            else if (jsControl.get_Type() == ControlType.DropDownButton) //Add DropDowmButton
                            {
                                res += jsControl.get_SelectedMenuItemText();
                            } else {
                                res += jsControl.get_Value();
                            }
                        } else //在移动后的目标页签（即Grid的页签）的时候，走此逻辑
                        {
                            //个性化列(项目)的单元格处于编辑状态的时候，通过TitleLink引起的Callback需要收集单元格上的值时,应取编辑控件的值,因为此时控件还处于编辑状态，还没有将编辑控件的值同步到Grid单元格上。摩比绿色通道问题：销售订单：中兴样件2009073101销售订单出货行没带出项目号bug
                            if (jsControl.get_element().parentElement.className == "tbc") //说明当前控件处于单元格中，即单元格正处于编辑状态。还没有同步到单元格上，如果此时取单元格的值就不对了。
                            {
                                if (refIDs.indexOf(id + ",") >= 0) //有可能非参照控件的id正好一个参照控件的id符合。例如客户节点资本额币种u_M_P1_RegisterCapitalCurrency0和资本额u_M_P1_RegisterCapital，所以应该加上","进行indexOf()判断
                                {
                                    res += jsControl.get_Key();
                                    res += splitter + id + '_Value=' + jsControl.get_Value();
                                    res += splitter + id + '_Text=' + jsControl.get_Text();
                                }
                                //else if($ID(id).className.indexOf('DateTimePicker')>=0)//gct：没有为"DateTimePicker"的className
                                else if (jsControl.get_Type() == ControlType.DateTime) {
                                    res += jsControl.get_TextFromInput();
                                }
                                //else if($ID(id).className.indexOf('DDB')>=0)//Add DropDowmButton
                                else if (jsControl.get_Type() == ControlType.DropDownButton) //Add DropDowmButton
                                {
                                    res += jsControl.get_SelectedMenuItemText();
                                } else {
                                    res += jsControl.get_Value();
                                }
                            } else {
                                var rowIndex = jsGrid.get_CurrentRowIndex();
                                var colIndex = jsGrid.GetColumnIndex(colID);
                                var cellValue = jsGrid.GetCellValue(rowIndex, colIndex);
                                if (cellValue) {
                                    if (refIDs.indexOf(id + ",") >= 0) //有可能非参照控件的id正好一个参照控件的id符合。例如客户节点资本额币种u_M_P1_RegisterCapitalCurrency0和资本额u_M_P1_RegisterCapital，所以应该加上","进行indexOf()判断
                                    {
                                        res += cellValue.Value;
                                        res += splitter + id + '_Value=' + cellValue.Code;
                                        res += splitter + id + '_Text=' + cellValue.Text;
                                    } else {
                                        res += cellValue.Value;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            res += splitter;
        } //-------------end try
        catch (e) { }
    } //-----------------end for
    return res;
}

function GetSysParameters(taskIdHF) {
    var paras = "EffectiveLanguageCount=" + $get("EffectiveLanguageCount").value;
    paras += "&CustomerID=" + $get("CustomerID").value;
    paras += "&All_Languages=" + $get("All_Languages").value;
    //paras +="&__sk="+$get("__sk").value;
    paras += "&__curOId=" + $get("__curOId").value;
    paras += "&PAGETOKEN=" + $get("PAGETOKEN").value;
    paras += "&SessionID=" + $get("SessionID").value;
    paras += "&CultureName=" + $get("CultureName").value;
    paras += "&OperatingOrg_ID=" + $get("OperatingOrg_ID").value;
    paras += "&OrgCode=" + $get("OrgCode").value;
    paras += "&EnterpriseID=" + $get("EnterpriseID").value;
    paras += "&OrgID=" + $get("OrgID").value;
    paras += "&UserName=" + $get("UserName").value;
    paras += "&CurrentPage=" + $get("CurrentPage").value;
    paras += "&_Key4Protal=" + $get("_Key4Protal").value;
    paras += "&SupplierID=" + $get("SupplierID").value;
    paras += "&PortalID=" + $get("PortalID").value;
    paras += "&UserID=" + $get("UserID").value;
    paras += "&OrgName=" + $get("OrgName").value;
    // paras +="&DateTime="+$get("DateTime").value;
    paras += "&UserCode=" + $get("UserCode").value;
    paras += "&_SearchSessionID=" + $get("_SearchSessionID").value;
    //paras +="&UserClientIP="+$get("UserClientIP").value;
    //paras +="&RawUrl="+$get("RawUrl").value;
    paras += "&EnterpriseName=" + $get("EnterpriseName").value;
    paras += "&LoginOrg_ID=" + $get("LoginOrg_ID").value;
    paras += "&__WPPS=" + $get("__WPPS").value;
    //paras +="&" + taskIdHF + "="+$get(taskIdHF).value;
    //paras +="&__VIEWSTATE=";
    return paras;
}

function CallServerPage(arg, CallbackComplete, ctx, srcId, taskIdHF, isAsync) {
    var eventSourveClientID = null; //gct20080922:客户端触发LightCallBack的事件源（这里暂且存ClientID）
    var splitter = "__&URS3&_";
    if (arg != null && arg.split(splitter).length >= 3) {
        var ids = arg.split(splitter);
        if (ids[2].indexOf("_ALL_GRIDDATA") > 0) {
            eventSourveClientID = ids[2].substring(0, ids[2].indexOf("_ALL_GRIDDATA"));
        } else {
            eventSourveClientID = ids[2].substring(0, ids[2].indexOf("="));
        }
    }
    var baseUrl = window.location.href;
    var url = "ClientCallBack=Y";
    //gct20080922:需要将客户端触发LightCallBack的事件源ClientID传入后台
    if (eventSourveClientID == null) return;
    url += "&EventSourceClientID=" + srcId;
    url += "&UBF_ClientParams=" + encodeURIComponent(arg);
    var taskIns = $get(taskIdHF);
    if (taskIns) {
        url += "&" + taskIdHF + "=" + encodeURIComponent(taskIns.value);
    }
    if (baseUrl.indexOf("&__sk=") < 0) {
        url += "&__sk=" + encodeURIComponent($get("__sk").value);
    }

    if (isAsync) {
        isAsync = true;
    } else {
        isAsync = false;
    }
    if (!_xmlhttpRequest) {
        InitXmlHttpRequest();
    }
    if (_xmlhttpRequest) {
        if (url.length > 2000) {
            _xmlhttpRequest.open("POST", baseUrl, isAsync);
            _xmlhttpRequest.onreadystatechange = eval(CallbackComplete);
            _xmlhttpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            /*if(baseUrl.indexOf("?")>0){//PAGETOKEN
            url = url+"&"+baseUrl.substring(baseUrl.indexOf("?")+1,baseUrl.length);
            }*/

            url += "&" + GetSysParameters(taskIdHF);
            _xmlhttpRequest.send(url);
        } else {
            url = baseUrl + "&" + url;
            _xmlhttpRequest.open("GET", url, isAsync);
            _xmlhttpRequest.onreadystatechange = eval(CallbackComplete);
            _xmlhttpRequest.send(null);
        }
    }
}

function InitXmlHttpRequest() {
    // if (!_xmlhttpRequest) {
    //     _xmlhttpRequest = new ActiveXObject("Msxml2.XMLHTTP");
    // }

    if (!this._xmlhttpRequest) {
        if (window.XMLHttpRequest)
            this._xmlhttpRequest = new XMLHttpRequest();
        else if (this.get_element().document.all)
            this._xmlhttpRequest = new ActiveXObject("Msxml2.XMLHTTP");
    }

}
/*function CallbackComplete(){
if(_xmlhttpRequest)
if (_xmlhttpRequest.readyState == 4){
var result = _xmlhttpRequest.responseText;
//result = unescapeHTML(result);
EvalFunction(result);
}

}*/
EvalFunction = function (func) {
    if (Global_Debugger4P) debugger;
    if (_debugger) {
        debugger;
    }
    try {
        if (JavaScriptDebugTool.LogCallBackReturnJS) {
            $alert("");
            $alert("CallBack ReturnValue : ");
            $alert(func);
        }
        Global_CallBackReturnJsQueueIsRunning = true;
        //      if(func.indexOf("\r\n") > -1)//CallBack代码中有回车换行符，需要删去，不然eval会抛错
        //      {
        //          var tempJS = func.replace(/\r\n/g,"");
        //          eval(tempJS);
        //      }
        //      else
        //      {
        //          eval(func);
        //      }
        var tempJS = func;
        if (tempJS.indexOf("\r\n") > -1) //CallBack代码中有回车换行符，需要删去，不然eval会抛错
            tempJS = tempJS.replace(/\r\n/g, ""); //mahx 2015-01-29修改 之前只判断\r\n没有判断单独的\r或者\n
        if (tempJS.indexOf("\n") > -1)
            tempJS = tempJS.replace(/\n/g, "");
        if (tempJS.indexOf("\r") > -1)
            tempJS = tempJS.replace(/\r/g, "");
        eval(tempJS);
        Global_CallBackReturnJsQueueIsRunning = false;
    } catch (e) {
        if ($alert) {
            $alert("※ CallBack Script Run Error : [ " + e.message + "], Source Script:");
            $alert(func);
            $alert("--------------------------------------");
        }
        console.log(e)
    }
    if (Global_Debugger4P) debugger;
    //
    var willRunPost = false;
    try {
        if (_ClientCallBackManager.Handlers.length == 0) {
            _ClientCallBackManager.Runing = false;
            if (_ClientPostBackManager.SrcElement.length > 0 && _ClientCallBackManager.StopPost) {
                _ClientCallBackManager.StopPost = false;
                var len = _ClientPostBackManager.SrcElement.length;
                for (var i = 0; i < len; i++) {
                    var cT = $find(_ClientPostBackManager.SrcElement[i]);
                    if (cT)
                        if (cT.get_Type() == ControlType.Menu) {
                            $find(_ClientPostBackManager.SrcElement[i])._hidden.value = _ClientPostBackManager.MenuIndex[i];
                        }
                    willRunPost = true;
                    if (_ClientPostBackManager.SrcElementArgument != null && _ClientPostBackManager.SrcElementArgument[i] != null) {
                        var gT = $find(_ClientPostBackManager.SrcElement[i].replace(/\$/g, "_"));
                        if (gT && (gT.get_Type() == ControlType.DataGrid)) {
                            var suc = gT.RecoveryEventNode(_ClientPostBackManager.SrcElementArgument[i]);
                            if (suc == true) {
                                _ClientPostBackManager.SrcElementArgument[i] = "";
                            }
                        }
                        __doPostBack(_ClientPostBackManager.SrcElement[i], _ClientPostBackManager.SrcElementArgument[i]); //例如当SrcElement为BtnWithDoNothing的时候，需要argument
                    } else {
                        __doPostBack(_ClientPostBackManager.SrcElement[i], '');
                    }
                }

                for (var i = 0; i < len; i++) { //wanglei:解决 postback 被 丢弃的问题.修改参照 clearcase 记录.
                    _ClientPostBackManager.SrcElement.shift();
                    _ClientPostBackManager.SrcElementArgument.shift();
                    _ClientPostBackManager.MenuIndex.shift();
                }
            }
            //gct20090718：这里并不是最后一个CallBack真正结束的地方。15SP300283870、15SP300283397
            //_ClientCallBackManager.afterAllCallBackFired();
        }
        var isCallbackRestart = false;
        //yangkuna20100721:CallBack走完，如果后续没有Postback，则执行Global_JSQueueEvalAfterPageLoadedManager
        if (_ClientCallBackManager.Runing == false && _ClientPostBackManager.Runing == false && Get_Global_WillDoPostBack() == false) {
            Global_JSQueueEvalAfterPageLoadedManager.Eval();
            if (_ClientPostBackManager.Runing == true)
                isCallbackRestart = true;//很有可能上面的Global_JSQueueEvalAfterPageLoadedManager.Eval();使callback又重新启动了。这里标记一下，下面就不能再统一设置为false了。

        }
    } catch (ee) {
        //alert(ee);
    }
    //
    if (!isCallbackRestart)
        _ClientCallBackManager.Runing = false;
    if (!willRunPost) {
        if (_LoadingSpan == null)
            _LoadingSpan = document.getElementById("spWait");
        var ele = _LoadingSpan;
        if (ele) {
            ele.className = "WaitSpanHideClass1";
            //ele.style.cursor = "default";
            //document.forms[0].style.cursor = "default";
        }
    }
    if (Global_Debugger4P) debugger;
    _ClientCallBackManager.Start(true);
    //
}

function $SetControlAttribute(controlArray) {
    if (controlArray && controlArray.length > 0) {
        for (var i = 0; i < controlArray.length; i++) {
            var item = controlArray[i];
            if ($find(item[0])) {
                $find(item[0]).SetControlAttribute(item[1]);
            }
        }
    }
}

function $ExeScripts4Personalized(assertControls, callBackSrcControl, scripts) {
    var needPost = false;
    if (assertControls) {
        var cArr = assertControls.split(",");
        for (var i = 0; i < cArr.length; i++) {
            if (!$find(cArr[i])) {
                needPost = true;
                break;
            }
        }
    }
    if (scripts) {
        if (scripts.indexOf("\r\n") > -1) {
            scripts = scripts.replace(/\r\n/g, "");
        }
        if (needPost) {
            Global_JSQueueEvalAfterPageLoadedManager.Add(scripts, true);
            Global_JSQueueEvalAfterPageLoadedManager.Add("$alert(\"请确保" + callBackSrcControl + "的AssocRelatedControls集合中包含以下控件：" + assertControls + "\");", true);
            __doPostBack(Get_BtnRePostBackWithDoNothingID(), callBackSrcControl);
        } else {
            eval(scripts);
        }
    }
}

var _debugger = false;

var _ClientJSExecQueueManager = new ClientJSExecQueueManager();

function ClientJSExecQueueManager() {
    this.Count = 0;
    this.Running = false;
    this.Handlers = [];
    this.FirstHandlers = []; //yangkuna20101026:优先队列，改队列优先于Handlers执行
    this.RunAfterPageLoad = false;

    //Push之后不直接执行，待到页面整体加载完成再执行
    ClientJSExecQueueManager.prototype.Push = function (js, name) {
        var item = new Object();
        item.js = js;
        item.name = name;
        this.Handlers.push(item);
        this.Count++;
        this.RunAfterPageLoad = true;
        //$alert("PUSH: " +name + " : " + js);
    }
    //将js添加到队列前面，Unshift之后不直接执行，待到页面整体加载完成再执行
    ClientJSExecQueueManager.prototype.Unshift = function (js, name) {
        var item = new Object();
        item.js = js;
        item.name = name;
        this.Handlers.unshift(item);
        this.Count++;
        this.RunAfterPageLoad = true;
        //$alert("unshift: " +name + " : " + js);
    }
    //将js添加到优先队列末尾，AddToFirstQuery之后不直接执行，待到页面整体加载完成再执行
    ClientJSExecQueueManager.prototype.AddToFirstQuery = function (js, name) {
        var item = new Object();
        item.js = js;
        item.name = name;
        this.FirstHandlers.push(item);
        this.Count++;
        this.RunAfterPageLoad = true;
    }

    //Add之后直接执行
    ClientJSExecQueueManager.prototype.Add = function (js, name) {
        var item = new Object();
        item.js = js;
        item.name = name;
        this.Handlers.push(item);
        this.Count++;
        this.Start();
    }
    ClientJSExecQueueManager.prototype.Start = function () {
        if ((this.Handlers.length <= 0) && (this.FirstHandlers.length <= 0)) {
            return;
        }
        if (this.Running || (_ClientPostBackManager && _ClientPostBackManager.Runing) || (_ClientCallBackManager && _ClientCallBackManager.Runing) || window.AfterZlayerJsQueue) {
            //濡傛灉鏈塁allBack 鎴?PostBack 姝ｅ湪鎵ц锛岄€€鍑?濡傛灉褰撳墠椤电爜姝ｅ湪鏈夊脊鍑哄眰锛岄€€鍑?
            return;
        }
        var item = (this.FirstHandlers.length > 0 ? this.FirstHandlers.shift() : this.Handlers.shift());
        try {
            if (item.name == "DefaultValue") {
                window.top.diagnosticVue && window.top.diagnosticVue.pushLogItem({
                    "type": "Personalize",
                    "time": new Date().format("yyyy-MM-dd HH:mm:ss"),
                    "message": "个性化默认值，生成模板中，js脚本：" + item.js,
                    "threadId": 999
                })
            }
        } catch (e) { console.log(e) }
        var js = "try{" + item.js;
        this.Count--;
        this.Running = true;
        js += "}catch(e){console.log(e)};_ClientJSExecQueueManager.Running=false;window.setTimeout(\"if(_ClientJSExecQueueManager)_ClientJSExecQueueManager.Start();\",0);";
        //debugger;
        window.setTimeout(js, 0);
    }
    ClientJSExecQueueManager.prototype.Clear = function (name) {
        this.Count = 0;
        this.FirstHandlers = [];
        if (name) {
            for (var len = this.Handlers.length, i = len - 1; i >= 0; i--) {
                Array.removeAt(this.Handlers, i);
            }
        } else {
            if (this.Handlers.length > 0) {
                for (var i = 0; i < this.Handlers.length; i++) {
                    //this.Handlers.pop();
                    //gct20090423:按照队列形式
                    this.Handlers.shift();
                }
            }
        }
    }
    ClientJSExecQueueManager.prototype.ClearAll = function (name) {
        this.Count = 0;
        this.FirstHandlers = [];
        this.Handlers = [];
    }
}

//
var _ClientPostBackManager = new ClientPostBackManager();
//客户端PostBack管理器
function ClientPostBackManager() {
    this.Runing = false;
    this.SrcElement = [];
    this.SrcElementArgument = [];
    this.MenuIndex = [];
    this.LastPostElement;
    this.prm;
    this.Count = 0;
    this.FirstIsActionButton = false;
    this.BtnActionAlreadyFire = false;
    this.IsAbortPostBack = false;
    this.BtnElement = null;
    this.MemoryAction = [];
    this.MemoryActionArgs = [];
    var _this = this;
    this.DirtyDataDelayEventArray = [];
    this.RedictURLAfterAllPostBack = undefined;
    this.CallAfterAllPostBack = undefined;
    this.PopMenuHiddenValues = [];

    //个性化处理队列
    this.PersonalProcessQueue = new Array();

    //DoPostBackcompleted这个变量是private的，不要直接使用该变量，一定要使用set，get方法。并且一定是bool类型
    this.DoPostBackcompleted = null; //如果控件上有__dopsotBack这种post，需要标识是不是已经PostBack完成了。有三种true false null，初始值为null


    ClientPostBackManager.prototype.onInitRequest = function (sender, args) {
        if (theForm.__EVENTTARGET.value) {
            var retValue = IsShowConfirmSaveDialog(theForm.__EVENTTARGET.value)
            if (retValue.Value) {
                var actionManager = new ActionManager();
                var args1 = {
                    'EventType': retValue.EventType,
                    'srcElementID': theForm.__EVENTTARGET.value,
                    'script': "__doPostBack('" + theForm.__EVENTTARGET.value + "','')",
                }
                var url = "../ufsoft/saveconfirm.aspx?chromeType=4&ShowType=ShowModal";
                // 205修改为120  确定弹出层高度太大
                setTimeout(function () { ShowModalDialogForAll(url, '', '120', '365', 'true', 'false', actionManager, args1) }, 0);
                _ClientPostBackManager.IsAbortPostBack = true;
                args.set_cancel(true);
                lockElement(false);
                return;
            }
        }

        //===================================
        if (_ClientCallBackManager.Runing == true) { //如果正在跑CallBack
            if (_ClientCallBackManager.StopPost == false) { //没有处理PostBack
                _ClientCallBackManager.StopPost = true;
            }
            //_ClientCallBackManager.RunPost = true;
            var arrIndex = _ClientPostBackManager.SrcElement.length;
            _ClientPostBackManager.SrcElement[arrIndex] = theForm.__EVENTTARGET.value;
            _ClientPostBackManager.SrcElementArgument[arrIndex] = theForm.__EVENTARGUMENT.value;
            var cT = $find(theForm.__EVENTTARGET.value);
            if (cT) {
                if (cT.get_Type() == ControlType.Menu) {
                    if (_ClientPostBackManager.MenuIndex == null) {
                        _ClientPostBackManager.MenuIndex = [];
                    }
                    _ClientPostBackManager.MenuIndex[arrIndex] = $find(theForm.__EVENTTARGET.value)._hidden.value;
                }
            }
            if ($(args.get_postBackElement()).hasClass("main_Span")) {
                var grid = $find(args.get_postBackElement().id);
                if (grid != null) {
                    grid.IsThisGirdPosting = false;
                    grid._isDataCollected = false;
                }
            }
            args.set_cancel(true);
            return;
        }
        if (_ClientPostBackManager.Runing) { //正在PostBack
            Array.add(_ClientPostBackManager.MemoryAction, args.get_postBackElement().id);
            Array.add(_ClientPostBackManager.MemoryActionArgs, theForm.__EVENTARGUMENT.value);
            _ClientPostBackManager.IsAbortPostBack = true;
            if ($(args.get_postBackElement()).hasClass("main_Span")) {
                $find(args.get_postBackElement().id).IsThisGirdPosting = false;
            }
            args.set_cancel(true);
            lockElement(false);
        } else { //没在PostBack
            //BtnRePostBackWithDoNothingID可以重复提交，因为这是必要的。
            var btnRePostBackWithDoNothingClientID = Get_BtnRePostBackWithDoNothingID().replace(/\$/g, '_');
            //if(btnRePostBackWithDoNothingClientID != args.get_postBackElement().id && _ClientPostBackManager.LastPostElement == args.get_postBackElement().id && args.get_postBackElement().className!="main_Span"){
            if (_ClientPostBackManager.LastPostElement == args.get_postBackElement().id && !$(args.get_postBackElement()).hasClass("main_Span")) {
                if ($(args.get_postBackElement()).hasClass("main_Span")) {
                    var grid = $find(args.get_postBackElement().id);
                    if (grid != null) {
                        grid.IsThisGirdPosting = false;
                        grid._isDataCollected = false;
                    }
                }
                args.set_cancel(true); //取消恶意的重复提交
                _ClientPostBackManager.LastPostElement = null;
                lockElement(false);
            } else {
                //如果是点击ToolBar按钮，或者其他按钮，或者是切换页签都推迟进行
                if (args.get_postBackElement().className == "TBI" || args.get_postBackElement().className == "DDBO" || args.get_postBackElement().tagName == "SPAN" || args.get_postBackElement().className.containsCssClass("TC tPn")) {
                    if (window._GridWillPostBack == true) {
                        window._GridWillPostBack = false;
                        Array.add(_ClientPostBackManager.MemoryAction, args.get_postBackElement().id);
                        Array.add(_ClientPostBackManager.MemoryActionArgs, args.get_postBackElement().id);
                        _ClientPostBackManager.IsAbortPostBack = true;
                        args.set_cancel(true);
                        lockElement(false);
                        _ClientPostBackManager.BtnActionAlreadyFire = true;
                        _ClientPostBackManager.BtnElement = args.get_postBackElement().id;
                        return;
                    }
                }
                if ($(args.get_postBackElement()).hasClass("main_Span")) {
                    window._GridWillPostBack = false;
                }
                _ClientPostBackManager.Runing = true;
                Set_Global_WillDoPostBack(false); //开始running后，就设置该标识为false
                _ClientPostBackManager.LastPostElement = args.get_postBackElement().id;
            }
        }
        //===================================
    }
    ClientPostBackManager.prototype.onBeginRequest = function (sender, args) {
        //Autotest Begin01^^
        if (window._TextBoxFirePostBack == true) {
            window._CancelWaitSpanSetTimeOutHandler = false;
            window.setTimeout(function () {
                if (!window._CancelWaitSpanSetTimeOutHandler) {
                    lockElement(true);
                }
            }, 50);
            window._TextBoxFirePostBack = false;
        } else {
            lockElement(true);
        }
    }
    ClientPostBackManager.prototype.onEndRequest = function (sender, args) {
        //if(args.get_response()._xmlHttpRequest && args.get_response().get_statusCode() == 288){
        //args.set_errorHandled(true);//禁止throw 288错误
        //_ClientPostBackManager.Runing = false; //让页面其他操作可点击
        //licenseCanUse();
        //}else{
        var isLastPostBackFired = false;
        _ClientPostBackManager.Runing = false;

        if (_ClientPostBackManager.IsAbortPostBack) {
            var reg = /_/g;
            if (_ClientPostBackManager.MemoryAction.length > 0) {
                var lastAction = _ClientPostBackManager.MemoryAction[0];
                var lastActionArgs = _ClientPostBackManager.MemoryActionArgs[0];
                Array.removeAt(_ClientPostBackManager.MemoryAction, 0);
                Array.removeAt(_ClientPostBackManager.MemoryActionArgs, 0);
                //gct20091019SP3森普绿色通道问题:__doPostBack(lastAction.replace(reg,"$"),lastActionArgs);
                Global_JSQueueEvalAfterPageLoadedManager.Eval__doPostBack = "__doPostBack('" + lastAction.replace(reg, "$") + "','" + lastActionArgs + "');";
            } else {
                _ClientPostBackManager.IsAbortPostBack = false;
                if (_ClientPostBackManager.LastPostElement == _ClientPostBackManager.BtnElement) {
                    _ClientPostBackManager.BtnActionAlreadyFire = false;
                    lockElement(false);
                    //mahx20160506 增加如下代码确保没有PostBack之后JS的脚本正常执行
                    isLastPostBackFired = true;
                }
                _ClientPostBackManager.LastPostElement = null;
                if (_ClientPostBackManager.BtnActionAlreadyFire == true) {
                    _ClientPostBackManager.BtnActionAlreadyFire = false;
                    //gct20091019SP3森普绿色通道问题:__doPostBack(_ClientPostBackManager.BtnElement.replace(reg,"$"),"");
                    Global_JSQueueEvalAfterPageLoadedManager.Eval__doPostBack = "__doPostBack('" + _ClientPostBackManager.BtnElement.replace(reg, "$") + "','');";
                }
            }
        } else {
            _ClientPostBackManager.LastPostElement = null;
            lockElement(false);
            isLastPostBackFired = true;
        }
        _ClientPostBackManager.LastPostElement = null;
        window._CancelWaitSpanSetTimeOutHandler = true;
        lockElement(false);
        _ClientPostBackManager.afterEndRequest(sender, args);
        if (Get_Global_NeedResetCheckDirtyTagWhenEnd()) {
            Set_Global_IsCheckDirtyData_TheForm(true);
            Set_Global_NeedResetCheckDirtyTagWhenEnd(false);
        }
        if (isLastPostBackFired) {
            _ClientPostBackManager.afterAllPostBackFired();
        }
        //}
        //Autotest End01^^
    }
    //脏数据保存提示处理
    ClientPostBackManager.prototype.afterEndRequest = function (sender, args) {
        if (Get_Global_DirtyDataSaveSuccessFlag() == "Success" || Get_Global_DirtyDataCancelSuccessFlag() == "Success") //【保存】成功或者【放弃】成功，可以继续执行排队的事件
        {
            if (Get_Global_DirtyDataSaveSuccessFlag() == "Success")
                Set_Global_DirtyDataSaveSuccessFlag(null); //【保存】成功标识复位
            if (Get_Global_DirtyDataCancelSuccessFlag() == "Success")
                Set_Global_DirtyDataCancelSuccessFlag(null); //【放弃】成功标识复位

            Set_Global_IsDirtyData_TheForm(false); //脏数据标志设置为false

            if (_this.DirtyDataDelayEventArray.length > 0) {
                var lastAction = _this.DirtyDataDelayEventArray[0];
                Array.removeAt(_this.DirtyDataDelayEventArray, 0);

                for (var i = 0, len = _this.PopMenuHiddenValues.length; i < len; i++) {
                    if (_this.PopMenuHiddenValues[i].id == lastAction) {
                        //此时$find()还不能使用
                        var dropDownButton_Menu = $ID(_this.PopMenuHiddenValues[i].id);
                        if (dropDownButton_Menu != null) {
                            $ID(dropDownButton_Menu.HelpId).value = _this.PopMenuHiddenValues[i]._hiddenvalue;
                            break;
                        }
                    }
                }

                var reg = /_/g;
                __doPostBack(lastAction.replace(reg, "$"), "");

            } //点击portal的导航菜单的处理
            else if (_ClientPostBackManager.RedictURLAfterAllPostBack != undefined) {
                window.location.href = _ClientPostBackManager.RedictURLAfterAllPostBack;
            } //点击快捷功能菜单的处理
            else if (_ClientPostBackManager.CallAfterAllPostBack != undefined) {
                _ClientPostBackManager.CallAfterAllPostBack();
            }
        }
        // 内存泄漏问题-zjh 2022/10/26
        if (_ClientPostBackManager.prm && _ClientPostBackManager.prm._postBackSettings) {
            _ClientPostBackManager.prm._postBackSettings.sourceElement = null;
            _ClientPostBackManager.prm._postBackSettings = null;
        }
        _ClientPostBackManager.prm = null;
        _ClientPostBackManager.RedictURLAfterAllPostBack = undefined;
    }

    ClientPostBackManager.prototype.get_DoPostBackcompleted = function () {
        return this.DoPostBackcompleted;
    }
    ClientPostBackManager.prototype.set_DoPostBackcompleted = function (val) {
        if (val == null) {
            this.DoPostBackcompleted = null;
        } else if (val.toString().toLowerCase() == "true") {
            this.DoPostBackcompleted = true;
        } else {
            this.DoPostBackcompleted = false;
        }
    }

    //ClientPostBackManager的PersonalProcessQueue事件队列基本用不了，太早了，此时EvalPersonalProcessQueue的时候，页面上的AJax对象还没初始化，那些onvaluechanged，oncelldataValuechanged事件都还没有挂上
    ClientPostBackManager.prototype.Add2PersonalProcessQueue = function (js) {
        //不要走这里，这里基本没有什么用途，请修改代码，考虑用JSQueueEvalAfterPageLoadedManager
        if (_ClientPostBackManager.Runing) {
            var len = this.PersonalProcessQueue.length;
            if (len > 0) {
                //不重复添加
                if (this.PersonalProcessQueue[len - 1] != js) {
                    this.PersonalProcessQueue.push(js);
                }
            } else {
                this.PersonalProcessQueue.push(js);
            }
        }
    }
    ClientPostBackManager.prototype.EvalPersonalProcessQueue = function () {
        //不要走这里，这里基本没有什么用途，考虑用JSQueueEvalAfterPageLoadedManager
        while (this.PersonalProcessQueue.length > 0) {
            var jsEval = this.PersonalProcessQueue.shift();
            eval(jsEval);
        }
    }
    ClientPostBackManager.prototype.afterAllPostBackFired = function () {
        this.EvalPersonalProcessQueue();
        //如果有别的队列可以再继续增加
        //this.EvalDelayJSProcessQueue();
        _ClientJSExecQueueManager.Start();
    }
}
function licenseCanUse() {
    var dom = "<div id='licensePrompt'>"
        + "<div id='licenseContent'>您无权访问该地址页面：[License许可异常！]<br/>尝试获取许可中...</div>"
        + "</div>";
    $("body").append(dom);
    var addID = '';
    var clientHost = '';
    var urlArr = $("#RawUrl").val().split('&');
    for (var i = 0; i < urlArr.length; i++) {
        if (urlArr[i].indexOf("sId") > -1) {
            addID = urlArr[i].split('=')[1];
            break;
        }
    }
    $.get("../mvc/widgetservice/GetServiceInfo", function (result) {
        clientHost = result.ip;
    });
    pollAjax();
    function pollAjax() {
        window.top.licenseAjax = $.ajax({
            type: "get",
            url: "../mvc/License/AssignLicense2",
            data: {
                userId: $("#UserID").val(),
                entId: $("#EnterpriseID").val(),
                appId: parseInt(addID),
                session: $("#SessionID").val(),
                clientHost: clientHost
            },
            success: function (data) {
                if (data) {
                    $("licenseContent").html("已成功获取许可，页面恢复正常使用");
                    $("#licensePrompt").remove();
                    window.licenseTimer && clearInterval(window.licenseTimer);
                    return;
                } else {
                    window.licenseTimer = setTimeout(function () {
                        pollAjax();
                    }, 1000);
                }
            },
            error: function (err) {
                console.log(err);
            }
        })
    }
}
//For 清除无用的UIModel 20100712 lzhm 与ows.showModalDialog协助处理，以及服务器端SimplePage的OnInitComplete配合使用
function OnBeforeWindowUnload() {
    var url = document.location.href;
    if (url.match(/\/simple.aspx/g) != null) {
        if (window._dialogUIModelRemoved) {
            return;
        }
        var h = $("input[name*='TASKID_HIDDENFIELD']");
        var tmp = h.attr("name");
        //$.get("simple.aspx",{lnk:h.attr("name").replace(/_TASKID_HIDDENFIELD/g,""),ClearUIStateByKey:h.val(),__sk:$("#__sk").val()});
        if (window && window.dialogArguments) {
            window.dialogArguments.clearUIState = url + "&ClearUIStateByKey=" + h.val();
        }
        //$.get(url + "&ClearUIStateByKey=" + h.val());
    }

    //wangl: 添加 页面清除 uistate 机制.
    //       在当前非共享model页面,同时 window 中"__DisableCS"==true 时,不生效
    /*
    if (window["__disableCS"] === true) return;
    if (url.indexOf("&__sk=") > -1) return;
    var h = $("#__sk");
    if (!h) return;
    $.get(url + "&__clearPageUIState=" + h.val());
    */

}

function DialogUIModelRemoved() {
    if (window && window.dialogArguments) {
        window._dialogUIModelRemoved = true;
        window.dialogArguments.clearUIState = null;
    }
}
afterOnLoad = function (sender, args) {
    //resize时触发  加载一次
    TdSetHeightHelper.Tools.OnResize();

    if (Sys) {
        if (_LoadingSpan == null)
            _LoadingSpan = document.getElementById("spWait");

        var ele = _LoadingSpan;
        if (ele) {
            ele.className = "WaitSpanHideClass1";
            //ele.style.cursor="default";
        }
        lockElement(false);
        //_ClientPostBackManager.Runing = false;
        if (Sys.WebForms) {
            Sys.WebForms.PageRequestManager.getInstance().remove_pageLoaded(afterOnLoad);
        }
    }
    //gct20080520:处理个性化关联控件数据收集,清除客户端收集的数据，避免下次重复提交
    ClearControlProxyValue();

    //对快捷菜单导航处理脏数据提示 lzhm
    if (document && document.body) {
        var ls = document.getElementsByTagName("SPAN");
        for (var i = 0, len = ls.length; i < len; i++) {
            if (ls[i].className == "MenuItemSpan") {
                var h = ls[i].children[0];
                h.h = h.href;
                //h.href = "javascript:OnBeforeQuickMenuRedirect('" + h.h + "')";
                h.removeAttribute("href");
                h.onclick = function () {
                    return OnBeforeQuickMenuRedirect(this);
                };
            }
        }

    }

    //对于IE8中，个性化编辑下拉菜单无法展示完全的特殊处理 lzhm 20100705
    if (window.$) {
        //$(".menuLabel:has(img)").css("width", 100).css("text-align", "right"); //yangkuna20100826:dom数大时查找元素太慢，改在Css文件中设置
        //For 清除无用的UIModel 20100712 lzhm 与ows.showModalDialog协助处理，以及服务器端SimplePage的OnInitComplete配合使用
        $(function () {
            document.body.onbeforeunload = OnBeforeWindowUnload
        });
    }
}
var _ClientCallBackManager = new ClientCallBackManager();
//客户端CallBack管理器
function ClientCallBackManager() {
    this.StopPost = false;
    this.RunPost = false;
    this.Runing = false;
    this.Handlers = new Array();
    this.Args = null;
    this.Index = -1;

    //个性化处理队列，在所有的CallBack都处理完后，再执行的代码队列
    this.PersonalProcessQueue = new Array();

    ////added by u9lkc 20100323
    ////个性化处理辅助队列 记录CallBack对应的上下文
    //this.ArgsQueue = new Array();
    //this.argRow = "-1";

    ClientCallBackManager.prototype.StartCallBack = function () {
        if (_ClientPostBackManager.Runing) {
            return false;
        }
        return true;
    }
    //push进CallBack事件队列
    ClientCallBackManager.prototype.Push = function (handler) {
        //yangkuna20101122:在启动事件时再收集数据
        //var arg = eval(handler.replace(/CallPDServerCallBack/g,"createQueryString"));

        //wanglei:callback 机制重构
        var callBack = new Object();
        callBack.originalHandler = handler;
        callBack.handler = handler.replace(/CallPDServerCallBack\(/g, "CallPDServerCallBack(_ClientCallBackManager.Args,");
        callBack["status"] = eval(callBack.originalHandler.replace(/CallPDServerCallBack/g, "getStatusString"));
        this.Handlers.push(callBack);

        //gct:如果CallBack嵌套收集有问题的话，可以启用下面这个方案。现在我修改了CallBack队列，应该没有问题了。
        //callBack.handler = handler.replace(/CallPDServerCallBack\(/g,"CallPDServerCallBack(_ClientCallBackManager.ArgsQueue.shift(),");
        //gct:下面这个方案不行，原因是arg里可能有Grid收集的数据含有<>等这些xml符号，会导致很多问题，切忌不可使用下面这句传递CallBack收集数据的方法。
        //callBack.handler = handler.replace(/CallPDServerCallBack\(/g,"CallPDServerCallBack('" + arg + "',");
        //收集 页面状态数据(grid 焦点行列值)
        //获取 及时状态信息
        ////added by u9lkc 20100323
        //var allArg = arg.split('√');
        //if(allArg.length>1 && allArg[1].indexOf("=")>0)
        //{
        //this.ArgsQueue.push(allArg[1].substring(allArg[1].indexOf("=")+1));
        //}
        //else
        //this.ArgsQueue.push("-1");

        /*this.Handlers.push(handler);*/
        this.CanRun = true;
        this.Start();
    }
    ClientCallBackManager.prototype.Start = function (isCallBackComplete) {
        if (Global_Debugger4P) debugger;
        if (this.Runing || _ClientPostBackManager.Runing) {
            //没有Callback在跑，但有PostBack在跑
            //没有要跑的Callback了
            //说明是刚跑完CallBack
            if (this.Runing == false && this.Handlers.length == 0 && isCallBackComplete == true) {
            } else
                return;
        }
        var result = false;
        //var tmp = this.Handlers.pop();
        //gct20090423:按照队列形式
        var tmp = this.Handlers.shift();

        ////added by u9lkc 20100323
        //this.argRow = this.ArgsQueue.shift();

        if (tmp) {
            var handler = tmp.handler;

            if (tmp["status"]) {
                this.status = tmp["status"];
            } else {
                this.status = undefined;
            }
            //wanglei:callback 机制重构
            var execString = tmp.originalHandler.replace(/CallPDServerCallBack/g, "createQueryString");
            execString = execString.substring(0, execString.length - 1);
            execString += ",_ClientCallBackManager.status)";
            var arg = eval(execString);


            this.Args = arg; //tmp.arg;
            //this.ArgsQueue.push(tmp.arg);//gct:如果CallBack嵌套收集有问题的话，可以启用这个方案。现在我修改了CallBack队列，应该没有问题了。
            if (handler) {
                if (handler.trim() != "") {
                    this.Runing = true;
                    if (_LoadingSpan == null)
                        _LoadingSpan = document.getElementById("spWait");
                    var ele = _LoadingSpan;
                    if (ele) {
                        ele.className = "WaitSpanClass4CallBack";
                        // document.forms[0].style.cursor = "wait";
                    }
                    if (JavaScriptDebugTool.LogCallBackData) {
                        $alert("");
                        $alert("CallBack Start：");
                        $alert(handler);
                    }

                    //wanglei: 同步每次 异步请求的 参数数据
                    var execBody = function () {
                        return function () {
                            // __execCallBack(handler, arg);
                            _ClientCallBackManager.Args = arg;
                            //执行 callback;
                            eval(handler);
                        }
                    }();
                    window.setTimeout(execBody, 0);
                    //window.setTimeout(handler,0);
                }
            }
        }
        if (this.Handlers.length == 0) {
            this.CanRun = false;
            //if(this.StopPost){
            //  this.RunPost = true;
            //this.StopPost = false;
            //var strMsg = "由于系统正在处理回发的数据，为了确保数据的完整性,您的操作已经被忽略。请您再次尝试一次。";
            //CreateErrorMsg(strMsg,null);
            //}
            if (this.Runing == false) //这里才是真正的CallBack执行完毕的最后时机，即所有CallBack结束后，再一次Start()的时候
            {
                if (Global_Debugger4P) debugger;
                _ClientCallBackManager.afterAllCallBackFired();
                //Autotest End03^^

                //alert(this.Args);
            }
        }
    }

    //wanglei:异步执行函数体
    // function __execCallBack(evalString, args) {
    //     _ClientCallBackManager.Args = args;
    //     //执行 callback;
    //     eval(evalString);
    // }


    ClientCallBackManager.prototype.ShowMSG = function () {
        /*if(this.StopPost){
        window.status = "由于系统正在处理回发的数据，为了确保数据的完整性,您的操作将被忽略。请您再次尝试一次。";
        this.StopPost = false;
        }else{
        window.status = "";
        }*/
    }

    ClientCallBackManager.prototype.Clear = function () {
        //this.Handlers.Clear();
        if (this.Handlers.length > 0) {
            for (var i = 0; i < this.Handlers.length; i++) {
                //this.Handlers.pop();
                //gct20090423:按照队列形式
                this.Handlers.shift();
            }
        }
    }

    ClientCallBackManager.prototype.Add2PersonalProcessQueue = function (js, isPersonal) {
        if (isPersonal != true) {
            this.PersonalProcessQueue.push(js); //isPersonal不为true，理解为强制性的放在CallBack后执行
        } else if (isPersonal == true) {
            if (_ClientCallBackManager.Runing) {
                var len = this.PersonalProcessQueue.length;
                if (len > 0) {
                    //不重复添加
                    if (this.PersonalProcessQueue[len - 1] != js) {
                        this.PersonalProcessQueue.push(js);
                    }
                } else {
                    this.PersonalProcessQueue.push(js);
                }
            } else {
                //如果走这里说明有问题，应该分析
                ;
            }
        }
    }
    ClientCallBackManager.prototype.EvalPersonalProcessQueue = function () {
        //while(this.PersonalProcessQueue.length > 0)
        for (var i = 0, len = this.PersonalProcessQueue.length; i < len; i++) //len是当前队列最大的JS数量，随着for循环，可能会有新的JS进队列
        {
            if (i == 0)
                this.PersonalProcessQueueEvaling = true;

            //gct20090605：个性化自定义关联在CallBack结束后再执行，【原则】个性化逻辑在业务固有逻辑之后执行
            //debugger;


            if (_ClientPostBackManager.Runing == true) ////随着for循环，可能有新的PostBack又产生了，此时应该立即停止执行队列中的JS，等到这个新的PostBack结束后，再接着执行队列中剩下的JS
            {
                //gct应该将队列中的JS全部转移到PostBack执行完毕后的队列中去，才是正确的
                //alert("在CallBack结束后执行队列中的JS时又产生了新的PostBack，此时应该立即停止执行队列中的JS，等到这个新的PostBack结束后，再接着执行队列中剩下的JS！这个提示不是bug，说明你的个性化操作影响了节点原有固有业务逻辑，请确认这样做是否有意义。该提示仅在测试阶段出现。点确定后继续执行！");
                while (this.PersonalProcessQueue.length > 0) {
                    var notEvalJS = this.PersonalProcessQueue.shift();

                    //深度克隆参照返回列表
                    if (notEvalJS != null && notEvalJS.args != null && notEvalJS.args.result != null && notEvalJS.args.result.Rows != null) {
                        var refData = new ReferenceData();
                        for (var i = 0, len = notEvalJS.args.result.Rows.length; i < len; i++) //深度克隆
                        {
                            refData.Rows[i] = notEvalJS.args.result.Rows[i];
                        }

                        //                        var refData1 = new ReferenceData();
                        //                        for(row in notEvalJS.args.result.Rows)
                        //                        {
                        //                            refData1.Rows.Add(row);
                        //                        }

                        notEvalJS.args.result = refData;
                    }

                    Global_JSQueueEvalAfterPageLoadedManager.Add(notEvalJS, true);
                }
                break; //全部转移后，跳出循环
                ;
            }
            if (_ClientCallBackManager.Runing == true) //随着for循环，可能有新的CallBack又产生了，此时应该立即停止执行队列中的JS，等到这个新的CallBack结束后，再接着执行队列中剩下的JS
            {
                break; //立即跳出循环
            }
            var jsEval = this.PersonalProcessQueue.shift();
            if (typeof (jsEval) == "function") {
                var sender = null;
                var args = null;
                if (jsEval.sender != undefined) //gct20090616：恢复关联逻辑handler现场
                {
                    sender = jsEval.sender;
                }
                if (jsEval.args != undefined) //gct20090616：恢复关联逻辑handler现场
                {
                    args = jsEval.args;
                }

                if (_ClientCallBackManager.Runing == false) //再次判断一下，防止此时又突然加入CallBack
                    jsEval(sender, args);
                else
                    _ClientCallBackManager.Add2PersonalProcessQueue(jsEval);
            } else {
                if (_ClientCallBackManager.Runing == false) //再次判断一下，防止此时又突然加入CallBack
                    eval(jsEval);
                else
                    _ClientCallBackManager.Add2PersonalProcessQueue(jsEval);
            }

            if (i == len - 1)
                this.PersonalProcessQueueEvaling = false;
        }
    }
    ClientCallBackManager.prototype.afterAllCallBackFired = function () {
        this.EvalPersonalProcessQueue();
        _ClientJSExecQueueManager.Start();
    }
}

var Global_ClientEventHandlerManager = new ClientEventHandlerManager();
//该类用来管理ClientCallBackManager和ClientPostBackManager
function ClientEventHandlerManager() {
    this.IsEventRuning = false;

    ClientEventHandlerManager.prototype.get_IsEventRuning = function () {
        if (_ClientPostBackManager.Runing == true || _ClientCallBackManager.Runing == true) {
            this.IsEventRuning = true;
        } else {
            this.IsEventRuning = false;
        }
        return this.IsEventRuning;
    }
    ClientEventHandlerManager.prototype.Add2PersonalProcessQueue = function (js) {
        if (_ClientPostBackManager.Runing == true) //先加入PostBackManager中
        {
            //gct20090909:不应该加入_ClientPostBackManager，因为_ClientPostBackManager队列出队列执行的时候，AJax对象还没有初始化，所以会报$find()为null的错误，在个性化列批改的时候容易发生。
            //_ClientPostBackManager.Add2PersonalProcessQueue(js);//再加入CallBackManager中
            //Global_JSQueueEvalAfterPageLoadedManager.Add("debugger;"+js);
            Global_JSQueueEvalAfterPageLoadedManager.Add(js);
        } else if (_ClientCallBackManager.Runing == true) {
            _ClientCallBackManager.Add2PersonalProcessQueue(js);
        }
    }
}

var ValidateFunction = new Array();
addValidater = function (func) {
    var bAdd = true;
    if (func) {
        for (var i = 0; i < ValidateFunction.length; i++) {
            if (func == ValidateFunction[i]) {
                bAdd = false;
                break;
            }
        }
    }
    if (bAdd) {
        ValidateFunction.push(func);
    }
}

//addValidater("isCallbacking();function isCallbacking(){if(_ClientCallBackManager.Runing){return false;}else{return true;}}");
lockElement = function (bLock) {
    if (!bLock && _ClientPostBackManager.Runing == true) {
        window._CancelWaitSpanSetTimeOutHandler = true;
    }
    if (_LoadingSpan == null)
        _LoadingSpan = document.getElementById("spWait");
    var ele = _LoadingSpan;
    //===by zzq 这个地方目前注释掉
    //===by zzq 改变对话框弹关闭之后的方法调用方式，导致dom事件目标改变，通过zlayer.elementSrc[0]存储事件目标指向
    //if (zlayer.srcEventElement[0]) {
    //    if (zlayer.srcEventElement[0].type == "button") {
    //        zlayer.srcEventElement[0].disabled = bLock;
    //        if (ele) {
    //            ele.src = zlayer.srcEventElement[0];
    //        }
    //    }
    //} else {
    //    if (!bLock) {
    //        if (ele && ele.src) {
    //            ele.src.disabled = bLock;
    //            ele.src = null;
    //        }
    //    }
    //}
    try {
        //弹出框关闭后，这里的window.event.srcElement 会报错，导致后面的代码没执行，chrome中没有问题
        if (window.event) {
            if (window.event.srcElement) {
                if (window.event.srcElement.type == "button") {
                    window.event.srcElement.disabled = bLock;
                    if (ele) {
                        ele.src = window.event.srcElement;
                    }
                }
            } else {
                if (!bLock) {
                    if (ele && ele.src) {
                        ele.src.disabled = bLock;
                        ele.src = null;
                    }
                }
            }
        }
    }
    catch (eee) {

    }
    var classWait = "WaitSpanHideClass1";
    var classHide = "WaitSpanHideClass1";
    var classWaitNoPic = "WaitSpanHideClass1";
    if (bLock) {
        var sourceControl = null;
        if (theForm && theForm.__EVENTTARGET && theForm.__EVENTTARGET.value) {
            if ($ID(theForm.__EVENTTARGET.value.replace(/\$/g, '_'))) {
                sourceControl = $ID(theForm.__EVENTTARGET.value.replace(/\$/g, '_'));
            }
        }

        if (IsHideLoading(sourceControl)) {
            classWait = classWaitNoPic;
        }

        /* if (document.forms[0]) {
             document.forms[0].style.cursor = "wait";
         }*/
        if (ele) {
            ele.className = classWait;
        }
        //Bug U9V2100386891 lzhm
        var btnLogout = $ID("u_Displaytitle1_ctl00_btnLogout");
        if (btnLogout && !btnLogout.getAttribute("href1")) {
            btnLogout.setAttribute("href1", btnLogout.getAttribute("href"));
            btnLogout.setAttribute("href", "javascript:void(0);");
        }
    } else {
        // document.forms[0].style.cursor = "default";
        if (ele) {
            ele.className = classHide;
        }
    }

    function IsHideLoading(sourceControl) {
        if (sourceControl == null)
            return false;
        if (sourceControl.className.containsCssClass("TC tPn")) {
            return true;
        }

        if (sourceControl.id) {
            //ID为 BtnOK的按钮 （弹出卡片页面的确定按钮）
            if (sourceControl.id.replace(/_BtnOK$/g, "").length < sourceControl.id.length)
                return true;
            //ID为 _BtnPopCancel的按钮 (弹出卡片页面的取消按钮)
            if (sourceControl.id.replace(/_BtnPopCancel$/g, "").length < sourceControl.id.length)
                return true;
            //ID为 _ConfirmButton的按钮 (参照的确定按钮)
            if (sourceControl.id.replace(/_ConfirmButton$/g, "").length < sourceControl.id.length)
                return true;
            //ID为 _CancelButton的按钮 (参照的取消按钮)
            if (sourceControl.id.replace(/_CancelButton$/g, "").length < sourceControl.id.length)
                return true;
            //DataGrid处于批量修改状态时也需隐藏
            var ctrl = $find(sourceControl.id);
            if (ctrl && ctrl.IsHiddeLoading) {
                return ctrl.IsHiddeLoading();
            }
        }
        return false;
    }
}

afterOnLoad4RemoveWaitSpan = function () {
    if (Sys && _ClientPostBackManager && _ClientPostBackManager.Runing) {
        if (_LoadingSpan == null)
            _LoadingSpan = document.getElementById("spWait");
        var ele = _LoadingSpan;
        if (ele) {
            ele.className = "WaitSpanHideClass1";
            //ele.style.cursor = "default";
        }
        lockElement(false);
        //_ClientPostBackManager.Runing = false;
    }
}

function ActionManager() {

}
ActionManager.prototype.showDialogCallback = function (ret, args) {
    if (ret == true) {
        //_ClientPostBackManager 对象如何获取
        Array.add(_ClientPostBackManager.DirtyDataDelayEventArray, args.srcElementID);
        if (args.EventType == Global_DirtyData_EventType.DropDownButtonMenu) {
            if ($find(args.srcElementID)._hidden.value != "" && $find(args.srcElementID)._hidden.value != $find(args.srcElementID)._hidden.oldvalue) //说明要触发menu的Get请求
            {
                var a = $find(args.srcElementID);
                var obj = new Object();
                obj.id = args.srcElementID;
                obj._hiddenvalue = $find(args.srcElementID)._hidden.value;

                Array.add(_this.PopMenuHiddenValues, obj);

                $find(args.srcElementID)._hidden.value = ""; //使得menu在save过程中不触发事件
            }
        }
        var saveid = GetBtnSaveID().replace(/_/g, "$");
        __doPostBack(saveid, '');
        lockElement(false);
        return;
    }
    if (ret == false) {
        Set_Global_IsDirtyData_TheForm(false);
        Set_Global_IsCheckDirtyData_TheForm(false);
        Set_Global_NeedResetCheckDirtyTagWhenEnd(true);
        var script = args.script;

        eval(script);

    } else if (ret == undefined) {
        lockElement(false);
        //top.__UFCurrentFocusControl  此属性是panel.js中记录的当前控件名称
        if (top.__UFCurrentFocusControl && $get(top.__UFCurrentFocusControl)) {
            try {
                $get(top.__UFCurrentFocusControl).focus();
            } catch (e) { }
        }
        return;
    }
}

DoAction = function (script) {
    if (caCheck(script) === false) {
        return false;
    }
    //解决查询方案界面，在录入料品等信息后马上点击确定
    //这时候料品信息会做validate等操作，导致弹出了layer框
    //然后确定代码并没有感知到layer的存在，也去做了postback
    //导致页面数据刷新了，而layer中返回的数据在往控件上绑定的时候，由于控件刷新了已经不是当时那个控件了，所以就赋不上值
    //而且正常操作也是在录入料品之后，点击确定导致料品失去焦点，如果有弹框，那么这个确定click事件应该不会被触发，但是在谷歌中这个情况就会发生
    //找了很多解决方案，发现只有硬编码才能造成最小的伤害。
    if (window.location.href.indexOf("41b0fca9-103e-40b9-8629-b5ec283c1fb8") > -1) {
        if (window.event.target.id == "u_S_S1_OnFind_button" && window.isLayering) {
            return false;
        }
    }
    /*目前支持多次PostBack的情况处理，这段代码注释
    if(_ClientPostBackManager.Runing){
    window.status =Sys.CultureInfo[getCultureName().toLowerCase()].Resources._Sys_Busy;
    return false;
    }  //如果已经有Postback进行中，则抛弃此次postback
    else{
    window.setTimeout("eval(\"if(_ClientPostBackManager.Runing){window.status =Sys.CultureInfo[getCultureName().toLowerCase()].Resources._Sys_Busy;}else{"+script+"}\")",100);
    }
    */
    /*yangkuna_V2.1在toolbar上点击【放弃】时检查数据修改后是否需要保存？这段代码注释
    if(IsBtnCancelDoAction(script))
    {
    Set_Global_IsDirtyData_TheForm(false);
    }
    */
    var postEventTarget = script.replace('__doPostBack', '');
    postEventTarget = postEventTarget.replace('(', '');
    postEventTarget = postEventTarget.replace(')', '');
    postEventTarget = postEventTarget.replaceAll('\'', '');
    postEventTarget = postEventTarget.replace(',', '');

    var actionManager = new ActionManager();
    if (Global_Debugger4P) debugger;
    if (postEventTarget) {
        var retValue = IsShowConfirmSaveDialog(postEventTarget);
        var args = {
            'EventType': retValue.EventType,
            'srcElementID': window.event.srcElement.id,
            'script': script
        }
        if (retValue.Value) {
            var url = "../ufsoft/saveconfirm.aspx?chromeType=4&ShowType=ShowModal";
            // 205修改为120  确定弹出层高度太大
            var ret = ShowModalDialogForAll(url, '', '120', '365', 'true', 'false', actionManager, args);
        } else {
            eval(script);
        }
    }
}

/*
ValidateMe = function(){
return true;
}*/
beforeSubmit = function () {
    //yangkuna20100827:解决数字控件录入超出范围时的post
    if (window._NotFirePostBackControl && theForm.__EVENTTARGET.value && (window._NotFirePostBackControl == theForm.__EVENTTARGET.value)) {
        return false;
    }
    ////mahx 如果当前页面正在弹出ShowModalDialog是不允许继续提交的，不然会在ModalDialog关闭后引发一系列问题。暂时先返回false
    //if (window.isLayering)
    //    return false;
    var res = true;
    if (window._TextBoxFirePostBack == true) {
        window._CancelWaitSpanSetTimeOutHandler = false;
        window.setTimeout(function () {
            if (!window._CancelWaitSpanSetTimeOutHandler) {
                lockElement(true);
            }
        }, 100);
        //window._TextBoxFirePostBack = false; //改在OnbeginRequest中置false
    } else {
        lockElement(true);
    }
    DataCollect();
    ClearErrorMsgDiv(); //清除显示中的ErrorTooltip的DIV
    return res;
}
DataCollect = function () {
    //yangkuna_处理列表的数据收集_正在编辑的Grid先收集
    var startIndex = 0;
    var g;
    for (var i = 0; i < ValidateFunction.length; i++) {
        var m = ValidateFunction[i].match(/\$find\(['"]([_a-zA-Z0-9]+)['"]\)\.BeforeSubmit\(\);/);
        if (m) {
            g = $find(m[1]);
            if (g && g.m_gridBodyEventsHandler && g.m_gridBodyEventsHandler.GridEditHelper && g.m_gridBodyEventsHandler.GridEditHelper.CellEditActive == true) {
                startIndex = i;
                break;
            }
        }
    }

    res = eval(ValidateFunction[startIndex]);
    for (var i = 0; i < ValidateFunction.length; i++) {
        if (i != startIndex) {
            res = eval(ValidateFunction[i]);
        }
    }
}
ValidateMe = function () {

    /*if(_ClientPostBackManager.Runing){
    window.status =Sys.CultureInfo[getCultureName().toLowerCase()].Resources._Sys_Busy;
    return false;
    }  //如果已经有Postback进行中，则抛弃此次postback
    */

    var res = true;
    if (_ClientCallBackManager.Runing) {
        res = false;
    } else {
        res = true;
    }
    for (var i = 0; i < ValidateFunction.length; i++) {
        res = eval(ValidateFunction[i]);
        if (res == false) {
            break;
        }
    }
    if (_ClientCallBackManager.Runing) {
        res = false;
        //          _ClientCallBackManager.StopPost = true;
        //          _ClientCallBackManager.RunPost = true;
        //          _ClientPostBackManager.SrcElement = theForm.__EVENTTARGET.value;
        //          var cT = $find(_ClientPostBackManager.SrcElement);
        //          if(cT)
        //              if(cT.get_Type()==ControlType.Menu){
        //                  _ClientPostBackManager.MenuIndex = $find(_ClientPostBackManager.SrcElement)._hidden.value;
        //          }
        //          lockElement(false);
    }

    /*if(_ClientPostBackManager.Runing){return false;}  //如果已经有Postback进行中，则抛弃此次postback*/
    if (Sys) {
        if (res) {
            /*var ele = document.getElementById("spWait");
            if(ele){
            //ele.onmouseup=function a(){window.status =Sys.CultureInfo[getCultureName().toLowerCase()].Resources._Sys_Busy;};
            ele.style.cursor="wait";
            }
            if(ele){
            ele.className="WaitSpanClass";
            if(window.event && window.event.srcElement && window.event.srcElement.type=="button")
            ele.src = window.event.srcElement;
            }*/
            //
        }
        if (Sys.WebForms) {
            Sys.WebForms.PageRequestManager.getInstance().add_pageLoaded(afterOnLoad);
        }
    }
    if (res) {
        _ClientPostBackManager.Runing = true;
        Set_Global_WillDoPostBack(false); //开始running后，就设置该标识为false
        _ClientCallBackManager.Clear();
    }
    return res;
}

function DelayBind(BehaviorExecuteName) {
    if (Sys && Sys.WebForms) {
        Sys.WebForms.PageRequestManager.getInstance().add_pageLoaded(function () {
            window.setTimeout(BehaviorExecuteName, 0)
        });
    } else {
        window.setTimeout(BehaviorExecuteName, 0);
    }
}

function showErrorMsg(msg) {
    /*var topP = GetTopPanel();
    if(topP){
    var temp=document.createElement("img");
    temp.src = "http://localhost/pppp/images/RefPnlError.gif";
    temp.title = msg;
    topP.innerHTML = temp.innerHTML+topP.innerHTML;
    }*/
    CreateErrorMsg(msg, null);
}

function GetTopPanel() {
    var ele = null;
    var fieldCtrls = document.getElementsByTagName("div");
    for (var i = 0, len = fieldCtrls.length; i < len; i++) {
        if (fieldCtrls[i].className.containsCssClass("toppanel")) {
            ele = fieldCtrls[i];
            break;
        }
    }
    return ele;
}


//Modified By Yin Mingjun 2012/04/10
//  ----All contents be moved to UI.Common.js
//
//function DataType(){}
//    DataType.String ="0";
//    DataType.Float  ="1";
//    DataType.INT    ="2";
//    DataType.Date   ="3";
//    DataType.Email  ="4";
//    DataType.Time   ="5";
//    DataType.Int64  = "7",
//    DataType.Decimal= "8",
//    DataType.Int16  = "9",
//    DataType.Single = "10",
//    DataType.Double = "11",
//    DataType.Bool   ="22";
//    DataType.Any    ="any";

//Modified By Yin Mingjun 2012/04/10
//  ----All contents be moved to UI.Common.js
//
////键盘函数枚举变量。
//function KeyCode(){}
//    KeyCode.left       =37;
//    KeyCode.right      =39;
//    KeyCode.up         =38;
//    KeyCode.down       =40;
//    KeyCode.enter      =13;
//    KeyCode.shift      =16;
//    KeyCode.space      =32;
//    KeyCode.altkey     =18;
//    KeyCode.home       =36;
//    KeyCode.end        =35;
//    KeyCode.pup        =33;
//    KeyCode.pdn        =34;
//    KeyCode.backspace  =8;
//    KeyCode.tab        =9;
//    KeyCode.del        =46;
//    KeyCode.insert     =45;
//    KeyCode.F2         =113;
//    KeyCode.F3         =114;
//    KeyCode.F12         =123;
//    KeyCode.G_B        =71;
//    KeyCode.g_s        =103;
//    KeyCode.Zero       =48;
//    KeyCode.ESC          =27;
//    KeyCode.M          =77;
//  KeyCode.a          =65;
//  KeyCode.s          =83;
//    KeyCode.GridTab    =999;


//记录表格和弹出窗口交互数据格式。
function RowData() { }
RowData.RowFlag = "Items";
RowData.CellFlag = "Item";
RowData.CellID = "FieldID";
RowData.CellValue = "Value";

function Basic() { };
Basic.NameSpace = "W:";
Basic.TimeFocusEvent = false;

//data grid edit control defalt focus
Basic.GridEditSetFocus = function (inputItem) {
    try {
        if (inputItem) {
            if (inputItem.value == "") {
                inputItem.focus();
            } else {
                inputItem.focus();
                if (window.event.type == "keydown") $Event(event).preventDefault();
            }
        }
    } catch (e) { }
} //end gridEditSetFocus

Basic.SetFocus = function (inputItem) {
    Basic.TimeFocusEvent = true;
    if (inputItem.id != "") {
        setTimeout(" SetIDFocus('" + inputItem.id + "')", 100);
    } else {
        setTimeout(inputItem.focus, 100);
    }
    setTimeout(Basic.ResetFlag, 101);
} //end setFocus

function SetIDFocus(inputString) {
    var curItem = document.all(inputString);
    if (typeof (curItem) != "undefined" && curItem != null) {
        try {
            curItem.focus();
        } catch (e) { }
    }
} //setIDFocus

function SetFocus(inputItem) {
    try {
        inputItem.focus();
    } catch (e) { }
} //end SetFocus

Basic.ResetFlag = function () {
    Basic.TimeFocusEvent = false;
} //end resetFlag
//===by zzq 封装xml工具方法
Basic._loadXML = function (xmlString) {
    return XMLHelper.createXMLDocument(xmlString);
}

Basic.GetXmlDom = function () {
    return XMLHelper.createXMLDocument("");
}

Basic.loadXML = function (xmlDom, xmlString) {
    return XMLHelper.createXMLDocument(xmlString);
    ////IE 的写法
    //if (xmlDom.loadXML) {
    //    xmlDom.loadXML(xmlString);
    //    return xmlDom;
    //} else {
    //    //兼容chrome的写法
    //    var xmlDomParent = document.createElement('xmlDomParent');
    //    xmlDomParent.innerHTML = xmlString;
    //    return xmlDomParent;
    //}
}

Basic.SendXmlData = function (xmlData, serverUrl) {
    if (serverUrl == null || serverUrl == '') {
        serverUrl = '';
    }
    var xmlhttp = RequestHelper.getXHR();
    var url = serverUrl;

    xmlhttp.open("post", url, false);
    xmlhttp.send(xmlData);
    if (testXmlhttp(xmlhttp)) {
        return xmlhttp.responseText;
    } else {
        var result = "";
        return result;
    }
} //end sendXmlData

function testXmlhttp(xmlhttp) {
    if (xmlhttp.status != 200) {
        return false;
    }
    return true;
}

//创建loading 对象，用于load数据
function load() {

    // this.loading = document.createElement("<div style='position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=20);'>");
    // 2016.06.02 跨浏览器兼容 -- weiyin
    var styleObj = {
        style: "position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=20);opacity:0.2;"
    }
    this.loading = $E(document).createElement('div', styleObj);

    // this.Image = document.createElement("<img src='images/loading.gif'>");
    this.Image = $E(document).createElement('img', { 'src': 'images/loading.gif' });  //跨浏览器兼容 -- weiyin

    this.loading.appendChild(this.Image);
    this.loading.style.backgroundColor = "blue";
    this.DisplayLoading = function (inputElement) {
        if (typeof (inputElement) == "undefined") {
            document.body.appendChild(this.loading);
            this.loading.style.top = 0 + "px";//===by zzq 增加px防止错位
            this.loading.style.left = 0 + "px";
            this.loading.style.width = "100%";
            this.loading.style.height = "100%";
        } else {
            inputElement.document.body.appendChild(this.loading);
            var rect = inputElement.getBoundingClientRect();
            this.loading.style.top = rect.top + "px";//===by zzq 增加px防止错位
            this.loading.style.left = rect.left + "px";//===by zzq 增加px防止错位
            this.loading.style.width = (rect.right - rect.left) + 'px';
            this.loading.style.height = (rect.bottom - rect.top) + 'px';
        }
    }
    this.HiddenLoading = function () {

        if (this.loading.parentElement != null) {
            this.loading.parentElement.removeChild(this.loading);
        }
    }
} //end load

//***********************NumericControl脚本。********************
function numeralsOnly(event, input) {
    var k = event.keyCode;
    var decimalSeparator = input.getAttribute("decimalSeparator");
    var negativeSign = input.getAttribute("negativeSign");
    if (!((k > 47 && k < 58) || k == decimalSeparator.charCodeAt(0) || k == negativeSign.charCodeAt(0))) {
        $Event(event).preventDefault();
    }
}

function numeralsBefore(input) {
    var decimalSeparator = input.getAttribute("decimalSeparator");
    var negativeSign = input.getAttribute("negativeSign");
    input.value = ConvertToDecimal(input.value, decimalSeparator, negativeSign);
    input.style.color = "black";
    input.select();
}

function ConvertToDecimal(n, decimalSeparator, negativeSign) {
    //无论何种数值都会包含小数点和负号，其他的替换调。
    n = n.toString();
    var pattern = "[^\\d\\" + decimalSeparator + "\\" + negativeSign + "]";
    var regexPattern = new RegExp(pattern, "g");
    n = n.replace(regexPattern, "");
    return n;
}

function numeralsAfter(input) {
    var maxValue = input.getAttribute('maxValue');
    var minValue = input.getAttribute('minValue');
    input.value = handleMaxMinValue(maxValue, minValue, input.value);
    var negativeSign = input.getAttribute("negativeSign");
    var decimalSeparator = input.getAttribute("decimalSeparator");
    var decimalDigits = input.getAttribute("decimalDigits");
    var groupSeparator = input.getAttribute("groupSeparator");
    var symbols = input.getAttribute("symbols");
    var n = input.value.toString();
    input.value = FormatDecimal(n, negativeSign, decimalSeparator, decimalDigits, groupSeparator, symbols);
} //end numeralsAfter

function handleMaxMinValue(maxValue, minValue, curValue) {
    //gct:if curValue=="",curValue is not considered between maxValue and minValue.To solve the problem that the value of input return the previous value if it is deleted by "<-".
    if (curValue.toString() == "") return false;
    var newValue = new Number(curValue);
    if (isNaN(newValue)) {
        return false;
    }
    var maxNumber = new Number(maxValue);
    if ((maxValue != null) && (newValue > maxNumber)) {
        return false;
    }
    var minNumber = new Number(minValue);
    if ((minValue != null) && (newValue < minNumber)) {
        return false;
    }
    return true;
} //end handleMaxMinValue

function FormatDecimal(n, negativeSign, decimalSeparator, decimalDigits, groupSeparator, symbols) {
    n = n.toString();
    var sy = symbols.split(',');
    //sy[0]正数前缀
    //sy[1]正数后缀
    //sy[2]负数前缀
    //sy[3]负数后缀
    var negPattern = new RegExp("\\" + negativeSign);
    //判断是否为负数
    var isNegative = (n.match(negPattern) != null ? true : false);
    var numberPattrn = new RegExp("[^\\d\\" + decimalSeparator + "]", "g");
    //清除其他符号，包括负号
    n = n.replace(numberPattrn, '');
    var pattern = new RegExp("(\\d*)(\\" + decimalSeparator + "*)(\\d*)");
    var m = n.match(pattern);
    //m.input m.index m.LastIndex
    //m[0] 输入的数值
    //m[1] 整数部分
    //m[2] 小数点符号
    //m[3] 小数部分
    //格式化小数部分，四舍五入、自动补零。
    var f = m[3];
    if (f.length > decimalDigits) {
        f = f / Math.pow(10, (f.length - decimalDigits));
        f = Math.round(f);
        while (f.toString().length < decimalDigits) {
            f = '0' + f
        };
    } else {
        while (f.toString().length < decimalDigits) {
            f += '0'
        };
    }
    //格式化整数部分，使用千分位符号。
    var w = new Number(m[1]);
    if (f == Math.pow(10, decimalDigits)) {
        w += 1;
        f = f.toString().substr(1);
    }
    w = w.toString();
    //注意千分位尺寸是个数组，如何处理。目前使用第一组数据
    var s = 3;
    var l = w.length - s;
    while (l > 0) {
        w = w.substr(0, l) + groupSeparator + w.substr(l);
        l -= s;
    }
    //精度位0，去掉小数点符号。
    if (decimalDigits == 0) {
        m[2] = '';
        f = ''
    } else {
        m[2] = decimalSeparator;
    }
    if (typeof sy[2] == "undefined") {
        sy[2] = "";
    }
    if (typeof sy[1] == "undefined") {
        sy[1] = "";
    }
    if (typeof sy[3] == "undefined") {
        sy[3] = "";
    }
    if (typeof sy[0] == "undefined") {
        sy[0] = "";
    }
    if (typeof sy[0] == "undefined") {
        sy[0] = "";
    }
    if (typeof w == "undefined") {
        w = "";
    }
    return (isNegative ? sy[2] + w + m[2] + f + sy[3] : sy[0] + w + m[2] + f + sy[1]);
}


//Modified By Yin Mingjun 2012/04/10
//  ----All contents be moved to UI.Common.js
//
////**888
//function ToBoolean(boolValue)
//{
//  if(typeof(boolValue)=="string")
//  {
//      if(boolValue.toLowerCase()=="true")
//          return true;
//        else
//            return false;
//  }
//  if(typeof(boolValue)!="boolean")
//  {
//      return false;
//  }
//  return boolValue;
//} //end ToBoolean

/*Error message handler*/
function BindErrorMessageToControl(divObj) {
    if (!divObj) return;
    divObj.style.display = "none";
    var index = 0;
    var subDivCount = divObj.children.length;
    for (var i = 0; i < subDivCount; i++) {
        var subDivObj = divObj.children[index];
        // subDivObj.msg = subDivObj.title;
        subDivObj.cusAttr('msg', $(subDivObj).attr('title'));   //weiyin -- 2016.07.05
        // subDivObj.title = "";
        $(subDivObj).attr('title', '');
        var targetControlID = subDivObj.cusAttr("TargetID");

        var entityID = subDivObj.cusAttr("EntityID");
        var entityFullName = subDivObj.cusAttr("EntityFullName");

        var targetControlObj = document.getElementById(targetControlID);
        if (targetControlObj)
            BindErrorControl(subDivObj, targetControlObj, entityID, entityFullName);
        else
            index++;
    }
} //bindErrorMessage
function ShowDetailMessage(entityID, entityFullName) {
    var url = "simple.aspx?lnk=738a5334-da18-494a-b817-3d083ab52c70&chromeType=4&EntityID=" + entityID + "&EntityFullName=" + entityFullName;
    ShowModalDialog(url, "", 408, 630, true, false);
}

function ShowErrorMsg_menter(div, entityID, entityFullName, hubFlag) {
    var IsGridAllMsg = div.cusAttr("IsGridAllMsg");
    var msgDiv = document.getElementById("ErrorMessageDiv");
    if (msgDiv == null) return;
    // if ((div.msg != null) && (div.msg.length > 0)) {
    if ((div.cusAttr('msg') != null) && (div.cusAttr('msg').length > 0)) {  //weiyin -- 跨浏览器兼容性 -- 2016.07.01
        if (entityFullName) {
            msgDiv.innerHTML = "<a href=\"#\" onclick=ShowDetailMessage('" + entityID + "','" + entityFullName + "')>" + div.cusAttr('msg') + "</a>";
            msgDiv.onmouseleave = function () {
                HideErrorMsg_mout(div);
            };
        } else if (IsGridAllMsg) {
            var msg = div.cusAttr('msg');
            msg = msg.replace(/(<style.*?<\/style>)/g, "").replace(/(<link.*\s+href=(?:"[^"]*"|'[^']*')[^<]*>)/g, "").replace(/<script.*?>.*?<\/script>/g, "");
            msgDiv.innerHTML = msg;
            msgDiv.onmouseleave = function () {
                HideErrorMsg_mout(div);
            };
        } else {
            // msgDiv.innerHTML = div.msg;
            var msg = div.cusAttr('msg');
            msg = msg.replace(/(<style.*?<\/style>)/g, "").replace(/(<link.*\s+href=(?:"[^"]*"|'[^']*')[^<]*>)/g, "").replace(/<script.*?>.*?<\/script>/g, "");
            msgDiv.innerHTML = msg;
        }

        if (hubFlag && $(".moreMsgBox").length == 0) {  //增加按钮，
            //msgDiv.innerHTML += "<span class='moreMsgBox fa fa-info-circle text-primary' title='详情'></span>";
            msgDiv.innerHTML += "<span class='moreMsgBox fa text-primary' title='详情'>&gt;&gt;</span>";
        }
        GetOffsetTop(div);
        GetOffsetLeft(div);
        msgDiv.style.top = (parseInt(div.cusAttr('oY'), 10) + 20 + parseInt(document.body.scrollTop, 10)) + 'px';  //添加px单位，这个一定不能少 2016.07.01 -- weiyin
        msgDiv.style.left = (parseInt(div.cusAttr('oX'), 10) + 14 + parseInt(document.body.scrollLeft)) + 'px';
        msgDiv.style.visibility = "visible";
        if ((IsGridAllMsg) && (msgDiv.clientHeight >= div.parentElement.clientHeight - 20)) {
            msgDiv.style.height = (div.parentElement.clientHeight - 20) + 'px';
            msgDiv.style.overflowY = "auto";
            div.msgDivHeight = msgDiv.style.height + 'px';
        } else {
            if (div.msgDivHeight != null) {
                msgDiv.style.height = div.msgDivHeight + 'px';
            } else {
                msgDiv.style.height = null;
                msgDiv.style.overflowY = "visible";
            }
        }
    }
    //滑过按钮时候显示u9hub错误弹出层
    if ($(".moreMsgBox").length > 0) {
        var timer = null;
        $("#ErrorMessageDiv .moreMsgBox").on('click mouseover mouseout', function () {
            var postionXY = {
                frameId: $(window.frameElement)[0].id,
                left: $(this).offset().left,
                top: $(this).offset().top
            }
            if (event.type == "click") {
                window.top.errorMsgShowBox.checkType(div, entityID, entityFullName, postionXY);
            } else if (event.type == "mouseover") {
                timer = setTimeout(function () {
                    window.top.errorMsgShowBox.checkType(div, entityID, entityFullName, postionXY);
                }, 2000);
            } else if (event.type == "mouseout") {
                clearTimeout(timer);
            }
        })
    }
    msgDiv.onmouseenter = function (e) {
        if (!$(this).hasClass("hover")) {
            $(this).addClass("hover");
        }
        if (e) e.preventDefault();
    };
    msgDiv.onmouseleave = function (e) {
        if ($(this).hasClass("hover")) {
            $(this).removeClass("hover");
        }
        if (e) e.preventDefault();
        HideErrorMsg_mout();
    };
    if (HideErrorMsg_mout_Inner_Time)
        clearTimeout(HideErrorMsg_mout_Inner_Time);
}

var HideErrorMsg_mout_Inner_Time = null;

function HideErrorMsg_mout(div) {
    HideErrorMsg_mout_Inner_Time = setTimeout(HideErrorMsg_mout_Inner, 500);
}
function HideErrorMsg_mout_Inner() {
    var msgDiv = document.getElementById("ErrorMessageDiv");
    if (msgDiv == null) return;
    if (!$(msgDiv).hasClass("hover")) {
        msgDiv.style.visibility = "hidden";
    }
}


function GetOffsetLeft(div, p) {
    if (p == null) {
        p = div;
        div.cusAttr('oX', 0); //===by zzq
        //div.oX = 0;
    }
    //div.oX = parseInt(div.oX, 10) + parseInt(p.offsetLeft, 10) - parseInt(p.scrollLeft, 10);
    div.cusAttr('oX', parseInt(div.cusAttr('oX'), 10) + parseInt(p.offsetLeft, 10) - parseInt(p.scrollLeft, 10)); //===by zzq
    p = p.offsetParent;
    if (p) {
        GetOffsetLeft(div, p);
    }
}

function GetOffsetTop(div, p) {
    if (p == null) {
        p = div;
        //div.oY = 0;
        div.cusAttr('oY', 0);
    }
    div.cusAttr('oY', parseInt(div.cusAttr('oY'), 10) + parseInt(p.offsetTop, 10) - parseInt(p.scrollTop, 10)); //===by zzq
    p = p.offsetParent;
    if (p) {
        GetOffsetTop(div, p);
    }
}

function GotoErrorRecord(grdID, rcdID) {
    var grdObj = document.getElementById(grdID);
    if (grdObj) {
        grdObj.control.OnGotoErrorRecordClick(rcdID);
    }
}

function CreateErrorMsg(strMsg, targetBind) {

    if (targetBind == null) {
        var divs = document.getElementsByTagName("div");
        for (var i = 0; i < divs.length; i++) {
            if (divs[i].className.containsCssClass("toppanel") && divs[i].id) {
                targetBind = divs[i];
                break;
            }
        }
    }
    if (targetBind) {
        // var divMsg = document.createElement("<DIV style=\"DISPLAY: inline\" msg=\"" + strMsg + "\" recordIndex=\"0\" TargetID=\"" + (targetBind && targetBind.id ? targetBind.id : GetTopPanel()) + "\">");

        // 2016.06.02跨浏览器兼容 -- weiyin
        var attributeObj = {
            "style": "display:inline"
        }
        var divMsg = $E(document).createElement('div', attributeObj);
        divMsg.cusAttr("msg", strMsg);
        divMsg.cusAttr("recordIndex", "0");
        divMsg.cusAttr("TargetID", (targetBind && targetBind.id ? targetBind.id : GetTopPanel()));
        //divMsg.innerHTML = "<IMG ondblclick=\"if(window.clipboardData.setData('Text',this.title)){alert('信息已经复制到剪贴板');}\" title=\""+strMsg+"\" src=\"../images/RefPnlError.gif\">";
        divMsg.innerHTML = "<IMG src=\"../images/RefPnlError.gif\">";
        divMsg.setAttribute("className", "ErrorToolTip");

        BindErrorControl(divMsg, targetBind);
    } else {
        alert(strMsg);
    }
}

function CreateWarnMsg(strMsg, targetBind, grid) {

    if (targetBind == null) {
        var divs = document.getElementsByTagName("div");
        for (var i = 0; i < divs.length; i++) {
            if (divs[i].className.containsCssClass("toppanel") && divs[i].id) {
                targetBind = divs[i];
                break;
            }
        }
    }
    if (targetBind) {
        //如果是当前Tab页，则不提示错误消息。
        if (IsCurrentTabPage(targetBind.id)) return;
        //如果已经存在ErrorToolTip，则不再提示WarnToolTip。
        if (IsShowingErrorMsg(targetBind.parentElement)) return;

        // var divMsg = document.createElement("<DIV style=\"DISPLAY: inline\" msg=\"" + strMsg + "\" recordIndex=\"0\" TargetID=\"" + (targetBind.id ? targetBind.id : GetTopPanel()) + "\">");

        //2016.06.02跨浏览器兼容 -- weiyin
        var attributeObj = {
            "style": "display:inline;"
        }

        var divMsg = $E(document).createElement("div", attributeObj);   //之前document遗漏了$E(),包装后能正常获取自定义属性，兼容代码参见u9.common.js -- weiyin
        divMsg.cusAttr("msg", strMsg);
        divMsg.cusAttr("recordIndex", "0");
        divMsg.cusAttr("TargetID", (targetBind.id ? targetBind.id : GetTopPanel()));
        //divMsg.innerHTML = "<IMG ondblclick=\"if(window.clipboardData.setData('Text',this.title)){alert('信息已经复制到剪贴板');}\" title=\""+strMsg+"\" src=\"../images/RefPnlError.gif\">";
        divMsg.innerHTML = "<IMG src=\"../images/RefPnlWarn.gif\">";
        divMsg.setAttribute("className", "WarnToolTip");

        if (grid) {
            BindErrorControl(divMsg, grid);
        } else {
            BindErrorControl(divMsg, targetBind);
        }

    } else {
        alert(strMsg);
    }
}

function BindErrorControl(subDivObj, targetControlObj, entityID, entityFullName) {
    subDivObj.style.position = "absolute"; //设置right，left不能随便设置值
    subDivObj.style.zIndex = "1000";
    subDivObj.style.display = "block";
    var IsGridAllMsg = subDivObj.cusAttr("IsGridAllMsg");
    //===by zzq 兼容safari 低版本 6.1以上支持onmouseenter，但onmouseenter不冒泡，暂时这样改。
    subDivObj.onmouseenter = function () {//subDivObj.onmouseenter = function () {

        var newOpenUrl = window.location.href;
        var noZh = true;
        if (getCultureName().toLowerCase() == 'zh' || getCultureName().toLowerCase() == 'zh-cn') {
            noZh = false;
        }

        if (newOpenUrl.indexOf("newopen=true") > -1 || noZh || !$(targetControlObj).hasClass("toppanel")) {
            //新窗口打开语种不为中文简体。原来逻辑不变
            ShowErrorMsg_menter(this, entityID, entityFullName);
        } else {
            ShowErrorMsg_menter(this, entityID, entityFullName, 'u9hubShow');
            //window.top.errorMsgShowBox.checkType(this,entityID, entityFullName);
        }

    };
    if (!entityFullName && !IsGridAllMsg) {
        subDivObj.onmouseleave = function () {  //subDivObj.onmouseleave = function () {
            HideErrorMsg_mout(this);
        };
    }
    subDivObj.ondblclick = function () {
        //wangl: 剔除html的换行符,为标准换行符.
        var showMsg = this.cusAttr("msg").replace(/<BR\/>/g, "\r\n");
        //因为谷歌等浏览器的安全级别设置问题，不能直接访问剪切板，去操作剪切板，所以通过设置一个TextAre的隐藏域。
        //在拷贝的时候把textare显示出来，并且赋值，通过select和copy的方式模拟拷贝。拷贝完成之后再隐藏。
        var errorMsgBox = document.createElement("span");
        errorMsgBox.innerHTML = showMsg;
        showMsg = $(errorMsgBox).text();
        if (Clipboard.setData(showMsg)) {
            alert(Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_AlreadyCopyToClipBoard);
        }
        //var textare = $("#forClipboard")
        //if (textare.length > 0) {
        //    textare.val(showMsg);
        //    textare.show();
        //    textare[0].select();
        //    document.execCommand("copy");
        //    textare.hide();
        //    alert(Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_AlreadyCopyToClipBoard);
        //}
        //        if (window.clipboardData.setData('Text', showMsg)) {
        //
        //        }
    };

    if (subDivObj.children[0]) {
        subDivObj.children[0].ondblclick = null;
    };
    if (targetControlObj.tagName == "SPAN") {
        //yangkuna20100830:U9V2100403690
        //if(targetControlObj.parentElement.offsetLeft>0){
        //subDivObj.style.left = targetControlObj.parentElement.offsetLeft-10;
        //}else{
        var rect = targetControlObj.getBoundingClientRect();
        subDivObj.style.left = rect.left - 15 + "px";//===by zzq 添加px单位
        //}
        subDivObj.style.left = -10 + "px";
        if (parseInt(subDivObj.style.left.replace("px", "")) < 0)//===by zzq 转换整形时需要去掉px
            targetControlObj.parentElement.style.position = "relative";
        var normalButtonCss;
        try {
            normalButtonCss = targetControlObj.children[0].rows[0].cells[1].className;
        } catch (e) { }
        if (normalButtonCss && normalButtonCss == "DropDownBtn_Center") {
            targetControlObj.parentElement.appendChild(subDivObj);
            targetControlObj.parentElement.style.position = "relative";
            subDivObj.style.left = "0px";
            subDivObj.style.paddingTop = "5px";
        } else {
            targetControlObj.parentElement.insertBefore(subDivObj, targetControlObj.parentElement.firstChild);
        }
    } else if ($(targetControlObj).hasClass("main_Span")) {
        subDivObj.align = "right";
        //var index = subDivObj.recordIndex;
        //===by zzq 改变获取index的方式
        var index = subDivObj.cusAttr("recordIndex");
        //如果是Grid上的模拟录入，提示特殊处理。

        if ((targetControlObj.control) && (targetControlObj.control.get_SetControlValue())) {
            index = targetControlObj.control.get_SetControlValue().GridControl.rowIndex;
        }

        if (parseInt(index, 10) > -1) {
            subDivObj.style.top = 1 + "px";//===by zzq 增加px防止错位
            subDivObj.style.left = -10 + "px";//===by zzq 增加px防止错位
            var curTcc;
            try {
                curTcc = targetControlObj.children[0].rows[0].cells[0].children[0].children[0].tBodies[0].rows[index].cells[0];
            } catch (e) { }
            if (curTcc) {
                curTcc.style.position = "relative";
                curTcc.insertAdjacentElement("beforeEnd", subDivObj);
            }
        } else if (IsGridAllMsg) {
            subDivObj.style.position = "absolute";
            subDivObj.style.cursor = "hand";
            subDivObj.style.zIndex = "1001";
            subDivObj.style.display = "block";
            subDivObj.style.top = -1 + "px";//===by zzq 增加px防止错位
            subDivObj.style.left = -9 + "px";//===by zzq 增加px防止错位
            targetControlObj.insertAdjacentElement("beforeEnd", subDivObj);
        } else {
            subDivObj.style.display = "none";
            if (!targetControlObj.lastChild.className || targetControlObj.lastChild.className != "ErrorToolTip") {
                var subDivObjCopy = document.createElement("div");
                subDivObjCopy.innerHTML = subDivObj.innerHTML;
                // subDivObjCopy.msg = subDivObj.msg;
                subDivObjCopy.cusAttr('msg', subDivObj.cusAttr('msg'));  //weiyin -- 2016.07.05
                subDivObjCopy.style.position = "absolute";
                subDivObjCopy.style.zIndex = "1001";
                subDivObjCopy.style.display = "block";
                subDivObjCopy.style.top = -1 + "px";//===by zzq 增加px防止错位
                subDivObjCopy.style.left = -9 + "px";//===by zzq 增加px防止错位
                subDivObjCopy.className = "ErrorToolTip";
                subDivObjCopy.style.cursor = "hand";
                targetControlObj.insertAdjacentElement("beforeEnd", subDivObjCopy);
            }

            /*   所有的ErrorMessage都在Grid上打标识
            var subDivObjCopy = document.createElement("div");
            subDivObjCopy.innerHTML = subDivObj.innerHTML;
            subDivObjCopy.style.position = "absolute";
            subDivObjCopy.style.zIndex = "1001";
            subDivObjCopy.style.display = "block";
            subDivObjCopy.style.top = targetControlObj.offsetHeight - 15;
            subDivObjCopy.title = "Line " + (parseInt(index) + 1) + ":" + subDivObj.title;
            subDivObjCopy.onclick = function(){subDivObj.scrollIntoView(false);};
            subDivObjCopy.className = "ErrorToolTip";
            if(targetControlObj.lastChild.className == "ErrorToolTip"){
            subDivObjCopy.style.left = (parseInt(targetControlObj.lastChild.errIndex) + 1) * 15;
            subDivObjCopy.errIndex = parseInt(targetControlObj.lastChild.errIndex) + 1;
            }else{
            subDivObjCopy.style.left = 0;
            subDivObjCopy.errIndex = 0;
            }
            targetControlObj.insertAdjacentElement("beforeEnd",subDivObjCopy);
            */
        }

    } else if (targetControlObj.className.containsCssClass("TP")) {
        //mahx20160701 新版本TabPage的布局已经变了，所以这个地方需要跟着调整，而且简化了代码；
        var ids = targetControlObj.id;
        var idDiv = ids + "_Head";
        subDivObj.align = "left";
        subDivObj.style.top = "0px";//===by zzq 增加px防止错位
        $("#" + idDiv).append(subDivObj);
    } else {
        subDivObj.align = "right";
        if (targetControlObj.className.containsCssClass("toppanel")) {
            subDivObj.style.top = "22px";
            subDivObj.style.left = "0px";
            if (targetControlObj.parentElement && targetControlObj.parentElement.parentElement && targetControlObj.parentElement.parentElement.parentElement && targetControlObj.parentElement.parentElement.parentElement.tagName == "TD") {
                targetControlObj.parentElement.parentElement.parentElement.style.position = "relative"; //TD
            } else {
                targetControlObj.parentElement.style.position = "relative";
            }
        }
        if (targetControlObj.type == "button") {
            targetControlObj.parentElement.appendChild(subDivObj);
            targetControlObj.parentElement.style.position = "relative";
            subDivObj.style.left = "0px";
            subDivObj.style.paddingTop = "10px";
        } else if (targetControlObj.className == "DDB") {
            targetControlObj.parentElement.insertBefore(subDivObj, targetControlObj.parentElement.firstChild);
            subDivObj.style.paddingTop = "5px";
            subDivObj.style.left = "-10px";
        } else {
            targetControlObj.parentElement.insertBefore(subDivObj, targetControlObj.parentElement.firstChild);
        }
    }

    //添加强类型提示 -- weiyina -- 跨浏览器兼容 -- 20170322
    if (subDivObj.cusAttr('StrongErrorMessage')) {
        var showMsg = subDivObj.cusAttr('StrongErrorMessage').replace(/<BR\/>/g, "\r\n");
        window.setTimeout(function () {
            alert(showMsg);
        }, 0)
    }


} //end bindErrorControl

function CreateErrorMsgElment(targetID, errorMsg) {
    // var divElement = document.createElement("<div TargetID='" + targetID + "'></div>");
    var divElement = $E(document).createElement("div");   //2016.06.02跨浏览器兼容 -- weiyin
    divElement.cusAttr("TargetID", targetID);
    // var imageElement = document.createElement("<img src='../images/RefPnlError.gif' msg='" + errorMsg + "' />");
    var imageElement = $E(document).createElement("img", { "src": "../images/RefPnlError.gif" });
    imageElement.cusAttr("msg", errorMsg);
    divElement.appendChild(imageElement);
    var targetControlObj = $ID(targetID);
    if (targetControlObj) {
        BindErrorControl(divElement, targetControlObj);
    }
}

function RemoveErrorMsgElment(targetID, targetControlObj) {
    var divs = targetControlObj.parentElement.getElementsByTagName("div");
    for (var i = divs.length - 1; i >= 0; i--) {
        var divElement = divs[i];
        if (divElement.cusAttr('TargetID') && divElement.cusAttr('TargetID') == targetID) {//===by zzq 删除异常控件提示
            //wanglei: 旧代码会出错,无法 移除标志..
            //targetControlObj.parentElement.removeChild(divElement);
            if (divElement.parentElement) {
                divElement.parentElement.removeChild(divElement);
            }

        }
    }
}

function $ID(ctrlID) {
    return window.document.getElementById(ctrlID);
}

//按照黄总意思，个性化关联设计出来的关联联动是模拟用户录入联动，所以以下js已经被个性化关联控件使用，请谨慎修改，否则将影响个性化关联逻辑。
$SetControlValue = function (id, isRef, value, key, text, sender, type, grdItem) {
    if (sender == "Run4P") //gct20090625:页面加载完毕后，个性化代码中赋值不跑，只跑赋状态的JS代码
        return;
    try {
        if (sender && sender.fromPersonal) {
            window.top.diagnosticVue && window.top.diagnosticVue.pushLogItem({
                "type": "Personalize",
                "time": new Date().format("yyyy-MM-dd HH:mm:ss"),
                "message": "个性化导致的赋值，控件ID：" + id + "；value：" + value + "；key：" + key + "；text：" + text,
                "threadId": 999
            })
        }
    } catch (e) { console.log(e) }
    //统一处理错误提示是默认值还是关联设计
    var msgType = type;
    //added by u9lkc 20100326
    //增加错误类型
    //0:默认值   1:关联设计  2:批量修改
    if (msgType != 0 && msgType != 2) {
        msgType = 1; //约定：如果不是默认值触发，则都认为是关联设计触发的。
    }
    //    if(_ClientPostBackManager.get_DoPostBackcompleted() == false)
    //    {
    //        return;//直接返回不用执行后面的逻辑了，等这次PostBackComplete再执行
    //    }
    //    else if(_ClientPostBackManager.get_DoPostBackcompleted() == true)//程序员定以的是__doPostBack这种方式，所以__doPostBack之后应该再跑个性化关联JS
    //    {
    //        _ClientPostBackManager.set_DoPostBackcompleted(null);//设置成默认初始值null
    //    }

    if ($find(id)) {
        if ($find(id).get_Enabled() == false || $find(id).get_ReadOnly() == true)
            return;

        //模拟录入失败的错误提示标志位。
        //--begin--
        var dftObj = new Object();
        dftObj.IsSetControlValue = true;
        dftObj.ValueSource = msgType;
        dftObj.GridControl = grdItem
        if (grdItem) {
            $find(id).set_SetControlValue(dftObj);
            $find(grdItem.id).set_SetControlValue(dftObj);
        } else {
            $find(id).set_SetControlValue(dftObj);
        }
        //--end--

        if (isRef) {
            if (key == "-1") {
                if ($find(id).get_Key() != "-1") {
                    $find(id)._textbox.value = "";
                    $find(id).onInputReturn();
                }
            } else {
                if ($find(id).get_Key() != key) //gct20091210：如果模拟录入的是不同的值，才继续执行下面的逻辑
                {
                    //临时屏蔽参照窗口弹出
                    var oldUF$UI$Reference$DisableShowForm = UF.UI.Reference.DisableShowForm;
                    UF.UI.Reference.DisableShowForm = true;
                    var refCtrl = $find(id);
                    refCtrl._oldKey = refCtrl.get_Key();
                    refCtrl._oldValue = refCtrl.get_Value();
                    refCtrl._oldText = refCtrl.get_Text();
                    var v = refCtrl._isNeedValidate;
                    var r = refCtrl.get_IsRaiseEvent();
                    refCtrl._isNeedValidate = false;
                    refCtrl.set_IsRaiseEvent(false);
                    refCtrl.set_Key(key);
                    refCtrl.set_Value(value);
                    refCtrl.set_Text(text);
                    refCtrl.set_IsRaiseEvent(r);
                    refCtrl._isNeedValidate = v;
                    refCtrl._key4Simulator = key.toString();
                    refCtrl.ForceFireContentChange();
                    UF.UI.Reference.DisableShowForm = oldUF$UI$Reference$DisableShowForm;
                    //取消临时屏蔽参照窗口弹出
                }
            }
        } else {
            if ($find(id).get_Type() == ControlType.CheckBox) {
                if ($find(id).get_Value() != value) //gct20091210：如果模拟录入的是不同的值，才继续执行下面的逻辑
                {
                    $find(id).set_Value(value);
                    $find(id).changePD();
                    if ($find(id)._checkbox.onclick) {
                        $find(id)._checkbox.onclick();
                    }
                }
            } else if ($find(id).get_Type() == ControlType.DateTime) {
                if ($find(id).get_Value() != value) //gct20091210：如果模拟录入的是不同的值，才继续执行下面的逻辑
                {
                    $find(id)._textbox.value = value;
                    $find(id).inputChange();
                }
            } else if ($find(id).get_Type() == ControlType.DropDownList) {
                if (value != null) {
                    //added by u9lkc 在js里面 0=="" 是true 所以要转换成string再比较
                    if ($find(id).get_Value().toString() != value.toString()) //gct20091210：如果模拟录入的是不同的值，才继续执行下面的逻辑
                    {
                        $find(id).set_Value(value);
                        $find(id).ControlBlur();
                        $find(id).raiseonchange(Sys.EventArgs.Empty);
                        $find(id).raiseOnValueChanged(Sys.EventArgs.Empty);
                    }
                } else if (text != null) {
                    if ($find(id).get_Text() != text) //gct20091210：如果模拟录入的是不同的值，才继续执行下面的逻辑
                    {
                        $find(id).set_Text(text);
                        $find(id).ControlBlur();
                        $find(id).raiseonchange(Sys.EventArgs.Empty);
                        $find(id).raiseOnValueChanged(Sys.EventArgs.Empty);
                    }
                }
            } else if ($find(id).get_Type() == ControlType.Numberic) {
                if ($find(id).get_Value() != value) //gct20091210：如果模拟录入的是不同的值，才继续执行下面的逻辑
                {
                    if (text != undefined && text != "" && text != value) {
                        //mahx 230911 U9ZNZZ-71405 数字控件，textbox的value是输入值，更倾向于是格式化后的值，直接赋value会忽略掉格式化数据，导致格式化错误,value和text不一样就代表text是一个格式化的值
                        //如果要给控件赋格式化的值，必须给text设置值
                        $find(id)._textbox.value = text;
                    } else {
                        // $find(id)._textbox.value = value;
                        //否则对输入的内容进行格式化，格式成当前数字格式
                        var newValStr = Number.toLocaleString(value, $find(id).get_Culture(), $find(id).get_control_type());
                        $find(id)._textbox.value = newValStr;
                    }

                    //注释掉下面一句话，因为$find(id)._textbox.fireEvent("onchange");已经可以触发changePD了，如果这里也调用changePD会引发change事件的重复触发V2SP100334168，结果就会出错。
                    //$find(id).changePD();

                    $find(id)._textbox.fireEvent("onchange");
                    $find(id)._textbox.fireEvent("onblur");
                    //===by zzq 解决fireEvent在webkit中不兼容
                    //                    if (document.all) {
                    //                        $find(id)._textbox.fireEvent("onchange");
                    //                        $find(id)._textbox.fireEvent("onblur");
                    //                    }
                    //                    else {
                    //                        var evt = document.createEvent('HTMLEvents');
                    //                        evt.initEvent('change', true, true);
                    //                        $find(id)._textbox.dispatchEvent(evt);
                    //                        evt.initEvent('blur', true, true);
                    //                        $find(id)._textbox.dispatchEvent(evt);
                    //                    }
                }
            } else if ($find(id).get_Type() == ControlType.FlexField) {
                if ($find(id).get_Value() != value) //gct20091210：如果模拟录入的是不同的值，才继续执行下面的逻辑
                {
                    $find(id)._textbox.value = value;
                    $find(id)._textbox.fireEvent("onchange");
                    //===by zzq 解决fireEvent在webkit中不兼容
                    //if (document.all) {
                    //$find(id)._textbox.fireEvent("onchange");
                    // }
                    //else {
                    //var evt = document.createEvent('HTMLEvents');
                    //evt.initEvent('change', true, true);
                    //$find(id)._textbox.dispatchEvent(evt);
                    // }
                }
            } else if ($find(id).get_Type() == ControlType.TextBox) {
                if ($find(id).get_Value() != value) //gct20091210：如果模拟录入的是不同的值，才继续执行下面的逻辑
                {
                    $find(id).set_Value(value);
                    $find(id)._textbox.fireEvent("onchange");
                    $find(id)._textbox.fireEvent("onblur");
                    //===by zzq 解决fireEvent在webkit中不兼容
                    //                    if (document.all) {
                    //                        $find(id)._textbox.fireEvent("onchange");
                    //                        $find(id)._textbox.fireEvent("onblur");
                    //                    }
                    //                    else {
                    //                        var evt = document.createEvent('HTMLEvents');
                    //                        evt.initEvent('change', true, true);
                    //                        $find(id)._textbox.dispatchEvent(evt);
                    //                        evt.initEvent('blur', true, true);
                    //                        $find(id)._textbox.dispatchEvent(evt);
                    //                    }
                }
            } else {
                if ($find(id).get_Value() != value) //gct20091210：如果模拟录入的是不同的值，才继续执行下面的逻辑
                {
                    $find(id).set_Value(value);
                    $find(id)._textbox.fireEvent("onchange");
                    //===by zzq 解决fireEvent在webkit中不兼容
                    //if (document.all) {
                    //$find(id)._textbox.fireEvent("onchange");
                    //}
                    //else {
                    //var evt = document.createEvent('HTMLEvents');
                    //evt.initEvent('change', true, true);
                    // $find(id)._textbox.dispatchEvent(evt);
                    //}
                }
            }

            var _setSuccessed = true;
            //检查非参照控件的模拟录入是否成功
            if ($find(id).get_Value().toString().toLowerCase() != value.toString().toLowerCase()) {
                if ($find(id).get_Type() == ControlType.DateTime) {
                    var dt1 = $find(id)._date.format("yyyy-MM-dd hh:mm:ss");
                    var dt2 = (new Date()).ufString2DateTime(value).format("yyyy-MM-dd hh:mm:ss");
                    if (dt1.toString() != dt2.toString()) {
                        if ($find(id).get_FormatString() == "d") {
                            //只比较日期部分
                            if ($find(id)._date.getDate() == (new Date()).ufString2DateTime(value).getDate()) {
                                _setSuccessed = true;
                            } else {
                                _setSuccessed = false;
                            }
                        } else {
                            _setSuccessed = false;
                        }
                    }
                } else if ($find(id).get_Type() == ControlType.Numberic) {
                    //都是数字，比较数字，相等成功，不等不成功
                    //都不是数字，认为成功
                    //其他（一个数字，一个非数字），不成功

                    //因为 isNaN("") == false  所以需要加一个判断,先排除为“”情况
                    if ($find(id).get_Value() == "") {
                        if (!isNaN(value))
                            _setSuccessed = false;
                    } else if (value == "") {
                        if (!isNaN($find(id).get_Value()))
                            _setSuccessed = false;
                    } else if (!isNaN($find(id).get_Value()) && !isNaN(value)) //都是数字
                    {
                        //如果数字差值大于1
                        if (Math.abs(parseFloat($find(id).get_Value()) - parseFloat(value)) > 1.0) {
                            _setSuccessed = false;
                        }
                    } else if (isNaN($find(id).get_Value()) && isNaN(value)) { //都不是数字，认为赋值成功
                        _setSuccessed = true;
                    } else { //一个数字，一个非数字
                        _setSuccessed = false;
                    }
                }
            }

            if (_setSuccessed) {
                $find(id).RemoveSetControlValueErrorMsg();
            } else {
                $find(id).ShowSetControlValueErrorMsg();
            }
        }
    } else {
        if (isRef) {
            _ClientJSExecQueueManager.Push("window.setTimeout(\"$SetControlValue('" + id + "',true,'" + value + "','" + key + "','" + text + "');\",100);");
        } else {
            _ClientJSExecQueueManager.Push("window.setTimeout(\"$SetControlValue('" + id + "',false,'" + value + "');\",100);");
        }
    }
}

//处理AJAX方式二次加载的数据
$SetSndLoadControlValue = function (data) {
    if ((data == undefined) || ((data == null))) return;

    for (var i = 0, j = data.length; i < j; i++) {
        var SndControlData = data[i];
        var id = SndControlData.ValueFieldID;
        var isRef = SndControlData.IsRef;
        var isFromCard = SndControlData.IsFromCard;
        var value = SndControlData.CodeField;
        var keyValue = SndControlData.ValueField; //非参照使用这个传递值
        var text = SndControlData.NameField;

        if (isFromCard) {
            if ($find(id)) {
                if (isRef) {
                    if (keyValue == "-1") {
                        if ($find(id).get_Key() != "-1") {
                            $find(id)._textbox.value = "";
                        }
                    } else {
                        if ($find(id).get_Key() != keyValue) {
                            $find(id).set_Key(keyValue);
                            $find(id).set_Value(value);
                            $find(id).set_Text(text);
                        }
                    }
                } else {
                    if ($find(id).get_Value() != keyValue) {
                        $find(id).set_Value(keyValue);
                    }
                }
            }
        } else {
            var grid = $find(data.gridID);
            if (grid) {
                if (isRef) {
                    grid.SetReferenceCellValue(data.rowIndex, grid.GetColumnIndex(id), keyValue, value, text)
                } else {
                    grid.SetCellValue(data.rowIndex, grid.GetColumnIndex(id), keyValue)
                }
            }
        }
    }
}

function UFEscape(value) {
    var result = escape(value);
    var reg = /\x2B/g;
    return result.replace(reg, "%2B");
} //end UFEscape

//Modified By Yin Mingjun 2012/04/10
//  ----moved to UI.Common.js

//function AssoCHandlerType(){}
//AssoCHandlerType.JSHandler             = 0;
//AssoCHandlerType.CallBackHandler       = 1;
//AssoCHandlerType.PersonalCustomHandler = 2;

//function tryAttachCtrlEvent(ctrlID,eventName,handler,handlerType)//gct20090604增加handlerType
//{

//    /*if(_Flag==null){
//      _Flag = $get("RefreshThis");
//    }*/
//     var ctrl = $find(ctrlID);
//    if(ctrl)
//    {
//        var canAddHandler = true;
//        var eventsList = ctrl.get_events()._list[eventName];
//        if(eventsList != null)
//        {
//            var len = eventsList.length;
//            if(len > 0)
//            {
//                for(var i = len-1; i>-1; i--)
//                {
//                    if(eventsList[i] == handler)
//                    {
//                        canAddHandler = false;//gct20081111:设置不再AddHandler标识，防止重复添加相同的事件
//                        break;
//                    }
//                }
//            }
//        }
//
//        if(canAddHandler)
//        {
//            //gct20090605按照黄总意思，个性化自定义关联逻辑在业务固有逻辑之后执行，所以在进事件队列的时候应该放在固有逻辑的后便执行
//            //放在后面的意思是固有逻辑有JS、CallBack、PostBack，应该在这些后面再执行个性化自定义关联逻辑
//            //现在认为这样addHandler个性化关联handler是正确的。如果发现个性化逻辑不是在最后，需要修改如下一句。可参照CC以前的写法。
//            ctrl.get_events().addHandler(eventName, handler);
//        }
//    }
//    else
//    {
//        ctrl = $get(ctrlID);
//        if(ctrl)
//        {
//            if(ctrl.control)
//            {
//              ctrl.control.get_events().addHandler(eventName, handler);
//          }
//          else
//          {
//              ctrl.attachEvent(eventName,handler);
//          }
//        }
//    }
//
//    /*
//    var ctrl = $ID(ctrlID);
//    if(ctrl)
//    {
//      if(ctrl.control)
//      {
//          ctrl.control.get_events().addHandler(eventName, handler);
//      }
//      else
//      {
//          ctrl.attachEvent(eventName,handler);
//      }
//    }
//    */
//}
//function tryExecuteHandler(ctrlID,handler)
//{
//      handler();
//}
function MaskChar() { };
MaskChar.Default = "'"; //DefaultMaskChars

//Modified By Yin Mingjun 2012/04/10
//  ----moved to UI.Common.js

////mask input char
//function isMask(ch, maskChars)
//{
//    if(!maskChars || maskChars=="")//可以提到更早的访问周期
//    {
//        maskChars = MaskChar.Default;
//    }
//    ch=String.fromCharCode(ch);
//    if(maskChars.indexOf(ch)>-1) return true;
//    return false;
//} //end isMask

//function isMasks(value, maskChars) {
//    if (value == "" || value == null) return false;
//    if(!maskChars || maskChars=="")//可以提到更早的访问周期
//    {
//      maskChars = MaskChar.Default;
//    }
//    for(var i=0;i<value.length;i++)
//    {
//        if(maskChars.indexOf(value.charAt(i))>-1)
//        {
//            return true;
//        }
//    }
//    return false;
//} //end isMasks

////BY fanfree at 20070528 添加对全角和中文输入法的控制
//function filtrateMaskChar(textValue,maskChars)
//{
//  if(!maskChars) return textValue;
//    var wideCodeMaskChars=new Array();
//    for(var i=0;i<maskChars.length;i++)
//    {
//        if(maskChars.substr(i,1)!=" ")
//        {
//            wideCodeMaskChars.push(maskChars.charCodeAt(i));
//        }
//    }
//    var outputText=new Array();
//    for(var i=0;i<textValue.length;i++)
//    {
//        if((!isWideMaskCode(textValue.substr(i,1),wideCodeMaskChars))&&(!isMasks(textValue.substr(i,1),maskChars)))
//        {
//            outputText.push(textValue.substr(i,1));
//        }
//    }
//    var resultStr="";
//    for(var i=0;i<outputText.length;i++)
//    {
//        resultStr +=outputText[i];
//    }
//    return resultStr;
//}

//function isWideMaskCode(inputChar,wideCodeMaskChars)
//{
//    //65248=FFE0,全角和半角的差值
//    for(var i=0;i<wideCodeMaskChars.length;i++)
//    {
//        if((inputChar.charCodeAt(0)-65248)==wideCodeMaskChars[i])
//        {
//            return true;
//            break;
//        }
//    }
//    return false;
//}


function G_SplitLongString(valueStr, length) {
    var result = valueStr;
    var len = 255;
    if (length) {
        if (length == -1)
            len = 2147483647;
        else
            len = length;
    }
    if (valueStr.length > len) {
        result = valueStr.substring(0, len);
    }
    return result;
} //end SplitLongString

function G_Trim(value) {
    return value.replace(/^\s+|\s+$/g, '');
} //end G_trim

function G_TrimEnd(value) {
    return value.replace(/\s+$/, '');
} //end G_TrimEnd

function G_TrimStart(value) {
    return value.replace(/^\s+/, '');
}
//用于单树参照，双击节点触发确定按钮的点击事件,
//方法在开发人员的代码中有引用，所以名称不可改
function TreeReference_TreeDblClick(args) {
    //var ID = args.TreeView.ID;
    //var clientID = args.TreeView.ClientID;
    //var pre = clientID.replace(ID, "");
    //var btnConfirmID = pre + "ConfirmButton";
    //window.eval("btnOk = $ID('" + btnConfirmID + "');if(btnOk){btnOk.children[0].rows[0].cells[1].children[0].click();}");
    //return false;
    //===by kxl 修改 弹性域的关窗返回值问题
    var ID = args.TreeView.ID;
    var clientID = args.TreeView.ClientID;
    var pre = clientID.replace(ID, "");
    var btnConfirmID = pre + "ConfirmButton";
    //window.eval("btnOk = $ID('" + btnConfirmID + "');if(btnOk){btnOk.children[0].rows[0].cells[1].children[0].click();}");
    window.eval("btnOk = $ID('" + btnConfirmID + "');if(btnOk){btnOk.children[0].click();}");
    return false;
}

function ClearErrorMsgDiv() {
    var msgDiv = document.getElementById("ErrorMessageDiv");
    if (msgDiv)
        msgDiv.style.visibility = "hidden";

    var divs = document.getElementsByTagName("DIV");
    for (var i = 0; i < divs.length; i++) {
        if (divs[i].className == "ErrorToolTip") {
            divs[i].style.display = "none";
        }
    }
}

/***************************************** Personalization JScript Source Code *****************************************/

//var CONTROL_PROXY_DATA_ID = controlProxy;//客户端控件代理的ID
//var CONTROL_PROXY_XML_DOM = controlProxyXmlDom;//客户端xmlDom的全局变量
//var CONTROL_PROXY_XML_DOM_ROOT = controlProxyXmlDom_Root;//客户端xmlDom根节点的全局变量
var ATTRIBUTE_ID = "ID"; //供所有节点使用
var ATTRIBUTE_KEYATTRIBUTE = "KeyAttribute"; //供所有节点使用
var ATTRIBUTE_TYPE = "Type"; //供所有节点使用

var ATTRIBUTE_VALUE = "Value"; //供大多数控件使用

var ATTRIBUTE_KEY = "Key"; //供参照使用
var ATTRIBUTE_CODE = "Code"; //供参照使用
var ATTRIBUTE_NAME = "Name"; //供参照使用

var ATTRIBUTE_SELECTEDINDEX = "SelectedIndex"; //供DropDownList使用
var ATTRIBUTE_SELECTEDVALUE = "SelectedValue"; //供DropDownList使用

//目前仅有两种节点
function ControlProxyNodeName() { }
ControlProxyNodeName.Data = "Data"; //根节点
ControlProxyNodeName.Control = "Control";

function ControlProxyAttribute() { }
ControlProxyAttribute.ID = "ID";
ControlProxyAttribute.Value = "Value";
ControlProxyAttribute.Code = "Code";
ControlProxyAttribute.Name = "Name";
ControlProxyAttribute.Type = "Type";

//关联控件中调用的方法
function ClientInstanceSetUFReferenceProxyValue(refID, refType, refKey, refCode, refName) {
    var curControl = new Object();
    curControl.ClientID = refID;
    curControl.Type = refType; //在关联控件中已知控件类型为"UFReference"
    curControl.Key = refKey;
    curControl.Code = refCode;
    curControl.Name = refName;

    SetControlProxyValue(curControl);

    curControl.ClientID = null;
    curControl.Type = null;
    curControl.Key = null;
    curControl.Code = null;
    curControl.Name = null;
    curControl = null;
}
//可以表示成set_Value()的共用方法，包含Numberic,TextBox,GobalInput,DatePicker,CheckBox,FlexField,
function ClientInstanceSetUFControlProxyValue(controlID, controlType, controlValue) {
    var curControl = new Object();
    curControl.ClientID = controlID;
    curControl.Type = controlType; //在关联控件中已知控件类型
    curControl.Value = controlValue;

    SetControlProxyValue(curControl);

    curControl.ClientID = null;
    curControl.Type = null;
    curControl.Value = null;
    curControl = null;
}

function ClientInstanceSetUFDropDownListProxyValue(controlID, controlType, keyAttributeName, controlValue) {
    var curControl = new Object();
    curControl.ClientID = controlID;
    curControl.Type = controlType; //在关联控件中已知控件类型
    curControl.KeyAttributeName = keyAttributeName;
    curControl.Value = controlValue;

    SetControlProxyValue(curControl);

    curControl.ClientID = null;
    curControl.Type = null;
    curControl.KeyAttributeName = null;
    curControl.Value = null;
    curControl = null;
}

//Tpl中调用的方法
function SetUFControlPropertyNameValue(clientID, propertyName, propertyValue, controlType) {
    return; //gct20091021:取消，不然影响现在的跨页签参照返回U9V2000327416
    var curControl = new Object();
    curControl.ClientID = clientID;
    curControl.Type = controlType; //1:Tpl中无法确定是何种类型，服务器端再获取类型  2:Association可以知道何种类型，此时是控件State个性化
    curControl.PropertyName = propertyName;
    curControl.PropertyValue = propertyValue;

    SetControlProxyValue(curControl);

    curControl.ClientID = null;
    curControl.Type = null;
    curControl.PropertyName = null;
    curControl.PropertyValue = null;
    curControl = null;
}

function SetControlProxyValue(curControl) {
    if (!document.getElementById("controlProxy"))
        return;
    var controlProxyValue = document.getElementById("controlProxy").value;
    if (!controlProxyXmlDom) //没有Dom对象，则创建Dom，并创建根节点
    {
        controlProxyXmlDom = Basic.GetXmlDom();
        controlProxyXmlDom.setProperty('SelectionLanguage', 'XPath');
    }
    controlProxyXmlDom.loadXML(controlProxyValue); //LoadXML
    controlProxyXmlDom_Root = controlProxyXmlDom.selectSingleNode("//Data"); //获取根节点
    if (controlProxyXmlDom.childNodes.length == 0) //说明没有根节点
    {
        //创建根节点
        controlProxyXmlDom_Root = controlProxyXmlDom.createElement("Data");
        controlProxyXmlDom.appendChild(controlProxyXmlDom_Root);
    }
    var node = controlProxyXmlDom.selectSingleNode("//Data/Control[@ID='" + curControl.ClientID + "']");

    switch (curControl.Type) {
        case "UFReference":
            SetReferenceProxyValue(node, curControl);
            break;
        case "UFTextBox":
            SetTextBoxProxyValue(node, curControl);
            break;
        case "UFNumberic":
            SetNumbericProxyValue(node, curControl);
            break;
        case "UFDateTimePicker":
            SetDateTimePickerProxyValue(node, curControl);
            break;
        case "UFDropDownList":
            SetDropDownListProxyValue(node, curControl);
            break;
        case "UFFlexField":
            SetFlexFieldProxyValue(node, curControl);
            break;
        case "UFGlobalInput":
            SetGlobalInputProxyValue(node, curControl);
            break;
        default:
            SetDefaultControlProxyValue(node, curControl); //Tpl调用的时候会走该分支
            break;
    }
    //controlProxyXmlDom.xml mahx20170410
    document.getElementById("controlProxy").value = XMLHelper.serializeXMLNodeToString(controlProxyXmlDom);
}

function SetReferenceProxyValue(node, refControl) {
    if (!node) //没有该控件的代理节点，就创建该节点
    {
        node = controlProxyXmlDom.createElement("Control");

        node.setAttribute("ID", refControl.ClientID); //设置ID属性
        node.setAttribute('Type', refControl.Type); //设置参照Type属性
        if (refControl.PropertyName) {
            node.setAttribute(refControl.PropertyName, refControl.PropertyValue); //设置Property
        } else {
            node.setAttribute('Key', refControl.Key); //设置参照的Key属性
            node.setAttribute('Value', refControl.Code); //设置参照的Code属性
            node.setAttribute('Text', refControl.Name); //设置参照的Name属性
        }
        controlProxyXmlDom_Root.appendChild(node); //添加该节点

    } else {
        if (refControl.PropertyName) {
            node.setAttribute(refControl.PropertyName, refControl.PropertyValue); //设置Property
        } else {
            node.setAttribute("Key", refControl.Key); //设置参照的Key属性
            node.setAttribute("Value", refControl.Code); //设置参照的Code属性
            node.setAttribute("Text", refControl.Name); //设置参照的Name属性
        }
    }
}

function SetTextBoxProxyValue(node, curControl) {
    if (!node) //没有该控件的代理节点，就创建该节点
    {
        node = controlProxyXmlDom.createElement("Control");

        node.setAttribute("ID", curControl.ClientID); //设置ID属性
        node.setAttribute("Type", curControl.Type); //设置Type属性
        node.setAttribute("Value", curControl.Value); //设置Value

        controlProxyXmlDom_Root.appendChild(node); //添加该节点
    } else {
        node.setAttribute("Value", curControl.Value); //设置Value
    }
}

function SetNumbericProxyValue(node, curControl) {
    if (!node) //没有该控件的代理节点，就创建该节点
    {
        node = controlProxyXmlDom.createElement("Control");

        node.setAttribute("ID", curControl.ClientID); //设置ID属性
        node.setAttribute("Type", curControl.Type); //设置Type属性

        if (curControl.PropertyName)
            node.setAttribute(curControl.PropertyName, curControl.PropertyValue); //设置Property
        else
            node.setAttribute("Value", curControl.Value); //设置Value

        controlProxyXmlDom_Root.appendChild(node); //添加该节点
    } else {
        if (curControl.PropertyName)
            node.setAttribute(curControl.PropertyName, curControl.PropertyValue); //设置Property
        else
            node.setAttribute("Value", curControl.Value); //设置Value
    }
}

function SetDateTimePickerProxyValue(node, curControl) {
    if (!node) //没有该控件的代理节点，就创建该节点
    {
        node = controlProxyXmlDom.createElement("Control");

        node.setAttribute("ID", curControl.ClientID); //设置ID属性
        node.setAttribute("Type", curControl.Type); //设置Type属性
        node.setAttribute("Value", curControl.Value); //设置Value

        controlProxyXmlDom_Root.appendChild(node); //添加该节点
    } else {
        node.setAttribute("Value", curControl.Value); //设置Value
    }
}

function SetDropDownListProxyValue(node, curControl) {
    if (!node) //没有该控件的代理节点，就创建该节点
    {
        node = controlProxyXmlDom.createElement("Control");

        node.setAttribute("ID", curControl.ClientID); //设置ID属性
        node.setAttribute("Type", curControl.Type); //设置Type属性
        node.setAttribute("KeyAttributeName", curControl.KeyAttributeName); //设置keyAttributeName
        node.setAttribute("Value", curControl.Value); //设置Value

        controlProxyXmlDom_Root.appendChild(node); //添加该节点
    } else {
        node.setAttribute("KeyAttributeName", textboxControl.KeyAttributeName); //设置keyAttributeName
        node.setAttribute("Value", textboxControl.Value); //设置Value
    }
}

function SetFlexFieldProxyValue(node, curControl) {
    if (!node) //没有该控件的代理节点，就创建该节点
    {
        node = controlProxyXmlDom.createElement("Control");

        node.setAttribute("ID", curControl.ClientID); //设置ID属性
        node.setAttribute("Type", curControl.Type); //设置Type属性
        node.setAttribute("Value", curControl.Value); //设置Value

        controlProxyXmlDom_Root.appendChild(node); //添加该节点
    } else {
        node.setAttribute("Value", curControl.Value); //设置Value
    }
}

function SetGlobalInputProxyValue(node, curControl) {
    if (!node) //没有该控件的代理节点，就创建该节点
    {
        node = controlProxyXmlDom.createElement("Control");

        node.setAttribute("ID", curControl.ClientID); //设置ID属性
        node.setAttribute("Type", curControl.Type); //设置Type属性
        node.setAttribute("Value", curControl.Value); //设置Value

        controlProxyXmlDom_Root.appendChild(node); //添加该节点
    } else {
        node.setAttribute("Value", curControl.Value); //设置Value
    }
}

function SetDefaultControlProxyValue(node, curControl) {
    if (!node) //没有该控件的代理节点，就创建该节点
    {
        node = controlProxyXmlDom.createElement("Control");

        node.setAttribute("ID", curControl.ClientID); //设置ID属性

        if (curControl.Type)
            node.setAttribute("Type", curControl.Type); //设置Type属性

        if (curControl.PropertyName)
            node.setAttribute(curControl.PropertyName, curControl.PropertyValue); //设置Property
        else
            node.setAttribute("Value", curControl.Value); //设置Value

        controlProxyXmlDom_Root.appendChild(node); //添加该节点
    } else {
        if (curControl.PropertyName)
            node.setAttribute(curControl.PropertyName, curControl.PropertyValue); //设置Property
        else
            node.setAttribute("Value", curControl.Value); //设置Value
    }
}

function ClearControlProxyValue() {
    var conP = document.getElementById("controlProxy");
    if (!conP) return;
    if (conP.value == null) return;
    if (conP.value != "") conP.value = "";
}
/************************************ End Personalization JScript Source Code ************************************/
/************************************ Begin Check Dirty Data JScript Source Code *********************************/

var Global_IsCheckDirtyData_TheForm = true; //当前页面离开时是否检查脏数据的总开关，默认为true，通过Set、Get方法来操作
var Global_IsDirtyData_TheForm = false; //通过Set、Get方法来操作
var Global_CheckDirtyDataIDs = "BtnCancel,BtnAdd,BtnCopy,BtnFirstPage,BtnPrevPage,BtnNextPage,BtnLastPage,BtnPrint,BtnFind";
var Global_DirtyDataSaveSuccessFlag = null; //三种状态：null、"Success"、"UnSuccess"，通过Set、Get方法来操作
var Global_DirtyDataCancelSuccessFlag = null; //三种状态：null、"Success"、"UnSuccess"，通过Set、Get方法来操作
var Global_BtnSaveID = null;
var Global_IsPageLoadComplete = false; //masterpage中最后时机设置为true
var Global_NeedResetCheckDirtyTagWhenEnd = false;

function Set_Global_NeedResetCheckDirtyTagWhenEnd(value) {
    Global_NeedResetCheckDirtyTagWhenEnd = (value ? true : false);
}

function Get_Global_NeedResetCheckDirtyTagWhenEnd(value) {
    return Global_NeedResetCheckDirtyTagWhenEnd;
}

function Global_DirtyData_EventType() { };
Global_DirtyData_EventType.Empty = -1;
Global_DirtyData_EventType.Toolbar = 0;
Global_DirtyData_EventType.DropDownButtonMenu = 1;
Global_DirtyData_EventType.NavigatorMenu = 2;

function Get_Global_IsPageLoadComplete() {
    return Global_IsPageLoadComplete;
}

function Set_Global_IsPageLoadComplete(val) {
    if (val != null && val.toString().toLowerCase() == "true") {
        Global_IsPageLoadComplete = true;
    } else {
        Global_IsPageLoadComplete = false;
    }
}

function Get_Global_IsCheckDirtyData_TheForm() {
    return Global_IsCheckDirtyData_TheForm;
}

function Set_Global_IsCheckDirtyData_TheForm(val) {
    if (val == true || (val != null && val.toString().toLowerCase() == "true")) {
        Global_IsCheckDirtyData_TheForm = true;
    } else {
        Global_IsCheckDirtyData_TheForm = false;
    }
}

//获取当前页面数据是否为脏数据
function Get_Global_IsDirtyData_TheForm() {
    var isCheck = Get_Global_IsCheckDirtyData_TheForm();
    if (isCheck == true) //默认需要检查脏数据
    {
        return Global_IsDirtyData_TheForm;
    } else //如果是不检查脏数据的情况，认为当前页面没有脏数据，也就不会出现保存提示
    {
        return false;
    }
}

//设置当前页面数据是否为脏数据
function Set_Global_IsDirtyData_TheForm(val) {
    if (val == true || (val != null && val.toString().toLowerCase() == "true")) {
        Global_IsDirtyData_TheForm = true;
    } else {
        Global_IsDirtyData_TheForm = false;
    }
}

function Get_Global_DirtyDataSaveSuccessFlag() {
    return Global_DirtyDataSaveSuccessFlag;
}

function Set_Global_DirtyDataSaveSuccessFlag(val) {
    if (val == "Success") {
        Global_DirtyDataSaveSuccessFlag = "Success";
        Set_Global_IsDirtyData_TheForm(false); //保存成功后，页面不再是脏数据
    } else if (val == "UnSuccess") {
        Global_DirtyDataSaveSuccessFlag = "UnSuccess";
    } else {
        Global_DirtyDataSaveSuccessFlag = null;
    }
}

function Get_Global_DirtyDataCancelSuccessFlag() {
    return Global_DirtyDataCancelSuccessFlag;
}

function Set_Global_DirtyDataCancelSuccessFlag(val) {
    if (val == "Success") {
        Global_DirtyDataCancelSuccessFlag = "Success";
        Set_Global_IsDirtyData_TheForm(false); //放弃成功后，页面不再是脏数据
    } else if (val == "UnSuccess") {
        Global_DirtyDataCancelSuccessFlag = "UnSuccess";
    } else {
        Global_DirtyDataCancelSuccessFlag = null;
    }
}

//function IsShowConfirmSaveDialogByClientID(clientID)
//{
//    var ids = theForm.__EVENTTARGET.value.split('$');
//    var id = ids[ids.length - 1];
//    if(Global_CheckDirtyDataIDs.indexOf(id) > 0)//ToolBar上的翻页
//  {
//      return Get_Global_IsDirtyData_TheForm();
//  }
//  else if($find(clientID) != null && $find(clientID).tagName == "PopMenu")//DropDownButton中的Menu
//  {
//      if($find(clientID).NeedConfirmSave == null || $find(clientID).NeedConfirmSave.toString() != "false")//默认弹出确认保存
//      {
//          if($find(clientID)._hidden.value != "" && $find(clientID)._hidden.value != $find(clientID)._hidden.oldvalue)//说明要触发menu的Get请求
//          {
//              var a = $find(clientID)._hidden.value;//暂存
//              $find(clientID)._hidden.value = "";//使得menu在save过程中不触发事件
//          }
//          return Get_Global_IsDirtyData_TheForm();
//        }
//        else//有可能开发人员通过NeedConfirmSave属性，来设置不想弹出ConfirmSaveDialog
//        {
//            return false;
//        }
//  }
//  else if(false)//Navigator Menu
//  {
//      if($find(clientID).NeedConfirmSave == null || $find(clientID).NeedConfirmSave.toString() != "false")//默认弹出确认保存
//      {
//          return Get_Global_IsDirtyData_TheForm();
//        }
//        else//有可能开发人员通过NeedConfirmSave属性，来设置不想弹出ConfirmSaveDialog
//        {
//            return false;
//        }
//    }
//    else
//        return false;
//}

function IsShowConfirmSaveDialog(clientID) {
    var returnValue = new Object(); //包含returnValue.Value 和 returnValue.EventType
    // var ids = theForm.__EVENTTARGET.value.split('$');
    var ids = clientID.split('$');
    var id = ids[ids.length - 1];
    if (Global_CheckDirtyDataIDs.indexOf(id) >= 0) //ToolBar上的翻页
    {
        if (GetBtnSaveID() != null && IsBtnSaveEnabled() == true) //判断一下此时的保存按钮状态，看看是否允许保存
        {
            returnValue.Value = Get_Global_IsDirtyData_TheForm();
        } else {
            returnValue.Value = false;
        }
        returnValue.EventType = Global_DirtyData_EventType.Toolbar;
        return returnValue;
    } else if ($find(clientID) != null && ($find(clientID).tagName == "PopMenu" || $find(clientID).get_element().tagName == "PopUpMenu")) //DropDownButton中的Menu
    {
        if ($find(clientID).get_element().parentElement != null && GetBtnSaveID() != null && IsBtnSaveEnabled() == true) {
            var curDDBtn = $find(clientID).get_element().parentElement;

            //判断是不是『相关功能』或者 必须明确指定了需要保存提示，此时才可以弹出确认保存提示。除DDBtnTaskLink外的DropDownButton默认是不脏数据保存提示的
            if (curDDBtn.id.indexOf("DDBtnTaskLink") > -1 || curDDBtn.cusAttr("NeedConfirmSave") == "true") {
                returnValue.Value = Get_Global_IsDirtyData_TheForm();
                returnValue.EventType = Global_DirtyData_EventType.DropDownButtonMenu;
                return returnValue;
            } else {
                returnValue.Value = false;
                returnValue.EventType = Global_DirtyData_EventType.DropDownButtonMenu;
                return returnValue;
            }
        } else {
            returnValue.Value = false;
            returnValue.EventType = Global_DirtyData_EventType.DropDownButtonMenu;
            return returnValue;
        }
    } else if (false) //Navigator Menu
    {
        if ($find(clientID).NeedConfirmSave == null || $find(clientID).NeedConfirmSave.toString() != "false") //默认弹出确认保存
        {
            returnValue.Value = Get_Global_IsDirtyData_TheForm();
            returnValue.EventType = Global_DirtyData_EventType.NavigatorMenu;
            return returnValue;
        } else //有可能开发人员通过NeedConfirmSave属性，来设置不想弹出ConfirmSaveDialog
        {
            returnValue.Value = false;
            returnValue.EventType = Global_DirtyData_EventType.NavigatorMenu;
            return returnValue;
        }
    } else {
        returnValue.Value = false;
        returnValue.EventType = Global_DirtyData_EventType.Empty;
        return returnValue;
    }
}

function ShowConfirmSaveModalDialog(handler) {
    //var url = "../ufsoft/simple.aspx?lnk=297c8c52-d2cf-4c58-93bc-84d17a2176a4&chromeType=4&ShowType=ShowModal";
    var url = "../ufsoft/saveconfirm.aspx?chromeType=4&ShowType=ShowModal";
    //ShowModalDialog(url,title,height,width,hideStatusBar,isModelessDialog)
    var ret = ShowModalDialogForAll(url, '', '145', '365', 'true', 'false', handler);
    return ret;
}



function OnBeforeDropDownMenuRedirect(dropDownMenu, id) {

    var ret = true;
    //只判断组织更换时，如果有脏数据是否提示保存。
    if (id.indexOf("OrgPicker") > -1 && Get_Global_IsDirtyData_TheForm() == true && GetBtnSaveID() != null && IsBtnSaveEnabled() == true) {
        var ret = ShowConfirmSaveModalDialog();
        if (ret == true) //是
        {
            if (dropDownMenu)
                _ClientPostBackManager.CallAfterAllPostBack = function () {
                    $(dropDownMenu).click();
                }; //将要转移的url交给_ClientPostBackManager处理
            var saveid = GetBtnSaveID().replace(/_/g, "$");
            __doPostBack(saveid, ''); //如果保存成功，会自动设置脏数据为false
            ret = false;
        } else if (ret == false) //否
        {
            Set_Global_IsDirtyData_TheForm(false);
            ret = true;
        } else {
            ret = false;
        }
    }
    return ret;
}

function OnBeforeQuickMenuRedirect(quickMenu) {

    var ret = true;
    if (Get_Global_IsDirtyData_TheForm() == true && GetBtnSaveID() != null && IsBtnSaveEnabled() == true) {
        var ret = ShowConfirmSaveModalDialog();
        if (ret == true) //是
        {
            if (quickMenu)
                _ClientPostBackManager.CallAfterAllPostBack = function () {
                    $(quickMenu).click();
                }; //将要转移的url交给_ClientPostBackManager处理
            var saveid = GetBtnSaveID().replace(/_/g, "$");
            __doPostBack(saveid, ''); //如果保存成功，会自动设置脏数据为false
            ret = false;
        } else if (ret == false) //否
        {
            Set_Global_IsDirtyData_TheForm(false);
            ret = true;
        } else {
            ret = false;
        }
    }
    if (ret && quickMenu) {
        document.location.href = quickMenu.h;
    }
}


function OnBeforeMenuLinkRedirect(urlName, menuContentDiv) {
    if (Get_Global_IsDirtyData_TheForm() == true && GetBtnSaveID() != null && IsBtnSaveEnabled() == true) {
        var ret = ShowConfirmSaveModalDialog();
        if (ret == true) //是
        {
            _ClientPostBackManager.RedictURLAfterAllPostBack = urlName; //将要转移的url交给_ClientPostBackManager处理
            var saveid = GetBtnSaveID().replace(/_/g, "$");
            __doPostBack(saveid, ''); //如果保存成功，会自动设置脏数据为false
            return true;
        } else if (ret == false) //否
        {
            Set_Global_IsDirtyData_TheForm(false);
            return undefined;
        } else if (ret == undefined) //取消或者点X
        {
            if (menuContentDiv != null) {
                var menuDiv = menuContentDiv.parentElement;
                if (menuDiv != null) {
                    menuDiv.ConfirmSaveDialog_Cancel = true; //通知导航菜单隐藏自己
                    if (menuDiv.style.visibility != "hidden") {
                        menuDiv.style.visibility = "hidden";
                    }
                }
            }
            if (top.__UFCurrentFocusControl && $get(top.__UFCurrentFocusControl)) {
                try {
                    $get(top.__UFCurrentFocusControl).focus();
                } catch (e) { }
            }
            return false;
        }
    }
}

function GetToolbar() {
    var tbElement = null;
    var divs = document.getElementsByTagName("div");
    if (divs == null) return null;
    for (var i = 0, len = divs.length; i < len; i++) {
        var divElement = divs[i];
        //===by zzq 脏读检查时要从Toolbar中找到SaveBtn，因为增加了样式所以之前仅仅判断Class=TB不满足，所以这里改变判断方式
        if ((divElement.className.indexOf("TB") > 0 || divElement.id.indexOf("Toolbar") > 0) && divElement.style.display != "none") {
            tbElement = divElement;
            break;
        }
    }
    return tbElement;
}

function GetBtnSaveID() {
    if (Global_BtnSaveID != null)
        return Global_BtnSaveID;

    var toolbarElement = GetToolbar();
    if (toolbarElement == null) return null;
    var inputs = toolbarElement.getElementsByTagName("input"); //获取toolbar上的按钮集合
    if (inputs == null) return null;
    for (var i = 0, len = inputs.length; i < len; i++) {
        if (inputs[i].id.indexOf("BtnSave") > -1 && (inputs[i].accessKey == "S" || inputs[i].accessKey == "^S")) {
            Global_BtnSaveID = inputs[i].id;
            break;
        }
    }
    return Global_BtnSaveID;
}

//返回值：bool类型
function IsBtnSaveEnabled() {
    var btnSaveId = GetBtnSaveID();
    if (btnSaveId != null && $ID(btnSaveId) != null && $ID(btnSaveId).disabled != true) // 判断『保存』按钮是否可用
    {
        return true;
    } else {
        return false;
    }
}

function IsBtnCancelDoAction(strJS) {
    //"__doPostBack('u$M$p0$BtnCancel','')"
    //    var d = "__doPostBack(";
    //    var len = d.length;

    //    var str1 = script.substring(len + 1);//加1是为去掉'或"，剩下  u$M$p0$BtnCancel','')
    //    var i = str1.indexOf(",");
    //    var BtnCancelID = str1 .substring(0,i-1)//减1是为去掉'或"，剩下  u$M$p0$BtnCancel
    //    var BtnCancelID.indexOf("BtnCancel")//BtnCancel是死的，规范命名
    //
    if (strJS.indexOf("$BtnCancel'") > 0)
        return true;
    else
        return false;
}
/************************************ End Check Dirty Data JScript Source Code **********************************/

/***************************************** Begin Personalization JScript Source Code *****************************************/
var Global_BtnRePostBackWithDoNothingID = "";
var Global_GridCurrentRowIndex4PIsValid = false; //暂定默认为false
var Global_GridCurrentRowIndex4P = -1; //暂定默认为-1
function Get_BtnRePostBackWithDoNothingID() {
    return Global_BtnRePostBackWithDoNothingID;
}

function Set_BtnRePostBackWithDoNothingID(id) {
    Global_BtnRePostBackWithDoNothingID = id;
}

function Get_GridCurrentRowIndex4PIsValid() {
    return Global_GridCurrentRowIndex4PIsValid;
}
function Set_GridCurrentRowIndex4PIsValid(isValid) {
    Global_GridCurrentRowIndex4PIsValid = isValid;
}
function Get_GridCurrentRowIndex4P() {
    return Global_GridCurrentRowIndex4P;
}
function Set_GridCurrentRowIndex4P(index) {
    Global_GridCurrentRowIndex4P = index;
}
/***************************************** End Personalization JScript Source Code *****************************************/

/************************************ Begin EvalJSQueueAfterPageLoaded JScript Source Code *********************************/
var _Global_WillDoPostBack = false; //不要直接使用这个全局变量，请使用其set get方法。个性化的关联JS执行的时候，需要判断此标识。
//这个变量主要是为了给Grid特殊使用，当Grid发起Postback的时候，_ClientPostBackManager的Runing还没有来得及设置为true
function Get_Global_WillDoPostBack() {
    return _Global_WillDoPostBack;
}

function Set_Global_WillDoPostBack(val) {
    if (val == true || (val != null && val.toString().toLowerCase() == "true")) {
        _Global_WillDoPostBack = true;
    } else {
        _Global_WillDoPostBack = false;
    }
}

var Global_CallBackReturnJsQueueIsRunning = false;

var Global_JSQueueEvalAfterPageLoadedManager = new JSQueueEvalAfterPageLoadedManager();
//var jss="if($find('u_M_P1_RegisterCapitalCurrency0')) $find('u_M_P1_RegisterCapitalCurrency0').onButtonClicked();"
//Global_JSQueueEvalAfterPageLoadedManager.Add(jss);

function JSQueueEvalAfterPageLoadedManager() //无论是异步PostBack（也不刷新）还是页面初始化加载，Post回来都要走这里
{
    this.JSEvalQueue = new Array();
    this.PersonalEvalQueue = new Array();
    //yangkuna20100721:添加一个队列，该队列的脚本在JSEvalQueue和PersonalEvalQueue后执行
    this.LastEvalQueue = new Array();

    JSQueueEvalAfterPageLoadedManager.prototype.Add = function (js, isPersonal) {
        if (isPersonal != true) //如果不是个性化的，加入到JSEvalQueue
        {
            this.JSEvalQueue.push(js);
        } else if (isPersonal == true) //如果是个性化的，应该加入到个性化队列PersonalEvalQueue中去
        {
            if (true || _ClientPostBackManager.Runing == true || Get_Global_WillDoPostBack() == true) {
                var len = this.PersonalEvalQueue.length;
                if (len > 0) {
                    //不重复添加
                    if (this.PersonalEvalQueue[len - 1] != js) {
                        this.PersonalEvalQueue.push(js);
                    }
                } else {
                    this.PersonalEvalQueue.push(js);
                }
            } else {
                //应该直接执行
                if (typeof (js) == "function")
                    js();
                else
                    eval(js);
            }
        }
    }
    JSQueueEvalAfterPageLoadedManager.prototype.AddLast = function (js) {
        this.LastEvalQueue.push(js);
    }
    JSQueueEvalAfterPageLoadedManager.prototype.Eval = function () {
        if (Global_Debugger4P) debugger;
        if (_ClientPostBackManager.Runing == false && Get_Global_WillDoPostBack() == false) //说明还有PostBack在跑，并不是所有的PostBack都我跑完了，可能仅仅是第一个PostBack跑完而已
        {
            Global_CallBackReturnJsQueueIsRunning = this.JSEvalQueue.length > 0;
            while (this.JSEvalQueue.length > 0) {
                var jsEval = this.JSEvalQueue.shift();
                if (typeof (jsEval) == "function") {
                    var sender = null;
                    var args = null;
                    if (jsEval.sender != undefined) //gct20090616：恢复关联逻辑handler现场
                    {
                        sender = jsEval.sender;
                    }
                    if (jsEval.args != undefined) //gct20090616：恢复关联逻辑handler现场
                    {
                        args = jsEval.args;
                    }
                    jsEval(sender, args);
                } else {
                    if (jsEval.indexOf("\r\n") > -1) //JS中有回车换行符的，需要删去，不然eval会抛错
                    {
                        var tempJS = jsEval.replace(/\r\n/g, "");
                        eval(tempJS);
                    } else {
                        eval(jsEval);
                    }
                }
            } //end while JSEvalQueue
            Global_CallBackReturnJsQueueIsRunning = false;

            while (_ClientPostBackManager.Runing == false && Get_Global_WillDoPostBack() == false && this.PersonalEvalQueue.length > 0) //gct20091015:执行这段JS的时候，可能引起新的PostBack或者CallBack，所以在While循环的时候要加上_ClientPostBackManager.Runing==false判断
            //for(var i = 0, len = this.PersonalEvalQueue.length ; i < len; i++)//len是当前队列最大的JS数量，随着for循环，可能会有新的JS进队列
            {
                var jsEval = this.PersonalEvalQueue.shift();
                if (typeof (jsEval) == "function") {
                    var sender = null;
                    var args = null;
                    if (jsEval.sender != undefined) //gct20090616：恢复关联逻辑handler现场
                    {
                        sender = jsEval.sender;
                    }
                    if (jsEval.args != undefined) //gct20090616：恢复关联逻辑handler现场
                    {
                        args = jsEval.args;
                    }
                    jsEval(sender, args); //gct20091015:执行这段JS的时候，可能引起新的PostBack或者CallBack，所以在While循环的时候要加上_ClientPostBackManager.Runing==false判断
                } else {
                    if (jsEval.indexOf("\r\n") > -1) //JS中有回车换行符的，需要删去，不然eval会抛错
                    {
                        var tempJS = jsEval.replace(/\r\n/g, "");
                        eval(tempJS);
                    } else {
                        eval(jsEval);
                    }
                }
            } //end while PersonalEvalQueue

            while (_ClientPostBackManager.Runing == false && Get_Global_WillDoPostBack() == false && this.LastEvalQueue.length > 0) {
                var jsEval = this.LastEvalQueue.shift();
                if (typeof (jsEval) == "function") {
                    var sender = null;
                    var args = null;
                    if (jsEval.sender != undefined) //gct20090616：恢复关联逻辑handler现场
                    {
                        sender = jsEval.sender;
                    }
                    if (jsEval.args != undefined) //gct20090616：恢复关联逻辑handler现场
                    {
                        args = jsEval.args;
                    }
                    jsEval(sender, args); //gct20091015:执行这段JS的时候，可能引起新的PostBack或者CallBack，所以在While循环的时候要加上_ClientPostBackManager.Runing==false判断
                } else {
                    if (jsEval.indexOf("\r\n") > -1) //JS中有回车换行符的，需要删去，不然eval会抛错
                    {
                        var tempJS = jsEval.replace(/\r\n/g, "");
                        eval(tempJS);
                    } else {
                        eval(jsEval);
                    }
                }
            } //end while LastEvalQueue

        } //end _ClientPostBackManager.Runing == false
    } //end function
}
/************************************ End EvalJSQueueAfterPageLoaded JScript Source Code **********************************/
function afterPageLoadComplete() {
    top.PageInitCompleted = false;
    if (Set_Global_IsPageLoadComplete) //为脏数据设置页面加载完成标志
        Set_Global_IsPageLoadComplete(true);


    //20100303 wangxiaoliang
    //增加跨组织分配模板后，模拟录入失败时的错误提示标志的管理类。
    //--begin--
    if ((window.PersonalWarnMsgManager) && (window.PersonalWarnMsgManager._WarnMsg.length > 0)) {
        window.PersonalWarnMsgManager.ShowMsg();
    }
    //--end--

    /*_________________________________________________________________________________________________________________________________*/
    //
    //gct20091019 森普_关于销售订单录入项目字段出错_绿色通道问题
    //PostBack队列中有两次PostBack，原先逻辑是在第一此PostBack结束onEndRequest的时候，发起第二次PostBack的时候，
    //而此时由于$find(GridID)为null，即还没有来得及初始化Grid的JS对象，导致了此时第二次虽然发起了PostBack，但是不能进行数据收集，
    //所以放在了这里再发起第二次PostBack

    //由于发起第二次PostBack，导致输入日期之后会刷新三遍后才能进行操作，这里添加了相关限制。
    if (Global_JSQueueEvalAfterPageLoadedManager.Eval__doPostBack != null && Global_JSQueueEvalAfterPageLoadedManager.Eval__doPostBack.indexOf("Date") < 0) {
        eval(Global_JSQueueEvalAfterPageLoadedManager.Eval__doPostBack); //这时候才真正的执行__doPostBack
        Global_JSQueueEvalAfterPageLoadedManager.Eval__doPostBack = null; //一定要清空，否则会引起无限循环PostBack
    }
    /*_________________________________________________________________________________________________________________________________*/

    Global_JSQueueEvalAfterPageLoadedManager.Eval(); //在页面最后时机执行延后执行的JS
    //JavaScript Debug Tool 开关
    if (typeof (JavaScriptDebugTool) != "undefined" && JavaScriptDebugTool.On) {
        var debugWin = new JavaScriptDebugTool();
        debugWin.initialize();
        $alert("Init Complete ....");
    }
    //页面级抓焦点时机延后 20100312 lzhm
    UFFocus(true);
    TPscrollLeftIEHark();
    //Bug U9V2100386891 lzhm
    var btnLogout = $ID("u_Displaytitle1_ctl00_btnLogout");
    if (btnLogout && _ClientPostBackManager.Runing == false && btnLogout.getAttribute("href1")) {
        btnLogout.setAttribute("href", btnLogout.getAttribute("href1"));
        btnLogout.removeAttribute("href1");
    }
    if (_ClientJSExecQueueManager.RunAfterPageLoad) {
        _ClientJSExecQueueManager.Start();
    }
    var grid = $find(window.RefGridID);
    if (grid) {
        window.RefGridID = null;
        if (grid.D_Body.rows.length > 0) {
            if (grid.D_Body.rows[0].Status == RowStatus.Empty) {
                var d = document.getElementById(window.RefFocusControl);
                window.RefFocusControl = null;
                if (d) {
                    d.focus();
                }
            } else { }
        }
    }
    //Autotest End02^^
    top.PageInitCompleted = true;

    popLayerTableSetWidthtHelper();

    //内存泄漏 2022/11/10
    if (Sys.WebForms) {
        if (Sys.WebForms.PageRequestManager.getInstance()._postBackSettings && Sys.WebForms.PageRequestManager.getInstance()._postBackSettings.sourceElement) {
            Sys.WebForms.PageRequestManager.getInstance()._postBackSettings.sourceElement = null;
            Sys.WebForms.PageRequestManager.getInstance()._postBackSettings = null;
        }
        if (Sys.WebForms.PageRequestManager.getInstance()._activeElement) {
            Sys.WebForms.PageRequestManager.getInstance()._activeElement = null;
        }

    }
}

function TPscrollLeftIEHark() {
    /*U9V6000001617 没找到症结，在这强制滚动到left=0  20170418*/
    var selectTP = $(".TP:not(:hidden)");
    $(".TP:not(:hidden)").each(function (index, item) {
        var selectItem = $(item);
        var offsetLeft = selectItem.offset().left;
        if (offsetLeft < 0) {
            selectItem.css("overflow", "auto");
            selectItem.scrollLeft(0);
            selectItem.css("overflow", "");
        }
    })

}

var Global_ScrollPanelList = new Array();

function AddToScrollPanelList(panelControlId) {
    var isAdd = true;
    for (var i = 0; i < Global_ScrollPanelList.length; i++) {
        if (Global_ScrollPanelList[i] == panelControlId) {
            isAdd = false;
            break;
        }
    }
    if (isAdd == true) {
        Global_ScrollPanelList.push(panelControlId);
    }
}

function getTreeControWidth(){
    var moveTreeButton = $("[id$='MoveTreeButton']");
    if (moveTreeButton.length > 0) {
        var treeLine = moveTreeButton.closest("table").closest("td");
        $(treeLine).css("cursor", " w-resize");
        var treeTD = $(treeLine).closest("table").children("thead").find("tr td:first");
        // var pageLnk = dealUrlPara("lnk", window.frameElement.src)
        var pageLnk = dealUrlPara("lnk", window.$("#RawUrl").val())
        var userName = $("#UserName").val()
        var TreeControStorage = JSON.parse(window.localStorage.getItem(userName + "_TreeContro_Width"));
        if (TreeControStorage && TreeControStorage[pageLnk]) {
            $("#BomMainUI_TreeContro_Width").val(TreeControStorage[pageLnk].TreeControWidth);
            if ($(treeTD).width() > 1) {
                $(treeTD).width(TreeControStorage[pageLnk].TreeControWidth);
            }
        }
    }
}

function RestorePanelScrollPosition() {

    //璁剧疆AutoCell锛岀粰鑷€傚簲td璁剧疆楂樺害
    //是否选中选项卡
    FullScreenGridHelper.GetInstance().init();

    /*var tabOnClickID=$("body").attr("tabOnClickID");
    //物料清单postback是全页
    if( !!tabOnClickID){
              TdSetHeightHelper.GetInstance($("#"+tabOnClickID).closest("td")).init();
    }else{*/
    TdSetHeightHelper.GetInstance().init();
    /*}*/

    if (Global_ScrollPanelList.length > 0) {
        for (var i = 0; i < Global_ScrollPanelList.length; i++) {
            if ($get(Global_ScrollPanelList[i])) {
                //冻结行列 css的表达式expression引起的效率慢问题
                //问题号9201606210168
                //2016.7.13 by liyne
                var $layoutContainer = $($get(Global_ScrollPanelList[i]));
                var frozenScrollLeft = $get(Global_ScrollPanelList[i] + "_ScrollPositionX").value;
                var frozenScrollTop = $get(Global_ScrollPanelList[i] + "_ScrollPositionY").value;
                if ($layoutContainer.is(":visible")) {
                    //冻结
                    FrozenGetInstance(frozenScrollLeft, frozenScrollTop, $layoutContainer);
                    //滚动位置
                    $layoutContainer.scrollLeft(frozenScrollLeft);
                    $layoutContainer.scrollTop(frozenScrollTop);
                }
                else {

                    if (!window.afterShowCall) { window.afterShowCall = []; }
                    window.afterShowCall.push(function () {
                        FrozenGetInstance(frozenScrollLeft, frozenScrollTop, $layoutContainer);
                        //滚动位置
                        $layoutContainer.scrollLeft(frozenScrollLeft);
                        $layoutContainer.scrollTop(frozenScrollTop);

                    })
                }
            }
        }
    }

    //初始化#BomMainUI_TreeContro_Width的宽度
    getTreeControWidth();
    //快速查询设置样式
    window.newQuickSearchSetStyleManager=new quickSearchSetStyleManager();
    window.newQuickSearchSetStyleManager.init();
    // quickSearchSetStyleManager.GetInstance().init();

}
function FrozenGetInstance(frozenScrollLeft, frozenScrollTop, $layoutContainer) {
    if (frozenScrollLeft != 0 || frozenScrollTop != 0) {
        var layoutContainer = $layoutContainer;
        var table = layoutContainer.find("table");
        var thead = layoutContainer.find("thead");
        //多表头固定列取值问题修复，原写法导致取多表头列宽错误，引发列值错位 modify by zhaoliann 20191225
        var fixedLength = $(thead.find('tr')[0]).find(".FixedColumnTitleCell").length;
        //var fixedLength=thead.find(".FixedColumnTitleCell").length;
        // GridFrozenColumnsHelper.GetInstance(layoutContainer, table, thead, fixedLength, frozenScrollLeft, frozenScrollTop).init();
    }
}
function doD(btnID, gridID) {

    if (window.event.keyCode == 13) {
        window.RefGridID = gridID;
        window.RefFocusControl = window.event.srcElement.id;
        __doPostBack(btnID, "");
    }
}
//专为查找的控件回车用的
function doFindD(btnID, btnClientID, gridID) {

    if (window.event.keyCode == 13) {
        window.RefGridID = gridID;
        window.RefFocusControl = window.event.srcElement.id;

        $ID(btnClientID).setAttribute("tabindex", -1);
        $ID(btnClientID).focus();
        __doPostBack(btnID, "");
    }
}

function RefClientReturn(gridID) {
    var grid = $find(gridID);
    if (grid) {
        var doc = Basic.GetXmlDom();
        doc = Basic._loadXML("<ReferenceReturns/>");//LoadXMLdoc.loadXML("<ReferenceReturns/>");
        var element = doc.createElement("ReferenceReturn");
        doc.documentElement.appendChild(element);

        var rowIndex = grid.get_CurrentRowIndex();
        //对于含有MainID的特殊处理
        var colIndex = grid.GetColumnIndex("MainID");
        if (colIndex >= 0) {
            var mainCellValue = grid.GetCellValue(rowIndex, colIndex);
        }
        for (var i = 1; i <= grid.get_Columns(); i++) {
            var cellValue = "";
            if (grid.MainCols[i].cusAttr('FieldID') == "ID" && mainCellValue) {
                cellValue = mainCellValue;
            } else {
                cellValue = grid.GetCellValue(rowIndex, i);
            }
            if (cellValue) {
                //对于参照类型列的特殊处理
                if (grid.MainCols[i].cusAttr('ControlType') == "REF") {
                    var elementIDField = CreateReturnValueXML(doc, grid.MainCols[i].cusAttr('FieldID'), cellValue.Key);
                    element.appendChild(elementIDField);
                    //这里先使用code和name 需要客户端把后台的codeField和nameField输出！！！
                    var elementCodeField = CreateReturnValueXML(doc, grid.MainCols[i].cusAttr('FieldID') + "_Code", cellValue.Value);
                    element.appendChild(elementCodeField);
                    var elementNameField = CreateReturnValueXML(doc, grid.MainCols[i].cusAttr('FieldID') + "_Name", cellValue.Text);
                    element.appendChild(elementNameField);
                } else {
                    var elementField = CreateReturnValueXML(doc, grid.MainCols[i].cusAttr('FieldID'), cellValue.Value);
                    element.appendChild(elementField);
                }
            }
        }
        //mahx20170410 doc.xml
        window.returnValue = XMLHelper.serializeXMLNodeToString(doc);
        window.dialogArguments.Escaped = "true";
        window.close();
    }
} //RefClientReturn

function CreateReturnValueXML(doc, FieldID, Value) {
    var elementField = doc.createElement("ReturnField");
    elementField.setAttribute("name", FieldID);
    elementField.setAttribute("value", Value);
    return elementField;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//added by u9lkc 20130829 个性化默认值自动提交保存新默认值方案

var isLast = 0;

function SaveDefaultValue() {
    var sdm = $(saveDefaultMenu)[0];
    if (sdm) {
        //===by zzq 解决fireEvent在webkit中不兼容
        if (document.all) {
            sdm.fireEvent("onclick");
        }
        else {
            var evt = document.createEvent('HTMLEvents');
            evt.initEvent('click', true, true);
            sdm.dispatchEvent(evt);
        }
    }
}

function EvalSaveDefaultValue() {
    if (CanEvalSaveDefault()) {
        if (isLast == 0) {
            isLast = 1;
            window.setTimeout(EvalSaveDefaultValue, 0);
        } else if (isLast == 1) {
            isLast = 0;
            window.setTimeout(SaveDefaultValue, 0);
        }
    } else {
        isLast = 0;
        window.setTimeout(EvalSaveDefaultValue, 0);
    }
}

function CanEvalSaveDefault() {
    if (Global_CallBackReturnJsQueueIsRunning == false && _ClientJSExecQueueManager.Running == false && _ClientPostBackManager.Runing == false && _ClientCallBackManager.Runing == false && Global_JSQueueEvalAfterPageLoadedManager.JSEvalQueue.length == 0 && Global_JSQueueEvalAfterPageLoadedManager.PersonalEvalQueue.length == 0 && Global_JSQueueEvalAfterPageLoadedManager.LastEvalQueue.length == 0 && (ClientJSExecQueueManager.Handlers == undefined || ClientJSExecQueueManager.Handlers != undefined && ClientJSExecQueueManager.Handlers.length == 0) && (ClientJSExecQueueManager.FirstHandlers == undefined || ClientJSExecQueueManager.FirstHandlers != undefined && ClientJSExecQueueManager.FirstHandlers.length == 0) && _ClientCallBackManager.Handlers.length == 0 && _ClientCallBackManager.PersonalProcessQueue.length == 0 && _ClientPostBackManager.SrcElement.length == 0 && _ClientPostBackManager.PersonalProcessQueue.length == 0)
        return true;
    else
        return false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//end 个性化默认值自动提交保存新默认值方案


/************************************** 个性化关联逻辑在客户端执行方案 **********************************/
/*                                       任何人不得擅自修改！如需修改，请联系gct                                   */

function ClientRunAssoCJS4P(clientID, handler, isPostBack, isRunAllChangedRows) { //debugger;
    var js = "";

    isPostBack = true;
    isRunAllChangedRows = false; //服务器端传过来的是true，现在的方案只支持修改当前行
    if (isRunAllChangedRows) {
        if (!isPostBack) //页面初始化，需要跑所有行的JS
        {
            //js += "debugger;";
            js += "var rowCount = $find('" + clientID + "').D_Body.rows.length;";
            js += "var lastRow = $find('" + clientID + "').D_Body.rows[rowCount-1];";
            js += "if(lastRow.Status == RowStatus.Empty )";
            js += "{";
            js += "rowCount--;";
            js += "}";

            js += "var curRowIndex = $find('" + clientID + "').m_currentRowIndex;"; //记住当前真实的CurRowIndex

            js += "for(var i=0; i<rowCount; i++)"; //将来这里改为遍历所有数据改变的行，即快速录入增加的行
            js += "{";
            js += "var sender = $find('" + clientID + "');";
            js += "var args = new UF.UI.ChangeEventArgs();";
            js += "args.EventSrc = 'RunJS4P';";
            //js +="args.CurRowIndex = i;";
            js += "$find('" + clientID + "').m_currentRowIndex = i;";
            js += handler + "(sender,args);";
            js += "}";

            js += "$find('" + clientID + "').m_currentRowIndex = curRowIndex"; //恢复原来的CurRowIndex

        } else //只要跑当前行的JS就可以了
        {
            //js +="var sender = $find('" + clientID + "');";
            js += "var sender = 'Run4P';";
            js += "var args = new UF.UI.ChangeEventArgs();";
            js += "args.EventSrc = 'ClientRunAssoCJS4P';";
            js += handler + "(sender,args);";
        }
    } else {
        //js +="var sender = $find('" + clientID + "');";
        js += "var sender = null;";
        js += "var args = new UF.UI.ChangeEventArgs();";
        js += "if(_ClientPostBackManager.get_DoPostBackcompleted() == false)"; //表示__doPostBack完成
        js += "{_ClientPostBackManager.set_DoPostBackcompleted(true);sender = $find('" + clientID + "');args.EventSrc = 'ClientRunAssoCJS4P';}"; //这种情况是__doPostBack()后，必须再跑全部的JS
        js += "else{sender = 'Run4P';args.EventSrc = 'ClientRunAssoCJS4P';}";
        js += handler + "(sender,args);";
    }

    return js;
}
/*******************************************************************************************************/

var IsJSCalculatorEvalAlert = false;

function JSCalculatorEval(str) {
    var preResult = "Nan";
    try {
        if(typeof(math) == "object"){
            math.config({
                number: 'BigNumber',
            });
            var result = math.evaluate(str);
            preResult = result.toJSON().value
        } else{
            preResult = eval(str);//防止获取不到math对象,保持原方案
        }
    }catch (e) {
        if (IsJSCalculatorEvalAlert)
            alert("语法错误！关联计算过程有误，请检查计算公式" + str + "的正确性！该提示仅在测试阶段出现。正式发盘将无此提示！");
    }
    return preResult.toString();
}

function CanEvalPersonalJS(handler, sender, args, isRefOut) {
    //    var handler = sender.curHandler;//现在sender.curHandler一定应该有值
    //    if(handler==null)
    //    {
    //        alert("没有记录客户端事件sender的handler！请通知平台相关人员！");
    //        return;
    //    }
    sender.fromPersonal = true;
    if (_ClientPostBackManager.Runing || Get_Global_WillDoPostBack() == true) //如果有PostBack在跑
    {
        handler.sender = sender;
        handler.args = args;

        //深度克隆参照返回列表
        if (args.result != null && args.result.Rows != null) {
            var refData = new ReferenceData();
            for (var i = 0, len = args.result.Rows.length; i < len; i++) //深度克隆
            {
                refData.Rows[i] = args.result.Rows[i];
            }
            handler.args.result = refData;
        }

        Global_JSQueueEvalAfterPageLoadedManager.Add(handler, true);
        return false
    } else if (_ClientCallBackManager.Runing) //如果有CallBack在跑
    {
        handler.sender = sender;
        handler.args = args;

        //深度克隆参照返回列表
        if (args.result != null && args.result.Rows != null) {
            var refData = new ReferenceData();
            for (var i = 0, len = args.result.Rows.length; i < len; i++) //深度克隆
            {
                refData.Rows[i] = args.result.Rows[i];
            }
            handler.args.result = refData;
        }

        _ClientCallBackManager.Add2PersonalProcessQueue(handler, true);
        return false;
    }
    return true;
}
//20100303 wangxiaoliang
//增加跨组织分配模板后，模拟录入失败时的错误提示标志的管理类。
//--begin--
window.PersonalWarnMsgManager = new PersonalWarnMsgManager();

function PersonalWarnMsgManager() {
    this._WarnMsg = [];
    this._keyValue = "";

    //todo:如果相同的item已经存在，则不需要重复添加。
    PersonalWarnMsgManager.prototype.Add = function (ctrl, setVal) {
        var item = new Object();
        item.control = ctrl;

        var val = null;
        if (setVal) {
            val = new Object();
            val.IsSetControlValue = setVal.IsSetControlValue;
            val.ValueSource = setVal.ValueSource;
            val.GridControl = setVal.GridControl
        }

        item.SetControlValue = val;
        this._WarnMsg.push(item);
    }

    PersonalWarnMsgManager.prototype.Queue = function () {
        return this._WarnMsg;
    }

    PersonalWarnMsgManager.prototype.ShowMsg = function () {
        if (this._WarnMsg.length > 0) {
            if ($ID("keyValues4Favorite") && ($ID("keyValues4Favorite").value != this._keyValue)) {
                this.Clear();
                //alert(this._WarnMsg.length);
                return;
            }

            CreateWarnMsg("", null);
            for (var i = 0, j = this._WarnMsg.length; i < j; i++) {
                var item = this._WarnMsg[i];
                var msgType = -1;
                var parentGrid = null;
                if (item.SetControlValue) {
                    msgType = item.SetControlValue.ValueSource;
                    if (item.SetControlValue.GridControl) {
                        parentGrid = $ID(item.SetControlValue.GridControl.id);
                        if (parentGrid) {
                            parentGrid.control.set_SetControlValue(item.SetControlValue);
                        }
                    }
                }
                if ($ID(item.control)) {
                    CreateWarnMsg(GetPersonWarnMsg(msgType), $ID(item.control), parentGrid);
                }
            }
        }
    }

    PersonalWarnMsgManager.prototype.Clear = function () {
        if (this._WarnMsg.length > 0) {
            for (var i = 0, j = this._WarnMsg.length; i < j; i++) {
                this._WarnMsg.shift();
            }
        }
    }

    PersonalWarnMsgManager.prototype.SetKeyValue = function (val) {
        this._keyValue = val;
    }
}

//取得当前触发源的父TabPage控件，如果不是在TabPage中，返回null
function GetCurrentTabPage(id) {
    if ($ID(id)) {
        var p = $ID(id);
        for (; ;) {
            if (p.className && p.className == ControlClass.TabPage) {
                return p;
            }
            if (p.className && p.className == ControlClass.toppanel) {
                return null;
            }
            if (p.parentElement) {
                p = p.parentElement;
            } else {
                return null;
            }
        }
    }
}

function IsCurrentTabPage(id) {
    var rlt = false;
    if ($ID(id)) {
        var target = $ID(id);
        if (target.className && target.className == ControlClass.TabPage) {
            var curTabPage = target.control.get_parent().tabGroup.TabCollection[target.control.get_parent().get_TabIndex()];
            if (curTabPage.Page.id == target.id) {
                rlt = true;
            }
        }
    }
    return rlt;
}

function IsShowingErrorMsg(target) {
    var rlt = false;
    if (target && target.children && target.children.length > 0) {
        for (var i = 0, j = target.children.length; i < j; i++) {
            if (target.children[i].className == "ErrorToolTip") {
                rlt = true;
                //alert('debug:发现已经存在错误提示！');
                break;
            }
        }
    }
    return rlt;
}
function GetPersonWarnMsg(typ) {
    //todo:待国际化
    var msg = "";
    if (typ == 0) {
        //msg = "默认值设置不正确，无法赋值，请检查画面个性化中的默认值设置。";
        msg = Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_SetValueError0;
    } else if (typ == 1) {
        //msg = "关联设计不正确，无法赋值，请检查画面个性化中的关联设计。";
        msg = Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_SetValueError1;
    } else if (typ == 2) {
        //msg = "批量修改不正确，无法赋值，请检查批量修改的设置。";
        msg = Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_SetValueError2;
    }
    return msg;
}

function GetParentGrid(id) {
    if ($ID(id)) {
        var p = $ID(id);
        for (; ;) {
            if (p.className && $(p).hasClass(ControlClass.Grid)) {
                return p;
            }
            if (p.className && p.className == ControlClass.toppanel) {
                return null;
            }
            if (p.parentElement) {
                p = p.parentElement;
            } else {
                return null;
            }
        }
    }
}

//--end--

/**************************************************************
客户化筛选工具条管理类
***************************************************************/
GridCustomFilterToolbarManager = function (toolBar, owner, type) {
    var _this = this;
    this._owner = owner;
    this.toolBar = toolBar;
    this.setFilterHandle = null;
    this.firstLocateHandle = null;
    this.lastLocateHandle = null;
    this.previousLocateHandle = null;
    this.nextLocateHandle = null;
    this.checkHandle = null;
    this.uncheckHandle = null;
    this.div = null;

    this._type = type;
    this.dragHandle = null;

    this.OnBtnSetFilterClick = function (p1, p2) {

        if (!_this || !_this._owner || !_this._owner.get_element())
            return;

        if (_this._owner.m_rows < 2)
            return;

        if (!p2) {
            _this._owner.OnCustomFilterClick("BuildFilter");
            return;
        }
        var TaskID = _this._owner.get_element().cusAttr('TaskID');
        var PFID = _this._owner.get_element().cusAttr('FormID');
        var viewName = _this._owner.get_element().cusAttr('ViewName');

        var FieldIDs = [];
        var j = 0;
        for (var i = 1; i < _this._owner.MainCols.length; i++) {
            if (window.getComputedStyle(_this._owner.MainCols[i]).display != "none") {
                if ((_this._owner.MainCols[i].cusAttr('AllowFilter') != null) && (_this._owner.MainCols[i].cusAttr('AllowFilter') == "false")) {
                    //过滤不参与快速定位的列
                    continue;
                }
                if (_this._owner.GetColumnType(i) == ControlType.RefControl && (!_this._owner.MainCols[i].cusAttr('RefID') || _this._owner.MainCols[i].cusAttr('RefID') == "00000000-0000-0000-0000-000000000000")) {
                    FieldIDs[j] = _this._owner.MainCols[i].cusAttr('NameField').replace(/\./g, "_");
                } else {
                    FieldIDs[j] = _this._owner.MainCols[i].cusAttr('FieldID');
                }
                j++;
            }
        }
        var FieldIDList = FieldIDs.join(",");
        //var url="simple.aspx?lnk=639f9280-954f-4506-b96f-470ffba84ab3&chromeType=4&ShowType=ShowModal&ParentTaskID=795eba6f-6f5f-42f3-9871-88811648947b&PFID=8704463d-d3d7-46a4-83e8-ec78bbf3ad57";
        var url = "simple.aspx?lnk=0d75ecdd-46ab-494d-8be0-b4ea8a18a427&chromeType=4&ShowType=ShowModal&ShowAtlasModalDialog=true&ParentTaskID=" + TaskID + "&PFID=" + PFID + "&viewname=" + viewName + "&FieldIDs=" + FieldIDList;
        //        var title="查询定位";
        var title = null;
        var height = "435";
        var width = "670";
        var hideStatusBar = true;
        var isModelessDialog = false;
        // var ret = ShowModalDialog(url, title, height, width, hideStatusBar, isModelessDialog);
        // if (ret == true) {
        //     if (!top.ShowCustomFilter) {
        //         top.ShowCustomFilter = new Object();
        //     }
        //     top.ShowCustomFilter[_this._owner.get_id()] = true;
        //     _this._owner.OnCustomFilterClick("SetFilter");
        // } else {
        //     if (top.ShowCustomFilter) {
        //         top.ShowCustomFilter[_this._owner.get_id()] = null;
        //     }
        //     _this.div.style.visibility = "hidden";
        // }

        ShowModalDialogForAll(url, title, height, width, hideStatusBar, isModelessDialog, _this);
    }
    this.showDialogCallback = function (ret) {
        if (ret == true) {
            if (!top.ShowCustomFilter) {
                top.ShowCustomFilter = new Object();
            }
            top.ShowCustomFilter[_this._owner.get_id()] = true;
            _this._owner.OnCustomFilterClick("SetFilter");
        } else {
            if (top.ShowCustomFilter) {
                top.ShowCustomFilter[_this._owner.get_id()] = null;
            }
            _this.div.style.visibility = "hidden";
        }
    }
    this.onBtnSetFilterRightClick = function () {
        if (!top.ShowCustomFilter || !top.ShowCustomFilter[_this._owner.get_id()]) {
            _this.div.style.visibility = "hidden";
            return;
        }
        if (event.button == 0)
            return;
        if (_this.toolBar.CFHasData && _this.toolBar.CFHasData == "true") {
            if (_this.div.style.visibility == "visible") {
                _this.div.style.visibility = "hidden";
            } else {
                _this.div.style.visibility = "visible";
            }
        }
        return false;
    }

    this.GetFieldList = function () {

    }
    this.OnCustromFilterFirstReceive = function () {
        if (_this._owner.get_element().cusAttr("disabled")) return;
        _this._owner.OnCustomFilterClick("First");
    }
    this.OnCustromFilterPreviousReceive = function () {
        if (_this._owner.get_element().cusAttr("disabled")) return;
        _this._owner.OnCustomFilterClick("Previous");
    }
    this.OnCustromFilterNextReceive = function () {
        if (_this._owner.get_element().cusAttr("disabled")) return;
        _this._owner.OnCustomFilterClick("Next");
    }
    this.OnCustromFilterLastReceive = function () {
        if (_this._owner.get_element().cusAttr("disabled")) return;
        _this._owner.OnCustomFilterClick("Last");
    }
    this.OnCustromFilterSelectReceive = function () {
        if (_this._owner.get_element().cusAttr("disabled")) return;
        _this._owner.OnCustomFilterClick("select");
        _this._owner.SetHeadCheckBoxState(true);
    }
    this.OnCustromFilterUnSelectReceive = function () {
        if (_this._owner.get_element().cusAttr("disabled")) return;
        _this._owner.OnCustomFilterClick("unselect");
    }
    //处理拖拽
    this.InitDrag = function (odiv, title) {
        title.onmousedown = function (e) {
            if (e == null) e = window.event;
            var x = e.screenX;
            var y = e.screenY;
            var divLeft = parseInt(odiv.currentStyle.left);
            var divBottom = parseInt(odiv.currentStyle.bottom);

            var tabID = odiv.cusAttr("ParentTabID");
            var tab = $ID(tabID);
            var tabWidth = tab.style.pixelWidth;
            var tabHeight = tab.style.pixelHeight;

            //这种写法只适合IE浏览器
            if (title.setCapture) {
                title.setCapture();
                document.onmousemove = function (e) {
                    if (e == null) e = window.event;
                    //计算移动偏移量
                    var tx = e.screenX - x;
                    var ty = e.screenY - y;
                    //计算移动后的位置
                    var toLeft = (divLeft + tx);
                    var toBottom = (divBottom - ty);

                    //限制可拖动的范围
                    //得按最后的left和bottom跟Tab页签的相对位置来判断才行。
                    if (toLeft < 1) toLeft = 1;
                    if (toLeft > tabWidth - 100) toLeft = tabWidth - 100; //这个值需要根据Tab页签宽度动态计算
                    if (toBottom > tabHeight - 45) toBottom = tabHeight - 45; //这个值需要根据Tab页签高度动态计算
                    if (toBottom < 1) toBottom = 1;
                    //最终改变位置
                    odiv.style.left = toLeft + "px";
                    odiv.style.bottom = toBottom + "px";

                    //总是记录移动后的最后位置
                    if (!top.CustomFilterLocation) {
                        top.CustomFilterLocation = [];
                        top.CustomFilterLocation.getLocationItem = function (id) {
                            for (var i = 0, j = this.length; i < j; i++) {
                                if (this[i].TabID == id) {
                                    return this[i];
                                    break;
                                }
                            }
                        }
                    }

                    var Item = new Object();
                    Item.TabID = tabID;
                    Item.Left = toLeft;
                    Item.Bottom = toBottom;

                    var tmpItem = top.CustomFilterLocation.getLocationItem(Item.TabID);
                    if (tmpItem) {
                        tmpItem.Left = Item.Left;
                        tmpItem.Bottom = Item.Bottom;
                    } else {
                        top.CustomFilterLocation.push(Item);
                    }

                    //调试用代码
                    //var len = top.CustomFilterLocation.length;
                    //if (len > 0){
                    //    $alert(len);
                    //    $alert(top.CustomFilterLocation[len-1].TabID + "," +top.CustomFilterLocation[len-1].Left +","+ top.CustomFilterLocation[len-1].Bottom)
                    //    var tmpID = top.CustomFilterLocation[len-1].TabID;
                    //    var item = top.CustomFilterLocation.getLocationItem(tmpID);
                    //    $alert(item.TabID + "#" +item.Left +"#"+ item.Bottom)
                    //}
                };
                document.onmouseup = function () {
                    title.releaseCapture();
                    document.onmousemove = null;
                    document.onmouseup = null;
                };
            };
        };
    }
}
GridCustomFilterToolbarManager.prototype = {
    dispose: function () {
        this._owner = null;
        this.DetachEvents();
        this.toolBar = null
        this.setFilterHandle = null;
        this.firstLocateHandle = null;
        this.lastLocateHandle = null;
        this.previousLocateHandle = null;
        this.nextLocateHandle = null;
        this.checkHandle = null;
        this.uncheckHandle = null;
        this.div = null;
        this._type = null;
        this.dragHandle = null;
    },
    Initialize: function () {
        if (this.toolBar != null) {
            if (this._type == "Grid") {
                //this.div = this.toolBar.cells[0].children[1];
                // this.div = this.toolBar.cells[0].lastChild;  //这个写法在孟阔的IE11下报错，而我测试的其他IE11下都是ok的,现改为下行写法
                this.div = this.toolBar.children[0].children[this.toolBar.children[0].children.length - 1]
                var divCells = this.div.children[0].rows[0].cells;
                // this.setFilterHandle = this.toolBar.cells[0].firstChild;  //孟阔的IE11此行报错，修改为下行方式
                this.setFilterHandle = this.toolBar.children[0].children[0];
                this.firstLocateHandle = divCells[0].firstChild;
                this.previousLocateHandle = divCells[2].firstChild;
                this.nextLocateHandle = divCells[4].firstChild;
                this.lastLocateHandle = divCells[6].firstChild;
                if (divCells.length > 10) {
                    this.checkHandle = divCells[8].firstChild;
                    this.uncheckHandle = divCells[10].firstChild;
                }
            } else if (this._type == "Tab") {
                //处理Tab的导航条的情况。
                this.div = this.toolBar;
                var divCells = this.div.children[0].rows[0].cells;
                this.dragHandle = divCells[0].firstChild;
                this.firstLocateHandle = divCells[1].firstChild;
                this.previousLocateHandle = divCells[3].firstChild;
                this.nextLocateHandle = divCells[5].firstChild;
                this.lastLocateHandle = divCells[7].firstChild;
            }
            this.AttachEvents();
        }
    },
    AttachEvents: function () {
        // this.firstLocateHandle.attachEvent("onclick", this.OnCustromFilterFirstReceive);
        // this.previousLocateHandle.attachEvent("onclick", this.OnCustromFilterPreviousReceive);
        // this.nextLocateHandle.attachEvent("onclick", this.OnCustromFilterNextReceive);
        // this.lastLocateHandle.attachEvent("onclick", this.OnCustromFilterLastReceive);
        $(this.firstLocateHandle).bind("click", this.OnCustromFilterFirstReceive);
        $(this.previousLocateHandle).bind("click", this.OnCustromFilterPreviousReceive);
        $(this.nextLocateHandle).bind("click", this.OnCustromFilterNextReceive);
        $(this.lastLocateHandle).bind("click", this.OnCustromFilterLastReceive);
        if (this._type == "Grid") {
            $(this.setFilterHandle).bind("click", this.OnBtnSetFilterClick);
            $(this.setFilterHandle).bind("mousedown", this.onBtnSetFilterRightClick);
            if (this.checkHandle) {
                $(this.checkHandle).bind("click", this.OnCustromFilterSelectReceive);
                $(this.uncheckHandle).bind("click", this.OnCustromFilterUnSelectReceive);
            }
        } else if (this._type == "Tab") {
            //todo:处理拖拽按钮
            //this.dragHandle.attachEvent("onclick",this.XXX);
            this.InitDrag(this.div, this.dragHandle);
        }
        //整页刷新的时候，top.ShowCustomFilter会被清空，不能这么判断
        //if(top.ShowCustomFilter && window.ShowCustomFilter[this._owner.get_id()]){
        if (this.toolBar.cusAttr('CFHasData') && this.toolBar.cusAttr('CFHasData') == "false") { } else {
            this.div.style.visibility = "visible";
        }
        //}
    },

    DetachEvents: function () {
        // this.setFilterHandle.detachEvent("onclick", this.OnBtnSetFilterClick);
        // this.setFilterHandle.detachEvent("onmousedown", this.onBtnSetFilterRightClick);
        // this.firstLocateHandle.detachEvent("onclick", this.OnCustromFilterFirstReceive);
        // this.previousLocateHandle.detachEvent("onclick", this.OnCustromFilterPreviousReceive);
        // this.nextLocateHandle.detachEvent("onclick", this.OnCustromFilterNextReceive);
        // this.lastLocateHandle.detachEvent("onclick", this.OnCustromFilterLastReceive);
        // if (this._type == "Grid") {
        //     if (this.checkHandle) {
        //         this.checkHandle.detachEvent("onclick", this.OnCustromFilterSelectReceive);
        //         this.uncheckHandle.detachEvent("onclick", this.OnCustromFilterUnSelectReceive);
        //     }
        // }

        $(this.setFilterHandle).unbind("click", this.OnBtnSetFilterClick);
        $(this.setFilterHandle).unbind("mousedown", this.onBtnSetFilterRightClick);
        $(this.firstLocateHandle).unbind("click", this.OnCustromFilterFirstReceive);
        $(this.previousLocateHandle).unbind("click", this.OnCustromFilterPreviousReceive);
        $(this.nextLocateHandle).unbind("click", this.OnCustromFilterNextReceive);
        $(this.lastLocateHandle).unbind("click", this.OnCustromFilterLastReceive);
        if (this._type == "Grid") {
            if (this.checkHandle) {
                $(this.checkHandle).unbind("click", this.OnCustromFilterSelectReceive);
                $(this.uncheckHandle).unbind("click", this.OnCustromFilterUnSelectReceive);
            }
        }
    }
} //end

//取得对象实例
GridCustomFilterToolbarManager.GetInstance = function (toolBar, owner, type) {
    return new GridCustomFilterToolbarManager(toolBar, owner, type);
} //end 客户化筛选工具条管理类

//发起AJAX
function ProcessRequest(xmlhttp, url, reqReadyFunction) {
    if (url.length > 2000) {
        alert(Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_ReferenceUrlOverLength);
        try {
            this._textbox.focus();
            this._textbox.select();
        } catch (e) { }
        return;
        /* 由于修改为Postback需要修改PDHelper等，影响面较大，无法估量风险，暂时处理为屏蔽操作
        *  下一版本可以放开此处理逻辑，并修改PDHelper的处理，使PostBack也可以处理校验逻辑
        */
        var baseUrl = window.location.href;
        var pUrl = GetPostUrl(baseUrl, url);
        xmlhttp.open("POST", baseUrl, false);
        xmlhttp.onreadystatechange = reqReadyFunction;
        xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xmlhttp.send(pUrl);
    } else {
        xmlhttp.open("GET", url, false);
        xmlhttp.onreadystatechange = reqReadyFunction;
        xmlhttp.send("");
    }
}

function GetPostUrl(baseUrl, url) {
    var bList = GetUrlAttributeList(baseUrl);
    var pList = GetUrlAttributeList(url);
    for (var i = 0; i < bList.length; i++) {
        for (var j = 0; j < pList.length; j++) {
            if (bList[i].key == pList[j].key) {
                pList[j].del = true;
                break;
            }
        }
    }
    var pUrl = "";
    for (var k = 0; k < pList.length; k++) {
        if (!pList[k].del) {
            if (pUrl != "")
                pUrl += "&";
            pUrl += pList[k].key + "=" + pList[k].value;
        }
    }
    return pUrl;
}
function GetUrlAttributeList(url) {
    var list = [];
    var ps = url.split("?");
    var p;
    if (ps.length == 2)
        p = ps[1];
    if (!p)
        return list;
    pl = p.split("&");
    for (var i = 0; i < pl.length; i++) {
        list[i] = new Object();
        list[i].key = pl[i].split("=")[0];
        list[i].value = pl[i].substring(pl[i].split("=")[0].length + 1);
    }
    return list;
}

function GetXmlHttpRequest() {
    if (document.all)
        return new ActiveXObject("Msxml2.XMLHTTP");
    else if (XMLHttpRequest)
        return new XMLHttpRequest();
}

function Print_CheckSaveConfirm() {
    var retValue = IsShowConfirmSaveDialog(theForm.__EVENTTARGET.value)
    if (retValue.Value) {
        var ret = ShowConfirmSaveModalDialog();
        if (ret == true) {
            var saveid = GetBtnSaveID().replace(/_/g, "$");
            __doPostBack(saveid, '');
        }
        return false;
    } else {
        return true;
    }
}


UF$UI$CacheManager = function () {
    this.Keys = {};
    this.Data = [];
    this.init();
    this.max = 5;
    this.usingLocalStorage = false;
    if (top.window.localStorage) {
        this.usingLocalStorage = true;
        this.max = 5;
        var datas = top.window.localStorage.getItem("UF$UI$Cache$Datas");
        if (datas) {
            this.deserialize(datas);
            if (!this.GCTimer) {
                var GCStr = "if(top.__UFClientCacheManager) { top.__UFClientCacheManager.GC4Timeout(); }";
                this.GCTimer = window.setTimeout(GCStr, 1000);
            }
        }
    }
    this.addingCounter = 0;
    this.timeoutSpan = 30 * 60 * 1000; //4 * 60 * 60 * 1000;//4Hours
    this.GCTimer;
}
UF$UI$CacheManager.prototype = {
    getFormatKey: function (key) {
        if (key === undefined || key == null) {
            return "";
        } else {
            var tmpKey = key + "&";
            tmpKey = tmpKey.replace(/&__sk=[^&]*&/g, "&");
            if (tmpKey.lastIndexOf("&") == tmpKey.length - 1) {
                return tmpKey.substr(0, tmpKey.length - 1);
            } else {
                return tmpKey;
            }
        }
    },
    add: function (key, value) {
        key = this.getFormatKey(key);
        var index = this.Keys[key];
        if (typeof (index) == "undefined" || index == null) {
            index = this.Data.length;
            this.Keys[key] = index;
            this.Data.push(this.buildCacheItem(key, value));
        } else {
            if (index == (this.Data.length - 1)) {
                this.Data[index] = this.buildCacheItem(key, value);
            } else {
                this.Data.push(this.buildCacheItem(key, value));
                for (var k in this.Keys) {
                    if (this.Keys[k] > index) {
                        this.Keys[k] = this.Keys[k] - 1;
                    }
                }
                this.Keys[key] = this.Data.length - 1;
            }
        }
        if (this.Data.length > this.max) {
            this.GC();
        }
        this.addingCounter++;
        if (this.addingCounter >= 3) {
            this.Save();
            this.addingCounter = 0;
        }
        this.tryStartGCProcess();
    },
    Remove: function (key) {
        key = this.getFormatKey(key);
        if (key != "") {
            var index = this.Keys[key];
            if (typeof (index) != "undefined" && index != null && index >= 0) {
                this.Data.splice(index, 1);
                delete this.Keys[key];
                this.Save();
            }
        }
    },
    RemoveByQueryPara: function (paras) {
        if (paras && paras.length > 0 && this.Data.length > 0) {
            var recycleKeys = [];
            for (var i = 0; i < this.Data.length; i++) {
                recycleKeys.push(this.Data[i].Key);
            }
            var p;
            var str = "";
            for (var i = 0; i < paras.length; i++) {
                p = paras[i];
                str = p.key + "=" + p.value;
                if (p.key != "lnk") {
                    str = "&" + str;
                }
                for (var j = 0; j < recycleKeys.length; j++) {
                    if (recycleKeys[j].indexOf(str) < 0) {
                        recycleKeys.splice(j, 1);
                        j--;
                    }
                }
                if (recycleKeys.length == 0) {
                    return;
                }
            }
            if (recycleKeys.length > 0) {
                for (var i = 0; i < recycleKeys.length; i++) {
                    this.Remove(recycleKeys[i]);
                }
            }
        }
    },
    Save: function () {
        if (this.usingLocalStorage && this.Data.length > 0) {
            top.window.localStorage.setItem("UF$UI$Cache$Datas", this.serialize())
        }
    },
    GC: function () {
        var delCount = 0;
        while (this.Data.length > this.max) {
            var item = this.Data.shift();
            this.Keys[item.Key] = null;
            delete this.Keys[item.Key];
            delCount++;
        }
        if (delCount > 0) {
            for (var k in this.Keys) {
                this.Keys[k] = this.Keys[k] - delCount;
            }
        }
    },
    tryStartGCProcess: function () {
        if (!this.GCTimer) {
            var GCStr = "if(top.__UFClientCacheManager) { top.__UFClientCacheManager.GC4Timeout(); }";
            this.GCTimer = window.setTimeout(GCStr, this.timeoutSpan);
        }
    },
    GC4Timeout: function () {
        if (this.Data.length > 0) {
            var nowTime = new Date().getTime();
            var delCount = 0;
            while (this.Data.length > 0) {
                var item = this.Data[0];
                if ((nowTime - item.Time) > this.timeoutSpan) {
                    delete this.Keys[item.Key];
                    this.Data.shift();
                    delCount++;
                } else {
                    break;
                }
            }
            if (delCount > 0) {
                for (var k in this.Keys) {
                    this.Keys[k] = this.Keys[k] - delCount;
                }
            }
        }
        this.GCTimer = null;
        this.tryStartGCProcess();
    },
    buildCacheItem: function (key, value) {
        var item = {};
        item.Key = key;
        item.Value = value;
        item.Time = new Date().getTime();
        return item;
    },
    parseItemToString: function (item) {
        var str = "";
        str += "\"Key\":\"" + item.Key.replace(/\"/g, "\\\"") + "\"";
        str += ",\"Value\":\"" + item.Value.replace(/\"/g, "\\\"") + "\"";
        str += ",\"Time\":\"" + item.Time + "\"";
        return "{" + str + "}";
    },
    clear: function () {
        this.Keys = {};
        this.Data = [];
        if (this.usingLocalStorage) {
            top.window.localStorage.removeItem("UF$UI$Cache$Datas");
        }
        if (this.GCTimer) {
            window.clearTimeout(this.GCTimer);
            this.GCTimer = null;
        }
    },
    init: function () { },
    get: function (key) {
        key = this.getFormatKey(key);
        var index = this.Keys[key];
        if (typeof (index) == "undefined" || index == null) {
            return null;
        } else {
            if (this.Data.length <= index || this.Data[index] == null) {
                return null;
            }
            var item = this.Data[index];
            this.tryStartGCProcess();
            if (item.Key == key) {
                return item.Value;
            } else {
                //index和Key发生错乱，重新整理
                var val = null;
                this.Keys = {};
                var i = 0;
                while (i < this.Data.length) {
                    var tmpItem = this.Data[i];
                    if (typeof (this.Keys[tmpItem.Key]) == "undefined") {
                        this.Keys[tmpItem.Key] = i;
                        if (tmpItem.Key == key) {
                            val = tmpItem.Value;
                        }
                        i++;
                    } else {
                        this.Data.splice(i, 1);
                    }
                }
                return val;
            }
        }
    },
    serialize: function () {
        if (this.Data.length > 0) {
            var keyStr = "";
            for (var k in this.Keys) {
                if (keyStr.length > 0) {
                    keyStr += ",";
                }
                keyStr += "\"" + k.replace(/\"/g, "\\\"") + "\"";
                keyStr += ":" + this.Keys[k];
            }
            var dataStr = "";
            for (var i = 0; i < this.Data.length; i++) {
                if (i > 0) {
                    dataStr += ",";
                }
                dataStr += this.parseItemToString(this.Data[i]);
            }
            return "[{" + keyStr + "},[" + dataStr + "]]";
        } else {
            return "";
        }
    },
    deserialize: function (datas) {
        try {
            eval("var d=" + datas);
            if (d && d.length == 2) {
                this.Keys = d[0];
                this.Data = d[1];
            }
        } catch (e) {
            this.Keys = {};
            this.Data = [];
        }
    }
}
$Cache$RemoveByQueryPara = function (paras) {
    if (top.__UFClientCacheManager) {
        top.__UFClientCacheManager.RemoveByQueryPara(paras);
    }
};
$Cache$Remove = function (key) {
    if (top.__UFClientCacheManager) {
        top.__UFClientCacheManager.Remove(key);
    }
};
$Cache = function (key, value) {
    if (top.__UFClientCacheManager == null)
        top.__UFClientCacheManager = new UF$UI$CacheManager();
    if (key === undefined) {
        return null;
    } else {
        if (value === undefined) {
            return top.__UFClientCacheManager.get(key);
        } else {
            top.__UFClientCacheManager.add(key, value);
        }
    }
};
////////增加修复Float加减乘除的精度问题的Bug mahx 20150210
var FloatCalFun = new Object();
//科学计数法转数字
FloatCalFun.toNonExponential = function (param) {
    var strParam = String(param)
    var flag = /e/.test(strParam)
    if (!flag) return param

    // 指数符号 true: 正，false: 负
    var sysbol = true
    if (/e-/.test(strParam)) {
        sysbol = false
    }
    // 指数
    var index = Number(strParam.match(/\d+$/)[0])
    // 基数
    var basis = strParam.match(/^[\d\.]+/)[0].replace(/\./, '')

    if (sysbol) {
        return basis.padEnd(index + 1, 0)
    } else {
        return basis.padStart(index + basis.length, 0).replace(/^0/, '0.')
    }
}
//浮点数乘除法
FloatCalFun.muldivfloat = function (num0, num1, bzstr) {
    var ln0 = this.getws(num0),//第一个值的的小数位数
        ln1 = this.getws(num1),//第二个值的的小数位数
        lnz = Math.max(ln0, ln1),//取得小数位数中的最大数
        lncz,//小数位数的统计值
        num0str,//第一个值数字转字符
        num1str,//第二个值数字转字符
        resultz,//计算结果
        lnqh;//除法后结果存储小数

    if (lnz === 0) {//如果数字原本就是整形，直接执行计算
        if (bzstr === "*") {
            resultz = Number(num0) * Number(num1);
        } else {
            resultz = Number(num0) / Number(num1);
        }
        return resultz;
    }

    num0str = this.clearpoint(num0, ".");
    num1str = this.clearpoint(num1, ".");
    //根据传入的符号来判断是做乘法还是除法运算
    if (bzstr === "*") {
        lncz = ln0 + ln1;//小数位数的总数
        resultz = this.addwsfront((Number(num0str) * Number(num1str)).toString(),
            lncz);
        resultz = this.toNonExponential(resultz)

        //对乘法运算后的结果执行位数补全
        return Number(resultz.slice(0, -lncz) + "." + resultz.slice(-lncz));
    } else {
        lncz = ln0 - ln1;//小数位数的差数
        resultz = Number(num0str) / Number(num1str);
        if (lncz === 0) {//如果除数，被除除数小数位相同，即直接返回计算值
            return resultz;
        }
        lnqh = this.getws(resultz);//除法计算后可能的小数位数
        resultz = this.clearpoint(resultz, ".");//除法运算结果去小数位数
        lncz = lncz + lnqh;//最后应该保留的小数位数
        if (lncz > 0) {//如果要保留的小数位数不够
            resultz = this.addwsfront(resultz, lncz);//对计算的结果前补0
            return Number(resultz.slice(0, -lncz) + "." + resultz.slice(-lncz));
        } else {//如果要保留的小数位数小于0
            lncz = Math.abs(lncz);
            resultz = this.addwsback(resultz, lncz);//对计算的结果后补0
            console.log(lncz, resultz);
            return Number(resultz);
        }

    }


}
//后补0补够位数
FloatCalFun.addwsback = function (str, len) {
    for (var i = 0; i < len; i++) {
        str = str + "0";
    }
    return str;
}
//前置0补够位数
FloatCalFun.addwsfront = function (str, len) {
    var getStr = '',
        saveStr = '',
        strLen = 0,//存储当前字符串的长度
        addLen = 0,//应该补位的个数
        returnStr = '';
    //如果传进去的值是负值，那就要先存储符号
    if (str.indexOf('-') != -1) {
        getStr = str.replace('-', '');
        saveStr = '-';
    } else {
        getStr = str;
    }
    strLen = getStr.length;
    addLen = len - strLen;
    if (addLen <= 0) {
        returnStr = str;
    } else {
        for (var i = 0; i < addLen; i++) {
            getStr = "0" + getStr;
        }
        returnStr = saveStr + getStr;
    }
    return returnStr;
}
//取得小数位数
FloatCalFun.getws = function (num) {
    var ln = 0;
    try {
        ln = num.toString().split(".")[1].length;//获取小数位数
    } catch (e) {
        ln = 0;
    }
    return ln;
}
//补全0
FloatCalFun.getbq = function (str, len) {
    for (var i = 0; i < len; i++) {
        str = str + "0";
    }
    return str;
}
//浮点型数去小数点转字符串
FloatCalFun.clearpoint = function (num, str) {
    var getStr = num.toString();
    if (getStr.indexOf(str) != -1) {
        return getStr.replace(str, "");
    }
    return getStr;
}



//获取参数精度，如果为整数则精度为0
FloatCalFun._getPrecision = function (arg) {
    if (arg.toString().indexOf(".") == -1) {
        return 0;
    } else {
        return arg.toString().split(".")[1].length;
    }

}
//获取小数的整数形式
FloatCalFun._getIntFromFloat = function (arg) {
    if (arg.toString().indexOf(".") == -1) {
        return arg;
    } else {
        return Number(arg.toString().replace(".", ""));
    }
}
//乘法
FloatCalFun.floatMulti = function (arg1, arg2) {
    //var precision1 = this._getPrecision(arg1);
    //var precision2 = this._getPrecision(arg2);
    //var tempPrecision = 0;

    //tempPrecision += precision1;
    //tempPrecision += precision2;
    //var int1 = this._getIntFromFloat(arg1);
    //var int2 = this._getIntFromFloat(arg2);
    //return (int1 * int2) * Math.pow(10, -tempPrecision);
    return this.muldivfloat(arg1, arg2, "*");
}
//加法
FloatCalFun.floatAdd = function (arg1, arg2) {
    var precision1 = this._getPrecision(arg1);
    var precision2 = this._getPrecision(arg2);
    var p = 9//精度控制，lianglli2020/4/30w为修复表格合计计算超出js计算边界而修改。小数位控制在9位数之内。目前程序最大精度也为9位
    var x = arg1, y = arg2;
    if (precision1 > p) {
        x = arg1.toFixed(p);
        precision1 = p
    }
    if (precision2 > p) {
        y = arg2.toFixed(p);
        precision2 = p
    }
    var temp = Math.pow(10, Math.max(precision1, precision2));
    var temp = Math.pow(10, Math.max(precision1, precision2));
    return (this.floatMulti(x, temp) + this.floatMulti(y, temp)) / temp;
}
//减法
//arg1 被减数
//arg2 减数
FloatCalFun.floatSubtract = function (arg1, arg2) {
    var precision1 = this._getPrecision(arg1);
    var precision2 = this._getPrecision(arg2);
    var p = 9//精度控制，lianglli2020/4/30w为修复表格合计计算超出js计算边界而修改。小数位控制在9位数之内。目前程序最大精度也为9位
    var x = arg1, y = arg2;
    if (precision1 > p) {
        x = arg1.toFixed(p);
        precision1 = p
    }
    if (precision2 > p) {
        y = arg2.toFixed(p);
        precision2 = p
    }
    var temp = Math.pow(10, Math.max(precision1, precision2));
    var temp = Math.pow(10, Math.max(precision1, precision2));
    return (this.floatMulti(x, temp) - this.floatMulti(y, temp)) / temp;
}
////除法
//arg1 被除数
//arg2 除数
FloatCalFun.floatDiv = function (arg1, arg2) {
    //var precision1 = this._getPrecision(arg1);
    //var precision2 = this._getPrecision(arg2);
    //var int1 = this._getIntFromFloat(arg1);
    //var int2 = this._getIntFromFloat(arg2);
    //var result = (int1 / int2) * Math.pow(10, precision2 - precision1);
    //return result;

    return this.muldivfloat(arg1, arg2, "/");
}

/*************************给老UI控件增加一个获取自定义属性的方法（仅限替换业务开发$find("id").get_element().自定义属性，而其他前台js还是该怎么写怎么写，不能调用此方法）*****************************/

function getAttribute(id, attr) {
    var findItem = $find(id);
    if (findItem) {
        return findItem.get_element().getAttribute(attr);
    }
    else {
        var getItem = $get(id);
        if (getItem) {
            return getItem.getAttribute(attr);
        }
    }
}
// 参照查询条件添加文本域多选合并查找
$(function () {
    $("#u_S_S1_btnMultiSelect").on("click", function () {
        var that = this
        if (this.parentElement.childElementCount > 1) {
            this.parentElement.removeChild(this.parentElement.children[1])
            return
        }
        var userName = $('#UserName')[0].value
        // 如果存在先去掉，再添加
        var allSelectText = eval($("#StringItems")[0].value); // 需要跟localstorage中匹配合并缓存方案
        var saveSelectedSearcherValue = JSON.parse(window.localStorage.getItem(userName + "_SelectedSearcherValue"))
        if (saveSelectedSearcherValue && saveSelectedSearcherValue.length > 0) {
            for (var i = 0; i <= allSelectText.length - 1; i++) {
                for (var j = 0; j <= saveSelectedSearcherValue.length - 1; j++) {
                    if (allSelectText[i].key_name == saveSelectedSearcherValue[j].key_name) {
                        allSelectText[i].selected = saveSelectedSearcherValue[j].selected
                    }
                }
            }
        }
        var dom = '';
        for (var i = 0; i < allSelectText.length; i++) {
            if (allSelectText[i].selected) {
                dom += '<p><label><input type="checkbox" name="SelectedSearcher" value=' + JSON.stringify(allSelectText[i]) + ' checked />' + allSelectText[i].name + '</label></p>'
            } else {
                dom += '<p><label><input type="checkbox" name="SelectedSearcher" value=' + JSON.stringify(allSelectText[i]) + ' />' + allSelectText[i].name + '</label></p>'
            }
        }
        // 需要给确定取消添加点击事件
        var returnDom = '<div id="selectDropList" style="width:150px;position: absolute;left:150px;top:50px;z-index: 9999; background-color:#FFFFFF"><div class="select-list" style="padding:10px 10px 0 10px">' + dom + '</div><div style="display:flex;justify-content: space-around;"><span id="SelectedSearcherCancel">取消</span><span id="SelectedSearcherConfirm">确定</span></div></div>'
        $(this).parent().append($(returnDom))
        var SelectedSearcherValue = []
        $("#SelectedSearcherConfirm").on("click", function () {
            $("input[name='SelectedSearcher']").each(function () {
                var selectData = JSON.parse($(this)[0].value)
                if ($(this).prop("checked")) {
                    selectData.selected = true
                    SelectedSearcherValue.push(selectData)
                } else {
                    selectData.selected = false
                    SelectedSearcherValue.push(selectData)
                }
            });
            $("#StringItems").val(JSON.stringify(SelectedSearcherValue));
            // console.log(JSON.stringify(SelectedSearcherValue))
            window.localStorage.setItem(userName + "_SelectedSearcherValue", JSON.stringify(SelectedSearcherValue))
            that.parentElement.removeChild(that.parentElement.children[1])
        })
        $("#SelectedSearcherCancel").on("click", function () {
            that.parentElement.removeChild(that.parentElement.children[1])
        })
    })
})
// window.FloatCalFun=FloatCalFun;

//perf: 将函数对象成员用prototype替代
function CheckValid(inputObject)
{
  this.defaultPrec=5;
  this.defaultMask="";
  this.defaultMin=0;
  this.defaultMax=9999999999;
  this.defaultLen=10;
  //perf: 屏蔽循环引用
  //this.mainObject=inputObject;
  this.mainObjectID = inputObject.id;
  //perf:增加的成员变量
  this.m_pressedKey;
  this.theValue;
  this.spliter;
  this.isInitialized;  //use undefined as false
  
  if(typeof(inputObject.DataType)!="undefined")
  {
   this.dataType =inputObject.DataType;		// 数据类型
  }
  if(typeof(inputObject.dataType)!="undefined")
  {
   this.dataType =inputObject.dataType;		// 数据类型
  }
  
  if(typeof(inputObject.DataLength)!="undefined")
  {
   this.dataLeng =inputObject.DataLength;		// 数据长度 
  }
  else if(typeof(inputObject.dataLeng)!="undefined")
  {
  this.dataLeng =inputObject.dataLeng;		// 数据长度 
  }
  else
  {
   this.dataLeng =this.defaultLen;		// 数据长度 
  }
  
  if(typeof(inputObject.dataPrec)!="undefined")
  {  
  this.dataPrec =inputObject.dataPrec;		// 数据精度
  }
  else
  {
   this.dataPrec =this.defaultPrec;		// 数据精度
  }
  if(typeof(inputObject.maskChar)!="undefined")
  {
  this.maskChar =inputObject.maskChar;	    // 屏蔽字符
  }
  else
  {
  this.maskChar =this.defaultMask;	    // 屏蔽字符
  }
  
  //perf
  //this.ExpdChar =inputObject.ExpdChar;		// 扩展字符
  this.expdChar =inputObject.ExpdChar;		// 扩展字符
  if(typeof(inputObject.maskChar)!="undefined")
  {
  this.minValue =inputObject.minValue;		// 最小值
  }
  else
  {
  this.minValue =this.defaultMin;		// 最小值
  }
  if(typeof(inputObject.maxValue)!="undefined")
  {
  this.maxValue =inputObject.maxValue;		// 最大值
  }
  else
  {
  this.maxValue =this.defaultMax;		// 最大值
  }
  this.allowEmpt=inputObject.allowEmpt;		// 是否可空
  inputObject.KeyPressSender=this;
  //perf: 替换closure函数
  //inputObject.onkeypress=function(){ this.KeyPressSender.onKeyPressed()};
  inputObject.onkeypress=inputObjectOnKeyPress;
  
  //perf: unused local variable
  //var expdChar="";
}

//perf: 替换inputObject.onkeypress的closure响应函数
function inputObjectOnKeyPress()
{ 
    this.KeyPressSender.onKeyPressed();
}

//perf: add initialize function
//将所有需要运行时初始化的代码放在这里
CheckValid.prototype.initialize=function()
{
    if(this.isInitialized)
        return;
    
    this.isInitialized = true;
    
    //初始化mask和expdChar
	switch(this.dataType)
	{
		case "string":	// 字母字符型
		case "0":	// 字母字符型
		    this.expdChar="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
		    this.spliter = "";
			break;
		case "DATE":// 日期型
		    this.expdChar = "0123456789-";
		    this.spliter = "-";
		    this.dataLeng = 10;
			break;
		case "DATETIME":	   // 时间型
		    this.expdChar = "0123456789:";
		    this.spliter = ":";
		    this.dataLeng = 8;
			break;
	    case "FLOAT":		// 浮点型
	    case "1":		// 浮点型
	    case "INT":		// 整型
	    case "2":		// 整型
		default:
		    this.spliter = "";
			break;
	}
	
	//初始化其它代码
	
	return;
};

//perf: 将函数对象成员用prototype替代 -- begin

CheckValid.prototype.onKeyPressed=function()
{
    //perf   	
    var pressedKey = event.keyCode;		
    var hotFocus = event.srcElement;	
	if(!pressedKey)
	{
		return;
	}
	
	//perf: 调用初始化函数
	this.initialize();
	
	//perf
	//m_pressedKey = pressedKey;
	//theValue = hotFocus.value;	
	this.m_pressedKey = pressedKey;
	this.theValue = hotFocus.value;	
	switch(this.dataType)
	{
	    case "FLOAT":		// 浮点型
	    case "1":		// 浮点型
			 if(this.checkDoubleFocus(pressedKey)==false)
			 {
	           event.returnValue=false;
			 }
			 return;

	    case "INT":		// 整型
	    case "2":		// 整型
	         if(this.checkIntegerFocus(pressedKey)==false)
	         {
	           event.returnValue=false;
	         }
			return;
		case "string":	// 字母字符型
		case "0":	// 字母字符型
		     if(this.checkStringFocus(pressedKey)==false)
		     {
		       event.returnValue=false;
		     }
			return;
		case "DATE":// 日期型
		     if(this.checkDateFocus(pressedKey)==false)
	         {
	           event.returnValue=false;
	         }
			return;
		case "DATETIME":	   // 时间型
		    //pref
			//return checkTimeFocus(pressedKey);
		    if(this.checkTimeFocus(pressedKey)==false)
	        {
	           event.returnValue=false;
	        }
			return;
//		case iStringFlag:		// 字符型
//			return checkStringFocus(pressedKey);
//		case iNumberStringFlag:	// 数字字符型
//			return checkNumberStringFocus(pressedKey);
//		case iEmailFlag:		// 邮件字符型		
//			return checkEmailFocus(pressedKey);
		
	}
	return true;
};

CheckValid.prototype.checkIntegerFocus=function(pressedKey)
{
	var pressedChar = getPressedChar(pressedKey);
	//perf
	//if(checkLength(theValue, this.dataLength - 1).length != 0)	// 长度
	if(checkLength(this.theValue, this.dataLeng - 1).length != 0)	// 长度
	{
		return false;
	}
	if(this.maskChar)
	{
		if(this.maskChar.indexOf(pressedChar) >= 0)	// 屏蔽字符
		{
			return false;
		}
	}
	
	if((pressedChar >= '0' && pressedChar <= '9') || pressedChar == '-' || pressedChar == '+')
	{
		var newValue = getComplexValue(pressedKey);
		// 判断越界
		if(parseFloat(newValue) < parseFloat(this.minValue) || parseFloat(newValue) > parseFloat(this.maxValue))
		{
			return false;
		} 
		
		/* perf
		var subIndex = newValue.indexOf("-");
		var plusIndex = newValue.indexOf("+");
		if(subIndex > 0)
		{
			return false;
		}
		if(plusIndex > 0)
		{
			return false;
		}
		*/
		if( (newValue.indexOf("-") > 0) || (newValue.indexOf("+") > 0))
		{
			return false;
		}
		
		return true;
	}
	
	return false;
};

// 字符型，检查字符串的长度、屏蔽字符、扩展字符、可显示的字母
CheckValid.prototype.checkStringFocus=function(pressedKey)
{
    var pressedChar = getPressedChar(pressedKey);
    //perf
    //var expdChar="";
	//expdChar += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	
	//perf
	//if(theValue == undefined)
	if(this.theValue == undefined)
	{
	    return false;
	}
	//perf
	//if(checkLength(theValue, this.dataLeng - 1).length != 0)	// 长度
	if(checkLength(this.theValue, this.dataLeng - 1).length != 0)	// 长度
	{
		return false;
	}
	if(this.maskChar.indexOf(pressedChar) >= 0)	// 屏蔽字符
	{
		return false;
	}
	
	//perf
	//if(expdChar.indexOf(pressedChar) >= 0)	// 扩展字符
	if(this.expdChar.indexOf(pressedChar) >= 0)	// 扩展字符
	{
		return true;
	}
	return true;
};

//perf: add comment
// 数字字符型，检查字符串的长度、屏蔽字符、0到9的数字、减号、加号、小数点、最大值、最小值、数据精度
//function CheckValid.prototype.checkNumberStringFocus(pressedKey)
//{
//	var pressedChar = getPressedChar(pressedKey);
//	//perf
//	//if(checkLength(theValue, this.dataLeng - 1).length != 0)	// 长度
//	if(checkLength(this.theValue, this.dataLeng - 1).length != 0)	// 长度
//	{
//		return false;
//	}
//	if(this.maskChar.indexOf(pressedChar) >= 0)	// 屏蔽字符
//	{
//		return false;
//	}
//	
//	if((pressedChar >= '0' && pressedChar <= '9') || pressedChar == '-' || pressedChar == '+' || pressedChar == '.' )
//	{
//		var newValue = getComplexValue(pressedKey);
//		// 判断小数点个数
//		if(newValue.split(".").length > 2)
//		{
//			return false;
//		}
//		// 判断越界
//		if(parseFloat(newValue) < parseFloat(minValue) || parseFloat(newValue) > parseFloat(maxValue))
//		{
//			return false;
//		}
//		// 数据精度
//		var dotIndex = newValue.indexOf(".");
//		if(dotIndex > 0 && newValue.substring(dotIndex + 1).length > parseInt(dataPrec))
//		{
//			return false;
//		}
//		return true;
//	}
//	return false;
//}

//perf: 将函数对象成员用prototype替代 -- end


//perf: add comment
// 邮件字符型，检查字符串的长度、屏蔽字符、扩展字符、@的位置
//function checkEmailFocus(pressedKey)
//function CheckValid.prototype.checkEmailFocus(pressedKey)
//{
//    //perf
//	//maskChar += " "; 
//	this.maskChar += " "; 
//	
//	var pressedChar = getPressedChar(pressedKey);
//	var newValue = getComplexValue(pressedKey);
//	
//	log(pressedChar);
//	
//	//perf
//	//if(checkLength(theValue, dataLeng - 1).length != 0)	// 长度
//	if(checkLength(this.theValue, this.dataLeng - 1).length != 0)	// 长度
//	{
//		return false;
//	}

//    //perf
//	//if(maskChar.indexOf(pressedChar) >= 0)	// 屏蔽字符
//	if(this.maskChar.indexOf(pressedChar) >= 0)	// 屏蔽字符
//	{
//		return false;
//	}
//	
//	//perf
//	//if(expdChar.indexOf(pressedChar) >= 0)	// 扩展字符
//	if(this.expdChar.indexOf(pressedChar) >= 0)	// 扩展字符
//	{
//		return true;
//	}
//	
//	var atIndex = newValue.indexOf("@");
//	if(atIndex == 0)	// 检测@的位置
//	{
//		return false;
//	}
//	
//	if(newValue.indexOf(".") == 0)	// 检测@的位置
//	{
//		return false;
//	}
//	
//	if(newValue.indexOf("@", atIndex + 1) != -1)	// 不能有两个@
//	{
//		return false;
//	}
//	
//	if (newValue.indexOf("@.") >= 0 || newValue.indexOf(".@") >= 0)	// @和.不能相连
//	{
//		return false;
//	}
//	
//	return true;
//}

// 整型，检查字符串的长度、屏蔽字符、0到9的数字、减号、加号、最大值、最小值

// 浮点型，检查字符串的长度、屏蔽字符、0到9的数字、减号、加号、小数点、最大值、最小值、数据精度
CheckValid.prototype.checkDoubleFocus=function(pressedKey)
{

	var pressedChar = getPressedChar(pressedKey);
	
	//perf
	//if(checkLength(theValue, this.dataLeng - 1).length != 0)	// 长度
	if(checkLength(this.theValue, this.dataLeng - 1).length != 0)	// 长度
	{
		return false;
	}
	
	if(this.maskChar.indexOf(pressedChar) >= 0)	// 屏蔽字符
	{
		return false;
	}
	
	
	if((pressedChar >= '0' && pressedChar <= '9') || pressedChar == '-' || pressedChar == '+' || pressedChar == '.')
	{	
		var newValue = getComplexValue(pressedKey);
		
		// 判断小数点个数
		if(newValue.split(".").length > 2)
		{
			return false;
		}
		
		// 判断越界
		//var minValueTmp = (minValue < 1) ? 0 : minValue;
		var minValueTmp = this.minValue;
		if(parseFloat(newValue) < parseFloat(minValueTmp) || parseFloat(newValue) > parseFloat(this.maxValue))
		{
			return false;
		}
		
		// 数据精度
		var dotIndex = newValue.indexOf(".");
		if(dotIndex != -1 && newValue.substring(dotIndex + 1).length > parseInt(this.dataPrec))
		{
			return false;
		}
		
		return true;
	}	
	return false;
};

// 日期型，格式：2000-12-30，检查字符串的长度、屏蔽字符、0到9的数字、减号
CheckValid.prototype.checkDateFocus=function(pressedKey)
{
    //perf
	//var spliter = "-";
	var spliter = this.spliter;
	var iDaysPerMonth = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
	
	//perf
	//dataLeng = 10;
	
	//perf
	//var expdChar="";
	//expdChar += "0123456789" + spliter;
	
	//perf
	//if(checkLength(theValue, dataLeng - 1).length != 0)	// 长度
	if(checkLength(this.theValue, this.dataLeng - 1).length != 0)	// 长度
	{
		return false;
	}
	
	var pressedChar = getPressedChar(pressedKey);
	
	//perf
	//if(expdChar.indexOf(pressedChar) == -1)
	if(this.expdChar.indexOf(pressedChar) == -1)
	{
	    
		return false;
	}
	
	var year = 0;
	var month = 0;
	var day = 0;
	var newValue = getComplexValue(pressedKey);
	
	if(newValue.indexOf(spliter) == 0)
	{
		return false;
	}
	if(newValue.indexOf(spliter + spliter) != -1)
	{
		return false;
	}
	
	//perf
	var strDate = newValue.split(spliter);

	if(strDate.length == 1)
	{
		year  = strDate[0];
		if(parseFloat(year) == 0)
		{
			return false;
		}
	}
	else if(strDate.length == 2)
	{
		year  = strDate[0];
		month = strDate[1];
		
		if(month.length == 2 && (parseFloat(month) < 1 || parseFloat(month) > 12))
		{
			return false;
		}
	}
	else if(strDate.length == 3)
	{
		year  = strDate[0];
		month = strDate[1];
		day   = strDate[2];

		if(year % 400 == 0 || (year % 4 == 0 && year % 100 != 0))
		{
			iDaysPerMonth[1] = 29;
		}
		if(day.length == 2 && (parseFloat(day) < 1 || parseFloat(day) > iDaysPerMonth[month - 1]))
		{
			return false;
		}
	}
	else
	{
		return false;
	}	
	if(year.length > 4 && pressedChar != spliter)
	{
		return false;
	}
	if(month.length > 2 && pressedChar != spliter)
	{
		return false;
	}
	if(day.length > 2)
	{
		return false;
	}
	return true;
};

// 时间型，格式：21:40:10，检查字符串的长度、屏蔽字符、0到9的数字、冒号
//perf
//function checkTimeFocus(pressedKey)
CheckValid.prototype.checkTimeFocus=function(pressedKey)
{
    //perf
	//var spliter = ":";
	var spliter = this.spliter;
	
	//perf
//	dataLeng = 8;
//	var expdChar="";
//	expdChar += "0123456789" + spliter;
	
	//perf
	//if(checkLength(theValue, dataLeng - 1).length != 0)	// 长度
	if(checkLength(this.theValue, this.dataLeng - 1).length != 0)	// 长度
	{
		return false;
	}
	
	var pressedChar = getPressedChar(pressedKey);
	
	if(maskChar.indexOf(pressedChar) >= 0)	// 屏蔽字符
	{
		return false;
	}
	
	//perf
	//if(expdChar.indexOf(pressedChar) == -1)
	if(this.expdChar.indexOf(pressedChar) == -1)
	{
		return false;
	}
	
	var hour = 0;
	var minute = 0;
	var second = 0;
	var newValue = getComplexValue(pressedKey);
	
	if(newValue.indexOf(spliter) == 0)
	{
		return false;
	}
	
	if(newValue.indexOf(spliter + spliter) != -1)
	{
		return false;
	}
	
	var strTime = newValue.split(spliter);

	if(strTime.length == 1)
	{
		hour  = strTime[0];
		if(parseFloat(hour) < 0 || parseFloat(hour) > 23)
		{
			return false;
		}
	}
	else if(strTime.length == 2)
	{
		hour  	= strTime[0];
		minute 	= strTime[1];
		
		if(minute.length == 2 && (parseFloat(minute) < 0 || parseFloat(minute) > 59))
		{
			return false;
		}
	}
	else if(strTime.length == 3)
	{
		hour  	= strTime[0];
		minute 	= strTime[1];
		second 	= strTime[2];

		if(second.length == 2 && (parseFloat(second) < 0 || parseFloat(second) > 59))
		{
			return false;
		}
	}
	else
	{
		return false;
	}

	log("hour-->" + hour + ":" + minute + ":" + second + " " + strTime.length);
	
	if(hour.length > 2 && pressedChar != spliter)
	{
		return false;
	}
	if(minute.length > 2 && pressedChar != spliter)
	{
		return false;
	}
	if(second.length > 2)
	{
		return false;
	}
	
	return true;
};
// 字母字符型，检查字符串的长度、屏蔽字符、扩展字符、26个大小写字母

//perf: add comment
// 字母字符型，检查字符串的长度、屏蔽字符、扩展字符、26个大小写字母、是否可空
//function checkLetterStringBlur()
//{
//	var strTmp = "";
//	
//	var jsAlert = new JsAlert();
//	
//	expdChar += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
//	
//	if(allowEmpt == 0 && (trim(theValue).length == 0))
//	{
//		return true;
//	}
//	else if(allowEmpt == 1 && (trim(theValue).length == 0))	// 是否可空
//	{
//		jsAlert.addAlert("不能为空");
//	}
//	
//	strTmp = checkLength(theValue, dataLeng);
//	if(strTmp.length > 0)	// 长度
//	{
//		jsAlert.addAlert(strTmp);
//	}
//	
//	for(var i = 0; i < theValue.length; i++)
//	{
//		var theChar = theValue.charAt(i);
//		
//		if(maskChar.indexOf(theChar) != -1)	// 屏蔽字符
//		{
//			jsAlert.addAlert("输入了非法字符（" + theChar +  "）");
//			break;
//		}
//		if(expdChar.indexOf(theChar) == -1)	// 扩展字符
//		{
//			jsAlert.addAlert("输入了非法字符（" + theChar +  "）");
//			break;
//		}
//	}
//	
//	///jsAlert.showAlert();
//	if(jsAlert.isAlert())
//	{
//	    jsAlert.showAlert();
//	    return false;
//	}
//	else
//	{
//	    return true;
//	}
//	
//}

// 映射键盘键值和ASCII码
function getPressedChar(pressedKey)
{
	var pressedChar = 0;
	
	if(document.layers)
	{
		pressedChar = unescape("%" + (new Number(pressedKey)).toString(16));		
	}
	else if(document.all)
	{
	    if(pressedKey>57){
	        pressedKey = pressedKey -48;
	    }
		pressedChar = String.fromCharCode(pressedKey);				
	}	
	return pressedChar;
}

function checkLength(checkValue, theLength)
{
	var iSumLength = 0;
	
	if(checkValue == undefined)
	    return "";
	
	for(var i = 0; i < checkValue.length; i++)
	{
		var strTemp = checkValue.charCodeAt(i);

		if (strTemp >= 0 && strTemp <= 255)
		{
			iSumLength += 1;
		}
		else
		{
			iSumLength += 2;
		}
	}
	
	if(iSumLength > theLength)
	{
        return Sys.CultureInfo[getCultureName().toLowerCase()].Resources.Judage_StringOverLength.replace(/\$Length\$/g,theLength);
//		return "长度超长，应该是" + theLength + "个字母字符的长度";
	}
	
	return "";
}
// 得到文本框中新的值，存在问题，应该检测当前字符插入的位置
function getComplexValue(pressedKey)
{
	//zjx add this.
	return this.theValue + getPressedChar(pressedKey);
};
	var TriggerArray = new Array();
	var EvaluatorArray = new Array();
	
	function TriggerRegister(ClientId, Type, num){
		this.ClientId = ClientId;
		this.Type = Type;
		this.TargetNum = num;
		this.Target = new Array();
		this.Types = new Array();
		this.Actions = new Array();
	}
	
	function EvaluatorRegister(ClientId, Type, num, express){
		this.ClientId = ClientId;
		this.Type = Type;
		this.TargetNum = num;
		this.Expression = express;
		this.Target = new Array();
		this.Types = new Array();
	}
	
	function AddTriggerRegister(ClientId, Type, num, targets, targetTypes, targetActions)
	{
//	debugger;
		TriggerArray[TriggerArray.length] = new TriggerRegister(ClientId, Type, num);
		var eleControl = getRelationObject(ClientId, 'trigger');
		var beans = ParseString(targets, num);
		var types = ParseString(targetTypes, num);
		var actions = ParseString(targetActions, num);

		eleControl.Target = beans;
		eleControl.Types = types;
		eleControl.Actions = actions;
	} 
	
	function AddEvaluatorRegister(ClientId, Type, num, targets, targetTypes, express)
	{
		EvaluatorArray[EvaluatorArray.length] = new EvaluatorRegister(ClientId, Type, num, express);
		var eleControl = getRelationObject(ClientId, 'evaluator');
		var beans = ParseString(targets, num);
		var types = ParseString(targetTypes, num);

		eleControl.Target = beans;
		eleControl.Types = types;
	}
	
	function TriggerInteraction(clientId)
	{
		//debugger;
		var eleTrigger = getRelationObject(clientId, 'trigger');
		if (eleTrigger==null)
		{
		    return false;
		}
		var beans = eleTrigger.Target;
		var types = eleTrigger.Types;
		var actions = eleTrigger.Actions;
		var length  = beans.length;
		
		for(var i=0; i<length; i++)
		{
		    var element = document.getElementById(beans[i]);
		    if  (element==null)
		    {
		        continue;
		    }
		    var type = element.type;
            switch (actions[i])
            {
                default:
                break;
                case "Enable":
                SetDisable(element,false);
                break;
                case "Disable":
                SetDisable(element,true);
                break;
                case "ClearDefault":
                ClearDefault(element);
                break;
                case "Diseditable":
                SetReadOnly(element,true);
                break;
                case "Editable":
                SetReadOnly(element,false);
                break;
            }
		}
	}
function  SetDisable(element,disable)
{
    //debugger;
    element.disabled=disable;
    for(var i=0;i< element.children.length;i++)
    {
        var elem=element.children[i];
        if  ((elem.tagName=="INPUT")||(elem.tagName=="IMG"))
        {
            elem.disabled=disable;
        }
        else
        {
            SetDisable(elem,disable);
            
        }
    }

}

function  SetReadOnly(element,readOnly)
{
    //debugger;
    element.readOnly=readOnly;
    for(var i=0;i< element.children.length;i++)
    {
        var elem=element.children[i];
        if  ((elem.tagName=="INPUT")||(elem.tagName=="IMG"))
        {
            elem.readOnly=readOnly;
        }
        else
        {
            SetDisable(elem,readOnly);
            
        }
    }

}
	
function ToggleEditable(element)
{
    //debugger;
    for(var i=0;i< element.children.length;i++)
    {
        var elem=element.children[i];
        if  (elem.tagName=="INPUT") 
        {
            if  (elem.readOnly)
            {
                
                elem.readOnly=false;
            }
            else
            {
                elem.readOnly=true;

            }
        }
        else
        {
            ToggleEditable(elem);
            
        }
    }
    
}
function ClearDefault(element)
{
    //debugger;  
    for(var i=0;i< element.children.length;i++)
    {
        var elem=element.children[i];
        if  (elem.tagName=="INPUT") 
        {
            elem.value=elem.defaultValue;
        }
        else
        {
            ClearDefault(elem);
            
        }
    }
}

function ToggleEnable(element)
{
    //debugger;
    if  (element.disabled)
    {
            
       element.disabled=false;
    }
    else
    {
       element.disabled=true;

    }
    for(var i=0;i< element.children.length;i++)
    {
        var elem=element.children[i];
        if  ((elem.tagName=="INPUT")||(elem.tagName=="IMG"))
        {
            if  (elem.disabled)
            {
                
                elem.disabled=false;
            }
            else
            {
                elem.disabled=true;

            }
        }
        else
        {
            ToggleEnable(elem);
            
        }
    }
    
}

function onEvaluatorInteraction()
{
    var clientId=event.srcElement.id;
    var parentId=clientId.replace("_textbox","");
    var parentObj=document.getElementById(parentId);
    var calculator=parentObj.getAttribute("calculator");
	//EvaluatorInteraction(calculator);
	//add by lzhm ,触发多个控件的计算事件
        if(!calculator) return;
	var calculators = calculator.split(",");
	if(calculators.length == 0)
		return;
	for(var i=0;i<calculators.length;i++)
	{
		EvaluatorInteraction(calculators[i]);
	}
	//add end
}
function EvaluatorInteraction(clientId)
	{
		try
		{
			var eleEvaluator = getRelationObject(clientId, 'evaluator');
			var beans = eleEvaluator.Target;
			var types = eleEvaluator.Types;
			var express = eleEvaluator.Expression;
			var length = beans.length;
	        
			//var evaluator = document.getElementById(clientId+"_textbox");
			var evaluator = document.getElementById(clientId);
			var isNumber=false;
			if  (evaluator==null)
			{
			    evaluator = document.getElementById(clientId+"_textbox_curNum");
			    isNumber=true;
			}
			for(var i=0; i<length; i++)
			{
				//var el = document.getElementById(beans[i]);
				var obj=document.getElementById(beans[i]);
				var operator = '@'+beans[i]+'@'
				var value=getRealElement(obj);
                if(value.substring(0,1) === "-")    //如果是负数，加空格 防止出现 两个减号相连的情况，语法错误， "200 --200" add by lzhm 2007-11-20
                    value = " " + value;
				express = express.replace(operator, value);
			}
            evaluator.control.set_Value(eval(express));
			//evaluator.Value = eval(express);
			if (evaluator.onblur)
			{
			    numeralsAfter(evaluator);
			}
		}
		catch(e)
		{
		}
	}
	
	function getRealValue(decimalSeparator, negativeSign, val, ratio)
	{
		if(!(val==undefined||val==null))
		{
			val=val.toString();
		}
		else
		{
			val="0";
		}
    var pattern="[^\\d\\"+decimalSeparator+"\\"+negativeSign+"]";
    var regexPattern=new RegExp(pattern,"g");
    val=val.replace(regexPattern,"");
    return val;
  }
  
	function getRealElement(element)
	{
	    if  (element.tagName=="INPUT")
	    {
	        //element.select();
	        return getRealValue(".", "-", element.parentElement.control.get_Value());
	    }
        for(var i=0;i< element.children.length;i++)
        {
            var child=element.children[i];
            return getRealElement(child);                
        }
	    
	
	}
	function getRelationObject(clientId, type){
		var arg = null;
        //debugger;
		if(type=='trigger')
		{
			var length = TriggerArray.length;
			if(length==0)
				return arg;

			for(var i=0; i<length; i++){
				if(TriggerArray[i].ClientId==clientId){
					arg = TriggerArray[i];
					break;
				}
			}
		}
		else
		{
			var length = EvaluatorArray.length;
			if(length==0)
				return arg;

			for(var i=0; i<length; i++){
				if(EvaluatorArray[i].ClientId==clientId){
					arg = EvaluatorArray[i];
					break;
				}
			}
		}

		return arg;
	}
	
	function ParseString(Cstring, sizes){
		var param = Cstring;
		var temps = new Array(sizes);

		if(Cstring==null || sizes<=0)
			return null;

		for(var i=0; i<sizes-1; i++)
		{
			temps[i] = param.substr(0, param.indexOf(','));
			param = param.substr(param.indexOf(',')+1);
		}
		temps[sizes-1] = param.substr(0, param.indexOf(','));
		
		return temps
	}

;
//该文件为查询列表开发组专用
//该文件的CC路径为：\View\UBFCode2\U9.VOB.UBF\Portal\Scripts\

//修改记录：
//2008-05-04 栏目和排序Grid控件支持多选操作，by u9yinzx
//2008-11-12 条件控件中去掉IFrame功能

//added by yinzx 2007-10-09
//根据chkAllSortDefines是否选中，来决定是从表格中，还是从树中，来加入已选排序项

//2009-06-18 增加合计列、冻结列的功能

//2009-10-14 增加弹出“栏目树”选择窗口

//2009-10-15 计算列不允许做为排序项

//2009-11-16 check ”ColumnTree"中的结点之前，做笛卡尔冲突检测

//加入排序项
function GetSelectedSortDefines(treeID, fromGrid, toGrid, chkAllSortDefines, PTflag) {
	var chk = document.getElementById(chkAllSortDefines);
	if (chk) {
		var chk = eval(chkAllSortDefines).control;
		if (chk.get_Checked() == true) {
			//从Tree对Grid
			AddSortSelectedNodes(treeID, fromGrid, toGrid, PTflag);
		}
		else {
			//从Grid到Grid
			var grid = eval(toGrid).control;
			var gridFrom = eval(fromGrid).control;
			var colEntityFullName = gridFrom.GetColumnIndex("EntityFullName");
			//modified by u9yinzx 支持多选操作
			//for(var r=gridFrom.get_Rows()-1;r>=0;r--)
			//modified by lidba 修改添加顺序问题
			for (var r = 0; r < gridFrom.get_Rows(); r++) {
				if (gridFrom.RowChecked(gridFrom.D_Body.rows[r])) {
					gridFrom.set_CurrentRowIndex(r);

					var value = gridFrom.GetCellValue(gridFrom.get_CurrentRowIndex(), gridFrom.GetColumnIndex("Item"));
					var text = gridFrom.GetCellValue(gridFrom.get_CurrentRowIndex(), gridFrom.GetColumnIndex("FieldDisplayName"));
					var entityFullName = gridFrom.GetCellValue(gridFrom.get_CurrentRowIndex(), colEntityFullName);
					//added by yinzx 2007-12-21 ,（2009-10-15 对于自定义栏目，不能再加为排序项）
					//modified by zlj 2010-6-7 放开计算项添加到排序项
					//if(value==null || text==null || entityFullName==null || entityFullName.Value=="") continue;
					if (value == null || text == null || entityFullName == null) continue;

					value = value.Text.trim();
					text = text.Text.trim();

					if (!grid.ContainOf("Item", value)) {
						grid.AddNewRow();
						var pos = grid.get_Rows() - 1;
						grid.SelectRow(pos, false);//这句功能是控制打勾的
						grid.SetCellValue(pos, grid.GetColumnIndex("Item"), value);
						grid.SetCellValue(pos, grid.GetColumnIndex("FieldDisplayName"), text);
						grid.SetCellValue(pos, grid.GetColumnIndex("FieldTitle"), text);
					}
					else {
						//alert("There are no selected nodes!")
					};
				}
			}
		}
	}
}

//added by yinzx 2008-06-11
//从OWS.js文件中迁移过来，并做修改，能处理排序项中笛卡尔积的问题
function AddSortSelectedNodes(treeID, fromSortGrid, toGrid, PTflag) {
	var tree = document.getElementById(treeID);
	if (tree) {
		var grid = eval(toGrid).control;
		var tree = eval(treeID);
		var strDescartesTag;
		var treeItem;
		var gridItem;
		var gridFrom = eval(fromSortGrid).control;
		var colItem = gridFrom.GetColumnIndex("Item");
		var blnItemExistInSortDefineGrid = false; //标识是否在待选排序表格（即已选栏目）中存在
		var selectedNodes = new Array();
		var Query_SortDescartesConflictMessage;
		if (tree.AllNodes.length > 0) {
			Query_SortDescartesConflictMessage = tree.AllNodes[0].Attributes.Query_SortDescartesConflictMessage;
		}
		for (var i = 0; i < tree.AllNodes.length; i++) {
			if (!tree.AllNodes[i].Checked) continue;

			strDescartesTag = tree.AllNodes[i].Attributes.Query_DescartesTag;
			if (strDescartesTag && strDescartesTag != "") {
				//如果该节点有笛卡尔路径，则说明是一个集合下属性
				//需要在fromSortGrid中查询，是否该节点是否存在于与待选排序表格中（为已选栏目同步）
				//如果不存在，则会产生笛卡尔积现象，就不能加入到已选排序中
				blnItemExistInSortDefineGrid = false;
				treeItem = tree.AllNodes[i].Value; //树上的节点Item标识					
				for (var j = 0; j < gridFrom.get_Rows(); j++) {
					gridItem = gridFrom.GetCellValue(j, colItem).Text.trim(); //表格上的节点Item标识
					if (treeItem == gridItem) {
						blnItemExistInSortDefineGrid = true;
						break;
					}
				}
				if (blnItemExistInSortDefineGrid) {
					//存在于与待选排序表格中（为已选栏目同步），可以加入
					selectedNodes.push(tree.AllNodes[i]);
				}
				else {
					var errMsg = "[" + tree.AllNodes[i].Text + "]" + Query_SortDescartesConflictMessage;
					alert(errMsg);
				}
			}
			else {
				//如果没有笛卡尔路径，则直接加入到selectedNodes中
				selectedNodes.push(tree.AllNodes[i]);
			}
		}
		var text = "";
		var value = "";
		if (selectedNodes.Count != 0) {
			for (var i = 0; i < selectedNodes.length; i++) {
				text = selectedNodes[i].Text;
				value = selectedNodes[i].Value;
				if (!grid.ContainOf("Item", value) && value.lastIndexOf(PTflag) < 0) {
					text = GetParentNodeWithoutGroupName(selectedNodes[i]);
					grid.AddNewRow();
					grid.SelectRow(grid.get_Rows() - 1, true);
					grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("Item"), value);
					grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("FieldDisplayName"), text);
					grid.SetCellValue(grid.get_Rows() - 1, grid.GetColumnIndex("FieldTitle"), text);
				}
			} //end for
		}
		else {
			//alert("There are no selected nodes!")
		};
	}
}

//added by yinzx 2007-11-20
//将待选栏目树中选中的节点，加入到已选栏目表格，同时也加入到待选排序表格中。从而保持“已选栏目项”与“待选排序项”同步
function AddSelectedNodesToGrids(treeID, toGrid, toGridSort, PTflag) {
	var tree = document.getElementById(treeID);
	if (!tree) return;
	var tree = eval(treeID);
	//var selectedNodes=[]; 
	var selectedNodes = new Array();
	for (var i = 0; i < tree.AllNodes.length; i++) {
		if (tree.AllNodes[i].Checked) {
			selectedNodes.push(tree.AllNodes[i]);
		}
	}

	if (selectedNodes.Count == 0) return;

	var text = "";
	var value = "";
	var grid = eval(toGrid).control;
	if (!grid) return;
	/*
	var gridSort = eval(toGridSort).control;
	if(!gridSort) return;		
	*/
	var colIndexFieldDisplayName = grid.GetColumnIndex("FieldDisplayName");
	var colIndexItem = grid.GetColumnIndex("Item");
	var colIndexFieldTitle = grid.GetColumnIndex("FieldTitle");
	var colIndexDataType = grid.GetColumnIndex("DataType");
	var strDataType = "";

	var colDescartes = grid.GetColumnIndex("DescartesTag");
	var strDescartesTag = "";
	var strDescartesTag2 = "";
	var text2 = "";
	var isDescartesConflict = false;
	var Query_ColumnDescartesConflictMessage;
	if (tree.AllNodes.length > 0) {
		Query_ColumnDescartesConflictMessage = tree.AllNodes[0].Attributes.Query_ColumnDescartesConflictMessage;
	}
	for (var i = 0; i < selectedNodes.length; i++) {
		text = GetParentNodeWithoutGroupName(selectedNodes[i]);
		value = selectedNodes[i].Value;
		strDescartesTag = selectedNodes[i].Attributes.Query_DescartesTag;
		strDataType = selectedNodes[i].Attributes.DataType;

		if (strDescartesTag) strDescartesTag = strDescartesTag.trim();
		if (!grid.ContainOf("Item", value) && value.lastIndexOf(PTflag) < 0) {
			//判断是否有笛卡尔冲突
			isDescartesConflict = false;
			if (colDescartes > 0) {
				if (strDescartesTag && strDescartesTag != "") {
					for (var d = 0; d < grid.get_Rows(); d++) {
						strDescartesTag2 = grid.GetCellValue(d, colDescartes).Text.trim();
						if (strDescartesTag2 && strDescartesTag2 != "") {
							if (!(strDescartesTag == strDescartesTag2 || strDescartesTag.indexOf(strDescartesTag2 + ".") == 0 || strDescartesTag2.indexOf(strDescartesTag + ".") == 0)) {
								text2 = grid.GetCellValue(d, colIndexFieldDisplayName).Text.trim();
								isDescartesConflict = true;
								break;
							}
						}
					}
				}
			}

			if (isDescartesConflict) {
				var errMsg = "[" + text + "] & [" + text2 + "]" + Query_ColumnDescartesConflictMessage;
				alert(errMsg);
			}
			else {
				grid.AddNewRow();

				var pos = grid.get_Rows() - 1;
				grid.SelectRow(pos, false);//这句功能是控制打勾的
				grid.SetCellValue(pos, colIndexItem, value);
				grid.SetCellValue(pos, colIndexFieldDisplayName, text);
				grid.SetCellValue(pos, colIndexFieldTitle, text);
				if (colIndexDataType != "-1") grid.SetCellValue(pos, colIndexDataType, strDataType);

				if (colDescartes > 0) grid.SetCellValue(pos, colDescartes, strDescartesTag);
				/*
				if(!gridSort.ContainOf("Item",value)&&value.lastIndexOf(PTflag)<0)
				{
					gridSort.AddNewRow();
					var pos = gridSort.get_Rows()-1;
					gridSort.SelectRow(pos,false);//这句功能是控制打勾的
					gridSort.SetCellValue(pos, gridSort.GetColumnIndex("Item"),value);
					gridSort.SetCellValue(pos, gridSort.GetColumnIndex("FieldDisplayName"),text);
					gridSort.SetCellValue(pos, gridSort.GetColumnIndex("FieldTitle"),text);

					//added by yinzx 2007-11-22 设置新加的行状态为Unc，这样服务器端的代码中，就不会出现UIView中有两条同样的栏目了！
					gridSort.SetRowStatus(pos,"Unc");
				}
				*/
			}
		}
	}
}

function GetParentNodeWithoutGroupName(node) {
	//判断是否为BE分组节点
	if (node.Attributes["Query_BEGroup"] == "1") {
		if (node.Parent == null) {
			return "";
		}
		else {
			return GetParentNodeWithoutGroupName(node.Parent);
		}
	}
	else {
		if (node.Parent == null) {
			return node.Text;
		}
		else {
			var parentText = GetParentNodeWithoutGroupName(node.Parent);
			if (parentText == "") {
				return node.Text;
			}
			else {
				return parentText + "." + node.Text;
			}
		}
	}
}

//added by yinzx 2007-11-20
//2009-10-15 对于排序项，允许全部删除；而对于栏目项，不能全部删除，必须保留一个
//删除已选栏目项的同时，删除待选排序项，从而保持“已选栏目项”与“待选排序项”同步
function DeleteRowFromGrids(fromGrid1, fromGrid2) {
	//debugger;
	var hasGrid2 = document.getElementById(fromGrid2);
	var grid2;
	if (hasGrid2) grid2 = eval(fromGrid2).control;
	var minLeftCount = 1;
	if (fromGrid2.indexOf("GridSortDefine") == -1) minLeftCount = 0;

	var grid = eval(fromGrid1).control;
	if (grid.get_Rows() <= minLeftCount) return;
	if (grid.get_element().cusAttr("SelectModel") != "mulitline") {
		//用于多选情况下的删除
		DeleteRowsFromGrids(grid, grid2, hasGrid2);
	}
	else {
		for (var r = grid.get_Rows() - 1; r >= 0; r--) {
			if (grid.RowChecked(grid.D_Body.rows[r]) && grid.m_rows > minLeftCount) {
				grid.set_CurrentRowIndex(r);
				DeleteRowsFromGrids(grid, grid2, hasGrid2);
			}
		}
	}
}

function DeleteSelectedRows(grid) {
	var hasGrid = document.getElementById(grid);
	var gridObj;
	if (hasGrid) gridObj = eval(grid).control;
	for (var r = gridObj.get_Rows() - 1; r >= 0; r--) {
		if (gridObj.RowChecked(gridObj.D_Body.rows[r]) && gridObj.m_rows > 0) {
			gridObj.set_CurrentRowIndex(r);
			gridObj.DeleteRowAlways();
		}
	}
}

//重构 by yinzx 2008-05-04，用于多选情况下的删除
function DeleteRowsFromGrids(grid, grid2, hasGrid2) {
	var rowIndex = grid.get_CurrentRowIndex();
	var columnIndex = grid.GetColumnIndex("IsFixed");
	var value = grid.GetCellValue(rowIndex, grid.GetColumnIndex("Item"));
	if (grid.GetCellValue(rowIndex, columnIndex) == null || grid.GetCellValue(rowIndex, columnIndex).Value != 'true') {
		grid.DeleteRowAlways();
		if (hasGrid2 == null) return; //下面的代码，应该是没用的，永远也走不到 2009-10-15（因为改了分页签加载的机制，所以fromGrid2永远取不到）

		var columnIndex2 = grid2.GetColumnIndex("Item");
		for (var i = 0; i < grid2.get_Rows(); i++) {
			var value2 = grid2.GetCellValue(i, columnIndex2);
			if (value.Value == value2.Value) {
				grid2.set_CurrentRowIndex(i);
				grid2.DeleteRowAlways();
				break;
			}
		}
	}
}

function QueryMovePreviousRow(gridID) {
	grid = eval(gridID).control;

	var currentRowIndex = grid.get_CurrentRowIndex();
	if (currentRowIndex == 0) return;

	var columnIndex = grid.GetColumnIndex("IsFrozen");

	var currentRowIsFrozen = grid.GetCellValue(currentRowIndex, columnIndex);
	var previousRowIsFrozen = grid.GetCellValue(currentRowIndex - 1, columnIndex);

	if (currentRowIsFrozen.Value == "false" && previousRowIsFrozen.Value == "true") {
		grid.SetCellValue(currentRowIndex, columnIndex, "true");
	}

	grid.MovePreviousRow('Sequence')
}

function QueryMoveNextRow(gridID) {
	grid = eval(gridID).control;
	var rowCount = grid.get_Rows();
	var currentRowIndex = grid.get_CurrentRowIndex();
	if (currentRowIndex == rowCount - 1) return;

	var columnIndex = grid.GetColumnIndex("IsFrozen");

	var currentRowIsFrozen = grid.GetCellValue(currentRowIndex, columnIndex);
	var nextRowIsFrozen = grid.GetCellValue(currentRowIndex + 1, columnIndex);

	if (currentRowIsFrozen.Value == "true" && nextRowIsFrozen.Value == "false") {
		grid.SetCellValue(currentRowIndex, columnIndex, "false");
	}

	grid.MoveNextRow('Sequence')
}

function QueryMoveFirstRow(gridID) {
	grid = eval(gridID).control;

	var currentRowIndex = grid.get_CurrentRowIndex();
	if (currentRowIndex == 0) return;

	var columnIndex = grid.GetColumnIndex("IsFrozen");

	var currentRowIsFrozen = grid.GetCellValue(currentRowIndex, columnIndex);
	var topRowIsFrozen = grid.GetCellValue(0, columnIndex);

	if (currentRowIsFrozen.Value == "false" && topRowIsFrozen.Value == "true") {
		grid.SetCellValue(currentRowIndex, columnIndex, "true");
	}

	grid.MoveFirstRow('Sequence')
}

function QueryMoveLastRow(gridID) {
	grid = eval(gridID).control;
	var rowCount = grid.get_Rows();
	var currentRowIndex = grid.get_CurrentRowIndex();
	if (currentRowIndex == rowCount - 1) return;

	var columnIndex = grid.GetColumnIndex("IsFrozen");

	var currentRowIsFrozen = grid.GetCellValue(currentRowIndex, columnIndex);
	var lastIsFrozen = grid.GetCellValue(rowCount - 1, columnIndex);

	if (currentRowIsFrozen.Value == "true" && lastIsFrozen.Value == "false") {
		grid.SetCellValue(currentRowIndex, columnIndex, "false");
	}

	grid.MoveLastRow('Sequence')
}

function QueryOnCellDataChanged(gridID) {
	grid = eval(gridID).control;
	var rowCount = grid.get_Rows();
	var currentRowIndex = grid.get_CurrentRowIndex();
	var currentColumnIndex = grid.get_CurrentColumnIndex() + 1;

	var columnIsFrozen = grid.GetColumnIndex("IsFrozen");
	var columnIsSum = grid.GetColumnIndex("IsSum");
	var columnDataType = grid.GetColumnIndex("DataType");

	if (currentColumnIndex == columnIsSum) {
		var currentRowIsSum = grid.GetCellValue(currentRowIndex, columnIsSum).Value;
		var currentRowDataType = grid.GetCellValue(currentRowIndex, columnDataType).Value;

		if (currentRowIsSum == "true" && currentRowDataType != "System.Int64" && currentRowDataType != "System.Int32"
			&& currentRowDataType != "System.Int16" && currentRowDataType != "System.Decimal" && currentRowDataType != "System.Double") {
			grid.SetCellValue(currentRowIndex, columnIsSum, "false");
		}
	}
	else {
		var currentRowIsFrozen = grid.GetCellValue(currentRowIndex, columnIsFrozen).Value;
		if (currentRowIsFrozen == "true") {
			for (var r = 0; r < currentRowIndex; r++) {
				grid.set_CurrentRowIndex(r);
				grid.SetCellValue(r, columnIsFrozen, "true");
			}
		}
		else {
			for (var r = currentRowIndex + 1; r < rowCount; r++) {
				grid.set_CurrentRowIndex(r);
				if (grid.GetCellValue(r, columnIsFrozen).Value == "false") break;
				grid.SetCellValue(r, columnIsFrozen, "false", "false", "false");
			}
		}
		grid.set_CurrentRowIndex(currentRowIndex);
	}
}

function OnRowClicked4LineDisplayType(gridID) {
	grid = eval(gridID).control;
	var rowCount = grid.get_Rows();
	var currentRowIndex = grid.get_CurrentRowIndex();

	var columnLineDisplayType = grid.GetColumnIndex("LineDisplayType");
	var columnDataType = grid.GetColumnIndex("DataType");
	var colDescartes = grid.GetColumnIndex("DescartesTag");

	var currentRowDataType = grid.GetCellValue(currentRowIndex, columnDataType).Value;
	var currentDescartes = grid.GetCellValue(currentRowIndex, colDescartes).Value;

	var enumLineDisplayType = grid.GetColumnControlByColumnName("LineDisplayType").control;

	//0空 1串连接 2第一个 3合计 4最小 5最大 6平均

	enumLineDisplayType.DisplayAllItems();

	if (currentDescartes == null || currentDescartes == "") {
		//enumLineDisplayType.AddRemoveItem(true,"0,1,2,3,4,5,6");
		grid.SetCellEnabledByFieldId(currentRowIndex, "LineDisplayType", false);
	}
	else {
		grid.SetCellEnabledByFieldId(currentRowIndex, "LineDisplayType", true);
		enumLineDisplayType._allItem[0].Text = "";
		if (currentRowDataType == "System.String") {
			enumLineDisplayType.AddRemoveItem(true, "3,4,5,6");
		}
		else if (currentRowDataType == "System.Boolean") {
			enumLineDisplayType.AddRemoveItem(true, "1,3,4,5,6");
		}
		else if (currentRowDataType == "System.DateTime" || currentRowDataType == "System.Date") {
			enumLineDisplayType.AddRemoveItem(true, "1,3,6");
		}
		else if (currentRowDataType == "System.Int64" || currentRowDataType == "System.Int32" || currentRowDataType == "System.Int16" || currentRowDataType == "System.Decimal" || currentRowDataType == "Decimal" || currentRowDataType == "System.Single") {
			enumLineDisplayType.AddRemoveItem(true, "1");
		}
		else {
			//参照类型
			enumLineDisplayType.AddRemoveItem(true, "1,3,4,5,6");
		}
	}
	enumLineDisplayType.clear_Popup();
}

function BeforeCheckHandler(node) {
	var isFixed = node.Attributes["isFixed"];
	if (isFixed == 'true') {
		return false;
	}
}

//added by yinzx 2009-11-16
//check ”ColumnTree"中的结点之前，做笛卡尔冲突检测
function BeforeColumnTreeNodeCheck(node, flag) {
	if (!node) return false;
	var tree = node.TreeView;
	if (!tree) return false;

	var checkedNodeDescartesTag = node.Attributes.Query_DescartesTag;
	//如果当前结点没有笛卡尔路径，则退出
	if (!(checkedNodeDescartesTag && checkedNodeDescartesTag != "")) return true;

	var checkedNodeText = GetParentNodeWithoutGroupName(node);
	var checkedNodeValue = node.Value;

	var isDescartesConflict = false;
	var text = "";
	var value = "";
	var strDataType = "";
	var descartesTag = "";
	var errMsg = "";
	var Query_ColumnDescartesConflictMessage = "";
	var Query_CaseDescartesPath = "";
	var Query_ColumnDescartesConflictWith = "";
	if (tree.AllNodes.length > 0) {
		//提示消息，
		Query_ColumnDescartesConflictMessage = tree.AllNodes[0].Attributes.Query_ColumnDescartesConflictMessage;
		//当“已选栏目”中已经有一个行下的字段了，如果在界面中再选一个其他行下的字段，则弹出客户端脚本提示与哪个字段冲突
		Query_ColumnDescartesConflictWith = tree.AllNodes[0].Attributes.Query_CaseDescartesConflictWith;
		//当前方案的笛卡尔路径
		Query_CaseDescartesPath = tree.AllNodes[0].Attributes.Query_CaseDescartesPath;
	}

	//1、先判断是否已经当前方案的笛卡尔路径冲突
	if (Query_CaseDescartesPath && Query_CaseDescartesPath != "") {
		if (!(Query_CaseDescartesPath == checkedNodeDescartesTag || Query_CaseDescartesPath.indexOf(checkedNodeDescartesTag + ".") == 0 || checkedNodeDescartesTag.indexOf(Query_CaseDescartesPath + ".") == 0)) {
			errMsg = "[" + checkedNodeText + "]" + " & [" + Query_ColumnDescartesConflictWith + "]" + Query_ColumnDescartesConflictMessage;
			alert(errMsg);
			return false;
		}
	}

	//生成已选结点的笛卡尔路径集合
	var selectedNodes = new Array();
	for (var i = 0; i < tree.AllNodes.length; i++) {
		if (tree.AllNodes[i].Checked) {
			descartesTag = tree.AllNodes[i].Attributes.Query_DescartesTag;
			if (descartesTag && descartesTag != "") {
				selectedNodes.push(tree.AllNodes[i]);
			}
		}
	}
	if (selectedNodes.length == 0) return true;

	//2、判断 与 已选结点的笛卡尔路径集合 是否有笛卡尔冲突
	isDescartesConflict = false;
	for (var i = 0; i < selectedNodes.length; i++) {
		descartesTag = selectedNodes[i].Attributes.Query_DescartesTag;

		if (!(descartesTag == checkedNodeDescartesTag || descartesTag.indexOf(checkedNodeDescartesTag + ".") == 0 || checkedNodeDescartesTag.indexOf(descartesTag + ".") == 0)) {
			text = GetParentNodeWithoutGroupName(selectedNodes[i]);
			//value = selectedNodes[i].Value;
			//strDataType = selectedNodes[i].Attributes.DataType;					
			isDescartesConflict = true;
			break;
		}
	}

	if (isDescartesConflict) {
		errMsg = "[" + text + "] & [" + checkedNodeText + "]\r\n" + Query_ColumnDescartesConflictMessage;
		alert(errMsg);
		return false;
	}
	return true;
}


/**********************************************************************************************/
/* 列表增加功能列，单击打开对应记录的卡片界面 */
/**********************************************************************************************/
function Query$OpenDocMainForm(sender, args, targetColName, customeParams, displayURI) {//debugger;
	var grid = sender;
	var rowIndex = grid.get_CurrentRowIndex();
	//var colIndex=grid.get_CurrentColumnIndex();//get_CurrentColumnIndex比正常的-1，不能用这个API
	//var fieldName = grid.GetColumnFieldID(colIndex);
	var curColIndex = grid.GetColumnIndex(args.arg.ColField);
	var targetColIndex = grid.GetColumnIndex(targetColName);

	if (curColIndex != targetColIndex)
		return;




	//_ClientCallBackManager.Push("CallPDServerCallBack('u_M_p0_DataGrid1_ALL_GRIDDATA,u_M_p0_BtnApprove,u_M_p0_BtnSubmit,u_M_p0_BtnUndoApprove,u_M_p0_BtnFlow,u_M_p0_BtnDelete,',"+args.SrcColIndex+","+args.SrcRowIndex+",'',';',false,'u$M$p0$DataGrid1$ctl04', 'bee54c00-0055-44e0-ba1e-cd6b6868c527_TASKID_HIDDENFIELD',false)");
	//'bee54c00-0055-44e0-ba1e-cd6b6868c527_TASKID_HIDDENFIELD'
	//return;
	var idColIndex = grid.GetColumnIndex("MainID");
	if (idColIndex < 0) {
		idColIndex = grid.GetColumnIndex("ID");
		if (idColIndex < 0) {
			alert("没有ID列？？ID列索引为 " + idColIndex);
			return;
		}
	}

	var recordID = grid.GetCellValue(rowIndex, idColIndex).Value;//列表记录的主ID列的数据
	var winTitle = "";
	var url = Query$BuildDocCardFormURL(recordID, customeParams, winTitle, displayURI);
	var pageURL = AppendPopupUrl(url, winTitle);

	//var reg=/_/g;
	//debugger;
	// __doPostBack(grid.get_id().replace(reg,"$"),"");     
	//grid.DoFirePostBack();
	//_ClientCallBackManager.Push("CallPDServerCallBack('u_M_p0_DataGrid1_ALL_GRIDDATA,',"+args.SrcColIndex+","+args.SrcRowIndex+",'',';',false,'u$M$p0$ctl07', 'e3580584-4467-4ef2-9824-ee51241733f8_TASKID_HIDDENFIELD',false)");

	if (window.top.TabPanelManager) {
		window.top.TabPanelManager.addUrlTab("../" + pageURL, winTitle)
	}
	else {
		window.open(pageURL);//window.open(pageURL, winTitle, winFeatures);
	}
}

function Query$BuildDocCardFormURL(recordID, customeParams, title, displayURI) {
	//第一步
	var href = window.location.href;
	//var nameValues = url.split('&');
	var i = href.indexOf("ParentForm=");
	if (i < 0) {
		//说明是非标准UI交互的列表

		//需要启用customeParams        
		var index = customeParams.indexOf("ParentForm=");
		if (index < 0)
			return "";//说明customeParams也没有指定ParentForm，直接返回空串

		var customeParamsArray = customeParams.split('&');
		var newcustomeParams = "";
		for (j = 0, len = customeParamsArray.length; j < len; j++) {
			if (customeParamsArray[j].indexOf("ParentForm=") < 0) {
				newcustomeParams += customeParamsArray[j] + "&";
			}
			else {
				href += "&" + customeParamsArray[j];//将自定义的ParentForm名值对加入当前的href中
			}
		}
		customeParams = newcustomeParams.trim('&');//此时customeParams不再含有ParentForm名值对
	}

	i = href.indexOf("ParentForm=");
	if (i < 0) {
		return "";
	}

	var url_right = href.substring(i);

	//第二步
	var nameValue = "";
	if (url_right.indexOf("&") > 0)
		nameValue = url_right.substring(0, url_right.indexOf("&"));
	else
		nameValue = url_right;

	//第三步
	if (nameValue.indexOf('=') <= 0)
		return "";
	var nameValues = nameValue.split('=');
	var guid = nameValues[1];
	var url = "../ufsoft/simple.aspx?lnk=" + guid;
	if (displayURI != null && displayURI != "" && displayURI != undefined) {
		url = "../erp/display.aspx?lnk=" + displayURI;
	}

	//url += "&ShowType=NavigatePage";
	url += "&PDPageStatus=Browse";
	//url += "&PDPageID=" + recordID;
	url += "&ID=" + recordID;
	url += "&ShowType=NavigatePage";
	//url +="&ParentForm" + 

	if (customeParams != null && customeParams != "")
		url += "&" + customeParams;//自定义参数	

	var final_url = AppendPopupUrl(url, title);
	return final_url;
}
//http://gct/vm62/erp/display.aspx?lnk=SCM.INV.INV2030_10&sId=3017nid&bId=&ShowType=NavigatePage&PDPageStatus=Browse&ID=1001206275185489&ParentForm=bee54c00-0055-44e0-ba1e-cd6b6868c527&__fsk=__SK66069*__SK66069&__curOId=1001202263224223

//http://gct/vm62/erp/display.aspx?lnk=CBO.Base.Location.CountryList&sId=3000nid&bId=&ShowType=NavigatePage&ParentForm=15a530aa-db6f-4e69-93ad-ced0ff99ebd6&__fsk=__SK5520*__SK5520&__curOId=1001202263224223&ID=1000703050000009
//http://gct/vm62/erp/display.aspx?lnk=CBO.Base.Location.Country&sId=3000nid&bId=&ShowType=NavigatePage&PDPageStatus=Browse&PDPageID=1000703050000009&ID=1000703050000009&ParentForm=6e972ac2-852f-4df3-bd25-50096ed13ada&__fsk=__SK41366*__SK41366&__curOId=1001202263224223
//http://gct/vm62/erp/display.aspx?lnk=CBO.Base.Location.Country&sId=3000nid&__fsk=__SK54093*__SK54093&__curOId=1001202263224223&mId=1001101159162112

function U$Q$Log(info) {
	//$open();
	//$alert(info);

	var divQryLogBorad = $get("qryLogBorad");
	if (divQryLogBorad == null) {
		divQryLogBorad = document.createElement("div");
		divQryLogBorad.id = "qryLogBorad";
		document.body.appendChild(divQryLogBorad);
		//document.body.insertBefore(divQryLogBorad,document.body.children[0]);

		btnClr = document.createElement("input");
		btnClr.id = "btnQryLogBorad";
		btnClr.type = "button";
		btnClr.value = "Clear All";
		$(btnClr).bind("click", U$Q$ClearLog);
		document.body.appendChild(btnClr);
	}

	divQryLogBorad.innerHTML += info;
}
function U$Q$ClearLog() {
	$get("qryLogBorad").innerHTML = "";
}


;
/*
条件控件专用js
*/

function RdoClick(isBasic) {
    var filterHiddenField = document.getElementById(parentID + '_filterHiddenField');

    var rdoBasic = document.getElementById(parentID + '_rdoBasic');
    var rdoAdvance = document.getElementById(parentID + '_rdoAdvance');
    var basicFrame = window.document.getElementById(parentID + '_basicFrame');//在老IE下，此时parent就是弹出框自己，在新版本6.0下，parent就是单据了
    var advanceFrame = window.document.getElementById(parentID + '_advanceFrame');
    var imgOpen = document.getElementById(parentID + '_imgOpen');
    var imgConfig = document.getElementById(parentID + '_imgConfig');
    var imgOpenInput = document.getElementById(parentID + '_imgOpen_button');
    var imgConfigInput = document.getElementById(parentID + '_imgConfig_button');

    var basicFilter = document.getElementById(parentID + '_basicDiv');
    var advFilter = document.getElementById(parentID + '_advDiv');

    var lblQuickLocate = document.getElementById(parentID + '_lblQuickLocate');
    var txtQuickLocate = document.getElementById(parentID + '_txtQuickLocate');
    var btnQuickLocate = document.getElementById(parentID + '_btnQuickLocate');
    var cbQuickLocate = document.getElementById(parentID + '_cbQuickLocate');

    if (isBasic) {
        filterHiddenField.value = "basic";
        rdoBasic.checked = true;
        rdoBasic.focus();
        rdoAdvance.checked = false;
        if (imgOpen) imgOpen.style.display = "";
        if (imgOpenInput) imgOpenInput.style.display = "";
        if (imgConfigInput) imgConfigInput.style.display = "";
        if (imgConfig) imgConfig.style.display = "";
        if (basicFrame) basicFrame.style.display = "block";
        if (advanceFrame) advanceFrame.style.display = "none";
        if (basicFilter) basicFilter.style.display = "block";
        if (advFilter) advFilter.style.display = "none";

        if (lblQuickLocate) lblQuickLocate.style.display = "block";
        if (txtQuickLocate) txtQuickLocate.style.display = "block";
        if (btnQuickLocate) btnQuickLocate.style.display = "block";
        if (cbQuickLocate) cbQuickLocate.style.display = "none"; //取消该功能了
    }
    else {
        filterHiddenField.value = "adv";
        rdoAdvance.checked = true;
        rdoAdvance.focus();
        rdoBasic.checked = false;
        if (imgOpen) imgOpen.style.display = "none";
        if (imgOpenInput) imgOpenInput.style.display = "none";
        if (imgConfigInput) imgConfigInput.style.display = "none";
        if (imgConfig) imgConfig.style.display = "none";
        if (basicFrame) basicFrame.style.display = "none";
        if (advanceFrame) advanceFrame.style.display = "block";
        if (basicFilter) basicFilter.style.display = "none";
        if (advFilter) advFilter.style.display = "block";

        if (lblQuickLocate) lblQuickLocate.style.display = "none";
        if (txtQuickLocate) txtQuickLocate.style.display = "none";
        if (btnQuickLocate) btnQuickLocate.style.display = "none";
        if (cbQuickLocate) cbQuickLocate.style.display = "none";
    }
}
function QuickLocationClick(targetCtrlID) {
    if (window.event.keyCode == KeyCode.enter) {
        var btnQuickLocate = document.getElementById(targetCtrlID);
        //mahx20160803 mahx 兼容
        $Event(window.event).stopPropagation();
        $Event(window.event).preventDefault();
        btnQuickLocate.click();
    }
}
function BasicKeyDown() {
    switch (window.event.keyCode) {
        case KeyCode.enter:
        case KeyCode.tab:
            SetFocus(0);
    }
}

function BasicFocus() {
    var rdoBasic = document.getElementById(parentID + '_rdoBasic');
    var rdoAdvance = document.getElementById(parentID + '_rdoAdvance');

    if (rdoBasic.checked == false) {
        rdoAdvance.focus();
    }
}

function AdvKeyDown() {
    switch (window.event.keyCode) {
        case KeyCode.enter:
        case KeyCode.tab:
            SetFocus(1);
    }
}

function SetFocus(frameIndex) {
    var controls = new Array();
    var inputs = new Array();
    inputs = $F(document.frames[frameIndex]).getFrameDocument().getElementsByTagName("input"); //mahx20160803 修改frame的获取方式
    for (var i = 0, len = inputs.length; i < len; i++) {
        var input = inputs[i];

        //if(input.style.display!="none"&&input.type!="hidden"&& input.type!="button"  &&  (!(input.disabled)) &&(!input.readOnly))
        if (input.style.display != "none" && input.type != "hidden" && input.type != "button" && (!(input.disabled))) {
            if (input.type != "image") {
                controls.push(input);
            }
        }
    }
    if (controls.length > 0) {
        input = controls[0];
        input.focus();
    }
}

function FilterSubmit() {
    var basicFrame = document.frames[parentID + '_basicFrame'];
    var advFrame = document.frames[parentID + '_advanceFrame'];

    if (basicFrame && $F(basicFrame).getFrameDocument().forms[0]) {
        basicFrame.document.forms[0].submit();
    }
    if (advFrame && $F(advFrame).getFrameDocument().forms[0]) {
        advFrame.document.forms[0].submit();
    }
}

//这是Filter控件弹出条件树的函数
function ShowBasicFilterTree(url) {
    //var sFeatures="dialogHeight:365px;dialogWidth:410px;scroll:no;status:no;help:no;";
    //var sFeatures="dialogHeight:565px;dialogWidth:410px;scroll:no;status:no;help:no;";//查询条件树页面增加高度200
    //var sFeatures="dialogHeight:590px;dialogWidth:410px;scroll:no;status:no;help:no;";//查询条件树页面增加高度25
    var sFeatures = "dialogHeight:635px;dialogWidth:410px;scroll:no;status:no;help:no;"; //查询条件树页面增加高度25
    url += '&rad=' + Math.random();
    //===by zzq
    //var refresh=window.showModalDialog(url, "", sFeatures);
    zlayer.open({
        title: "",
        area: [410 + "px", 500 + "px"], //===by zzq添加高度
        argument: "",
        content: url,
        endHandle: function (refresh) {
            var rdoBasic = document.getElementById(parentID + '_rdoBasic');
            rdoBasic.focus();
            //刷新基体条件界面
            if (refresh) {
                //document.frames[parentID+'_basicFrame'].document.forms[0].submit();
                //document.frames[parentID+'_basicFrame'].document.location="BasicFilterItem.aspx";
                ////__doPostBack("u$M$639f9280954f4506b96f470ffba84ab3$TabControl1", "basicFilterTree");		
                doPostBackBasic()
            }
        }
    });

    //===by zzq存放到回调函数中
    //var rdoBasic=document.getElementById(parentID+'_rdoBasic');
    //rdoBasic.focus();
    ////刷新基体条件界面
    //if(refresh)
    //{
    //	//document.frames[parentID+'_basicFrame'].document.forms[0].submit();
    //	//document.frames[parentID+'_basicFrame'].document.location="BasicFilterItem.aspx";
    //	////__doPostBack("u$M$639f9280954f4506b96f470ffba84ab3$TabControl1", "basicFilterTree");		
    //	doPostBackBasic()
    //}
}

function ShowAdvancedFilterTree(url) {
    //var sFeatures="dialogHeight:365px;dialogWidth:410px;scroll:no;status:no;help:no;";
    //var sFeatures="dialogHeight:565px;dialogWidth:410px;scroll:no;status:no;help:no;";//查询条件树页面增加高度200
    var sFeatures = "dialogHeight:635px;dialogWidth:410px;scroll:no;status:no;help:no;";
    url += '&rad=' + Math.random();
    window.showModalDialog(url, "", sFeatures, function (refresh) {
        //刷新高级条件界面
        if (refresh) {
            doPostBackAdv();
        }
    });

}

function RefreshAdvFilterCtrl() {
    //document.location="AdvanceFilterItem.aspx";
    ////__doPostBack("u$M$639f9280954f4506b96f470ffba84ab3$TabControl1", "");
    doPostBackAdv();
}

function OnAdvDeleteRow() {
    /*
    if(document.readyState!='complete')
    {
    // window.setTimeout(function(){document.submit();},1500);
    return false;
    }
    else
    {
    window.setTimeout(function(){return true;},1500);
    return true;
    }
    */
}

function ShowFilterValue(url, ctrlID) {
    var sFeatures = "dialogHeight:455px;dialogWidth:693px;scroll:no;status:no;help:no;";
    //var rtnValue = window.showModalDialog(url, "", sFeatures);
    window.showModalDialog(url, "", sFeatures, function (rtnValue) {

        if (rtnValue == null) {
            return;
        }
        var isRefresh = GetIsRefresh(rtnValue);
        if (isRefresh) {
            //var filterValue=GetFilterValueStr(rtnValue);
            //var editor=document.getElementById(ctrlID);
            //editor.Value=filterValue;
            //document.forms[0].submit();
            if (url.indexOf("type=basic") > 0) {
                doPostBackBasic();
            }
            else if (url.indexOf("type=adv") > 0) {
                doPostBackAdv();
            }
        }
    });
    //window.open(url);
}

function doPostBackBasic() {
    __doPostBack("u$M$639f9280954f4506b96f470ffba84ab3$Filter0$filterCtrl$basicDiv", "");
}

function doPostBackAdv() {
    __doPostBack("u$M$639f9280954f4506b96f470ffba84ab3$Filter0$filterCtrl$advDiv", "");
}

function GetIsRefresh(resultXml) {
    var xmlDoc = GetXmlDoc(resultXml);
    var objNodeList = xmlDoc.getElementsByTagName("Item");
    //var isRefresh = objNodeList.item(0).attributes(0).nodeValue;
    var isRefresh = objNodeList.item(0).getAttribute("isRefresh"); //===by zzq
    return isRefresh;
}

function GetFilterValueStr(resultXml) {
    var xmlDoc = GetXmlDoc(resultXml);
    var objNodeList = xmlDoc.getElementsByTagName("Item");
    //var filterValueStr = objNodeList.item(0).attributes(1).nodeValue;
    var filterValueStr = objNodeList.item(0).getAttribute("filtervalue"); //===by zzq   
    return filterValueStr;
}

function GetXmlDoc(resultXml) {
    var xmlDoc = XMLHelper.createXMLDocument(resultXml);
    //if (xmlDoc.parseError.errorCode != 0) {
    //    var myErr = xmlDoc.parseError;
    //    alert("You have error " + myErr.reason);
    //}
    var str = XMLHelper.serializeXMLNodeToString(xmlDoc);
    if (str.indexOf("errors") > -1)
        alert("createXMLDocument");
    else {
        return xmlDoc;
    }
}

function CloseWindow(returnValue) {
    //===by zzq 后台UFSoft.UBF.Report.Filter.FilterWebControl程序集中的BaseFilterTree文件中进行CloseWindow方法处理（在添加条件位置）
    //window.returnValue=returnValue;
    //self.close();
    zlayer.setReturnValue(returnValue);
    zlayer.closeCurrentWindow();
}

function ReceiveServerData() {
}

function BeforeCheckHandler(node) {
    var isFixed = node.Attributes["isFixed"];
    if (isFixed == 'true') {
        return false;
    }
}

function AfterCheckHandler(node) {
    CallServer(node);
}

function CallServer(node) {
    var nodeValue = node.Value;
    var callServer = node.Attributes["CallServer"];
    if (callServer == null) {
        return;
    }

    if (node.Checked) {
        nodeValue = nodeValue + "," + "true";
    }
    else {
        nodeValue = nodeValue + "," + "false";
    }
    callServer += '(nodeValue);';
    eval(callServer);
}

function CallParent(defineName) {
    window.OnFilterItemChanged(defineName);//在老IE下，此时parent就是弹出框自己，在新版本6.0下，parent就是单据了
}

//改函数暂时没有启用，目前是服务端Label控件的TitleLink弹出
function Query$ShowQuickFindAttrProfile() {
    var partId = "2f539155-cc09-43f2-8818-941d47cf0515";
    var sFeatures = "dialogHeight:590px;dialogWidth:410px;scroll:no;status:no;help:no;"; //查询条件树页面增加高度200
    //url+='&rad='+Math.random();

    //function ShowModalDialog(url,title,height,width,hideStatusBar,isModelessDialog)

    var url = this.GetUrl(partId, "TitleLink");
    var height = 400;
    var width = 464;
    var HideStatusBar = false;
    //mahx20160803修改弹出框交互 跨浏览器
    var endHandler = {
        showDialogCallback: function (rtnValue) {
            var rdoBasic = document.getElementById(parentID + '_rdoBasic');
            rdoBasic.focus();
            //刷新基体条件界面
            if (rtnValue) {
                doPostBackBasic()
            }
        }
    };
    window.ShowModalDialogForAll(url, title, height, width, true, false, endHandler);


}
;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

//virtual class
UF.UI.Control = function (element) {

    UF.UI.Control.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    // Public Properties
    this._HD = null;
    // Handler

    //20100303 wangxiaoliang
    //增加跨组织分配模板后，模拟录入失败时的错误提示标志。
    //--begin--       
    this._SetControlValue = null;
    this._IsHaveKnowledgePoint = false;
    //--end--
}

UF.UI.Control.prototype = {

    initialize: function () {
        UF.UI.Control.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here

        var ele = this.get_element();
        for (var i = ele.children.length - 1; i > 0; i--) {
            if (ele.children[i].id == ele.id + "_HD") {
                this._HD = ele.children[i];
                break;
            }
        }
        //chrome: 
        //ele.attachEvent("oncontextmenu",this.SetMultiInfo);
        //ele.addEventListener("oncontextmenu", this.SetMultiInfo);
        $(ele).bind('onload', setSelectedItem);
        if (ele.cusAttr("kp") == "true")
            this._IsHaveKnowledgePoint = true;
        this.InitKnowledgePoint();
    },
    InitKnowledgePoint: function () {
        if (this._IsHaveKnowledgePoint) {
            if (this._element.cusAttr("lc") && $find(this._element.cusAttr("lc"))) {
                $find(this._element.cusAttr("lc")).SetKnowledgePoint();
            }
            else {
                this.SetKnowledgePoint();
            }
        }
    },
    SetKnowledgePoint: function() {
        //只在正常单据中才显示此标记，其他的页面中不显示锚点。
        if (this.get_element() && (window.location.href.indexOf("display.aspx") > -1 || window.location.href.indexOf("simple.aspx") > -1)) {
            var _this = this;
            var i = $("<i class='iconfont y-icon-help icon-help'></i>");
            if ($(this.get_element()).is(":hidden"))
                i.hide();
            $(this.get_element()).before(i);
            var help = $(this.get_element()).prev();
            help.click(function () {
                window.top.helpTool.show(_this.get_displayName(), _this._element.id,true);
            });
        }
    },
    SetMultiInfo: function () {
        if (event.ctrlKey == true) {
            //debugger;
            var c = event.srcElement;
            if (c == null)
                return;
            var text = "";
            if (c.tagName == "LABEL") {
                text = c.innerText + "  " + c.title;
            } else if (c.tagName == "TD") {
                if (c.className == "TCss") {
                    text = c.innerText + "  " + c.offsetParent.title;
                } else if (c.className == "TabPageTitle_Center" || c.className == "TabPageActiveTitle_Center") {
                    text = c.innerText + "  " + c.title;
                }
            } else if (c.tagName == "INPUT") {
                if (c.type == "button") {
                    text = c.value + "  " + c.title;
                }
            } else if (c.tagName == "BUTTON") {
                text = c.innerText + "  " + c.offsetParent.offsetParent.parentElement.parentElement.title;
            } else if (c.tagName == "NOBR") {
                if (c.parentElement.className == "thc") {
                    text = c.parentElement.innerText + "    " + c.parentElement.title;
                }
            }
            var oldText = window.clipboardData.getData("Text");
            //window.clipboardData.setData("Text", oldText + "\r\n" + text);
            Clipboard.setData(oldText + "\r\n" + text);
            showStatus(text); //mahx20160705 修改状态栏提示window.status = text;
            window.$Event(event).stopPropagation();
            $Event(event).preventDefault();
        }
    },
    dispose: function () {
        // TODO: add your cleanup code here
        if (this.curHandler != null)
            this.curHandler = null; //gct20091126：一定要释放，否则导致IE内存泄漏
        UF.UI.Control.callBaseMethod(this, 'dispose');
    },
    // TODO: (Step 2) Add your property accessors here
    ///
    ///对外事件接口
    ///    
    add_Event: function (eventName, handler) {
        this.get_events().addHandler(eventName, handler);
    },
    remove_Event: function (eventName, handler) {
        this.get_events().removeHandler(eventName, handler);
    },
    raiseEvent: function (eventName, args) {
        var eh = this.get_events().getHandler(eventName);
        if (eh) {
            //下面这一句，个性化在Grid中OnCellDataValueChanged会调用此方法触发事件，没有提供OnCellDataValueChanged4P这样的事件，所以现在写到这里了。将来如果提供了OnCellDataValueChanged4P，那么可以将this.curHandler = eh;写到OnCellDataValueChanged4P中而不是这里。
            this.curHandler = eh; //记录eh到sender中，以便在BasicInfor的CanEvalPersonalJS()中使用curHandler获取对eh的引用。this在运行时不是eh
            eh(this, args);
        }
    },
    //20100303 wangxiaoliang
    //增加跨组织分配模板后，模拟录入失败时的错误提示标志。
    //--begin--   
    get_SetControlValue: function () {
        return this._SetControlValue;
    },
    set_SetControlValue: function (val) {
        this._SetControlValue = val;
    },
    RemoveSetControlValueErrorMsg: function () {
        RemoveErrorMsgElment(this.get_id(), this._element);
    },
    ShowSetControlValueErrorMsg: function () {
        var msg = GetPersonWarnMsg(this.get_SetControlValue().ValueSource);
        var tab = GetCurrentTabPage(this.get_id());

        //显示错误提示                
        CreateWarnMsg("", null);
        if (tab) {
            CreateWarnMsg("", tab);
        }

        var parentGrid = null
        if (this.get_SetControlValue().GridControl != null) {
            parentGrid = $ID(this.get_SetControlValue().GridControl.id);
        }
        CreateWarnMsg(msg, this._element, parentGrid);

        if (window.PersonalWarnMsgManager) {
            if ($ID("keyValues4Favorite")) {
                window.PersonalWarnMsgManager.SetKeyValue($ID("keyValues4Favorite").value);
            }
            if (tab) {
                window.PersonalWarnMsgManager.Add(tab.id, null);
            }
            window.PersonalWarnMsgManager.Add(this._element.id, this.get_SetControlValue());
        }

        //还原标志位
        this.get_SetControlValue().IsSetControlValue = false;
        this.get_SetControlValue().ValueSource = -1;
    },
    //--end--
    set_HDValue: function (attr, value) {
        if (!this._HD)
            return;
        var oldXml = this._HD.value;
        var eleData;
        if (oldXml) { //已经有值的情况
            eleData = PopupFormHelper.StringToXMLDom(oldXml);
            eleData.childNodes[0].setAttribute(attr, value);
        } else {
            //var dataDom = new ActiveXObject("MSXML.DOMDocument")
            //mahx20170410
            var dataDom = Basic.GetXmlDom();
            eleData = dataDom.createElement("Data");
            eleData.setAttribute(attr, value);
        }
        //this._HD.value = eleData.xml;
        //mahx20170410
        this._HD.value = XMLHelper.serializeXMLNodeToString(eleData);
    },
    get_displayName: function () {
        if (this._element.cusAttr("lc") && $find(this._element.cusAttr("lc"))) {
            return $find(this._element.cusAttr("lc")).get_displayName();
        }
        if($(this._element).attr('ick') == "FlexField"){
            return this._element.cusAttr("title");
        }
        return $(this._element).text();
    },
    get_innerId:function(){
        if(this._element.id.indexOf("DDLCase")>-1){ //方案选择select控件
            return ;
        }else if(this._element.id.indexOf('_Global_')>-1 || this._element.id.indexOf('_Public_')>-1 || this._element.id.indexOf('FlexFieldPicker')>-1){
            return;//弹性域字段
        }else if (this._element.cusAttr("lc") ) { //Refrance控件
            return this._element.cusAttr("lc");
        }else{ //label控件
            return this._element.id;
        }
    },
    to_Help: function (index, func) {
        $(this._element).parent().css("position", "relative");
        $(this._element).after("<div class='controlBg' forid='" + this._element.id + "' z-index='" + index + "'></div>");

        // $("body").append("<div  style='left:" + $(this._element).position().left + ";top:" + $(this._element).position().top + ";position:absolute;width:" + $(this._element).width() + ";height:" + $(this._element).height() + "' forid='" + this._element.id + "' z-index='99999999999999999999'></div>")
        if (func)
            var s = function (_this) {
                $("[forid='" + _this._element.id + "']").click(function (e) {
                    func(_this.get_displayName(), _this._element.id);
                    e.preventDefault();
                    e.stopPropagation();
                })
            }(this);
    },
    to_Translate: function (index, func) {
        var prev_id = $(this._element).parents(".webpart_div").attr("id");
        $(this._element).parent().css("position", "relative");
        $(this._element).after("<div class='translateBg' forid='" + this._element.id + "' z-index='" + index + "'></div>");
        if (func)
            var s = function (_this) {
                $("[forid='" + _this._element.id + "']").click(function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var origin_id = _this.get_innerId(); //原始id
                    if(origin_id){
                        var firstIndex = prev_id.length+1;
                        var sub_id = origin_id.substring(firstIndex); //截取关键id值
                        func(origin_id,sub_id);
                    }else{
                        alert("暂不支持翻译功能");
                    }
                })
            }(this);
    },
    set_translateName:function(dom,currentName){ 
        if (this._element.cusAttr("lc") ) {//Reference控件
            
        }else if($(this._element).attr("ick") == "Label"){//label控件
           dom.attr("title",currentName);
           dom.text(currentName); 
        }else if($(this._element).attr("ick") == "Button"){
           dom.attr("title",currentName);
           dom.find("input").val(currentName);
        }else if($(this._element).attr("ick") == "DropDownButton"){
           var text = dom.find("button").text();
           var new_html = dom.find("button").html().replace(text,currentName)
           dom.find("button").html(new_html);
        }
    },
    to_Defualt: function () {
        $(this._element).parent().css("position", "static");
        if($(this._element).next(".controlBg1").length > 0){
            $(this._element).next(".controlBg1").remove();
        }
        if($(this._element).next(".translateBg").length > 0){
            $(this._element).next(".translateBg").remove();
        }
        $("[forid='" + this._element.id + "']").unbind("click");
        $("[forid='" + this._element.id + "']").remove();
    }
}

//var _Flag ;
var Init = UF.UI.Control.Init = function (id, type) {
    /*
    if(_Flag==null){
        _Flag = $get("RefreshThis");
    }*/
    //var element=$get(id);
    var element = $find(id);
    if (element) { } else {
        element = $get(id);
        if (element && !element.control) {

            $create(type, null, null, null, element);
        }
    }
}
//树控件左右拖动
var treeControlDrag=function(){
        var  moveTreeButton=$("[id$='MoveTreeButton']");
        if(moveTreeButton.length > 0){
                var  treeLine=moveTreeButton.closest("table").closest("td");
                $(treeLine).css("cursor"," w-resize");
                var treeLineElement=treeLine.get(0);
                var treeTD=$(treeLine).closest("table").children("thead").find("tr td:first");
                treeLineElement.onmousedown = function(e) {
                      var downX = (e || event).clientX;
                      var treeLineOffsetLeft = $(treeLine).offset().left;
                      document.onmousemove = function(e) {
                          var e = e || window.event;
                          var changWidth = treeLineOffsetLeft + (e.clientX - downX);
                          //var maxT = oBox.clientWight - treeLineElement.offsetWidth;
                          changWidth < 0 && (changWidth = 0);
                         // changWidth > maxT && (changWidth = maxT);
                        //   var pageLnk=dealUrlPara("lnk", window.frameElement.src)
                          var pageLnk=dealUrlPara("lnk", window.$("#RawUrl").val())
                          var userName = $("#UserName").val()
                          var TreeControStorage = JSON.parse(window.localStorage.getItem(userName + "_TreeContro_Width"));
                          if (TreeControStorage && TreeControStorage[pageLnk]) {
                            TreeControStorage[pageLnk].TreeControWidth = changWidth;
                          }else{
                            TreeControStorage = TreeControStorage ? TreeControStorage : {};
                            TreeControStorage[pageLnk] = {TreeControWidth:''};
                            TreeControStorage[pageLnk].TreeControWidth= changWidth;
                          }
                          window.localStorage.setItem(userName + "_TreeContro_Width",JSON.stringify(TreeControStorage));
                          $(treeTD).width(changWidth);
                          $("#BomMainUI_TreeContro_Width").val(changWidth);
                          return false
                      };
                      document.onmouseup = function() {
                          document.onmousemove = null;
                          document.onmouseup = null;
                          treeLineElement.releaseCapture && treeLineElement.releaseCapture()
                      };
                      treeLineElement.setCapture && treeLineElement.setCapture();
                      return false
                };
        }
}

var UFFocus = UF.UI.Control.UFFocus = function (isLast) {
    //抓焦点时机延后，时机改在页面加载完毕(BasicInfor.js)
    if (!isLast && (Sys && Sys.WebForms)) //当整页刷新时，未能注册afterpageloadcomplete
        return;
    var editorTdChildLength;
    //当个性化处于编辑状态时，不允许页面抓取焦点
    //可以避免个性化操作期间的页面跳动
    //add by lzhm 20100731
    if (window.$ && $("#editorTd:parent").length > 0) {
        editorTdChildLength = $("#editorTd:parent").html().trim().length;
        if (editorTdChildLength > 0)
            return;
    }
    
    //树控件左右拖动
    treeControlDrag();

    var element = $get("UFAutoFocusID");
    if (element && element.value) {
        var focusId = element.value;
        var targetControl;
        if (__nonMSDOMBrowser) {
            targetControl = document.getElementById(focusId);
        } else {
            targetControl = document.childNodes[focusId];
        }
        //对树控件得焦点的特殊处理 --- 开始 ---
        if (targetControl && targetControl.tagName) {
            if (targetControl.tagName == "DIV" && targetControl.parentElement && targetControl.parentElement.parentElement && targetControl.parentElement.parentElement.className == "TreeBorder") {
                try {
                    targetControl.focus();
                } catch (e) { }
                return;
            }
        } else {
            return;
        }
        BaseTop.__UFCurrentFocusControl = focusId;
        //对树控件的焦点的特殊处理 --- 结束 ---
        var focused = targetControl;
        if (targetControl && (!UF_WebForm_CanFocus(targetControl))) {
            focused = UF_WebForm_FindFirstFocusableChild(targetControl);
            //兼容IE10，先给上级一个focus
            try {
                targetControl.focus();
            } catch (e) { }
        }
        if (focused) {
            try {
                element.value = "";
                if (focused.className && $(focused).hasClass("main_Span")) {
                    focused.control.Focus(true);
                    return;
                }
                focused.focus();
                //focused.fireEvent("onfocus");
                //由于fireEvent 方法只有IE才有，所以需要使用下面的方式来进行调用，
                //microsoftajax中给element加了一个_events的集合属性，所以可以通过focus来获取事件来调用。
                focused._events['focus'][0].handler();
                if (focused.type == "text")
                    focused.select();
                if (__nonMSDOMBrowser) {
                    focused.scrollIntoView(false);
                }
                if (window.__smartNav) {
                    window.__smartNav.ae = focused.id;
                }
            } catch (e) { }
        }
    } else {
        //        if (top.__UFCurrentFocusControl) { V5 top不可以随意乱用
        if (BaseTop.__UFCurrentFocusControl) {
            var focused = null;
            if (BaseTop.__UFCurrentFocusControl && BaseTop.__UFCurrentFocusControl != "Grid") {
                focused = $ID(BaseTop.__UFCurrentFocusControl);
                //top.__UFCurrentFocusControl = null;
            }
            if (focused) {
                try {
                    if (focused.className && $(focused).hasClass("main_Span")) {
                        focused.control.Focus(true);
                        return;
                    }
                    //页签控件
                    if (focused.className.indexOf(ControlClass.TabPage) > -1) {
                        UF.UI.Panel.prototype.setContainerControlFocus(focused, false);
                        return;
                    }
                    focused.focus();
                    //focused.fireEvent("onfocus");
                    focused._events['focus'][0].handler();
                    if (focused.type == "text")
                        focused.select();
                    if (__nonMSDOMBrowser) {
                        focused.scrollIntoView(false);
                    }
                    if (window.__smartNav) {
                        window.__smartNav.ae = focused.id;
                    }
                } catch (e) { }
            }
        } else {
            var toppanel = GetTopPanel();
            if (toppanel && toppanel.control) {
                toppanel.control.SetFocus();
            }
        }
    }
    
}

UF.UI.Control.registerClass('UF.UI.Control', Sys.UI.Control);

//virtual class
UF.UI.InputControl = function (element) {

    UF.UI.InputControl.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    this.mouseOverClass;
    this.mouseOutClass;
    //this.readOnlyClass;
    this.btnmouseOverClass;
    this.btnmouseOutClass;
    this.btnClassName;
    this.btnClassName_Dis;
    this.tbClassName;
    this.tbClassName_R;
    this.tbClassName_D;
    this.hf = '0';
    // Public Properties
    // Handler
    this._mouseoverHandler;
    this._mouseoutHandler;
    this._mouseenterHandler;

    //权限属性，是否可见
    this.visibleAuthority;
    //权限属性，是否可编辑
    this.enableAuthority;

    //为客户端脏数据保存提示所用的属性
    this.IsInitComlete = false; //数字控件在初始化的时候进行了赋值语句(例如数字控件)，此时不应看成是脏数据
    this.IsChanged = false; //MS默认的javascript改变
    this.IsValueChanged = false; //值改变，通常是通过set_Value()方法改变

    //gct20081203:个性化相关
    this.IsPersonalProcess = true; //默认个性化处理（基于考虑开发人员写的js代码中没有考虑此属性和个性化功能）。特殊情况下：例如当前编辑的正是个性化新增列，此时编辑控件触发事件的时候就不需要触发个性化处理（同步回写函数）
    this.IsRaiseEvent = true; //默认触发（基于考虑开发人员写的js代码中没有考虑此属性和个性化功能）。如果是个性化时候，在创建Grid特殊处理的时候需要设置为不触发，避免触发不该触发的事件
    this.GridCurrentRowIndex4P = -1; //默认暂定为-1
    this.oldIsPersonalProcess = null;
    this.isMustPostBack = false;

    //this._ShowControlBindingInfoTitle = true;   //控件的Title显示调试用绑定字段信息，发版时应设置为false
    this._ShowControlBindingInfoTitle = false; //控件的Title显示调试用绑定字段信息，发版时应设置为false
}

UF.UI.InputControl.prototype = {

    initialize: function () {
        UF.UI.InputControl.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here

        this.$element = $(this._element);
        if (this._element.cusAttr("readonly")) {
            this._element.className = UIControlClass.getReadOnlyCss(this._element);
        }
        //        this.btnClassName = this.get_element().getAttribute("BtnClassName");
        //        this.btnClassName_Dis = this.get_element().getAttribute("BtnClassName_Dis");
        //        this.tbClassName = this.get_element().getAttribute("TBClassName");
        //        if (this.tbClassName == null)
        //            this.tbClassName = InputControlTemplate.TBClassName;
        //        this.tbClassName_R = this.get_element().getAttribute("TBClassName_R");
        //        if (this.tbClassName_R == null)
        //            this.tbClassName_R = InputControlTemplate.TBClassName_R;
        //        this.tbClassName_D = this.get_element().getAttribute("TBClassName_D");
        //        if (this.tbClassName_D == null)
        //            this.tbClassName_D = InputControlTemplate.TBClassName_D;

        this.visibleAuthority = this._element.cusAttr("VisibleAuthority");
        this.enableAuthority = this._element.cusAttr("EnableAuthority");

        this._mouseoverHandler = Function.createDelegate(this, this.MouseOver);
        $addHandler(this._element, "mouseover", this._mouseoverHandler);
        this._mouseoutHandler = Function.createDelegate(this, this.MouseOut);
        $addHandler(this._element, "mouseout", this._mouseoutHandler);

        //this.set_IsInitComlete(true);//gct20080917:此时仅仅是js控件的基类初始化完成，真正的js控件类（例如Number等）还没有初试化完，故此初始化完成标志应该在各个控件类中去设置
        if (!this._ShowControlBindingInfoTitle) {
            this.ResetTitleInfo();
        }
        this.isMustPostBack = (this._element.cusAttr("IsPMaster") == "y");
    },

    ResetTitleInfo: function () {
        this.get_element().title = "";
        if (this.get_Type() == ControlType.GlobalInput
         || this.get_Type() == ControlType.Reference
         || this.get_Type() == ControlType.TextBox
         || this.get_Type() == ControlType.FlexField
         || this.get_Type() == ControlType.Numberic
         || this.get_Type() == ControlType.DateTime
         || this.get_Type() == ControlType.DropDownList) {
            this._mouseenterHandler = Function.createDelegate(this, this.MouseEnter);
            $addHandler(this._element, "mouseenter", this._mouseenterHandler);
        }
    },

    dispose: function () {
        // TODO: add your cleanup code here
        this.RemoveMouseHandler();

        this.visibleAuthority = null;
        this.enableAuthority = null;

        UF.UI.InputControl.callBaseMethod(this, 'dispose');
    },
    RemoveMouseHandler: function () {
        if (this._mouseoverHandler) {
            $removeHandler(this._element, "mouseover", this._mouseoverHandler);
            delete this._mouseoverHandler;
            this._mouseoverHandler = null;
        }
        if (this._mouseoutHandler) {
            $removeHandler(this._element, "mouseout", this._mouseoutHandler);
            delete this._mouseoutHandler;
            this._mouseoutHandler = null;
        }
        if (this._mouseenterHandler) {
            $removeHandler(this._element, "mouseenter", this._mouseenterHandler);
            delete this._mouseenterHandler;
            this._mouseenterHandler = null;
        }
    },
    // TODO: (Step 2) Add your property accessors here
    get_Enabled: function () {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false") //权限不可见
            return false;
        else {
            if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false") //权限不可编辑
                return false;
            else {
                var ssDis = this._element.cusAttr("disabled");
                return !ssDis;
            }
        }
    },
    set_Enabled: function (isEnabled) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false") //权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false") //权限不可编辑
            return;
        isEnabled = ToBoolean(isEnabled);
        if (isEnabled) {
            //this._element.childNodes[i].className = this.tbClassName;
            this._element.className = UIControlClass.getNotReadOnlyCss(this._element);
        } else {
            //this._element.childNodes[i].className = this.tbClassName_D;
            this._element.className = UIControlClass.getReadOnlyCss(this._element);
        }
        this._element.cusAttr("disabled", !isEnabled);

        if (this.get_Type && (this.get_Type() == "DateTime" || this.get_Type() == "GlobalInput"))//日期和多语控件没有自己的set_Enabled()
        {
            if (this._element.cusAttr("enabled"))
                this._element.cusAttr("enabled", isEnabled);
            //            if (isEnabled == true)
            //                this.btnmouseOutClass = this.btnClassName;
            //            else
            //                this.btnmouseOutClass = this.btnClassName_Dis;
        }
        for (var i = 0, len = this._element.childNodes.length; i < len; i++) {
            $(this._element.childNodes[i]).attr("disabled", !isEnabled);
            if (this._element.childNodes[i].type == "text") {
                this._element.childNodes[i].className = InputControlTemplate.TBClassName;
                //不管是不是可编辑状态，都修改为默认的样式，因为外层会有样式控制。
                //这里应该联合后台修改，直接不要渲染disabled的TextBox样式。而直接控制住外层的样式为只读样式就可以。
            }
        }
    },
    get_Visible: function () {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false") //权限不可见
            return false;
        else
            return (this._element.style.visibility != "hidden");
    },

    set_Visible: function (isVisible) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false") //权限不可见
            return;
        this._element.style.visibility = isVisible ? "visible" : "hidden";

    },
    MouseOver: function () {
        //马红旭为跨浏览器注释
        ////////////        var ele = this.get_element();
        ////////////        //因为ReadOnly的属性可能在某一时期就改变了，在Over的时候，先取一下OverClass，不然只在定义的时候取OverClass，如果中间有什么业务逻辑改变了ReadOnly值集，会导致样式不正确。
        ////////////        this.mouseOverClass = ele.className == ele.getAttribute("ReadOnlyCssClass") ? ele.className : ele.getAttribute("HoverCssClass"); //先写死，要用设置皮肤方式做
        ////////////        this.get_element().className = this.mouseOverClass;
    },
    MouseOut: function () {
        ////////////        var ele = this.get_element();
        ////////////        //因为ReadOnly的属性可能在某一时期就改变了，在Out的时候，先取一下OutClass，不然只在定义的时候取OutClass，如果中间有什么业务逻辑改变了ReadOnly值集，会导致样式不正确。
        ////////////        this.mouseOutClass = ele.className == ele.getAttribute("ReadOnlyCssClass") ? ele.className : ele.getAttribute("CssClass");
        ////////////        if (this.hf == '0') this.get_element().className = this.mouseOutClass;
    },
    MouseEnter: function () {
        if (this._textbox.type != "password") {
            this._element.title = this._textbox.value;
        }
    },
    ControlFocus: function () {
        //var ele = this.get_element();
        //        //因为ReadOnly的属性可能在某一时期就改变了，在Over的时候，先取一下OverClass，不然只在定义的时候取FocusClass，如果中间有什么业务逻辑改变了ReadOnly值集，会导致样式不正确。
        //        this.mouseOverClass = ele.className == this.$element.data("readonlycssclass") ? ele.className : this.$element.data("focuscssclass"); //先写死，要用设置皮肤方式做
        //        if (!this.mouseOverClass)
        //            this.mouseOverClass = ele.className;
        this._element.className = UIControlClass.getFocusCss(this._element);
        this.hf = '1';
    },
    ControlBlur: function () {
        //var ele = this.get_element();
        //        //因为ReadOnly的属性可能在某一时期就改变了，在Out的时候，先取一下OutClass，不然只在定义的时候取OutClass，如果中间有什么业务逻辑改变了ReadOnly值集，会导致样式不正确。
        //        this.mouseOutClass = ele.className == this.$element.data("readonlycssclass") ? ele.className : this.$element.data("cssclass");
        //        if (!this.mouseOutClass)
        //            this.mouseOutClass = ele.className;
        this._element.className = UIControlClass.getBlurCss(this._element);
        this.hf = '0';
    },

    DisplayRequiredFlag: function (isDisplay) {
        if (this.get_id().indexOf("Login") > -1)
            return;
        var requiredFlag = this.get_element().parentElement.lastChild;
        if (requiredFlag && requiredFlag.className && requiredFlag.className == "requiredFlag"
            && (requiredFlag.id != this.get_id() + "_RequiredFlag")) {
            requiredFlag = $ID(this.get_id() + "_RequiredFlag");
        }
        if (requiredFlag && requiredFlag.className && requiredFlag.className == "requiredFlag")
        //if(requiredFlag)  //Modify by lzhm 2007-10-18
        {
            if (requiredFlag == this._element) {
                return;
            }
            if (this._element.style.display == "none") {
                requiredFlag.style.display = "none";
                return;
            }
            if (isDisplay) {
                requiredFlag.style.display = "";
            } else {
                requiredFlag.style.display = "none";
            }
        }
    },
    //删除屏蔽字符
    RemoveMarkChars: function (text, maskChars) {
        maskChars = maskChars.replace(/\\/g, "\\\\").replace(/\*/g, "\\*").replace(/\^/g, "\\^").replace(/\?/g, "\\?");
        text = eval("text.replace(/" + maskChars + "/g,'')");
        return text;
    },

    /******************************************* Begin 客户端脏数据保存提示 ********************************************/
    //MS默认的javascript改变
    get_IsChanged: function () {
        return this.IsChanged;
    },
    //MS默认的javascript改变
    set_IsChanged: function (val) {
        this.IsChanged = val;
        if (this.IsChanged == true) {
            Set_Global_IsDirtyData_TheForm(true);
        }
    },

    get_IsValueChanged: function () {
        return this.IsValueChanged;
    },
    //值改变，通常是通过Set_Value()方法改变
    set_IsValueChanged: function (val) {
        this.IsValueChanged = val;
        if (this.get_IsRaiseEvent()) { //如果不触发事件，就不处理此标记
            if (this.IsValueChanged == true) {
                Set_Global_IsDirtyData_TheForm(true);
            }
        }
    },

    get_IsInitComlete: function () {
        return this.IsInitComlete;
    },

    set_IsInitComlete: function (val) {
        if (val == true) {
            this.IsInitComlete = true;
        } else {
            this.IsInitComlete = false;
        }
    },
    /******************************************* End 客户端脏数据保存提示 ********************************************/
    /******************************************* Begin 个性化处理 ********************************************/
    set_IsPersonalProcess: function (isProcess) {
        if (isProcess == true) {
            this.IsPersonalProcess = true; //set的值一定是bool型
        } else if (isProcess == false) {
            this.IsPersonalProcess = false; //set的值一定是bool型
        }
    },
    get_IsPersonalProcess: function () {
        return this.IsPersonalProcess; //返回值一定是bool型或null
    },
    set_OldIsPersonalProcess: function (isProcess) {
        if (isProcess == true) {
            this.oldIsPersonalProcess = true; //
        } else if (isProcess == false) {
            this.oldIsPersonalProcess = false; //
        } else if (isProcess == null) {
            this.oldIsPersonalProcess = null; //认为不再使用oldIsPersonalProcess这个变量
        }
    },
    get_OldIsPersonalProcess: function () {
        return this.oldIsPersonalProcess; //返回值一定是bool型
    },
    set_IsRaiseEvent: function (isRaise) {
        if (isRaise == true) {
            this.IsRaiseEvent = true; //set的值一定是bool型
        } else if (isRaise == false) {
            this.IsRaiseEvent = false; //set的值一定是bool型
        }
    },
    get_IsRaiseEvent: function () {
        return this.IsRaiseEvent; //返回值一定是bool型
    },
    //客户端处理个性化时机入口,在各种控件子类中调用
    BeforeRaiseOnValueChanged4Personal: function () {
        if (this._element && (this._element.cusAttr('GridCltID4P') == null || this._element.cusAttr('ColFldID4P') == null)) //说明没有跨页签移动到Grid个性化
            return;
        if (this.get_IsPersonalProcess() == false)
            return;

        //gct20090615:为了适应应付单中税组合引入了OldIsPersonalProcess
        if (this.get_OldIsPersonalProcess() != null) {
            this.set_IsPersonalProcess(this.get_OldIsPersonalProcess()); //恢复上次的标记
            this.set_OldIsPersonalProcess(null); //清除老的标记
        }

        //目前做同步更新相对应的Grid列的工作，如果将来还有别的工作，可以继续添加代码
        this.SynchUpdateValue4PersonalColumn(); //gct20091101：不用判断当前是否有CallBack和PostBack立即同步更新单元格（因为只要控件发生ValueChanged的，就要同步单元格）
    },
    //客户端处理个性化时机入口,在各种控件子类中调用
    AfterRaiseOnValueChanged4Personal: function () {
        if (this._element && (this._element.cusAttr('GridCltID4P') == null || this._element.cusAttr('ColFldID4P') == null)) //说明没有跨页签移动到Grid个性化
            return;
        if (this.get_IsPersonalProcess() == false)
            return;

        //gct20090615:为了适应应付单中税组合引入了OldIsPersonalProcess
        if (this.get_OldIsPersonalProcess() != null) {
            this.set_IsPersonalProcess(this.get_OldIsPersonalProcess()); //恢复上次的标记
            this.set_OldIsPersonalProcess(null); //清除老的标记
        }

        //目前做同步更新相对应的Grid列的工作，如果将来还有别的工作，可以继续添加代码
        this.ProcessValueChanged4Personal();
    },
    ProcessValueChanged4Personal: function () {
        if (Global_ClientEventHandlerManager.get_IsEventRuning() == true) //如果有事件要走，那么应该在事件处理完成后处理同步
        {
            var curRow = -1;
            var eventCol = -1;
            //added by u9lkc 20100324
            //如果是个性化导致的callback则行号应该是push进队列时的现场行号 而不是当前行 V2SP200339142
            if (this.get_element() && this._element.cusAttr('GridCltID4P') && this._element.cusAttr('ColFldID4P')) {
                //added by u9lkc 20100323
                //modified by u9yangkuna 20100612_
                if (Global_CallBackReturnJsQueueIsRunning) {
                    var allArg = (_ClientCallBackManager.Args ? _ClientCallBackManager.Args : ""); //.split('√');
                    if (allArg) {
                        var match = null;
                        var pattern = /SrcRowIndex=([0-9]+)/;
                        match = allArg.match(pattern);
                        if (match != null && match.length > 1) {
                            curRow = match[1];
                            pattern = /SrcColIndex=([0-9]+)/;
                            match = allArg.match(pattern);
                            if (match != null && match.length > 1) {
                                eventCol = match[1];
                            }
                        }
                    }
                    Set_GridCurrentRowIndex4PIsValid(false);
                }
                //if(allArg.length > 1 && allArg[1].indexOf("=") > 0 && allArg[1].indexOf("SrcRowIndex") >= 0)
                //{
                //    curRow = allArg[1].substring(allArg[1].indexOf("=") + 1);
                //}
                //added by u9lkc 20100415
                //如果没有传入行号 默认使用当前行
                if (curRow == "undefined" || curRow == null || curRow == -1 || curRow * 1 < 0) {
                    var gridCltID = this._element.cusAttr('GridCltID4P'); //当前Grid的ClientID            
                    var grid = $find(gridCltID); //当前Grid JS对象
                    if (grid) {
                        curRow = grid.get_CurrentRowIndex(); //当前行索引
                    }
                }

                //if(_ClientCallBackManager.argRow)
                //    curRow = _ClientCallBackManager.argRow;
            }
            //yangkuna_20100612_控件存在，则直接更新，不需要入栈
            if (!Global_CallBackReturnJsQueueIsRunning) {
                $find(this.get_id()).SynchUpdateValue4PersonalColumn(curRow, eventCol);
            } else {
                var js = "$find('" + this.get_id() + "').SynchUpdateValue4PersonalColumn(" + curRow + "," + eventCol + ");";
                Global_ClientEventHandlerManager.Add2PersonalProcessQueue(js);
            }
        } else //通常情况走else////参见V15SP00267155
        {
            this.SynchUpdateValue4PersonalColumn();
        }
    },
    SynchUpdateValue4PersonalColumn: function (eventRow, eventCol) {
        //判断有没有对应的个性化Grid列
        if (this._element && this._element.cusAttr('GridCltID4P') && this._element.cusAttr('ColFldID4P')) {
            var gridCltID = this._element.cusAttr('GridCltID4P'); //当前Grid的ClientID            
            var grid = $find(gridCltID); //当前Grid JS对象
            if (grid) {
                var curRow = -1;
                if (eventRow != null && eventRow > -1) {
                    curRow = eventRow;
                } else {
                    //modified by u9yangkuna 20100612_优先取事件参数
                    if (Global_CallBackReturnJsQueueIsRunning) //
                    {
                        var allArg = (_ClientCallBackManager.Args ? _ClientCallBackManager.Args : ""); //.split('√');
                        if (allArg) {
                            var match = null;
                            var pattern = /SrcRowIndex=([0-9]+)/;
                            match = allArg.match(pattern);
                            if (match != null && match.length > 1) {
                                curRow = match[1];
                            }
                        }
                    } else {
                        if (Get_GridCurrentRowIndex4PIsValid()) {
                            curRow = Get_GridCurrentRowIndex4P();
                        } else {
                            curRow = grid.get_CurrentRowIndex();
                        }
                        Set_GridCurrentRowIndex4PIsValid(false);
                    }
                }
                var eColValid = false;
                if (typeof (eventCol) == "undefined" || eventCol == null || eventCol < 0) {
                    if (Global_CallBackReturnJsQueueIsRunning) {
                        var allArg = (_ClientCallBackManager.Args ? _ClientCallBackManager.Args : "");
                        if (allArg) {
                            var match = null;
                            var pattern = /SrcColIndex=([0-9]+)/;
                            match = allArg.match(pattern);
                            if (match != null && match.length > 1) {
                                eventCol = match[1];
                                eColValid = true;
                            }
                        }
                    }
                } else {
                    eColValid = true;
                }
                //var curRow = this.get_GridCurrentRowIndex4P();
                var colFieldId = this._element.cusAttr('ColFldID4P'); //得到当前列
                var curCol = grid.GetColumnIndex(colFieldId); //当前列索引

                if (curRow < 0) {
                    return;
                }
                //grid.SetCellValue(curRow,curCol,this.get_Value());//不用SetCellValue
                //modified by u9yangkuna 20100612_如果是事件触发列，则不走个性化同步，Grid EndEdit会赋正确的值
                var eventControlId = (eColValid ? grid.MainCols[eventCol].cusAttr('ColEditCtrlClientID4P') : "");
                if (eventControlId != this.get_id()) {
                    var cValue = this.get_Value();
                    var gValue = grid.GetCellValue(curRow, curCol).Value;
                    var controlType = this.get_Type();
                    if ((cValue != gValue && (controlType != ControlType.Numberic || cValue * 1 != gValue * 1))) {
                        if (Global_CallBackReturnJsQueueIsRunning) {
                            grid.m_gridBodyEventsHandler.CanEndEdit(false);
                        }
                        if (this.get_Type() == "Reference") {
                            grid.SetReferenceCellValue(curRow, curCol, this.get_Key(), this.get_Value(), this.get_Text(), true); //第四个参数为isSynchUpdateValue4P
                        } else {
                            grid.SetReferenceCellValue(curRow, curCol, this.get_Value());
                        }
                    }
                }
                //Grid使用卡片上的控件作为编辑器，控件的值发生变更需要通知Grid，行状态变更
                grid.ResetRowStates(curRow);
            }
        }
    },
    AfterSetReadOnly4Personal: function (isProcess) {
        if (this._element.cusAttr('GridCltID4P') == null || this._element.cusAttr('ColFldID4P') == null) //说明没有跨页签移动到Grid个性化
            return;
        if (this.get_IsPersonalProcess() == false)
            return;

        //目前做同步更新相对应的Grid列的工作，如果将来还有别的工作，可以继续添加代码
        this.ProcessSetReadOnly4Personal();
    },
    ProcessSetReadOnly4Personal: function (isProcess) {
        if (Global_ClientEventHandlerManager.get_IsEventRuning() == true) //如果有事件要走，那么应该在事件处理完成后处理同步
        {
            var js = "$find('" + this.get_id() + "').SynchUpdateReadOnly4PersonalColumn();";
            Global_ClientEventHandlerManager.Add2PersonalProcessQueue(js);
        } else //通常情况走else//参见V15SP00267155
        {
            this.SynchUpdateReadOnly4PersonalColumn();
        }
    },
    SynchUpdateReadOnly4PersonalColumn: function () {
        //判断有没有对应的个性化Grid列
        if (this._element.cusAttr('GridCltID4P') && this._element.cusAttr('ColFldID4P')) {
            var gridCltID = this._element.cusAttr('GridCltID4P'); //当前Grid的ClientID            
            var grid = $find(gridCltID); //当前Grid JS对象
            if (grid) {
                var curRow = grid.get_CurrentRowIndex(); //当前行索引
                var colFieldId = this._element.cusAttr('ColFldID4P'); //得到当前列
                //var curCol = grid.GetColumnIndex(colFieldId);//当前列索引
                var readOnly = this.get_ReadOnly();

                var columnIndex = grid.GetColumnIndex(colFieldId);
                var tmp = grid.MainCols[columnIndex].cusAttr("ColEditCtrlClientID4P");
                if (tmp != null && tmp == this.get_id()) {
                    grid.SetCellEnabledByFieldId(curRow, colFieldId, !readOnly);
                }
            }
        }
    },
    /******************************************* End 个性化处理 ********************************************/
    IsInGrid: function () {
        var element = this.get_element();
        if (element && element.parentNode) {
            var cls = element.parentNode.className.split(" ")[0];
            return ((cls == "tbc") || (cls == "main_Span"))
        }
        return false;
    },
    SetControlAttribute: function (attrArray) {
        if (attrArray && attrArray.length > 0) {
            this.set_Enabled(attrArray[0] == "1" || ToBoolean(attrArray[0]));
            if (attrArray.length > 1 && this.set_ReadOnly) {
                this.set_ReadOnly(attrArray[1] == "1" || ToBoolean(attrArray[1]));
            }
        }
    }
}

UF.UI.InputControl.registerClass('UF.UI.InputControl', UF.UI.Control);

UF.UI.PopupForm = function (element) {

    UF.UI.PopupForm.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    this._dynamicParams;
    //this._readOnly = false;
}

UF.UI.PopupForm.prototype = {

    initialize: function () {
        UF.UI.PopupForm.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        // Create delegates Attach events
    },

    dispose: function () {
        // TODO: add your cleanup code here
        if (this._dynamicParams) {
            Array.clear(this._dynamicParams);
            this._dynamicParams = null;
        }
        UF.UI.PopupForm.callBaseMethod(this, 'dispose');
    },

    ///event    
    add_BeforeLoadData: function (handler) {
        this.get_events().addHandler("BeforeLoadData", handler);
    },
    remove_BeforeLoadData: function (handler) {
        this.get_events().removeHandler("BeforeLoadData", handler);
    },
    raiseBeforeLoadData: function (args) {
        var eh = this.get_events().getHandler("BeforeLoadData");
        if (eh) {
            eh(this, args);
        }
    },
    add_ContentChanged: function (handler) {
        this.get_events().addHandler("ContentChanged", handler);
    },
    remove_ContentChanged: function (handler) {
        this.get_events().removeHandler("ContentChanged", handler);
    },
    raiseContentChanged: function (args) {
        var eh = this.get_events().getHandler("ContentChanged");
        if (eh) {
            eh(this, args);
        }
    },

    //个性化ContentChanged4P
    add_ContentChanged4P: function (handler) {
        this.get_events().addHandler("ContentChanged4P", handler);
    },
    remove_ContentChanged4P: function (handler) {
        this.get_events().removeHandler("ContentChanged4P", handler);
    },
    raiseContentChanged4P: function (args) {
        var eh = this.get_events().getHandler("ContentChanged4P");
        if (eh) {

            this.curHandler = eh; //记录当前的handler
            eh(this, args);
        }
    },


    GetUrl: function (partID, showType, postbackBeforeShowRefForm) {
        var linkString = this.GetQueryString(partID, showType, postbackBeforeShowRefForm);
        var url = "simple.aspx";
        if (url.indexOf("?") == -1) {
            url += "?" + linkString;
        } else if (url[url.length - 1] == "?" || url[url.length - 1] == "&") {
            url += linkString;
        } else {
            url += "&" + linkString;
        }
        return url;
    },

    GetQueryString: function (partID, showType, postbackBeforeShowRefForm) {
        var ctrlID = this._element.cusAttr("CtrlId");
        if (ctrlID == null)
            ctrlID = "";
        var linkString = "lnk=" + partID + "&CtrlId=" + ctrlID + "&chromeType=4&ShowType=" + showType;
        var pre = "&";
        if (postbackBeforeShowRefForm != true) //大多数正常的逻辑
        {
            if (this._dynamicParams != null) {
                for (key in this._dynamicParams) {
                    //过滤insetAt()和removeAt()
                    if (typeof (this._dynamicParams[key]) == "object" || typeof (this._dynamicParams[key]) == "function") {
                        continue;
                    }
                    linkString += pre + key + "=" + encodeURIComponent(this._dynamicParams[key]);
                    //linkString += pre + key + "=" +  this._dynamicParams[key];
                }
            }

            var customInParams = this._element.cusAttr("CustomInParams");
            if (customInParams != null && customInParams != "") {
                if (customInParams.indexOf("&") == 0)
                    linkString += encodeURI(customInParams).replace(/\+/g, "%2b");
                else
                    linkString += "&" + encodeURI(customInParams).replace(/\+/g, "%2b");;
            }
            //___________________________________________AddParams()的使用使用encodeURIComponent编码__________________________________________________________
            var strAddParams = this._element.cusAttr("AddParams");
            var arrayAddParams = new Array();
            var AddParamsEncodeNameValues = new Object();
            if (strAddParams != null && strAddParams != "") {
                arrayAddParams = strAddParams.split(ReferenceTemplate.SplitString1); //使用平台自己的分割符
                for (var i = 0, len = arrayAddParams.length; i < len; i++) {
                    var str = arrayAddParams[i]
                    var nv = str.split('=');

                    if (nv.length >= 2) {
                        var n = nv[0];
                        var v = str.substr(str.indexOf('=') + 1);
                        AddParamsEncodeNameValues[n] = encodeURIComponent(v).replace(/\+/g, "%2b"); //使用encodeURIComponent编码
                    }
                }
            }
            if (AddParamsEncodeNameValues != null) {
                for (key in AddParamsEncodeNameValues) {
                    linkString += pre + key + "=" + AddParamsEncodeNameValues[key]; //这是编码过的名值对
                }
            }
            //_________________________________________________________________________________________________________________________
        } else //postbackBeforeShowRefForm情况的特殊处理
        {
            var customInParams = this._element.cusAttr("CustomInParams");
            var strAddParams = this._element.cusAttr("AddParams"); //获取AddParams添加的参数            
            var Params = this.GetUniqueKeyEncodeParams(this._dynamicParams, customInParams, strAddParams);
            if (Params != null) {
                for (key in Params) {
                    linkString += pre + key + "=" + Params[key];
                }
            }
        }
        var customInParamsServer = this._element.cusAttr("CustomInParamsSer");
        if (customInParamsServer != null && customInParamsServer != "") {
            if (customInParamsServer.indexOf("&") == 0)
                linkString += encodeURI(customInParamsServer);
            else
                linkString += "&" + encodeURI(customInParamsServer);
        }
        var customInParamsControl = this._element.cusAttr("CustomInParamsControl");
        if (customInParamsControl != null && customInParamsControl != "") {
            customInParamsControl = getParamfromCustomInParamsControl(customInParamsControl);
            if (customInParamsControl.indexOf("&") == 0)
                linkString += encodeURI(customInParamsControl);
            else
                linkString += "&" + encodeURI(customInParamsControl);
        }

        var refCallbackMethod = this._element.cusAttr("RefCallbackMethod");
        if (refCallbackMethod != null && refCallbackMethod != "") {
            if (refCallbackMethod.indexOf("&") == 0)
                linkString += encodeURI(refCallbackMethod);
            else
                linkString += "&" + encodeURI(refCallbackMethod);
        }
        return linkString.replace(/#/g, "%23");
    },
    InitMultiOrgParams: function (ret, keyField, needConvIDs, fullName) {
        var params = new MultiOrgParams();
        //prepare all datas
        var allFields = ret.GetFields();
        for (var i = 0; i < allFields.length; i++) {
            var vs = ret.GetValues(allFields[i]);
            var v = "";
            for (var j = 0; j < vs.length; j++) {
                if (typeof (vs[j]) == "function") {
                    continue;
                }
                if (j == vs.length - 1) {
                    v += vs[j];
                } else {
                    v += vs[j] + ",";
                }
            }
            params.AllDatas[i] = allFields[i] + ":" + v;
        }
        params.OrgID = GetCurrentOrg();
        params.EnterpriseID = GetCurrentEnterpriseID();
        params.entityFullName = fullName;
        return params;
    },
    GetUniqueKeyEncodeParams: function (_dynamicParams, strcustomInParams, strAddParams) {
        var temp_Params = new Object();

        if (this._dynamicParams != null) {
            for (key in _dynamicParams) {
                if (typeof (_dynamicParams[key]) == "object" || typeof (_dynamicParams[key]) == "function") {
                    //过滤insertAt()和removeAt()
                    continue;
                }
                temp_Params[key] = encodeURIComponent(_dynamicParams[key]); //使用encodeURIComponent编码
            }
        }

        if (strcustomInParams != null && strcustomInParams != "") {
            //var customInParams = strcustomInParams.split('&');
            customInParams = strcustomInParams.split('&'); //使用默认的&分割符，这是历史遗留问题          
            for (var i = 0, len = customInParams.length; i < len; i++) {
                var str = customInParams[i]
                var nv = str.split('=');

                if (nv.length >= 2) {
                    var n = nv[0];
                    var v = str.substr(str.indexOf('=') + 1);
                    temp_Params[n] = encodeURIComponent(v); //使用encodeURIComponent编码
                }
            }
        }

        if (strAddParams != null && strAddParams != "") {
            var arrayAddParams = strAddParams.split(ReferenceTemplate.SplitString1); //使用平台自己的分割符
            for (var i = 0, len = arrayAddParams.length; i < len; i++) {
                var str = arrayAddParams[i]
                var nv = str.split('=');

                if (nv.length >= 2) {
                    var n = nv[0];
                    var v = str.substr(str.indexOf('=') + 1);

                    //例如调出中 ItemCode是1-&批号管理   ItemName是&批号管理         
                    //"1-&批号管理"用两个方法编码结果如下：
                    //encodeURI结果为"1-&%E6%89%B9%E5%8F%B7%E7%AE%A1%E7%90%86" &没有被转义
                    //encodeURIComponent结果为"1-%26%E6%89%B9%E5%8F%B7%E7%AE%A1%E7%90%86"                    
                    //temp_Params[n] = encodeURI(v);//使用encodeURI编码的缺陷就是如果数据有&，就无能为力了

                    temp_Params[n] = encodeURIComponent(v); //使用encodeURIComponent编码
                }
            }
        }
        return temp_Params;
    },
    AddParam: function (key, value) {
        if (this._dynamicParams == null) {
            this._dynamicParams = new Array();
        }
        this._dynamicParams[key] = value;
    },
    GetParam: function (key) {
        if (this._dynamicParams == null)
            return null;
        else
            return this._dynamicParams[key];
    },
    RemoveParam: function (key) {
        this._dynamicParams[key] = null;
    },
    RemoveParas: function () {
        this._dynamicParams = new Array();
    },
    ClearAllParams: function () {
        //清除自定义参数
        this.set_CustomInParams("");
        this.set_AddParams("");
        //清除运行态动态参数
        this.RemoveParas();
    }
}

UF.UI.PopupForm.registerClass('UF.UI.PopupForm', UF.UI.InputControl);

PopupFormHelper = function () { }
PopupFormHelper.prototype = {}
//从Xml解析成ReferenceData类型数据
PopupFormHelper.TranslateInfor = function (refInfoXml) {
    if (refInfoXml !== null && refInfoXml !== undefined) {
        refInfoXml = Fix40Decode(refInfoXml);
    }

    var results = new ReferenceData();
    if (refInfoXml == null || refInfoXml == "") return results;
    var dom = PopupFormHelper.StringToXMLDom(refInfoXml);
    if (dom.documentElement) {
        results.setIsForceChange(dom.documentElement.getAttribute("ForceChange") == "1");
    } else {
        results.setIsForceChange(false);
    }
    var returnNodes = dom.getElementsByTagName("ReferenceReturn");
    for (var i = 0; i < returnNodes.length; i++) {
        var result = new Array();
        var curRow = returnNodes[i];
        var fieldNodes = curRow.getElementsByTagName("ReturnField");
        for (var j = 0; j < fieldNodes.length; j++) {
            var item = fieldNodes[j];
            result[item.getAttribute("name")] = item.getAttribute("value");
        }
        results.Rows[i] = result;
    }
    return results;
}

///string XML形式转化为XML dom
PopupFormHelper.StringToXMLDom = function (xmlStr) {
    //===by zzq 解析xmlString
    return XMLHelper.createXMLDocument(xmlStr, 1);
}
///
///事件传递的参数类
///
UF.UI.ChangeEventArgs = function () {
    UF.UI.ChangeEventArgs.initializeBase(this);
}
UF.UI.ChangeEventArgs.registerClass('UF.UI.ChangeEventArgs', Sys.EventArgs);

UF.UI.GridEventArgs = function () {
    UF.UI.GridEventArgs.initializeBase(this);
}
UF.UI.GridEventArgs.registerClass('UF.UI.GridEventArgs', Sys.EventArgs);


//参照返回数据结构，参照改变事件中参数result携带该数据类型的数据
ReferenceData = function () {
    this.isForceChange = false;
    this.Rows = new Array();
}
ReferenceData.prototype = {
    dispose: function () {
        Array.clear(this.Rows);
        this.Rows = null;
    },
    Clear: function () {
        this.Rows = new Array();
    },
    setIsForceChange: function (value) {
        this.isForceChange = value;
    },
    getIsForceChange: function () {
        return this.isForceChange;
    },

    //从第一行取某列数据
    GetValue: function (fieldName) {
        var value = "";
        if (this.Rows != null && this.Rows.length > 0) {
            value = this.Rows[0][fieldName];
            if (typeof (value) == "undefined") {
                value = "";
            }
        }
        //if(fieldName == element.KeyField && value == "")
        //    return "-1";
        return value;
    },
    //从所有行取某列数据
    GetValues: function (fieldName) {
        var results = new Array();
        for (var i = 0; i < this.Rows.length; i++) {
            var value = this.Rows[i][fieldName];
            if (typeof (value) == "undefined") {
                value = "";
            }
            //if(fieldName == element.KeyField && value == "")
            //    results[i]="-1";
            //else
            results[i] = value;
        }
        return results;
    },
    SetValue: function (fieldName, value) {
        if (this.Rows.length == 0) {
            this.Rows[0] = new Array();
        }
        this.Rows[0][fieldName] = value;
    },
    SetValues: function (fieldName, value) {
        for (var i = 0; i < this.Rows.length; i++) {
            this.Rows[i][fieldName] = "";
        }
        for (var i = 0; i < value.length; i++) {
            if (this.Rows[i] == null) {
                this.Rows[i] = new Array();
            }
            this.Rows[i][fieldName] = value[i];
        }
    },

    GetFields: function () {
        var fields = new Array();
        if (this.Rows.length > 0) {
            var i = 0;
            for (var f in this.Rows[0]) {
                if (typeof (f) == "function" || (f == "removeAt") || (f == "insertAt")) {
                    continue;
                }
                fields[i++] = f;
            }
        }
        return fields;
    },
    ToString: function () {
        var str = "";
        for (var j = 0; j < this.Rows.length; j++) {
            var row = this.Rows[j];
            var str1 = "";
            for (var f in row) {
                str1 += "[" + f + "=" + row[f] + "]";
            }
            str += "[" + str1 + "]";
        }
        return str;
    }
}

//用于Focus ============  开始
function UF_WebForm_FindFirstFocusableChild(control) {
    if (!control || !(control.tagName)) {
        return null;
    }
    var tagName = control.tagName.toLowerCase();
    if (tagName == "undefined") {
        return null;
    }
    var children = control.childNodes;
    if (children) {
        for (var i = 0; i < children.length; i++) {
            try {
                if (UF_WebForm_CanFocus(children[i])) {
                    return children[i];
                } else {
                    var focused = UF_WebForm_FindFirstFocusableChild(children[i]);
                    if (UF_WebForm_CanFocus(focused)) {
                        return focused;
                    }
                }
            } catch (e) { }
        }
    }
    return null;
}

function UF_WebForm_AutoFocus(focusId) {
    var targetControl;
    if (__nonMSDOMBrowser) {
        targetControl = document.getElementById(focusId);
    } else {
        targetControl = document.childNodes[focusId];
    }
    var focused = targetControl;
    if (targetControl && (!UF_WebForm_CanFocus(targetControl))) {
        focused = UF_WebForm_FindFirstFocusableChild(targetControl);
    }
    if (focused) {
        try {
            focused.focus();
            if (__nonMSDOMBrowser) {
                focused.scrollIntoView(false);
            }
            if (window.__smartNav) {
                window.__smartNav.ae = focused.id;
            }
        } catch (e) { }
    }
}

function UF_WebForm_CanFocus(element) {
    if (!element || !(element.tagName)) return false;
    var tagName = element.tagName.toLowerCase();
    return (!(element.disabled) &&
        (!(element.type) || element.type.toLowerCase() != "hidden") &&
        UF_WebForm_IsFocusableTag(tagName) &&
        UF_WebForm_IsInVisibleContainer(element)
    );
}

function UF_WebForm_IsFocusableTag(tagName) {
    return (tagName == "input" ||
        tagName == "textarea" ||
        tagName == "select" ||
        tagName == "button" ||
        tagName == "a" ||
        tagName == "div");
}

function UF_WebForm_IsInVisibleContainer(ctrl) {
    var current = ctrl;
    while ((typeof (current) != "undefined") && (current != null)) {
        if (current.disabled ||
            (typeof (current.style) != "undefined" &&
                ((typeof (current.style.display) != "undefined" &&
                        current.style.display == "none") ||
                    (typeof (current.style.visibility) != "undefined" &&
                        current.style.visibility == "hidden")))) {
            return false;
        }
        if (typeof (current.parentNode) != "undefined" &&
            current.parentNode != null &&
            current.parentNode != current &&
            current.parentNode.tagName.toLowerCase() != "body") {
            current = current.parentNode;
        } else {
            return true;
        }
    }
    return true;
}
//用于Focus ============  结束

/* Auto-suggest/auto-complete control
 *
 * original code:
 * (C) 2004-2005 zichun
 *
 * fixes and heavy modifications:
 * (C) 2007 Dmitriy Khudorozhkov (kh_dmitry2001@mail.ru)
 *
 * This software is provided "as-is", without any express or implied warranty.
 * In no event will the author be held liable for any damages arising from the
 * use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 *
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 3. This notice may not be removed or altered from any source distribution.
 */
var suggesturl = ''; // This is the link to the server-side script, that gives you the suggestion list.

// pre-load images:
var image = [];

image[0] = new Image(), image[1] = new Image(),
image[2] = new Image(), image[3] = new Image();

image[0].src = "../App_Themes/Blue/images/ac_arrow_down.gif", image[1].src = "../App_Themes/Blue/images/ac_arrow_down_disabled.gif";
image[2].src = "../App_Themes/Blue/images/ac_arrow_up.gif", image[3].src = "../App_Themes/Blue/images/ac_arrow_up_disabled.gif";

actb = function (id, ca) {
    // Public Variables:
    this.actb_timeOut = -1; // Autocomplete Timeout in ms (-1: autocomplete never time out)
    this.actb_timeOut_Length = 2000; // Autocomplete Timeout length(ms)
    this.actb_lim = 4; // Number of elements autocomplete can show (-1: no limit)
    this.actb_firstText = false; // should the auto complete be limited to the beginning of keyword?
    this.actb_mouse = true; // Enable Mouse Support
    this.actb_delimiter = new Array(';', ','); // Delimiter for multiple autocomplete. Set it to empty array for single autocomplete
    //this.actb_delimiter  = new Array($get(id).parentElement.splitter1, $get(id).parentElement.splitter2);

    this.actb_startcheck = 0; // Show widget only after this number of characters is typed in.

    // Styles:
    this.actb_arColor = '#FFFFFF'; // background color for the "arrows" 上下箭头所在的Div的颜色   
    this.actb_bgColor = '#FFFFFF'; //Div的背景颜色   
    this.actb_textColor = '#000000'; //Item的文字的字体颜色     
    //this.actb_hColor    = '#D6D7E7';
    this.actb_hColor = '#FFE9A6'; //选中的Item颜色   
    this.actb_fFamily = 'verdana,arial,helvetica';
    this.actb_arrowSize = "7px";
    this.actb_fSize = '9pt'; //Item的文字字体大小
    this.actb_hStyle = 'font-family:verdana,arial,helvetica;'; //在Item中关键字的显示样式

    // "Private" Variables:
    this.actb_delimwords = [];
    this.actb_cdelimword = 0;
    this.actb_delimchar = [];
    this.actb_display = false;
    this.actb_pos = 0;
    this.actb_total = 0;
    this.actb_rangeu = 0;
    this.actb_ranged = 0;
    this.actb_bool = [];
    this.actb_pre = 0;
    this.actb_toid = 0;
    this.actb_tomake = false;

    this.actb_mouse_on_list = 1;
    this.actb_isInit = true; //在Focus的时候才创建actb

    this.actb_caretmove = false;

    this.actb_curr = document.getElementById(id);
    this.actb_keywords = [];
    this.actb_keywords_bak = [];

    for (var i = 0, cl = ca.length; i < cl; i++) {
        this.actb_keywords[i] = ca[i];
        this.actb_keywords_bak[i] = ca[i];
    }

    return this.construct();
};

actb.prototype = {

    callLater: function (func, obj) {
        return function () {
            func.call(obj)
        };
    },

    construct: function () {
        this.actb_curr.actb = this;

        // pre-create event functions
        this.funcClick = this.actb_mouseclick;
        this.funcCheck = this.actb_checkkey;

        this.funcHighlight = this.actb_table_highlight;

        this.funcClear = this.callLater(this.actb_clear, this);
        this.funcPress = this.callLater(this.actb_keypress, this);

        this.funcUp = this.callLater(this.actb_goup, this);
        this.funcDown = this.callLater(this.actb_godown, this);

        this.funcFocus = this.callLater(this.actb_table_focus, this);
        this.funcUnfocus = this.callLater(this.actb_table_unfocus, this);

        addEvent(this.actb_curr, "focus", this.callLater(this.actb_setup, this));

        this.actb_setup(); //focus()的时候才创建actb，故此在初始化的时候要显试调一下abtb_setup()

        return this;
    },
    dispose: function () {
        this.actb_delimiter = null;
        this.actb_delimwords = null;
        this.actb_delimchar = null;
        this.actb_bool = null;
        this.actb_curr = null;
        this.actb_keywords = null;
        this.actb_keywords_bak = null;
    },
    actb_setup: function () {
        //addEvent(document,       "keydown",  this.funcCheck);
        addEvent(this.actb_curr, "keydown", this.funcCheck);
        addEvent(this.actb_curr, "blur", this.funcClear);
        addEvent(document, "keypress", this.funcPress);
    },

    actb_clear: function () {
        //removeEvent(document,       "keydown",  this.funcCheck);
        removeEvent(this.actb_curr, "keydown", this.funcCheck);
        removeEvent(this.actb_curr, "blur", this.funcClear);
        removeEvent(document, "keypress", this.funcPress);

        this.actb_removedisp();
    },

    actb_parse: function (n) {
        var t, plen;
        if (this.actb_delimiter.length > 0) {
            t = this.actb_delimwords[this.actb_cdelimword].trim().addslashes();
            plen = this.actb_delimwords[this.actb_cdelimword].trim().length;
        } else {
            t = this.actb_curr.value.addslashes();
            plen = this.actb_curr.value.length;
        }

        var tobuild = '';

        var re = this.actb_firstText ? new RegExp("^" + t, "i") : new RegExp(t, "i");
        var p = n.search(re);

        tobuild = n.substr(0, p);

        tobuild += "<font style='" + (this.actb_hStyle) + "'>";

        tobuild += n.substring(p, plen + p);

        tobuild += "</font>";

        tobuild += n.substring(plen + p, n.length);

        return tobuild;
    },

    actb_generate: function () {
        if (document.getElementById('tat_table')) {
            this.actb_display = false;
            document.body.removeChild(document.getElementById('tat_table'));
        }

        if (this.actb_total == 0) {
            this.actb_display = false;
            return;
        }

        a = document.createElement('table');
        a.cellSpacing = '1px';
        a.cellPadding = '2px';
        a.style.position = 'absolute';
        a.style.border = '#000000 solid 1px';
        //a.style.top = eval(curTop(this.actb_curr) + this.actb_curr.offsetHeight) + "px";
        a.style.top = eval(curTop(this.actb_curr) + this.actb_curr.offsetHeight + 2) + "px";
        a.style.left = curLeft(this.actb_curr) + "px";
        a.style.width = this.actb_curr.parentElement.offsetWidth + "px";
        a.style.backgroundColor = this.actb_bgColor;
        a.id = 'tat_table';
        document.body.appendChild(a);

        var first = true,
            j = 1;

        if (this.actb_mouse) {
            a.onmouseout = this.funcUnfocus;
            a.onmouseover = this.funcFocus;
        }

        var counter = 0;
        for (var i = 0; i < this.actb_keywords.length; i++) {
            if ((this.actb_keywords.length > this.actb_lim) && (this.actb_total > this.actb_lim) && !i) {
                var r = a.insertRow(-1);
                r.style.backgroundColor = this.actb_arColor;

                var c = r.insertCell(-1);
                c.style.color = this.actb_textColor;
                c.style.fontFamily = 'arial narrow';
                c.style.fontSize = this.actb_arrowSize;
                c.style.cursor = 'default';
                c.align = 'center';

                replaceHTML(c, image[3]);
                addEvent(c, "click", this.funcUp);
            }

            if (this.actb_bool[i] && (counter < this.actb_lim)) {
                counter++;
                var r = a.insertRow(-1);
                if (first && !this.actb_tomake) {
                    r.style.backgroundColor = this.actb_hColor;
                    first = false;
                    this.actb_pos = counter;
                } else if (this.actb_pre == i) {
                    r.style.backgroundColor = this.actb_hColor;
                    first = false;
                    this.actb_pos = counter;
                } else
                    r.style.backgroundColor = this.actb_bgColor;

                r.id = 'tat_tr' + (j);

                var c = r.insertCell(-1);
                c.style.color = this.actb_textColor;
                c.style.fontFamily = this.actb_fFamily;
                c.style.fontSize = this.actb_fSize;
                c.innerHTML = this.actb_parse(this.actb_keywords[i]);
                c.id = 'tat_td' + (j);
                c.actb = this;
                c.setAttribute('pos', j);

                if (this.actb_mouse) {
                    c.style.cursor = 'pointer';
                    //r.style.border = "#000000 solid 1px";
                    addEvent(c, "click", this.funcClick);
                    c.onmouseover = this.funcHighlight;
                }

                j++;
            }
        }

        if (this.actb_total > this.actb_lim) {
            var r = a.insertRow(-1);
            r.style.backgroundColor = this.actb_arColor;

            var c = r.insertCell(-1);
            c.style.color = this.actb_textColor;
            c.style.fontFamily = 'arial narrow';
            c.style.fontSize = this.actb_arrowSize;
            c.style.cursor = "pointer";
            c.align = 'center';
            replaceHTML(c, image[0]);

            addEvent(c, "click", this.funcDown);
        }

        this.actb_rangeu = 1;
        this.actb_ranged = j - 1;
        this.actb_display = true;

        if (this.actb_pos <= 0) this.actb_pos = 1;
    },

    actb_remake: function () {
        var a = document.getElementById('tat_table');

        if (this.actb_mouse) {
            a.onmouseout = this.funcUnfocus;
            a.onmouseover = this.funcFocus;
        }

        var i, k = 0;
        var first = true;
        var j = 1;

        if (this.actb_total > this.actb_lim) {
            var b = (this.actb_rangeu > 1);

            var r = a.rows[k++];
            r.style.backgroundColor = this.actb_arColor;

            var c = r.firstChild;
            c.style.color = this.actb_textColor;
            c.style.fontFamily = 'arial narrow';
            c.style.fontSize = this.actb_arrowSize;
            c.style.cursor = 'default';
            c.align = 'center';

            replaceHTML(c, b ? image[2] : image[3]);

            if (b) {
                addEvent(c, "click", this.funcUp);
                c.style.cursor = 'pointer';
            } else {
                c.style.cursor = 'default';
            }
        }

        for (var i = 0; i < this.actb_keywords.length; i++) {
            if (this.actb_bool[i]) {
                if (j >= this.actb_rangeu && j <= this.actb_ranged) {
                    var r = a.rows[k++];
                    r.style.backgroundColor = this.actb_bgColor;
                    r.id = 'tat_tr' + (j);

                    var c = r.firstChild;
                    c.style.color = this.actb_textColor;
                    c.style.fontFamily = this.actb_fFamily;
                    c.style.fontSize = this.actb_fSize;
                    c.innerHTML = this.actb_parse(this.actb_keywords[i]);
                    c.id = 'tat_td' + j;
                    c.setAttribute('pos', j);
                    j++;
                } else j++;
            }

            if (j > this.actb_ranged) break;
        }

        if (this.actb_keywords.length > this.actb_lim) {
            var b = ((j - 1) < this.actb_total);

            var r = a.rows[k];
            r.style.backgroundColor = this.actb_arColor;

            var c = r.firstChild;
            c.style.color = this.actb_textColor;
            c.style.fontFamily = 'arial narrow';
            c.style.fontSize = this.actb_arrowSize;
            c.style.cursor = 'default';
            c.align = 'center';

            replaceHTML(c, b ? image[0] : image[1]);

            if (b) {
                addEvent(c, "click", this.funcDown);
                c.style.cursor = 'pointer';
            } else {
                c.style.cursor = 'default';
            }
        }
    },

    actb_goup: function () {
        this.actb_curr.focus();

        if (!this.actb_display) return;
        if (this.actb_pos == 1) return;

        var t = document.getElementById('tat_tr' + this.actb_pos);
        if (t && t.style) t.style.backgroundColor = this.actb_bgColor;

        this.actb_pos--;
        if (this.actb_pos < this.actb_rangeu) {
            this.actb_rangeu--;
            this.actb_ranged--;
            this.actb_remake();
        }

        t = document.getElementById('tat_tr' + this.actb_pos);
        if (t && t.style) t.style.backgroundColor = this.actb_hColor;

        if (this.actb_toid) {
            clearTimeout(this.actb_toid);
            this.actb_toid = 0;
        }

        if (this.actb_timeOut > 0)
            this.actb_toid = setTimeout(function () {
                this.actb_mouse_on_list = 1;
                this.actb_removedisp();
            }, this.actb_timeOut);

        this.actb_curr.focus();
    },

    actb_godown: function () {
        this.actb_curr.focus();

        if (!this.actb_display) return;
        if (this.actb_pos == this.actb_total) return;

        var t = document.getElementById('tat_tr' + this.actb_pos);
        if (t && t.style) t.style.backgroundColor = this.actb_bgColor;

        this.actb_pos++;
        if (this.actb_pos > this.actb_ranged) {
            this.actb_rangeu++;
            this.actb_ranged++;
            this.actb_remake();
        }

        t = document.getElementById('tat_tr' + this.actb_pos);
        if (t && t.style) t.style.backgroundColor = this.actb_hColor;

        if (this.actb_toid) {
            clearTimeout(this.actb_toid);
            this.actb_toid = 0;
        }

        if (this.actb_timeOut > 0)
            this.actb_toid = setTimeout(function () {
                this.actb_mouse_on_list = 1;
                this.actb_removedisp();
            }, this.actb_timeOut);

        this.actb_curr.focus();
    },

    actb_mouseclick: function (event) {
        var elem = getTargetElement(event);
        if (!elem.id) elem = elem.parentNode;

        var obj = elem.actb;
        obj.actb_curr.focusEventSource = "actb";
        if (!obj.actb_display) return;

        obj.actb_mouse_on_list = 0;
        obj.actb_pos = elem.getAttribute('pos');
        obj.actb_penter();
    },

    actb_table_focus: function () {
        this.actb_mouse_on_list = 1;
    },

    actb_table_unfocus: function () {
        this.actb_mouse_on_list = 0;

        if (this.actb_toid) {
            clearTimeout(this.actb_toid);
            this.actb_toid = 0;
        }

        if (this.actb_timeOut > 0)
            this.actb_toid = setTimeout(function () {
                obj.actb_mouse_on_list = 0;
                this.actb_removedisp();
            }, this.actb_timeOut);
    },

    actb_table_highlight: function (event) {
        var elem = getTargetElement(event);

        var obj = elem.actb;
        if (!obj) return;

        obj.actb_mouse_on_list = 1;

        var row = document.getElementById('tat_tr' + obj.actb_pos);
        if (row && row.style) {
            row.style.backgroundColor = obj.actb_bgColor;
            //row.style.border = "#00ff00 solid 1px";
        }

        obj.actb_pos = elem.getAttribute('pos');

        row = document.getElementById('tat_tr' + obj.actb_pos);
        if (row && row.style) {
            row.style.backgroundColor = obj.actb_hColor;
            //row.style.border = "#00ff00 solid 1px";
        }
        if (obj.actb_toid) {
            clearTimeout(obj.actb_toid);
            obj.actb_toid = 0;
        }

        if (obj.actb_timeOut > 0)
            obj.actb_toid = setTimeout(function () {
                obj.actb_mouse_on_list = 0;
                obj.actb_removedisp();
            }, obj.actb_timeOut);
    },

    actb_insertword: function (a) {
        if (this.actb_delimiter.length > 0) {
            var str = '';

            for (i = 0; i < this.actb_delimwords.length; i++) {
                if (this.actb_cdelimword == i) {
                    prespace = postspace = '';
                    gotbreak = false;
                    for (j = 0; j < this.actb_delimwords[i].length; ++j) {
                        if (this.actb_delimwords[i].charAt(j) != ' ') {
                            gotbreak = true;
                            break;
                        }

                        prespace += ' ';
                    }

                    for (j = this.actb_delimwords[i].length - 1; j >= 0; --j) {
                        if (this.actb_delimwords[i].charAt(j) != ' ') break;
                        postspace += ' ';
                    }

                    str += prespace;
                    str += a;
                    if (gotbreak) str += postspace;
                } else
                    str += this.actb_delimwords[i];

                if (i != this.actb_delimwords.length - 1)
                    str += this.actb_delimchar[i];
            }

            this.actb_curr.value = str;
            setCaret(this.actb_curr, this.actb_curr.value.length);
        } else
            this.actb_curr.value = a;

        this.actb_mouse_on_list = 0;
        this.actb_removedisp();
    },

    actb_penter: function () {
        if (!this.actb_display) return;

        this.actb_display = false;
        var word = '';
        var c = 0;

        for (var i = 0; i <= this.actb_keywords.length; i++) {
            if (this.actb_bool[i]) c++;
            if (c == this.actb_pos) {
                word = this.actb_keywords[i];
                break;
            }
        }

        this.actb_insertword(word);
    },

    actb_removedisp: function () {
        if (this.actb_mouse_on_list == 0 || this.actb_isInit) {
            if (this.actb_isInit)
                this.actb_isInit = false;
            this.actb_display = 0;

            if (document.getElementById('tat_table'))
                document.body.removeChild(document.getElementById('tat_table'));

            if (this.actb_toid) {
                clearTimeout(this.actb_toid);
                this.actb_toid = 0;
            }
        }
    },

    actb_keypress: function (e) {
        if (this.actb_caretmove) stopEvent(e);
        return !this.actb_caretmove;
    },

    actb_checkkey: function (event) //key down 注意：此时的this是input，即textbox
    {
        event = event || window.event;

        var code = event.keyCode;
        var obj = getTargetElement(event).actb;
        obj.actb_caretmove = 0;

        var term = "";

        if (obj.actb_toid) {
            clearTimeout(obj.actb_toid);
            obj.actb_toid = 0;
        }

        switch (code) {
            case 38:
                obj.actb_goup();
                obj.actb_caretmove = 1;
                if (obj.actb_display)
                        $Event(window.event).stopPropagation();
                return false;
                break;

            case 40:
                obj.actb_godown();
                obj.actb_caretmove = 1;
                if (obj.actb_display)
                        $Event(window.event).stopPropagation();
                return false;
                break;

            case 27:
                term = obj.actb_curr.value;

                obj.actb_mouse_on_list = 0;
                obj.actb_removedisp();
                break;

            case 13: //回车
                if (obj.actb_display) {
                    obj.actb_caretmove = 1;
                    obj.actb_penter();

                        $Event(window.event).stopPropagation();
                        $Event(window.event).preventDefault();
                    return false;
                }
                break;

            case 9:
                if (obj.actb_display || obj.actb_toid) {
                    obj.actb_caretmove = 1;
                    obj.actb_penter();

                    setTimeout(function () {
                        obj.actb_curr.focus();
                    }, 25);
                    return false;
                }
                break;

            default:

                obj.actb_toid = setTimeout(function () {
                    obj.actb_tocomplete_before.call(obj, code)
                }, obj.actb_timeOut_Length);
                break;
        }

        if (term.length) setTimeout(function () {
            obj.actb_curr.value = term;
        }, 25);
        return true;
    },
    actb_tocomplete_before: function (kc) {
        if (!(this.actb_curr && this.actb_curr.parentElement)) //handle the special case, can't find the textbox's parentElement.
            return;

        if (!(document && document.activeElement))
            return;
        if (document.activeElement.id != this.actb_curr.id) //the overtime is end and the activeElement is not the source element.
            return;

        var jsControl = $find(this.actb_curr.parentElement.id);
        if (jsControl) {
            switch (jsControl.get_Type()) {
                case "Reference":
                    if (this.actb_curr.value.length < 2) {
                        this.actb_keywords = [];
                        this.actb_tocomplete.call(this, this.actb_curr.value);
                    } else {
                        jsControl.CallXmlHttp_AutoComplete(this.actb_curr.value);
                    }
                    break;
                case "DropDownList":
                    if (this.actb_curr.value.length < 2) {
                        this.actb_keywords = [];
                        this.actb_tocomplete.call(this, this.actb_curr.value);
                    } else {
                        for (var i = 0, cl = this.actb_keywords_bak.length; i < cl; i++) {
                            this.actb_keywords[i] = this.actb_keywords_bak[i];
                        }
                        this.actb_tocomplete.call(this, this.actb_curr.value);
                    }
                    break;
            }
        }
        //this.actb_toid = setTimeout(function() { obj.actb_tocomplete.call(obj, code) }, 500);
    },
    actb_tocomplete: function (kc) {
        if ($find(this.actb_curr.parentElement.id)) {
            if ($find(this.actb_curr.parentElement.id).raiseOnAutoComplete) {
                var args = new UF.UI.ChangeEventArgs();
                args.result = this.actb_curr.value;
                $find(this.actb_curr.parentElement.id).raiseOnAutoComplete(args);
            }
        }

        if (this.actb_toid) {
            clearTimeout(this.actb_toid);
            this.actb_toid = 0;
        } else return;

        if (kc == 38 || kc == 40 || kc == 13) return;

        if (this.actb_display) {
            var word = 0;
            var c = 0;

            for (var i = 0; i <= this.actb_keywords.length; i++) {
                if (this.actb_bool[i]) c++;

                if (c == this.actb_pos) {
                    word = i;
                    break;
                }
            }

            this.actb_pre = word;
        } else this.actb_pre = -1;

        if (this.actb_curr.value == '') {
            this.actb_mouse_on_list = 0;
            this.actb_removedisp();
        }

        var ot, t;

        if (this.actb_delimiter.length > 0) {
            var caret_pos_end = this.actb_curr.value.length;

            var delim_split = '';
            for (var i = 0; i < this.actb_delimiter.length; i++)
                delim_split += this.actb_delimiter[i];

            delim_split = delim_split.addslashes();
            var delim_split_rx = new RegExp("([" + delim_split + "])");
            c = 0;
            this.actb_delimwords = [];
            this.actb_delimwords[0] = '';

            for (var i = 0, j = this.actb_curr.value.length; i < this.actb_curr.value.length; i++, j--) {
                if (this.actb_curr.value.substr(i, j).search(delim_split_rx) == 0) {
                    ma = this.actb_curr.value.substr(i, j).match(delim_split_rx);
                    this.actb_delimchar[c] = ma[1];
                    c++;
                    this.actb_delimwords[c] = '';
                } else
                    this.actb_delimwords[c] += this.actb_curr.value.charAt(i);
            }

            var l = 0;
            this.actb_cdelimword = -1;
            for (i = 0; i < this.actb_delimwords.length; i++) {
                if ((caret_pos_end >= l) && (caret_pos_end <= l + this.actb_delimwords[i].length))
                    this.actb_cdelimword = i;

                l += this.actb_delimwords[i].length + 1;
            }

            ot = this.actb_delimwords[this.actb_cdelimword].trim();
            t = this.actb_delimwords[this.actb_cdelimword].addslashes().trim();
        } else {
            ot = this.actb_curr.value;
            t = this.actb_curr.value.addslashes();
        }

        if (ot.length == 0) {
            this.actb_mouse_on_list = 0;
            this.actb_removedisp();
        } else if ((ot.length == 1) ||
            ((ot.length > 1) && !this.actb_keywords.length) ||
            ((ot.length > 1) && (this.actb_keywords[0].substr(0, 1) != ot.substr(0, 1)))) {
            var ot_ = (ot.length > 1) ? ot.substr(0, 1) : ot;
            var res = this.actb_curr.value;

            if (suggesturl.length) {
                // create xmlhttprequest object:
                var http = null;
                if (typeof XMLHttpRequest != 'undefined') {
                    try {
                        http = new XMLHttpRequest();
                    } catch (e) {
                        http = null;
                    }
                } else {
                    try {
                        http = new ActiveXObject("Msxml2.XMLHTTP");
                    } catch (e) {
                        try {
                            http = new ActiveXObject("Microsoft.XMLHTTP");
                        } catch (e) {
                            http = null;
                        }
                    }
                }

                if (http) {
                    // For local debugging in Mozilla/Firefox only!
                    /*try
                    {
                        netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
                    } catch (e) { }*/

                    if (http.overrideMimeType)
                        http.overrideMimeType('text/xml');

                    http.open("GET", suggesturl + "?str=" + ot_, true);

                    var obj = this;
                    http.onreadystatechange = function (n) {
                        if (http.readyState == 4) {
                            if ((http.status == 200) || (http.status == 0)) {
                                var xmlDocument = null,
                                    tmpinfo = null;

                                try {
                                    xmlDocument = http.responseXML;
                                    tmpinfo = xmlDocument.getElementsByTagName('listdata').item(0).firstChild.data;
                                } catch (e) {
                                    try {
                                        xmlDocument = (new DOMParser()).parseFromString(http.responseText, "text/xml");
                                        tmpinfo = xmlDocument.getElementsByTagName('listdata').item(0).firstChild.data;
                                    } catch (ee) { }
                                }

                                obj.actb_keywords = tmpinfo.split('|');
                                obj.done.call(obj, ot_, t);
                            }
                        }
                    }

                    http.send(null);
                }

                // xmlhttp object creation failed
                return;
            } else this.done(ot, t);
        } else this.done(ot, t);
    },

    done: function (ot, t) {
        if (ot.length < this.actb_startcheck) return;

        var re = new RegExp("^" + t, "i");

        this.actb_total = 0;
        this.actb_tomake = false;

        var al = this.actb_keywords.length;

        for (var i = 0; i < al; i++) {
            this.actb_bool[i] = false;
            if (re.test(this.actb_keywords[i])) {
                this.actb_total++;
                this.actb_bool[i] = true;

                if (this.actb_pre == i) this.actb_tomake = true;
            }
        }

        if (!this.actb_firstText) {
            var tmp = [];

            for (i = 0; i < al; i++) {
                if (this.actb_bool[i])
                    tmp[tmp.length] = this.actb_keywords[i];
            }

            re = new RegExp(t, "i");

            for (i = 0; i < al; i++) {
                if (re.test(this.actb_keywords[i]) && !this.actb_bool[i]) {
                    this.actb_total++;
                    this.actb_bool[i] = true;

                    if (this.actb_pre == i) this.actb_tomake = true;

                    tmp[tmp.length] = this.actb_keywords[i];
                }
            }

            for (i = 0; i < al; i++) {
                if (!this.actb_bool[i])
                    tmp[tmp.length] = this.actb_keywords[i];
            }

            for (i = 0; i < al; i++)
                this.actb_keywords[i] = tmp[i];

            for (i = 0; i < al; i++)
                this.actb_bool[i] = (i < this.actb_total) ? true : false;
        }

        if (this.actb_timeOut > 0)
            this.actb_toid = setTimeout(function () {
                this.actb_mouse_on_list = 0;
                this.actb_removedisp();
            }, this.actb_timeOut);

        this.actb_generate();
    }
}

// Supplementary functions

// Add an event to the obj given
// event_name refers to the event trigger, without the "on", like click or mouseover
// func_name refers to the function callback when event is triggered
function addEvent(obj, event_name, func_ref) {
    if (obj.addEventListener && !window.opera) {
        obj.addEventListener(event_name, func_ref, true);
    } else obj["on" + event_name] = func_ref;
}

// Removes an event from the object
function removeEvent(obj, event_name, func_ref) {
    if (obj.removeEventListener && !window.opera) {
        obj.removeEventListener(event_name, func_ref, true);
    } else obj["on" + event_name] = null;
}

// Stop an event from bubbling up the event DOM
function stopEvent(event) {
    event = event || window.event;

    if (event.stopPropagation) event.stopPropagation();
    if (event.preventDefault) event.preventDefault();

    if (typeof event.cancelBubble != "undefined") {
        event.cancelBubble = true;
        event.returnValue = false;
    }

    return false;
}

// Get the obj that triggers off the event
function getTargetElement(event) {
    event = event || window.event;
    return event.srcElement || event.target;
}

// Sets the caret position to l in the object
function setCaret(obj, l) {
    try {
        obj.focus();
    } catch (e) {
        return;
    }
    if (obj.setSelectionRange) {
        obj.setSelectionRange(l, l);
    } else if (obj.createTextRange) {
        m = obj.createTextRange();
        m.moveStart('character', l);
        m.collapse();
        m.select();
    }
}

// String functions
String.prototype.addslashes = function () {
    return this.replace(/(["\\\.\|\[\]\^\*\+\?\$\(\)])/g, '\\$1');
}

String.prototype.trim = function () {
    return this.replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1");
};
//当前ClassNames中是否包含指定ClassName
///ignoreCase default to false
String.prototype.containsCssClass = function (expression, ignoreCase) {
    if (typeof (expression) == "undefined" || expression == null) {
        return false;
    }
    ignoreCase = !!ignoreCase;
    if (expression instanceof Array) {
        var r = true;
        for (var i = 0; i < expression.length; i++) {
            r = r && this.containsCssClass(expression[i], ignoreCase);
        }
        return r;
    }
    var sc = " ";
    expression = expression.replace(/^\s+|\s+$/g, "").replace(/\s+/g, sc);
    if (expression.indexOf(sc) > -1) {
        return this.containsCssClass(expression.split(sc), ignoreCase);
    }
    var content = this.replace(/^\s+|\s+$/g, "").replace(/\s+/g, sc);
    expression = expression.toString();
    if (ignoreCase) {
        expression = expression.toLowerCase();
        content = content.toLowerCase();
    }
    return content.split(sc).contains(expression);
};

// Offset position from top of the screen
function curTop(obj) {
    var toreturn = 0;
    while (obj) {
        toreturn += obj.offsetTop;
        obj = obj.offsetParent;
    }

    return toreturn;
}

// Offset position from left of the screen
function curLeft(obj) {
    var toreturn = 0;
    while (obj) {
        toreturn += obj.offsetLeft;
        obj = obj.offsetParent;
    }

    return toreturn;
}

// Image installation
function replaceHTML(obj, oImg) {
    var el = obj.childNodes[0];
    while (el) {
        obj.removeChild(el);
        el = obj.childNodes[0];
    }

    obj.appendChild(oImg);
}

//参照用于查找WizadControl中的textbox控件.相应的脚本在PDHelper中.
function findtextboxtypecontrol(control) {
    if (control == null)
        return null;
    for (var i = 0; i < control.children.length; i++) {
        var childcontrol = control.children[i];
        if (childcontrol.control != null && childcontrol.control.get_Type() == ControlType.TextBox) {
            return childcontrol;
        } else if (childcontrol.control != null && childcontrol.control.get_Enabled() == false) {
            continue;
        } else {
            var ele = findtextboxtypecontrol(childcontrol);
            if (ele == null)
                continue;
            return ele;
        }
    }
    return null;
}

function getParamfromCustomInParamsControl(str) {
    var head = "UBF_CFControl=";
    var pstr = str.substr(head.length);
    var ss = pstr.split('$');
    for (i = 0; i < ss.length; i++) {
        var scvalue = ss[i];
        var name, controlstr, uifieldstr;
        if (scvalue == null || scvalue == "")
            continue;
        var nameIndex = scvalue.indexOf('=');
        if (nameIndex < 0)
            continue;
        name = scvalue.substr(0, nameIndex);
        scvalue = scvalue.substr(nameIndex + 1);
        //处理可能的Contorl和UIField.
        var findex = scvalue.indexOf('?');
        if (findex > 0) {
            controlstr = scvalue.substr(0, findex);
            uifieldstr = scvalue.substr(findex + 1);
        } else {
            controlstr = scvalue;
        }
        if ($find(controlstr) != null) {
            str = str.replace(scvalue, $find(controlstr).get_Value());
        } else {
            str = str.replace(scvalue, "@" + uifieldstr);
        }
    }
    return str;
}

function InputControlTemplate() { }
InputControlTemplate.Enabled = "true"; //lowerCase
InputControlTemplate.ReadOnly = "false"; //lowerCase
InputControlTemplate.TBClassName = "textbox";
InputControlTemplate.TBClassName_R = "textbox TBReadOnly";
InputControlTemplate.TBClassName_D = "textbox TBDisabled";;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.Toolbar = function(element) {

    UF.UI.Toolbar.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    this.cells;
    this.overClass = "nav-link active"; //DropDownButtonOver,DDBO
    this.outClass = "nav-link"; //UFToolBarItem,TBI
    this.controls = new Array();
   
    // Handler
    this._keydownHandler;
    this._mouseoverHandler;
    this._mouseoutHandler;
    this.FullScreen=null;
}

UF.UI.Toolbar.prototype = {

    initialize : function() {
        UF.UI.Toolbar.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        this.cells = $(this.get_element()).find(".nav-header-item");
        
        // Create delegates Attach events
        this._keydownHandler = Function.createDelegate(this, this.onkeyDown);
        $addHandler(this._element, "keydown", this._keydownHandler); 
        
        this._mouseoverHandler = Function.createDelegate(this, this.ItemOver);
        this._mouseoutHandler = Function.createDelegate(this, this.ItemOut);
        this.SetMenuItem();
        this.AppendSidePanel();
        this.Maximized();
    },
    Maximized:function(){
         //判断是不是弹出层
         /*if($(this.get_element()).parents(".popLayer").length ==0){
              FullScreenBodyHelper.GetInstance(this.FullScreen).init();
         } */ 
    },
    dispose : function() {
        // TODO: add your cleanup code here
        if (this._keydownHandler) 
        {
            $removeHandler(this._element, "keydown", this._keydownHandler);
            this._keydownHandler = null;
        }
        if (this._mouseoverHandler||this._mouseoutHandler) 
        {
          for (var i=0;i<this.controls.length;i++)
          {
              var inputItem = this.controls[i];
//              if (this._mouseoverHandler) 
//                  $removeHandler(inputItem, "mouseover", this._mouseoverHandler);
//              if (this._mouseoutHandler) 
//                  $removeHandler(inputItem, "mouseout", this._mouseoutHandler);
          }
          this._mouseoverHandler = null;
          this._mouseoutHandler = null;
        }
        this.cells = null;
        this.controls = null;
        
        UF.UI.Toolbar.callBaseMethod(this, 'dispose');
    },

    get_Type : function ()
    {
        return ControlType.ToolBar;
    },

    SetFocus : function() 
    {
      if(this.controls.length>0)
      {        
        this.controls[0].focus();
      }
    },

    SetMenuItem : function() 
    {
      for (var i=0;i<this.cells.length;i++)
      {
        if (this.cells[i].children.length > 0)
        {
          this.SetMenuItemStyle(this.cells[i].children[0]);
        }
      }
    },

    SetMenuItemStyle : function(inputItem)
    {
      //if (inputItem.disabled == false)
      //{
        if ((inputItem.tagName=="INPUT") || (inputItem.tagName=="DIV"))  
        {
            if(inputItem.tagName == "DIV")//此种情况是因为按钮上有UpdatePanel，例如“输出”“打印”按钮
            {
                for(var i = 0, len = inputItem.children.length; i < len; i++)//遍历查找toolbar上DIV下的button
                {
                    if(inputItem.children[i].tagName == "INPUT")//一个DIV下只可能也允许有一个button
                    {
                        inputItem = inputItem.children[i];
                        break;
                    }
                }
            }
//          inputItem.className = this.outClass;  
//          $addHandler(inputItem, "mouseover", this._mouseoverHandler); 
//          $addHandler(inputItem, "mouseout", this._mouseoutHandler); 
          this.controls.push(inputItem);
        }
      //}
    },

    ItemOver : function() 
    {
      if (this.JudageIn(event.srcElement))
      {
        event.srcElement.className = this.overClass;
      }
    },

    ItemOut : function() 
    {
      if (this.JudageIn(event.srcElement))
      {
        event.srcElement.className = this.outClass;
        event.srcElement.setAttribute("outClass",this.outClass);
      }
    },

    JudageIn : function(inputItem)
    {
      for (var i = this.controls.length-1; i >= 0; i--)
      {
        if (inputItem == this.controls[i])
        {
          return true;
        }
        else if(this.controls[i].tagName=="DIV" && this.controls[i].childNodes.length>0)//说明是UpdatePanel
        {
            if(this.controls[i].childNodes[0].tagName=="INPUT")//UpdatePanel下找到按钮
                if (inputItem == this.controls[i].childNodes[0])
                {
                    return true;
                }                
        }
      }
      return false;
    },

    onkeyDown : function() 
    {
      if (window.document.readyState!="complete") return;
      switch (window.event.keyCode) 
      {
        case KeyCode.tab:
          this.Jump2Element(event,event.srcElement,window.event.shiftKey);
          break;
        case KeyCode.left:
          this.Jump2Element(event,event.srcElement,true);
          break;
        case KeyCode.right:
          this.Jump2Element(event,event.srcElement,false);
          break;
      }
    },
    //direction ,true back, false forward
    Jump2Element : function(curEvent,inputElement,direction)
    {
      var subControls=this.controls;
      var curControl=null;
      for(var i=0, len=subControls.length; i<len; i++)
      {
        if(subControls[i]==inputElement)
        {
          if(direction)
          {
            if(i==0)
              curControl=subControls[len-1];
            else
              curControl=subControls[i-1];
          }
          else
          {
            if(i==len-1)
              curControl=subControls[0];
            else
              curControl=subControls[i+1];
          }
        }
      }
      if(curControl!=null && ( curControl.disabled || curControl.style.display == "none"))//curControl.readOnly
      {
        this.Jump2Element(curEvent,curControl,direction);
        return;
      }
      if(curControl!=null && !curControl.disabled && curControl.style.display != "none")//curControl.readOnly
      {
        curControl.focus();
        $Event(curEvent).stopPropagation();
        $Event(curEvent).preventDefault();
      }
    },
    //超长时显示辅助框 
    AppendSidePanel : function(){
        var board = $(this._element); //div
        var cTable = board.find("Table");//table
        if(cTable.length>0)
            cTable = cTable.eq(0);
        else
            return;
            
        var len = board.parent().width() - board.width();
        var setBG = function(obj,pic){obj.css("background-image", "url(../images/"+pic+".gif)");};
        if(len < 0){
            var sidePanel = $("<DIV></DIV>");
            var leftSpan = $("<SPAN></SPAN>");
            var rightSpan = $("<SPAN></SPAN>");
            sidePanel.append(leftSpan);
            sidePanel.append(rightSpan);
            board.append(sidePanel);
            
            sidePanel.attr("style", "Z-INDEX: 1; POSITION: absolute; PADDING: 4px 0px; WIDTH: 32px;  FLOAT: right; HEIGHT: 25px; TOP: 0px; CURSOR: pointer; RIGHT: 0px; ");
            sidePanel.css("background-color", board.css("background-color"));
            //disable 图片这里反着用
            leftSpan.attr("style", "BACKGROUND-IMAGE: url(../images/left.gif); WIDTH: 16px; HEIGHT: 16px");
            rightSpan.attr("style", "BACKGROUND-IMAGE: url(../images/right-disable.gif); WIDTH: 16px; HEIGHT: 16px");
            
            board.css("overflow", "hidden");
            //cTable.css("position", "absolute");
            leftSpan.click(function(){cTable.animate({"left": 0}, {complete:function(){setBG(leftSpan,"left");setBG(rightSpan,"right-disable");}});});
            rightSpan.click(function(){if(board.parent().width() < cTable.width()) cTable.animate({"left": len-32}, {complete:function(){setBG(leftSpan,"left-disable");setBG(rightSpan,"right");}});});
        }
    },
    to_Help: function (index, func) {
        if($(this._element).attr("ick") == "Toolbar" && $(this._element).next(".controlBg1").length == 0){
            $(this._element).after("<div class='controlBg1' z-index='" + index + "'></div>");
        }
    },
    to_Translate: function (index, func) {
        if($(this._element).attr("ick") == "Toolbar" && $(this._element).find(".translateBg1").length == 0){
            //$(this._element).after("<div class='translateBg1' z-index='" + index + "'></div>");
        var ss = $(this._element).find(".nav-link");  
        var prev_id = $(this._element).parents(".webpart_div").attr("id");
        var s = function (_this) {
             $.each(ss, function (i, item) { //页签支持翻译
                var id = $(item).attr('id');
                $(item).after("<div class='translateBg' forid='" + id + "' z-index='" + index + "'></div>");
                if (func){
                    $("[forid='" + id + "']").click(function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        var firstIndex = prev_id.length+1;
                        var sub_id = id.substring(firstIndex);
                        func(id,sub_id);
                    });
                } 
            });
        }(this);
      }
    },
    set_translateName:function(dom,currentName){
      dom.val(currentName);
    },
    to_Defualt: function () {
        if($(this._element).next(".controlBg1").length > 0){
            $(this._element).next(".controlBg1").remove();
        }
        if($(this._element).find(".translateBg").length > 0){
            $(this._element).find(".translateBg").unbind("click").remove();
        }
        $("[forid='" + this._element.id + "']").unbind("click");
        $("[forid='" + this._element.id + "']").remove();
    }
}

UF.UI.Toolbar.registerClass('UF.UI.Toolbar', UF.UI.Control);
;
/**
 * math.js
 * https://github.com/josdejong/mathjs
 *
 * Math.js is an extensive math library for JavaScript and Node.js,
 * It features real and complex numbers, units, matrices, a large set of
 * mathematical functions, and a flexible expression parser.
 *
 * @version 6.2.2
 * @date    2019-09-23
 *
 * @license
 * Copyright (C) 2013-2019 Jos de Jong <wjosdejong@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["math"] = factory();
	else
		root["math"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 19);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return factory; });
/* unused harmony export sortFactories */
/* unused harmony export create */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isFactory; });
/* unused harmony export assertDependencies */
/* unused harmony export isOptionalDependency */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return stripOptionalNotation; });
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);


/**
 * Create a factory function, which can be used to inject dependencies.
 *
 * The created functions are memoized, a consecutive call of the factory
 * with the exact same inputs will return the same function instance.
 * The memoized cache is exposed on `factory.cache` and can be cleared
 * if needed.
 *
 * Example:
 *
 *     const name = 'log'
 *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
 *
 *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
 *       // ... create the function log here and return it
 *     }
 *
 * @param {string} name           Name of the function to be created
 * @param {string[]} dependencies The names of all required dependencies
 * @param {function} create       Callback function called with an object with all dependencies
 * @param {Object} [meta]         Optional object with meta information that will be attached
 *                                to the created factory function as property `meta`.
 * @returns {function}
 */

function factory(name, dependencies, create, meta) {
  function assertAndCreate(scope) {
    // we only pass the requested dependencies to the factory function
    // to prevent functions to rely on dependencies that are not explicitly
    // requested.
    var deps = Object(_object__WEBPACK_IMPORTED_MODULE_1__[/* pickShallow */ "j"])(scope, dependencies.map(stripOptionalNotation));
    assertDependencies(name, dependencies, scope);
    return create(deps);
  }

  assertAndCreate.isFactory = true;
  assertAndCreate.fn = name;
  assertAndCreate.dependencies = dependencies.slice().sort();

  if (meta) {
    assertAndCreate.meta = meta;
  }

  return assertAndCreate;
}
/**
 * Sort all factories such that when loading in order, the dependencies are resolved.
 *
 * @param {Array} factories
 * @returns {Array} Returns a new array with the sorted factories.
 */

function sortFactories(factories) {
  var factoriesByName = {};
  factories.forEach(function (factory) {
    factoriesByName[factory.fn] = factory;
  });

  function containsDependency(factory, dependency) {
    // TODO: detect circular references
    if (isFactory(factory)) {
      if (Object(_array__WEBPACK_IMPORTED_MODULE_0__[/* contains */ "b"])(factory.dependencies, dependency.fn || dependency.name)) {
        return true;
      }

      if (factory.dependencies.some(function (d) {
        return containsDependency(factoriesByName[d], dependency);
      })) {
        return true;
      }
    }

    return false;
  }

  var sorted = [];

  function addFactory(factory) {
    var index = 0;

    while (index < sorted.length && !containsDependency(sorted[index], factory)) {
      index++;
    }

    sorted.splice(index, 0, factory);
  } // sort regular factory functions


  factories.filter(isFactory).forEach(addFactory); // sort legacy factory functions AFTER the regular factory functions

  factories.filter(function (factory) {
    return !isFactory(factory);
  }).forEach(addFactory);
  return sorted;
} // TODO: comment or cleanup if unused in the end

function create(factories) {
  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  sortFactories(factories).forEach(function (factory) {
    return factory(scope);
  });
  return scope;
}
/**
 * Test whether an object is a factory. This is the case when it has
 * properties name, dependencies, and a function create.
 * @param {*} obj
 * @returns {boolean}
 */

function isFactory(obj) {
  return typeof obj === 'function' && typeof obj.fn === 'string' && Array.isArray(obj.dependencies);
}
/**
 * Assert that all dependencies of a list with dependencies are available in the provided scope.
 *
 * Will throw an exception when there are dependencies missing.
 *
 * @param {string} name   Name for the function to be created. Used to generate a useful error message
 * @param {string[]} dependencies
 * @param {Object} scope
 */

function assertDependencies(name, dependencies, scope) {
  var allDefined = dependencies.filter(function (dependency) {
    return !isOptionalDependency(dependency);
  }) // filter optionals
  .every(function (dependency) {
    return scope[dependency] !== undefined;
  });

  if (!allDefined) {
    var missingDependencies = dependencies.filter(function (dependency) {
      return scope[dependency] === undefined;
    }); // TODO: create a custom error class for this, a MathjsError or something like that

    throw new Error("Cannot create function \"".concat(name, "\", ") + "some dependencies are missing: ".concat(missingDependencies.map(function (d) {
      return "\"".concat(d, "\"");
    }).join(', '), "."));
  }
}
function isOptionalDependency(dependency) {
  return dependency && dependency[0] === '?';
}
function stripOptionalNotation(dependency) {
  return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
}

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return isNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return isBigNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return isComplex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return isFraction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "L", function() { return isUnit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return isString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return isMatrix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return isCollection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return isDenseMatrix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return isSparseMatrix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return isRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return isIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return isBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return isResultSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return isHelp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return isFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return isDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return isRegExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return isObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return isNull; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "K", function() { return isUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isAccessorNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return isArrayNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isAssignmentNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return isBlockNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return isConditionalNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return isConstantNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return isFunctionAssignmentNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return isFunctionNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return isIndexNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return isNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return isObjectNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return isOperatorNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return isParenthesisNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return isRangeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "J", function() { return isSymbolNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return isChain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M", function() { return typeOf; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// type checks for all known types
//
// note that:
//
// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
//   instanceof cannot be used because that would not allow to pass data from
//   one instance of math.js to another since each has it's own instance of Unit.
// - check the `isUnit` property via the constructor, so there will be no
//   matches for "fake" instances like plain objects with a property `isUnit`.
//   That is important for security reasons.
// - It must not be possible to override the type checks used internally,
//   for security reasons, so these functions are not exposed in the expression
//   parser.
function isNumber(x) {
  return typeof x === 'number';
}
function isBigNumber(x) {
  return x && x.constructor.prototype.isBigNumber === true || false;
}
function isComplex(x) {
  return x && _typeof(x) === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
}
function isFraction(x) {
  return x && _typeof(x) === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
}
function isUnit(x) {
  return x && x.constructor.prototype.isUnit === true || false;
}
function isString(x) {
  return typeof x === 'string';
}
var isArray = Array.isArray;
function isMatrix(x) {
  return x && x.constructor.prototype.isMatrix === true || false;
}
/**
 * Test whether a value is a collection: an Array or Matrix
 * @param {*} x
 * @returns {boolean} isCollection
 */

function isCollection(x) {
  return Array.isArray(x) || isMatrix(x);
}
function isDenseMatrix(x) {
  return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
}
function isSparseMatrix(x) {
  return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
}
function isRange(x) {
  return x && x.constructor.prototype.isRange === true || false;
}
function isIndex(x) {
  return x && x.constructor.prototype.isIndex === true || false;
}
function isBoolean(x) {
  return typeof x === 'boolean';
}
function isResultSet(x) {
  return x && x.constructor.prototype.isResultSet === true || false;
}
function isHelp(x) {
  return x && x.constructor.prototype.isHelp === true || false;
}
function isFunction(x) {
  return typeof x === 'function';
}
function isDate(x) {
  return x instanceof Date;
}
function isRegExp(x) {
  return x instanceof RegExp;
}
function isObject(x) {
  return !!(x && _typeof(x) === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
}
function isNull(x) {
  return x === null;
}
function isUndefined(x) {
  return x === undefined;
}
function isAccessorNode(x) {
  return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
}
function isArrayNode(x) {
  return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
}
function isAssignmentNode(x) {
  return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}
function isBlockNode(x) {
  return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
}
function isConditionalNode(x) {
  return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
}
function isConstantNode(x) {
  return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
}
function isFunctionAssignmentNode(x) {
  return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}
function isFunctionNode(x) {
  return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
}
function isIndexNode(x) {
  return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
}
function isNode(x) {
  return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
}
function isObjectNode(x) {
  return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
}
function isOperatorNode(x) {
  return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
}
function isParenthesisNode(x) {
  return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
}
function isRangeNode(x) {
  return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
}
function isSymbolNode(x) {
  return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
}
function isChain(x) {
  return x && x.constructor.prototype.isChain === true || false;
}
function typeOf(x) {
  var t = _typeof(x);

  if (t === 'object') {
    // JavaScript types
    if (x === null) return 'null';
    if (Array.isArray(x)) return 'Array';
    if (x instanceof Date) return 'Date';
    if (x instanceof RegExp) return 'RegExp'; // math.js types

    if (isBigNumber(x)) return 'BigNumber';
    if (isComplex(x)) return 'Complex';
    if (isFraction(x)) return 'Fraction';
    if (isMatrix(x)) return 'Matrix';
    if (isUnit(x)) return 'Unit';
    if (isIndex(x)) return 'Index';
    if (isRange(x)) return 'Range';
    if (isResultSet(x)) return 'ResultSet';
    if (isNode(x)) return x.type;
    if (isChain(x)) return 'Chain';
    if (isHelp(x)) return 'Help';
    return 'Object';
  }

  if (t === 'function') return 'Function';
  return t; // can be 'string', 'number', 'boolean', ...
}

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arraySize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return validate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return validateIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return resize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return reshape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return squeeze; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return unsqueeze; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return forEach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return filterRegExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return join; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return identify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return generalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return getArrayDataType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return last; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return initial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return contains; });
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _error_DimensionError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _error_IndexError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);





/**
 * Calculate the size of a multi dimensional array.
 * This function checks the size of the first entry, it does not validate
 * whether all dimensions match. (use function `validate` for that)
 * @param {Array} x
 * @Return {Number[]} size
 */

function arraySize(x) {
  var s = [];

  while (Array.isArray(x)) {
    s.push(x.length);
    x = x[0];
  }

  return s;
}
/**
 * Recursively validate whether each element in a multi dimensional array
 * has a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @param {number} dim   Current dimension
 * @throws DimensionError
 * @private
 */

function _validate(array, size, dim) {
  var i;
  var len = array.length;

  if (len !== size[dim]) {
    throw new _error_DimensionError__WEBPACK_IMPORTED_MODULE_3__[/* DimensionError */ "a"](len, size[dim]);
  }

  if (dim < size.length - 1) {
    // recursively validate each child array
    var dimNext = dim + 1;

    for (i = 0; i < len; i++) {
      var child = array[i];

      if (!Array.isArray(child)) {
        throw new _error_DimensionError__WEBPACK_IMPORTED_MODULE_3__[/* DimensionError */ "a"](size.length - 1, size.length, '<');
      }

      _validate(array[i], size, dimNext);
    }
  } else {
    // last dimension. none of the childs may be an array
    for (i = 0; i < len; i++) {
      if (Array.isArray(array[i])) {
        throw new _error_DimensionError__WEBPACK_IMPORTED_MODULE_3__[/* DimensionError */ "a"](size.length + 1, size.length, '>');
      }
    }
  }
}
/**
 * Validate whether each element in a multi dimensional array has
 * a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @throws DimensionError
 */


function validate(array, size) {
  var isScalar = size.length === 0;

  if (isScalar) {
    // scalar
    if (Array.isArray(array)) {
      throw new _error_DimensionError__WEBPACK_IMPORTED_MODULE_3__[/* DimensionError */ "a"](array.length, 0);
    }
  } else {
    // array
    _validate(array, size, 0);
  }
}
/**
 * Test whether index is an integer number with index >= 0 and index < length
 * when length is provided
 * @param {number} index    Zero-based index
 * @param {number} [length] Length of the array
 */

function validateIndex(index, length) {
  if (!Object(_is__WEBPACK_IMPORTED_MODULE_1__[/* isNumber */ "y"])(index) || !Object(_number__WEBPACK_IMPORTED_MODULE_0__[/* isInteger */ "i"])(index)) {
    throw new TypeError('Index must be an integer (value: ' + index + ')');
  }

  if (index < 0 || typeof length === 'number' && index >= length) {
    throw new _error_IndexError__WEBPACK_IMPORTED_MODULE_4__[/* IndexError */ "a"](index, length);
  }
}
/**
 * Resize a multi dimensional array. The resized array is returned.
 * @param {Array} array         Array to be resized
 * @param {Array.<number>} size Array with the size of each dimension
 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
 *                              zero by default. Specify for example `null`,
 *                              to clearly see entries that are not explicitly
 *                              set.
 * @return {Array} array         The resized array
 */

function resize(array, size, defaultValue) {
  // TODO: add support for scalars, having size=[] ?
  // check the type of the arguments
  if (!Array.isArray(array) || !Array.isArray(size)) {
    throw new TypeError('Array expected');
  }

  if (size.length === 0) {
    throw new Error('Resizing to scalar is not supported');
  } // check whether size contains positive integers


  size.forEach(function (value) {
    if (!Object(_is__WEBPACK_IMPORTED_MODULE_1__[/* isNumber */ "y"])(value) || !Object(_number__WEBPACK_IMPORTED_MODULE_0__[/* isInteger */ "i"])(value) || value < 0) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + Object(_string__WEBPACK_IMPORTED_MODULE_2__[/* format */ "d"])(size) + ')');
    }
  }); // recursively resize the array

  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;

  _resize(array, size, 0, _defaultValue);

  return array;
}
/**
 * Recursively resize a multi dimensional array
 * @param {Array} array         Array to be resized
 * @param {number[]} size       Array with the size of each dimension
 * @param {number} dim          Current dimension
 * @param {*} [defaultValue]    Value to be filled in in new entries,
 *                              undefined by default.
 * @private
 */

function _resize(array, size, dim, defaultValue) {
  var i;
  var elem;
  var oldLen = array.length;
  var newLen = size[dim];
  var minLen = Math.min(oldLen, newLen); // apply new length

  array.length = newLen;

  if (dim < size.length - 1) {
    // non-last dimension
    var dimNext = dim + 1; // resize existing child arrays

    for (i = 0; i < minLen; i++) {
      // resize child array
      elem = array[i];

      if (!Array.isArray(elem)) {
        elem = [elem]; // add a dimension

        array[i] = elem;
      }

      _resize(elem, size, dimNext, defaultValue);
    } // create new child arrays


    for (i = minLen; i < newLen; i++) {
      // get child array
      elem = [];
      array[i] = elem; // resize new child array

      _resize(elem, size, dimNext, defaultValue);
    }
  } else {
    // last dimension
    // remove dimensions of existing values
    for (i = 0; i < minLen; i++) {
      while (Array.isArray(array[i])) {
        array[i] = array[i][0];
      }
    } // fill new elements with the default value


    for (i = minLen; i < newLen; i++) {
      array[i] = defaultValue;
    }
  }
}
/**
 * Re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 *
 * @throws {DimensionError}       If the product of the new dimension sizes does
 *                                not equal that of the old ones
 */


function reshape(array, sizes) {
  var flatArray = flatten(array);
  var newArray;

  function product(arr) {
    return arr.reduce(function (prev, curr) {
      return prev * curr;
    });
  }

  if (!Array.isArray(array) || !Array.isArray(sizes)) {
    throw new TypeError('Array expected');
  }

  if (sizes.length === 0) {
    throw new _error_DimensionError__WEBPACK_IMPORTED_MODULE_3__[/* DimensionError */ "a"](0, product(arraySize(array)), '!=');
  }

  var totalSize = 1;

  for (var sizeIndex = 0; sizeIndex < sizes.length; sizeIndex++) {
    totalSize *= sizes[sizeIndex];
  }

  if (flatArray.length !== totalSize) {
    throw new _error_DimensionError__WEBPACK_IMPORTED_MODULE_3__[/* DimensionError */ "a"](product(sizes), product(arraySize(array)), '!=');
  }

  try {
    newArray = _reshape(flatArray, sizes);
  } catch (e) {
    if (e instanceof _error_DimensionError__WEBPACK_IMPORTED_MODULE_3__[/* DimensionError */ "a"]) {
      throw new _error_DimensionError__WEBPACK_IMPORTED_MODULE_3__[/* DimensionError */ "a"](product(sizes), product(arraySize(array)), '!=');
    }

    throw e;
  }

  return newArray;
}
/**
 * Iteratively re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 */

function _reshape(array, sizes) {
  // testing if there are enough elements for the requested shape
  var tmpArray = array;
  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one

  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
    var size = sizes[sizeIndex];
    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size

    var length = tmpArray.length / size;

    for (var i = 0; i < length; i++) {
      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
    } // set it as the new tmpArray for the next loop turn or for return


    tmpArray = tmpArray2;
  }

  return tmpArray;
}
/**
 * Squeeze a multi dimensional array
 * @param {Array} array
 * @param {Array} [size]
 * @returns {Array} returns the array itself
 */


function squeeze(array, size) {
  var s = size || arraySize(array); // squeeze outer dimensions

  while (Array.isArray(array) && array.length === 1) {
    array = array[0];
    s.shift();
  } // find the first dimension to be squeezed


  var dims = s.length;

  while (s[dims - 1] === 1) {
    dims--;
  } // squeeze inner dimensions


  if (dims < s.length) {
    array = _squeeze(array, dims, 0);
    s.length = dims;
  }

  return array;
}
/**
 * Recursively squeeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */

function _squeeze(array, dims, dim) {
  var i, ii;

  if (dim < dims) {
    var next = dim + 1;

    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _squeeze(array[i], dims, next);
    }
  } else {
    while (Array.isArray(array)) {
      array = array[0];
    }
  }

  return array;
}
/**
 * Unsqueeze a multi dimensional array: add dimensions when missing
 *
 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
 *
 * @param {Array} array
 * @param {number} dims       Desired number of dimensions of the array
 * @param {number} [outer]    Number of outer dimensions to be added
 * @param {Array} [size] Current size of array.
 * @returns {Array} returns the array itself
 * @private
 */


function unsqueeze(array, dims, outer, size) {
  var s = size || arraySize(array); // unsqueeze outer dimensions

  if (outer) {
    for (var i = 0; i < outer; i++) {
      array = [array];
      s.unshift(1);
    }
  } // unsqueeze inner dimensions


  array = _unsqueeze(array, dims, 0);

  while (s.length < dims) {
    s.push(1);
  }

  return array;
}
/**
 * Recursively unsqueeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */

function _unsqueeze(array, dims, dim) {
  var i, ii;

  if (Array.isArray(array)) {
    var next = dim + 1;

    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _unsqueeze(array[i], dims, next);
    }
  } else {
    for (var d = dim; d < dims; d++) {
      array = [array];
    }
  }

  return array;
}
/**
 * Flatten a multi dimensional array, put all elements in a one dimensional
 * array
 * @param {Array} array   A multi dimensional array
 * @return {Array}        The flattened array (1 dimensional)
 */


function flatten(array) {
  if (!Array.isArray(array)) {
    // if not an array, return as is
    return array;
  }

  var flat = [];
  array.forEach(function callback(value) {
    if (Array.isArray(value)) {
      value.forEach(callback); // traverse through sub-arrays recursively
    } else {
      flat.push(value);
    }
  });
  return flat;
}
/**
 * A safe map
 * @param {Array} array
 * @param {function} callback
 */

function map(array, callback) {
  return Array.prototype.map.call(array, callback);
}
/**
 * A safe forEach
 * @param {Array} array
 * @param {function} callback
 */

function forEach(array, callback) {
  Array.prototype.forEach.call(array, callback);
}
/**
 * A safe filter
 * @param {Array} array
 * @param {function} callback
 */

function filter(array, callback) {
  if (arraySize(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, callback);
}
/**
 * Filter values in a callback given a regular expression
 * @param {Array} array
 * @param {RegExp} regexp
 * @return {Array} Returns the filtered array
 * @private
 */

function filterRegExp(array, regexp) {
  if (arraySize(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, function (entry) {
    return regexp.test(entry);
  });
}
/**
 * A safe join
 * @param {Array} array
 * @param {string} separator
 */

function join(array, separator) {
  return Array.prototype.join.call(array, separator);
}
/**
 * Assign a numeric identifier to every element of a sorted array
 * @param {Array} a  An array
 * @return {Array} An array of objects containing the original value and its identifier
 */

function identify(a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }

  if (a.length === 0) {
    return a;
  }

  var b = [];
  var count = 0;
  b[0] = {
    value: a[0],
    identifier: 0
  };

  for (var i = 1; i < a.length; i++) {
    if (a[i] === a[i - 1]) {
      count++;
    } else {
      count = 0;
    }

    b.push({
      value: a[i],
      identifier: count
    });
  }

  return b;
}
/**
 * Remove the numeric identifier from the elements
 * @param {array} a  An array
 * @return {array} An array of values without identifiers
 */

function generalize(a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }

  if (a.length === 0) {
    return a;
  }

  var b = [];

  for (var i = 0; i < a.length; i++) {
    b.push(a[i].value);
  }

  return b;
}
/**
 * Check the datatype of a given object
 * This is a low level implementation that should only be used by
 * parent Matrix classes such as SparseMatrix or DenseMatrix
 * This method does not validate Array Matrix shape
 * @param {Array} array
 * @param {function} typeOf   Callback function to use to determine the type of a value
 * @return string
 */

function getArrayDataType(array, typeOf) {
  var type; // to hold type info

  var length = 0; // to hold length value to ensure it has consistent sizes

  for (var i = 0; i < array.length; i++) {
    var item = array[i];
    var isArray = Array.isArray(item); // Saving the target matrix row size

    if (i === 0 && isArray) {
      length = item.length;
    } // If the current item is an array but the length does not equal the targetVectorSize


    if (isArray && item.length !== length) {
      return undefined;
    }

    var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
    : typeOf(item);

    if (type === undefined) {
      type = itemType; // first item
    } else if (type !== itemType) {
      return 'mixed';
    } else {// we're good, everything has the same type so far
    }
  }

  return type;
}
/**
 * Return the last item from an array
 * @param array
 * @returns {*}
 */

function last(array) {
  return array[array.length - 1];
}
/**
 * Get all but the last element of array.
 */

function initial(array) {
  return array.slice(0, array.length - 1);
}
/**
 * Test whether an array or string contains an item
 * @param {Array | string} array
 * @param {*} item
 * @return {boolean}
 */

function contains(array, item) {
  return array.indexOf(item) !== -1;
}

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return mapObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return deepExtend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return deepStrictEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return deepFlatten; });
/* unused harmony export canDefineProperty */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return lazy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return hasOwnProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return isLegacyFactory; });
/* unused harmony export get */
/* unused harmony export set */
/* unused harmony export pick */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return pickShallow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return values; });
/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }


/**
 * Clone an object
 *
 *     clone(x)
 *
 * Can clone any primitive type, array, and object.
 * If x has a function clone, this function will be invoked to clone the object.
 *
 * @param {*} x
 * @return {*} clone
 */

function clone(x) {
  var type = _typeof(x); // immutable primitive types


  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
    return x;
  } // use clone function of the object when available


  if (typeof x.clone === 'function') {
    return x.clone();
  } // array


  if (Array.isArray(x)) {
    return x.map(function (value) {
      return clone(value);
    });
  }

  if (x instanceof Date) return new Date(x.valueOf());
  if (Object(_is__WEBPACK_IMPORTED_MODULE_0__[/* isBigNumber */ "e"])(x)) return x; // bignumbers are immutable

  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
  // object

  return mapObject(x, clone);
}
/**
 * Apply map to all properties of an object
 * @param {Object} object
 * @param {function} callback
 * @return {Object} Returns a copy of the object with mapped properties
 */

function mapObject(object, callback) {
  var clone = {};

  for (var key in object) {
    if (hasOwnProperty(object, key)) {
      clone[key] = callback(object[key]);
    }
  }

  return clone;
}
/**
 * Extend object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 */

function extend(a, b) {
  for (var prop in b) {
    if (hasOwnProperty(b, prop)) {
      a[prop] = b[prop];
    }
  }

  return a;
}
/**
 * Deep extend an object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */

function deepExtend(a, b) {
  // TODO: add support for Arrays to deepExtend
  if (Array.isArray(b)) {
    throw new TypeError('Arrays are not supported by deepExtend');
  }

  for (var prop in b) {
    if (hasOwnProperty(b, prop)) {
      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === undefined) {
          a[prop] = {};
        }

        if (a[prop] && a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop]);
        } else {
          a[prop] = b[prop];
        }
      } else if (Array.isArray(b[prop])) {
        throw new TypeError('Arrays are not supported by deepExtend');
      } else {
        a[prop] = b[prop];
      }
    }
  }

  return a;
}
/**
 * Deep test equality of all fields in two pairs of arrays or objects.
 * Compares values and functions strictly (ie. 2 is not the same as '2').
 * @param {Array | Object} a
 * @param {Array | Object} b
 * @returns {boolean}
 */

function deepStrictEqual(a, b) {
  var prop, i, len;

  if (Array.isArray(a)) {
    if (!Array.isArray(b)) {
      return false;
    }

    if (a.length !== b.length) {
      return false;
    }

    for (i = 0, len = a.length; i < len; i++) {
      if (!deepStrictEqual(a[i], b[i])) {
        return false;
      }
    }

    return true;
  } else if (typeof a === 'function') {
    return a === b;
  } else if (a instanceof Object) {
    if (Array.isArray(b) || !(b instanceof Object)) {
      return false;
    }

    for (prop in a) {
      // noinspection JSUnfilteredForInLoop
      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {
        return false;
      }
    }

    for (prop in b) {
      // noinspection JSUnfilteredForInLoop
      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {
        return false;
      }
    }

    return true;
  } else {
    return a === b;
  }
}
/**
 * Recursively flatten a nested object.
 * @param {Object} nestedObject
 * @return {Object} Returns the flattened object
 */

function deepFlatten(nestedObject) {
  var flattenedObject = {};

  _deepFlatten(nestedObject, flattenedObject);

  return flattenedObject;
} // helper function used by deepFlatten

function _deepFlatten(nestedObject, flattenedObject) {
  for (var prop in nestedObject) {
    if (hasOwnProperty(nestedObject, prop)) {
      var value = nestedObject[prop];

      if (_typeof(value) === 'object' && value !== null) {
        _deepFlatten(value, flattenedObject);
      } else {
        flattenedObject[prop] = value;
      }
    }
  }
}
/**
 * Test whether the current JavaScript engine supports Object.defineProperty
 * @returns {boolean} returns true if supported
 */


function canDefineProperty() {
  // test needed for broken IE8 implementation
  try {
    if (Object.defineProperty) {
      Object.defineProperty({}, 'x', {
        get: function get() {}
      });
      return true;
    }
  } catch (e) {}

  return false;
}
/**
 * Attach a lazy loading property to a constant.
 * The given function `fn` is called once when the property is first requested.
 *
 * @param {Object} object         Object where to add the property
 * @param {string} prop           Property name
 * @param {Function} valueResolver Function returning the property value. Called
 *                                without arguments.
 */

function lazy(object, prop, valueResolver) {
  var _uninitialized = true;

  var _value;

  Object.defineProperty(object, prop, {
    get: function get() {
      if (_uninitialized) {
        _value = valueResolver();
        _uninitialized = false;
      }

      return _value;
    },
    set: function set(value) {
      _value = value;
      _uninitialized = false;
    },
    configurable: true,
    enumerable: true
  });
}
/**
 * Traverse a path into an object.
 * When a namespace is missing, it will be created
 * @param {Object} object
 * @param {string | string[]} path   A dot separated string like 'name.space'
 * @return {Object} Returns the object at the end of the path
 */

function traverse(object, path) {
  if (path && typeof path === 'string') {
    return traverse(object, path.split('.'));
  }

  var obj = object;

  if (path) {
    for (var i = 0; i < path.length; i++) {
      var key = path[i];

      if (!(key in obj)) {
        obj[key] = {};
      }

      obj = obj[key];
    }
  }

  return obj;
}
/**
 * A safe hasOwnProperty
 * @param {Object} object
 * @param {string} property
 */

function hasOwnProperty(object, property) {
  return object && Object.hasOwnProperty.call(object, property);
}
/**
 * Test whether an object is a factory. a factory has fields:
 *
 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
 * - name: string (optional)
 * - path: string    A dot separated path (optional)
 * - math: boolean   If true (false by default), the math namespace is passed
 *                   as fifth argument of the factory function
 *
 * @param {*} object
 * @returns {boolean}
 */

function isLegacyFactory(object) {
  return object && typeof object.factory === 'function';
}
/**
 * Get a nested property from an object
 * @param {Object} object
 * @param {string | string[]} path
 * @returns {Object}
 */

function get(object, path) {
  if (typeof path === 'string') {
    if (isPath(path)) {
      return get(object, path.split('.'));
    } else {
      return object[path];
    }
  }

  var child = object;

  for (var i = 0; i < path.length; i++) {
    var key = path[i];
    child = child ? child[key] : undefined;
  }

  return child;
}
/**
 * Set a nested property in an object
 * Mutates the object itself
 * If the path doesn't exist, it will be created
 * @param {Object} object
 * @param {string | string[]} path
 * @param {*} value
 * @returns {Object}
 */

function set(object, path, value) {
  if (typeof path === 'string') {
    if (isPath(path)) {
      return set(object, path.split('.'), value);
    } else {
      object[path] = value;
      return object;
    }
  }

  var child = object;

  for (var i = 0; i < path.length - 1; i++) {
    var key = path[i];

    if (child[key] === undefined) {
      child[key] = {};
    }

    child = child[key];
  }

  if (path.length > 0) {
    var lastKey = path[path.length - 1];
    child[lastKey] = value;
  }

  return object;
}
/**
 * Create an object composed of the picked object properties
 * @param {Object} object
 * @param {string[]} properties
 * @param {function} [transform] Optional value to transform a value when picking it
 * @return {Object}
 */

function pick(object, properties, transform) {
  var copy = {};

  for (var i = 0; i < properties.length; i++) {
    var key = properties[i];
    var value = get(object, key);

    if (value !== undefined) {
      set(copy, key, transform ? transform(value, key) : value);
    }
  }

  return copy;
}
/**
 * Shallow version of pick, creating an object composed of the picked object properties
 * but not for nested properties
 * @param {Object} object
 * @param {string[]} properties
 * @return {Object}
 */

function pickShallow(object, properties) {
  var copy = {};

  for (var i = 0; i < properties.length; i++) {
    var key = properties[i];
    var value = object[key];

    if (value !== undefined) {
      copy[key] = value;
    }
  }

  return copy;
}
function values(object) {
  return Object.keys(object).map(function (key) {
    return object[key];
  });
} // helper function to test whether a string contains a path like 'user.name'

function isPath(str) {
  return str.indexOf('.') !== -1;
}

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return isInteger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return sign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return log2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return log10; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return log1p; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return cbrt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return expm1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return format; });
/* unused harmony export splitNumber */
/* unused harmony export toEngineering */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return toFixed; });
/* unused harmony export toExponential */
/* unused harmony export toPrecision */
/* unused harmony export roundDigits */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return digits; });
/* unused harmony export DBL_EPSILON */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return nearlyEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return acosh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return asinh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return atanh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return cosh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return sinh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return tanh; });
/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);


/**
 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
 */

/**
 * Check if a number is integer
 * @param {number | boolean} value
 * @return {boolean} isInteger
 */

function isInteger(value) {
  if (typeof value === 'boolean') {
    return true;
  }

  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well
}
/**
 * Calculate the sign of a number
 * @param {number} x
 * @returns {number}
 */

var sign =
/* #__PURE__ */
Math.sign || function (x) {
  if (x > 0) {
    return 1;
  } else if (x < 0) {
    return -1;
  } else {
    return 0;
  }
};
/**
 * Calculate the base-2 logarithm of a number
 * @param {number} x
 * @returns {number}
 */

var log2 =
/* #__PURE__ */
Math.log2 || function log2(x) {
  return Math.log(x) / Math.LN2;
};
/**
 * Calculate the base-10 logarithm of a number
 * @param {number} x
 * @returns {number}
 */

var log10 =
/* #__PURE__ */
Math.log10 || function log10(x) {
  return Math.log(x) / Math.LN10;
};
/**
 * Calculate the natural logarithm of a number + 1
 * @param {number} x
 * @returns {number}
 */

var log1p =
/* #__PURE__ */
Math.log1p || function (x) {
  return Math.log(x + 1);
};
/**
 * Calculate cubic root for a number
 *
 * Code from es6-shim.js:
 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
 *
 * @param {number} x
 * @returns {number} Returns the cubic root of x
 */

var cbrt =
/* #__PURE__ */
Math.cbrt || function cbrt(x) {
  if (x === 0) {
    return x;
  }

  var negate = x < 0;
  var result;

  if (negate) {
    x = -x;
  }

  if (isFinite(x)) {
    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods

    result = (x / (result * result) + 2 * result) / 3;
  } else {
    result = x;
  }

  return negate ? -result : result;
};
/**
 * Calculates exponentiation minus 1
 * @param {number} x
 * @return {number} res
 */

var expm1 =
/* #__PURE__ */
Math.expm1 || function expm1(x) {
  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;
};
/**
 * Convert a number to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'engineering'    Always use engineering notation.
 *                                          For example '123.4e+0' and '14.0e+6'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lowerExp` and `upperExp` bounds, and
 *                                          uses exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default,
 *                                          not rounding any digits.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12.071, {notation: 'fixed'})                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
 *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
 *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
 *
 * @param {number} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */

function format(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases


  if (value === Infinity) {
    return 'Infinity';
  } else if (value === -Infinity) {
    return '-Infinity';
  } else if (isNaN(value)) {
    return 'NaN';
  } // default values for options


  var notation = 'auto';
  var precision;

  if (options) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options


    if (Object(_is__WEBPACK_IMPORTED_MODULE_1__[/* isNumber */ "y"])(options)) {
      precision = options;
    } else if (Object(_is__WEBPACK_IMPORTED_MODULE_1__[/* isNumber */ "y"])(options.precision)) {
      precision = options.precision;
    }
  } // handle the various notations


  switch (notation) {
    case 'fixed':
      return toFixed(value, precision);

    case 'exponential':
      return toExponential(value, precision);

    case 'engineering':
      return toEngineering(value, precision);

    case 'auto':
      // TODO: clean up some day. Deprecated since: 2018-01-24
      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0
      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {
        var fixedOptions = Object(_object__WEBPACK_IMPORTED_MODULE_0__[/* mapObject */ "i"])(options, function (x) {
          return x;
        });
        fixedOptions.exponential = undefined;

        if (options.exponential.lower !== undefined) {
          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);
        }

        if (options.exponential.upper !== undefined) {
          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);
        }

        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));
        return toPrecision(value, precision, fixedOptions);
      } // remove trailing zeros after the decimal point


      return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function () {
        var digits = arguments[2];
        var e = arguments[4];
        return digits !== '.' ? digits + e : e;
      });

    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
  }
}
/**
 * Split a number into sign, coefficients, and exponent
 * @param {number | string} value
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 */

function splitNumber(value) {
  // parse the input value
  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);

  if (!match) {
    throw new SyntaxError('Invalid number ' + value);
  }

  var sign = match[1];
  var digits = match[2];
  var exponent = parseFloat(match[4] || '0');
  var dot = digits.indexOf('.');
  exponent += dot !== -1 ? dot - 1 : digits.length - 1;
  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
  .replace(/^0*/, function (zeros) {
    // remove leading zeros, add their count to the exponent
    exponent -= zeros.length;
    return '';
  }).replace(/0*$/, '') // remove trailing zeros
  .split('').map(function (d) {
    return parseInt(d);
  });

  if (coefficients.length === 0) {
    coefficients.push(0);
    exponent++;
  }

  return {
    sign: sign,
    coefficients: coefficients,
    exponent: exponent
  };
}
/**
 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */

function toEngineering(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  var rounded = roundDigits(splitNumber(value), precision);
  var e = rounded.exponent;
  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent

  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

  if (Object(_is__WEBPACK_IMPORTED_MODULE_1__[/* isNumber */ "y"])(precision)) {
    // add zeroes to give correct sig figs
    while (precision > c.length || e - newExp + 1 > c.length) {
      c.push(0);
    }
  } else {
    // concatenate coefficients with necessary zeros
    var significandsDiff = e >= 0 ? e : Math.abs(newExp); // add zeros if necessary (for ex: 1e+8)

    while (c.length - 1 < significandsDiff) {
      c.push(0);
    }
  } // find difference in exponents


  var expDiff = Math.abs(e - newExp);
  var decimalIdx = 1; // push decimal index over by expDiff times

  while (expDiff > 0) {
    decimalIdx++;
    expDiff--;
  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
  // otherwise concat with the rest of the coefficients


  var decimals = c.slice(decimalIdx).join('');
  var decimalVal = Object(_is__WEBPACK_IMPORTED_MODULE_1__[/* isNumber */ "y"])(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
  return rounded.sign + str;
}
/**
 * Format a number with fixed notation.
 * @param {number | string} value
 * @param {number} [precision=undefined]  Optional number of decimals after the
 *                                        decimal point. null by default.
 */

function toFixed(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  var splitValue = splitNumber(value);
  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
  var c = rounded.coefficients;
  var p = rounded.exponent + 1; // exponent may have changed
  // append zeros if needed

  var pp = p + (precision || 0);

  if (c.length < pp) {
    c = c.concat(zeros(pp - c.length));
  } // prepend zeros if needed


  if (p < 0) {
    c = zeros(-p + 1).concat(c);
    p = 1;
  } // insert a dot if needed


  if (p < c.length) {
    c.splice(p, 0, p === 0 ? '0.' : '.');
  }

  return rounded.sign + c.join('');
}
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 */

function toExponential(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // round if needed, else create a clone


  var split = splitNumber(value);
  var rounded = precision ? roundDigits(split, precision) : split;
  var c = rounded.coefficients;
  var e = rounded.exponent; // append zeros if needed

  if (c.length < precision) {
    c = c.concat(zeros(precision - c.length));
  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`


  var first = c.shift();
  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
}
/**
 * Format a number with a certain precision
 * @param {number | string} value
 * @param {number} [precision=undefined] Optional number of digits.
 * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
 *                                       By default:
 *                                         lowerExp = -3 (incl)
 *                                         upper = +5 (excl)
 * @return {string}
 */

function toPrecision(value, precision, options) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // determine lower and upper bound for exponential notation.


  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
  var split = splitNumber(value);
  var rounded = precision ? roundDigits(split, precision) : split;

  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {
    // exponential notation
    return toExponential(value, precision);
  } else {
    var c = rounded.coefficients;
    var e = rounded.exponent; // append trailing zeros

    if (c.length < precision) {
      c = c.concat(zeros(precision - c.length));
    } // append trailing zeros
    // TODO: simplify the next statement


    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros

    c = zeros(-e).concat(c);
    var dot = e > 0 ? e : 0;

    if (dot < c.length - 1) {
      c.splice(dot + 1, 0, '.');
    }

    return rounded.sign + c.join('');
  }
}
/**
 * Round the number of digits of a number *
 * @param {SplitValue} split       A value split with .splitNumber(value)
 * @param {number} precision  A positive integer
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 *              with rounded digits
 */

function roundDigits(split, precision) {
  // create a clone
  var rounded = {
    sign: split.sign,
    coefficients: split.coefficients,
    exponent: split.exponent
  };
  var c = rounded.coefficients; // prepend zeros if needed

  while (precision <= 0) {
    c.unshift(0);
    rounded.exponent++;
    precision++;
  }

  if (c.length > precision) {
    var removed = c.splice(precision, c.length - precision);

    if (removed[0] >= 5) {
      var i = precision - 1;
      c[i]++;

      while (c[i] === 10) {
        c.pop();

        if (i === 0) {
          c.unshift(0);
          rounded.exponent++;
          i++;
        }

        i--;
        c[i]++;
      }
    }
  }

  return rounded;
}
/**
 * Create an array filled with zeros.
 * @param {number} length
 * @return {Array}
 */

function zeros(length) {
  var arr = [];

  for (var i = 0; i < length; i++) {
    arr.push(0);
  }

  return arr;
}
/**
 * Count the number of significant digits of a number.
 *
 * For example:
 *   2.34 returns 3
 *   0.0034 returns 2
 *   120.5e+30 returns 4
 *
 * @param {number} value
 * @return {number} digits   Number of significant digits
 */


function digits(value) {
  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
  .length;
}
/**
 * Minimum number added to one that makes the result different than one
 */

var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
/**
 * Compares two floating point numbers.
 * @param {number} x          First value to compare
 * @param {number} y          Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
*/

function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon === null || epsilon === undefined) {
    return x === y;
  }

  if (x === y) {
    return true;
  } // NaN


  if (isNaN(x) || isNaN(y)) {
    return false;
  } // at this point x and y should be finite


  if (isFinite(x) && isFinite(y)) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = Math.abs(x - y);

    if (diff < DBL_EPSILON) {
      return true;
    } else {
      // use relative error
      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases


  return false;
}
/**
 * Calculate the hyperbolic arccos of a number
 * @param {number} x
 * @return {number}
 */

var acosh = Math.acosh || function (x) {
  return Math.log(Math.sqrt(x * x - 1) + x);
};
var asinh = Math.asinh || function (x) {
  return Math.log(Math.sqrt(x * x + 1) + x);
};
/**
 * Calculate the hyperbolic arctangent of a number
 * @param {number} x
 * @return {number}
 */

var atanh = Math.atanh || function (x) {
  return Math.log((1 + x) / (1 - x)) / 2;
};
/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 */

var cosh = Math.cosh || function (x) {
  return (Math.exp(x) + Math.exp(-x)) / 2;
};
/**
 * Calculate the hyperbolic sine of a number
 * @param {number} x
 * @returns {number}
 */

var sinh = Math.sinh || function (x) {
  return (Math.exp(x) - Math.exp(-x)) / 2;
};
/**
 * Calculate the hyperbolic tangent of a number
 * @param {number} x
 * @returns {number}
 */

var tanh = Math.tanh || function (x) {
  var e = Math.exp(2 * x);
  return (e - 1) / (e + 1);
};

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/utils/is.js
var is = __webpack_require__(1);

// EXTERNAL MODULE: ./src/utils/number.js
var number = __webpack_require__(4);

// EXTERNAL MODULE: ./src/utils/object.js
var object = __webpack_require__(3);

// CONCATENATED MODULE: ./src/utils/bignumber/formatter.js

/**
 * Convert a BigNumber to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
 *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
 *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
 *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
 *
 * @param {BigNumber} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */

function format(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases


  if (!value.isFinite()) {
    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
  } // default values for options


  var notation = 'auto';
  var precision;

  if (options !== undefined) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options


    if (typeof options === 'number') {
      precision = options;
    } else if (options.precision) {
      precision = options.precision;
    }
  } // handle the various notations


  switch (notation) {
    case 'fixed':
      return toFixed(value, precision);

    case 'exponential':
      return toExponential(value, precision);

    case 'engineering':
      return toEngineering(value, precision);

    case 'auto':
      {
        // TODO: clean up some day. Deprecated since: 2018-01-24
        // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0
        if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {
          var fixedOptions = Object(object["i" /* mapObject */])(options, function (x) {
            return x;
          });
          fixedOptions.exponential = undefined;

          if (options.exponential.lower !== undefined) {
            fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);
          }

          if (options.exponential.upper !== undefined) {
            fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);
          }

          console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));
          return format(value, fixedOptions);
        } // determine lower and upper bound for exponential notation.
        // TODO: implement support for upper and lower to be BigNumbers themselves


        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero

        if (value.isZero()) return '0'; // determine whether or not to output exponential notation

        var str;
        var rounded = value.toSignificantDigits(precision);
        var exp = rounded.e;

        if (exp >= lowerExp && exp < upperExp) {
          // normal number notation
          str = rounded.toFixed();
        } else {
          // exponential notation
          str = toExponential(value, precision);
        } // remove trailing zeros after the decimal point


        return str.replace(/((\.\d*?)(0+))($|e)/, function () {
          var digits = arguments[2];
          var e = arguments[4];
          return digits !== '.' ? digits + e : e;
        });
      }

    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
  }
}
/**
 * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {BigNumber | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */

function toEngineering(value, precision) {
  // find nearest lower multiple of 3 for exponent
  var e = value.e;
  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent

  var valueWithoutExp = value.mul(Math.pow(10, -newExp));
  var valueStr = valueWithoutExp.toPrecision(precision);

  if (valueStr.indexOf('e') !== -1) {
    valueStr = valueWithoutExp.toString();
  }

  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
}
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {BigNumber} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */

function toExponential(value, precision) {
  if (precision !== undefined) {
    return value.toExponential(precision - 1); // Note the offset of one
  } else {
    return value.toExponential();
  }
}
/**
 * Format a number with fixed notation.
 * @param {BigNumber} value
 * @param {number} [precision=undefined] Optional number of decimals after the
 *                                       decimal point. Undefined by default.
 */

function toFixed(value, precision) {
  return value.toFixed(precision);
}
// CONCATENATED MODULE: ./src/utils/string.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return endsWith; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return string_format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return stringify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return string_escape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return compareText; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }




/**
 * Check if a text ends with a certain string.
 * @param {string} text
 * @param {string} search
 */

function endsWith(text, search) {
  var start = text.length - search.length;
  var end = text.length;
  return text.substring(start, end) === search;
}
/**
 * Format a value of any type into a string.
 *
 * Usage:
 *     math.format(value)
 *     math.format(value, precision)
 *
 * When value is a function:
 *
 * - When the function has a property `syntax`, it returns this
 *   syntax description.
 * - In other cases, a string `'function'` is returned.
 *
 * When `value` is an Object:
 *
 * - When the object contains a property `format` being a function, this
 *   function is invoked as `value.format(options)` and the result is returned.
 * - When the object has its own `toString` method, this method is invoked
 *   and the result is returned.
 * - In other cases the function will loop over all object properties and
 *   return JSON object notation like '{"a": 2, "b": 3}'.
 *
 * Example usage:
 *     math.format(2/7)                // '0.2857142857142857'
 *     math.format(math.pi, 3)         // '3.14'
 *     math.format(new Complex(2, 3))  // '2 + 3i'
 *     math.format('hello')            // '"hello"'
 *
 * @param {*} value             Value to be stringified
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @return {string} str
 */

function string_format(value, options) {
  if (typeof value === 'number') {
    return Object(number["h" /* format */])(value, options);
  }

  if (Object(is["e" /* isBigNumber */])(value)) {
    return format(value, options);
  } // note: we use unsafe duck-typing here to check for Fractions, this is
  // ok here since we're only invoking toString or concatenating its values


  if (looksLikeFraction(value)) {
    if (!options || options.fraction !== 'decimal') {
      // output as ratio, like '1/3'
      return value.s * value.n + '/' + value.d;
    } else {
      // output as decimal, like '0.(3)'
      return value.toString();
    }
  }

  if (Array.isArray(value)) {
    return formatArray(value, options);
  }

  if (Object(is["I" /* isString */])(value)) {
    return '"' + value + '"';
  }

  if (typeof value === 'function') {
    return value.syntax ? String(value.syntax) : 'function';
  }

  if (value && _typeof(value) === 'object') {
    if (typeof value.format === 'function') {
      return value.format(options);
    } else if (value && value.toString(options) !== {}.toString()) {
      // this object has a non-native toString method, use that one
      return value.toString(options);
    } else {
      var entries = Object.keys(value).map(function (key) {
        return '"' + key + '": ' + string_format(value[key], options);
      });
      return '{' + entries.join(', ') + '}';
    }
  }

  return String(value);
}
/**
 * Stringify a value into a string enclosed in double quotes.
 * Unescaped double quotes and backslashes inside the value are escaped.
 * @param {*} value
 * @return {string}
 */

function stringify(value) {
  var text = String(value);
  var escaped = '';
  var i = 0;

  while (i < text.length) {
    var c = text.charAt(i);

    if (c === '\\') {
      escaped += c;
      i++;
      c = text.charAt(i);

      if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
        escaped += '\\'; // no valid escape character -> escape it
      }

      escaped += c;
    } else if (c === '"') {
      escaped += '\\"';
    } else {
      escaped += c;
    }

    i++;
  }

  return '"' + escaped + '"';
}
/**
 * Escape special HTML characters
 * @param {*} value
 * @return {string}
 */

function string_escape(value) {
  var text = String(value);
  text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  return text;
}
/**
 * Recursively format an n-dimensional matrix
 * Example output: "[[1, 2], [3, 4]]"
 * @param {Array} array
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @returns {string} str
 */

function formatArray(array, options) {
  if (Array.isArray(array)) {
    var str = '[';
    var len = array.length;

    for (var i = 0; i < len; i++) {
      if (i !== 0) {
        str += ', ';
      }

      str += formatArray(array[i], options);
    }

    str += ']';
    return str;
  } else {
    return string_format(array, options);
  }
}
/**
 * Check whether a value looks like a Fraction (unsafe duck-type check)
 * @param {*} value
 * @return {boolean}
 */


function looksLikeFraction(value) {
  return value && _typeof(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
}
/**
 * Compare two strings
 * @param {string} x
 * @param {string} y
 * @returns {number}
 */


function compareText(x, y) {
  // we don't want to convert numbers to string, only accept string input
  if (!Object(is["I" /* isString */])(x)) {
    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + Object(is["M" /* typeOf */])(x) + ', index: 0)');
  }

  if (!Object(is["I" /* isString */])(y)) {
    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + Object(is["M" /* typeOf */])(y) + ', index: 1)');
  }

  return x === y ? 0 : x > y ? 1 : -1;
}

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DimensionError; });
/**
 * Create a range error with the message:
 *     'Dimension mismatch (<actual size> != <expected size>)'
 * @param {number | number[]} actual        The actual size
 * @param {number | number[]} expected      The expected size
 * @param {string} [relation='!=']          Optional relation between actual
 *                                          and expected size: '!=', '<', etc.
 * @extends RangeError
 */
function DimensionError(actual, expected, relation) {
  if (!(this instanceof DimensionError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.actual = actual;
  this.expected = expected;
  this.relation = relation;
  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
  this.stack = new Error().stack;
}
DimensionError.prototype = new RangeError();
DimensionError.prototype.constructor = RangeError;
DimensionError.prototype.name = 'DimensionError';
DimensionError.prototype.isDimensionError = true;

/***/ }),
/* 7 */,
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return warnOnce; });
/**
 * Log a console.warn message only once
 */
var warnOnce = function () {
  var messages = {};
  return function warnOnce() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var message = args.join(', ');

    if (!messages[message]) {
      var _console;

      messages[message] = true;

      (_console = console).warn.apply(_console, ['Warning:'].concat(args));
    }
  };
}();

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license Complex.js v2.0.11 11/02/2016
 *
 * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/

/**
 *
 * This class allows the manipulation of complex numbers.
 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
 *
 * Object form
 * { re: <real>, im: <imaginary> }
 * { arg: <angle>, abs: <radius> }
 * { phi: <angle>, r: <radius> }
 *
 * Array / Vector form
 * [ real, imaginary ]
 *
 * Double form
 * 99.3 - Single double value
 *
 * String form
 * '23.1337' - Simple real number
 * '15+3i' - a simple complex number
 * '3-i' - a simple complex number
 *
 * Example:
 *
 * var c = new Complex('99.3+8i');
 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
 *
 */

(function(root) {

  'use strict';

  var cosh = function(x) {
    return (Math.exp(x) + Math.exp(-x)) * 0.5;
  };

  var sinh = function(x) {
    return (Math.exp(x) - Math.exp(-x)) * 0.5;
  };

  /**
   * Calculates cos(x) - 1 using Taylor series if x is small.
   *
   * @param {number} x
   * @returns {number} cos(x) - 1
   */

  var cosm1 = function(x) {
    var limit = Math.PI/4;
    if (x < -limit || x > limit) {
      return (Math.cos(x) - 1.0);
    }

    var xx = x * x;
    return xx *
      (-0.5 + xx *
        (1/24 + xx *
          (-1/720 + xx *
            (1/40320 + xx *
              (-1/3628800 + xx *
                (1/4790014600 + xx *
                  (-1/87178291200 + xx *
                    (1/20922789888000)
                  )
                )
              )
            )
          )
        )
      )
  };

  var hypot = function(x, y) {

    var a = Math.abs(x);
    var b = Math.abs(y);

    if (a < 3000 && b < 3000) {
      return Math.sqrt(a * a + b * b);
    }

    if (a < b) {
      a = b;
      b = x / y;
    } else {
      b = y / x;
    }
    return a * Math.sqrt(1 + b * b);
  };

  var parser_exit = function() {
    throw SyntaxError('Invalid Param');
  };

  /**
   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
   *
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
  function logHypot(a, b) {

    var _a = Math.abs(a);
    var _b = Math.abs(b);

    if (a === 0) {
      return Math.log(_b);
    }

    if (b === 0) {
      return Math.log(_a);
    }

    if (_a < 3000 && _b < 3000) {
      return Math.log(a * a + b * b) * 0.5;
    }

    /* I got 4 ideas to compute this property without overflow:
     *
     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
     *
     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

     Math.log(a * a + b * b) / 2

     *
     *
     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

     var fn = function(a, b) {
     a = Math.abs(a);
     b = Math.abs(b);
     var t = Math.min(a, b);
     a = Math.max(a, b);
     t = t / a;

     return Math.log(a) + Math.log(1 + t * t) / 2;
     };

     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

     Math.log(a / Math.cos(Math.atan2(b, a)))

     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

     */

    return Math.log(a / Math.cos(Math.atan2(b, a)));
  }

  var parse = function(a, b) {

    var z = {'re': 0, 'im': 0};

    if (a === undefined || a === null) {
      z['re'] =
              z['im'] = 0;
    } else if (b !== undefined) {
      z['re'] = a;
      z['im'] = b;
    } else
      switch (typeof a) {

        case 'object':

          if ('im' in a && 're' in a) {
            z['re'] = a['re'];
            z['im'] = a['im'];
          } else if ('abs' in a && 'arg' in a) {
            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
              return Complex['INFINITY'];
            }
            z['re'] = a['abs'] * Math.cos(a['arg']);
            z['im'] = a['abs'] * Math.sin(a['arg']);
          } else if ('r' in a && 'phi' in a) {
            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
              return Complex['INFINITY'];
            }
            z['re'] = a['r'] * Math.cos(a['phi']);
            z['im'] = a['r'] * Math.sin(a['phi']);
          } else if (a.length === 2) { // Quick array check
            z['re'] = a[0];
            z['im'] = a[1];
          } else {
            parser_exit();
          }
          break;

        case 'string':

          z['im'] = /* void */
                  z['re'] = 0;

          var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
          var plus = 1;
          var minus = 0;

          if (tokens === null) {
            parser_exit();
          }

          for (var i = 0; i < tokens.length; i++) {

            var c = tokens[i];

            if (c === ' ' || c === '\t' || c === '\n') {
              /* void */
            } else if (c === '+') {
              plus++;
            } else if (c === '-') {
              minus++;
            } else if (c === 'i' || c === 'I') {

              if (plus + minus === 0) {
                parser_exit();
              }

              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
                i++;
              } else {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
              }
              plus = minus = 0;

            } else {

              if (plus + minus === 0 || isNaN(c)) {
                parser_exit();
              }

              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
                i++;
              } else {
                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
              }
              plus = minus = 0;
            }
          }

          // Still something on the stack
          if (plus + minus > 0) {
            parser_exit();
          }
          break;

        case 'number':
          z['im'] = 0;
          z['re'] = a;
          break;

        default:
          parser_exit();
      }

    if (isNaN(z['re']) || isNaN(z['im'])) {
      // If a calculation is NaN, we treat it as NaN and don't throw
      //parser_exit();
    }

    return z;
  };

  /**
   * @constructor
   * @returns {Complex}
   */
  function Complex(a, b) {

    if (!(this instanceof Complex)) {
      return new Complex(a, b);
    }

    var z = parse(a, b);

    this['re'] = z['re'];
    this['im'] = z['im'];
  }

  Complex.prototype = {

    're': 0,
    'im': 0,

    /**
     * Calculates the sign of a complex number, which is a normalized complex
     *
     * @returns {Complex}
     */
    'sign': function() {

      var abs = this['abs']();

      return new Complex(
              this['re'] / abs,
              this['im'] / abs);
    },

    /**
     * Adds two complex numbers
     *
     * @returns {Complex}
     */
    'add': function(a, b) {

      var z = new Complex(a, b);

      // Infinity + Infinity = NaN
      if (this['isInfinite']() && z['isInfinite']()) {
        return Complex['NAN'];
      }

      // Infinity + z = Infinity { where z != Infinity }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }

      return new Complex(
              this['re'] + z['re'],
              this['im'] + z['im']);
    },

    /**
     * Subtracts two complex numbers
     *
     * @returns {Complex}
     */
    'sub': function(a, b) {

      var z = new Complex(a, b);

      // Infinity - Infinity = NaN
      if (this['isInfinite']() && z['isInfinite']()) {
        return Complex['NAN'];
      }

      // Infinity - z = Infinity { where z != Infinity }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }

      return new Complex(
              this['re'] - z['re'],
              this['im'] - z['im']);
    },

    /**
     * Multiplies two complex numbers
     *
     * @returns {Complex}
     */
    'mul': function(a, b) {

      var z = new Complex(a, b);

      // Infinity * 0 = NaN
      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
        return Complex['NAN'];
      }

      // Infinity * z = Infinity { where z != 0 }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }

      // Short circuit for real values
      if (z['im'] === 0 && this['im'] === 0) {
        return new Complex(this['re'] * z['re'], 0);
      }

      return new Complex(
              this['re'] * z['re'] - this['im'] * z['im'],
              this['re'] * z['im'] + this['im'] * z['re']);
    },

    /**
     * Divides two complex numbers
     *
     * @returns {Complex}
     */
    'div': function(a, b) {

      var z = new Complex(a, b);

      // 0 / 0 = NaN and Infinity / Infinity = NaN
      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {
        return Complex['NAN'];
      }

      // Infinity / 0 = Infinity
      if (this['isInfinite']() || z['isZero']()) {
        return Complex['INFINITY'];
      }

      // 0 / Infinity = 0
      if (this['isZero']() || z['isInfinite']()) {
        return Complex['ZERO'];
      }

      a = this['re'];
      b = this['im'];

      var c = z['re'];
      var d = z['im'];
      var t, x;

      if (0 === d) {
        // Divisor is real
        return new Complex(a / c, b / c);
      }

      if (Math.abs(c) < Math.abs(d)) {

        x = c / d;
        t = c * x + d;

        return new Complex(
                (a * x + b) / t,
                (b * x - a) / t);

      } else {

        x = d / c;
        t = d * x + c;

        return new Complex(
                (a + b * x) / t,
                (b - a * x) / t);
      }
    },

    /**
     * Calculate the power of two complex numbers
     *
     * @returns {Complex}
     */
    'pow': function(a, b) {

      var z = new Complex(a, b);

      a = this['re'];
      b = this['im'];

      if (z['isZero']()) {
        return Complex['ONE'];
      }

      // If the exponent is real
      if (z['im'] === 0) {

        if (b === 0 && a >= 0) {

          return new Complex(Math.pow(a, z['re']), 0);

        } else if (a === 0) { // If base is fully imaginary

          switch ((z['re'] % 4 + 4) % 4) {
            case 0:
              return new Complex(Math.pow(b, z['re']), 0);
            case 1:
              return new Complex(0, Math.pow(b, z['re']));
            case 2:
              return new Complex(-Math.pow(b, z['re']), 0);
            case 3:
              return new Complex(0, -Math.pow(b, z['re']));
          }
        }
      }

      /* I couldn't find a good formula, so here is a derivation and optimization
       *
       * z_1^z_2 = (a + bi)^(c + di)
       *         = exp((c + di) * log(a + bi)
       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
       * =>...
       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       *
       * =>...
       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       *
       * =>
       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
       *
       */

      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
        return Complex['ZERO'];
      }

      var arg = Math.atan2(b, a);
      var loh = logHypot(a, b);

      a = Math.exp(z['re'] * loh - z['im'] * arg);
      b = z['im'] * loh + z['re'] * arg;
      return new Complex(
              a * Math.cos(b),
              a * Math.sin(b));
    },

    /**
     * Calculate the complex square root
     *
     * @returns {Complex}
     */
    'sqrt': function() {

      var a = this['re'];
      var b = this['im'];
      var r = this['abs']();

      var re, im;

      if (a >= 0) {

        if (b === 0) {
          return new Complex(Math.sqrt(a), 0);
        }

        re = 0.5 * Math.sqrt(2.0 * (r + a));
      } else {
        re = Math.abs(b) / Math.sqrt(2 * (r - a));
      }

      if (a <= 0) {
        im = 0.5 * Math.sqrt(2.0 * (r - a));
      } else {
        im = Math.abs(b) / Math.sqrt(2 * (r + a));
      }

      return new Complex(re, b < 0 ? -im : im);
    },

    /**
     * Calculate the complex exponent
     *
     * @returns {Complex}
     */
    'exp': function() {

      var tmp = Math.exp(this['re']);

      if (this['im'] === 0) {
        //return new Complex(tmp, 0);
      }
      return new Complex(
              tmp * Math.cos(this['im']),
              tmp * Math.sin(this['im']));
    },

    /**
     * Calculate the complex exponent and subtracts one.
     *
     * This may be more accurate than `Complex(x).exp().sub(1)` if
     * `x` is small.
     *
     * @returns {Complex}
     */
    'expm1': function() {

      /**
       * exp(a + i*b) - 1
       = exp(a) * (cos(b) + j*sin(b)) - 1
       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
       */

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.expm1(a) * Math.cos(b) + cosm1(b),
              Math.exp(a) * Math.sin(b));
    },

    /**
     * Calculate the natural log
     *
     * @returns {Complex}
     */
    'log': function() {

      var a = this['re'];
      var b = this['im'];

      if (b === 0 && a > 0) {
        //return new Complex(Math.log(a), 0);
      }

      return new Complex(
              logHypot(a, b),
              Math.atan2(b, a));
    },

    /**
     * Calculate the magnitude of the complex number
     *
     * @returns {number}
     */
    'abs': function() {

      return hypot(this['re'], this['im']);
    },

    /**
     * Calculate the angle of the complex number
     *
     * @returns {number}
     */
    'arg': function() {

      return Math.atan2(this['im'], this['re']);
    },

    /**
     * Calculate the sine of the complex number
     *
     * @returns {Complex}
     */
    'sin': function() {

      // sin(c) = (e^b - e^(-b)) / (2i)

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.sin(a) * cosh(b),
              Math.cos(a) * sinh(b));
    },

    /**
     * Calculate the cosine
     *
     * @returns {Complex}
     */
    'cos': function() {

      // cos(z) = (e^b + e^(-b)) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.cos(a) * cosh(b),
              -Math.sin(a) * sinh(b));
    },

    /**
     * Calculate the tangent
     *
     * @returns {Complex}
     */
    'tan': function() {

      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = Math.cos(a) + cosh(b);

      return new Complex(
              Math.sin(a) / d,
              sinh(b) / d);
    },

    /**
     * Calculate the cotangent
     *
     * @returns {Complex}
     */
    'cot': function() {

      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = Math.cos(a) - cosh(b);

      return new Complex(
              -Math.sin(a) / d,
              sinh(b) / d);
    },

    /**
     * Calculate the secant
     *
     * @returns {Complex}
     */
    'sec': function() {

      // sec(c) = 2 / (e^(ci) + e^(-ci))

      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

      return new Complex(
              Math.cos(a) * cosh(b) / d,
              Math.sin(a) * sinh(b) / d);
    },

    /**
     * Calculate the cosecans
     *
     * @returns {Complex}
     */
    'csc': function() {

      // csc(c) = 2i / (e^(ci) - e^(-ci))

      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

      return new Complex(
              Math.sin(a) * cosh(b) / d,
              -Math.cos(a) * sinh(b) / d);
    },

    /**
     * Calculate the complex arcus sinus
     *
     * @returns {Complex}
     */
    'asin': function() {

      // asin(c) = -i * log(ci + sqrt(1 - c^2))

      var a = this['re'];
      var b = this['im'];

      var t1 = new Complex(
              b * b - a * a + 1,
              -2 * a * b)['sqrt']();

      var t2 = new Complex(
              t1['re'] - b,
              t1['im'] + a)['log']();

      return new Complex(t2['im'], -t2['re']);
    },

    /**
     * Calculate the complex arcus cosinus
     *
     * @returns {Complex}
     */
    'acos': function() {

      // acos(c) = i * log(c - i * sqrt(1 - c^2))

      var a = this['re'];
      var b = this['im'];

      var t1 = new Complex(
              b * b - a * a + 1,
              -2 * a * b)['sqrt']();

      var t2 = new Complex(
              t1['re'] - b,
              t1['im'] + a)['log']();

      return new Complex(Math.PI / 2 - t2['im'], t2['re']);
    },

    /**
     * Calculate the complex arcus tangent
     *
     * @returns {Complex}
     */
    'atan': function() {

      // atan(c) = i / 2 log((i + x) / (i - x))

      var a = this['re'];
      var b = this['im'];

      if (a === 0) {

        if (b === 1) {
          return new Complex(0, Infinity);
        }

        if (b === -1) {
          return new Complex(0, -Infinity);
        }
      }

      var d = a * a + (1.0 - b) * (1.0 - b);

      var t1 = new Complex(
              (1 - b * b - a * a) / d,
              -2 * a / d).log();

      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
    },

    /**
     * Calculate the complex arcus cotangent
     *
     * @returns {Complex}
     */
    'acot': function() {

      // acot(c) = i / 2 log((c - i) / (c + i))

      var a = this['re'];
      var b = this['im'];

      if (b === 0) {
        return new Complex(Math.atan2(1, a), 0);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).atan()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).atan();
    },

    /**
     * Calculate the complex arcus secant
     *
     * @returns {Complex}
     */
    'asec': function() {

      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(0, Infinity);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).acos()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).acos();
    },

    /**
     * Calculate the complex arcus cosecans
     *
     * @returns {Complex}
     */
    'acsc': function() {

      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(Math.PI / 2, Infinity);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).asin()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).asin();
    },

    /**
     * Calculate the complex sinh
     *
     * @returns {Complex}
     */
    'sinh': function() {

      // sinh(c) = (e^c - e^-c) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              sinh(a) * Math.cos(b),
              cosh(a) * Math.sin(b));
    },

    /**
     * Calculate the complex cosh
     *
     * @returns {Complex}
     */
    'cosh': function() {

      // cosh(c) = (e^c + e^-c) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              cosh(a) * Math.cos(b),
              sinh(a) * Math.sin(b));
    },

    /**
     * Calculate the complex tanh
     *
     * @returns {Complex}
     */
    'tanh': function() {

      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = cosh(a) + Math.cos(b);

      return new Complex(
              sinh(a) / d,
              Math.sin(b) / d);
    },

    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'coth': function() {

      // coth(c) = (e^c + e^-c) / (e^c - e^-c)

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = cosh(a) - Math.cos(b);

      return new Complex(
              sinh(a) / d,
              -Math.sin(b) / d);
    },

    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'csch': function() {

      // csch(c) = 2 / (e^c - e^-c)

      var a = this['re'];
      var b = this['im'];
      var d = Math.cos(2 * b) - cosh(2 * a);

      return new Complex(
              -2 * sinh(a) * Math.cos(b) / d,
              2 * cosh(a) * Math.sin(b) / d);
    },

    /**
     * Calculate the complex sech
     *
     * @returns {Complex}
     */
    'sech': function() {

      // sech(c) = 2 / (e^c + e^-c)

      var a = this['re'];
      var b = this['im'];
      var d = Math.cos(2 * b) + cosh(2 * a);

      return new Complex(
              2 * cosh(a) * Math.cos(b) / d,
              -2 * sinh(a) * Math.sin(b) / d);
    },

    /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
    'asinh': function() {

      // asinh(c) = log(c + sqrt(c^2 + 1))

      var tmp = this['im'];
      this['im'] = -this['re'];
      this['re'] = tmp;
      var res = this['asin']();

      this['re'] = -this['im'];
      this['im'] = tmp;
      tmp = res['re'];

      res['re'] = -res['im'];
      res['im'] = tmp;
      return res;
    },

    /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
    'acosh': function() {

      // acosh(c) = log(c + sqrt(c^2 - 1))

      var res = this['acos']();
      if (res['im'] <= 0) {
        var tmp = res['re'];
        res['re'] = -res['im'];
        res['im'] = tmp;
      } else {
        var tmp = res['im'];
        res['im'] = -res['re'];
        res['re'] = tmp;
      }
      return res;
    },

    /**
     * Calculate the complex atanh
     *
     * @returns {Complex}
     */
    'atanh': function() {

      // atanh(c) = log((1+c) / (1-c)) / 2

      var a = this['re'];
      var b = this['im'];

      var noIM = a > 1 && b === 0;
      var oneMinus = 1 - a;
      var onePlus = 1 + a;
      var d = oneMinus * oneMinus + b * b;

      var x = (d !== 0)
              ? new Complex(
                      (onePlus * oneMinus - b * b) / d,
                      (b * oneMinus + onePlus * b) / d)
              : new Complex(
                      (a !== -1) ? (a / 0) : 0,
                      (b !== 0) ? (b / 0) : 0);

      var temp = x['re'];
      x['re'] = logHypot(x['re'], x['im']) / 2;
      x['im'] = Math.atan2(x['im'], temp) / 2;
      if (noIM) {
        x['im'] = -x['im'];
      }
      return x;
    },

    /**
     * Calculate the complex acoth
     *
     * @returns {Complex}
     */
    'acoth': function() {

      // acoth(c) = log((c+1) / (c-1)) / 2

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(0, Math.PI / 2);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).atanh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).atanh();
    },

    /**
     * Calculate the complex acsch
     *
     * @returns {Complex}
     */
    'acsch': function() {

      // acsch(c) = log((1+sqrt(1+c^2))/c)

      var a = this['re'];
      var b = this['im'];

      if (b === 0) {

        return new Complex(
                (a !== 0)
                ? Math.log(a + Math.sqrt(a * a + 1))
                : Infinity, 0);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).asinh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).asinh();
    },

    /**
     * Calculate the complex asech
     *
     * @returns {Complex}
     */
    'asech': function() {

      // asech(c) = log((1+sqrt(1-c^2))/c)

      var a = this['re'];
      var b = this['im'];

      if (this['isZero']()) {
        return Complex['INFINITY'];
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).acosh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).acosh();
    },

    /**
     * Calculate the complex inverse 1/z
     *
     * @returns {Complex}
     */
    'inverse': function() {

      // 1 / 0 = Infinity and 1 / Infinity = 0
      if (this['isZero']()) {
        return Complex['INFINITY'];
      }

      if (this['isInfinite']()) {
        return Complex['ZERO'];
      }

      var a = this['re'];
      var b = this['im'];

      var d = a * a + b * b;

      return new Complex(a / d, -b / d);
    },

    /**
     * Returns the complex conjugate
     *
     * @returns {Complex}
     */
    'conjugate': function() {

      return new Complex(this['re'], -this['im']);
    },

    /**
     * Gets the negated complex number
     *
     * @returns {Complex}
     */
    'neg': function() {

      return new Complex(-this['re'], -this['im']);
    },

    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'ceil': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.ceil(this['re'] * places) / places,
              Math.ceil(this['im'] * places) / places);
    },

    /**
     * Floors the actual complex number
     *
     * @returns {Complex}
     */
    'floor': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.floor(this['re'] * places) / places,
              Math.floor(this['im'] * places) / places);
    },

    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'round': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.round(this['re'] * places) / places,
              Math.round(this['im'] * places) / places);
    },

    /**
     * Compares two complex numbers
     *
     * **Note:** new Complex(Infinity).equals(Infinity) === false
     *
     * @returns {boolean}
     */
    'equals': function(a, b) {

      var z = new Complex(a, b);

      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
              Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
    },

    /**
     * Clones the actual object
     *
     * @returns {Complex}
     */
    'clone': function() {

      return new Complex(this['re'], this['im']);
    },

    /**
     * Gets a string of the actual complex number
     *
     * @returns {string}
     */
    'toString': function() {

      var a = this['re'];
      var b = this['im'];
      var ret = '';

      if (this['isNaN']()) {
        return 'NaN';
      }

      if (this['isZero']()) {
        return '0';
      }

      if (this['isInfinite']()) {
        return 'Infinity';
      }

      if (a !== 0) {
        ret += a;
      }

      if (b !== 0) {

        if (a !== 0) {
          ret += b < 0 ? ' - ' : ' + ';
        } else if (b < 0) {
          ret += '-';
        }

        b = Math.abs(b);

        if (1 !== b) {
          ret += b;
        }
        ret += 'i';
      }

      if (!ret)
        return '0';

      return ret;
    },

    /**
     * Returns the actual number as a vector
     *
     * @returns {Array}
     */
    'toVector': function() {

      return [this['re'], this['im']];
    },

    /**
     * Returns the actual real value of the current object
     *
     * @returns {number|null}
     */
    'valueOf': function() {

      if (this['im'] === 0) {
        return this['re'];
      }
      return null;
    },

    /**
     * Determines whether a complex number is not on the Riemann sphere.
     *
     * @returns {boolean}
     */
    'isNaN': function() {
      return isNaN(this['re']) || isNaN(this['im']);
    },

    /**
     * Determines whether or not a complex number is at the zero pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isZero': function() {
      return (
              (this['re'] === 0 || this['re'] === -0) &&
              (this['im'] === 0 || this['im'] === -0)
              );
    },

    /**
     * Determines whether a complex number is not at the infinity pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isFinite': function() {
      return isFinite(this['re']) && isFinite(this['im']);
    },

    /**
     * Determines whether or not a complex number is at the infinity pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isInfinite': function() {
      return !(this['isNaN']() || this['isFinite']());
    }
  };

  Complex['ZERO'] = new Complex(0, 0);
  Complex['ONE'] = new Complex(1, 0);
  Complex['I'] = new Complex(0, 1);
  Complex['PI'] = new Complex(Math.PI, 0);
  Complex['E'] = new Complex(Math.E, 0);
  Complex['INFINITY'] = new Complex(Infinity, Infinity);
  Complex['NAN'] = new Complex(NaN, NaN);
  Complex['EPSILON'] = 1e-16;

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return Complex;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}

})(this);


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IndexError; });
/**
 * Create a range error with the message:
 *     'Index out of range (index < min)'
 *     'Index out of range (index < max)'
 *
 * @param {number} index     The actual index
 * @param {number} [min=0]   Minimum index (included)
 * @param {number} [max]     Maximum index (excluded)
 * @extends RangeError
 */
function IndexError(index, min, max) {
  if (!(this instanceof IndexError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.index = index;

  if (arguments.length < 3) {
    this.min = 0;
    this.max = min;
  } else {
    this.min = min;
    this.max = max;
  }

  if (this.min !== undefined && this.index < this.min) {
    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
  } else if (this.max !== undefined && this.index >= this.max) {
    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
  } else {
    this.message = 'Index out of range (' + this.index + ')';
  }

  this.stack = new Error().stack;
}
IndexError.prototype = new RangeError();
IndexError.prototype.constructor = RangeError;
IndexError.prototype.name = 'IndexError';
IndexError.prototype.isIndexError = true;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license Fraction.js v4.0.12 09/09/2015
 * http://www.xarg.org/2014/03/rational-numbers-in-javascript/
 *
 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/


/**
 *
 * This class offers the possibility to calculate fractions.
 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
 *
 * Array/Object form
 * [ 0 => <nominator>, 1 => <denominator> ]
 * [ n => <nominator>, d => <denominator> ]
 *
 * Integer form
 * - Single integer value
 *
 * Double form
 * - Single double value
 *
 * String form
 * 123.456 - a simple double
 * 123/456 - a string fraction
 * 123.'456' - a double with repeating decimal places
 * 123.(456) - synonym
 * 123.45'6' - a double with repeating last place
 * 123.45(6) - synonym
 *
 * Example:
 *
 * var f = new Fraction("9.4'31'");
 * f.mul([-4, 3]).div(4.9);
 *
 */

(function(root) {

  "use strict";

  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
  var MAX_CYCLE_LEN = 2000;

  // Parsed data to avoid calling "new" all the time
  var P = {
    "s": 1,
    "n": 0,
    "d": 1
  };

  function createError(name) {

    function errorConstructor() {
      var temp = Error.apply(this, arguments);
      temp['name'] = this['name'] = name;
      this['stack'] = temp['stack'];
      this['message'] = temp['message'];
    }

    /**
     * Error constructor
     *
     * @constructor
     */
    function IntermediateInheritor() {}
    IntermediateInheritor.prototype = Error.prototype;
    errorConstructor.prototype = new IntermediateInheritor();

    return errorConstructor;
  }

  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');

  function assign(n, s) {

    if (isNaN(n = parseInt(n, 10))) {
      throwInvalidParam();
    }
    return n * s;
  }

  function throwInvalidParam() {
    throw new InvalidParameter();
  }

  var parse = function(p1, p2) {

    var n = 0, d = 1, s = 1;
    var v = 0, w = 0, x = 0, y = 1, z = 1;

    var A = 0, B = 1;
    var C = 1, D = 1;

    var N = 10000000;
    var M;

    if (p1 === undefined || p1 === null) {
      /* void */
    } else if (p2 !== undefined) {
      n = p1;
      d = p2;
      s = n * d;
    } else
      switch (typeof p1) {

        case "object":
        {
          if ("d" in p1 && "n" in p1) {
            n = p1["n"];
            d = p1["d"];
            if ("s" in p1)
              n *= p1["s"];
          } else if (0 in p1) {
            n = p1[0];
            if (1 in p1)
              d = p1[1];
          } else {
            throwInvalidParam();
          }
          s = n * d;
          break;
        }
        case "number":
        {
          if (p1 < 0) {
            s = p1;
            p1 = -p1;
          }

          if (p1 % 1 === 0) {
            n = p1;
          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

            if (p1 >= 1) {
              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
              p1 /= z;
            }

            // Using Farey Sequences
            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

            while (B <= N && D <= N) {
              M = (A + C) / (B + D);

              if (p1 === M) {
                if (B + D <= N) {
                  n = A + C;
                  d = B + D;
                } else if (D > B) {
                  n = C;
                  d = D;
                } else {
                  n = A;
                  d = B;
                }
                break;

              } else {

                if (p1 > M) {
                  A += C;
                  B += D;
                } else {
                  C += A;
                  D += B;
                }

                if (B > N) {
                  n = C;
                  d = D;
                } else {
                  n = A;
                  d = B;
                }
              }
            }
            n *= z;
          } else if (isNaN(p1) || isNaN(p2)) {
            d = n = NaN;
          }
          break;
        }
        case "string":
        {
          B = p1.match(/\d+|./g);

          if (B === null)
            throwInvalidParam();

          if (B[A] === '-') {// Check for minus sign at the beginning
            s = -1;
            A++;
          } else if (B[A] === '+') {// Check for plus sign at the beginning
            A++;
          }

          if (B.length === A + 1) { // Check if it's just a simple number "1234"
            w = assign(B[A++], s);
          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

            if (B[A] !== '.') { // Handle 0.5 and .5
              v = assign(B[A++], s);
            }
            A++;

            // Check for decimal places
            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
              w = assign(B[A], s);
              y = Math.pow(10, B[A].length);
              A++;
            }

            // Check for repeating places
            if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
              x = assign(B[A + 1], s);
              z = Math.pow(10, B[A + 1].length) - 1;
              A += 3;
            }

          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
            w = assign(B[A], s);
            y = assign(B[A + 2], 1);
            A += 3;
          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
            v = assign(B[A], s);
            w = assign(B[A + 2], s);
            y = assign(B[A + 4], 1);
            A += 5;
          }

          if (B.length <= A) { // Check for more tokens on the stack
            d = y * z;
            s = /* void */
                    n = x + d * v + z * w;
            break;
          }

          /* Fall through on error */
        }
        default:
          throwInvalidParam();
      }

    if (d === 0) {
      throw new DivisionByZero();
    }

    P["s"] = s < 0 ? -1 : 1;
    P["n"] = Math.abs(n);
    P["d"] = Math.abs(d);
  };

  function modpow(b, e, m) {

    var r = 1;
    for (; e > 0; b = (b * b) % m, e >>= 1) {

      if (e & 1) {
        r = (r * b) % m;
      }
    }
    return r;
  }


  function cycleLen(n, d) {

    for (; d % 2 === 0;
            d /= 2) {
    }

    for (; d % 5 === 0;
            d /= 5) {
    }

    if (d === 1) // Catch non-cyclic numbers
      return 0;

    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
    // 10^(d-1) % d == 1
    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
    // as we want to translate the numbers to strings.

    var rem = 10 % d;
    var t = 1;

    for (; rem !== 1; t++) {
      rem = rem * 10 % d;

      if (t > MAX_CYCLE_LEN)
        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
    }
    return t;
  }


     function cycleStart(n, d, len) {

    var rem1 = 1;
    var rem2 = modpow(10, len, d);

    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
      // Solve 10^s == 10^(s+t) (mod d)

      if (rem1 === rem2)
        return t;

      rem1 = rem1 * 10 % d;
      rem2 = rem2 * 10 % d;
    }
    return 0;
  }

  function gcd(a, b) {

    if (!a)
      return b;
    if (!b)
      return a;

    while (1) {
      a %= b;
      if (!a)
        return b;
      b %= a;
      if (!b)
        return a;
    }
  };

  /**
   * Module constructor
   *
   * @constructor
   * @param {number|Fraction=} a
   * @param {number=} b
   */
  function Fraction(a, b) {

    if (!(this instanceof Fraction)) {
      return new Fraction(a, b);
    }

    parse(a, b);

    if (Fraction['REDUCE']) {
      a = gcd(P["d"], P["n"]); // Abuse a
    } else {
      a = 1;
    }

    this["s"] = P["s"];
    this["n"] = P["n"] / a;
    this["d"] = P["d"] / a;
  }

  /**
   * Boolean global variable to be able to disable automatic reduction of the fraction
   *
   */
  Fraction['REDUCE'] = 1;

  Fraction.prototype = {

    "s": 1,
    "n": 0,
    "d": 1,

    /**
     * Calculates the absolute value
     *
     * Ex: new Fraction(-4).abs() => 4
     **/
    "abs": function() {

      return new Fraction(this["n"], this["d"]);
    },

    /**
     * Inverts the sign of the current fraction
     *
     * Ex: new Fraction(-4).neg() => 4
     **/
    "neg": function() {

      return new Fraction(-this["s"] * this["n"], this["d"]);
    },

    /**
     * Adds two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
     **/
    "add": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Subtracts two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
     **/
    "sub": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Multiplies two rational numbers
     *
     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
     **/
    "mul": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * P["s"] * this["n"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Divides two rational numbers
     *
     * Ex: new Fraction("-17.(345)").inverse().div(3)
     **/
    "div": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * P["s"] * this["n"] * P["d"],
              this["d"] * P["n"]
              );
    },

    /**
     * Clones the actual object
     *
     * Ex: new Fraction("-17.(345)").clone()
     **/
    "clone": function() {
      return new Fraction(this);
    },

    /**
     * Calculates the modulo of two rational numbers - a more precise fmod
     *
     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
     **/
    "mod": function(a, b) {

      if (isNaN(this['n']) || isNaN(this['d'])) {
        return new Fraction(NaN);
      }

      if (a === undefined) {
        return new Fraction(this["s"] * this["n"] % this["d"], 1);
      }

      parse(a, b);
      if (0 === P["n"] && 0 === this["d"]) {
        Fraction(0, 0); // Throw DivisionByZero
      }

      /*
       * First silly attempt, kinda slow
       *
       return that["sub"]({
       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
       "d": num["d"],
       "s": this["s"]
       });*/

      /*
       * New attempt: a1 / b1 = a2 / b2 * q + r
       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
       * => (b2 * a1 % a2 * b1) / (b1 * b2)
       */
      return new Fraction(
              this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
              P["d"] * this["d"]
              );
    },

    /**
     * Calculates the fractional gcd of two rational numbers
     *
     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
     */
    "gcd": function(a, b) {

      parse(a, b);

      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

      return new Fraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
    },

    /**
     * Calculates the fractional lcm of two rational numbers
     *
     * Ex: new Fraction(5,8).lcm(3,7) => 15
     */
    "lcm": function(a, b) {

      parse(a, b);

      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

      if (P["n"] === 0 && this["n"] === 0) {
        return new Fraction;
      }
      return new Fraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
    },

    /**
     * Calculates the ceil of a rational number
     *
     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
     **/
    "ceil": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Calculates the floor of a rational number
     *
     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
     **/
    "floor": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Rounds a rational numbers
     *
     * Ex: new Fraction('4.(3)').round() => (4 / 1)
     **/
    "round": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Gets the inverse of the fraction, means numerator and denumerator are exchanged
     *
     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
     **/
    "inverse": function() {

      return new Fraction(this["s"] * this["d"], this["n"]);
    },

    /**
     * Calculates the fraction to some integer exponent
     *
     * Ex: new Fraction(-1,2).pow(-3) => -8
     */
    "pow": function(m) {

      if (m < 0) {
        return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
      } else {
        return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
      }
    },

    /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
    "equals": function(a, b) {

      parse(a, b);
      return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
    },

    /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
    "compare": function(a, b) {

      parse(a, b);
      var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
      return (0 < t) - (t < 0);
    },

    "simplify": function(eps) {

      // First naive implementation, needs improvement

      if (isNaN(this['n']) || isNaN(this['d'])) {
        return this;
      }

      var cont = this['abs']()['toContinued']();

      eps = eps || 0.001;

      function rec(a) {
        if (a.length === 1)
          return new Fraction(a[0]);
        return rec(a.slice(1))['inverse']()['add'](a[0]);
      }

      for (var i = 0; i < cont.length; i++) {
        var tmp = rec(cont.slice(0, i + 1));
        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {
          return tmp['mul'](this['s']);
        }
      }
      return this;
    },

    /**
     * Check if two rational numbers are divisible
     *
     * Ex: new Fraction(19.6).divisible(1.5);
     */
    "divisible": function(a, b) {

      parse(a, b);
      return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
    },

    /**
     * Returns a decimal representation of the fraction
     *
     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
     **/
    'valueOf': function() {

      return this["s"] * this["n"] / this["d"];
    },

    /**
     * Returns a string-fraction representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
     **/
    'toFraction': function(excludeWhole) {

      var whole, str = "";
      var n = this["n"];
      var d = this["d"];
      if (this["s"] < 0) {
        str += '-';
      }

      if (d === 1) {
        str += n;
      } else {

        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
          str += whole;
          str += " ";
          n %= d;
        }

        str += n;
        str += '/';
        str += d;
      }
      return str;
    },

    /**
     * Returns a latex representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
     **/
    'toLatex': function(excludeWhole) {

      var whole, str = "";
      var n = this["n"];
      var d = this["d"];
      if (this["s"] < 0) {
        str += '-';
      }

      if (d === 1) {
        str += n;
      } else {

        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
          str += whole;
          n %= d;
        }

        str += "\\frac{";
        str += n;
        str += '}{';
        str += d;
        str += '}';
      }
      return str;
    },

    /**
     * Returns an array of continued fraction elements
     *
     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
     */
    'toContinued': function() {

      var t;
      var a = this['n'];
      var b = this['d'];
      var res = [];

      if (isNaN(this['n']) || isNaN(this['d'])) {
        return res;
      }

      do {
        res.push(Math.floor(a / b));
        t = a % b;
        a = b;
        b = t;
      } while (a !== 1);

      return res;
    },

    /**
     * Creates a string representation of a fraction with all digits
     *
     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
     **/
    'toString': function(dec) {

      var g;
      var N = this["n"];
      var D = this["d"];

      if (isNaN(N) || isNaN(D)) {
        return "NaN";
      }

      if (!Fraction['REDUCE']) {
        g = gcd(N, D);
        N /= g;
        D /= g;
      }

      dec = dec || 15; // 15 = decimal places when no repitation

      var cycLen = cycleLen(N, D); // Cycle length
      var cycOff = cycleStart(N, D, cycLen); // Cycle start

      var str = this['s'] === -1 ? "-" : "";

      str += N / D | 0;

      N %= D;
      N *= 10;

      if (N)
        str += ".";

      if (cycLen) {

        for (var i = cycOff; i--; ) {
          str += N / D | 0;
          N %= D;
          N *= 10;
        }
        str += "(";
        for (var i = cycLen; i--; ) {
          str += N / D | 0;
          N %= D;
          N *= 10;
        }
        str += ")";
      } else {
        for (var i = dec; N && i--; ) {
          str += N / D | 0;
          N %= D;
          N *= 10;
        }
      }
      return str;
    }
  };

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return Fraction;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}

})(this);


/***/ }),
/* 12 */
/***/ (function(module, exports) {

/*
 * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
 * Author: Jim Palmer (based on chunking idea from Dave Koelle)
 */
/*jshint unused:false */
module.exports = function naturalSort (a, b) {
	"use strict";
	var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
		sre = /(^[ ]*|[ ]*$)/g,
		dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
		hre = /^0x[0-9a-f]+$/i,
		ore = /^0/,
		i = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },
		// convert all to strings strip whitespace
		x = i(a).replace(sre, '') || '',
		y = i(b).replace(sre, '') || '',
		// chunk/tokenize
		xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
		yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
		// numeric, hex or date detection
		xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),
		yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
		oFxNcL, oFyNcL;
	// first try and sort Hex codes or Dates
	if (yD) {
		if ( xD < yD ) { return -1; }
		else if ( xD > yD ) { return 1; }
	}
	// natural sorting through split numeric strings and default strings
	for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
		// find floats not starting with '0', string or 0 if not defined (Clint Priest)
		oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
		oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
		// handle numeric vs string comparison - number < string - (Kyle Adams)
		if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }
		// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
		else if (typeof oFxNcL !== typeof oFyNcL) {
			oFxNcL += '';
			oFyNcL += '';
		}
		if (oFxNcL < oFyNcL) { return -1; }
		if (oFxNcL > oFyNcL) { return 1; }
	}
	return 0;
};


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ArgumentsError; });
/**
 * Create a syntax error with the message:
 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
 * @param {string} fn     Function name
 * @param {number} count  Actual argument count
 * @param {number} min    Minimum required argument count
 * @param {number} [max]  Maximum required argument count
 * @extends Error
 */
function ArgumentsError(fn, count, min, max) {
  if (!(this instanceof ArgumentsError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.fn = fn;
  this.count = count;
  this.min = min;
  this.max = max;
  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
  this.stack = new Error().stack;
}
ArgumentsError.prototype = new Error();
ArgumentsError.prototype.constructor = Error;
ArgumentsError.prototype.name = 'ArgumentsError';
ArgumentsError.prototype.isArgumentsError = true;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * typed-function
 *
 * Type checking for JavaScript functions
 *
 * https://github.com/josdejong/typed-function
 */


(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
}(this, function () {

  function ok () {
    return true;
  }

  function notOk () {
    return false;
  }

  function undef () {
    return undefined;
  }

  /**
   * @typedef {{
   *   params: Param[],
   *   fn: function
   * }} Signature
   *
   * @typedef {{
   *   types: Type[],
   *   restParam: boolean
   * }} Param
   *
   * @typedef {{
   *   name: string,
   *   typeIndex: number,
   *   test: function,
   *   conversion?: ConversionDef,
   *   conversionIndex: number,
   * }} Type
   *
   * @typedef {{
   *   from: string,
   *   to: string,
   *   convert: function (*) : *
   * }} ConversionDef
   *
   * @typedef {{
   *   name: string,
   *   test: function(*) : boolean
   * }} TypeDef
   */

  // create a new instance of typed-function
  function create () {
    // data type tests
    var _types = [
      { name: 'number',    test: function (x) { return typeof x === 'number' } },
      { name: 'string',    test: function (x) { return typeof x === 'string' } },
      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },
      { name: 'Function',  test: function (x) { return typeof x === 'function'} },
      { name: 'Array',     test: Array.isArray },
      { name: 'Date',      test: function (x) { return x instanceof Date } },
      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },
      { name: 'Object',    test: function (x) {
        return typeof x === 'object' && x !== null && x.constructor === Object
      }},
      { name: 'null',      test: function (x) { return x === null } },
      { name: 'undefined', test: function (x) { return x === undefined } }
    ];

    var anyType = {
      name: 'any',
      test: ok
    }

    // types which need to be ignored
    var _ignore = [];

    // type conversions
    var _conversions = [];

    // This is a temporary object, will be replaced with a typed function at the end
    var typed = {
      types: _types,
      conversions: _conversions,
      ignore: _ignore
    };

    /**
     * Find the test function for a type
     * @param {String} typeName
     * @return {TypeDef} Returns the type definition when found,
     *                    Throws a TypeError otherwise
     */
    function findTypeByName (typeName) {
      var entry = findInArray(typed.types, function (entry) {
        return entry.name === typeName;
      });

      if (entry) {
        return entry;
      }

      if (typeName === 'any') { // special baked-in case 'any'
        return anyType;
      }

      var hint = findInArray(typed.types, function (entry) {
        return entry.name.toLowerCase() === typeName.toLowerCase();
      });

      throw new TypeError('Unknown type "' + typeName + '"' +
          (hint ? ('. Did you mean "' + hint.name + '"?') : ''));
    }

    /**
     * Find the index of a type definition. Handles special case 'any'
     * @param {TypeDef} type
     * @return {number}
     */
    function findTypeIndex(type) {
      if (type === anyType) {
        return 999;
      }

      return typed.types.indexOf(type);
    }

    /**
     * Find a type that matches a value.
     * @param {*} value
     * @return {string} Returns the name of the first type for which
     *                  the type test matches the value.
     */
    function findTypeName(value) {
      var entry = findInArray(typed.types, function (entry) {
        return entry.test(value);
      });

      if (entry) {
        return entry.name;
      }

      throw new TypeError('Value has unknown type. Value: ' + value);
    }

    /**
     * Find a specific signature from a (composed) typed function, for example:
     *
     *   typed.find(fn, ['number', 'string'])
     *   typed.find(fn, 'number, string')
     *
     * Function find only only works for exact matches.
     *
     * @param {Function} fn                   A typed-function
     * @param {string | string[]} signature   Signature to be found, can be
     *                                        an array or a comma separated string.
     * @return {Function}                     Returns the matching signature, or
     *                                        throws an error when no signature
     *                                        is found.
     */
    function find (fn, signature) {
      if (!fn.signatures) {
        throw new TypeError('Function is no typed-function');
      }

      // normalize input
      var arr;
      if (typeof signature === 'string') {
        arr = signature.split(',');
        for (var i = 0; i < arr.length; i++) {
          arr[i] = arr[i].trim();
        }
      }
      else if (Array.isArray(signature)) {
        arr = signature;
      }
      else {
        throw new TypeError('String array or a comma separated string expected');
      }

      var str = arr.join(',');

      // find an exact match
      var match = fn.signatures[str];
      if (match) {
        return match;
      }

      // TODO: extend find to match non-exact signatures

      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
    }

    /**
     * Convert a given value to another data type.
     * @param {*} value
     * @param {string} type
     */
    function convert (value, type) {
      var from = findTypeName(value);

      // check conversion is needed
      if (type === from) {
        return value;
      }

      for (var i = 0; i < typed.conversions.length; i++) {
        var conversion = typed.conversions[i];
        if (conversion.from === from && conversion.to === type) {
          return conversion.convert(value);
        }
      }

      throw new Error('Cannot convert from ' + from + ' to ' + type);
    }
    
    /**
     * Stringify parameters in a normalized way
     * @param {Param[]} params
     * @return {string}
     */
    function stringifyParams (params) {
      return params
          .map(function (param) {
            var typeNames = param.types.map(getTypeName);

            return (param.restParam ? '...' : '') + typeNames.join('|');
          })
          .join(',');
    }

    /**
     * Parse a parameter, like "...number | boolean"
     * @param {string} param
     * @param {ConversionDef[]} conversions
     * @return {Param} param
     */
    function parseParam (param, conversions) {
      var restParam = param.indexOf('...') === 0;
      var types = (!restParam)
          ? param
          : (param.length > 3)
              ? param.slice(3)
              : 'any';

      var typeNames = types.split('|').map(trim)
          .filter(notEmpty)
          .filter(notIgnore);

      var matchingConversions = filterConversions(conversions, typeNames);

      var exactTypes = typeNames.map(function (typeName) {
        var type = findTypeByName(typeName);

        return {
          name: typeName,
          typeIndex: findTypeIndex(type),
          test: type.test,
          conversion: null,
          conversionIndex: -1
        };
      });

      var convertibleTypes = matchingConversions.map(function (conversion) {
        var type = findTypeByName(conversion.from);

        return {
          name: conversion.from,
          typeIndex: findTypeIndex(type),
          test: type.test,
          conversion: conversion,
          conversionIndex: conversions.indexOf(conversion)
        };
      });

      return {
        types: exactTypes.concat(convertibleTypes),
        restParam: restParam
      };
    }

    /**
     * Parse a signature with comma separated parameters,
     * like "number | boolean, ...string"
     * @param {string} signature
     * @param {function} fn
     * @param {ConversionDef[]} conversions
     * @return {Signature | null} signature
     */
    function parseSignature (signature, fn, conversions) {
      var params = [];

      if (signature.trim() !== '') {
        params = signature
            .split(',')
            .map(trim)
            .map(function (param, index, array) {
              var parsedParam = parseParam(param, conversions);

              if (parsedParam.restParam && (index !== array.length - 1)) {
                throw new SyntaxError('Unexpected rest parameter "' + param + '": ' +
                    'only allowed for the last parameter');
              }

              return parsedParam;
          });
      }

      if (params.some(isInvalidParam)) {
        // invalid signature: at least one parameter has no types
        // (they may have been filtered)
        return null;
      }

      return {
        params: params,
        fn: fn
      };
    }

    /**
     * Test whether a set of params contains a restParam
     * @param {Param[]} params
     * @return {boolean} Returns true when the last parameter is a restParam
     */
    function hasRestParam(params) {
      var param = last(params)
      return param ? param.restParam : false;
    }

    /**
     * Test whether a parameter contains conversions
     * @param {Param} param
     * @return {boolean} Returns true when at least one of the parameters
     *                   contains a conversion.
     */
    function hasConversions(param) {
      return param.types.some(function (type) {
        return type.conversion != null;
      });
    }

    /**
     * Create a type test for a single parameter, which can have one or multiple
     * types.
     * @param {Param} param
     * @return {function(x: *) : boolean} Returns a test function
     */
    function compileTest(param) {
      if (!param || param.types.length === 0) {
        // nothing to do
        return ok;
      }
      else if (param.types.length === 1) {
        return findTypeByName(param.types[0].name).test;
      }
      else if (param.types.length === 2) {
        var test0 = findTypeByName(param.types[0].name).test;
        var test1 = findTypeByName(param.types[1].name).test;
        return function or(x) {
          return test0(x) || test1(x);
        }
      }
      else { // param.types.length > 2
        var tests = param.types.map(function (type) {
          return findTypeByName(type.name).test;
        })
        return function or(x) {
          for (var i = 0; i < tests.length; i++) {
            if (tests[i](x)) {
              return true;
            }
          }
          return false;
        }
      }
    }

    /**
     * Create a test for all parameters of a signature
     * @param {Param[]} params
     * @return {function(args: Array<*>) : boolean}
     */
    function compileTests(params) {
      var tests, test0, test1;

      if (hasRestParam(params)) {
        // variable arguments like '...number'
        tests = initial(params).map(compileTest);
        var varIndex = tests.length;
        var lastTest = compileTest(last(params));
        var testRestParam = function (args) {
          for (var i = varIndex; i < args.length; i++) {
            if (!lastTest(args[i])) {
              return false;
            }
          }
          return true;
        }

        return function testArgs(args) {
          for (var i = 0; i < tests.length; i++) {
            if (!tests[i](args[i])) {
              return false;
            }
          }
          return testRestParam(args) && (args.length >= varIndex + 1);
        };
      }
      else {
        // no variable arguments
        if (params.length === 0) {
          return function testArgs(args) {
            return args.length === 0;
          };
        }
        else if (params.length === 1) {
          test0 = compileTest(params[0]);
          return function testArgs(args) {
            return test0(args[0]) && args.length === 1;
          };
        }
        else if (params.length === 2) {
          test0 = compileTest(params[0]);
          test1 = compileTest(params[1]);
          return function testArgs(args) {
            return test0(args[0]) && test1(args[1]) && args.length === 2;
          };
        }
        else { // arguments.length > 2
          tests = params.map(compileTest);
          return function testArgs(args) {
            for (var i = 0; i < tests.length; i++) {
              if (!tests[i](args[i])) {
                return false;
              }
            }
            return args.length === tests.length;
          };
        }
      }
    }

    /**
     * Find the parameter at a specific index of a signature.
     * Handles rest parameters.
     * @param {Signature} signature
     * @param {number} index
     * @return {Param | null} Returns the matching parameter when found,
     *                        null otherwise.
     */
    function getParamAtIndex(signature, index) {
      return index < signature.params.length
          ? signature.params[index]
          : hasRestParam(signature.params)
              ? last(signature.params)
              : null
    }

    /**
     * Get all type names of a parameter
     * @param {Signature} signature
     * @param {number} index
     * @param {boolean} excludeConversions
     * @return {string[]} Returns an array with type names
     */
    function getExpectedTypeNames (signature, index, excludeConversions) {
      var param = getParamAtIndex(signature, index);
      var types = param
          ? excludeConversions
                  ? param.types.filter(isExactType)
                  : param.types
          : [];

      return types.map(getTypeName);
    }

    /**
     * Returns the name of a type
     * @param {Type} type
     * @return {string} Returns the type name
     */
    function getTypeName(type) {
      return type.name;
    }

    /**
     * Test whether a type is an exact type or conversion
     * @param {Type} type
     * @return {boolean} Returns true when
     */
    function isExactType(type) {
      return type.conversion === null || type.conversion === undefined;
    }

    /**
     * Helper function for creating error messages: create an array with
     * all available types on a specific argument index.
     * @param {Signature[]} signatures
     * @param {number} index
     * @return {string[]} Returns an array with available types
     */
    function mergeExpectedParams(signatures, index) {
      var typeNames = uniq(flatMap(signatures, function (signature) {
        return getExpectedTypeNames(signature, index, false);
      }));

      return (typeNames.indexOf('any') !== -1) ? ['any'] : typeNames;
    }

    /**
     * Create
     * @param {string} name             The name of the function
     * @param {array.<*>} args          The actual arguments passed to the function
     * @param {Signature[]} signatures  A list with available signatures
     * @return {TypeError} Returns a type error with additional data
     *                     attached to it in the property `data`
     */
    function createError(name, args, signatures) {
      var err, expected;
      var _name = name || 'unnamed';

      // test for wrong type at some index
      var matchingSignatures = signatures;
      var index;
      for (index = 0; index < args.length; index++) {
        var nextMatchingDefs = matchingSignatures.filter(function (signature) {
          var test = compileTest(getParamAtIndex(signature, index));
          return (index < signature.params.length || hasRestParam(signature.params)) &&
              test(args[index]);
        });

        if (nextMatchingDefs.length === 0) {
          // no matching signatures anymore, throw error "wrong type"
          expected = mergeExpectedParams(matchingSignatures, index);
          if (expected.length > 0) {
            var actualType = findTypeName(args[index]);

            err = new TypeError('Unexpected type of argument in function ' + _name +
                ' (expected: ' + expected.join(' or ') +
                ', actual: ' + actualType + ', index: ' + index + ')');
            err.data = {
              category: 'wrongType',
              fn: _name,
              index: index,
              actual: actualType,
              expected: expected
            }
            return err;
          }
        }
        else {
          matchingSignatures = nextMatchingDefs;
        }
      }

      // test for too few arguments
      var lengths = matchingSignatures.map(function (signature) {
        return hasRestParam(signature.params) ? Infinity : signature.params.length;
      });
      if (args.length < Math.min.apply(null, lengths)) {
        expected = mergeExpectedParams(matchingSignatures, index);
        err = new TypeError('Too few arguments in function ' + _name +
            ' (expected: ' + expected.join(' or ') +
            ', index: ' + args.length + ')');
        err.data = {
          category: 'tooFewArgs',
          fn: _name,
          index: args.length,
          expected: expected
        }
        return err;
      }

      // test for too many arguments
      var maxLength = Math.max.apply(null, lengths);
      if (args.length > maxLength) {
        err = new TypeError('Too many arguments in function ' + _name +
            ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
        err.data = {
          category: 'tooManyArgs',
          fn: _name,
          index: args.length,
          expectedLength: maxLength
        }
        return err;
      }

      err = new TypeError('Arguments of type "' + args.join(', ') +
          '" do not match any of the defined signatures of function ' + _name + '.');
      err.data = {
        category: 'mismatch',
        actual: args.map(findTypeName)
      }
      return err;
    }

    /**
     * Find the lowest index of all exact types of a parameter (no conversions)
     * @param {Param} param
     * @return {number} Returns the index of the lowest type in typed.types
     */
    function getLowestTypeIndex (param) {
      var min = 999;

      for (var i = 0; i < param.types.length; i++) {
        if (isExactType(param.types[i])) {
          min = Math.min(min, param.types[i].typeIndex);
        }
      }

      return min;
    }

    /**
     * Find the lowest index of the conversion of all types of the parameter
     * having a conversion
     * @param {Param} param
     * @return {number} Returns the lowest index of the conversions of this type
     */
    function getLowestConversionIndex (param) {
      var min = 999;

      for (var i = 0; i < param.types.length; i++) {
        if (!isExactType(param.types[i])) {
          min = Math.min(min, param.types[i].conversionIndex);
        }
      }

      return min;
    }

    /**
     * Compare two params
     * @param {Param} param1
     * @param {Param} param2
     * @return {number} returns a negative number when param1 must get a lower
     *                  index than param2, a positive number when the opposite,
     *                  or zero when both are equal
     */
    function compareParams (param1, param2) {
      var c;

      // compare having a rest parameter or not
      c = param1.restParam - param2.restParam;
      if (c !== 0) {
        return c;
      }

      // compare having conversions or not
      c = hasConversions(param1) - hasConversions(param2);
      if (c !== 0) {
        return c;
      }

      // compare the index of the types
      c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);
      if (c !== 0) {
        return c;
      }

      // compare the index of any conversion
      return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);
    }

    /**
     * Compare two signatures
     * @param {Signature} signature1
     * @param {Signature} signature2
     * @return {number} returns a negative number when param1 must get a lower
     *                  index than param2, a positive number when the opposite,
     *                  or zero when both are equal
     */
    function compareSignatures (signature1, signature2) {
      var len = Math.min(signature1.params.length, signature2.params.length);
      var i;
      var c;

      // compare whether the params have conversions at all or not
      c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions)
      if (c !== 0) {
        return c;
      }

      // next compare whether the params have conversions one by one
      for (i = 0; i < len; i++) {
        c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);
        if (c !== 0) {
          return c;
        }
      }

      // compare the types of the params one by one
      for (i = 0; i < len; i++) {
        c = compareParams(signature1.params[i], signature2.params[i]);
        if (c !== 0) {
          return c;
        }
      }

      // compare the number of params
      return signature1.params.length - signature2.params.length;
    }

    /**
     * Get params containing all types that can be converted to the defined types.
     *
     * @param {ConversionDef[]} conversions
     * @param {string[]} typeNames
     * @return {ConversionDef[]} Returns the conversions that are available
     *                        for every type (if any)
     */
    function filterConversions(conversions, typeNames) {
      var matches = {};

      conversions.forEach(function (conversion) {
        if (typeNames.indexOf(conversion.from) === -1 &&
            typeNames.indexOf(conversion.to) !== -1 &&
            !matches[conversion.from]) {
          matches[conversion.from] = conversion;
        }
      });

      return Object.keys(matches).map(function (from) {
        return matches[from];
      });
    }

    /**
     * Preprocess arguments before calling the original function:
     * - if needed convert the parameters
     * - in case of rest parameters, move the rest parameters into an Array
     * @param {Param[]} params
     * @param {function} fn
     * @return {function} Returns a wrapped function
     */
    function compileArgsPreprocessing(params, fn) {
      var fnConvert = fn;

      // TODO: can we make this wrapper function smarter/simpler?

      if (params.some(hasConversions)) {
        var restParam = hasRestParam(params);
        var compiledConversions = params.map(compileArgConversion)

        fnConvert = function convertArgs() {
          var args = [];
          var last = restParam ? arguments.length - 1 : arguments.length;
          for (var i = 0; i < last; i++) {
            args[i] = compiledConversions[i](arguments[i]);
          }
          if (restParam) {
            args[last] = arguments[last].map(compiledConversions[last]);
          }

          return fn.apply(null, args);
        }
      }

      var fnPreprocess = fnConvert;
      if (hasRestParam(params)) {
        var offset = params.length - 1;

        fnPreprocess = function preprocessRestParams () {
          return fnConvert.apply(null,
              slice(arguments, 0, offset).concat([slice(arguments, offset)]));
        }
      }

      return fnPreprocess;
    }

    /**
     * Compile conversion for a parameter to the right type
     * @param {Param} param
     * @return {function} Returns the wrapped function that will convert arguments
     *
     */
    function compileArgConversion(param) {
      var test0, test1, conversion0, conversion1;
      var tests = [];
      var conversions = [];

      param.types.forEach(function (type) {
        if (type.conversion) {
          tests.push(findTypeByName(type.conversion.from).test);
          conversions.push(type.conversion.convert);
        }
      });

      // create optimized conversion functions depending on the number of conversions
      switch (conversions.length) {
        case 0:
          return function convertArg(arg) {
            return arg;
          }

        case 1:
          test0 = tests[0]
          conversion0 = conversions[0];
          return function convertArg(arg) {
            if (test0(arg)) {
              return conversion0(arg)
            }
            return arg;
          }

        case 2:
          test0 = tests[0]
          test1 = tests[1]
          conversion0 = conversions[0];
          conversion1 = conversions[1];
          return function convertArg(arg) {
            if (test0(arg)) {
              return conversion0(arg)
            }
            if (test1(arg)) {
              return conversion1(arg)
            }
            return arg;
          }

        default:
          return function convertArg(arg) {
            for (var i = 0; i < conversions.length; i++) {
              if (tests[i](arg)) {
                return conversions[i](arg);
              }
            }
            return arg;
          }
      }
    }

    /**
     * Convert an array with signatures into a map with signatures,
     * where signatures with union types are split into separate signatures
     *
     * Throws an error when there are conflicting types
     *
     * @param {Signature[]} signatures
     * @return {Object.<string, function>}  Returns a map with signatures
     *                                      as key and the original function
     *                                      of this signature as value.
     */
    function createSignaturesMap(signatures) {
      var signaturesMap = {};
      signatures.forEach(function (signature) {
        if (!signature.params.some(hasConversions)) {
          splitParams(signature.params, true).forEach(function (params) {
            signaturesMap[stringifyParams(params)] = signature.fn;
          });
        }
      });

      return signaturesMap;
    }

    /**
     * Split params with union types in to separate params.
     *
     * For example:
     *
     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
     *     // returns:
     *     // [
     *     //   ['Array', 'string'],
     *     //   ['Array', 'RegExp'],
     *     //   ['Object', 'string'],
     *     //   ['Object', 'RegExp']
     *     // ]
     *
     * @param {Param[]} params
     * @param {boolean} ignoreConversionTypes
     * @return {Param[]}
     */
    function splitParams(params, ignoreConversionTypes) {
      function _splitParams(params, index, types) {
        if (index < params.length) {
          var param = params[index]
          var filteredTypes = ignoreConversionTypes
              ? param.types.filter(isExactType)
              : param.types;
          var typeGroups

          if (param.restParam) {
            // split the types of a rest parameter in two:
            // one with only exact types, and one with exact types and conversions
            var exactTypes = filteredTypes.filter(isExactType)
            typeGroups = exactTypes.length < filteredTypes.length
                ? [exactTypes, filteredTypes]
                : [filteredTypes]

          }
          else {
            // split all the types of a regular parameter into one type per group
            typeGroups = filteredTypes.map(function (type) {
              return [type]
            })
          }

          // recurse over the groups with types
          return flatMap(typeGroups, function (typeGroup) {
            return _splitParams(params, index + 1, types.concat([typeGroup]));
          });

        }
        else {
          // we've reached the end of the parameters. Now build a new Param
          var splittedParams = types.map(function (type, typeIndex) {
            return {
              types: type,
              restParam: (typeIndex === params.length - 1) && hasRestParam(params)
            }
          });

          return [splittedParams];
        }
      }

      return _splitParams(params, 0, []);
    }

    /**
     * Test whether two signatures have a conflicting signature
     * @param {Signature} signature1
     * @param {Signature} signature2
     * @return {boolean} Returns true when the signatures conflict, false otherwise.
     */
    function hasConflictingParams(signature1, signature2) {
      var ii = Math.max(signature1.params.length, signature2.params.length);

      for (var i = 0; i < ii; i++) {
        var typesNames1 = getExpectedTypeNames(signature1, i, true);
        var typesNames2 = getExpectedTypeNames(signature2, i, true);

        if (!hasOverlap(typesNames1, typesNames2)) {
          return false;
        }
      }

      var len1 = signature1.params.length;
      var len2 = signature2.params.length;
      var restParam1 = hasRestParam(signature1.params);
      var restParam2 = hasRestParam(signature2.params);

      return restParam1
          ? restParam2 ? (len1 === len2) : (len2 >= len1)
          : restParam2 ? (len1 >= len2)  : (len1 === len2)
    }

    /**
     * Create a typed function
     * @param {String} name               The name for the typed function
     * @param {Object.<string, function>} signaturesMap
     *                                    An object with one or
     *                                    multiple signatures as key, and the
     *                                    function corresponding to the
     *                                    signature as value.
     * @return {function}  Returns the created typed function.
     */
    function createTypedFunction(name, signaturesMap) {
      if (Object.keys(signaturesMap).length === 0) {
        throw new SyntaxError('No signatures provided');
      }

      // parse the signatures, and check for conflicts
      var parsedSignatures = [];
      Object.keys(signaturesMap)
          .map(function (signature) {
            return parseSignature(signature, signaturesMap[signature], typed.conversions);
          })
          .filter(notNull)
          .forEach(function (parsedSignature) {
            // check whether this parameter conflicts with already parsed signatures
            var conflictingSignature = findInArray(parsedSignatures, function (s) {
              return hasConflictingParams(s, parsedSignature)
            });
            if (conflictingSignature) {
              throw new TypeError('Conflicting signatures "' +
                  stringifyParams(conflictingSignature.params) + '" and "' +
                  stringifyParams(parsedSignature.params) + '".');
            }

            parsedSignatures.push(parsedSignature);
          });

      // split and filter the types of the signatures, and then order them
      var signatures = flatMap(parsedSignatures, function (parsedSignature) {
        var params = parsedSignature ? splitParams(parsedSignature.params, false) : []

        return params.map(function (params) {
          return {
            params: params,
            fn: parsedSignature.fn
          };
        });
      }).filter(notNull);

      signatures.sort(compareSignatures);

      // we create a highly optimized checks for the first couple of signatures with max 2 arguments
      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;

      // compile the tests
      var tests = signatures.map(function (signature) {
        return compileTests(signature.params);
      });

      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;

      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;

      // compile the functions
      var fns = signatures.map(function(signature) {
        return compileArgsPreprocessing(signature.params, signature.fn)
      });

      var fn0 = ok0 ? fns[0] : undef;
      var fn1 = ok1 ? fns[1] : undef;
      var fn2 = ok2 ? fns[2] : undef;
      var fn3 = ok3 ? fns[3] : undef;
      var fn4 = ok4 ? fns[4] : undef;
      var fn5 = ok5 ? fns[5] : undef;

      var len0 = ok0 ? signatures[0].params.length : -1;
      var len1 = ok1 ? signatures[1].params.length : -1;
      var len2 = ok2 ? signatures[2].params.length : -1;
      var len3 = ok3 ? signatures[3].params.length : -1;
      var len4 = ok4 ? signatures[4].params.length : -1;
      var len5 = ok5 ? signatures[5].params.length : -1;

      // simple and generic, but also slow
      var iStart = allOk ? 6 : 0;
      var iEnd = signatures.length;
      var generic = function generic() {
        'use strict';

        for (var i = iStart; i < iEnd; i++) {
          if (tests[i](arguments)) {
            return fns[i].apply(null, arguments);
          }
        }

        throw createError(name, arguments, signatures);
      }

      // create the typed function
      // fast, specialized version. Falls back to the slower, generic one if needed
      var fn = function fn(arg0, arg1) {
        'use strict';

        if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(null, arguments); }
        if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(null, arguments); }
        if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(null, arguments); }
        if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(null, arguments); }
        if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(null, arguments); }
        if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(null, arguments); }

        return generic.apply(null, arguments);
      }

      // attach name the typed function
      try {
        Object.defineProperty(fn, 'name', {value: name});
      }
      catch (err) {
        // old browsers do not support Object.defineProperty and some don't support setting the name property
        // the function name is not essential for the functioning, it's mostly useful for debugging,
        // so it's fine to have unnamed functions.
      }

      // attach signatures to the function
      fn.signatures = createSignaturesMap(signatures);

      return fn;
    }

    /**
     * Test whether a type should be NOT be ignored
     * @param {string} typeName
     * @return {boolean}
     */
    function notIgnore(typeName) {
      return typed.ignore.indexOf(typeName) === -1;
    }

    /**
     * trim a string
     * @param {string} str
     * @return {string}
     */
    function trim(str) {
      return str.trim();
    }

    /**
     * Test whether a string is not empty
     * @param {string} str
     * @return {boolean}
     */
    function notEmpty(str) {
      return !!str;
    }

    /**
     * test whether a value is not strict equal to null
     * @param {*} value
     * @return {boolean}
     */
    function notNull(value) {
      return value !== null;
    }

    /**
     * Test whether a parameter has no types defined
     * @param {Param} param
     * @return {boolean}
     */
    function isInvalidParam (param) {
      return param.types.length === 0;
    }

    /**
     * Return all but the last items of an array
     * @param {Array} arr
     * @return {Array}
     */
    function initial(arr) {
      return arr.slice(0, arr.length - 1);
    }

    /**
     * return the last item of an array
     * @param {Array} arr
     * @return {*}
     */
    function last(arr) {
      return arr[arr.length - 1];
    }

    /**
     * Slice an array or function Arguments
     * @param {Array | Arguments | IArguments} arr
     * @param {number} start
     * @param {number} [end]
     * @return {Array}
     */
    function slice(arr, start, end) {
      return Array.prototype.slice.call(arr, start, end);
    }

    /**
     * Test whether an array contains some item
     * @param {Array} array
     * @param {*} item
     * @return {boolean} Returns true if array contains item, false if not.
     */
    function contains(array, item) {
      return array.indexOf(item) !== -1;
    }

    /**
     * Test whether two arrays have overlapping items
     * @param {Array} array1
     * @param {Array} array2
     * @return {boolean} Returns true when at least one item exists in both arrays
     */
    function hasOverlap(array1, array2) {
      for (var i = 0; i < array1.length; i++) {
        if (contains(array2, array1[i])) {
          return true;
        }
      }

      return false;
    }

    /**
     * Return the first item from an array for which test(arr[i]) returns true
     * @param {Array} arr
     * @param {function} test
     * @return {* | undefined} Returns the first matching item
     *                         or undefined when there is no match
     */
    function findInArray(arr, test) {
      for (var i = 0; i < arr.length; i++) {
        if (test(arr[i])) {
          return arr[i];
        }
      }
      return undefined;
    }

    /**
     * Filter unique items of an array with strings
     * @param {string[]} arr
     * @return {string[]}
     */
    function uniq(arr) {
      var entries = {}
      for (var i = 0; i < arr.length; i++) {
        entries[arr[i]] = true;
      }
      return Object.keys(entries);
    }

    /**
     * Flat map the result invoking a callback for every item in an array.
     * https://gist.github.com/samgiles/762ee337dff48623e729
     * @param {Array} arr
     * @param {function} callback
     * @return {Array}
     */
    function flatMap(arr, callback) {
      return Array.prototype.concat.apply([], arr.map(callback));
    }

    /**
     * Retrieve the function name from a set of typed functions,
     * and check whether the name of all functions match (if given)
     * @param {function[]} fns
     */
    function getName (fns) {
      var name = '';

      for (var i = 0; i < fns.length; i++) {
        var fn = fns[i];

        // check whether the names are the same when defined
        if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {
          if (name === '') {
            name = fn.name;
          }
          else if (name !== fn.name) {
            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
            err.data = {
              actual: fn.name,
              expected: name
            };
            throw err;
          }
        }
      }

      return name;
    }

    // extract and merge all signatures of a list with typed functions
    function extractSignatures(fns) {
      var err;
      var signaturesMap = {};

      function validateUnique(_signature, _fn) {
        if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {
          err = new Error('Signature "' + _signature + '" is defined twice');
          err.data = {signature: _signature};
          throw err;
          // else: both signatures point to the same function, that's fine
        }
      }

      for (var i = 0; i < fns.length; i++) {
        var fn = fns[i];

        // test whether this is a typed-function
        if (typeof fn.signatures === 'object') {
          // merge the signatures
          for (var signature in fn.signatures) {
            if (fn.signatures.hasOwnProperty(signature)) {
              validateUnique(signature, fn.signatures[signature]);
              signaturesMap[signature] = fn.signatures[signature];
            }
          }
        }
        else if (typeof fn.signature === 'string') {
          validateUnique(fn.signature, fn);
          signaturesMap[fn.signature] = fn;
        }
        else {
          err = new TypeError('Function is no typed-function (index: ' + i + ')');
          err.data = {index: i};
          throw err;
        }
      }

      return signaturesMap;
    }

    typed = createTypedFunction('typed', {
      'string, Object': createTypedFunction,
      'Object': function (signaturesMap) {
        // find existing name
        var fns = [];
        for (var signature in signaturesMap) {
          if (signaturesMap.hasOwnProperty(signature)) {
            fns.push(signaturesMap[signature]);
          }
        }
        var name = getName(fns);
        return createTypedFunction(name, signaturesMap);
      },
      '...Function': function (fns) {
        return createTypedFunction(getName(fns), extractSignatures(fns));
      },
      'string, ...Function': function (name, fns) {
        return createTypedFunction(name, extractSignatures(fns));
      }
    });

    typed.create = create;
    typed.types = _types;
    typed.conversions = _conversions;
    typed.ignore = _ignore;
    typed.convert = convert;
    typed.find = find;

    /**
     * add a type
     * @param {{name: string, test: function}} type
     * @param {boolean} [beforeObjectTest=true]
     *                          If true, the new test will be inserted before
     *                          the test with name 'Object' (if any), since
     *                          tests for Object match Array and classes too.
     */
    typed.addType = function (type, beforeObjectTest) {
      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
        throw new TypeError('Object with properties {name: string, test: function} expected');
      }

      if (beforeObjectTest !== false) {
        for (var i = 0; i < typed.types.length; i++) {
          if (typed.types[i].name === 'Object') {
            typed.types.splice(i, 0, type);
            return
          }
        }
      }

      typed.types.push(type);
    };

    // add a conversion
    typed.addConversion = function (conversion) {
      if (!conversion
          || typeof conversion.from !== 'string'
          || typeof conversion.to !== 'string'
          || typeof conversion.convert !== 'function') {
        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
      }

      typed.conversions.push(conversion);
    };

    return typed;
  }

  return create();
}));

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var width = 256;// each RC4 output is 0 <= x < 256
var chunks = 6;// at least six RC4 outputs for each double
var digits = 52;// there are 52 significant digits in a double
var pool = [];// pool: entropy pool starts empty
var GLOBAL = typeof global === 'undefined' ? window : global;

//
// The following constants are related to IEEE 754 limits.
//
var startdenom = Math.pow(width, chunks),
    significance = Math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1;


var oldRandom = Math.random;

//
// seedrandom()
// This is the seedrandom function described above.
//
module.exports = function(seed, options) {
  if (options && options.global === true) {
    options.global = false;
    Math.random = module.exports(seed, options);
    options.global = true;
    return Math.random;
  }
  var use_entropy = (options && options.entropy) || false;
  var key = [];

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    use_entropy ? [seed, tostring(pool)] :
    0 in arguments ? seed : autoseed(), 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Override Math.random

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.

  return function() {         // Closure to return a random double:
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer Math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };
};

module.exports.resetGlobal = function () {
  Math.random = oldRandom;
};

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
/** @constructor */
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability discard an initial batch of values.
    // See http://www.rsa.com/rsalabs/node.asp?id=2009
  })(width);
}

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj)[0], prop;
  if (depth && typ == 'o') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 's' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto if available.
//
/** @param {Uint8Array=} seed */
function autoseed(seed) {
  try {
    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
    return tostring(seed);
  } catch (e) {
    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,
            GLOBAL.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to intefere with determinstic PRNG state later,
// seedrandom will not call Math.random on its own again after
// initialization.
//
mixkey(Math.random(), pool);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(20)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalScope) {
  'use strict';


  /*
   *  decimal.js v10.2.0
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   */


  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


    // The maximum exponent magnitude.
    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
  var EXP_LIMIT = 9e15,                      // 0 to 9e15

    // The limit on the value of `precision`, and on the value of the first argument to
    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
    MAX_DIGITS = 1e9,                        // 0 to 1e9

    // Base conversion alphabet.
    NUMERALS = '0123456789abcdef',

    // The natural logarithm of 10 (1025 digits).
    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

    // Pi (1025 digits).
    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


    // The initial configuration properties of the Decimal constructor.
    DEFAULTS = {

      // These values must be integers within the stated ranges (inclusive).
      // Most of these values can be changed at run-time using the `Decimal.config` method.

      // The maximum number of significant digits of the result of a calculation or base conversion.
      // E.g. `Decimal.config({ precision: 20 });`
      precision: 20,                         // 1 to MAX_DIGITS

      // The rounding mode used when rounding to `precision`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `Decimal.rounding = 4;`
      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
      rounding: 4,                           // 0 to 8

      // The modulo mode used when calculating the modulus: a mod n.
      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
      // The remainder (r) is calculated as: r = a - n * q.
      //
      // UP         0 The remainder is positive if the dividend is negative, else is negative.
      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
      // FLOOR      3 The remainder has the same sign as the divisor (Python %).
      // HALF_EVEN  6 The IEEE 754 remainder function.
      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
      //
      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
      // division (9) are commonly used for the modulus operation. The other rounding modes can also
      // be used, but they may not give useful results.
      modulo: 1,                             // 0 to 9

      // The exponent value at and beneath which `toString` returns exponential notation.
      // JavaScript numbers: -7
      toExpNeg: -7,                          // 0 to -EXP_LIMIT

      // The exponent value at and above which `toString` returns exponential notation.
      // JavaScript numbers: 21
      toExpPos:  21,                         // 0 to EXP_LIMIT

      // The minimum exponent value, beneath which underflow to zero occurs.
      // JavaScript numbers: -324  (5e-324)
      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

      // The maximum exponent value, above which overflow to Infinity occurs.
      // JavaScript numbers: 308  (1.7976931348623157e+308)
      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

      // Whether to use cryptographically-secure random number generation, if available.
      crypto: false                          // true/false
    },


  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


    Decimal, inexact, noConflict, quadrant,
    external = true,

    decimalError = '[DecimalError] ',
    invalidArgument = decimalError + 'Invalid argument: ',
    precisionLimitExceeded = decimalError + 'Precision limit exceeded',
    cryptoUnavailable = decimalError + 'crypto unavailable',

    mathfloor = Math.floor,
    mathpow = Math.pow,

    isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
    isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
    isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
    isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

    BASE = 1e7,
    LOG_BASE = 7,
    MAX_SAFE_INTEGER = 9007199254740991,

    LN10_PRECISION = LN10.length - 1,
    PI_PRECISION = PI.length - 1,

    // Decimal.prototype object
    P = { name: '[object Decimal]' };


  // Decimal prototype methods


  /*
   *  absoluteValue             abs
   *  ceil
   *  comparedTo                cmp
   *  cosine                    cos
   *  cubeRoot                  cbrt
   *  decimalPlaces             dp
   *  dividedBy                 div
   *  dividedToIntegerBy        divToInt
   *  equals                    eq
   *  floor
   *  greaterThan               gt
   *  greaterThanOrEqualTo      gte
   *  hyperbolicCosine          cosh
   *  hyperbolicSine            sinh
   *  hyperbolicTangent         tanh
   *  inverseCosine             acos
   *  inverseHyperbolicCosine   acosh
   *  inverseHyperbolicSine     asinh
   *  inverseHyperbolicTangent  atanh
   *  inverseSine               asin
   *  inverseTangent            atan
   *  isFinite
   *  isInteger                 isInt
   *  isNaN
   *  isNegative                isNeg
   *  isPositive                isPos
   *  isZero
   *  lessThan                  lt
   *  lessThanOrEqualTo         lte
   *  logarithm                 log
   *  [maximum]                 [max]
   *  [minimum]                 [min]
   *  minus                     sub
   *  modulo                    mod
   *  naturalExponential        exp
   *  naturalLogarithm          ln
   *  negated                   neg
   *  plus                      add
   *  precision                 sd
   *  round
   *  sine                      sin
   *  squareRoot                sqrt
   *  tangent                   tan
   *  times                     mul
   *  toBinary
   *  toDecimalPlaces           toDP
   *  toExponential
   *  toFixed
   *  toFraction
   *  toHexadecimal             toHex
   *  toNearest
   *  toNumber
   *  toOctal
   *  toPower                   pow
   *  toPrecision
   *  toSignificantDigits       toSD
   *  toString
   *  truncated                 trunc
   *  valueOf                   toJSON
   */


  /*
   * Return a new Decimal whose value is the absolute value of this Decimal.
   *
   */
  P.absoluteValue = P.abs = function () {
    var x = new this.constructor(this);
    if (x.s < 0) x.s = 1;
    return finalise(x);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of positive Infinity.
   *
   */
  P.ceil = function () {
    return finalise(new this.constructor(this), this.e + 1, 2);
  };


  /*
   * Return
   *   1    if the value of this Decimal is greater than the value of `y`,
   *  -1    if the value of this Decimal is less than the value of `y`,
   *   0    if they have the same value,
   *   NaN  if the value of either Decimal is NaN.
   *
   */
  P.comparedTo = P.cmp = function (y) {
    var i, j, xdL, ydL,
      x = this,
      xd = x.d,
      yd = (y = new x.constructor(y)).d,
      xs = x.s,
      ys = y.s;

    // Either NaN or ±Infinity?
    if (!xd || !yd) {
      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
    }

    // Either zero?
    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

    // Signs differ?
    if (xs !== ys) return xs;

    // Compare exponents.
    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

    xdL = xd.length;
    ydL = yd.length;

    // Compare digit by digit.
    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
    }

    // Compare lengths.
    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
  };


  /*
   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * cos(0)         = 1
   * cos(-0)        = 1
   * cos(Infinity)  = NaN
   * cos(-Infinity) = NaN
   * cos(NaN)       = NaN
   *
   */
  P.cosine = P.cos = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.d) return new Ctor(NaN);

    // cos(0) = cos(-0) = 1
    if (!x.d[0]) return new Ctor(1);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
  };


  /*
   *
   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   *  cbrt(0)  =  0
   *  cbrt(-0) = -0
   *  cbrt(1)  =  1
   *  cbrt(-1) = -1
   *  cbrt(N)  =  N
   *  cbrt(-I) = -I
   *  cbrt(I)  =  I
   *
   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
   *
   */
  P.cubeRoot = P.cbrt = function () {
    var e, m, n, r, rep, s, sd, t, t3, t3plusx,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);
    external = false;

    // Initial estimate.
    s = x.s * mathpow(x.s * x, 1 / 3);

     // Math.cbrt underflow/overflow?
     // Pass x to Math.pow as integer, then adjust the exponent of the result.
    if (!s || Math.abs(s) == 1 / 0) {
      n = digitsToString(x.d);
      e = x.e;

      // Adjust n exponent so it is a multiple of 3 away from x exponent.
      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
      s = mathpow(n, 1 / 3);

      // Rarely, e may be one less than the result exponent value.
      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
      r.s = x.s;
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Halley's method.
    // TODO? Compare Newton's method.
    for (;;) {
      t = r;
      t3 = t.times(t).times(t);
      t3plusx = t3.plus(x);
      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
        // , i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return the number of decimal places of the value of this Decimal.
   *
   */
  P.decimalPlaces = P.dp = function () {
    var w,
      d = this.d,
      n = NaN;

    if (d) {
      w = d.length - 1;
      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last word.
      w = d[w];
      if (w) for (; w % 10 == 0; w /= 10) n--;
      if (n < 0) n = 0;
    }

    return n;
  };


  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedBy = P.div = function (y) {
    return divide(this, new this.constructor(y));
  };


  /*
   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedToIntegerBy = P.divToInt = function (y) {
    var x = this,
      Ctor = x.constructor;
    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
  };


  /*
   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
   *
   */
  P.equals = P.eq = function (y) {
    return this.cmp(y) === 0;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of negative Infinity.
   *
   */
  P.floor = function () {
    return finalise(new this.constructor(this), this.e + 1, 3);
  };


  /*
   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
   * false.
   *
   */
  P.greaterThan = P.gt = function (y) {
    return this.cmp(y) > 0;
  };


  /*
   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
   * otherwise return false.
   *
   */
  P.greaterThanOrEqualTo = P.gte = function (y) {
    var k = this.cmp(y);
    return k == 1 || k === 0;
  };


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [1, Infinity]
   *
   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
   *
   * cosh(0)         = 1
   * cosh(-0)        = 1
   * cosh(Infinity)  = Infinity
   * cosh(-Infinity) = Infinity
   * cosh(NaN)       = NaN
   *
   *  x        time taken (ms)   result
   * 1000      9                 9.8503555700852349694e+433
   * 10000     25                4.4034091128314607936e+4342
   * 100000    171               1.4033316802130615897e+43429
   * 1000000   3817              1.5166076984010437725e+434294
   * 10000000  abandoned after 2 minute wait
   *
   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
   *
   */
  P.hyperbolicCosine = P.cosh = function () {
    var k, n, pr, rm, len,
      x = this,
      Ctor = x.constructor,
      one = new Ctor(1);

    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
    if (x.isZero()) return one;

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

    // Estimate the optimum number of times to use the argument reduction.
    // TODO? Estimation reused from cosine() and may not be optimal here.
    if (len < 32) {
      k = Math.ceil(len / 3);
      n = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      n = '2.3283064365386962890625e-10';
    }

    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

    // Reverse argument reduction
    var cosh2_x,
      i = k,
      d8 = new Ctor(8);
    for (; i--;) {
      cosh2_x = x.times(x);
      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
    }

    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
   *
   * sinh(0)         = 0
   * sinh(-0)        = -0
   * sinh(Infinity)  = Infinity
   * sinh(-Infinity) = -Infinity
   * sinh(NaN)       = NaN
   *
   * x        time taken (ms)
   * 10       2 ms
   * 100      5 ms
   * 1000     14 ms
   * 10000    82 ms
   * 100000   886 ms            1.4033316802130615897e+43429
   * 200000   2613 ms
   * 300000   5407 ms
   * 400000   8824 ms
   * 500000   13026 ms          8.7080643612718084129e+217146
   * 1000000  48543 ms
   *
   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
   *
   */
  P.hyperbolicSine = P.sinh = function () {
    var k, pr, rm, len,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    if (len < 3) {
      x = taylorSeries(Ctor, 2, x, x, true);
    } else {

      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
      // 3 multiplications and 1 addition

      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
      // 4 multiplications and 2 additions

      // Estimate the optimum number of times to use the argument reduction.
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;

      x = x.times(1 / tinyPow(5, k));
      x = taylorSeries(Ctor, 2, x, x, true);

      // Reverse argument reduction
      var sinh2_x,
        d5 = new Ctor(5),
        d16 = new Ctor(16),
        d20 = new Ctor(20);
      for (; k--;) {
        sinh2_x = x.times(x);
        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
      }
    }

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * tanh(x) = sinh(x) / cosh(x)
   *
   * tanh(0)         = 0
   * tanh(-0)        = -0
   * tanh(Infinity)  = 1
   * tanh(-Infinity) = -1
   * tanh(NaN)       = NaN
   *
   */
  P.hyperbolicTangent = P.tanh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(x.s);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 7;
    Ctor.rounding = 1;

    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
  };


  /*
   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
   * this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [0, pi]
   *
   * acos(x) = pi/2 - asin(x)
   *
   * acos(0)       = pi/2
   * acos(-0)      = pi/2
   * acos(1)       = 0
   * acos(-1)      = pi
   * acos(1/2)     = pi/3
   * acos(-1/2)    = 2*pi/3
   * acos(|x| > 1) = NaN
   * acos(NaN)     = NaN
   *
   */
  P.inverseCosine = P.acos = function () {
    var halfPi,
      x = this,
      Ctor = x.constructor,
      k = x.abs().cmp(1),
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (k !== -1) {
      return k === 0
        // |x| is 1
        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
        // |x| > 1 or x is NaN
        : new Ctor(NaN);
    }

    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.asin();
    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return halfPi.minus(x);
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
   * value of this Decimal.
   *
   * Domain: [1, Infinity]
   * Range: [0, Infinity]
   *
   * acosh(x) = ln(x + sqrt(x^2 - 1))
   *
   * acosh(x < 1)     = NaN
   * acosh(NaN)       = NaN
   * acosh(Infinity)  = Infinity
   * acosh(-Infinity) = NaN
   * acosh(0)         = NaN
   * acosh(-0)        = NaN
   * acosh(1)         = 0
   * acosh(-1)        = NaN
   *
   */
  P.inverseHyperbolicCosine = P.acosh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
    if (!x.isFinite()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).minus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * asinh(x) = ln(x + sqrt(x^2 + 1))
   *
   * asinh(NaN)       = NaN
   * asinh(Infinity)  = Infinity
   * asinh(-Infinity) = -Infinity
   * asinh(0)         = 0
   * asinh(-0)        = -0
   *
   */
  P.inverseHyperbolicSine = P.asinh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).plus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
   * value of this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [-Infinity, Infinity]
   *
   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
   *
   * atanh(|x| > 1)   = NaN
   * atanh(NaN)       = NaN
   * atanh(Infinity)  = NaN
   * atanh(-Infinity) = NaN
   * atanh(0)         = 0
   * atanh(-0)        = -0
   * atanh(1)         = Infinity
   * atanh(-1)        = -Infinity
   *
   */
  P.inverseHyperbolicTangent = P.atanh = function () {
    var pr, rm, wpr, xsd,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    xsd = x.sd();

    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

    Ctor.precision = wpr = xsd - x.e;

    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

    Ctor.precision = pr + 4;
    Ctor.rounding = 1;

    x = x.ln();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(0.5);
  };


  /*
   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
   *
   * asin(0)       = 0
   * asin(-0)      = -0
   * asin(1/2)     = pi/6
   * asin(-1/2)    = -pi/6
   * asin(1)       = pi/2
   * asin(-1)      = -pi/2
   * asin(|x| > 1) = NaN
   * asin(NaN)     = NaN
   *
   * TODO? Compare performance of Taylor series.
   *
   */
  P.inverseSine = P.asin = function () {
    var halfPi, k,
      pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.isZero()) return new Ctor(x);

    k = x.abs().cmp(1);
    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (k !== -1) {

      // |x| is 1
      if (k === 0) {
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
        halfPi.s = x.s;
        return halfPi;
      }

      // |x| > 1 or x is NaN
      return new Ctor(NaN);
    }

    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(2);
  };


  /*
   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
   *
   * atan(0)         = 0
   * atan(-0)        = -0
   * atan(1)         = pi/4
   * atan(-1)        = -pi/4
   * atan(Infinity)  = pi/2
   * atan(-Infinity) = -pi/2
   * atan(NaN)       = NaN
   *
   */
  P.inverseTangent = P.atan = function () {
    var i, j, k, n, px, t, r, wpr, x2,
      x = this,
      Ctor = x.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (!x.isFinite()) {
      if (!x.s) return new Ctor(NaN);
      if (pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.5);
        r.s = x.s;
        return r;
      }
    } else if (x.isZero()) {
      return new Ctor(x);
    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.25);
      r.s = x.s;
      return r;
    }

    Ctor.precision = wpr = pr + 10;
    Ctor.rounding = 1;

    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

    // Argument reduction
    // Ensure |x| < 0.42
    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

    k = Math.min(28, wpr / LOG_BASE + 2 | 0);

    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

    external = false;

    j = Math.ceil(wpr / LOG_BASE);
    n = 1;
    x2 = x.times(x);
    r = new Ctor(x);
    px = x;

    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
    for (; i !== -1;) {
      px = px.times(x2);
      t = r.minus(px.div(n += 2));

      px = px.times(x2);
      r = t.plus(px.div(n += 2));

      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
    }

    if (k) r = r.times(2 << (k - 1));

    external = true;

    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return true if the value of this Decimal is a finite number, otherwise return false.
   *
   */
  P.isFinite = function () {
    return !!this.d;
  };


  /*
   * Return true if the value of this Decimal is an integer, otherwise return false.
   *
   */
  P.isInteger = P.isInt = function () {
    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
  };


  /*
   * Return true if the value of this Decimal is NaN, otherwise return false.
   *
   */
  P.isNaN = function () {
    return !this.s;
  };


  /*
   * Return true if the value of this Decimal is negative, otherwise return false.
   *
   */
  P.isNegative = P.isNeg = function () {
    return this.s < 0;
  };


  /*
   * Return true if the value of this Decimal is positive, otherwise return false.
   *
   */
  P.isPositive = P.isPos = function () {
    return this.s > 0;
  };


  /*
   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
   *
   */
  P.isZero = function () {
    return !!this.d && this.d[0] === 0;
  };


  /*
   * Return true if the value of this Decimal is less than `y`, otherwise return false.
   *
   */
  P.lessThan = P.lt = function (y) {
    return this.cmp(y) < 0;
  };


  /*
   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
   *
   */
  P.lessThanOrEqualTo = P.lte = function (y) {
    return this.cmp(y) < 1;
  };


  /*
   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * If no base is specified, return log[10](arg).
   *
   * log[base](arg) = ln(arg) / ln(base)
   *
   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
   * otherwise:
   *
   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
   * between the result and the correctly rounded result will be one ulp (unit in the last place).
   *
   * log[-b](a)       = NaN
   * log[0](a)        = NaN
   * log[1](a)        = NaN
   * log[NaN](a)      = NaN
   * log[Infinity](a) = NaN
   * log[b](0)        = -Infinity
   * log[b](-0)       = -Infinity
   * log[b](-a)       = NaN
   * log[b](1)        = 0
   * log[b](Infinity) = Infinity
   * log[b](NaN)      = NaN
   *
   * [base] {number|string|Decimal} The base of the logarithm.
   *
   */
  P.logarithm = P.log = function (base) {
    var isBase10, d, denominator, k, inf, num, sd, r,
      arg = this,
      Ctor = arg.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding,
      guard = 5;

    // Default base is 10.
    if (base == null) {
      base = new Ctor(10);
      isBase10 = true;
    } else {
      base = new Ctor(base);
      d = base.d;

      // Return NaN if base is negative, or non-finite, or is 0 or 1.
      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

      isBase10 = base.eq(10);
    }

    d = arg.d;

    // Is arg negative, non-finite, 0 or 1?
    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
    }

    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
    // integer power of 10.
    if (isBase10) {
      if (d.length > 1) {
        inf = true;
      } else {
        for (k = d[0]; k % 10 === 0;) k /= 10;
        inf = k !== 1;
      }
    }

    external = false;
    sd = pr + guard;
    num = naturalLogarithm(arg, sd);
    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

    // The result will have 5 rounding digits.
    r = divide(num, denominator, sd, 1);

    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
    // calculate 10 further digits.
    //
    // If the result is known to have an infinite decimal expansion, repeat this until it is clear
    // that the result is above or below the boundary. Otherwise, if after calculating the 10
    // further digits, the last 14 are nines, round up and assume the result is exact.
    // Also assume the result is exact if the last 14 are zero.
    //
    // Example of a result that will be incorrectly rounded:
    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
    // place is still 2.6.
    if (checkRoundingDigits(r.d, k = pr, rm)) {

      do {
        sd += 10;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
        r = divide(num, denominator, sd, 1);

        if (!inf) {

          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }

          break;
        }
      } while (checkRoundingDigits(r.d, k += 10, rm));
    }

    external = true;

    return finalise(r, pr, rm);
  };


  /*
   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.max = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'lt');
  };
   */


  /*
   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.min = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'gt');
  };
   */


  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.minus = P.sub = function (y) {
    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return y negated if x is finite and y is ±Infinity.
      else if (x.d) y.s = -y.s;

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with different signs.
      // Return NaN if both are ±Infinity with the same sign.
      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

      return y;
    }

    // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.plus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return y negated if x is zero and y is non-zero.
      if (yd[0]) y.s = -y.s;

      // Return x if y is zero and x is non-zero.
      else if (xd[0]) y = new Ctor(x);

      // Return zero if both are zero.
      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
      else return new Ctor(rm === 3 ? -0 : 0);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    e = mathfloor(y.e / LOG_BASE);
    xe = mathfloor(x.e / LOG_BASE);

    xd = xd.slice();
    k = xe - e;

    // If base 1e7 exponents differ...
    if (k) {
      xLTy = k < 0;

      if (xLTy) {
        d = xd;
        k = -k;
        len = yd.length;
      } else {
        d = yd;
        e = xe;
        len = xd.length;
      }

      // Numbers with massively different exponents would result in a very high number of
      // zeros needing to be prepended, but this can be avoided while still ensuring correct
      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

      if (k > i) {
        k = i;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents.
      d.reverse();
      for (i = k; i--;) d.push(0);
      d.reverse();

    // Base 1e7 exponents equal.
    } else {

      // Check digits to determine which is the bigger number.

      i = xd.length;
      len = yd.length;
      xLTy = i < len;
      if (xLTy) len = i;

      for (i = 0; i < len; i++) {
        if (xd[i] != yd[i]) {
          xLTy = xd[i] < yd[i];
          break;
        }
      }

      k = 0;
    }

    if (xLTy) {
      d = xd;
      xd = yd;
      yd = d;
      y.s = -y.s;
    }

    len = xd.length;

    // Append zeros to `xd` if shorter.
    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

    // Subtract yd from xd.
    for (i = yd.length; i > k;) {

      if (xd[--i] < yd[i]) {
        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
        --xd[j];
        xd[i] += BASE;
      }

      xd[i] -= yd[i];
    }

    // Remove trailing zeros.
    for (; xd[--len] === 0;) xd.pop();

    // Remove leading zeros and adjust exponent accordingly.
    for (; xd[0] === 0; xd.shift()) --e;

    // Zero?
    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * The result depends on the modulo mode.
   *
   */
  P.modulo = P.mod = function (y) {
    var q,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

    // Return x if y is ±Infinity or x is ±0.
    if (!y.d || x.d && !x.d[0]) {
      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
    }

    // Prevent rounding of intermediate calculations.
    external = false;

    if (Ctor.modulo == 9) {

      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // result = x - q * y    where  0 <= result < abs(y)
      q = divide(x, y.abs(), 0, 3, 1);
      q.s *= y.s;
    } else {
      q = divide(x, y, 0, Ctor.modulo, 1);
    }

    q = q.times(y);

    external = true;

    return x.minus(q);
  };


  /*
   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.naturalExponential = P.exp = function () {
    return naturalExponential(this);
  };


  /*
   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.naturalLogarithm = P.ln = function () {
    return naturalLogarithm(this);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
   * -1.
   *
   */
  P.negated = P.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return finalise(x);
  };


  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.plus = P.add = function (y) {
    var carry, d, e, i, k, len, pr, rm, xd, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with the same sign.
      // Return NaN if both are ±Infinity with different signs.
      // Return y if x is finite and y is ±Infinity.
      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

      return y;
    }

     // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return x if y is zero.
      // Return y if y is non-zero.
      if (!yd[0]) y = new Ctor(x);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    k = mathfloor(x.e / LOG_BASE);
    e = mathfloor(y.e / LOG_BASE);

    xd = xd.slice();
    i = k - e;

    // If base 1e7 exponents differ...
    if (i) {

      if (i < 0) {
        d = xd;
        i = -i;
        len = yd.length;
      } else {
        d = yd;
        e = k;
        len = xd.length;
      }

      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
      k = Math.ceil(pr / LOG_BASE);
      len = k > len ? k + 1 : len + 1;

      if (i > len) {
        i = len;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
      d.reverse();
      for (; i--;) d.push(0);
      d.reverse();
    }

    len = xd.length;
    i = yd.length;

    // If yd is longer than xd, swap xd and yd so xd points to the longer array.
    if (len - i < 0) {
      i = len;
      d = yd;
      yd = xd;
      xd = d;
    }

    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
    for (carry = 0; i;) {
      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
      xd[i] %= BASE;
    }

    if (carry) {
      xd.unshift(carry);
      ++e;
    }

    // Remove trailing zeros.
    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    for (len = xd.length; xd[--len] == 0;) xd.pop();

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   * Return the number of significant digits of the value of this Decimal.
   *
   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
   *
   */
  P.precision = P.sd = function (z) {
    var k,
      x = this;

    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

    if (x.d) {
      k = getPrecision(x.d);
      if (z && x.e + 1 > k) k = x.e + 1;
    } else {
      k = NaN;
    }

    return k;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
   * rounding mode `rounding`.
   *
   */
  P.round = function () {
    var x = this,
      Ctor = x.constructor;

    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
  };


  /*
   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * sin(x) = x - x^3/3! + x^5/5! - ...
   *
   * sin(0)         = 0
   * sin(-0)        = -0
   * sin(Infinity)  = NaN
   * sin(-Infinity) = NaN
   * sin(NaN)       = NaN
   *
   */
  P.sine = P.sin = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = sine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   *  sqrt(-n) =  N
   *  sqrt(N)  =  N
   *  sqrt(-I) =  N
   *  sqrt(I)  =  I
   *  sqrt(0)  =  0
   *  sqrt(-0) = -0
   *
   */
  P.squareRoot = P.sqrt = function () {
    var m, n, sd, r, rep, t,
      x = this,
      d = x.d,
      e = x.e,
      s = x.s,
      Ctor = x.constructor;

    // Negative/NaN/Infinity/zero?
    if (s !== 1 || !d || !d[0]) {
      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
    }

    external = false;

    // Initial estimate.
    s = Math.sqrt(+x);

    // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    if (s == 0 || s == 1 / 0) {
      n = digitsToString(d);

      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(n);
      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '1e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Newton-Raphson iteration.
    for (;;) {
      t = r;
      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
        // 4999, i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * tan(0)         = 0
   * tan(-0)        = -0
   * tan(Infinity)  = NaN
   * tan(-Infinity) = NaN
   * tan(NaN)       = NaN
   *
   */
  P.tangent = P.tan = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 10;
    Ctor.rounding = 1;

    x = x.sin();
    x.s = 1;
    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
  };


  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   */
  P.times = P.mul = function (y) {
    var carry, e, i, k, r, rL, t, xdL, ydL,
      x = this,
      Ctor = x.constructor,
      xd = x.d,
      yd = (y = new Ctor(y)).d;

    y.s *= x.s;

     // If either is NaN, ±Infinity or ±0...
    if (!xd || !xd[0] || !yd || !yd[0]) {

      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

        // Return NaN if either is NaN.
        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
        ? NaN

        // Return ±Infinity if either is ±Infinity.
        // Return ±0 if either is ±0.
        : !xd || !yd ? y.s / 0 : y.s * 0);
    }

    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
    xdL = xd.length;
    ydL = yd.length;

    // Ensure xd points to the longer array.
    if (xdL < ydL) {
      r = xd;
      xd = yd;
      yd = r;
      rL = xdL;
      xdL = ydL;
      ydL = rL;
    }

    // Initialise the result array with zeros.
    r = [];
    rL = xdL + ydL;
    for (i = rL; i--;) r.push(0);

    // Multiply!
    for (i = ydL; --i >= 0;) {
      carry = 0;
      for (k = xdL + i; k > i;) {
        t = r[k] + yd[i] * xd[k - i - 1] + carry;
        r[k--] = t % BASE | 0;
        carry = t / BASE | 0;
      }

      r[k] = (r[k] + carry) % BASE | 0;
    }

    // Remove trailing zeros.
    for (; !r[--rL];) r.pop();

    if (carry) ++e;
    else r.shift();

    y.d = r;
    y.e = getBase10Exponent(r, e);

    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
  };


  /*
   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toBinary = function (sd, rm) {
    return toStringBinary(this, 2, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
   *
   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toDecimalPlaces = P.toDP = function (dp, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);
    if (dp === void 0) return x;

    checkInt32(dp, 0, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    return finalise(x, dp + x.e + 1, rm);
  };


  /*
   * Return a string representing the value of this Decimal in exponential notation rounded to
   * `dp` fixed decimal places using rounding mode `rounding`.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toExponential = function (dp, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x, true);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), dp + 1, rm);
      str = finiteToString(x, true, dp + 1);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
   * omitted.
   *
   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   * (-0).toFixed(3) is '0.000'.
   * (-0.5).toFixed(0) is '-0'.
   *
   */
  P.toFixed = function (dp, rm) {
    var str, y,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      y = finalise(new Ctor(x), dp + x.e + 1, rm);
      str = finiteToString(y, false, dp + y.e + 1);
    }

    // To determine whether to add the minus sign look at the value before it was rounded,
    // i.e. look at `x` rather than `y`.
    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return an array representing the value of this Decimal as a simple fraction with an integer
   * numerator and an integer denominator.
   *
   * The denominator will be a positive non-zero value less than or equal to the specified maximum
   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
   * value necessary to represent the number exactly.
   *
   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
   *
   */
  P.toFraction = function (maxD) {
    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
      x = this,
      xd = x.d,
      Ctor = x.constructor;

    if (!xd) return new Ctor(x);

    n1 = d0 = new Ctor(1);
    d1 = n0 = new Ctor(0);

    d = new Ctor(d1);
    e = d.e = getPrecision(xd) - x.e - 1;
    k = e % LOG_BASE;
    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

    if (maxD == null) {

      // d is 10**e, the minimum max-denominator needed.
      maxD = e > 0 ? d : n1;
    } else {
      n = new Ctor(maxD);
      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
    }

    external = false;
    n = new Ctor(digitsToString(xd));
    pr = Ctor.precision;
    Ctor.precision = e = xd.length * LOG_BASE * 2;

    for (;;)  {
      q = divide(n, d, 0, 1, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.cmp(maxD) == 1) break;
      d0 = d1;
      d1 = d2;
      d2 = n1;
      n1 = n0.plus(q.times(d2));
      n0 = d2;
      d2 = d;
      d = n.minus(q.times(d2));
      n = d2;
    }

    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;

    // Determine which fraction is closer to x, n0/d0 or n1/d1?
    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
        ? [n1, d1] : [n0, d0];

    Ctor.precision = pr;
    external = true;

    return r;
  };


  /*
   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toHexadecimal = P.toHex = function (sd, rm) {
    return toStringBinary(this, 16, sd, rm);
  };


  /*
   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
   *
   * The return value will always have the same sign as this Decimal, unless either this Decimal
   * or `y` is NaN, in which case the return value will be also be NaN.
   *
   * The return value is not affected by the value of `precision`.
   *
   * y {number|string|Decimal} The magnitude to round to a multiple of.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toNearest() rounding mode not an integer: {rm}'
   * 'toNearest() rounding mode out of range: {rm}'
   *
   */
  P.toNearest = function (y, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);

    if (y == null) {

      // If x is not finite, return x.
      if (!x.d) return x;

      y = new Ctor(1);
      rm = Ctor.rounding;
    } else {
      y = new Ctor(y);
      if (rm === void 0) {
        rm = Ctor.rounding;
      } else {
        checkInt32(rm, 0, 8);
      }

      // If x is not finite, return x if y is not NaN, else NaN.
      if (!x.d) return y.s ? x : y;

      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
      if (!y.d) {
        if (y.s) y.s = x.s;
        return y;
      }
    }

    // If y is not zero, calculate the nearest multiple of y to x.
    if (y.d[0]) {
      external = false;
      x = divide(x, y, 0, rm, 1).times(y);
      external = true;
      finalise(x);

    // If y is zero, return zero with the sign of x.
    } else {
      y.s = x.s;
      x = y;
    }

    return x;
  };


  /*
   * Return the value of this Decimal converted to a number primitive.
   * Zero keeps its sign.
   *
   */
  P.toNumber = function () {
    return +this;
  };


  /*
   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toOctal = function (sd, rm) {
    return toStringBinary(this, 8, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
   * to `precision` significant digits using rounding mode `rounding`.
   *
   * ECMAScript compliant.
   *
   *   pow(x, NaN)                           = NaN
   *   pow(x, ±0)                            = 1

   *   pow(NaN, non-zero)                    = NaN
   *   pow(abs(x) > 1, +Infinity)            = +Infinity
   *   pow(abs(x) > 1, -Infinity)            = +0
   *   pow(abs(x) == 1, ±Infinity)           = NaN
   *   pow(abs(x) < 1, +Infinity)            = +0
   *   pow(abs(x) < 1, -Infinity)            = +Infinity
   *   pow(+Infinity, y > 0)                 = +Infinity
   *   pow(+Infinity, y < 0)                 = +0
   *   pow(-Infinity, odd integer > 0)       = -Infinity
   *   pow(-Infinity, even integer > 0)      = +Infinity
   *   pow(-Infinity, odd integer < 0)       = -0
   *   pow(-Infinity, even integer < 0)      = +0
   *   pow(+0, y > 0)                        = +0
   *   pow(+0, y < 0)                        = +Infinity
   *   pow(-0, odd integer > 0)              = -0
   *   pow(-0, even integer > 0)             = +0
   *   pow(-0, odd integer < 0)              = -Infinity
   *   pow(-0, even integer < 0)             = +Infinity
   *   pow(finite x < 0, finite non-integer) = NaN
   *
   * For non-integer or very large exponents pow(x, y) is calculated using
   *
   *   x^y = exp(y*ln(x))
   *
   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
   * probability of an incorrectly rounded result
   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
   * i.e. 1 in 250,000,000,000,000
   *
   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
   *
   * y {number|string|Decimal} The power to which to raise this Decimal.
   *
   */
  P.toPower = P.pow = function (y) {
    var e, k, pr, r, rm, s,
      x = this,
      Ctor = x.constructor,
      yn = +(y = new Ctor(y));

    // Either ±Infinity, NaN or ±0?
    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

    x = new Ctor(x);

    if (x.eq(1)) return x;

    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (y.eq(1)) return finalise(x, pr, rm);

    // y exponent
    e = mathfloor(y.e / LOG_BASE);

    // If y is a small integer use the 'exponentiation by squaring' algorithm.
    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
      r = intPow(Ctor, x, k, pr);
      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
    }

    s = x.s;

    // if x is negative
    if (s < 0) {

      // if y is not an integer
      if (e < y.d.length - 1) return new Ctor(NaN);

      // Result is positive if x is negative and the last digit of integer y is even.
      if ((y.d[e] & 1) == 0) s = 1;

      // if x.eq(-1)
      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
        x.s = s;
        return x;
      }
    }

    // Estimate result exponent.
    // x^y = 10^e,  where e = y * log10(x)
    // log10(x) = log10(x_significand) + x_exponent
    // log10(x_significand) = ln(x_significand) / ln(10)
    k = mathpow(+x, yn);
    e = k == 0 || !isFinite(k)
      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
      : new Ctor(k + '').e;

    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

    // Overflow/underflow?
    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

    external = false;
    Ctor.rounding = x.s = 1;

    // Estimate the extra guard digits needed to ensure five correct rounding digits from
    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
    // new Decimal(2.32456).pow('2087987436534566.46411')
    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
    k = Math.min(12, (e + '').length);

    // r = x^y = exp(y*ln(x))
    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
    if (r.d) {

      // Truncate to the required precision plus five rounding digits.
      r = finalise(r, pr + 5, 1);

      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
      // the result.
      if (checkRoundingDigits(r.d, pr, rm)) {
        e = pr + 10;

        // Truncate to the increased precision plus five rounding digits.
        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
      }
    }

    r.s = s;
    external = true;
    Ctor.rounding = rm;

    return finalise(r, pr, rm);
  };


  /*
   * Return a string representing the value of this Decimal rounded to `sd` significant digits
   * using rounding mode `rounding`.
   *
   * Return exponential notation if `sd` is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toPrecision = function (sd, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), sd, rm);
      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
   * omitted.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toSD() digits out of range: {sd}'
   * 'toSD() digits not an integer: {sd}'
   * 'toSD() rounding mode not an integer: {rm}'
   * 'toSD() rounding mode out of range: {rm}'
   *
   */
  P.toSignificantDigits = P.toSD = function (sd, rm) {
    var x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    }

    return finalise(new Ctor(x), sd, rm);
  };


  /*
   * Return a string representing the value of this Decimal.
   *
   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
   *
   */
  P.toString = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
   *
   */
  P.truncated = P.trunc = function () {
    return finalise(new this.constructor(this), this.e + 1, 1);
  };


  /*
   * Return a string representing the value of this Decimal.
   * Unlike `toString`, negative zero will include the minus sign.
   *
   */
  P.valueOf = P.toJSON = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() ? '-' + str : str;
  };


  /*
  // Add aliases to match BigDecimal method names.
  // P.add = P.plus;
  P.subtract = P.minus;
  P.multiply = P.times;
  P.divide = P.div;
  P.remainder = P.mod;
  P.compareTo = P.cmp;
  P.negate = P.neg;
   */


  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


  /*
   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
   *                           finiteToString, naturalExponential, naturalLogarithm
   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
   *  convertBase              toStringBinary, parseOther
   *  cos                      P.cos
   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
   *                           taylorSeries, atan2, parseOther
   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
   *                           naturalLogarithm, ceil, floor, round, trunc
   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
   *                           toStringBinary
   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
   *  getLn10                  P.logarithm, naturalLogarithm
   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
   *  getPrecision             P.precision, P.toFraction
   *  getZeroString            digitsToString, finiteToString
   *  intPow                   P.toPower, parseOther
   *  isOdd                    toLessThanHalfPi
   *  maxOrMin                 max, min
   *  naturalExponential       P.naturalExponential, P.toPower
   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
   *                           P.toPower, naturalExponential
   *  nonFiniteToString        finiteToString, toStringBinary
   *  parseDecimal             Decimal
   *  parseOther               Decimal
   *  sin                      P.sin
   *  taylorSeries             P.cosh, P.sinh, cos, sin
   *  toLessThanHalfPi         P.cos, P.sin
   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
   *  truncate                 intPow
   *
   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
   *                           naturalLogarithm, config, parseOther, random, Decimal
   */


  function digitsToString(d) {
    var i, k, ws,
      indexOfLastWord = d.length - 1,
      str = '',
      w = d[0];

    if (indexOfLastWord > 0) {
      str += w;
      for (i = 1; i < indexOfLastWord; i++) {
        ws = d[i] + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
        str += ws;
      }

      w = d[i];
      ws = w + '';
      k = LOG_BASE - ws.length;
      if (k) str += getZeroString(k);
    } else if (w === 0) {
      return '0';
    }

    // Remove trailing zeros of last w.
    for (; w % 10 === 0;) w /= 10;

    return str + w;
  }


  function checkInt32(i, min, max) {
    if (i !== ~~i || i < min || i > max) {
      throw Error(invalidArgument + i);
    }
  }


  /*
   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
   * `repeating == null` if caller is `log` or `pow`,
   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
   */
  function checkRoundingDigits(d, i, rm, repeating) {
    var di, k, r, rd;

    // Get the length of the first word of the array d.
    for (k = d[0]; k >= 10; k /= 10) --i;

    // Is the rounding digit in the first word of d?
    if (--i < 0) {
      i += LOG_BASE;
      di = 0;
    } else {
      di = Math.ceil((i + 1) / LOG_BASE);
      i %= LOG_BASE;
    }

    // i is the index (0 - 6) of the rounding digit.
    // E.g. if within the word 3487563 the first rounding digit is 5,
    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
    k = mathpow(10, LOG_BASE - i);
    rd = d[di] % k | 0;

    if (repeating == null) {
      if (i < 3) {
        if (i == 0) rd = rd / 100 | 0;
        else if (i == 1) rd = rd / 10 | 0;
        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
      } else {
        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
      }
    } else {
      if (i < 4) {
        if (i == 0) rd = rd / 1000 | 0;
        else if (i == 1) rd = rd / 100 | 0;
        else if (i == 2) rd = rd / 10 | 0;
        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
      } else {
        r = ((repeating || rm < 4) && rd + 1 == k ||
        (!repeating && rm > 3) && rd + 1 == k / 2) &&
          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
      }
    }

    return r;
  }


  // Convert string of `baseIn` to an array of numbers of `baseOut`.
  // Eg. convertBase('255', 10, 16) returns [15, 15].
  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
  function convertBase(str, baseIn, baseOut) {
    var j,
      arr = [0],
      arrL,
      i = 0,
      strL = str.length;

    for (; i < strL;) {
      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
      arr[0] += NUMERALS.indexOf(str.charAt(i++));
      for (j = 0; j < arr.length; j++) {
        if (arr[j] > baseOut - 1) {
          if (arr[j + 1] === void 0) arr[j + 1] = 0;
          arr[j + 1] += arr[j] / baseOut | 0;
          arr[j] %= baseOut;
        }
      }
    }

    return arr.reverse();
  }


  /*
   * cos(x) = 1 - x^2/2! + x^4/4! - ...
   * |x| < pi/2
   *
   */
  function cosine(Ctor, x) {
    var k, y,
      len = x.d.length;

    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

    // Estimate the optimum number of times to use the argument reduction.
    if (len < 32) {
      k = Math.ceil(len / 3);
      y = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      y = '2.3283064365386962890625e-10';
    }

    Ctor.precision += k;

    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

    // Reverse argument reduction
    for (var i = k; i--;) {
      var cos2x = x.times(x);
      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
    }

    Ctor.precision -= k;

    return x;
  }


  /*
   * Perform division in the specified base.
   */
  var divide = (function () {

    // Assumes non-zero x and k, and hence non-zero result.
    function multiplyInteger(x, k, base) {
      var temp,
        carry = 0,
        i = x.length;

      for (x = x.slice(); i--;) {
        temp = x[i] * k + carry;
        x[i] = temp % base | 0;
        carry = temp / base | 0;
      }

      if (carry) x.unshift(carry);

      return x;
    }

    function compare(a, b, aL, bL) {
      var i, r;

      if (aL != bL) {
        r = aL > bL ? 1 : -1;
      } else {
        for (i = r = 0; i < aL; i++) {
          if (a[i] != b[i]) {
            r = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return r;
    }

    function subtract(a, b, aL, base) {
      var i = 0;

      // Subtract b from a.
      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }

      // Remove leading zeros.
      for (; !a[0] && a.length > 1;) a.shift();
    }

    return function (x, y, pr, rm, dp, base) {
      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
        yL, yz,
        Ctor = x.constructor,
        sign = x.s == y.s ? 1 : -1,
        xd = x.d,
        yd = y.d;

      // Either NaN, Infinity or 0?
      if (!xd || !xd[0] || !yd || !yd[0]) {

        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
      }

      if (base) {
        logBase = 1;
        e = x.e - y.e;
      } else {
        base = BASE;
        logBase = LOG_BASE;
        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
      }

      yL = yd.length;
      xL = xd.length;
      q = new Ctor(sign);
      qd = q.d = [];

      // Result exponent may be one less than e.
      // The digit array of a Decimal from toStringBinary may have trailing zeros.
      for (i = 0; yd[i] == (xd[i] || 0); i++);

      if (yd[i] > (xd[i] || 0)) e--;

      if (pr == null) {
        sd = pr = Ctor.precision;
        rm = Ctor.rounding;
      } else if (dp) {
        sd = pr + (x.e - y.e) + 1;
      } else {
        sd = pr;
      }

      if (sd < 0) {
        qd.push(1);
        more = true;
      } else {

        // Convert precision in number of base 10 digits to base 1e7 digits.
        sd = sd / logBase + 2 | 0;
        i = 0;

        // divisor < 1e7
        if (yL == 1) {
          k = 0;
          yd = yd[0];
          sd++;

          // k is the carry.
          for (; (i < xL || k) && sd--; i++) {
            t = k * base + (xd[i] || 0);
            qd[i] = t / yd | 0;
            k = t % yd | 0;
          }

          more = k || i < xL;

        // divisor >= 1e7
        } else {

          // Normalise xd and yd so highest order digit of yd is >= base/2
          k = base / (yd[0] + 1) | 0;

          if (k > 1) {
            yd = multiplyInteger(yd, k, base);
            xd = multiplyInteger(xd, k, base);
            yL = yd.length;
            xL = xd.length;
          }

          xi = yL;
          rem = xd.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL;) rem[remL++] = 0;

          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];

          if (yd[1] >= base / 2) ++yd0;

          do {
            k = 0;

            // Compare divisor and remainder.
            cmp = compare(yd, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, k.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // k will be how many times the divisor goes into the current remainder.
              k = rem0 / yd0 | 0;

              //  Algorithm:
              //  1. product = divisor * trial digit (k)
              //  2. if product > remainder: product -= divisor, k--
              //  3. remainder -= product
              //  4. if product was < remainder at 2:
              //    5. compare new remainder and divisor
              //    6. If remainder > divisor: remainder -= divisor, k++

              if (k > 1) {
                if (k >= base) k = base - 1;

                // product = divisor * trial digit.
                prod = multiplyInteger(yd, k, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                cmp = compare(prod, rem, prodL, remL);

                // product > remainder.
                if (cmp == 1) {
                  k--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yd, prodL, base);
                }
              } else {

                // cmp is -1.
                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                if (k == 0) cmp = k = 1;
                prod = yd.slice();
              }

              prodL = prod.length;
              if (prodL < remL) prod.unshift(0);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);

              // If product was < previous remainder.
              if (cmp == -1) {
                remL = rem.length;

                // Compare divisor and new remainder.
                cmp = compare(yd, rem, yL, remL);

                // If divisor < new remainder, subtract divisor from remainder.
                if (cmp < 1) {
                  k++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yd, remL, base);
                }
              }

              remL = rem.length;
            } else if (cmp === 0) {
              k++;
              rem = [0];
            }    // if cmp === 1, k will be 0

            // Add the next digit, k, to the result array.
            qd[i++] = k;

            // Update the remainder.
            if (cmp && rem[0]) {
              rem[remL++] = xd[xi] || 0;
            } else {
              rem = [xd[xi]];
              remL = 1;
            }

          } while ((xi++ < xL || rem[0] !== void 0) && sd--);

          more = rem[0] !== void 0;
        }

        // Leading zero?
        if (!qd[0]) qd.shift();
      }

      // logBase is 1 when divide is being used for base conversion.
      if (logBase == 1) {
        q.e = e;
        inexact = more;
      } else {

        // To calculate q.e, first get the number of digits of qd[0].
        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
        q.e = i + e * logBase - 1;

        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
      }

      return q;
    };
  })();


  /*
   * Round `x` to `sd` significant digits using rounding mode `rm`.
   * Check for over/under-flow.
   */
   function finalise(x, sd, rm, isTruncated) {
    var digits, i, j, k, rd, roundUp, w, xd, xdi,
      Ctor = x.constructor;

    // Don't round if sd is null or undefined.
    out: if (sd != null) {
      xd = x.d;

      // Infinity/NaN.
      if (!xd) return x;

      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
      // w: the word of xd containing rd, a base 1e7 number.
      // xdi: the index of w within xd.
      // digits: the number of digits of w.
      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
      // they had leading zeros)
      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

      // Get the length of the first word of the digits array xd.
      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
      i = sd - digits;

      // Is the rounding digit in the first word of xd?
      if (i < 0) {
        i += LOG_BASE;
        j = sd;
        w = xd[xdi = 0];

        // Get the rounding digit at index j of w.
        rd = w / mathpow(10, digits - j - 1) % 10 | 0;
      } else {
        xdi = Math.ceil((i + 1) / LOG_BASE);
        k = xd.length;
        if (xdi >= k) {
          if (isTruncated) {

            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
            for (; k++ <= xdi;) xd.push(0);
            w = rd = 0;
            digits = 1;
            i %= LOG_BASE;
            j = i - LOG_BASE + 1;
          } else {
            break out;
          }
        } else {
          w = k = xd[xdi];

          // Get the number of digits of w.
          for (digits = 1; k >= 10; k /= 10) digits++;

          // Get the index of rd within w.
          i %= LOG_BASE;

          // Get the index of rd within w, adjusted for leading zeros.
          // The number of leading zeros of w is given by LOG_BASE - digits.
          j = i - LOG_BASE + digits;

          // Get the rounding digit at index j of w.
          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
        }
      }

      // Are there any non-zero digits after the rounding digit?
      isTruncated = isTruncated || sd < 0 ||
        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
      // will give 714.

      roundUp = rm < 4
        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
            rm == (x.s < 0 ? 8 : 7));

      if (sd < 1 || !xd[0]) {
        xd.length = 0;
        if (roundUp) {

          // Convert sd to decimal places.
          sd -= x.e + 1;

          // 1, 0.1, 0.01, 0.001, 0.0001 etc.
          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x.e = -sd || 0;
        } else {

          // Zero.
          xd[0] = x.e = 0;
        }

        return x;
      }

      // Remove excess digits.
      if (i == 0) {
        xd.length = xdi;
        k = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k = mathpow(10, LOG_BASE - i);

        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
        // j > 0 means i > number of leading zeros of w.
        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
      }

      if (roundUp) {
        for (;;) {

          // Is the digit to be rounded up in the first word of xd?
          if (xdi == 0) {

            // i will be the length of xd[0] before k is added.
            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
            j = xd[0] += k;
            for (k = 1; j >= 10; j /= 10) k++;

            // if i != k the length has increased.
            if (i != k) {
              x.e++;
              if (xd[0] == BASE) xd[0] = 1;
            }

            break;
          } else {
            xd[xdi] += k;
            if (xd[xdi] != BASE) break;
            xd[xdi--] = 0;
            k = 1;
          }
        }
      }

      // Remove trailing zeros.
      for (i = xd.length; xd[--i] === 0;) xd.pop();
    }

    if (external) {

      // Overflow?
      if (x.e > Ctor.maxE) {

        // Infinity.
        x.d = null;
        x.e = NaN;

      // Underflow?
      } else if (x.e < Ctor.minE) {

        // Zero.
        x.e = 0;
        x.d = [0];
        // Ctor.underflow = true;
      } // else Ctor.underflow = false;
    }

    return x;
  }


  function finiteToString(x, isExp, sd) {
    if (!x.isFinite()) return nonFiniteToString(x);
    var k,
      e = x.e,
      str = digitsToString(x.d),
      len = str.length;

    if (isExp) {
      if (sd && (k = sd - len) > 0) {
        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
      } else if (len > 1) {
        str = str.charAt(0) + '.' + str.slice(1);
      }

      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
    } else if (e < 0) {
      str = '0.' + getZeroString(-e - 1) + str;
      if (sd && (k = sd - len) > 0) str += getZeroString(k);
    } else if (e >= len) {
      str += getZeroString(e + 1 - len);
      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
    } else {
      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
      if (sd && (k = sd - len) > 0) {
        if (e + 1 === len) str += '.';
        str += getZeroString(k);
      }
    }

    return str;
  }


  // Calculate the base 10 exponent from the base 1e7 exponent.
  function getBase10Exponent(digits, e) {
    var w = digits[0];

    // Add the number of digits of the first word of the digits array.
    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
    return e;
  }


  function getLn10(Ctor, sd, pr) {
    if (sd > LN10_PRECISION) {

      // Reset global state in case the exception is caught.
      external = true;
      if (pr) Ctor.precision = pr;
      throw Error(precisionLimitExceeded);
    }
    return finalise(new Ctor(LN10), sd, 1, true);
  }


  function getPi(Ctor, sd, rm) {
    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
    return finalise(new Ctor(PI), sd, rm, true);
  }


  function getPrecision(digits) {
    var w = digits.length - 1,
      len = w * LOG_BASE + 1;

    w = digits[w];

    // If non-zero...
    if (w) {

      // Subtract the number of trailing zeros of the last word.
      for (; w % 10 == 0; w /= 10) len--;

      // Add the number of digits of the first word.
      for (w = digits[0]; w >= 10; w /= 10) len++;
    }

    return len;
  }


  function getZeroString(k) {
    var zs = '';
    for (; k--;) zs += '0';
    return zs;
  }


  /*
   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
   * integer of type number.
   *
   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
   *
   */
  function intPow(Ctor, x, n, pr) {
    var isTruncated,
      r = new Ctor(1),

      // Max n of 9007199254740991 takes 53 loop iterations.
      // Maximum digits array length; leaves [28, 34] guard digits.
      k = Math.ceil(pr / LOG_BASE + 4);

    external = false;

    for (;;) {
      if (n % 2) {
        r = r.times(x);
        if (truncate(r.d, k)) isTruncated = true;
      }

      n = mathfloor(n / 2);
      if (n === 0) {

        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
        n = r.d.length - 1;
        if (isTruncated && r.d[n] === 0) ++r.d[n];
        break;
      }

      x = x.times(x);
      truncate(x.d, k);
    }

    external = true;

    return r;
  }


  function isOdd(n) {
    return n.d[n.d.length - 1] & 1;
  }


  /*
   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
   */
  function maxOrMin(Ctor, args, ltgt) {
    var y,
      x = new Ctor(args[0]),
      i = 0;

    for (; ++i < args.length;) {
      y = new Ctor(args[i]);
      if (!y.s) {
        x = y;
        break;
      } else if (x[ltgt](y)) {
        x = y;
      }
    }

    return x;
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
   * digits.
   *
   * Taylor/Maclaurin series.
   *
   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
   *
   * Argument reduction:
   *   Repeat x = x / 32, k += 5, until |x| < 0.1
   *   exp(x) = exp(x / 2^k)^(2^k)
   *
   * Previously, the argument was initially reduced by
   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
   * found to be slower than just dividing repeatedly by 32 as above.
   *
   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
   *
   *  exp(Infinity)  = Infinity
   *  exp(-Infinity) = 0
   *  exp(NaN)       = NaN
   *  exp(±0)        = 1
   *
   *  exp(x) is non-terminating for any finite, non-zero x.
   *
   *  The result will always be correctly rounded.
   *
   */
  function naturalExponential(x, sd) {
    var denominator, guard, j, pow, sum, t, wpr,
      rep = 0,
      i = 0,
      k = 0,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // 0/NaN/Infinity?
    if (!x.d || !x.d[0] || x.e > 17) {

      return new Ctor(x.d
        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
        : x.s ? x.s < 0 ? 0 : x : 0 / 0);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    t = new Ctor(0.03125);

    // while abs(x) >= 0.1
    while (x.e > -2) {

      // x = x / 2^5
      x = x.times(t);
      k += 5;
    }

    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
    // necessary to ensure the first 4 rounding digits are correct.
    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
    wpr += guard;
    denominator = pow = sum = new Ctor(1);
    Ctor.precision = wpr;

    for (;;) {
      pow = finalise(pow.times(x), wpr, 1);
      denominator = denominator.times(++i);
      t = sum.plus(divide(pow, denominator, wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        j = k;
        while (j--) sum = finalise(sum.times(sum), wpr, 1);

        // Check to see if the first 4 rounding digits are [49]999.
        // If so, repeat the summation with a higher precision, otherwise
        // e.g. with precision: 18, rounding: 1
        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {

          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += 10;
            denominator = pow = t = new Ctor(1);
            i = 0;
            rep++;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
    }
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
   * digits.
   *
   *  ln(-n)        = NaN
   *  ln(0)         = -Infinity
   *  ln(-0)        = -Infinity
   *  ln(1)         = 0
   *  ln(Infinity)  = Infinity
   *  ln(-Infinity) = NaN
   *  ln(NaN)       = NaN
   *
   *  ln(n) (n != 1) is non-terminating.
   *
   */
  function naturalLogarithm(y, sd) {
    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
      n = 1,
      guard = 10,
      x = y,
      xd = x.d,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // Is x negative or Infinity, NaN, 0 or 1?
    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    Ctor.precision = wpr += guard;
    c = digitsToString(xd);
    c0 = c.charAt(0);

    if (Math.abs(e = x.e) < 1.5e15) {

      // Argument reduction.
      // The series converges faster the closer the argument is to 1, so using
      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
      // later be divided by this number, then separate out the power of 10 using
      // ln(a*10^b) = ln(a) + b*ln(10).

      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
      // max n is 6 (gives 0.7 - 1.3)
      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
        x = x.times(y);
        c = digitsToString(x.d);
        c0 = c.charAt(0);
        n++;
      }

      e = x.e;

      if (c0 > 1) {
        x = new Ctor('0.' + c);
        e++;
      } else {
        x = new Ctor(c0 + '.' + c.slice(1));
      }
    } else {

      // The argument reduction method above may result in overflow if the argument y is a massive
      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
      // function using ln(x*10^e) = ln(x) + e*ln(10).
      t = getLn10(Ctor, wpr + 2, pr).times(e + '');
      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
      Ctor.precision = pr;

      return sd == null ? finalise(x, pr, rm, external = true) : x;
    }

    // x1 is x reduced to a value near 1.
    x1 = x;

    // Taylor series.
    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
    // where x = (y - 1)/(y + 1)    (|x| < 1)
    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
    x2 = finalise(x.times(x), wpr, 1);
    denominator = 3;

    for (;;) {
      numerator = finalise(numerator.times(x2), wpr, 1);
      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        sum = sum.times(2);

        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
        sum = divide(sum, new Ctor(n), wpr, 1);

        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
        // been repeated previously) and the first 4 rounding digits 9999?
        // If so, restart the summation with a higher precision, otherwise
        // e.g. with precision: 12, rounding: 1
        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {
          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += guard;
            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
            x2 = finalise(x.times(x), wpr, 1);
            denominator = rep = 1;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
      denominator += 2;
    }
  }


  // ±Infinity, NaN.
  function nonFiniteToString(x) {
    // Unsigned.
    return String(x.s * x.s / 0);
  }


  /*
   * Parse the value of a new Decimal `x` from string `str`.
   */
  function parseDecimal(x, str) {
    var e, i, len;

    // Decimal point?
    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

    // Exponential form?
    if ((i = str.search(/e/i)) > 0) {

      // Determine exponent.
      if (e < 0) e = i;
      e += +str.slice(i + 1);
      str = str.substring(0, i);
    } else if (e < 0) {

      // Integer.
      e = str.length;
    }

    // Determine leading zeros.
    for (i = 0; str.charCodeAt(i) === 48; i++);

    // Determine trailing zeros.
    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
    str = str.slice(i, len);

    if (str) {
      len -= i;
      x.e = e = e - i - 1;
      x.d = [];

      // Transform base

      // e is the base 10 exponent.
      // i is where to slice str to get the first word of the digits array.
      i = (e + 1) % LOG_BASE;
      if (e < 0) i += LOG_BASE;

      if (i < len) {
        if (i) x.d.push(+str.slice(0, i));
        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
        str = str.slice(i);
        i = LOG_BASE - str.length;
      } else {
        i -= len;
      }

      for (; i--;) str += '0';
      x.d.push(+str);

      if (external) {

        // Overflow?
        if (x.e > x.constructor.maxE) {

          // Infinity.
          x.d = null;
          x.e = NaN;

        // Underflow?
        } else if (x.e < x.constructor.minE) {

          // Zero.
          x.e = 0;
          x.d = [0];
          // x.constructor.underflow = true;
        } // else x.constructor.underflow = false;
      }
    } else {

      // Zero.
      x.e = 0;
      x.d = [0];
    }

    return x;
  }


  /*
   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
   */
  function parseOther(x, str) {
    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

    if (str === 'Infinity' || str === 'NaN') {
      if (!+str) x.s = NaN;
      x.e = NaN;
      x.d = null;
      return x;
    }

    if (isHex.test(str))  {
      base = 16;
      str = str.toLowerCase();
    } else if (isBinary.test(str))  {
      base = 2;
    } else if (isOctal.test(str))  {
      base = 8;
    } else {
      throw Error(invalidArgument + str);
    }

    // Is there a binary exponent part?
    i = str.search(/p/i);

    if (i > 0) {
      p = +str.slice(i + 1);
      str = str.substring(2, i);
    } else {
      str = str.slice(2);
    }

    // Convert `str` as an integer then divide the result by `base` raised to a power such that the
    // fraction part will be restored.
    i = str.indexOf('.');
    isFloat = i >= 0;
    Ctor = x.constructor;

    if (isFloat) {
      str = str.replace('.', '');
      len = str.length;
      i = len - i;

      // log[10](16) = 1.2041... , log[10](88) = 1.9444....
      divisor = intPow(Ctor, new Ctor(base), i, i * 2);
    }

    xd = convertBase(str, base, BASE);
    xe = xd.length - 1;

    // Remove trailing zeros.
    for (i = xe; xd[i] === 0; --i) xd.pop();
    if (i < 0) return new Ctor(x.s * 0);
    x.e = getBase10Exponent(xd, xe);
    x.d = xd;
    external = false;

    // At what precision to perform the division to ensure exact conversion?
    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
    // Therefore using 4 * the number of digits of str will always be enough.
    if (isFloat) x = divide(x, divisor, len * 4);

    // Multiply by the binary exponent part if present.
    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
    external = true;

    return x;
  }


  /*
   * sin(x) = x - x^3/3! + x^5/5! - ...
   * |x| < pi/2
   *
   */
  function sine(Ctor, x) {
    var k,
      len = x.d.length;

    if (len < 3) return taylorSeries(Ctor, 2, x, x);

    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

    // Estimate the optimum number of times to use the argument reduction.
    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0;

    x = x.times(1 / tinyPow(5, k));
    x = taylorSeries(Ctor, 2, x, x);

    // Reverse argument reduction
    var sin2_x,
      d5 = new Ctor(5),
      d16 = new Ctor(16),
      d20 = new Ctor(20);
    for (; k--;) {
      sin2_x = x.times(x);
      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
    }

    return x;
  }


  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
  function taylorSeries(Ctor, n, x, y, isHyperbolic) {
    var j, t, u, x2,
      i = 1,
      pr = Ctor.precision,
      k = Math.ceil(pr / LOG_BASE);

    external = false;
    x2 = x.times(x);
    u = new Ctor(y);

    for (;;) {
      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
      u = isHyperbolic ? y.plus(t) : y.minus(t);
      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
      t = u.plus(y);

      if (t.d[k] !== void 0) {
        for (j = k; t.d[j] === u.d[j] && j--;);
        if (j == -1) break;
      }

      j = u;
      u = y;
      y = t;
      t = j;
      i++;
    }

    external = true;
    t.d.length = k + 1;

    return t;
  }


  // Exponent e must be positive and non-zero.
  function tinyPow(b, e) {
    var n = b;
    while (--e) n *= b;
    return n;
  }


  // Return the absolute value of `x` reduced to less than or equal to half pi.
  function toLessThanHalfPi(Ctor, x) {
    var t,
      isNeg = x.s < 0,
      pi = getPi(Ctor, Ctor.precision, 1),
      halfPi = pi.times(0.5);

    x = x.abs();

    if (x.lte(halfPi)) {
      quadrant = isNeg ? 4 : 1;
      return x;
    }

    t = x.divToInt(pi);

    if (t.isZero()) {
      quadrant = isNeg ? 3 : 2;
    } else {
      x = x.minus(t.times(pi));

      // 0 <= x < pi
      if (x.lte(halfPi)) {
        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
        return x;
      }

      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
    }

    return x.minus(pi).abs();
  }


  /*
   * Return the value of Decimal `x` as a string in base `baseOut`.
   *
   * If the optional `sd` argument is present include a binary exponent suffix.
   */
  function toStringBinary(x, baseOut, sd, rm) {
    var base, e, i, k, len, roundUp, str, xd, y,
      Ctor = x.constructor,
      isExp = sd !== void 0;

    if (isExp) {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    } else {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    }

    if (!x.isFinite()) {
      str = nonFiniteToString(x);
    } else {
      str = finiteToString(x);
      i = str.indexOf('.');

      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
      // minBinaryExponent = floor(decimalExponent * log[2](10))
      // log[2](10) = 3.321928094887362347870319429489390175864

      if (isExp) {
        base = 2;
        if (baseOut == 16) {
          sd = sd * 4 - 3;
        } else if (baseOut == 8) {
          sd = sd * 3 - 2;
        }
      } else {
        base = baseOut;
      }

      // Convert the number as an integer then divide the result by its base raised to a power such
      // that the fraction part will be restored.

      // Non-integer.
      if (i >= 0) {
        str = str.replace('.', '');
        y = new Ctor(1);
        y.e = str.length - i;
        y.d = convertBase(finiteToString(y), 10, base);
        y.e = y.d.length;
      }

      xd = convertBase(str, 10, base);
      e = len = xd.length;

      // Remove trailing zeros.
      for (; xd[--len] == 0;) xd.pop();

      if (!xd[0]) {
        str = isExp ? '0p+0' : '0';
      } else {
        if (i < 0) {
          e--;
        } else {
          x = new Ctor(x);
          x.d = xd;
          x.e = e;
          x = divide(x, y, sd, rm, 0, base);
          xd = x.d;
          e = x.e;
          roundUp = inexact;
        }

        // The rounding digit, i.e. the digit after the digit that may be rounded up.
        i = xd[sd];
        k = base / 2;
        roundUp = roundUp || xd[sd + 1] !== void 0;

        roundUp = rm < 4
          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
            rm === (x.s < 0 ? 8 : 7));

        xd.length = sd;

        if (roundUp) {

          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (; ++xd[--sd] > base - 1;) {
            xd[sd] = 0;
            if (!sd) {
              ++e;
              xd.unshift(1);
            }
          }
        }

        // Determine trailing zeros.
        for (len = xd.length; !xd[len - 1]; --len);

        // E.g. [4, 11, 15] becomes 4bf.
        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

        // Add binary exponent suffix?
        if (isExp) {
          if (len > 1) {
            if (baseOut == 16 || baseOut == 8) {
              i = baseOut == 16 ? 4 : 3;
              for (--len; len % i; len++) str += '0';
              xd = convertBase(str, base, baseOut);
              for (len = xd.length; !xd[len - 1]; --len);

              // xd[0] will always be be 1
              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
            } else {
              str = str.charAt(0) + '.' + str.slice(1);
            }
          }

          str =  str + (e < 0 ? 'p' : 'p+') + e;
        } else if (e < 0) {
          for (; ++e;) str = '0' + str;
          str = '0.' + str;
        } else {
          if (++e > len) for (e -= len; e-- ;) str += '0';
          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
        }
      }

      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
    }

    return x.s < 0 ? '-' + str : str;
  }


  // Does not strip trailing zeros.
  function truncate(arr, len) {
    if (arr.length > len) {
      arr.length = len;
      return true;
    }
  }


  // Decimal methods


  /*
   *  abs
   *  acos
   *  acosh
   *  add
   *  asin
   *  asinh
   *  atan
   *  atanh
   *  atan2
   *  cbrt
   *  ceil
   *  clone
   *  config
   *  cos
   *  cosh
   *  div
   *  exp
   *  floor
   *  hypot
   *  ln
   *  log
   *  log2
   *  log10
   *  max
   *  min
   *  mod
   *  mul
   *  pow
   *  random
   *  round
   *  set
   *  sign
   *  sin
   *  sinh
   *  sqrt
   *  sub
   *  tan
   *  tanh
   *  trunc
   */


  /*
   * Return a new Decimal whose value is the absolute value of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function abs(x) {
    return new this(x).abs();
  }


  /*
   * Return a new Decimal whose value is the arccosine in radians of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function acos(x) {
    return new this(x).acos();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function acosh(x) {
    return new this(x).acosh();
  }


  /*
   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function add(x, y) {
    return new this(x).plus(y);
  }


  /*
   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function asin(x) {
    return new this(x).asin();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function asinh(x) {
    return new this(x).asinh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function atan(x) {
    return new this(x).atan();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function atanh(x) {
    return new this(x).atanh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi, pi]
   *
   * y {number|string|Decimal} The y-coordinate.
   * x {number|string|Decimal} The x-coordinate.
   *
   * atan2(±0, -0)               = ±pi
   * atan2(±0, +0)               = ±0
   * atan2(±0, -x)               = ±pi for x > 0
   * atan2(±0, x)                = ±0 for x > 0
   * atan2(-y, ±0)               = -pi/2 for y > 0
   * atan2(y, ±0)                = pi/2 for y > 0
   * atan2(±y, -Infinity)        = ±pi for finite y > 0
   * atan2(±y, +Infinity)        = ±0 for finite y > 0
   * atan2(±Infinity, x)         = ±pi/2 for finite x
   * atan2(±Infinity, -Infinity) = ±3*pi/4
   * atan2(±Infinity, +Infinity) = ±pi/4
   * atan2(NaN, x) = NaN
   * atan2(y, NaN) = NaN
   *
   */
  function atan2(y, x) {
    y = new this(y);
    x = new this(x);
    var r,
      pr = this.precision,
      rm = this.rounding,
      wpr = pr + 4;

    // Either NaN
    if (!y.s || !x.s) {
      r = new this(NaN);

    // Both ±Infinity
    } else if (!y.d && !x.d) {
      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
      r.s = y.s;

    // x is ±Infinity or y is ±0
    } else if (!x.d || y.isZero()) {
      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
      r.s = y.s;

    // y is ±Infinity or x is ±0
    } else if (!y.d || x.isZero()) {
      r = getPi(this, wpr, 1).times(0.5);
      r.s = y.s;

    // Both non-zero and finite
    } else if (x.s < 0) {
      this.precision = wpr;
      this.rounding = 1;
      r = this.atan(divide(y, x, wpr, 1));
      x = getPi(this, wpr, 1);
      this.precision = pr;
      this.rounding = rm;
      r = y.s < 0 ? r.minus(x) : r.plus(x);
    } else {
      r = this.atan(divide(y, x, wpr, 1));
    }

    return r;
  }


  /*
   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function cbrt(x) {
    return new this(x).cbrt();
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
   *
   * x {number|string|Decimal}
   *
   */
  function ceil(x) {
    return finalise(x = new this(x), x.e + 1, 2);
  }


  /*
   * Configure global settings for a Decimal constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *   maxE       {number}
   *   minE       {number}
   *   modulo     {number}
   *   crypto     {boolean|number}
   *   defaults   {true}
   *
   * E.g. Decimal.config({ precision: 20, rounding: 4 })
   *
   */
  function config(obj) {
    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
    var i, p, v,
      useDefaults = obj.defaults === true,
      ps = [
        'precision', 1, MAX_DIGITS,
        'rounding', 0, 8,
        'toExpNeg', -EXP_LIMIT, 0,
        'toExpPos', 0, EXP_LIMIT,
        'maxE', 0, EXP_LIMIT,
        'minE', -EXP_LIMIT, 0,
        'modulo', 0, 9
      ];

    for (i = 0; i < ps.length; i += 3) {
      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
      if ((v = obj[p]) !== void 0) {
        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
        else throw Error(invalidArgument + p + ': ' + v);
      }
    }

    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
    if ((v = obj[p]) !== void 0) {
      if (v === true || v === false || v === 0 || v === 1) {
        if (v) {
          if (typeof crypto != 'undefined' && crypto &&
            (crypto.getRandomValues || crypto.randomBytes)) {
            this[p] = true;
          } else {
            throw Error(cryptoUnavailable);
          }
        } else {
          this[p] = false;
        }
      } else {
        throw Error(invalidArgument + p + ': ' + v);
      }
    }

    return this;
  }


  /*
   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cos(x) {
    return new this(x).cos();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cosh(x) {
    return new this(x).cosh();
  }


  /*
   * Create and return a Decimal constructor with the same configuration properties as this Decimal
   * constructor.
   *
   */
  function clone(obj) {
    var i, p, ps;

    /*
     * The Decimal constructor and exported function.
     * Return a new Decimal instance.
     *
     * v {number|string|Decimal} A numeric value.
     *
     */
    function Decimal(v) {
      var e, i, t,
        x = this;

      // Decimal called without new.
      if (!(x instanceof Decimal)) return new Decimal(v);

      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
      // which points to Object.
      x.constructor = Decimal;

      // Duplicate.
      if (v instanceof Decimal) {
        x.s = v.s;

        if (external) {
          if (!v.d || v.e > Decimal.maxE) {

            // Infinity.
            x.e = NaN;
            x.d = null;
          } else if (v.e < Decimal.minE) {

            // Zero.
            x.e = 0;
            x.d = [0];
          } else {
            x.e = v.e;
            x.d = v.d.slice();
          }
        } else {
          x.e = v.e;
          x.d = v.d ? v.d.slice() : v.d;
        }

        return;
      }

      t = typeof v;

      if (t === 'number') {
        if (v === 0) {
          x.s = 1 / v < 0 ? -1 : 1;
          x.e = 0;
          x.d = [0];
          return;
        }

        if (v < 0) {
          v = -v;
          x.s = -1;
        } else {
          x.s = 1;
        }

        // Fast path for small integers.
        if (v === ~~v && v < 1e7) {
          for (e = 0, i = v; i >= 10; i /= 10) e++;

          if (external) {
            if (e > Decimal.maxE) {
              x.e = NaN;
              x.d = null;
            } else if (e < Decimal.minE) {
              x.e = 0;
              x.d = [0];
            } else {
              x.e = e;
              x.d = [v];
            }
          } else {
            x.e = e;
            x.d = [v];
          }

          return;

        // Infinity, NaN.
        } else if (v * 0 !== 0) {
          if (!v) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return;
        }

        return parseDecimal(x, v.toString());

      } else if (t !== 'string') {
        throw Error(invalidArgument + v);
      }

      // Minus sign?
      if ((i = v.charCodeAt(0)) === 45) {
        v = v.slice(1);
        x.s = -1;
      } else {
        // Plus sign?
        if (i === 43) v = v.slice(1);
        x.s = 1;
      }

      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
    }

    Decimal.prototype = P;

    Decimal.ROUND_UP = 0;
    Decimal.ROUND_DOWN = 1;
    Decimal.ROUND_CEIL = 2;
    Decimal.ROUND_FLOOR = 3;
    Decimal.ROUND_HALF_UP = 4;
    Decimal.ROUND_HALF_DOWN = 5;
    Decimal.ROUND_HALF_EVEN = 6;
    Decimal.ROUND_HALF_CEIL = 7;
    Decimal.ROUND_HALF_FLOOR = 8;
    Decimal.EUCLID = 9;

    Decimal.config = Decimal.set = config;
    Decimal.clone = clone;
    Decimal.isDecimal = isDecimalInstance;

    Decimal.abs = abs;
    Decimal.acos = acos;
    Decimal.acosh = acosh;        // ES6
    Decimal.add = add;
    Decimal.asin = asin;
    Decimal.asinh = asinh;        // ES6
    Decimal.atan = atan;
    Decimal.atanh = atanh;        // ES6
    Decimal.atan2 = atan2;
    Decimal.cbrt = cbrt;          // ES6
    Decimal.ceil = ceil;
    Decimal.cos = cos;
    Decimal.cosh = cosh;          // ES6
    Decimal.div = div;
    Decimal.exp = exp;
    Decimal.floor = floor;
    Decimal.hypot = hypot;        // ES6
    Decimal.ln = ln;
    Decimal.log = log;
    Decimal.log10 = log10;        // ES6
    Decimal.log2 = log2;          // ES6
    Decimal.max = max;
    Decimal.min = min;
    Decimal.mod = mod;
    Decimal.mul = mul;
    Decimal.pow = pow;
    Decimal.random = random;
    Decimal.round = round;
    Decimal.sign = sign;          // ES6
    Decimal.sin = sin;
    Decimal.sinh = sinh;          // ES6
    Decimal.sqrt = sqrt;
    Decimal.sub = sub;
    Decimal.tan = tan;
    Decimal.tanh = tanh;          // ES6
    Decimal.trunc = trunc;        // ES6

    if (obj === void 0) obj = {};
    if (obj) {
      if (obj.defaults !== true) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
      }
    }

    Decimal.config(obj);

    return Decimal;
  }


  /*
   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function div(x, y) {
    return new this(x).div(y);
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The power to which to raise the base of the natural log.
   *
   */
  function exp(x) {
    return new this(x).exp();
  }


  /*
   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
   *
   * x {number|string|Decimal}
   *
   */
  function floor(x) {
    return finalise(x = new this(x), x.e + 1, 3);
  }


  /*
   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
   *
   * arguments {number|string|Decimal}
   *
   */
  function hypot() {
    var i, n,
      t = new this(0);

    external = false;

    for (i = 0; i < arguments.length;) {
      n = new this(arguments[i++]);
      if (!n.d) {
        if (n.s) {
          external = true;
          return new this(1 / 0);
        }
        t = n;
      } else if (t.d) {
        t = t.plus(n.times(n));
      }
    }

    external = true;

    return t.sqrt();
  }


  /*
   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
   * otherwise return false.
   *
   */
  function isDecimalInstance(obj) {
    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function ln(x) {
    return new this(x).ln();
  }


  /*
   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * log[y](x)
   *
   * x {number|string|Decimal} The argument of the logarithm.
   * y {number|string|Decimal} The base of the logarithm.
   *
   */
  function log(x, y) {
    return new this(x).log(y);
  }


  /*
   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log2(x) {
    return new this(x).log(2);
  }


  /*
   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log10(x) {
    return new this(x).log(10);
  }


  /*
   * Return a new Decimal whose value is the maximum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function max() {
    return maxOrMin(this, arguments, 'lt');
  }


  /*
   * Return a new Decimal whose value is the minimum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function min() {
    return maxOrMin(this, arguments, 'gt');
  }


  /*
   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mod(x, y) {
    return new this(x).mod(y);
  }


  /*
   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mul(x, y) {
    return new this(x).mul(y);
  }


  /*
   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The base.
   * y {number|string|Decimal} The exponent.
   *
   */
  function pow(x, y) {
    return new this(x).pow(y);
  }


  /*
   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
   * are produced).
   *
   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
   *
   */
  function random(sd) {
    var d, e, k, n,
      i = 0,
      r = new this(1),
      rd = [];

    if (sd === void 0) sd = this.precision;
    else checkInt32(sd, 1, MAX_DIGITS);

    k = Math.ceil(sd / LOG_BASE);

    if (!this.crypto) {
      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

    // Browsers supporting crypto.getRandomValues.
    } else if (crypto.getRandomValues) {
      d = crypto.getRandomValues(new Uint32Array(k));

      for (; i < k;) {
        n = d[i];

        // 0 <= n < 4294967296
        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
        if (n >= 4.29e9) {
          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
        } else {

          // 0 <= n <= 4289999999
          // 0 <= (n % 1e7) <= 9999999
          rd[i++] = n % 1e7;
        }
      }

    // Node.js supporting crypto.randomBytes.
    } else if (crypto.randomBytes) {

      // buffer
      d = crypto.randomBytes(k *= 4);

      for (; i < k;) {

        // 0 <= n < 2147483648
        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
        if (n >= 2.14e9) {
          crypto.randomBytes(4).copy(d, i);
        } else {

          // 0 <= n <= 2139999999
          // 0 <= (n % 1e7) <= 9999999
          rd.push(n % 1e7);
          i += 4;
        }
      }

      i = k / 4;
    } else {
      throw Error(cryptoUnavailable);
    }

    k = rd[--i];
    sd %= LOG_BASE;

    // Convert trailing digits to zeros according to sd.
    if (k && sd) {
      n = mathpow(10, LOG_BASE - sd);
      rd[i] = (k / n | 0) * n;
    }

    // Remove trailing words which are zero.
    for (; rd[i] === 0; i--) rd.pop();

    // Zero?
    if (i < 0) {
      e = 0;
      rd = [0];
    } else {
      e = -1;

      // Remove leading words which are zero and adjust exponent accordingly.
      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

      // Count the digits of the first word of rd to determine leading zeros.
      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

      // Adjust the exponent for leading zeros of the first word of rd.
      if (k < LOG_BASE) e -= LOG_BASE - k;
    }

    r.e = e;
    r.d = rd;

    return r;
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
   *
   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
   *
   * x {number|string|Decimal}
   *
   */
  function round(x) {
    return finalise(x = new this(x), x.e + 1, this.rounding);
  }


  /*
   * Return
   *   1    if x > 0,
   *  -1    if x < 0,
   *   0    if x is 0,
   *  -0    if x is -0,
   *   NaN  otherwise
   *
   * x {number|string|Decimal}
   *
   */
  function sign(x) {
    x = new this(x);
    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
  }


  /*
   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sin(x) {
    return new this(x).sin();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sinh(x) {
    return new this(x).sinh();
  }


  /*
   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function sqrt(x) {
    return new this(x).sqrt();
  }


  /*
   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function sub(x, y) {
    return new this(x).sub(y);
  }


  /*
   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tan(x) {
    return new this(x).tan();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tanh(x) {
    return new this(x).tanh();
  }


  /*
   * Return a new Decimal whose value is `x` truncated to an integer.
   *
   * x {number|string|Decimal}
   *
   */
  function trunc(x) {
    return finalise(x = new this(x), x.e + 1, 1);
  }


  // Create and configure initial Decimal constructor.
  Decimal = clone(DEFAULTS);

  Decimal['default'] = Decimal.Decimal = Decimal;

  // Create the internal constants from their string values.
  LN10 = new Decimal(LN10);
  PI = new Decimal(PI);


  // Export.


  // AMD.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return Decimal;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  // Node and other environments that support module.exports.
  } else {}
})(this);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Map the characters to escape to their escaped values. The list is derived
// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var defaultEscapes = {
  "{": "\\{",
  "}": "\\}",
  "\\": "\\textbackslash{}",
  "#": "\\#",
  $: "\\$",
  "%": "\\%",
  "&": "\\&",
  "^": "\\textasciicircum{}",
  _: "\\_",
  "~": "\\textasciitilde{}"
};
var formatEscapes = {
  "\u2013": "\\--",
  "\u2014": "\\---",
  " ": "~",
  "\t": "\\qquad{}",
  "\r\n": "\\newline{}",
  "\n": "\\newline{}"
};

var defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {
  return _extends({}, defaultEscapes, formatEscapes);
};

/**
 * Escape a string to be used in LaTeX documents.
 * @param {string} str the string to be escaped.
 * @param {boolean} params.preserveFormatting whether formatting escapes should
 *  be performed (default: false).
 * @param {function} params.escapeMapFn the function to modify the escape maps.
 * @return {string} the escaped string, ready to be used in LaTeX.
 */
module.exports = function (str) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$preserveFormatti = _ref.preserveFormatting,
      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,
      _ref$escapeMapFn = _ref.escapeMapFn,
      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;

  var runningStr = String(str);
  var result = "";

  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});
  var escapeKeys = Object.keys(escapes); // as it is reused later on

  // Algorithm: Go through the string character by character, if it matches
  // with one of the special characters then we'll replace it with the escaped
  // version.

  var _loop = function _loop() {
    var specialCharFound = false;
    escapeKeys.forEach(function (key, index) {
      if (specialCharFound) {
        return;
      }
      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {
        result += escapes[escapeKeys[index]];
        runningStr = runningStr.slice(key.length, runningStr.length);
        specialCharFound = true;
      }
    });
    if (!specialCharFound) {
      result += runningStr.slice(0, 1);
      runningStr = runningStr.slice(1, runningStr.length);
    }
  };

  while (runningStr) {
    _loop();
  }
  return result;
};

/***/ }),
/* 18 */
/***/ (function(module, exports) {

function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;
module.exports.TinyEmitter = E;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var all = __webpack_require__(21);

var _require = __webpack_require__(22),
    create = _require.create;

var defaultInstance = create(all); // TODO: not nice having to revert to CommonJS, find an ES6 solution

module.exports =
/* #__PURE__ */
defaultInstance;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./src/utils/is.js
var is = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/typed-function/typed-function.js
var typed_function = __webpack_require__(14);
var typed_function_default = /*#__PURE__*/__webpack_require__.n(typed_function);

// EXTERNAL MODULE: ./src/utils/number.js
var utils_number = __webpack_require__(4);

// EXTERNAL MODULE: ./src/utils/factory.js
var factory = __webpack_require__(0);

// CONCATENATED MODULE: ./src/core/function/typed.js
/**
 * Create a typed-function which checks the types of the arguments and
 * can match them against multiple provided signatures. The typed-function
 * automatically converts inputs in order to find a matching signature.
 * Typed functions throw informative errors in case of wrong input arguments.
 *
 * See the library [typed-function](https://github.com/josdejong/typed-function)
 * for detailed documentation.
 *
 * Syntax:
 *
 *     math.typed(name, signatures) : function
 *     math.typed(signatures) : function
 *
 * Examples:
 *
 *     // create a typed function with multiple types per argument (type union)
 *     const fn2 = typed({
 *       'number | boolean': function (b) {
 *         return 'b is a number or boolean'
 *       },
 *       'string, number | boolean': function (a, b) {
 *         return 'a is a string, b is a number or boolean'
 *       }
 *     })
 *
 *     // create a typed function with an any type argument
 *     const log = typed({
 *       'string, any': function (event, data) {
 *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
 *       }
 *     })
 *
 * @param {string} [name]                          Optional name for the typed-function
 * @param {Object<string, function>} signatures   Object with one or multiple function signatures
 * @returns {function} The created typed-function.
 */



 // returns a new instance of typed-function

var _createTyped2 = function _createTyped() {
  // initially, return the original instance of typed-function
  // consecutively, return a new instance from typed.create.
  _createTyped2 = typed_function_default.a.create;
  return typed_function_default.a;
};

var typed_dependencies = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];
/**
 * Factory function for creating a new typed instance
 * @param {Object} dependencies   Object with data types like Complex and BigNumber
 * @returns {Function}
 */

var typed_createTyped =
/* #__PURE__ */
Object(factory["a" /* factory */])('typed', typed_dependencies, function createTyped(_ref) {
  var BigNumber = _ref.BigNumber,
      Complex = _ref.Complex,
      DenseMatrix = _ref.DenseMatrix,
      Fraction = _ref.Fraction;

  // TODO: typed-function must be able to silently ignore signatures with unknown data types
  // get a new instance of typed-function
  var typed = _createTyped2(); // define all types. The order of the types determines in which order function
  // arguments are type-checked (so for performance it's important to put the
  // most used types first).


  typed.types = [{
    name: 'number',
    test: is["y" /* isNumber */]
  }, {
    name: 'Complex',
    test: is["j" /* isComplex */]
  }, {
    name: 'BigNumber',
    test: is["e" /* isBigNumber */]
  }, {
    name: 'Fraction',
    test: is["o" /* isFraction */]
  }, {
    name: 'Unit',
    test: is["L" /* isUnit */]
  }, {
    name: 'string',
    test: is["I" /* isString */]
  }, {
    name: 'Chain',
    test: is["h" /* isChain */]
  }, {
    name: 'Array',
    test: is["b" /* isArray */]
  }, {
    name: 'Matrix',
    test: is["v" /* isMatrix */]
  }, {
    name: 'DenseMatrix',
    test: is["n" /* isDenseMatrix */]
  }, {
    name: 'SparseMatrix',
    test: is["H" /* isSparseMatrix */]
  }, {
    name: 'Range',
    test: is["D" /* isRange */]
  }, {
    name: 'Index',
    test: is["t" /* isIndex */]
  }, {
    name: 'boolean',
    test: is["g" /* isBoolean */]
  }, {
    name: 'ResultSet',
    test: is["G" /* isResultSet */]
  }, {
    name: 'Help',
    test: is["s" /* isHelp */]
  }, {
    name: 'function',
    test: is["p" /* isFunction */]
  }, {
    name: 'Date',
    test: is["m" /* isDate */]
  }, {
    name: 'RegExp',
    test: is["F" /* isRegExp */]
  }, {
    name: 'null',
    test: is["x" /* isNull */]
  }, {
    name: 'undefined',
    test: is["K" /* isUndefined */]
  }, {
    name: 'AccessorNode',
    test: is["a" /* isAccessorNode */]
  }, {
    name: 'ArrayNode',
    test: is["c" /* isArrayNode */]
  }, {
    name: 'AssignmentNode',
    test: is["d" /* isAssignmentNode */]
  }, {
    name: 'BlockNode',
    test: is["f" /* isBlockNode */]
  }, {
    name: 'ConditionalNode',
    test: is["k" /* isConditionalNode */]
  }, {
    name: 'ConstantNode',
    test: is["l" /* isConstantNode */]
  }, {
    name: 'FunctionNode',
    test: is["r" /* isFunctionNode */]
  }, {
    name: 'FunctionAssignmentNode',
    test: is["q" /* isFunctionAssignmentNode */]
  }, {
    name: 'IndexNode',
    test: is["u" /* isIndexNode */]
  }, {
    name: 'Node',
    test: is["w" /* isNode */]
  }, {
    name: 'ObjectNode',
    test: is["A" /* isObjectNode */]
  }, {
    name: 'OperatorNode',
    test: is["B" /* isOperatorNode */]
  }, {
    name: 'ParenthesisNode',
    test: is["C" /* isParenthesisNode */]
  }, {
    name: 'RangeNode',
    test: is["E" /* isRangeNode */]
  }, {
    name: 'SymbolNode',
    test: is["J" /* isSymbolNode */]
  }, {
    name: 'Object',
    test: is["z" /* isObject */]
  } // order 'Object' last, it matches on other classes too
  ];
  typed.conversions = [{
    from: 'number',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      } // note: conversion from number to BigNumber can fail if x has >15 digits


      if (Object(utils_number["f" /* digits */])(x) > 15) {
        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
      }

      return new BigNumber(x);
    }
  }, {
    from: 'number',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x, 0);
    }
  }, {
    from: 'number',
    to: 'string',
    convert: function convert(x) {
      return x + '';
    }
  }, {
    from: 'BigNumber',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x.toNumber(), 0);
    }
  }, {
    from: 'Fraction',
    to: 'BigNumber',
    convert: function convert(x) {
      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
    }
  }, {
    from: 'Fraction',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x.valueOf(), 0);
    }
  }, {
    from: 'number',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      var f = new Fraction(x);

      if (f.valueOf() !== x) {
        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
      }

      return f;
    }
  }, {
    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
    //  from: 'Fraction',
    //  to: 'number',
    //  convert: function (x) {
    //    return x.valueOf()
    //  }
    // }, {
    from: 'string',
    to: 'number',
    convert: function convert(x) {
      var n = Number(x);

      if (isNaN(n)) {
        throw new Error('Cannot convert "' + x + '" to a number');
      }

      return n;
    }
  }, {
    from: 'string',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      }

      try {
        return new BigNumber(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to BigNumber');
      }
    }
  }, {
    from: 'string',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      try {
        return new Fraction(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Fraction');
      }
    }
  }, {
    from: 'string',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      try {
        return new Complex(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Complex');
      }
    }
  }, {
    from: 'boolean',
    to: 'number',
    convert: function convert(x) {
      return +x;
    }
  }, {
    from: 'boolean',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      }

      return new BigNumber(+x);
    }
  }, {
    from: 'boolean',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      return new Fraction(+x);
    }
  }, {
    from: 'boolean',
    to: 'string',
    convert: function convert(x) {
      return String(x);
    }
  }, {
    from: 'Array',
    to: 'Matrix',
    convert: function convert(array) {
      if (!DenseMatrix) {
        throwNoMatrix();
      }

      return new DenseMatrix(array);
    }
  }, {
    from: 'Matrix',
    to: 'Array',
    convert: function convert(matrix) {
      return matrix.valueOf();
    }
  }];
  return typed;
});

function throwNoBignumber(x) {
  throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
}

function throwNoComplex(x) {
  throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
}

function throwNoMatrix() {
  throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
}

function throwNoFraction(x) {
  throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
}
// CONCATENATED MODULE: ./src/type/resultset/ResultSet.js

var ResultSet_name = 'ResultSet';
var ResultSet_dependencies = [];
var createResultSet =
/* #__PURE__ */
Object(factory["a" /* factory */])(ResultSet_name, ResultSet_dependencies, function () {
  /**
   * A ResultSet contains a list or results
   * @class ResultSet
   * @param {Array} entries
   * @constructor ResultSet
   */
  function ResultSet(entries) {
    if (!(this instanceof ResultSet)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.entries = entries || [];
  }
  /**
   * Attach type information
   */


  ResultSet.prototype.type = 'ResultSet';
  ResultSet.prototype.isResultSet = true;
  /**
   * Returns the array with results hold by this ResultSet
   * @memberof ResultSet
   * @returns {Array} entries
   */

  ResultSet.prototype.valueOf = function () {
    return this.entries;
  };
  /**
   * Returns the stringified results of the ResultSet
   * @memberof ResultSet
   * @returns {string} string
   */


  ResultSet.prototype.toString = function () {
    return '[' + this.entries.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the ResultSet
   * @memberof ResultSet
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "ResultSet", "entries": [...]}`
   */


  ResultSet.prototype.toJSON = function () {
    return {
      mathjs: 'ResultSet',
      entries: this.entries
    };
  };
  /**
   * Instantiate a ResultSet from a JSON object
   * @memberof ResultSet
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "ResultSet", "entries": [...]}`
   * @return {ResultSet}
   */


  ResultSet.fromJSON = function (json) {
    return new ResultSet(json.entries);
  };

  return ResultSet;
}, {
  isClass: true
});
// EXTERNAL MODULE: ./node_modules/decimal.js/decimal.js
var decimal = __webpack_require__(16);
var decimal_default = /*#__PURE__*/__webpack_require__.n(decimal);

// CONCATENATED MODULE: ./src/type/bignumber/BigNumber.js


var BigNumber_name = 'BigNumber';
var BigNumber_dependencies = ['?on', 'config'];
var createBigNumberClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(BigNumber_name, BigNumber_dependencies, function (_ref) {
  var on = _ref.on,
      config = _ref.config;
  var BigNumber = decimal_default.a.clone({
    precision: config.precision
  });
  /**
   * Attach type information
   */

  BigNumber.prototype.type = 'BigNumber';
  BigNumber.prototype.isBigNumber = true;
  /**
   * Get a JSON representation of a BigNumber containing
   * type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
   */

  BigNumber.prototype.toJSON = function () {
    return {
      mathjs: 'BigNumber',
      value: this.toString()
    };
  };
  /**
   * Instantiate a BigNumber from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
   * @return {BigNumber}
   */


  BigNumber.fromJSON = function (json) {
    return new BigNumber(json.value);
  };

  if (on) {
    // listen for changed in the configuration, automatically apply changed precision
    on('config', function (curr, prev) {
      if (curr.precision !== prev.precision) {
        BigNumber.config({
          precision: curr.precision
        });
      }
    });
  }

  return BigNumber;
}, {
  isClass: true
});
// EXTERNAL MODULE: ./node_modules/complex.js/complex.js
var complex_js_complex = __webpack_require__(9);
var complex_default = /*#__PURE__*/__webpack_require__.n(complex_js_complex);

// CONCATENATED MODULE: ./src/type/complex/Complex.js
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }





var Complex_name = 'Complex';
var Complex_dependencies = [];
var createComplexClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(Complex_name, Complex_dependencies, function () {
  /**
   * Attach type information
   */
  complex_default.a.prototype.type = 'Complex';
  complex_default.a.prototype.isComplex = true;
  /**
   * Get a JSON representation of the complex number
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
   */

  complex_default.a.prototype.toJSON = function () {
    return {
      mathjs: 'Complex',
      re: this.re,
      im: this.im
    };
  };
  /*
   * Return the value of the complex number in polar notation
   * The angle phi will be set in the interval of [-pi, pi].
   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
   */


  complex_default.a.prototype.toPolar = function () {
    return {
      r: this.abs(),
      phi: this.arg()
    };
  };
  /**
   * Get a string representation of the complex number,
   * with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string} str
   */


  complex_default.a.prototype.format = function (options) {
    var str = '';
    var im = this.im;
    var re = this.re;
    var strRe = Object(utils_number["h" /* format */])(this.re, options);
    var strIm = Object(utils_number["h" /* format */])(this.im, options); // round either re or im when smaller than the configured precision

    var precision = Object(is["y" /* isNumber */])(options) ? options : options ? options.precision : null;

    if (precision !== null) {
      var epsilon = Math.pow(10, -precision);

      if (Math.abs(re / im) < epsilon) {
        re = 0;
      }

      if (Math.abs(im / re) < epsilon) {
        im = 0;
      }
    }

    if (im === 0) {
      // real value
      str = strRe;
    } else if (re === 0) {
      // purely complex value
      if (im === 1) {
        str = 'i';
      } else if (im === -1) {
        str = '-i';
      } else {
        str = strIm + 'i';
      }
    } else {
      // complex value
      if (im < 0) {
        if (im === -1) {
          str = strRe + ' - i';
        } else {
          str = strRe + ' - ' + strIm.substring(1) + 'i';
        }
      } else {
        if (im === 1) {
          str = strRe + ' + i';
        } else {
          str = strRe + ' + ' + strIm + 'i';
        }
      }
    }

    return str;
  };
  /**
   * Create a complex number from polar coordinates
   *
   * Usage:
   *
   *     Complex.fromPolar(r: number, phi: number) : Complex
   *     Complex.fromPolar({r: number, phi: number}) : Complex
   *
   * @param {*} args...
   * @return {Complex}
   */


  complex_default.a.fromPolar = function (args) {
    switch (arguments.length) {
      case 1:
        {
          var arg = arguments[0];

          if (_typeof(arg) === 'object') {
            return complex_default()(arg);
          } else {
            throw new TypeError('Input has to be an object with r and phi keys.');
          }
        }

      case 2:
        {
          var r = arguments[0];
          var phi = arguments[1];

          if (Object(is["y" /* isNumber */])(r)) {
            if (Object(is["L" /* isUnit */])(phi) && phi.hasBase('ANGLE')) {
              // convert unit to a number in radians
              phi = phi.toNumber('rad');
            }

            if (Object(is["y" /* isNumber */])(phi)) {
              return new complex_default.a({
                r: r,
                phi: phi
              });
            }

            throw new TypeError('Phi is not a number nor an angle unit.');
          } else {
            throw new TypeError('Radius r is not a number.');
          }
        }

      default:
        throw new SyntaxError('Wrong number of arguments in function fromPolar');
    }
  };

  complex_default.a.prototype.valueOf = complex_default.a.prototype.toString;
  /**
   * Create a Complex number from a JSON object
   * @param {Object} json  A JSON Object structured as
   *                       {"mathjs": "Complex", "re": 2, "im": 3}
   *                       All properties are optional, default values
   *                       for `re` and `im` are 0.
   * @return {Complex} Returns a new Complex number
   */

  complex_default.a.fromJSON = function (json) {
    return new complex_default.a(json);
  };
  /**
   * Compare two complex numbers, `a` and `b`:
   *
   * - Returns 1 when the real part of `a` is larger than the real part of `b`
   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
   * - Returns 1 when the real parts are equal
   *   and the imaginary part of `a` is larger than the imaginary part of `b`
   * - Returns -1 when the real parts are equal
   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
   * - Returns 0 when both real and imaginary parts are equal.
   *
   * @params {Complex} a
   * @params {Complex} b
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  complex_default.a.compare = function (a, b) {
    if (a.re > b.re) {
      return 1;
    }

    if (a.re < b.re) {
      return -1;
    }

    if (a.im > b.im) {
      return 1;
    }

    if (a.im < b.im) {
      return -1;
    }

    return 0;
  };

  return complex_default.a;
}, {
  isClass: true
});
// EXTERNAL MODULE: ./node_modules/fraction.js/fraction.js
var fraction_js_fraction = __webpack_require__(11);
var fraction_default = /*#__PURE__*/__webpack_require__.n(fraction_js_fraction);

// CONCATENATED MODULE: ./src/type/fraction/Fraction.js


var Fraction_name = 'Fraction';
var Fraction_dependencies = [];
var createFractionClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(Fraction_name, Fraction_dependencies, function () {
  /**
   * Attach type information
   */
  fraction_default.a.prototype.type = 'Fraction';
  fraction_default.a.prototype.isFraction = true;
  /**
   * Get a JSON representation of a Fraction containing type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
   */

  fraction_default.a.prototype.toJSON = function () {
    return {
      mathjs: 'Fraction',
      n: this.s * this.n,
      d: this.d
    };
  };
  /**
   * Instantiate a Fraction from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
   * @return {BigNumber}
   */


  fraction_default.a.fromJSON = function (json) {
    return new fraction_default.a(json);
  };

  return fraction_default.a;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/type/matrix/Range.js



var Range_name = 'Range';
var Range_dependencies = [];
var createRangeClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(Range_name, Range_dependencies, function () {
  /**
   * Create a range. A range has a start, step, and end, and contains functions
   * to iterate over the range.
   *
   * A range can be constructed as:
   *
   *     const range = new Range(start, end)
   *     const range = new Range(start, end, step)
   *
   * To get the result of the range:
   *     range.forEach(function (x) {
   *         console.log(x)
   *     })
   *     range.map(function (x) {
   *         return math.sin(x)
   *     })
   *     range.toArray()
   *
   * Example usage:
   *
   *     const c = new Range(2, 6)       // 2:1:5
   *     c.toArray()                     // [2, 3, 4, 5]
   *     const d = new Range(2, -3, -1)  // 2:-1:-2
   *     d.toArray()                     // [2, 1, 0, -1, -2]
   *
   * @class Range
   * @constructor Range
   * @param {number} start  included lower bound
   * @param {number} end    excluded upper bound
   * @param {number} [step] step size, default value is 1
   */
  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    var hasStart = start !== null && start !== undefined;
    var hasEnd = end !== null && end !== undefined;
    var hasStep = step !== null && step !== undefined;

    if (hasStart) {
      if (Object(is["e" /* isBigNumber */])(start)) {
        start = start.toNumber();
      } else if (typeof start !== 'number') {
        throw new TypeError('Parameter start must be a number');
      }
    }

    if (hasEnd) {
      if (Object(is["e" /* isBigNumber */])(end)) {
        end = end.toNumber();
      } else if (typeof end !== 'number') {
        throw new TypeError('Parameter end must be a number');
      }
    }

    if (hasStep) {
      if (Object(is["e" /* isBigNumber */])(step)) {
        step = step.toNumber();
      } else if (typeof step !== 'number') {
        throw new TypeError('Parameter step must be a number');
      }
    }

    this.start = hasStart ? parseFloat(start) : 0;
    this.end = hasEnd ? parseFloat(end) : 0;
    this.step = hasStep ? parseFloat(step) : 1;
  }
  /**
   * Attach type information
   */


  Range.prototype.type = 'Range';
  Range.prototype.isRange = true;
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @memberof Range
   * @param {string} str
   * @return {Range | null} range
   */

  Range.parse = function (str) {
    if (typeof str !== 'string') {
      return null;
    }

    var args = str.split(':');
    var nums = args.map(function (arg) {
      return parseFloat(arg);
    });
    var invalid = nums.some(function (num) {
      return isNaN(num);
    });

    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return new Range(nums[0], nums[1]);

      case 3:
        return new Range(nums[0], nums[2], nums[1]);

      default:
        return null;
    }
  };
  /**
   * Create a clone of the range
   * @return {Range} clone
   */


  Range.prototype.clone = function () {
    return new Range(this.start, this.end, this.step);
  };
  /**
   * Retrieve the size of the range.
   * Returns an array containing one number, the number of elements in the range.
   * @memberof Range
   * @returns {number[]} size
   */


  Range.prototype.size = function () {
    var len = 0;
    var start = this.start;
    var step = this.step;
    var end = this.end;
    var diff = end - start;

    if (Object(utils_number["n" /* sign */])(step) === Object(utils_number["n" /* sign */])(diff)) {
      len = Math.ceil(diff / step);
    } else if (diff === 0) {
      len = 0;
    }

    if (isNaN(len)) {
      len = 0;
    }

    return [len];
  };
  /**
   * Calculate the minimum value in the range
   * @memberof Range
   * @return {number | undefined} min
   */


  Range.prototype.min = function () {
    var size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start;
      } else {
        // negative step
        return this.start + (size - 1) * this.step;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Calculate the maximum value in the range
   * @memberof Range
   * @return {number | undefined} max
   */


  Range.prototype.max = function () {
    var size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start + (size - 1) * this.step;
      } else {
        // negative step
        return this.start;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Execute a callback function for each value in the range.
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Range being traversed.
   */


  Range.prototype.forEach = function (callback) {
    var x = this.start;
    var step = this.step;
    var end = this.end;
    var i = 0;

    if (step > 0) {
      while (x < end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    } else if (step < 0) {
      while (x > end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    }
  };
  /**
   * Execute a callback function for each value in the Range, and return the
   * results as an array
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @returns {Array} array
   */


  Range.prototype.map = function (callback) {
    var array = [];
    this.forEach(function (value, index, obj) {
      array[index[0]] = callback(value, index, obj);
    });
    return array;
  };
  /**
   * Create an Array with a copy of the Ranges data
   * @memberof Range
   * @returns {Array} array
   */


  Range.prototype.toArray = function () {
    var array = [];
    this.forEach(function (value, index) {
      array[index[0]] = value;
    });
    return array;
  };
  /**
   * Get the primitive value of the Range, a one dimensional array
   * @memberof Range
   * @returns {Array} array
   */


  Range.prototype.valueOf = function () {
    // TODO: implement a caching mechanism for range.valueOf()
    return this.toArray();
  };
  /**
   * Get a string representation of the range, with optional formatting options.
   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
   * @memberof Range
   * @param {Object | number | function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  Range.prototype.format = function (options) {
    var str = Object(utils_number["h" /* format */])(this.start, options);

    if (this.step !== 1) {
      str += ':' + Object(utils_number["h" /* format */])(this.step, options);
    }

    str += ':' + Object(utils_number["h" /* format */])(this.end, options);
    return str;
  };
  /**
   * Get a string representation of the range.
   * @memberof Range
   * @returns {string}
   */


  Range.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the range
   * @memberof Range
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   */


  Range.prototype.toJSON = function () {
    return {
      mathjs: 'Range',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate a Range from a JSON object
   * @memberof Range
   * @param {Object} json A JSON object structured as:
   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   * @return {Range}
   */


  Range.fromJSON = function (json) {
    return new Range(json.start, json.end, json.step);
  };

  return Range;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/type/matrix/Matrix.js

var Matrix_name = 'Matrix';
var Matrix_dependencies = [];
var createMatrixClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(Matrix_name, Matrix_dependencies, function () {
  /**
   * @constructor Matrix
   *
   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
   * array. A matrix can be constructed as:
   *
   *     let matrix = math.matrix(data)
   *
   * Matrix contains the functions to resize, get and set values, get the size,
   * clone the matrix and to convert the matrix to a vector, array, or scalar.
   * Furthermore, one can iterate over the matrix using map and forEach.
   * The internal Array of the Matrix can be accessed using the function valueOf.
   *
   * Example usage:
   *
   *     let matrix = math.matrix([[1, 2], [3, 4]])
   *     matix.size()              // [2, 2]
   *     matrix.resize([3, 2], 5)
   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
   *
   */
  function Matrix() {
    if (!(this instanceof Matrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Attach type information
   */


  Matrix.prototype.type = 'Matrix';
  Matrix.prototype.isMatrix = true;
  /**
   * Get the Matrix storage constructor for the given format.
   *
   * @param {string} format       The Matrix storage format.
   *
   * @return {Function}           The Matrix storage constructor.
   */

  Matrix.storage = function (format) {
    // TODO: deprecated since v6.0.0. Clean up some day
    throw new Error('Matrix.storage is deprecated since v6.0.0. ' + 'Use the factory function math.matrix instead.');
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @return {string}           The storage format.
   */


  Matrix.prototype.storage = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke storage on a Matrix interface');
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @return {string}           The datatype.
   */


  Matrix.prototype.datatype = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke datatype on a Matrix interface');
  };
  /**
   * Create a new Matrix With the type of the current matrix instance
   * @param {Array | Object} data
   * @param {string} [datatype]
   */


  Matrix.prototype.create = function (data, datatype) {
    throw new Error('Cannot invoke create on a Matrix interface');
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  Matrix.prototype.subset = function (index, replacement, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke subset on a Matrix interface');
  };
  /**
   * Get a single element from the matrix.
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  Matrix.prototype.get = function (index) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke get on a Matrix interface');
  };
  /**
   * Replace a single element in the matrix.
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {Matrix} self
   */


  Matrix.prototype.set = function (index, value, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke set on a Matrix interface');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  Matrix.prototype.resize = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke resize on a Matrix interface');
  };
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  Matrix.prototype.reshape = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke reshape on a Matrix interface');
  };
  /**
   * Create a clone of the matrix
   * @return {Matrix} clone
   */


  Matrix.prototype.clone = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke clone on a Matrix interface');
  };
  /**
   * Retrieve the size of the matrix.
   * @returns {number[]} size
   */


  Matrix.prototype.size = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke size on a Matrix interface');
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {Matrix} matrix
   */


  Matrix.prototype.map = function (callback, skipZeros) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke map on a Matrix interface');
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */


  Matrix.prototype.forEach = function (callback) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke forEach on a Matrix interface');
  };
  /**
   * Create an Array with a copy of the data of the Matrix
   * @returns {Array} array
   */


  Matrix.prototype.toArray = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toArray on a Matrix interface');
  };
  /**
   * Get the primitive value of the Matrix: a multidimensional array
   * @returns {Array} array
   */


  Matrix.prototype.valueOf = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke valueOf on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  Matrix.prototype.format = function (options) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke format on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix
   * @returns {string} str
   */


  Matrix.prototype.toString = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toString on a Matrix interface');
  };

  return Matrix;
}, {
  isClass: true
});
// EXTERNAL MODULE: ./src/utils/array.js
var utils_array = __webpack_require__(2);

// EXTERNAL MODULE: ./src/utils/string.js + 1 modules
var utils_string = __webpack_require__(5);

// EXTERNAL MODULE: ./src/utils/object.js
var utils_object = __webpack_require__(3);

// EXTERNAL MODULE: ./src/error/DimensionError.js
var DimensionError = __webpack_require__(6);

// CONCATENATED MODULE: ./src/type/matrix/DenseMatrix.js







var DenseMatrix_name = 'DenseMatrix';
var DenseMatrix_dependencies = ['Matrix'];
var createDenseMatrixClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(DenseMatrix_name, DenseMatrix_dependencies, function (_ref) {
  var Matrix = _ref.Matrix;

  /**
   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
   * @class DenseMatrix
   */
  function DenseMatrix(data, datatype) {
    if (!(this instanceof DenseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !Object(is["I" /* isString */])(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if (Object(is["v" /* isMatrix */])(data)) {
      // check data is a DenseMatrix
      if (data.type === 'DenseMatrix') {
        // clone data & size
        this._data = Object(utils_object["a" /* clone */])(data._data);
        this._size = Object(utils_object["a" /* clone */])(data._size);
        this._datatype = datatype || data._datatype;
      } else {
        // build data from existing matrix
        this._data = data.toArray();
        this._size = data.size();
        this._datatype = datatype || data._datatype;
      }
    } else if (data && Object(is["b" /* isArray */])(data.data) && Object(is["b" /* isArray */])(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    } else if (Object(is["b" /* isArray */])(data)) {
      // replace nested Matrices with Arrays
      this._data = preprocess(data); // get the dimensions of the array

      this._size = Object(utils_array["a" /* arraySize */])(this._data); // verify the dimensions of the array, TODO: compute size while processing array

      Object(utils_array["r" /* validate */])(this._data, this._size); // data type unknown

      this._datatype = datatype;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + Object(is["M" /* typeOf */])(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
    }
  }

  DenseMatrix.prototype = new Matrix();
  /**
   * Create a new DenseMatrix
   */

  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Attach type information
   */


  DenseMatrix.prototype.type = 'DenseMatrix';
  DenseMatrix.prototype.isDenseMatrix = true;
  /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf DenseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */

  DenseMatrix.prototype.getDataType = function () {
    return Object(utils_array["h" /* getArrayDataType */])(this._data, is["M" /* typeOf */]);
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()  // retrieve storage format
   *
   * @memberof DenseMatrix
   * @return {string}           The storage format.
   */


  DenseMatrix.prototype.storage = function () {
    return 'dense';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()   // retrieve matrix datatype
   *
   * @memberof DenseMatrix
   * @return {string}           The datatype.
   */


  DenseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new DenseMatrix
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */


  DenseMatrix.prototype.create = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof DenseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    switch (arguments.length) {
      case 1:
        return _get(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _set(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Get a single element from the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  DenseMatrix.prototype.get = function (index) {
    if (!Object(is["b" /* isArray */])(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new DimensionError["a" /* DimensionError */](index.length, this._size.length);
    } // check index


    for (var x = 0; x < index.length; x++) {
      Object(utils_array["s" /* validateIndex */])(index[x], this._size[x]);
    }

    var data = this._data;

    for (var i = 0, ii = index.length; i < ii; i++) {
      var indexI = index[i];
      Object(utils_array["s" /* validateIndex */])(indexI, data.length);
      data = data[indexI];
    }

    return data;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {DenseMatrix} self
   */


  DenseMatrix.prototype.set = function (index, value, defaultValue) {
    if (!Object(is["b" /* isArray */])(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length < this._size.length) {
      throw new DimensionError["a" /* DimensionError */](index.length, this._size.length, '<');
    }

    var i, ii, indexI; // enlarge matrix when needed

    var size = index.map(function (i) {
      return i + 1;
    });

    _fit(this, size, defaultValue); // traverse over the dimensions


    var data = this._data;

    for (i = 0, ii = index.length - 1; i < ii; i++) {
      indexI = index[i];
      Object(utils_array["s" /* validateIndex */])(indexI, data.length);
      data = data[indexI];
    } // set new value


    indexI = index[index.length - 1];
    Object(utils_array["s" /* validateIndex */])(indexI, data.length);
    data[indexI] = value;
    return this;
  };
  /**
   * Get a submatrix of this matrix
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index   Zero-based index
   * @private
   */


  function _get(matrix, index) {
    if (!Object(is["t" /* isIndex */])(index)) {
      throw new TypeError('Invalid index');
    }

    var isScalar = index.isScalar();

    if (isScalar) {
      // return a scalar
      return matrix.get(index.min());
    } else {
      // validate dimensions
      var size = index.size();

      if (size.length !== matrix._size.length) {
        throw new DimensionError["a" /* DimensionError */](size.length, matrix._size.length);
      } // validate if any of the ranges in the index is out of range


      var min = index.min();
      var max = index.max();

      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
        Object(utils_array["s" /* validateIndex */])(min[i], matrix._size[i]);
        Object(utils_array["s" /* validateIndex */])(max[i], matrix._size[i]);
      } // retrieve submatrix
      // TODO: more efficient when creating an empty matrix and setting _data and _size manually


      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
    }
  }
  /**
   * Recursively get a submatrix of a multi dimensional matrix.
   * Index is not checked for correct number or length of dimensions.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {number} dims   Total number of dimensions
   * @param {number} dim    Current dimension
   * @return {Array} submatrix
   * @private
   */


  function _getSubmatrix(data, index, dims, dim) {
    var last = dim === dims - 1;
    var range = index.dimension(dim);

    if (last) {
      return range.map(function (i) {
        Object(utils_array["s" /* validateIndex */])(i, data.length);
        return data[i];
      }).valueOf();
    } else {
      return range.map(function (i) {
        Object(utils_array["s" /* validateIndex */])(i, data.length);
        var child = data[i];
        return _getSubmatrix(child, index, dims, dim + 1);
      }).valueOf();
    }
  }
  /**
   * Replace a submatrix in this matrix
   * Indexes are zero-based.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index
   * @param {DenseMatrix | Array | *} submatrix
   * @param {*} defaultValue          Default value, filled in on new entries when
   *                                  the matrix is resized.
   * @return {DenseMatrix} matrix
   * @private
   */


  function _set(matrix, index, submatrix, defaultValue) {
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value


    var iSize = index.size();
    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    var sSize;

    if (Object(is["v" /* isMatrix */])(submatrix)) {
      sSize = submatrix.size();
      submatrix = submatrix.valueOf();
    } else {
      sSize = Object(utils_array["a" /* arraySize */])(submatrix);
    }

    if (isScalar) {
      // set a scalar
      // check whether submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      }

      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // set a submatrix
      // validate dimensions
      if (iSize.length < matrix._size.length) {
        throw new DimensionError["a" /* DimensionError */](iSize.length, matrix._size.length, '<');
      }

      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;

        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }

        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions


        submatrix = Object(utils_array["q" /* unsqueeze */])(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size


      if (!Object(utils_object["d" /* deepStrictEqual */])(iSize, sSize)) {
        throw new DimensionError["a" /* DimensionError */](iSize, sSize, '>');
      } // enlarge matrix when needed


      var size = index.max().map(function (i) {
        return i + 1;
      });

      _fit(matrix, size, defaultValue); // insert the sub matrix


      var dims = iSize.length;
      var dim = 0;

      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
    }

    return matrix;
  }
  /**
   * Replace a submatrix of a multi dimensional matrix.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {Array} submatrix
   * @param {number} dims   Total number of dimensions
   * @param {number} dim
   * @private
   */


  function _setSubmatrix(data, index, submatrix, dims, dim) {
    var last = dim === dims - 1;
    var range = index.dimension(dim);

    if (last) {
      range.forEach(function (dataIndex, subIndex) {
        Object(utils_array["s" /* validateIndex */])(dataIndex);
        data[dataIndex] = submatrix[subIndex[0]];
      });
    } else {
      range.forEach(function (dataIndex, subIndex) {
        Object(utils_array["s" /* validateIndex */])(dataIndex);

        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
      });
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!Object(is["b" /* isArray */])(size)) {
      throw new TypeError('Array expected');
    } // matrix to resize


    var m = copy ? this.clone() : this; // resize matrix

    return _resize(m, size, defaultValue);
  };

  function _resize(matrix, size, defaultValue) {
    // check size
    if (size.length === 0) {
      // first value in matrix
      var v = matrix._data; // go deep

      while (Object(is["b" /* isArray */])(v)) {
        v = v[0];
      }

      return v;
    } // resize matrix


    matrix._size = size.slice(0); // copy the array

    matrix._data = Object(utils_array["o" /* resize */])(matrix._data, matrix._size, defaultValue); // return matrix

    return matrix;
  }
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  DenseMatrix.prototype.reshape = function (size, copy) {
    var m = copy ? this.clone() : this;
    m._data = Object(utils_array["n" /* reshape */])(m._data, size);
    m._size = size.slice(0);
    return m;
  };
  /**
   * Enlarge the matrix when it is smaller than given size.
   * If the matrix is larger or equal sized, nothing is done.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix           The matrix to be resized
   * @param {number[]} size
   * @param {*} defaultValue          Default value, filled in on new entries.
   * @private
   */


  function _fit(matrix, size, defaultValue) {
    var // copy the array
    newSize = matrix._size.slice(0);

    var changed = false; // add dimensions when needed

    while (newSize.length < size.length) {
      newSize.push(0);
      changed = true;
    } // enlarge size when needed


    for (var i = 0, ii = size.length; i < ii; i++) {
      if (size[i] > newSize[i]) {
        newSize[i] = size[i];
        changed = true;
      }
    }

    if (changed) {
      // resize only when size is changed
      _resize(matrix, newSize, defaultValue);
    }
  }
  /**
   * Create a clone of the matrix
   * @memberof DenseMatrix
   * @return {DenseMatrix} clone
   */


  DenseMatrix.prototype.clone = function () {
    var m = new DenseMatrix({
      data: Object(utils_object["a" /* clone */])(this._data),
      size: Object(utils_object["a" /* clone */])(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof DenseMatrix
   * @returns {number[]} size
   */


  DenseMatrix.prototype.size = function () {
    return this._size.slice(0); // return a clone of _size
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   *
   * @return {DenseMatrix} matrix
   */


  DenseMatrix.prototype.map = function (callback) {
    // matrix instance
    var me = this;

    var recurse = function recurse(value, index) {
      if (Object(is["b" /* isArray */])(value)) {
        return value.map(function (child, i) {
          return recurse(child, index.concat(i));
        });
      } else {
        return callback(value, index, me);
      }
    }; // return dense format


    return new DenseMatrix({
      data: recurse(this._data, []),
      size: Object(utils_object["a" /* clone */])(this._size),
      datatype: this._datatype
    });
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */


  DenseMatrix.prototype.forEach = function (callback) {
    // matrix instance
    var me = this;

    var recurse = function recurse(value, index) {
      if (Object(is["b" /* isArray */])(value)) {
        value.forEach(function (child, i) {
          recurse(child, index.concat(i));
        });
      } else {
        callback(value, index, me);
      }
    };

    recurse(this._data, []);
  };
  /**
   * Create an Array with a copy of the data of the DenseMatrix
   * @memberof DenseMatrix
   * @returns {Array} array
   */


  DenseMatrix.prototype.toArray = function () {
    return Object(utils_object["a" /* clone */])(this._data);
  };
  /**
   * Get the primitive value of the DenseMatrix: a multidimensional array
   * @memberof DenseMatrix
   * @returns {Array} array
   */


  DenseMatrix.prototype.valueOf = function () {
    return this._data;
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof DenseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  DenseMatrix.prototype.format = function (options) {
    return Object(utils_string["d" /* format */])(this._data, options);
  };
  /**
   * Get a string representation of the matrix
   * @memberof DenseMatrix
   * @returns {string} str
   */


  DenseMatrix.prototype.toString = function () {
    return Object(utils_string["d" /* format */])(this._data);
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof DenseMatrix
   * @returns {Object}
   */


  DenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'DenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof DenseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix with the diagonal values.
   */


  DenseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if (Object(is["e" /* isBigNumber */])(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!Object(is["y" /* isNumber */])(k) || !Object(utils_number["i" /* isInteger */])(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // number diagonal values

    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix

    var data = []; // loop rows

    for (var i = 0; i < n; i++) {
      data[i] = this._data[i + kSub][i + kSuper];
    } // create DenseMatrix


    return new DenseMatrix({
      data: data,
      size: [n],
      datatype: this._datatype
    });
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof DenseMatrix
   * @param {Array} size                     The matrix size.
   * @param {number | Matrix | Array } value The values for the diagonal.
   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]          The default value for non-diagonal
   * @param {string} [datatype]              The datatype for the diagonal
   *
   * @returns {DenseMatrix}
   */


  DenseMatrix.diagonal = function (size, value, k, defaultValue) {
    if (!Object(is["b" /* isArray */])(size)) {
      throw new TypeError('Array expected, size parameter');
    }

    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // map size & validate


    size = size.map(function (s) {
      // check it is a big number
      if (Object(is["e" /* isBigNumber */])(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments


      if (!Object(is["y" /* isNumber */])(s) || !Object(utils_number["i" /* isInteger */])(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }

      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if (Object(is["e" /* isBigNumber */])(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!Object(is["y" /* isNumber */])(k) || !Object(utils_number["i" /* isInteger */])(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows and columns

    var rows = size[0];
    var columns = size[1]; // number of non-zero items

    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    var _value; // check value


    if (Object(is["b" /* isArray */])(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value[i];
      };
    } else if (Object(is["v" /* isMatrix */])(value)) {
      // matrix size
      var ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function _value() {
        // return value
        return value;
      };
    } // discover default value if needed


    if (!defaultValue) {
      // check first value in array
      defaultValue = Object(is["e" /* isBigNumber */])(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
      : 0;
    } // empty array


    var data = []; // check we need to resize array

    if (size.length > 0) {
      // resize array
      data = Object(utils_array["o" /* resize */])(data, size, defaultValue); // fill diagonal

      for (var d = 0; d < n; d++) {
        data[d + kSub][d + kSuper] = _value(d);
      }
    } // create DenseMatrix


    return new DenseMatrix({
      data: data,
      size: [rows, columns]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof DenseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {DenseMatrix}
   */


  DenseMatrix.fromJSON = function (json) {
    return new DenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof DenseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  DenseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!Object(is["y" /* isNumber */])(i) || !Object(utils_number["i" /* isInteger */])(i) || !Object(is["y" /* isNumber */])(j) || !Object(utils_number["i" /* isInteger */])(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions


    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index


    Object(utils_array["s" /* validateIndex */])(i, this._size[0]);
    Object(utils_array["s" /* validateIndex */])(j, this._size[0]); // swap rows

    DenseMatrix._swapRows(i, j, this._data); // return current instance


    return this;
  };
  /**
   * Swap rows i and j in Dense Matrix data structure.
   *
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   * @param {Array} data     Matrix data
   */


  DenseMatrix._swapRows = function (i, j, data) {
    // swap values i <-> j
    var vi = data[i];
    data[i] = data[j];
    data[j] = vi;
  };
  /**
   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
   * Matrices. Replaces all nested Matrices with Arrays
   * @memberof DenseMatrix
   * @param {Array} data
   * @return {Array} data
   */


  function preprocess(data) {
    for (var i = 0, ii = data.length; i < ii; i++) {
      var elem = data[i];

      if (Object(is["b" /* isArray */])(elem)) {
        data[i] = preprocess(elem);
      } else if (elem && elem.isMatrix === true) {
        data[i] = preprocess(elem.valueOf());
      }
    }

    return data;
  }

  return DenseMatrix;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/function/utils/clone.js


var clone_name = 'clone';
var clone_dependencies = ['typed'];
var createClone =
/* #__PURE__ */
Object(factory["a" /* factory */])(clone_name, clone_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Clone an object.
   *
   * Syntax:
   *
   *     math.clone(x)
   *
   * Examples:
   *
   *    math.clone(3.5)                   // returns number 3.5
   *    math.clone(math.complex('2-4i') // returns Complex 2 - 4i
   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
   *    math.clone("hello world")         // returns string "hello world"
   *
   * @param {*} x   Object to be cloned
   * @return {*} A clone of object x
   */
  return typed(clone_name, {
    any: utils_object["a" /* clone */]
  });
});
// EXTERNAL MODULE: ./src/error/IndexError.js
var IndexError = __webpack_require__(10);

// CONCATENATED MODULE: ./src/utils/collection.js



/**
 * Test whether an array contains collections
 * @param {Array} array
 * @returns {boolean} Returns true when the array contains one or multiple
 *                    collections (Arrays or Matrices). Returns false otherwise.
 */

function containsCollections(array) {
  for (var i = 0; i < array.length; i++) {
    if (Object(is["i" /* isCollection */])(array[i])) {
      return true;
    }
  }

  return false;
}
/**
 * Recursively loop over all elements in a given multi dimensional array
 * and invoke the callback on each of the elements.
 * @param {Array | Matrix} array
 * @param {Function} callback     The callback method is invoked with one
 *                                parameter: the current element in the array
 */

function deepForEach(array, callback) {
  if (Object(is["v" /* isMatrix */])(array)) {
    array = array.valueOf();
  }

  for (var i = 0, ii = array.length; i < ii; i++) {
    var value = array[i];

    if (Array.isArray(value)) {
      deepForEach(value, callback);
    } else {
      callback(value);
    }
  }
}
/**
 * Execute the callback function element wise for each element in array and any
 * nested array
 * Returns an array with the results
 * @param {Array | Matrix} array
 * @param {Function} callback   The callback is called with two parameters:
 *                              value1 and value2, which contain the current
 *                              element of both arrays.
 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
 *
 * @return {Array | Matrix} res
 */

function deepMap(array, callback, skipZeros) {
  if (array && typeof array.map === 'function') {
    // TODO: replace array.map with a for loop to improve performance
    return array.map(function (x) {
      return deepMap(x, callback, skipZeros);
    });
  } else {
    return callback(array);
  }
}
/**
 * Reduce a given matrix or array to a new matrix or
 * array with one less dimension, applying the given
 * callback in the selected dimension.
 * @param {Array | Matrix} mat
 * @param {number} dim
 * @param {Function} callback
 * @return {Array | Matrix} res
 */

function reduce(mat, dim, callback) {
  var size = Array.isArray(mat) ? Object(utils_array["a" /* arraySize */])(mat) : mat.size();

  if (dim < 0 || dim >= size.length) {
    // TODO: would be more clear when throwing a DimensionError here
    throw new IndexError["a" /* IndexError */](dim, size.length);
  }

  if (Object(is["v" /* isMatrix */])(mat)) {
    return mat.create(_reduce(mat.valueOf(), dim, callback));
  } else {
    return _reduce(mat, dim, callback);
  }
}
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */

function _reduce(mat, dim, callback) {
  var i, ret, val, tran;

  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      val = mat[0];

      for (i = 1; i < mat.length; i++) {
        val = callback(val, mat[i]);
      }

      return val;
    } else {
      tran = _switch(mat);
      ret = [];

      for (i = 0; i < tran.length; i++) {
        ret[i] = _reduce(tran[i], dim - 1, callback);
      }

      return ret;
    }
  } else {
    ret = [];

    for (i = 0; i < mat.length; i++) {
      ret[i] = _reduce(mat[i], dim - 1, callback);
    }

    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */


function _switch(mat) {
  var I = mat.length;
  var J = mat[0].length;
  var i, j;
  var ret = [];

  for (j = 0; j < J; j++) {
    var tmp = [];

    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }

    ret.push(tmp);
  }

  return ret;
} // TODO: document function scatter


function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr; // c arrays

  var cindex = c._index; // vars

  var k, k0, k1, i; // check we need to process values (pattern matrix)

  if (x) {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i); // x(i) = A, check we need to call function this time

        if (update) {
          // copy value to workspace calling callback function
          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row

          u[i] = mark;
        } else {
          // copy value to workspace
          x[i] = avalues[k];
        }
      } else {
        // i exists in C already
        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row

        u[i] = mark;
      }
    }
  } else {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i);
      } else {
        // indicate function was called on current row
        u[i] = mark;
      }
    }
  }
}
// CONCATENATED MODULE: ./src/function/utils/isInteger.js



var isInteger_name = 'isInteger';
var isInteger_dependencies = ['typed'];
var createIsInteger =
/* #__PURE__ */
Object(factory["a" /* factory */])(isInteger_name, isInteger_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is an integer number.
   * The function supports `number`, `BigNumber`, and `Fraction`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isInteger(x)
   *
   * Examples:
   *
   *    math.isInteger(2)                     // returns true
   *    math.isInteger(0)                     // returns true
   *    math.isInteger(0.5)                   // returns false
   *    math.isInteger(math.bignumber(500))   // returns true
   *    math.isInteger(math.fraction(4))      // returns true
   *    math.isInteger('3')                   // returns true
   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
   *    math.isInteger(math.complex('2-4i')   // throws an error
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isZero
   *
   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
   *                    Throws an error in case of an unknown data type.
   */
  var isInteger = typed(isInteger_name, {
    number: utils_number["i" /* isInteger */],
    // TODO: what to do with isInteger(add(0.1, 0.2))  ?
    BigNumber: function BigNumber(x) {
      return x.isInt();
    },
    Fraction: function Fraction(x) {
      return x.d === 1 && isFinite(x.n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isInteger);
    }
  });
  return isInteger;
});
// CONCATENATED MODULE: ./src/plain/number/utils.js

var utils_n1 = 'number';
function isIntegerNumber(x) {
  return Object(utils_number["i" /* isInteger */])(x);
}
isIntegerNumber.signature = utils_n1;
function isNegativeNumber(x) {
  return x < 0;
}
isNegativeNumber.signature = utils_n1;
function isPositiveNumber(x) {
  return x > 0;
}
isPositiveNumber.signature = utils_n1;
function isZeroNumber(x) {
  return x === 0;
}
isZeroNumber.signature = utils_n1;
function isNaNNumber(x) {
  return Number.isNaN(x);
}
isNaNNumber.signature = utils_n1;
// CONCATENATED MODULE: ./src/function/utils/isNegative.js



var isNegative_name = 'isNegative';
var isNegative_dependencies = ['typed'];
var createIsNegative =
/* #__PURE__ */
Object(factory["a" /* factory */])(isNegative_name, isNegative_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is negative: smaller than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNegative(x)
   *
   * Examples:
   *
   *    math.isNegative(3)                     // returns false
   *    math.isNegative(-2)                    // returns true
   *    math.isNegative(0)                     // returns false
   *    math.isNegative(-0)                    // returns false
   *    math.isNegative(math.bignumber(2))     // returns false
   *    math.isNegative(math.fraction(-2, 5))  // returns true
   *    math.isNegative('-2')                  // returns true
   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]
   *
   * See also:
   *
   *    isNumeric, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isNegative = typed(isNegative_name, {
    number: isNegativeNumber,
    BigNumber: function BigNumber(x) {
      return x.isNeg() && !x.isZero() && !x.isNaN();
    },
    Fraction: function Fraction(x) {
      return x.s < 0; // It's enough to decide on the sign
    },
    Unit: function Unit(x) {
      return isNegative(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isNegative);
    }
  });
  return isNegative;
});
// CONCATENATED MODULE: ./src/function/utils/isNumeric.js


var isNumeric_name = 'isNumeric';
var isNumeric_dependencies = ['typed'];
var createIsNumeric =
/* #__PURE__ */
Object(factory["a" /* factory */])(isNumeric_name, isNumeric_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is an numeric value.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNumeric(x)
   *
   * Examples:
   *
   *    math.isNumeric(2)                     // returns true
   *    math.isNumeric('2')                   // returns false
   *    math.hasNumericValue('2')             // returns true
   *    math.isNumeric(0)                     // returns true
   *    math.isNumeric(math.bignumber(500))   // returns true
   *    math.isNumeric(math.fraction(4))      // returns true
   *    math.isNumeric(math.complex('2-4i')   // returns false
   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, hasNumericValue
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, or `boolean`. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  var isNumeric = typed(isNumeric_name, {
    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
      return true;
    },
    'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {
      return false;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isNumeric);
    }
  });
  return isNumeric;
});
// CONCATENATED MODULE: ./src/function/utils/hasNumericValue.js

var hasNumericValue_name = 'hasNumericValue';
var hasNumericValue_dependencies = ['typed', 'isNumeric'];
var createHasNumericValue =
/* #__PURE__ */
Object(factory["a" /* factory */])(hasNumericValue_name, hasNumericValue_dependencies, function (_ref) {
  var typed = _ref.typed,
      isNumeric = _ref.isNumeric;

  /**
   * Test whether a value is an numeric value.
   *
   * In case of a string, true is returned if the string contains a numeric value.
   *
   * Syntax:
   *
   *     math.hasNumericValue(x)
   *
   * Examples:
   *
   *    math.hasNumericValue(2)                     // returns true
   *    math.hasNumericValue('2')                   // returns true
   *    math.isNumeric('2')                         // returns false
   *    math.hasNumericValue(0)                     // returns true
   *    math.hasNumericValue(math.bignumber(500))   // returns true
   *    math.hasNumericValue(math.fraction(4))      // returns true
   *    math.hasNumericValue(math.complex('2-4i')   // returns false
   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, isNumeric
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  return typed(hasNumericValue_name, {
    string: function string(x) {
      return x.trim().length > 0 && !isNaN(Number(x));
    },
    any: function any(x) {
      return isNumeric(x);
    }
  });
});
// CONCATENATED MODULE: ./src/function/utils/isPositive.js



var isPositive_name = 'isPositive';
var isPositive_dependencies = ['typed'];
var createIsPositive =
/* #__PURE__ */
Object(factory["a" /* factory */])(isPositive_name, isPositive_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is positive: larger than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPositive(x)
   *
   * Examples:
   *
   *    math.isPositive(3)                     // returns true
   *    math.isPositive(-2)                    // returns false
   *    math.isPositive(0)                     // returns false
   *    math.isPositive(-0)                    // returns false
   *    math.isPositive(0.5)                   // returns true
   *    math.isPositive(math.bignumber(2))     // returns true
   *    math.isPositive(math.fraction(-2, 5))  // returns false
   *    math.isPositive(math.fraction(1,3))    // returns false
   *    math.isPositive('2')                   // returns true
   *    math.isPositive([2, 0, -3])            // returns [true, false, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isPositive = typed(isPositive_name, {
    number: isPositiveNumber,
    BigNumber: function BigNumber(x) {
      return !x.isNeg() && !x.isZero() && !x.isNaN();
    },
    Fraction: function Fraction(x) {
      return x.s > 0 && x.n > 0;
    },
    Unit: function Unit(x) {
      return isPositive(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isPositive);
    }
  });
  return isPositive;
});
// CONCATENATED MODULE: ./src/function/utils/isZero.js



var isZero_name = 'isZero';
var isZero_dependencies = ['typed'];
var createIsZero =
/* #__PURE__ */
Object(factory["a" /* factory */])(isZero_name, isZero_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is zero.
   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
   * `Complex`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isZero(x)
   *
   * Examples:
   *
   *    math.isZero(0)                     // returns true
   *    math.isZero(2)                     // returns false
   *    math.isZero(0.5)                   // returns false
   *    math.isZero(math.bignumber(0))     // returns true
   *    math.isZero(math.fraction(0))      // returns true
   *    math.isZero(math.fraction(1,3))    // returns false
   *    math.isZero(math.complex('2 - 4i') // returns false
   *    math.isZero(math.complex('0i')     // returns true
   *    math.isZero('0')                   // returns true
   *    math.isZero('2')                   // returns false
   *    math.isZero([2, 0, -3]')           // returns [false, true, false]
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isInteger
   *
   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
   * @return {boolean}  Returns true when `x` is zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isZero = typed(isZero_name, {
    number: isZeroNumber,
    BigNumber: function BigNumber(x) {
      return x.isZero();
    },
    Complex: function Complex(x) {
      return x.re === 0 && x.im === 0;
    },
    Fraction: function Fraction(x) {
      return x.d === 1 && x.n === 0;
    },
    Unit: function Unit(x) {
      return isZero(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isZero);
    }
  });
  return isZero;
});
// CONCATENATED MODULE: ./src/function/utils/isNaN.js



var isNaN_name = 'isNaN';
var isNaN_dependencies = ['typed'];
var createIsNaN =
/* #__PURE__ */
Object(factory["a" /* factory */])(isNaN_name, isNaN_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is NaN (not a number).
   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNaN(x)
   *
   * Examples:
   *
   *    math.isNaN(3)                     // returns false
   *    math.isNaN(NaN)                   // returns true
   *    math.isNaN(0)                     // returns false
   *    math.isNaN(math.bignumber(NaN))   // returns true
   *    math.isNaN(math.bignumber(0))     // returns false
   *    math.isNaN(math.fraction(-2, 5))  // returns false
   *    math.isNaN('-2')                  // returns false
   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]
   *
   * See also:
   *
   *    isNumeric, isNegative, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is NaN.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(isNaN_name, {
    number: isNaNNumber,
    BigNumber: function BigNumber(x) {
      return x.isNaN();
    },
    Fraction: function Fraction(x) {
      return false;
    },
    Complex: function Complex(x) {
      return x.isNaN();
    },
    Unit: function Unit(x) {
      return Number.isNaN(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, Number.isNaN);
    }
  });
});
// EXTERNAL MODULE: ./src/utils/log.js
var utils_log = __webpack_require__(8);

// CONCATENATED MODULE: ./src/function/utils/typeOf.js



var typeOf_name = 'typeOf';
var typeOf_dependencies = ['typed'];
var createTypeOf =
/* #__PURE__ */
Object(factory["a" /* factory */])(typeOf_name, typeOf_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Determine the type of a variable.
   *
   * Function `typeOf` recognizes the following types of objects:
   *
   * Object                 | Returns       | Example
   * ---------------------- | ------------- | ------------------------------------------
   * null                   | `'null'`      | `math.typeOf(null)`
   * number                 | `'number'`    | `math.typeOf(3.5)`
   * boolean                | `'boolean'`   | `math.typeOf(true)`
   * string                 | `'string'`    | `math.typeOf('hello world')`
   * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`
   * Date                   | `'Date'`      | `math.typeOf(new Date())`
   * Function               | `'Function'`  | `math.typeOf(function () {})`
   * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`
   * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`
   * undefined              | `'undefined'` | `math.typeOf(undefined)`
   * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`
   * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`
   * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`
   * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`
   * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`
   * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`
   * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\nb=3'))`
   * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`
   * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`
   * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`
   * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`
   * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`
   * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`
   * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`
   * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`
   * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`
   * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`
   * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`
   * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`
   * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`
   * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`
   *
   * Syntax:
   *
   *    math.typeOf(x)
   *
   * Examples:
   *
   *    math.typeOf(3.5)                     // returns 'number'
   *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'
   *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'
   *    math.typeOf('hello world')           // returns 'string'
   *
   * @param {*} x     The variable for which to test the type.
   * @return {string} Returns the name of the type. Primitive types are lower case,
   *                  non-primitive types are upper-camel-case.
   *                  For example 'number', 'string', 'Array', 'Date'.
   */
  return typed(typeOf_name, {
    any: is["M" /* typeOf */]
  });
}); // For backward compatibility, deprecated since version 6.0.0. Date: 2018-11-06

var createDeprecatedTypeof =
/* #__PURE__ */
Object(factory["a" /* factory */])('typeof', [], function () {
  return function () {
    Object(utils_log["a" /* warnOnce */])('Function "typeof" has been renamed to "typeOf" in v6.0.0, please use the new function instead.');

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return is["M" /* typeOf */].apply(is["M" /* typeOf */], args);
  };
});
// CONCATENATED MODULE: ./src/utils/bignumber/nearlyEqual.js
/**
 * Compares two BigNumbers.
 * @param {BigNumber} x       First value to compare
 * @param {BigNumber} y       Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
 */
function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon === null || epsilon === undefined) {
    return x.eq(y);
  } // use "==" operator, handles infinities


  if (x.eq(y)) {
    return true;
  } // NaN


  if (x.isNaN() || y.isNaN()) {
    return false;
  } // at this point x and y should be finite


  if (x.isFinite() && y.isFinite()) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = x.minus(y).abs();

    if (diff.isZero()) {
      return true;
    } else {
      // use relative error
      var max = x.constructor.max(x.abs(), y.abs());
      return diff.lte(max.times(epsilon));
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases


  return false;
}
// CONCATENATED MODULE: ./src/utils/complex.js

/**
 * Test whether two complex values are equal provided a given epsilon.
 * Does not use or change the global Complex.EPSILON setting
 * @param {Complex} x
 * @param {Complex} y
 * @param {number} epsilon
 * @returns {boolean}
 */

function complexEquals(x, y, epsilon) {
  return Object(utils_number["m" /* nearlyEqual */])(x.re, y.re, epsilon) && Object(utils_number["m" /* nearlyEqual */])(x.im, y.im, epsilon);
}
// CONCATENATED MODULE: ./src/function/relational/equalScalar.js




var equalScalar_name = 'equalScalar';
var equalScalar_dependencies = ['typed', 'config'];
var createEqualScalar =
/* #__PURE__ */
Object(factory["a" /* factory */])(equalScalar_name, equalScalar_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config;

  /**
   * Test whether two scalar values are nearly equal.
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
   * @private
   */
  var equalScalar = typed(equalScalar_name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x === y;
    },
    'number, number': function numberNumber(x, y) {
      return Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.eq(y) || nearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.equals(y);
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return complexEquals(x, y, config.epsilon);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return equalScalar(x.value, y.value);
    }
  });
  return equalScalar;
});
var createEqualScalarNumber = Object(factory["a" /* factory */])(equalScalar_name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(equalScalar_name, {
    'number, number': function numberNumber(x, y) {
      return Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon);
    }
  });
});
// CONCATENATED MODULE: ./src/type/matrix/SparseMatrix.js







var SparseMatrix_name = 'SparseMatrix';
var SparseMatrix_dependencies = ['typed', 'equalScalar', 'Matrix'];
var createSparseMatrixClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(SparseMatrix_name, SparseMatrix_dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar,
      Matrix = _ref.Matrix;

  /**
   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
   * for sparse matrices.
   * @class SparseMatrix
   */
  function SparseMatrix(data, datatype) {
    if (!(this instanceof SparseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !Object(is["I" /* isString */])(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if (Object(is["v" /* isMatrix */])(data)) {
      // create from matrix
      _createFromMatrix(this, data, datatype);
    } else if (data && Object(is["b" /* isArray */])(data.index) && Object(is["b" /* isArray */])(data.ptr) && Object(is["b" /* isArray */])(data.size)) {
      // initialize fields
      this._values = data.values;
      this._index = data.index;
      this._ptr = data.ptr;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    } else if (Object(is["b" /* isArray */])(data)) {
      // create from array
      _createFromArray(this, data, datatype);
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + Object(is["M" /* typeOf */])(data) + ')');
    } else {
      // nothing provided
      this._values = [];
      this._index = [];
      this._ptr = [0];
      this._size = [0, 0];
      this._datatype = datatype;
    }
  }

  function _createFromMatrix(matrix, source, datatype) {
    // check matrix type
    if (source.type === 'SparseMatrix') {
      // clone arrays
      matrix._values = source._values ? Object(utils_object["a" /* clone */])(source._values) : undefined;
      matrix._index = Object(utils_object["a" /* clone */])(source._index);
      matrix._ptr = Object(utils_object["a" /* clone */])(source._ptr);
      matrix._size = Object(utils_object["a" /* clone */])(source._size);
      matrix._datatype = datatype || source._datatype;
    } else {
      // build from matrix data
      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
    }
  }

  function _createFromArray(matrix, data, datatype) {
    // initialize fields
    matrix._values = [];
    matrix._index = [];
    matrix._ptr = [];
    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice

    var rows = data.length;
    var columns = 0; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if (Object(is["I" /* isString */])(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    } // check we have rows (empty array)


    if (rows > 0) {
      // column index
      var j = 0;

      do {
        // store pointer to values index
        matrix._ptr.push(matrix._index.length); // loop rows


        for (var i = 0; i < rows; i++) {
          // current row
          var row = data[i]; // check row is an array

          if (Object(is["b" /* isArray */])(row)) {
            // update columns if needed (only on first column)
            if (j === 0 && columns < row.length) {
              columns = row.length;
            } // check row has column


            if (j < row.length) {
              // value
              var v = row[j]; // check value != 0

              if (!eq(v, zero)) {
                // store value
                matrix._values.push(v); // index


                matrix._index.push(i);
              }
            }
          } else {
            // update columns if needed (only on first column)
            if (j === 0 && columns < 1) {
              columns = 1;
            } // check value != 0 (row is a scalar)


            if (!eq(row, zero)) {
              // store value
              matrix._values.push(row); // index


              matrix._index.push(i);
            }
          }
        } // increment index


        j++;
      } while (j < columns);
    } // store number of values in ptr


    matrix._ptr.push(matrix._index.length); // size


    matrix._size = [rows, columns];
  }

  SparseMatrix.prototype = new Matrix();
  /**
   * Create a new SparseMatrix
   */

  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Attach type information
   */


  SparseMatrix.prototype.type = 'SparseMatrix';
  SparseMatrix.prototype.isSparseMatrix = true;
  /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf SparseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */

  SparseMatrix.prototype.getDataType = function () {
    return Object(utils_array["h" /* getArrayDataType */])(this._values, is["M" /* typeOf */]);
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @memberof SparseMatrix
   * @return {string}           The storage format.
   */


  SparseMatrix.prototype.storage = function () {
    return 'sparse';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @memberof SparseMatrix
   * @return {string}           The datatype.
   */


  SparseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new SparseMatrix
   * @memberof SparseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */


  SparseMatrix.prototype.create = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Get the matrix density.
   *
   * Usage:
   *     const density = matrix.density()                   // retrieve matrix density
   *
   * @memberof SparseMatrix
   * @return {number}           The matrix density.
   */


  SparseMatrix.prototype.density = function () {
    // rows & columns
    var rows = this._size[0];
    var columns = this._size[1]; // calculate density

    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof SparseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke subset on a Pattern only matrix');
    } // check arguments


    switch (arguments.length) {
      case 1:
        return _getsubset(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _setsubset(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };

  function _getsubset(matrix, idx) {
    // check idx
    if (!Object(is["t" /* isIndex */])(idx)) {
      throw new TypeError('Invalid index');
    }

    var isScalar = idx.isScalar();

    if (isScalar) {
      // return a scalar
      return matrix.get(idx.min());
    } // validate dimensions


    var size = idx.size();

    if (size.length !== matrix._size.length) {
      throw new DimensionError["a" /* DimensionError */](size.length, matrix._size.length);
    } // vars


    var i, ii, k, kk; // validate if any of the ranges in the index is out of range

    var min = idx.min();
    var max = idx.max();

    for (i = 0, ii = matrix._size.length; i < ii; i++) {
      Object(utils_array["s" /* validateIndex */])(min[i], matrix._size[i]);
      Object(utils_array["s" /* validateIndex */])(max[i], matrix._size[i]);
    } // matrix arrays


    var mvalues = matrix._values;
    var mindex = matrix._index;
    var mptr = matrix._ptr; // rows & columns dimensions for result matrix

    var rows = idx.dimension(0);
    var columns = idx.dimension(1); // workspace & permutation vector

    var w = [];
    var pv = []; // loop rows in resulting matrix

    rows.forEach(function (i, r) {
      // update permutation vector
      pv[i] = r[0]; // mark i in workspace

      w[i] = true;
    }); // result matrix arrays

    var values = mvalues ? [] : undefined;
    var index = [];
    var ptr = []; // loop columns in result matrix

    columns.forEach(function (j) {
      // update ptr
      ptr.push(index.length); // loop values in column j

      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
        // row
        i = mindex[k]; // check row is in result matrix

        if (w[i] === true) {
          // push index
          index.push(pv[i]); // check we need to process values

          if (values) {
            values.push(mvalues[k]);
          }
        }
      }
    }); // update ptr

    ptr.push(index.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: size,
      datatype: matrix._datatype
    });
  }

  function _setsubset(matrix, index, submatrix, defaultValue) {
    // check index
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value


    var iSize = index.size();
    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    var sSize;

    if (Object(is["v" /* isMatrix */])(submatrix)) {
      // submatrix size
      sSize = submatrix.size(); // use array representation

      submatrix = submatrix.toArray();
    } else {
      // get submatrix size (array, scalar)
      sSize = Object(utils_array["a" /* arraySize */])(submatrix);
    } // check index is a scalar


    if (isScalar) {
      // verify submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      } // set value


      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // validate dimensions, index size must be one or two dimensions
      if (iSize.length !== 1 && iSize.length !== 2) {
        throw new DimensionError["a" /* DimensionError */](iSize.length, matrix._size.length, '<');
      } // check submatrix and index have the same dimensions


      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;

        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }

        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions


        submatrix = Object(utils_array["q" /* unsqueeze */])(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size


      if (!Object(utils_object["d" /* deepStrictEqual */])(iSize, sSize)) {
        throw new DimensionError["a" /* DimensionError */](iSize, sSize, '>');
      } // offsets


      var x0 = index.min()[0];
      var y0 = index.min()[1]; // submatrix rows and columns

      var m = sSize[0];
      var n = sSize[1]; // loop submatrix

      for (var x = 0; x < m; x++) {
        // loop columns
        for (var y = 0; y < n; y++) {
          // value at i, j
          var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)

          matrix.set([x + x0, y + y0], v, defaultValue);
        }
      }
    }

    return matrix;
  }
  /**
   * Get a single element from the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  SparseMatrix.prototype.get = function (index) {
    if (!Object(is["b" /* isArray */])(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new DimensionError["a" /* DimensionError */](index.length, this._size.length);
    } // check it is a pattern matrix


    if (!this._values) {
      throw new Error('Cannot invoke get on a Pattern only matrix');
    } // row and column


    var i = index[0];
    var j = index[1]; // check i, j are valid

    Object(utils_array["s" /* validateIndex */])(i, this._size[0]);
    Object(utils_array["s" /* validateIndex */])(j, this._size[1]); // find value index

    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


    if (k < this._ptr[j + 1] && this._index[k] === i) {
      return this._values[k];
    }

    return 0;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} v
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be set to zero.
   * @return {SparseMatrix} self
   */


  SparseMatrix.prototype.set = function (index, v, defaultValue) {
    if (!Object(is["b" /* isArray */])(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new DimensionError["a" /* DimensionError */](index.length, this._size.length);
    } // check it is a pattern matrix


    if (!this._values) {
      throw new Error('Cannot invoke set on a Pattern only matrix');
    } // row and column


    var i = index[0];
    var j = index[1]; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if (Object(is["I" /* isString */])(this._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, this._datatype);
    } // check we need to resize matrix


    if (i > rows - 1 || j > columns - 1) {
      // resize matrix
      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns


      rows = this._size[0];
      columns = this._size[1];
    } // check i, j are valid


    Object(utils_array["s" /* validateIndex */])(i, rows);
    Object(utils_array["s" /* validateIndex */])(j, columns); // find value index

    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


    if (k < this._ptr[j + 1] && this._index[k] === i) {
      // check value != 0
      if (!eq(v, zero)) {
        // update value
        this._values[k] = v;
      } else {
        // remove value from matrix
        _remove(k, j, this._values, this._index, this._ptr);
      }
    } else {
      // insert value @ (i, j)
      _insert(k, i, j, v, this._values, this._index, this._ptr);
    }

    return this;
  };

  function _getValueIndex(i, top, bottom, index) {
    // check row is on the bottom side
    if (bottom - top === 0) {
      return bottom;
    } // loop rows [top, bottom[


    for (var r = top; r < bottom; r++) {
      // check we found value index
      if (index[r] === i) {
        return r;
      }
    } // we did not find row


    return top;
  }

  function _remove(k, j, values, index, ptr) {
    // remove value @ k
    values.splice(k, 1);
    index.splice(k, 1); // update pointers

    for (var x = j + 1; x < ptr.length; x++) {
      ptr[x]--;
    }
  }

  function _insert(k, i, j, v, values, index, ptr) {
    // insert value
    values.splice(k, 0, v); // update row for k

    index.splice(k, 0, i); // update column pointers

    for (var x = j + 1; x < ptr.length; x++) {
      ptr[x]++;
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof SparseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!Object(is["b" /* isArray */])(size)) {
      throw new TypeError('Array expected');
    }

    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // check sizes


    size.forEach(function (value) {
      if (!Object(is["y" /* isNumber */])(value) || !Object(utils_number["i" /* isInteger */])(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
      }
    }); // matrix to resize

    var m = copy ? this.clone() : this; // resize matrix

    return _resize(m, size[0], size[1], defaultValue);
  };

  function _resize(matrix, rows, columns, defaultValue) {
    // value to insert at the time of growing matrix
    var value = defaultValue || 0; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if (Object(is["I" /* isString */])(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype

      value = typed.convert(value, matrix._datatype);
    } // should we insert the value?


    var ins = !eq(value, zero); // old columns and rows

    var r = matrix._size[0];
    var c = matrix._size[1];
    var i, j, k; // check we need to increase columns

    if (columns > c) {
      // loop new columns
      for (j = c; j < columns; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values

        if (ins) {
          // loop rows
          for (i = 0; i < r; i++) {
            // add new matrix._values
            matrix._values.push(value); // update matrix._index


            matrix._index.push(i);
          }
        }
      } // store number of matrix._values in matrix._ptr


      matrix._ptr[columns] = matrix._values.length;
    } else if (columns < c) {
      // truncate matrix._ptr
      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index


      matrix._values.splice(matrix._ptr[columns], matrix._values.length);

      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
    } // update columns


    c = columns; // check we need to increase rows

    if (rows > r) {
      // check we have to insert values
      if (ins) {
        // inserts
        var n = 0; // loop columns

        for (j = 0; j < c; j++) {
          // update matrix._ptr for current column
          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values

          k = matrix._ptr[j + 1] + n; // pointer

          var p = 0; // loop new rows, initialize pointer

          for (i = r; i < rows; i++, p++) {
            // add value
            matrix._values.splice(k + p, 0, value); // update matrix._index


            matrix._index.splice(k + p, 0, i); // increment inserts


            n++;
          }
        } // store number of matrix._values in matrix._ptr


        matrix._ptr[c] = matrix._values.length;
      }
    } else if (rows < r) {
      // deletes
      var d = 0; // loop columns

      for (j = 0; j < c; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column

        var k0 = matrix._ptr[j];
        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index

        for (k = k0; k < k1; k++) {
          // row
          i = matrix._index[k]; // check we need to delete value and matrix._index

          if (i > rows - 1) {
            // remove value
            matrix._values.splice(k, 1); // remove item from matrix._index


            matrix._index.splice(k, 1); // increase deletes


            d++;
          }
        }
      } // update matrix._ptr for current column


      matrix._ptr[j] = matrix._values.length;
    } // update matrix._size


    matrix._size[0] = rows;
    matrix._size[1] = columns; // return matrix

    return matrix;
  }
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof SparseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  SparseMatrix.prototype.reshape = function (size, copy) {
    // validate arguments
    if (!Object(is["b" /* isArray */])(size)) {
      throw new TypeError('Array expected');
    }

    if (size.length !== 2) {
      throw new Error('Sparse matrices can only be reshaped in two dimensions');
    } // check sizes


    size.forEach(function (value) {
      if (!Object(is["y" /* isNumber */])(value) || !Object(utils_number["i" /* isInteger */])(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
      }
    }); // m * n must not change

    if (this._size[0] * this._size[1] !== size[0] * size[1]) {
      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
    } // matrix to reshape


    var m = copy ? this.clone() : this; // return unchanged if the same shape

    if (this._size[0] === size[0] && this._size[1] === size[1]) {
      return m;
    } // Convert to COO format (generate a column index)


    var colIndex = [];

    for (var i = 0; i < m._ptr.length; i++) {
      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
        colIndex.push(i);
      }
    } // Clone the values array


    var values = m._values.slice(); // Clone the row index array


    var rowIndex = m._index.slice(); // Transform the (row, column) indices


    for (var _i = 0; _i < m._index.length; _i++) {
      var r1 = rowIndex[_i];
      var c1 = colIndex[_i];
      var flat = r1 * m._size[1] + c1;
      colIndex[_i] = flat % size[1];
      rowIndex[_i] = Math.floor(flat / size[1]);
    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
    // sorting several arrays based on some other array.
    // OR, we could easily just:
    // 1. Remove all values from the matrix


    m._values.length = 0;
    m._index.length = 0;
    m._ptr.length = size[1] + 1;
    m._size = size.slice();

    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
      m._ptr[_i2] = 0;
    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
    // This step is probably the most time-consuming


    for (var h = 0; h < values.length; h++) {
      var _i3 = rowIndex[h];
      var _j = colIndex[h];
      var v = values[h];

      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);

      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
    } // The value indices are inserted out of order, but apparently that's... still OK?


    return m;
  };
  /**
   * Create a clone of the matrix
   * @memberof SparseMatrix
   * @return {SparseMatrix} clone
   */


  SparseMatrix.prototype.clone = function () {
    var m = new SparseMatrix({
      values: this._values ? Object(utils_object["a" /* clone */])(this._values) : undefined,
      index: Object(utils_object["a" /* clone */])(this._index),
      ptr: Object(utils_object["a" /* clone */])(this._ptr),
      size: Object(utils_object["a" /* clone */])(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof SparseMatrix
   * @returns {number[]} size
   */


  SparseMatrix.prototype.size = function () {
    return this._size.slice(0); // copy the Array
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {SparseMatrix} matrix
   */


  SparseMatrix.prototype.map = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke map on a Pattern only matrix');
    } // matrix instance


    var me = this; // rows and columns

    var rows = this._size[0];
    var columns = this._size[1]; // invoke callback

    var invoke = function invoke(v, i, j) {
      // invoke callback
      return callback(v, [i, j], me);
    }; // invoke _map


    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
  };
  /**
   * Create a new matrix with the results of the callback function executed on the interval
   * [minRow..maxRow, minColumn..maxColumn].
   */


  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
    // result arrays
    var values = [];
    var index = [];
    var ptr = []; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if (Object(is["I" /* isString */])(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype);
    } // invoke callback


    var invoke = function invoke(v, x, y) {
      // invoke callback
      v = callback(v, x, y); // check value != 0

      if (!eq(v, zero)) {
        // store value
        values.push(v); // index

        index.push(x);
      }
    }; // loop columns


    for (var j = minColumn; j <= maxColumn; j++) {
      // store pointer to values index
      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      var k0 = matrix._ptr[j];
      var k1 = matrix._ptr[j + 1];

      if (skipZeros) {
        // loop k within [k0, k1[
        for (var k = k0; k < k1; k++) {
          // row index
          var i = matrix._index[k]; // check i is in range

          if (i >= minRow && i <= maxRow) {
            // value @ k
            invoke(matrix._values[k], i - minRow, j - minColumn);
          }
        }
      } else {
        // create a cache holding all defined values
        var _values = {};

        for (var _k = k0; _k < k1; _k++) {
          var _i4 = matrix._index[_k];
          _values[_i4] = matrix._values[_k];
        } // loop over all rows (indexes can be unordered so we can't use that),
        // and either read the value or zero


        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {
          var value = _i5 in _values ? _values[_i5] : 0;
          invoke(value, _i5 - minRow, j - minColumn);
        }
      }
    } // store number of values in ptr


    ptr.push(values.length); // return sparse matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
    });
  }
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   */


  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke forEach on a Pattern only matrix');
    } // matrix instance


    var me = this; // rows and columns

    var rows = this._size[0];
    var columns = this._size[1]; // loop columns

    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1];

      if (skipZeros) {
        // loop k within [k0, k1[
        for (var k = k0; k < k1; k++) {
          // row index
          var i = this._index[k]; // value @ k

          callback(this._values[k], [i, j], me);
        }
      } else {
        // create a cache holding all defined values
        var values = {};

        for (var _k2 = k0; _k2 < k1; _k2++) {
          var _i6 = this._index[_k2];
          values[_i6] = this._values[_k2];
        } // loop over all rows (indexes can be unordered so we can't use that),
        // and either read the value or zero


        for (var _i7 = 0; _i7 < rows; _i7++) {
          var value = _i7 in values ? values[_i7] : 0;
          callback(value, [_i7, j], me);
        }
      }
    }
  };
  /**
   * Create an Array with a copy of the data of the SparseMatrix
   * @memberof SparseMatrix
   * @returns {Array} array
   */


  SparseMatrix.prototype.toArray = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, true);
  };
  /**
   * Get the primitive value of the SparseMatrix: a two dimensions array
   * @memberof SparseMatrix
   * @returns {Array} array
   */


  SparseMatrix.prototype.valueOf = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, false);
  };

  function _toArray(values, index, ptr, size, copy) {
    // rows and columns
    var rows = size[0];
    var columns = size[1]; // result

    var a = []; // vars

    var i, j; // initialize array

    for (i = 0; i < rows; i++) {
      a[i] = [];

      for (j = 0; j < columns; j++) {
        a[i][j] = 0;
      }
    } // loop columns


    for (j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        i = index[k]; // set value (use one for pattern matrix)

        a[i][j] = values ? copy ? Object(utils_object["a" /* clone */])(values[k]) : values[k] : 1;
      }
    }

    return a;
  }
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof SparseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  SparseMatrix.prototype.format = function (options) {
    // rows and columns
    var rows = this._size[0];
    var columns = this._size[1]; // density

    var density = this.density(); // rows & columns

    var str = 'Sparse Matrix [' + Object(utils_string["d" /* format */])(rows, options) + ' x ' + Object(utils_string["d" /* format */])(columns, options) + '] density: ' + Object(utils_string["d" /* format */])(density, options) + '\n'; // loop columns

    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        var i = this._index[k]; // append value

        str += '\n    (' + Object(utils_string["d" /* format */])(i, options) + ', ' + Object(utils_string["d" /* format */])(j, options) + ') ==> ' + (this._values ? Object(utils_string["d" /* format */])(this._values[k], options) : 'X');
      }
    }

    return str;
  };
  /**
   * Get a string representation of the matrix
   * @memberof SparseMatrix
   * @returns {string} str
   */


  SparseMatrix.prototype.toString = function () {
    return Object(utils_string["d" /* format */])(this.toArray());
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof SparseMatrix
   * @returns {Object}
   */


  SparseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'SparseMatrix',
      values: this._values,
      index: this._index,
      ptr: this._ptr,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof SparseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix vector with the diagonal values.
   */


  SparseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if (Object(is["e" /* isBigNumber */])(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!Object(is["y" /* isNumber */])(k) || !Object(utils_number["i" /* isInteger */])(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // number diagonal values

    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays

    var values = [];
    var index = [];
    var ptr = []; // initial ptr value

    ptr[0] = 0; // loop columns

    for (var j = kSuper; j < columns && values.length < n; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[

      for (var x = k0; x < k1; x++) {
        // row index
        var i = this._index[x]; // check row

        if (i === j - kSuper + kSub) {
          // value on this column
          values.push(this._values[x]); // store row

          index[values.length - 1] = i - kSub; // exit loop

          break;
        }
      }
    } // close ptr


    ptr.push(values.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [n, 1]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof SparseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
   *                       where mathjs is optional
   * @returns {SparseMatrix}
   */


  SparseMatrix.fromJSON = function (json) {
    return new SparseMatrix(json);
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof SparseMatrix
   * @param {Array} size                       The matrix size.
   * @param {number | Array | Matrix } value   The values for the diagonal.
   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]            The default value for non-diagonal
   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
   *
   * @returns {SparseMatrix}
   */


  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
    if (!Object(is["b" /* isArray */])(size)) {
      throw new TypeError('Array expected, size parameter');
    }

    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // map size & validate


    size = size.map(function (s) {
      // check it is a big number
      if (Object(is["e" /* isBigNumber */])(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments


      if (!Object(is["y" /* isNumber */])(s) || !Object(utils_number["i" /* isInteger */])(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }

      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if (Object(is["e" /* isBigNumber */])(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!Object(is["y" /* isNumber */])(k) || !Object(utils_number["i" /* isInteger */])(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    } // equal signature to use


    var eq = equalScalar; // zero value

    var zero = 0;

    if (Object(is["I" /* isString */])(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows and columns

    var rows = size[0];
    var columns = size[1]; // number of non-zero items

    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    var _value; // check value


    if (Object(is["b" /* isArray */])(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value[i];
      };
    } else if (Object(is["v" /* isMatrix */])(value)) {
      // matrix size
      var ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function _value() {
        // return value
        return value;
      };
    } // create arrays


    var values = [];
    var index = [];
    var ptr = []; // loop items

    for (var j = 0; j < columns; j++) {
      // number of rows with value
      ptr.push(values.length); // diagonal index

      var i = j - kSuper; // check we need to set diagonal value

      if (i >= 0 && i < n) {
        // get value @ i
        var v = _value(i); // check for zero


        if (!eq(v, zero)) {
          // column
          index.push(i + kSub); // add value

          values.push(v);
        }
      }
    } // last value should be number of values


    ptr.push(values.length); // create SparseMatrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [rows, columns]
    });
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof SparseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  SparseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!Object(is["y" /* isNumber */])(i) || !Object(utils_number["i" /* isInteger */])(i) || !Object(is["y" /* isNumber */])(j) || !Object(utils_number["i" /* isInteger */])(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions


    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index


    Object(utils_array["s" /* validateIndex */])(i, this._size[0]);
    Object(utils_array["s" /* validateIndex */])(j, this._size[0]); // swap rows

    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance


    return this;
  };
  /**
   * Loop rows with data in column j.
   *
   * @param {number} j            Column
   * @param {Array} values        Matrix values
   * @param {Array} index         Matrix row indeces
   * @param {Array} ptr           Matrix column pointers
   * @param {Function} callback   Callback function invoked for every row in column j
   */


  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
    // indeces for column j
    var k0 = ptr[j];
    var k1 = ptr[j + 1]; // loop

    for (var k = k0; k < k1; k++) {
      // invoke callback
      callback(index[k], values[k]);
    }
  };
  /**
   * Swap rows x and y in Sparse Matrix data structures.
   *
   * @param {number} x         Matrix row index 1
   * @param {number} y         Matrix row index 2
   * @param {number} columns   Number of columns in matrix
   * @param {Array} values     Matrix values
   * @param {Array} index      Matrix row indeces
   * @param {Array} ptr        Matrix column pointers
   */


  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
    // loop columns
    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // find value index @ x

      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x


      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix


      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
        // swap values (check for pattern matrix)
        if (values) {
          var v = values[kx];
          values[kx] = values[ky];
          values[ky] = v;
        } // next column


        continue;
      } // check x row exist & no y row


      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
        // value @ x (check for pattern matrix)
        var vx = values ? values[kx] : undefined; // insert value @ y

        index.splice(ky, 0, y);

        if (values) {
          values.splice(ky, 0, vx);
        } // remove value @ x (adjust array index if needed)


        index.splice(ky <= kx ? kx + 1 : kx, 1);

        if (values) {
          values.splice(ky <= kx ? kx + 1 : kx, 1);
        } // next column


        continue;
      } // check y row exist & no x row


      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
        // value @ y (check for pattern matrix)
        var vy = values ? values[ky] : undefined; // insert value @ x

        index.splice(kx, 0, x);

        if (values) {
          values.splice(kx, 0, vy);
        } // remove value @ y (adjust array index if needed)


        index.splice(kx <= ky ? ky + 1 : ky, 1);

        if (values) {
          values.splice(kx <= ky ? ky + 1 : ky, 1);
        }
      }
    }
  };

  return SparseMatrix;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/type/number.js


var number_name = 'number';
var number_dependencies = ['typed'];
var createNumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(number_name, number_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a number or convert a string, boolean, or unit to a number.
   * When value is a matrix, all elements will be converted to number.
   *
   * Syntax:
   *
   *    math.number(value)
   *    math.number(unit, valuelessUnit)
   *
   * Examples:
   *
   *    math.number(2)                         // returns number 2
   *    math.number('7.2')                     // returns number 7.2
   *    math.number(true)                      // returns number 1
   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
   *    math.number(math.unit('52cm'), 'm')    // returns 0.52
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, string, unit
   *
   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
   * @return {number | Array | Matrix} The created number
   */
  var number = typed('number', {
    '': function _() {
      return 0;
    },
    number: function number(x) {
      return x;
    },
    string: function string(x) {
      if (x === 'NaN') return NaN;
      var num = Number(x);

      if (isNaN(num)) {
        throw new SyntaxError('String "' + x + '" is no valid number');
      }

      return num;
    },
    BigNumber: function BigNumber(x) {
      return x.toNumber();
    },
    Fraction: function Fraction(x) {
      return x.valueOf();
    },
    Unit: function Unit(x) {
      throw new Error('Second argument with valueless unit expected');
    },
    "null": function _null(x) {
      return 0;
    },
    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
      return unit.toNumber(valuelessUnit);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, number);
    }
  });
  return number;
});
// CONCATENATED MODULE: ./src/type/string.js



var string_name = 'string';
var string_dependencies = ['typed'];
var createString =
/* #__PURE__ */
Object(factory["a" /* factory */])(string_name, string_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a string or convert any object into a string.
   * Elements of Arrays and Matrices are processed element wise.
   *
   * Syntax:
   *
   *    math.string(value)
   *
   * Examples:
   *
   *    math.string(4.2)               // returns string '4.2'
   *    math.string(math.complex(3, 2) // returns string '3 + 2i'
   *
   *    const u = math.unit(5, 'km')
   *    math.string(u.to('m'))         // returns string '5000 m'
   *
   *    math.string([true, false])     // returns ['true', 'false']
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, unit
   *
   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
   * @return {string | Array | Matrix} The created string
   */
  var string = typed(string_name, {
    '': function _() {
      return '';
    },
    number: utils_number["h" /* format */],
    "null": function _null(x) {
      return 'null';
    },
    "boolean": function boolean(x) {
      return x + '';
    },
    string: function string(x) {
      return x;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, string);
    },
    any: function any(x) {
      return String(x);
    }
  });
  return string;
});
// CONCATENATED MODULE: ./src/type/boolean.js


var boolean_name = 'boolean';
var boolean_dependencies = ['typed'];
var createBoolean =
/* #__PURE__ */
Object(factory["a" /* factory */])(boolean_name, boolean_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a boolean or convert a string or number to a boolean.
   * In case of a number, `true` is returned for non-zero numbers, and `false` in
   * case of zero.
   * Strings can be `'true'` or `'false'`, or can contain a number.
   * When value is a matrix, all elements will be converted to boolean.
   *
   * Syntax:
   *
   *    math.boolean(x)
   *
   * Examples:
   *
   *    math.boolean(0)     // returns false
   *    math.boolean(1)     // returns true
   *    math.boolean(-3)     // returns true
   *    math.boolean('true')     // returns true
   *    math.boolean('false')     // returns false
   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]
   *
   * See also:
   *
   *    bignumber, complex, index, matrix, string, unit
   *
   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
   * @return {boolean | Array | Matrix} The boolean value
   */
  var bool = typed(boolean_name, {
    '': function _() {
      return false;
    },
    "boolean": function boolean(x) {
      return x;
    },
    number: function number(x) {
      return !!x;
    },
    "null": function _null(x) {
      return false;
    },
    BigNumber: function BigNumber(x) {
      return !x.isZero();
    },
    string: function string(x) {
      // try case insensitive
      var lcase = x.toLowerCase();

      if (lcase === 'true') {
        return true;
      } else if (lcase === 'false') {
        return false;
      } // test whether value is a valid number


      var num = Number(x);

      if (x !== '' && !isNaN(num)) {
        return !!num;
      }

      throw new Error('Cannot convert "' + x + '" to a boolean');
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, bool);
    }
  });
  return bool;
});
// CONCATENATED MODULE: ./src/type/bignumber/function/bignumber.js


var bignumber_name = 'bignumber';
var bignumber_dependencies = ['typed', 'BigNumber'];
var createBignumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(bignumber_name, bignumber_dependencies, function (_ref) {
  var typed = _ref.typed,
      BigNumber = _ref.BigNumber;

  /**
   * Create a BigNumber, which can store numbers with arbitrary precision.
   * When a matrix is provided, all elements will be converted to BigNumber.
   *
   * Syntax:
   *
   *    math.bignumber(x)
   *
   * Examples:
   *
   *    0.1 + 0.2                                  // returns number 0.30000000000000004
   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
   *
   *
   *    7.2e500                                    // returns number Infinity
   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
   *
   * See also:
   *
   *    boolean, complex, index, matrix, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
   *                                                    0 by default.
   * @returns {BigNumber} The created bignumber
   */
  var bignumber = typed('bignumber', {
    '': function _() {
      return new BigNumber(0);
    },
    number: function number(x) {
      // convert to string to prevent errors in case of >15 digits
      return new BigNumber(x + '');
    },
    string: function string(x) {
      return new BigNumber(x);
    },
    BigNumber: function BigNumber(x) {
      // we assume a BigNumber is immutable
      return x;
    },
    Fraction: function Fraction(x) {
      return new BigNumber(x.n).div(x.d).times(x.s);
    },
    "null": function _null(x) {
      return new BigNumber(0);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, bignumber);
    }
  });
  return bignumber;
});
// CONCATENATED MODULE: ./src/type/complex/function/complex.js


var complex_name = 'complex';
var complex_dependencies = ['typed', 'Complex'];
var createComplex =
/* #__PURE__ */
Object(factory["a" /* factory */])(complex_name, complex_dependencies, function (_ref) {
  var typed = _ref.typed,
      Complex = _ref.Complex;

  /**
   * Create a complex value or convert a value to a complex value.
   *
   * Syntax:
   *
   *     math.complex()                           // creates a complex value with zero
   *                                              // as real and imaginary part.
   *     math.complex(re : number, im : string)   // creates a complex value with provided
   *                                              // values for real and imaginary part.
   *     math.complex(re : number)                // creates a complex value with provided
   *                                              // real value and zero imaginary part.
   *     math.complex(complex : Complex)          // clones the provided complex value.
   *     math.complex(arg : string)               // parses a string into a complex value.
   *     math.complex(array : Array)              // converts the elements of the array
   *                                              // or matrix element wise into a
   *                                              // complex value.
   *     math.complex({re: number, im: number})   // creates a complex value with provided
   *                                              // values for real an imaginary part.
   *     math.complex({r: number, phi: number})   // creates a complex value with provided
   *                                              // polar coordinates
   *
   * Examples:
   *
   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
   *    a.re = 5                          // a = Complex 5 - 4i
   *    const i = a.im                    // Number -4
   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
   *    const c = math.complex()          // Complex 0 + 0i
   *    const d = math.add(a, b)          // Complex 5 + 2i
   *
   * See also:
   *
   *    bignumber, boolean, index, matrix, number, string, unit
   *
   * @param {* | Array | Matrix} [args]
   *            Arguments specifying the real and imaginary part of the complex number
   * @return {Complex | Array | Matrix} Returns a complex value
   */
  var complex = typed('complex', {
    '': function _() {
      return Complex.ZERO;
    },
    number: function number(x) {
      return new Complex(x, 0);
    },
    'number, number': function numberNumber(re, im) {
      return new Complex(re, im);
    },
    // TODO: this signature should be redundant
    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
      return new Complex(re.toNumber(), im.toNumber());
    },
    Fraction: function Fraction(x) {
      return new Complex(x.valueOf(), 0);
    },
    Complex: function Complex(x) {
      return x.clone();
    },
    string: function string(x) {
      return Complex(x); // for example '2 + 3i'
    },
    "null": function _null(x) {
      return Complex(0);
    },
    Object: function Object(x) {
      if ('re' in x && 'im' in x) {
        return new Complex(x.re, x.im);
      }

      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {
        return new Complex(x);
      }

      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, complex);
    }
  });
  return complex;
});
// CONCATENATED MODULE: ./src/type/fraction/function/fraction.js


var fraction_name = 'fraction';
var fraction_dependencies = ['typed', 'Fraction'];
var createFraction =
/* #__PURE__ */
Object(factory["a" /* factory */])(fraction_name, fraction_dependencies, function (_ref) {
  var typed = _ref.typed,
      Fraction = _ref.Fraction;

  /**
   * Create a fraction convert a value to a fraction.
   *
   * Syntax:
   *     math.fraction(numerator, denominator)
   *     math.fraction({n: numerator, d: denominator})
   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
   *                                                   into fractions
   *
   * Examples:
   *
   *     math.fraction(1, 3)
   *     math.fraction('2/3')
   *     math.fraction({n: 2, d: 3})
   *     math.fraction([0.2, 0.25, 1.25])
   *
   * See also:
   *
   *    bignumber, number, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
   *            Arguments specifying the numerator and denominator of
   *            the fraction
   * @return {Fraction | Array | Matrix} Returns a fraction
   */
  var fraction = typed('fraction', {
    number: function number(x) {
      if (!isFinite(x) || isNaN(x)) {
        throw new Error(x + ' cannot be represented as a fraction');
      }

      return new Fraction(x);
    },
    string: function string(x) {
      return new Fraction(x);
    },
    'number, number': function numberNumber(numerator, denominator) {
      return new Fraction(numerator, denominator);
    },
    "null": function _null(x) {
      return new Fraction(0);
    },
    BigNumber: function BigNumber(x) {
      return new Fraction(x.toString());
    },
    Fraction: function Fraction(x) {
      return x; // fractions are immutable
    },
    Object: function Object(x) {
      return new Fraction(x);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, fraction);
    }
  });
  return fraction;
});
// CONCATENATED MODULE: ./src/type/matrix/function/matrix.js

var matrix_name = 'matrix';
var matrix_dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];
var createMatrix =
/* #__PURE__ */
Object(factory["a" /* factory */])(matrix_name, matrix_dependencies, function (_ref) {
  var typed = _ref.typed,
      Matrix = _ref.Matrix,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   * Supported storage formats are 'dense' and 'sparse'.
   *
   * Syntax:
   *
   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
   *
   * Examples:
   *
   *    let m = math.matrix([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, sparse
   *
   * @param {Array | Matrix} [data]    A multi dimensional array
   * @param {string} [format]          The Matrix storage format
   *
   * @return {Matrix} The created matrix
   */
  return typed(matrix_name, {
    '': function _() {
      return _create([]);
    },
    string: function string(format) {
      return _create([], format);
    },
    'string, string': function stringString(format, datatype) {
      return _create([], format, datatype);
    },
    Array: function Array(data) {
      return _create(data);
    },
    Matrix: function Matrix(data) {
      return _create(data, data.storage());
    },
    'Array | Matrix, string': _create,
    'Array | Matrix, string, string': _create
  });
  /**
   * Create a new Matrix with given storage format
   * @param {Array} data
   * @param {string} [format]
   * @param {string} [datatype]
   * @returns {Matrix} Returns a new Matrix
   * @private
   */

  function _create(data, format, datatype) {
    // get storage format constructor
    if (format === 'dense' || format === 'default' || format === undefined) {
      return new DenseMatrix(data, datatype);
    }

    if (format === 'sparse') {
      return new SparseMatrix(data, datatype);
    }

    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
  }
});
// CONCATENATED MODULE: ./src/type/unit/function/splitUnit.js

var splitUnit_name = 'splitUnit';
var splitUnit_dependencies = ['typed'];
var createSplitUnit =
/* #__PURE__ */
Object(factory["a" /* factory */])(splitUnit_name, splitUnit_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Split a unit in an array of units whose sum is equal to the original unit.
   *
   * Syntax:
   *
   *     splitUnit(unit: Unit, parts: Array.<Unit>)
   *
   * Example:
   *
   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])
   *     // [ 3 feet, 3.3700787401575 inch ]
   *
   * See also:
   *
   *     unit
   *
   * @param {Array} [parts] An array of strings or valueless units.
   * @return {Array} An array of units.
   */
  return typed(splitUnit_name, {
    'Unit, Array': function UnitArray(unit, parts) {
      return unit.splitUnit(parts);
    }
  });
});
// CONCATENATED MODULE: ./src/plain/number/arithmetic.js

var arithmetic_n1 = 'number';
var arithmetic_n2 = 'number, number';
function absNumber(a) {
  return Math.abs(a);
}
absNumber.signature = arithmetic_n1;
function addNumber(a, b) {
  return a + b;
}
addNumber.signature = arithmetic_n2;
function subtractNumber(a, b) {
  return a - b;
}
subtractNumber.signature = arithmetic_n2;
function multiplyNumber(a, b) {
  return a * b;
}
multiplyNumber.signature = arithmetic_n2;
function divideNumber(a, b) {
  return a / b;
}
divideNumber.signature = arithmetic_n2;
function unaryMinusNumber(x) {
  return -x;
}
unaryMinusNumber.signature = arithmetic_n1;
function unaryPlusNumber(x) {
  return x;
}
unaryPlusNumber.signature = arithmetic_n1;
function cbrtNumber(x) {
  return Object(utils_number["d" /* cbrt */])(x);
}
cbrtNumber.signature = arithmetic_n1;
function ceilNumber(x) {
  return Math.ceil(x);
}
ceilNumber.signature = arithmetic_n1;
function cubeNumber(x) {
  return x * x * x;
}
cubeNumber.signature = arithmetic_n1;
function expNumber(x) {
  return Math.exp(x);
}
expNumber.signature = arithmetic_n1;
function expm1Number(x) {
  return Object(utils_number["g" /* expm1 */])(x);
}
expm1Number.signature = arithmetic_n1;
function fixNumber(x) {
  return x > 0 ? Math.floor(x) : Math.ceil(x);
}
fixNumber.signature = arithmetic_n1;
function floorNumber(x) {
  return Math.floor(x);
}
floorNumber.signature = arithmetic_n1;
/**
 * Calculate gcd for numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the greatest common denominator of a and b
 */

function gcdNumber(a, b) {
  if (!Object(utils_number["i" /* isInteger */])(a) || !Object(utils_number["i" /* isInteger */])(b)) {
    throw new Error('Parameters in function gcd must be integer numbers');
  } // https://en.wikipedia.org/wiki/Euclidean_algorithm


  var r;

  while (b !== 0) {
    r = a % b;
    a = b;
    b = r;
  }

  return a < 0 ? -a : a;
}
gcdNumber.signature = arithmetic_n2;
/**
 * Calculate lcm for two numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the least common multiple of a and b
 */

function lcmNumber(a, b) {
  if (!Object(utils_number["i" /* isInteger */])(a) || !Object(utils_number["i" /* isInteger */])(b)) {
    throw new Error('Parameters in function lcm must be integer numbers');
  }

  if (a === 0 || b === 0) {
    return 0;
  } // https://en.wikipedia.org/wiki/Euclidean_algorithm
  // evaluate lcm here inline to reduce overhead


  var t;
  var prod = a * b;

  while (b !== 0) {
    t = b;
    b = a % t;
    a = t;
  }

  return Math.abs(prod / a);
}
lcmNumber.signature = arithmetic_n2;
/**
 * Calculate the logarithm of a value.
 * @param {number} x
 * @return {number}
 */

function logNumber(x) {
  return Math.log(x);
}
logNumber.signature = arithmetic_n1;
/**
 * Calculate the 10-base logarithm of a number
 * @param {number} x
 * @return {number}
 */

function log10Number(x) {
  return Object(utils_number["j" /* log10 */])(x);
}
log10Number.signature = arithmetic_n1;
/**
 * Calculate the 2-base logarithm of a number
 * @param {number} x
 * @return {number}
 */

function log2Number(x) {
  return Object(utils_number["l" /* log2 */])(x);
}
log2Number.signature = arithmetic_n1;
/**
 * Calculate the natural logarithm of a `number+1`
 * @param {number} x
 * @returns {number}
 */

function log1pNumber(x) {
  return Object(utils_number["k" /* log1p */])(x);
}
log1pNumber.signature = arithmetic_n1;
/**
 * Calculate the modulus of two numbers
 * @param {number} x
 * @param {number} y
 * @returns {number} res
 * @private
 */

function modNumber(x, y) {
  if (y > 0) {
    // We don't use JavaScript's % operator here as this doesn't work
    // correctly for x < 0 and x === 0
    // see https://en.wikipedia.org/wiki/Modulo_operation
    return x - y * Math.floor(x / y);
  } else if (y === 0) {
    return x;
  } else {
    // y < 0
    // TODO: implement mod for a negative divisor
    throw new Error('Cannot calculate mod for a negative divisor');
  }
}
modNumber.signature = arithmetic_n2;
/**
 * Calculate the nth root of a, solve x^root == a
 * http://rosettacode.org/wiki/Nth_root#JavaScript
 * @param {number} a
 * @param {number} root
 * @private
 */

function nthRootNumber(a, root) {
  var inv = root < 0;

  if (inv) {
    root = -root;
  }

  if (root === 0) {
    throw new Error('Root must be non-zero');
  }

  if (a < 0 && Math.abs(root) % 2 !== 1) {
    throw new Error('Root must be odd when a is negative.');
  } // edge cases zero and infinity


  if (a === 0) {
    return inv ? Infinity : 0;
  }

  if (!isFinite(a)) {
    return inv ? 0 : a;
  }

  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,
  // so (-1) ^ (1/root) = -1

  x = a < 0 ? -x : x;
  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).
  // Newton's method has some well-known problems at times:
  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis

  /*
  let x = 1 // Initial guess
  let xPrev = 1
  let i = 0
  const iMax = 10000
  do {
    const delta = (a / Math.pow(x, root - 1) - x) / root
    xPrev = x
    x = x + delta
    i++
  }
  while (xPrev !== x && i < iMax)
   if (xPrev !== x) {
    throw new Error('Function nthRoot failed to converge')
  }
   return inv ? 1 / x : x
  */
}
nthRootNumber.signature = arithmetic_n2;
function signNumber(x) {
  return Object(utils_number["n" /* sign */])(x);
}
signNumber.signature = arithmetic_n1;
function sqrtNumber(x) {
  return Math.sqrt(x);
}
sqrtNumber.signature = arithmetic_n1;
function squareNumber(x) {
  return x * x;
}
squareNumber.signature = arithmetic_n1;
/**
 * Calculate xgcd for two numbers
 * @param {number} a
 * @param {number} b
 * @return {number} result
 * @private
 */

function xgcdNumber(a, b) {
  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
  var t; // used to swap two variables

  var q; // quotient

  var r; // remainder

  var x = 0;
  var lastx = 1;
  var y = 1;
  var lasty = 0;

  if (!Object(utils_number["i" /* isInteger */])(a) || !Object(utils_number["i" /* isInteger */])(b)) {
    throw new Error('Parameters in function xgcd must be integer numbers');
  }

  while (b) {
    q = Math.floor(a / b);
    r = a - q * b;
    t = x;
    x = lastx - q * x;
    lastx = t;
    t = y;
    y = lasty - q * y;
    lasty = t;
    a = b;
    b = r;
  }

  var res;

  if (a < 0) {
    res = [-a, -lastx, -lasty];
  } else {
    res = [a, a ? lastx : 0, lasty];
  }

  return res;
}
xgcdNumber.signature = arithmetic_n2;
/**
 * Calculates the power of x to y, x^y, for two numbers.
 * @param {number} x
 * @param {number} y
 * @return {number} res
 */

function powNumber(x, y) {
  // x^Infinity === 0 if -1 < x < 1
  // A real number 0 is returned instead of complex(0)
  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
    return 0;
  }

  return Math.pow(x, y);
}
powNumber.signature = arithmetic_n2;
/**
 * round a number to the given number of decimals, or to zero if decimals is
 * not provided
 * @param {number} value
 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
 * @return {number} roundedValue
 */

function roundNumber(value) {
  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return parseFloat(Object(utils_number["q" /* toFixed */])(value, decimals));
}
roundNumber.signature = arithmetic_n2;
/**
 * Calculate the norm of a number, the absolute value.
 * @param {number} x
 * @return {number}
 */

function normNumber(x) {
  return Math.abs(x);
}
normNumber.signature = arithmetic_n1;
// CONCATENATED MODULE: ./src/function/arithmetic/unaryMinus.js



var unaryMinus_name = 'unaryMinus';
var unaryMinus_dependencies = ['typed'];
var createUnaryMinus =
/* #__PURE__ */
Object(factory["a" /* factory */])(unaryMinus_name, unaryMinus_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Inverse the sign of a value, apply a unary minus operation.
   *
   * For matrices, the function is evaluated element wise. Boolean values and
   * strings will be converted to a number. For complex numbers, both real and
   * complex value are inverted.
   *
   * Syntax:
   *
   *    math.unaryMinus(x)
   *
   * Examples:
   *
   *    math.unaryMinus(3.5)      // returns -3.5
   *    math.unaryMinus(-4.2)     // returns 4.2
   *
   * See also:
   *
   *    add, subtract, unaryPlus
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
   */
  var unaryMinus = typed(unaryMinus_name, {
    number: unaryMinusNumber,
    Complex: function Complex(x) {
      return x.neg();
    },
    BigNumber: function BigNumber(x) {
      return x.neg();
    },
    Fraction: function Fraction(x) {
      return x.neg();
    },
    Unit: function Unit(x) {
      var res = x.clone();
      res.value = unaryMinus(x.value);
      return res;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since unaryMinus(0) = 0
      return deepMap(x, unaryMinus, true);
    } // TODO: add support for string

  });
  return unaryMinus;
});
// CONCATENATED MODULE: ./src/function/arithmetic/unaryPlus.js



var unaryPlus_name = 'unaryPlus';
var unaryPlus_dependencies = ['typed', 'config', 'BigNumber'];
var createUnaryPlus =
/* #__PURE__ */
Object(factory["a" /* factory */])(unaryPlus_name, unaryPlus_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      BigNumber = _ref.BigNumber;

  /**
   * Unary plus operation.
   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.unaryPlus(x)
   *
   * Examples:
   *
   *    math.unaryPlus(3.5)      // returns 3.5
   *    math.unaryPlus(1)     // returns 1
   *
   * See also:
   *
   *    unaryMinus, add, subtract
   *
   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
   *            Input value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns the input value when numeric, converts to a number when input is non-numeric.
   */
  var unaryPlus = typed(unaryPlus_name, {
    number: unaryPlusNumber,
    Complex: function Complex(x) {
      return x; // complex numbers are immutable
    },
    BigNumber: function BigNumber(x) {
      return x; // bignumbers are immutable
    },
    Fraction: function Fraction(x) {
      return x; // fractions are immutable
    },
    Unit: function Unit(x) {
      return x.clone();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since unaryPlus(0) = 0
      return deepMap(x, unaryPlus, true);
    },
    'boolean | string': function booleanString(x) {
      // convert to a number or bignumber
      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;
    }
  });
  return unaryPlus;
});
// CONCATENATED MODULE: ./src/function/arithmetic/abs.js



var abs_name = 'abs';
var abs_dependencies = ['typed'];
var createAbs =
/* #__PURE__ */
Object(factory["a" /* factory */])(abs_name, abs_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the absolute value of a number. For matrices, the function is
   * evaluated element wise.
   *
   * Syntax:
   *
   *    math.abs(x)
   *
   * Examples:
   *
   *    math.abs(3.5)                // returns number 3.5
   *    math.abs(-4.2)               // returns number 4.2
   *
   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
   *
   * See also:
   *
   *    sign
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            A number or matrix for which to get the absolute value
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Absolute value of `x`
   */
  var abs = typed(abs_name, {
    number: absNumber,
    Complex: function Complex(x) {
      return x.abs();
    },
    BigNumber: function BigNumber(x) {
      return x.abs();
    },
    Fraction: function Fraction(x) {
      return x.abs();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since abs(0) = 0
      return deepMap(x, abs, true);
    },
    Unit: function Unit(x) {
      return x.abs();
    }
  });
  return abs;
});
// CONCATENATED MODULE: ./src/function/matrix/apply.js




var apply_name = 'apply';
var apply_dependencies = ['typed', 'isInteger'];
var createApply =
/* #__PURE__ */
Object(factory["a" /* factory */])(apply_name, apply_dependencies, function (_ref) {
  var typed = _ref.typed,
      isInteger = _ref.isInteger;

  /**
   * Apply a function that maps an array to a scalar
   * along a given axis of a matrix or array.
   * Returns a new matrix or array with one less dimension than the input.
   *
   * Syntax:
   *
   *     math.apply(A, dim, callback)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [3, 4]]
   *    const sum = math.sum
   *
   *    math.apply(A, 0, sum)             // returns [4, 6]
   *    math.apply(A, 1, sum)             // returns [3, 7]
   *
   * See also:
   *
   *    map, filter, forEach
   *
   * @param {Array | Matrix} array   The input Matrix
   * @param {number} dim             The dimension along which the callback is applied
   * @param {Function} callback      The callback function that is applied. This Function
   *                                 should take an array or 1-d matrix as an input and
   *                                 return a number.
   * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.
   */
  var apply = typed(apply_name, {
    'Array | Matrix, number | BigNumber, function': function ArrayMatrixNumberBigNumberFunction(mat, dim, callback) {
      if (!isInteger(dim)) {
        throw new TypeError('Integer number expected for dimension');
      }

      var size = Array.isArray(mat) ? Object(utils_array["a" /* arraySize */])(mat) : mat.size();

      if (dim < 0 || dim >= size.length) {
        throw new IndexError["a" /* IndexError */](dim, size.length);
      }

      if (Object(is["v" /* isMatrix */])(mat)) {
        return mat.create(_apply(mat.valueOf(), dim, callback));
      } else {
        return _apply(mat, dim, callback);
      }
    }
  });
  return apply;
});
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */

function _apply(mat, dim, callback) {
  var i, ret, tran;

  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      return callback(mat);
    } else {
      tran = apply_switch(mat);
      ret = [];

      for (i = 0; i < tran.length; i++) {
        ret[i] = _apply(tran[i], dim - 1, callback);
      }

      return ret;
    }
  } else {
    ret = [];

    for (i = 0; i < mat.length; i++) {
      ret[i] = _apply(mat[i], dim - 1, callback);
    }

    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */


function apply_switch(mat) {
  var I = mat.length;
  var J = mat[0].length;
  var i, j;
  var ret = [];

  for (j = 0; j < J; j++) {
    var tmp = [];

    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }

    ret.push(tmp);
  }

  return ret;
}
// CONCATENATED MODULE: ./src/function/arithmetic/addScalar.js


var addScalar_name = 'addScalar';
var addScalar_dependencies = ['typed'];
var createAddScalar =
/* #__PURE__ */
Object(factory["a" /* factory */])(addScalar_name, addScalar_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Add two scalar values, `x + y`.
   * This function is meant for internal use: it is used by the public function
   * `add`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
   * @private
   */
  var addScalar = typed(addScalar_name, {
    'number, number': addNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.add(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.plus(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.add(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
      if (!x.equalBase(y)) throw new Error('Units do not match');
      var res = x.clone();
      res.value = addScalar(res.value, y.value);
      res.fixPrefix = false;
      return res;
    }
  });
  return addScalar;
});
// CONCATENATED MODULE: ./src/function/arithmetic/cbrt.js




var cbrt_name = 'cbrt';
var cbrt_dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];
var createCbrt =
/* #__PURE__ */
Object(factory["a" /* factory */])(cbrt_name, cbrt_dependencies, function (_ref) {
  var config = _ref.config,
      typed = _ref.typed,
      isNegative = _ref.isNegative,
      unaryMinus = _ref.unaryMinus,
      matrix = _ref.matrix,
      Complex = _ref.Complex,
      BigNumber = _ref.BigNumber,
      Fraction = _ref.Fraction;

  /**
   * Calculate the cubic root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cbrt(x)
   *    math.cbrt(x, allRoots)
   *
   * Examples:
   *
   *    math.cbrt(27)                  // returns 3
   *    math.cube(3)                   // returns 27
   *    math.cbrt(-64)                 // returns -4
   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m
   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]
   *
   *    const x = math.complex('8i')
   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i
   *    math.cbrt(x, true)             // returns Matrix [
   *                                    //    1.7320508075689 + i
   *                                    //   -1.7320508075689 + i
   *                                    //   -2i
   *                                    // ]
   *
   * See also:
   *
   *    square, sqrt, cube
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
   *            Value for which to calculate the cubic root.
   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
   *            when `x` is a number or complex number. If true, all complex
   *            roots are returned, if false (default) the principal root is
   *            returned.
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
   *            Returns the cubic root of `x`
   */
  var cbrt = typed(cbrt_name, {
    number: cbrtNumber,
    // note: signature 'number, boolean' is also supported,
    //       created by typed as it knows how to convert number to Complex
    Complex: _cbrtComplex,
    'Complex, boolean': _cbrtComplex,
    BigNumber: function BigNumber(x) {
      return x.cbrt();
    },
    Unit: _cbrtUnit,
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since cbrt(0) = 0
      return deepMap(x, cbrt, true);
    }
  });
  /**
   * Calculate the cubic root for a complex number
   * @param {Complex} x
   * @param {boolean} [allRoots]   If true, the function will return an array
   *                               with all three roots. If false or undefined,
   *                               the principal root is returned.
   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
   * @private
   */

  function _cbrtComplex(x, allRoots) {
    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
    var arg3 = x.arg() / 3;
    var abs = x.abs(); // principal root:

    var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());

    if (allRoots) {
      var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];
      return config.matrix === 'Array' ? all : matrix(all);
    } else {
      return principal;
    }
  }
  /**
   * Calculate the cubic root for a Unit
   * @param {Unit} x
   * @return {Unit} Returns the cubic root of x
   * @private
   */


  function _cbrtUnit(x) {
    if (x.value && Object(is["j" /* isComplex */])(x.value)) {
      var result = x.clone();
      result.value = 1.0;
      result = result.pow(1.0 / 3); // Compute the units

      result.value = _cbrtComplex(x.value); // Compute the value

      return result;
    } else {
      var negate = isNegative(x.value);

      if (negate) {
        x.value = unaryMinus(x.value);
      } // TODO: create a helper function for this


      var third;

      if (Object(is["e" /* isBigNumber */])(x.value)) {
        third = new BigNumber(1).div(3);
      } else if (Object(is["o" /* isFraction */])(x.value)) {
        third = new Fraction(1, 3);
      } else {
        third = 1 / 3;
      }

      var _result = x.pow(third);

      if (negate) {
        _result.value = unaryMinus(_result.value);
      }

      return _result;
    }
  }

  return cbrt;
});
// CONCATENATED MODULE: ./src/function/arithmetic/ceil.js





var ceil_name = 'ceil';
var ceil_dependencies = ['typed', 'config', 'round'];
var createCeil =
/* #__PURE__ */
Object(factory["a" /* factory */])(ceil_name, ceil_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      round = _ref.round;

  /**
   * Round a value towards plus infinity
   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.ceil(x)
   *
   * Examples:
   *
   *    math.ceil(3.2)               // returns number 4
   *    math.ceil(3.8)               // returns number 4
   *    math.ceil(-4.2)              // returns number -4
   *    math.ceil(-4.7)              // returns number -4
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.ceil(c)                 // returns Complex 4 - 2i
   *
   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]
   *
   * See also:
   *
   *    floor, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
  var ceil = typed('ceil', {
    number: function number(x) {
      if (Object(utils_number["m" /* nearlyEqual */])(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return ceilNumber(x);
      }
    },
    Complex: function Complex(x) {
      return x.ceil();
    },
    BigNumber: function BigNumber(x) {
      if (nearlyEqual(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return x.ceil();
      }
    },
    Fraction: function Fraction(x) {
      return x.ceil();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since ceil(0) = 0
      return deepMap(x, ceil, true);
    }
  });
  return ceil;
});
// CONCATENATED MODULE: ./src/function/arithmetic/cube.js



var cube_name = 'cube';
var cube_dependencies = ['typed'];
var createCube =
/* #__PURE__ */
Object(factory["a" /* factory */])(cube_name, cube_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the cube of a value, `x * x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cube(x)
   *
   * Examples:
   *
   *    math.cube(2)            // returns number 8
   *    math.pow(2, 3)          // returns number 8
   *    math.cube(4)            // returns number 64
   *    4 * 4 * 4               // returns number 64
   *
   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]
   *
   * See also:
   *
   *    multiply, square, pow, cbrt
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
   */
  var cube = typed(cube_name, {
    number: cubeNumber,
    Complex: function Complex(x) {
      return x.mul(x).mul(x); // Is faster than pow(x, 3)
    },
    BigNumber: function BigNumber(x) {
      return x.times(x).times(x);
    },
    Fraction: function Fraction(x) {
      return x.pow(3); // Is faster than mul()mul()mul()
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since cube(0) = 0
      return deepMap(x, cube, true);
    },
    Unit: function Unit(x) {
      return x.pow(3);
    }
  });
  return cube;
});
// CONCATENATED MODULE: ./src/function/arithmetic/exp.js



var exp_name = 'exp';
var exp_dependencies = ['typed'];
var createExp =
/* #__PURE__ */
Object(factory["a" /* factory */])(exp_name, exp_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the exponent of a value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.exp(x)
   *
   * Examples:
   *
   *    math.exp(2)                  // returns number 7.3890560989306495
   *    math.pow(math.e, 2)          // returns number 7.3890560989306495
   *    math.log(math.exp(2))        // returns number 2
   *
   *    math.exp([1, 2, 3])
   *    // returns Array [
   *    //   2.718281828459045,
   *    //   7.3890560989306495,
   *    //   20.085536923187668
   *    // ]
   *
   * See also:
   *
   *    expm1, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  var exp = typed(exp_name, {
    number: expNumber,
    Complex: function Complex(x) {
      return x.exp();
    },
    BigNumber: function BigNumber(x) {
      return x.exp();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
      return deepMap(x, exp);
    }
  });
  return exp;
});
// CONCATENATED MODULE: ./src/function/arithmetic/expm1.js



var expm1_name = 'expm1';
var expm1_dependencies = ['typed', 'Complex'];
var createExpm1 =
/* #__PURE__ */
Object(factory["a" /* factory */])(expm1_name, expm1_dependencies, function (_ref) {
  var typed = _ref.typed,
      _Complex = _ref.Complex;

  /**
   * Calculate the value of subtracting 1 from the exponential value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.expm1(x)
   *
   * Examples:
   *
   *    math.expm1(2)                      // returns number 6.38905609893065
   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495
   *    math.log(math.expm1(2) + 1)        // returns number 2
   *
   *    math.expm1([1, 2, 3])
   *    // returns Array [
   *    //   1.718281828459045,
   *    //   6.3890560989306495,
   *    //   19.085536923187668
   *    // ]
   *
   * See also:
   *
   *    exp, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  var expm1 = typed(expm1_name, {
    number: expm1Number,
    Complex: function Complex(x) {
      var r = Math.exp(x.re);
      return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));
    },
    BigNumber: function BigNumber(x) {
      return x.exp().minus(1);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, expm1);
    }
  });
  return expm1;
});
// CONCATENATED MODULE: ./src/function/arithmetic/fix.js


var fix_name = 'fix';
var fix_dependencies = ['typed', 'Complex', 'ceil', 'floor'];
var createFix =
/* #__PURE__ */
Object(factory["a" /* factory */])(fix_name, fix_dependencies, function (_ref) {
  var typed = _ref.typed,
      _Complex = _ref.Complex,
      ceil = _ref.ceil,
      floor = _ref.floor;

  /**
   * Round a value towards zero.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.fix(x)
   *
   * Examples:
   *
   *    math.fix(3.2)                // returns number 3
   *    math.fix(3.8)                // returns number 3
   *    math.fix(-4.2)               // returns number -4
   *    math.fix(-4.7)               // returns number -4
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.fix(c)                  // returns Complex 3 - 2i
   *
   *    math.fix([3.2, 3.8, -4.7])   // returns Array [3, 3, -4]
   *
   * See also:
   *
   *    ceil, floor, round
   *
   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
   */
  var fix = typed('fix', {
    number: function number(x) {
      return x > 0 ? floor(x) : ceil(x);
    },
    Complex: function Complex(x) {
      return new _Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
    },
    BigNumber: function BigNumber(x) {
      return x.isNegative() ? ceil(x) : floor(x);
    },
    Fraction: function Fraction(x) {
      return x.s < 0 ? x.ceil() : x.floor();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since fix(0) = 0
      return deepMap(x, fix, true);
    }
  });
  return fix;
});
// CONCATENATED MODULE: ./src/function/arithmetic/floor.js




var floor_name = 'floor';
var floor_dependencies = ['typed', 'config', 'round'];
var createFloor =
/* #__PURE__ */
Object(factory["a" /* factory */])(floor_name, floor_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      round = _ref.round;

  /**
   * Round a value towards minus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.floor(x)
   *
   * Examples:
   *
   *    math.floor(3.2)              // returns number 3
   *    math.floor(3.8)              // returns number 3
   *    math.floor(-4.2)             // returns number -5
   *    math.floor(-4.7)             // returns number -5
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.floor(c)                // returns Complex 3 - 3i
   *
   *    math.floor([3.2, 3.8, -4.7]) // returns Array [3, 3, -5]
   *
   * See also:
   *
   *    ceil, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
  var floor = typed('floor', {
    number: function number(x) {
      if (Object(utils_number["m" /* nearlyEqual */])(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return Math.floor(x);
      }
    },
    Complex: function Complex(x) {
      return x.floor();
    },
    BigNumber: function BigNumber(x) {
      if (nearlyEqual(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return x.floor();
      }
    },
    Fraction: function Fraction(x) {
      return x.floor();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since floor(0) = 0
      return deepMap(x, floor, true);
    }
  });
  return floor;
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm01.js


var algorithm01_name = 'algorithm01';
var algorithm01_dependencies = ['typed'];
var createAlgorithm01 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm01_name, algorithm01_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  Dij          ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError["a" /* DimensionError */](asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // process data types

    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function

    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars

    var i, j; // result (DenseMatrix)

    var cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // workspace


    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns in b

    for (j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated

        w[i] = mark;
      } // loop rows


      for (i = 0; i < rows; i++) {
        // check row is in workspace
        if (w[i] === mark) {
          // c[i][j] was already calculated
          cdata[i][j] = x[i];
        } else {
          // item does not exist in S
          cdata[i][j] = adata[i][j];
        }
      }
    } // return dense matrix


    return denseMatrix.createDenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm04.js


var algorithm04_name = 'algorithm04';
var algorithm04_dependencies = ['typed', 'equalScalar'];
var createAlgorithm04 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm04_name, algorithm04_dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  B(i,j)       ; B(i,j) !== 0
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm04(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError["a" /* DimensionError */](asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspace

    var xa = avalues && bvalues ? [] : undefined;
    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // vars

    var i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop A(:,j)

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // update c

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) {
          xa[i] = avalues[k];
        }
      } // loop B(:,j)


      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check row exists in A

        if (wa[i] === mark) {
          // update record in xa @ i
          if (xa) {
            // invoke callback
            var v = cf(xa[i], bvalues[k]); // check for zero

            if (!eq(v, zero)) {
              // update workspace
              xa[i] = v;
            } else {
              // remove mark (index will be removed later)
              wa[i] = null;
            }
          }
        } else {
          // update c
          cindex.push(i); // update workspace

          wb[i] = mark; // check we need to process values

          if (xb) {
            xb[i] = bvalues[k];
          }
        }
      } // check we need to process values (non pattern matrix)


      if (xa && xb) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // check workspace has value @ i

          if (wa[i] === mark) {
            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
            cvalues[k] = xa[i]; // increment pointer

            k++;
          } else if (wb[i] === mark) {
            // push value (bij != 0)
            cvalues[k] = xb[i]; // increment pointer

            k++;
          } else {
            // remove index @ k
            cindex.splice(k, 1);
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm10.js

var algorithm10_name = 'algorithm10';
var algorithm10_dependencies = ['typed', 'DenseMatrix'];
var createAlgorithm10 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm10_name, algorithm10_dependencies, function (_ref) {
  var typed = _ref.typed,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  b          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm10(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cdata = []; // matrix

    var c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows


      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j


        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = b;
        }
      }
    } // return sparse matrix


    return c;
  };
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm13.js


var algorithm13_name = 'algorithm13';
var algorithm13_dependencies = ['typed'];
var createAlgorithm13 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm13_name, algorithm13_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, Bij..z)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Matrix}   b                 The DenseMatrix instance (B)
   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
   */
  return function algorithm13(a, b, callback) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b arrays

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // c arrays

    var csize = []; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError["a" /* DimensionError */](asize.length, bsize.length);
    } // validate each one of the dimension sizes


    for (var s = 0; s < asize.length; s++) {
      // must match
      if (asize[s] !== bsize[s]) {
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      } // update dimension in c


      csize[s] = asize[s];
    } // datatype


    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions


    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix

    return a.createDenseMatrix({
      data: cdata,
      size: csize,
      datatype: dt
    });
  }; // recursive function

  function _iterate(f, level, s, n, av, bv) {
    // initialize array for this level
    var cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = f(av[i], bv[i]);
      }
    } else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
      }
    }

    return cv;
  }
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm14.js


var algorithm14_name = 'algorithm14';
var algorithm14_dependencies = ['typed'];
var createAlgorithm14 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm14_name, algorithm14_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, b)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij..z,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
   */
  return function algorithm14(a, b, callback, inverse) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions


    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix

    return a.createDenseMatrix({
      data: cdata,
      size: Object(utils_object["a" /* clone */])(asize),
      datatype: dt
    });
  }; // recursive function

  function _iterate(f, level, s, n, av, bv, inverse) {
    // initialize array for this level
    var cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
      }
    } else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
      }
    }

    return cv;
  }
});
// CONCATENATED MODULE: ./src/function/arithmetic/gcd.js







var gcd_name = 'gcd';
var gcd_dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
var createGcd =
/* #__PURE__ */
Object(factory["a" /* factory */])(gcd_name, gcd_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      BigNumber = _ref.BigNumber,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm04 = createAlgorithm04({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculate the greatest common divisor for two or more values or arrays.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gcd(a, b)
   *    math.gcd(a, b, c, ...)
   *
   * Examples:
   *
   *    math.gcd(8, 12)              // returns 4
   *    math.gcd(-4, 6)              // returns 2
   *    math.gcd(25, 15, -10)        // returns 5
   *
   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]
   *
   * See also:
   *
   *    lcm, xgcd
   *
   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
   */

  var gcd = typed(gcd_name, {
    'number, number': gcdNumber,
    'BigNumber, BigNumber': _gcdBigNumber,
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.gcd(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, gcd);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, gcd, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, gcd, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, gcd);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return gcd(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return gcd(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return gcd(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm10(x, y, gcd, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, gcd, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      return algorithm10(y, x, gcd, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, gcd, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, gcd, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, gcd, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
      var res = gcd(a, b);

      for (var i = 0; i < args.length; i++) {
        res = gcd(res, args[i]);
      }

      return res;
    }
  });
  return gcd;
  /**
   * Calculate gcd for BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns greatest common denominator of a and b
   * @private
   */

  function _gcdBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function gcd must be integer numbers');
    } // https://en.wikipedia.org/wiki/Euclidean_algorithm


    var zero = new BigNumber(0);

    while (!b.isZero()) {
      var r = a.mod(b);
      a = b;
      b = r;
    }

    return a.lt(zero) ? a.neg() : a;
  }
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm02.js


var algorithm02_name = 'algorithm02';
var algorithm02_dependencies = ['typed', 'equalScalar'];
var createAlgorithm02 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm02_name, algorithm02_dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError["a" /* DimensionError */](asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (SparseMatrix)


    var cvalues = [];
    var cindex = [];
    var cptr = []; // loop columns in b

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k]; // update C(i,j)

        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero

        if (!eq(cij, zero)) {
          // push i & v
          cindex.push(i);
          cvalues.push(cij);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return sparseMatrix.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm06.js



var algorithm06_name = 'algorithm06';
var algorithm06_dependencies = ['typed', 'equalScalar'];
var createAlgorithm06 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm06_name, algorithm06_dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm06(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError["a" /* DimensionError */](asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var w = []; // marks indicating value in a given row has been updated

    var u = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // scatter the values of A(:,j) into workspace

      scatter(a, j, w, x, u, mark, c, cf); // scatter the values of B(:,j) into workspace

      scatter(b, j, w, x, u, mark, c, cf); // check we need to process values (non pattern matrix)

      if (x) {
        // initialize first index in j
        var k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[i] === mark) {
            // value @ i
            var v = x[i]; // check for zero value

            if (!eq(v, zero)) {
              // push value
              cvalues.push(v); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          } else {
            // remove value @ i, do not increment pointer
            cindex.splice(k, 1);
          }
        }
      } else {
        // initialize first index in j
        var p = cptr[j]; // loop index in j

        while (p < cindex.length) {
          // row
          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[r] !== mark) {
            // remove value @ i, do not increment pointer
            cindex.splice(p, 1);
          } else {
            // increment pointer
            p++;
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm11.js

var algorithm11_name = 'algorithm11';
var algorithm11_dependencies = ['typed', 'equalScalar'];
var createAlgorithm11 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm11_name, algorithm11_dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm11(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = [];
    var cindex = [];
    var cptr = []; // matrix

    var c = s.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // loop columns

    for (var j = 0; j < columns; j++) {
      // initialize ptr
      cptr[j] = cindex.length; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = aindex[k]; // invoke callback

        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero

        if (!eq(v, zero)) {
          // push index & value
          cindex.push(i);
          cvalues.push(v);
        }
      }
    } // update ptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
// CONCATENATED MODULE: ./src/function/arithmetic/lcm.js







var lcm_name = 'lcm';
var lcm_dependencies = ['typed', 'matrix', 'equalScalar'];
var createLcm =
/* #__PURE__ */
Object(factory["a" /* factory */])(lcm_name, lcm_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = createAlgorithm06({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculate the least common multiple for two or more values or arrays.
   *
   * lcm is defined as:
   *
   *     lcm(a, b) = abs(a * b) / gcd(a, b)
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.lcm(a, b)
   *    math.lcm(a, b, c, ...)
   *
   * Examples:
   *
   *    math.lcm(4, 6)               // returns 12
   *    math.lcm(6, 21)              // returns 42
   *    math.lcm(6, 21, 5)           // returns 210
   *
   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]
   *
   * See also:
   *
   *    gcd, xgcd
   *
   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
   */

  var lcm = typed(lcm_name, {
    'number, number': lcmNumber,
    'BigNumber, BigNumber': _lcmBigNumber,
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.lcm(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, lcm);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, lcm, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, lcm, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, lcm);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return lcm(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return lcm(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return lcm(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, lcm, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, lcm, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      return algorithm11(y, x, lcm, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, lcm, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, lcm, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, lcm, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
      var res = lcm(a, b);

      for (var i = 0; i < args.length; i++) {
        res = lcm(res, args[i]);
      }

      return res;
    }
  });
  return lcm;
  /**
   * Calculate lcm for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns the least common multiple of a and b
   * @private
   */

  function _lcmBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function lcm must be integer numbers');
    }

    if (a.isZero()) {
      return a;
    }

    if (b.isZero()) {
      return b;
    } // https://en.wikipedia.org/wiki/Euclidean_algorithm
    // evaluate lcm here inline to reduce overhead


    var prod = a.times(b);

    while (!b.isZero()) {
      var t = b;
      b = a.mod(t);
      a = t;
    }

    return prod.div(a).abs();
  }
});
// CONCATENATED MODULE: ./src/function/arithmetic/log10.js



var log10_name = 'log10';
var log10_dependencies = ['typed', 'config', 'Complex'];
var createLog10 =
/* #__PURE__ */
Object(factory["a" /* factory */])(log10_name, log10_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      _Complex = _ref.Complex;

  /**
   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log10(x)
   *
   * Examples:
   *
   *    math.log10(0.00001)            // returns -5
   *    math.log10(10000)              // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *    math.pow(10, 4)                // returns 10000
   *
   * See also:
   *
   *    exp, log, log1p, log2
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 10-base logarithm of `x`
   */
  var log10 = typed(log10_name, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return log10Number(x);
      } else {
        // negative value -> complex value computation
        return new _Complex(x, 0).log().div(Math.LN10);
      }
    },
    Complex: function Complex(x) {
      return new _Complex(x).log().div(Math.LN10);
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.log();
      } else {
        // downgrade to number, return Complex valued result
        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, log10);
    }
  });
  return log10;
});
// CONCATENATED MODULE: ./src/function/arithmetic/log2.js



var log2_name = 'log2';
var log2_dependencies = ['typed', 'config', 'Complex'];
var createLog2 =
/* #__PURE__ */
Object(factory["a" /* factory */])(log2_name, log2_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex;

  /**
   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log2(x)
   *
   * Examples:
   *
   *    math.log2(0.03125)           // returns -5
   *    math.log2(16)                // returns 4
   *    math.log2(16) / math.log2(2) // returns 4
   *    math.pow(2, 4)               // returns 16
   *
   * See also:
   *
   *    exp, log, log1p, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 2-base logarithm of `x`
   */
  var log2 = typed(log2_name, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return log2Number(x);
      } else {
        // negative value -> complex value computation
        return _log2Complex(new Complex(x, 0));
      }
    },
    Complex: _log2Complex,
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.log(2);
      } else {
        // downgrade to number, return Complex valued result
        return _log2Complex(new Complex(x.toNumber(), 0));
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, log2);
    }
  });
  /**
   * Calculate log2 for a complex value
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */

  function _log2Complex(x) {
    var newX = Math.sqrt(x.re * x.re + x.im * x.im);
    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);
  }

  return log2;
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm03.js


var algorithm03_name = 'algorithm03';
var algorithm03_dependencies = ['typed'];
var createAlgorithm03 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm03_name, algorithm03_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
   * Callback function invoked M*N times.
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(Dij, 0)    ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError["a" /* DimensionError */](asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (DenseMatrix)


    var cdata = []; // initialize dense matrix

    for (var z = 0; z < rows; z++) {
      // initialize row
      cdata[z] = [];
    } // workspace


    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns in b

    for (var j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
        w[i] = mark;
      } // process workspace


      for (var y = 0; y < rows; y++) {
        // check we have a calculated value for current row
        if (w[y] === mark) {
          // use calculated value
          cdata[y][j] = x[y];
        } else {
          // calculate value
          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
        }
      }
    } // return dense matrix


    return denseMatrix.createDenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm05.js


var algorithm05_name = 'algorithm05';
var algorithm05_dependencies = ['typed', 'equalScalar'];
var createAlgorithm05 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm05_name, algorithm05_dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm05(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError["a" /* DimensionError */](asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var xa = cvalues ? [] : undefined;
    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // vars

    var i, j, k, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop values A(:,j)

      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
        // row
        i = aindex[k]; // push index

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) {
          xa[i] = avalues[k];
        }
      } // loop values B(:,j)


      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
        // row
        i = bindex[k]; // check row existed in A

        if (wa[i] !== mark) {
          // push index
          cindex.push(i);
        } // update workspace


        wb[i] = mark; // check we need to process values

        if (xb) {
          xb[i] = bvalues[k];
        }
      } // check we need to process values (non pattern matrix)


      if (cvalues) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // marks

          var wai = wa[i];
          var wbi = wb[i]; // check Aij or Bij are nonzero

          if (wai === mark || wbi === mark) {
            // matrix values @ i,j
            var va = wai === mark ? xa[i] : zero;
            var vb = wbi === mark ? xb[i] : zero; // Cij

            var vc = cf(va, vb); // check for zero

            if (!eq(vc, zero)) {
              // push value
              cvalues.push(vc); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm12.js

var algorithm12_name = 'algorithm12';
var algorithm12_dependencies = ['typed', 'DenseMatrix'];
var createAlgorithm12 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm12_name, algorithm12_dependencies, function (_ref) {
  var typed = _ref.typed,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked MxN times.
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(0, b)    ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm12(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cdata = []; // matrix

    var c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows


      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j


        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
        }
      }
    } // return sparse matrix


    return c;
  };
});
// CONCATENATED MODULE: ./src/function/arithmetic/mod.js









var mod_name = 'mod';
var mod_dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createMod =
/* #__PURE__ */
Object(factory["a" /* factory */])(mod_name, mod_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm05 = createAlgorithm05({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculates the modulus, the remainder of an integer division.
   *
   * For matrices, the function is evaluated element wise.
   *
   * The modulus is defined as:
   *
   *     x - y * floor(x / y)
   *
   * See https://en.wikipedia.org/wiki/Modulo_operation.
   *
   * Syntax:
   *
   *    math.mod(x, y)
   *
   * Examples:
   *
   *    math.mod(8, 3)                // returns 2
   *    math.mod(11, 2)               // returns 1
   *
   *    function isOdd(x) {
   *      return math.mod(x, 2) != 0
   *    }
   *
   *    isOdd(2)                      // returns false
   *    isOdd(3)                      // returns true
   *
   * See also:
   *
   *    divide
   *
   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
   */

  var mod = typed(mod_name, {
    'number, number': modNumber,
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return y.isZero() ? x : x.mod(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.mod(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, mod, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, mod, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, mod, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, mod);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return mod(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return mod(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return mod(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, mod, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, mod, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, mod, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, mod, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, mod, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, mod, true).valueOf();
    }
  });
  return mod;
});
// CONCATENATED MODULE: ./src/function/arithmetic/multiplyScalar.js


var multiplyScalar_name = 'multiplyScalar';
var multiplyScalar_dependencies = ['typed'];
var createMultiplyScalar =
/* #__PURE__ */
Object(factory["a" /* factory */])(multiplyScalar_name, multiplyScalar_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Multiply two scalar values, `x * y`.
   * This function is meant for internal use: it is used by the public function
   * `multiply`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
   * @private
   */
  var multiplyScalar = typed('multiplyScalar', {
    'number, number': multiplyNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.mul(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.times(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.mul(y);
    },
    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
      var res = y.clone();
      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);
      return res;
    },
    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
      var res = x.clone();
      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);
      return res;
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return x.multiply(y);
    }
  });
  return multiplyScalar;
});
// CONCATENATED MODULE: ./src/function/arithmetic/multiply.js






var multiply_name = 'multiply';
var multiply_dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar'];
var createMultiply =
/* #__PURE__ */
Object(factory["a" /* factory */])(multiply_name, multiply_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      addScalar = _ref.addScalar,
      multiplyScalar = _ref.multiplyScalar,
      equalScalar = _ref.equalScalar;
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Multiply two or more values, `x * y`.
   * For matrices, the matrix product is calculated.
   *
   * Syntax:
   *
   *    math.multiply(x, y)
   *    math.multiply(x, y, z, ...)
   *
   * Examples:
   *
   *    math.multiply(4, 5.2)        // returns number 20.8
   *    math.multiply(2, 3, 4)       // returns number 24
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.multiply(a, b)          // returns Complex 5 + 14i
   *
   *    const c = [[1, 2], [4, 3]]
   *    const d = [[1, 2, 3], [3, -4, 7]]
   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
   *
   *    const e = math.unit('2.1 km')
   *    math.multiply(3, e)          // returns Unit 6.3 km
   *
   * See also:
   *
   *    divide, prod, cross, dot
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
   */

  var multiply = typed(multiply_name, Object(utils_object["e" /* extend */])({
    // we extend the signatures of multiplyScalar with signatures dealing with matrices
    'Array, Array': function ArrayArray(x, y) {
      // check dimensions
      _validateMatrixDimensions(Object(utils_array["a" /* arraySize */])(x), Object(utils_array["a" /* arraySize */])(y)); // use dense matrix implementation


      var m = multiply(matrix(x), matrix(y)); // return array or scalar

      return Object(is["v" /* isMatrix */])(m) ? m.valueOf() : m;
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // dimensions
      var xsize = x.size();
      var ysize = y.size(); // check dimensions

      _validateMatrixDimensions(xsize, ysize); // process dimensions


      if (xsize.length === 1) {
        // process y dimensions
        if (ysize.length === 1) {
          // Vector * Vector
          return _multiplyVectorVector(x, y, xsize[0]);
        } // Vector * Matrix


        return _multiplyVectorMatrix(x, y);
      } // process y dimensions


      if (ysize.length === 1) {
        // Matrix * Vector
        return _multiplyMatrixVector(x, y);
      } // Matrix * Matrix


      return _multiplyMatrixMatrix(x, y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use Matrix * Matrix implementation
      return multiply(x, matrix(y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use Matrix * Matrix implementation
      return multiply(matrix(x, y.storage()), y);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, multiplyScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, multiplyScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, multiplyScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, multiplyScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    },
    'any, any': multiplyScalar,
    'any, any, ...any': function anyAnyAny(x, y, rest) {
      var result = multiply(x, y);

      for (var i = 0; i < rest.length; i++) {
        result = multiply(result, rest[i]);
      }

      return result;
    }
  }, multiplyScalar.signatures));

  function _validateMatrixDimensions(size1, size2) {
    // check left operand dimensions
    switch (size1.length) {
      case 1:
        // check size2
        switch (size2.length) {
          case 1:
            // Vector x Vector
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
            }

            break;

          case 2:
            // Vector x Matrix
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }

        break;

      case 2:
        // check size2
        switch (size2.length) {
          case 1:
            // Matrix x Vector
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
            }

            break;

          case 2:
            // Matrix x Matrix
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }

        break;

      default:
        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
    }
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (N)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {number}             Scalar value
   */


  function _multiplyVectorVector(a, b, n) {
    // check empty vector
    if (n === 0) {
      throw new Error('Cannot multiply two empty vectors');
    } // a dense


    var adata = a._data;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bdt = b._datatype; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result (do not initialize it with zero)


    var c = mf(adata[0], bdata[0]); // loop data

    for (var i = 1; i < n; i++) {
      // multiply and accumulate
      c = af(c, mf(adata[i], bdata[i]));
    }

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Matrix         (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */


  function _multiplyVectorMatrix(a, b) {
    // process storage
    if (b.storage() !== 'dense') {
      throw new Error('Support for SparseMatrix not implemented');
    }

    return _multiplyVectorDenseMatrix(a, b);
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Dense Matrix   (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */


  function _multiplyVectorDenseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // rows & columns

    var alength = asize[0];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix columns

    for (var j = 0; j < bcolumns; j++) {
      // sum (do not initialize it with zero)
      var sum = mf(adata[0], bdata[0][j]); // loop vector

      for (var i = 1; i < alength; i++) {
        // multiply & accumulate
        sum = af(sum, mf(adata[i], bdata[i][j]));
      }

      c[j] = sum;
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [bcolumns],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {Matrix}             Dense Vector   (M)
   */


  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
    'DenseMatrix, any': _multiplyDenseMatrixVector,
    'SparseMatrix, any': _multiplySparseMatrixVector
  });
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Matrix         (NxC)
   *
   * @return {Matrix}             Matrix         (MxC)
   */


  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
  });
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix  (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             Dense Vector (M)
   */


  function _multiplyDenseMatrixVector(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = asize[0];
    var acolumns = asize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix a rows

    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i]; // sum (do not initialize it with zero)

      var sum = mf(row[0], bdata[0]); // loop matrix a columns

      for (var j = 1; j < acolumns; j++) {
        // multiply & accumulate
        sum = af(sum, mf(row[j], bdata[j]));
      }

      c[i] = sum;
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [arows],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            DenseMatrix    (NxC)
   *
   * @return {Matrix}             DenseMatrix    (MxC)
   */


  function _multiplyDenseMatrixDenseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // rows & columns

    var arows = asize[0];
    var acolumns = asize[1];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix a rows

    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i]; // initialize row array

      c[i] = []; // loop matrix b columns

      for (var j = 0; j < bcolumns; j++) {
        // sum (avoid initializing sum to zero)
        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns

        for (var x = 1; x < acolumns; x++) {
          // multiply & accumulate
          sum = af(sum, mf(row[x], bdata[x][j]));
        }

        c[i][j] = sum;
      }
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [arows, bcolumns],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            SparseMatrix   (NxC)
   *
   * @return {Matrix}             SparseMatrix   (MxC)
   */


  function _multiplyDenseMatrixSparseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b sparse

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate b matrix

    if (!bvalues) {
      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
    } // rows & columns


    var arows = asize[0];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result


    var cvalues = [];
    var cindex = [];
    var cptr = []; // c matrix

    var c = b.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // indeces in column jb

      var kb0 = bptr[jb];
      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists

      if (kb1 > kb0) {
        // last row mark processed
        var last = 0; // loop a rows

        for (var i = 0; i < arows; i++) {
          // column mark
          var mark = i + 1; // C[i, jb]

          var cij = void 0; // values in b column j

          for (var kb = kb0; kb < kb1; kb++) {
            // row
            var ib = bindex[kb]; // check value has been initialized

            if (last !== mark) {
              // first value in column jb
              cij = mf(adata[i][ib], bvalues[kb]); // update mark

              last = mark;
            } else {
              // accumulate value
              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
            }
          } // check column has been processed and value != 0


          if (last === mark && !eq(cij, zero)) {
            // push row & value
            cindex.push(i);
            cvalues.push(cij);
          }
        }
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix    (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             SparseMatrix    (M, 1)
   */


  function _multiplySparseMatrixVector(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // validate a matrix

    if (!avalues) {
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    } // b dense


    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var brows = b._size[0]; // result

    var cvalues = [];
    var cindex = [];
    var cptr = []; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // workspace


    var x = []; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // update ptr

    cptr[0] = 0; // rows in b

    for (var ib = 0; ib < brows; ib++) {
      // b[ib]
      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops

      if (!eq(vbi, zero)) {
        // A values & index in ib column
        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
          // a row
          var ia = aindex[ka]; // check value exists in current j

          if (!w[ia]) {
            // ia is new entry in j
            w[ia] = true; // add i to pattern of C

            cindex.push(ia); // x(ia) = A

            x[ia] = mf(vbi, avalues[ka]);
          } else {
            // i exists in C already
            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
          }
        }
      }
    } // copy values from x to column jb of c


    for (var p1 = cindex.length, p = 0; p < p1; p++) {
      // row
      var ic = cindex[p]; // copy value

      cvalues[p] = x[ic];
    } // update ptr


    cptr[1] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, 1],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            DenseMatrix       (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */


  function _multiplySparseMatrixDenseMatrix(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // validate a matrix

    if (!avalues) {
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    } // b dense


    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var brows = b._size[0];
    var bcolumns = b._size[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result


    var cvalues = [];
    var cindex = [];
    var cptr = []; // c matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    var x = []; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      var mark = jb + 1; // rows in jb

      for (var ib = 0; ib < brows; ib++) {
        // b[ib, jb]
        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops

        if (!eq(vbij, zero)) {
          // A values & index in ib column
          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // a row
            var ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(vbij, avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
            }
          }
        }
      } // copy values from x to column jb of c


      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
        // row
        var ic = cindex[p]; // copy value

        cvalues[p] = x[ic];
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            SparseMatrix      (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */


  function _multiplySparseMatrixSparseMatrix(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // b sparse

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data

    var values = avalues && bvalues; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = []; // c matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // variables

    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      var mark = jb + 1; // B values & index in j

      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
        // b row
        ib = bindex[kb]; // check we need to process values

        if (values) {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(bvalues[kb], avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
            }
          }
        } else {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia);
            }
          }
        }
      } // check we need to process matrix values (pattern matrix)


      if (values) {
        // copy values from x to column jb of c
        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
          // row
          var ic = cindex[p]; // copy value

          cvalues[p] = x[ic];
        }
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }

  return multiply;
});
// CONCATENATED MODULE: ./src/function/arithmetic/nthRoot.js








var nthRoot_name = 'nthRoot';
var nthRoot_dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];
var createNthRoot =
/* #__PURE__ */
Object(factory["a" /* factory */])(nthRoot_name, nthRoot_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      _BigNumber = _ref.BigNumber;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = createAlgorithm06({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculate the nth root of a value.
   * The principal nth root of a positive real number A, is the positive real
   * solution of the equation
   *
   *     x^root = A
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *     math.nthRoot(a)
   *     math.nthRoot(a, root)
   *
   * Examples:
   *
   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9
   *     math.sqrt(9)          // returns 3, as 3^2 == 9
   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param {number | BigNumber | Array | Matrix | Complex} a
   *              Value for which to calculate the nth root
   * @param {number | BigNumber} [root=2]    The root.
   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
   */

  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';
  var nthRoot = typed(nthRoot_name, {
    number: function number(x) {
      return nthRootNumber(x, 2);
    },
    'number, number': nthRootNumber,
    BigNumber: function BigNumber(x) {
      return _bigNthRoot(x, new _BigNumber(2));
    },
    Complex: function Complex(x) {
      throw new Error(complexErr);
    },
    'Complex, number': function ComplexNumber(x, y) {
      throw new Error(complexErr);
    },
    'BigNumber, BigNumber': _bigNthRoot,
    'Array | Matrix': function ArrayMatrix(x) {
      return nthRoot(x, 2);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // sparse + sparse
        return algorithm06(x, y, nthRoot);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, nthRoot, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // dense + sparse
        return algorithm01(x, y, nthRoot, false);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, nthRoot);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return nthRoot(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, nthRoot, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, nthRoot, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // sparse - scalar
        return algorithm11(y, x, nthRoot, true);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, nthRoot, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return nthRoot(x, matrix(y)).valueOf();
    }
  });
  return nthRoot;
  /**
   * Calculate the nth root of a for BigNumbers, solve x^root == a
   * https://rosettacode.org/wiki/Nth_root#JavaScript
   * @param {BigNumber} a
   * @param {BigNumber} root
   * @private
   */

  function _bigNthRoot(a, root) {
    var precision = _BigNumber.precision;

    var Big = _BigNumber.clone({
      precision: precision + 2
    });

    var zero = new _BigNumber(0);
    var one = new Big(1);
    var inv = root.isNegative();

    if (inv) {
      root = root.neg();
    }

    if (root.isZero()) {
      throw new Error('Root must be non-zero');
    }

    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
      throw new Error('Root must be odd when a is negative.');
    } // edge cases zero and infinity


    if (a.isZero()) {
      return inv ? new Big(Infinity) : 0;
    }

    if (!a.isFinite()) {
      return inv ? zero : a;
    }

    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,
    // so (-1) ^ (1/root) = -1

    x = a.isNeg() ? x.neg() : x;
    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));
  }
});
var createNthRootNumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(nthRoot_name, ['typed'], function (_ref2) {
  var typed = _ref2.typed;
  return typed(nthRoot_name, {
    number: nthRootNumber,
    'number, number': nthRootNumber
  });
});
// CONCATENATED MODULE: ./src/function/arithmetic/sign.js



var sign_name = 'sign';
var sign_dependencies = ['typed', 'BigNumber', 'Fraction'];
var createSign =
/* #__PURE__ */
Object(factory["a" /* factory */])(sign_name, sign_dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber,
      _Fraction = _ref.Fraction;

  /**
   * Compute the sign of a value. The sign of a value x is:
   *
   * -  1 when x > 0
   * - -1 when x < 0
   * -  0 when x == 0
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sign(x)
   *
   * Examples:
   *
   *    math.sign(3.5)               // returns 1
   *    math.sign(-4.2)              // returns -1
   *    math.sign(0)                 // returns 0
   *
   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
   *
   * See also:
   *
   *    abs
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            The number for which to determine the sign
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
   *            The sign of `x`
   */
  var sign = typed(sign_name, {
    number: signNumber,
    Complex: function Complex(x) {
      return x.sign();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(x.cmp(0));
    },
    Fraction: function Fraction(x) {
      return new _Fraction(x.s, 1);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sign(0) = 0
      return deepMap(x, sign, true);
    },
    Unit: function Unit(x) {
      return sign(x.value);
    }
  });
  return sign;
});
// CONCATENATED MODULE: ./src/function/arithmetic/sqrt.js


var sqrt_name = 'sqrt';
var sqrt_dependencies = ['config', 'typed', 'Complex'];
var createSqrt =
/* #__PURE__ */
Object(factory["a" /* factory */])(sqrt_name, sqrt_dependencies, function (_ref) {
  var config = _ref.config,
      typed = _ref.typed,
      Complex = _ref.Complex;

  /**
   * Calculate the square root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sqrt(x)
   *
   * Examples:
   *
   *    math.sqrt(25)                // returns 5
   *    math.square(5)               // returns 25
   *    math.sqrt(-4)                // returns Complex 2i
   *
   * See also:
   *
   *    square, multiply, cube, cbrt, sqrtm
   *
   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
   *            Value for which to calculate the square root.
   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
   *            Returns the square root of `x`
   */
  var sqrt = typed('sqrt', {
    number: _sqrtNumber,
    Complex: function Complex(x) {
      return x.sqrt();
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.sqrt();
      } else {
        // negative value -> downgrade to number to do complex value computation
        return _sqrtNumber(x.toNumber());
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sqrt(0) = 0
      return deepMap(x, sqrt, true);
    },
    Unit: function Unit(x) {
      // Someday will work for complex units when they are implemented
      return x.pow(0.5);
    }
  });
  /**
   * Calculate sqrt for a number
   * @param {number} x
   * @returns {number | Complex} Returns the square root of x
   * @private
   */

  function _sqrtNumber(x) {
    if (isNaN(x)) {
      return NaN;
    } else if (x >= 0 || config.predictable) {
      return Math.sqrt(x);
    } else {
      return new Complex(x, 0).sqrt();
    }
  }

  return sqrt;
});
// CONCATENATED MODULE: ./src/function/arithmetic/square.js



var square_name = 'square';
var square_dependencies = ['typed'];
var createSquare =
/* #__PURE__ */
Object(factory["a" /* factory */])(square_name, square_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the square of a value, `x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.square(x)
   *
   * Examples:
   *
   *    math.square(2)           // returns number 4
   *    math.square(3)           // returns number 9
   *    math.pow(3, 2)           // returns number 9
   *    math.multiply(3, 3)      // returns number 9
   *
   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]
   *
   * See also:
   *
   *    multiply, cube, sqrt, pow
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            Number for which to calculate the square
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Squared value
   */
  var square = typed(square_name, {
    number: squareNumber,
    Complex: function Complex(x) {
      return x.mul(x);
    },
    BigNumber: function BigNumber(x) {
      return x.times(x);
    },
    Fraction: function Fraction(x) {
      return x.mul(x);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since square(0) = 0
      return deepMap(x, square, true);
    },
    Unit: function Unit(x) {
      return x.pow(2);
    }
  });
  return square;
});
// CONCATENATED MODULE: ./src/function/arithmetic/subtract.js








var subtract_name = 'subtract';
var subtract_dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];
var createSubtract =
/* #__PURE__ */
Object(factory["a" /* factory */])(subtract_name, subtract_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      addScalar = _ref.addScalar,
      unaryMinus = _ref.unaryMinus,
      DenseMatrix = _ref.DenseMatrix;
  // TODO: split function subtract in two: subtract and subtractScalar
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm05 = createAlgorithm05({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Subtract two values, `x - y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.subtract(x, y)
   *
   * Examples:
   *
   *    math.subtract(5.3, 2)        // returns number 3.3
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.subtract(a, b)          // returns Complex -2 + 2i
   *
   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
   *
   *    const c = math.unit('2.1 km')
   *    const d = math.unit('500m')
   *    math.subtract(c, d)          // returns Unit 1.6 km
   *
   * See also:
   *
   *    add
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
   *            Initial value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
   *            Value to subtract from `x`
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Subtraction of `x` and `y`
   */

  var subtract = typed(subtract_name, {
    'number, number': function numberNumber(x, y) {
      return x - y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.sub(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.minus(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.sub(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (x.value === null) {
        throw new Error('Parameter x contains a unit with undefined value');
      }

      if (y.value === null) {
        throw new Error('Parameter y contains a unit with undefined value');
      }

      if (!x.equalBase(y)) {
        throw new Error('Units do not match');
      }

      var res = x.clone();
      res.value = subtract(res.value, y.value);
      res.fixPrefix = false;
      return res;
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm05(x, y, subtract);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm03(y, x, subtract, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm01(x, y, subtract, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm13(x, y, subtract);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return subtract(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return subtract(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return subtract(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, unaryMinus(y), addScalar);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, subtract);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, subtract, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, subtract, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, subtract, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, subtract, true).valueOf();
    }
  });
  return subtract;
});
/**
 * Check whether matrix x and y have the same number of dimensions.
 * Throws a DimensionError when dimensions are not equal
 * @param {Matrix} x
 * @param {Matrix} y
 */

function checkEqualDimensions(x, y) {
  var xsize = x.size();
  var ysize = y.size();

  if (xsize.length !== ysize.length) {
    throw new DimensionError["a" /* DimensionError */](xsize.length, ysize.length);
  }
}
// CONCATENATED MODULE: ./src/function/arithmetic/xgcd.js


var xgcd_name = 'xgcd';
var xgcd_dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
var createXgcd =
/* #__PURE__ */
Object(factory["a" /* factory */])(xgcd_name, xgcd_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      BigNumber = _ref.BigNumber;

  /**
   * Calculate the extended greatest common divisor for two values.
   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
   *
   * Syntax:
   *
   *    math.xgcd(a, b)
   *
   * Examples:
   *
   *    math.xgcd(8, 12)             // returns [4, -1, 1]
   *    math.gcd(8, 12)              // returns 4
   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]
   *
   * See also:
   *
   *    gcd, lcm
   *
   * @param {number | BigNumber} a  An integer number
   * @param {number | BigNumber} b  An integer number
   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
   */
  return typed(xgcd_name, {
    'number, number': function numberNumber(a, b) {
      var res = xgcdNumber(a, b);
      return config.matrix === 'Array' ? res : matrix(res);
    },
    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction

  });
  /**
   * Calculate xgcd for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @return {BigNumber[]} result
   * @private
   */

  function _xgcdBigNumber(a, b) {
    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    var // used to swap two variables
    t;
    var // quotient
    q;
    var // remainder
    r;
    var zero = new BigNumber(0);
    var one = new BigNumber(1);
    var x = zero;
    var lastx = one;
    var y = one;
    var lasty = zero;

    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function xgcd must be integer numbers');
    }

    while (!b.isZero()) {
      q = a.div(b).floor();
      r = a.mod(b);
      t = x;
      x = lastx.minus(q.times(x));
      lastx = t;
      t = y;
      y = lasty.minus(q.times(y));
      lasty = t;
      a = b;
      b = r;
    }

    var res;

    if (a.lt(zero)) {
      res = [a.neg(), lastx.neg(), lasty.neg()];
    } else {
      res = [a, !a.isZero() ? lastx : 0, lasty];
    }

    return config.matrix === 'Array' ? res : matrix(res);
  }
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm09.js


var algorithm09_name = 'algorithm09';
var algorithm09_dependencies = ['typed', 'equalScalar'];
var createAlgorithm09 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm09_name, algorithm09_dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).
   * Callback function invoked NZA times, number of nonzero elements in A.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm09(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError["a" /* DimensionError */](asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var w = []; // vars

    var i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // column mark

      var mark = j + 1; // check we need to process values

      if (x) {
        // loop B(:,j)
        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = bindex[k]; // update workspace

          w[i] = mark;
          x[i] = bvalues[k];
        }
      } // loop A(:,j)


      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // check we need to process values

        if (x) {
          // b value @ i,j
          var vb = w[i] === mark ? x[i] : zero; // invoke f

          var vc = cf(avalues[k], vb); // check zero value

          if (!eq(vc, zero)) {
            // push index
            cindex.push(i); // push value

            cvalues.push(vc);
          }
        } else {
          // push index
          cindex.push(i);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
// CONCATENATED MODULE: ./src/function/arithmetic/dotMultiply.js






var dotMultiply_name = 'dotMultiply';
var dotMultiply_dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];
var createDotMultiply =
/* #__PURE__ */
Object(factory["a" /* factory */])(dotMultiply_name, dotMultiply_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      multiplyScalar = _ref.multiplyScalar;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm09 = createAlgorithm09({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Multiply two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotMultiply(x, y)
   *
   * Examples:
   *
   *    math.dotMultiply(2, 4) // returns 8
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]
   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]
   *
   * See also:
   *
   *    multiply, divide, dotDivide
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
   */

  var dotMultiply = typed(dotMultiply_name, {
    'any, any': multiplyScalar,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm09(x, y, multiplyScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, multiplyScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, multiplyScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, multiplyScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return dotMultiply(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return dotMultiply(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return dotMultiply(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, multiplyScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, multiplyScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, multiplyScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, multiplyScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    }
  });
  return dotMultiply;
});
// CONCATENATED MODULE: ./src/utils/bignumber/bitwise.js
/**
 * Bitwise and for Bignumbers
 *
 * Special Cases:
 *   N &  n =  N
 *   n &  0 =  0
 *   n & -1 =  n
 *   n &  n =  n
 *   I &  I =  I
 *  -I & -I = -I
 *   I & -I =  0
 *   I &  n =  n
 *   I & -n =  I
 *  -I &  n =  0
 *  -I & -n = -I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` & `y`, is fully precise
 * @private
 */
function bitAndBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitAnd');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.eq(-1) || x.eq(y)) {
    return x;
  }

  if (y.isZero() || x.eq(-1)) {
    return y;
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      if (x.isNegative() === y.isNegative()) {
        return x;
      }

      return new BigNumber(0);
    }

    if (!x.isFinite()) {
      if (y.isNegative()) {
        return x;
      }

      if (x.isNegative()) {
        return new BigNumber(0);
      }

      return y;
    }

    if (!y.isFinite()) {
      if (x.isNegative()) {
        return y;
      }

      if (y.isNegative()) {
        return new BigNumber(0);
      }

      return x;
    }
  }

  return bitwise(x, y, function (a, b) {
    return a & b;
  });
}
/**
 * Bitwise not
 * @param {BigNumber} x
 * @return {BigNumber} Result of ~`x`, fully precise
 *
 */

function bitNotBigNumber(x) {
  if (x.isFinite() && !x.isInteger()) {
    throw new Error('Integer expected in function bitNot');
  }

  var BigNumber = x.constructor;
  var prevPrec = BigNumber.precision;
  BigNumber.config({
    precision: 1E9
  });
  var result = x.plus(new BigNumber(1));
  result.s = -result.s || null;
  BigNumber.config({
    precision: prevPrec
  });
  return result;
}
/**
 * Bitwise OR for BigNumbers
 *
 * Special Cases:
 *   N |  n =  N
 *   n |  0 =  n
 *   n | -1 = -1
 *   n |  n =  n
 *   I |  I =  I
 *  -I | -I = -I
 *   I | -n = -1
 *   I | -I = -1
 *   I |  n =  I
 *  -I |  n = -I
 *  -I | -n = -n
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` | `y`, fully precise
 */

function bitOrBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitOr');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  var negOne = new BigNumber(-1);

  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
    return y;
  }

  if (y.isZero() || x.eq(negOne)) {
    return x;
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
      return negOne;
    }

    if (x.isNegative() && y.isNegative()) {
      return x.isFinite() ? x : y;
    }

    return x.isFinite() ? y : x;
  }

  return bitwise(x, y, function (a, b) {
    return a | b;
  });
}
/**
 * Applies bitwise function to numbers
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @param {function (a, b)} func
 * @return {BigNumber}
 */

function bitwise(x, y, func) {
  var BigNumber = x.constructor;
  var xBits, yBits;
  var xSign = +(x.s < 0);
  var ySign = +(y.s < 0);

  if (xSign) {
    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));

    for (var i = 0; i < xBits.length; ++i) {
      xBits[i] ^= 1;
    }
  } else {
    xBits = decCoefficientToBinaryString(x);
  }

  if (ySign) {
    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));

    for (var _i = 0; _i < yBits.length; ++_i) {
      yBits[_i] ^= 1;
    }
  } else {
    yBits = decCoefficientToBinaryString(y);
  }

  var minBits, maxBits, minSign;

  if (xBits.length <= yBits.length) {
    minBits = xBits;
    maxBits = yBits;
    minSign = xSign;
  } else {
    minBits = yBits;
    maxBits = xBits;
    minSign = ySign;
  }

  var shortLen = minBits.length;
  var longLen = maxBits.length;
  var expFuncVal = func(xSign, ySign) ^ 1;
  var outVal = new BigNumber(expFuncVal ^ 1);
  var twoPower = new BigNumber(1);
  var two = new BigNumber(2);
  var prevPrec = BigNumber.precision;
  BigNumber.config({
    precision: 1E9
  });

  while (shortLen > 0) {
    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {
      outVal = outVal.plus(twoPower);
    }

    twoPower = twoPower.times(two);
  }

  while (longLen > 0) {
    if (func(minSign, maxBits[--longLen]) === expFuncVal) {
      outVal = outVal.plus(twoPower);
    }

    twoPower = twoPower.times(two);
  }

  BigNumber.config({
    precision: prevPrec
  });

  if (expFuncVal === 0) {
    outVal.s = -outVal.s;
  }

  return outVal;
}
/* Extracted from decimal.js, and edited to specialize. */

function decCoefficientToBinaryString(x) {
  // Convert to string
  var a = x.d; // array with digits

  var r = a[0] + '';

  for (var i = 1; i < a.length; ++i) {
    var s = a[i] + '';

    for (var z = 7 - s.length; z--;) {
      s = '0' + s;
    }

    r += s;
  }

  var j = r.length;

  while (r.charAt(j) === '0') {
    j--;
  }

  var xe = x.e;
  var str = r.slice(0, j + 1 || 1);
  var strL = str.length;

  if (xe > 0) {
    if (++xe > strL) {
      // Append zeros.
      xe -= strL;

      while (xe--) {
        str += '0';
      }
    } else if (xe < strL) {
      str = str.slice(0, xe) + '.' + str.slice(xe);
    }
  } // Convert from base 10 (decimal) to base 2


  var arr = [0];

  for (var _i2 = 0; _i2 < str.length;) {
    var arrL = arr.length;

    while (arrL--) {
      arr[arrL] *= 10;
    }

    arr[0] += parseInt(str.charAt(_i2++)); // convert to int

    for (var _j = 0; _j < arr.length; ++_j) {
      if (arr[_j] > 1) {
        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {
          arr[_j + 1] = 0;
        }

        arr[_j + 1] += arr[_j] >> 1;
        arr[_j] &= 1;
      }
    }
  }

  return arr.reverse();
}
/**
 * Bitwise XOR for BigNumbers
 *
 * Special Cases:
 *   N ^  n =  N
 *   n ^  0 =  n
 *   n ^  n =  0
 *   n ^ -1 = ~n
 *   I ^  n =  I
 *   I ^ -n = -I
 *   I ^ -I = -1
 *  -I ^  n = -I
 *  -I ^ -n =  I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` ^ `y`, fully precise
 *
 */


function bitwise_bitXor(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitXor');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  if (x.isZero()) {
    return y;
  }

  if (y.isZero()) {
    return x;
  }

  if (x.eq(y)) {
    return new BigNumber(0);
  }

  var negOne = new BigNumber(-1);

  if (x.eq(negOne)) {
    return bitNotBigNumber(y);
  }

  if (y.eq(negOne)) {
    return bitNotBigNumber(x);
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      return negOne;
    }

    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);
  }

  return bitwise(x, y, function (a, b) {
    return a ^ b;
  });
}
/**
 * Bitwise left shift
 *
 * Special Cases:
 *  n << -n = N
 *  n <<  N = N
 *  N <<  n = N
 *  n <<  0 = n
 *  0 <<  n = 0
 *  I <<  I = N
 *  I <<  n = I
 *  n <<  I = I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` << `y`
 *
 */

function leftShiftBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function leftShift');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.isZero()) {
    return x;
  }

  if (!x.isFinite() && !y.isFinite()) {
    return new BigNumber(NaN);
  } // Math.pow(2, y) is fully precise for y < 55, and fast


  if (y.lt(55)) {
    return x.times(Math.pow(2, y.toNumber()) + '');
  }

  return x.times(new BigNumber(2).pow(y));
}
/*
 * Special Cases:
 *   n >> -n =  N
 *   n >>  N =  N
 *   N >>  n =  N
 *   I >>  I =  N
 *   n >>  0 =  n
 *   I >>  n =  I
 *  -I >>  n = -I
 *  -I >>  I = -I
 *   n >>  I =  I
 *  -n >>  I = -1
 *   0 >>  n =  0
 *
 * @param {BigNumber} value
 * @param {BigNumber} value
 * @return {BigNumber} Result of `x` >> `y`
 *
 */

function rightArithShiftBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function rightArithShift');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.isZero()) {
    return x;
  }

  if (!y.isFinite()) {
    if (x.isNegative()) {
      return new BigNumber(-1);
    }

    if (!x.isFinite()) {
      return new BigNumber(NaN);
    }

    return new BigNumber(0);
  } // Math.pow(2, y) is fully precise for y < 55, and fast


  if (y.lt(55)) {
    return x.div(Math.pow(2, y.toNumber()) + '').floor();
  }

  return x.div(new BigNumber(2).pow(y)).floor();
}
// CONCATENATED MODULE: ./src/plain/number/bitwise.js

var bitwise_n1 = 'number';
var bitwise_n2 = 'number, number';
function bitAndNumber(x, y) {
  if (!Object(utils_number["i" /* isInteger */])(x) || !Object(utils_number["i" /* isInteger */])(y)) {
    throw new Error('Integers expected in function bitAnd');
  }

  return x & y;
}
bitAndNumber.signature = bitwise_n2;
function bitNotNumber(x) {
  if (!Object(utils_number["i" /* isInteger */])(x)) {
    throw new Error('Integer expected in function bitNot');
  }

  return ~x;
}
bitNotNumber.signature = bitwise_n1;
function bitOrNumber(x, y) {
  if (!Object(utils_number["i" /* isInteger */])(x) || !Object(utils_number["i" /* isInteger */])(y)) {
    throw new Error('Integers expected in function bitOr');
  }

  return x | y;
}
bitOrNumber.signature = bitwise_n2;
function bitXorNumber(x, y) {
  if (!Object(utils_number["i" /* isInteger */])(x) || !Object(utils_number["i" /* isInteger */])(y)) {
    throw new Error('Integers expected in function bitXor');
  }

  return x ^ y;
}
bitXorNumber.signature = bitwise_n2;
function leftShiftNumber(x, y) {
  if (!Object(utils_number["i" /* isInteger */])(x) || !Object(utils_number["i" /* isInteger */])(y)) {
    throw new Error('Integers expected in function leftShift');
  }

  return x << y;
}
leftShiftNumber.signature = bitwise_n2;
function rightArithShiftNumber(x, y) {
  if (!Object(utils_number["i" /* isInteger */])(x) || !Object(utils_number["i" /* isInteger */])(y)) {
    throw new Error('Integers expected in function rightArithShift');
  }

  return x >> y;
}
rightArithShiftNumber.signature = bitwise_n2;
function rightLogShiftNumber(x, y) {
  if (!Object(utils_number["i" /* isInteger */])(x) || !Object(utils_number["i" /* isInteger */])(y)) {
    throw new Error('Integers expected in function rightLogShift');
  }

  return x >>> y;
}
rightLogShiftNumber.signature = bitwise_n2;
// CONCATENATED MODULE: ./src/function/bitwise/bitAnd.js








var bitAnd_name = 'bitAnd';
var bitAnd_dependencies = ['typed', 'matrix', 'equalScalar'];
var createBitAnd =
/* #__PURE__ */
Object(factory["a" /* factory */])(bitAnd_name, bitAnd_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = createAlgorithm06({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise AND two values, `x & y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitAnd(x, y)
   *
   * Examples:
   *
   *    math.bitAnd(53, 131)               // returns number 1
   *
   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
   *
   * See also:
   *
   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to and
   * @param  {number | BigNumber | Array | Matrix} y Second value to and
   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
   */

  var bitAnd = typed(bitAnd_name, {
    'number, number': bitAndNumber,
    'BigNumber, BigNumber': bitAndBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, bitAnd, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, bitAnd, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, bitAnd, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, bitAnd);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return bitAnd(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return bitAnd(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return bitAnd(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, bitAnd, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, bitAnd, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, bitAnd, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, bitAnd, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, bitAnd, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, bitAnd, true).valueOf();
    }
  });
  return bitAnd;
});
// CONCATENATED MODULE: ./src/function/bitwise/bitNot.js




var bitNot_name = 'bitNot';
var bitNot_dependencies = ['typed'];
var createBitNot =
/* #__PURE__ */
Object(factory["a" /* factory */])(bitNot_name, bitNot_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Bitwise NOT value, `~x`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.bitNot(x)
   *
   * Examples:
   *
   *    math.bitNot(1)               // returns number -2
   *
   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]
   *
   * See also:
   *
   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to not
   * @return {number | BigNumber | Array | Matrix} NOT of `x`
   */
  var bitNot = typed(bitNot_name, {
    number: bitNotNumber,
    BigNumber: bitNotBigNumber,
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, bitNot);
    }
  });
  return bitNot;
});
// CONCATENATED MODULE: ./src/function/bitwise/bitOr.js








var bitOr_name = 'bitOr';
var bitOr_dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createBitOr =
/* #__PURE__ */
Object(factory["a" /* factory */])(bitOr_name, bitOr_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm04 = createAlgorithm04({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise OR two values, `x | y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the lowest print base.
   *
   * Syntax:
   *
   *    math.bitOr(x, y)
   *
   * Examples:
   *
   *    math.bitOr(1, 2)               // returns number 3
   *
   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to or
   * @param  {number | BigNumber | Array | Matrix} y Second value to or
   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
   */

  var bitOr = typed(bitOr_name, {
    'number, number': bitOrNumber,
    'BigNumber, BigNumber': bitOrBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, bitOr);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, bitOr, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, bitOr, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, bitOr);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return bitOr(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return bitOr(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return bitOr(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, y, bitOr, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, bitOr, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, bitOr, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, bitOr, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, bitOr, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, bitOr, true).valueOf();
    }
  });
  return bitOr;
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm07.js


var algorithm07_name = 'algorithm07';
var algorithm07_dependencies = ['typed', 'DenseMatrix'];
var createAlgorithm07 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm07_name, algorithm07_dependencies, function (_ref) {
  var typed = _ref.typed,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
   * Callback function invoked MxN times.
   *
   * C(i,j) = f(Aij, Bij)
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm07(a, b, callback) {
    // sparse matrix arrays
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError["a" /* DimensionError */](asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // vars


    var i, j; // result arrays

    var cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // matrix


    var c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var xa = [];
    var xb = []; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // loop columns

    for (j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // scatter the values of A(:,j) into workspace

      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace


      _scatter(b, j, wb, xb, mark); // loop rows


      for (i = 0; i < rows; i++) {
        // matrix values @ i,j
        var va = wa[i] === mark ? xa[i] : zero;
        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback

        cdata[i][j] = cf(va, vb);
      }
    } // return sparse matrix


    return c;
  };

  function _scatter(m, j, w, x, mark) {
    // a arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop values in column j

    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
      // row
      var i = index[k]; // update workspace

      w[i] = mark;
      x[i] = values[k];
    }
  }
});
// CONCATENATED MODULE: ./src/function/bitwise/bitXor.js








var bitXor_name = 'bitXor';
var bitXor_dependencies = ['typed', 'matrix', 'DenseMatrix'];
var createBitXor =
/* #__PURE__ */
Object(factory["a" /* factory */])(bitXor_name, bitXor_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise XOR two values, `x ^ y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitXor(x, y)
   *
   * Examples:
   *
   *    math.bitXor(1, 2)               // returns number 3
   *
   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to xor
   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
   */

  var bitXor = typed(bitXor_name, {
    'number, number': bitXorNumber,
    'BigNumber, BigNumber': bitwise_bitXor,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, bitXor);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, bitXor, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, bitXor, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, bitXor);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return bitXor(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return bitXor(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return bitXor(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, bitXor, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, bitXor, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, bitXor, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, bitXor, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, bitXor, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, bitXor, true).valueOf();
    }
  });
  return bitXor;
});
// CONCATENATED MODULE: ./src/function/complex/arg.js


var arg_name = 'arg';
var arg_dependencies = ['typed'];
var createArg =
/* #__PURE__ */
Object(factory["a" /* factory */])(arg_name, arg_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the argument of a complex value.
   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.arg(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 2)
   *    math.arg(a) / math.pi          // returns number 0.25
   *
   *    const b = math.complex('2 + 3i')
   *    math.arg(b)                    // returns number 0.982793723247329
   *    math.atan2(3, 2)               // returns number 0.982793723247329
   *
   * See also:
   *
   *    re, im, conj, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The argument of x
   */
  var arg = typed(arg_name, {
    number: function number(x) {
      return Math.atan2(0, x);
    },
    BigNumber: function BigNumber(x) {
      return x.constructor.atan2(0, x);
    },
    Complex: function Complex(x) {
      return x.arg();
    },
    // TODO: implement BigNumber support for function arg
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, arg);
    }
  });
  return arg;
});
// CONCATENATED MODULE: ./src/function/complex/conj.js


var conj_name = 'conj';
var conj_dependencies = ['typed'];
var createConj =
/* #__PURE__ */
Object(factory["a" /* factory */])(conj_name, conj_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the complex conjugate of a complex value.
   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.conj(x)
   *
   * Examples:
   *
   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
   *
   * See also:
   *
   *    re, im, arg, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            The complex conjugate of x
   */
  var conj = typed(conj_name, {
    number: function number(x) {
      return x;
    },
    BigNumber: function BigNumber(x) {
      return x;
    },
    Complex: function Complex(x) {
      return x.conjugate();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, conj);
    }
  });
  return conj;
});
// CONCATENATED MODULE: ./src/function/complex/im.js


var im_name = 'im';
var im_dependencies = ['typed'];
var createIm =
/* #__PURE__ */
Object(factory["a" /* factory */])(im_name, im_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Get the imaginary part of a complex number.
   * For a complex number `a + bi`, the function returns `b`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.im(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number -5.2
   *    math.re(math.complex(2.4))     // returns number 0
   *
   * See also:
   *
   *    re, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
   */
  var im = typed(im_name, {
    number: function number(x) {
      return 0;
    },
    BigNumber: function BigNumber(x) {
      return x.mul(0);
    },
    Complex: function Complex(x) {
      return x.im;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, im);
    }
  });
  return im;
});
// CONCATENATED MODULE: ./src/function/complex/re.js


var re_name = 're';
var re_dependencies = ['typed'];
var createRe =
/* #__PURE__ */
Object(factory["a" /* factory */])(re_name, re_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Get the real part of a complex number.
   * For a complex number `a + bi`, the function returns `a`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.re(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number 0
   *    math.re(math.complex(2.4))     // returns number 2.4
   *
   * See also:
   *
   *    im, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The real part of x
   */
  var re = typed(re_name, {
    number: function number(x) {
      return x;
    },
    BigNumber: function BigNumber(x) {
      return x;
    },
    Complex: function Complex(x) {
      return x.re;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, re);
    }
  });
  return re;
});
// CONCATENATED MODULE: ./src/plain/number/logical.js
var logical_n1 = 'number';
var logical_n2 = 'number, number';
function notNumber(x) {
  return !x;
}
notNumber.signature = logical_n1;
function orNumber(x, y) {
  return !!(x || y);
}
orNumber.signature = logical_n2;
function xorNumber(x, y) {
  return !!x !== !!y;
}
xorNumber.signature = logical_n2;
function andNumber(x, y) {
  return !!(x && y);
}
andNumber.signature = logical_n2;
// CONCATENATED MODULE: ./src/function/logical/not.js



var not_name = 'not';
var not_dependencies = ['typed'];
var createNot =
/* #__PURE__ */
Object(factory["a" /* factory */])(not_name, not_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Logical `not`. Flips boolean value of a given parameter.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.not(x)
   *
   * Examples:
   *
   *    math.not(2)      // returns false
   *    math.not(0)      // returns true
   *    math.not(true)   // returns false
   *
   *    a = [2, -7, 0]
   *    math.not(a)      // returns [false, false, true]
   *
   * See also:
   *
   *    and, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when input is a zero or empty value.
   */
  var not = typed(not_name, {
    number: notNumber,
    Complex: function Complex(x) {
      return x.re === 0 && x.im === 0;
    },
    BigNumber: function BigNumber(x) {
      return x.isZero() || x.isNaN();
    },
    Unit: function Unit(x) {
      return x.value !== null ? not(x.value) : true;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, not);
    }
  });
  return not;
});
// CONCATENATED MODULE: ./src/function/logical/or.js







var or_name = 'or';
var or_dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createOr =
/* #__PURE__ */
Object(factory["a" /* factory */])(or_name, or_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm05 = createAlgorithm05({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.or(x, y)
   *
   * Examples:
   *
   *    math.or(2, 4)   // returns true
   *
   *    a = [2, 5, 0]
   *    b = [0, 22, 0]
   *    c = 0
   *
   *    math.or(a, b)   // returns [true, true, false]
   *    math.or(b, c)   // returns [false, true, false]
   *
   * See also:
   *
   *    and, not, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
   */

  var or = typed(or_name, {
    'number, number': orNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return or(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, or);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, or, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, or, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, or);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return or(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return or(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return or(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, or, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, or, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, or, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, or, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, or, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, or, true).valueOf();
    }
  });
  return or;
});
// CONCATENATED MODULE: ./src/function/logical/xor.js







var xor_name = 'xor';
var xor_dependencies = ['typed', 'matrix', 'DenseMatrix'];
var createXor =
/* #__PURE__ */
Object(factory["a" /* factory */])(xor_name, xor_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.xor(x, y)
   *
   * Examples:
   *
   *    math.xor(2, 4)   // returns false
   *
   *    a = [2, 0, 0]
   *    b = [2, 7, 0]
   *    c = 0
   *
   *    math.xor(a, b)   // returns [false, true, false]
   *    math.xor(a, c)   // returns [true, false, false]
   *
   * See also:
   *
   *    and, not, or
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
   */

  var xor = typed(xor_name, {
    'number, number': xorNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return xor(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, xor);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, xor, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, xor, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, xor);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return xor(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return xor(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return xor(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, xor, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, xor, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, xor, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, xor, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, xor, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, xor, true).valueOf();
    }
  });
  return xor;
});
// CONCATENATED MODULE: ./src/function/matrix/concat.js






var concat_name = 'concat';
var concat_dependencies = ['typed', 'matrix', 'isInteger'];
var createConcat =
/* #__PURE__ */
Object(factory["a" /* factory */])(concat_name, concat_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      isInteger = _ref.isInteger;

  /**
   * Concatenate two or more matrices.
   *
   * Syntax:
   *
   *     math.concat(A, B, C, ...)
   *     math.concat(A, B, C, ..., dim)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *   By default the last dimension of the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [5, 6]]
   *    const B = [[3, 4], [7, 8]]
   *
   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
   *    math.concat('hello', ' ', 'world') // returns 'hello world'
   *
   * See also:
   *
   *    size, squeeze, subset, transpose
   *
   * @param {... Array | Matrix} args     Two or more matrices
   * @return {Array | Matrix} Concatenated matrix
   */
  return typed(concat_name, {
    // TODO: change signature to '...Array | Matrix, dim?' when supported
    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
      var i;
      var len = args.length;
      var dim = -1; // zero-based dimension

      var prevDim;
      var asMatrix = false;
      var matrices = []; // contains multi dimensional arrays

      for (i = 0; i < len; i++) {
        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)

        if (Object(is["v" /* isMatrix */])(arg)) {
          asMatrix = true;
        }

        if (Object(is["y" /* isNumber */])(arg) || Object(is["e" /* isBigNumber */])(arg)) {
          if (i !== len - 1) {
            throw new Error('Dimension must be specified as last argument');
          } // last argument contains the dimension on which to concatenate


          prevDim = dim;
          dim = arg.valueOf(); // change BigNumber to number

          if (!isInteger(dim)) {
            throw new TypeError('Integer number expected for dimension');
          }

          if (dim < 0 || i > 0 && dim > prevDim) {
            // TODO: would be more clear when throwing a DimensionError here
            throw new IndexError["a" /* IndexError */](dim, prevDim + 1);
          }
        } else {
          // this is a matrix or array
          var m = Object(utils_object["a" /* clone */])(arg).valueOf();
          var size = Object(utils_array["a" /* arraySize */])(m);
          matrices[i] = m;
          prevDim = dim;
          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions

          if (i > 0 && dim !== prevDim) {
            throw new DimensionError["a" /* DimensionError */](prevDim + 1, dim + 1);
          }
        }
      }

      if (matrices.length === 0) {
        throw new SyntaxError('At least one matrix expected');
      }

      var res = matrices.shift();

      while (matrices.length) {
        res = _concat(res, matrices.shift(), dim, 0);
      }

      return asMatrix ? matrix(res) : res;
    },
    '...string': function string(args) {
      return args.join('');
    }
  });
});
/**
 * Recursively concatenate two matrices.
 * The contents of the matrices is not cloned.
 * @param {Array} a             Multi dimensional array
 * @param {Array} b             Multi dimensional array
 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
 * @param {number} dim          The current dim (zero-based)
 * @return {Array} c            The concatenated matrix
 * @private
 */

function _concat(a, b, concatDim, dim) {
  if (dim < concatDim) {
    // recurse into next dimension
    if (a.length !== b.length) {
      throw new DimensionError["a" /* DimensionError */](a.length, b.length);
    }

    var c = [];

    for (var i = 0; i < a.length; i++) {
      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
    }

    return c;
  } else {
    // concatenate this dimension
    return a.concat(b);
  }
}
// CONCATENATED MODULE: ./src/function/matrix/column.js



var column_name = 'column';
var column_dependencies = ['typed', 'Index', 'matrix', 'range'];
var createColumn =
/* #__PURE__ */
Object(factory["a" /* factory */])(column_name, column_dependencies, function (_ref) {
  var typed = _ref.typed,
      Index = _ref.Index,
      matrix = _ref.matrix,
      range = _ref.range;

  /**
   * Return a column from a Matrix.
   *
   * Syntax:
   *
   *     math.column(value, index)
   *
   * Example:
   *
   *     // get a column
   *     const d = [[1, 2], [3, 4]]
   *     math.column(d, 1) // returns [2, 4]
   *
   * See also:
   *
   *     row
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} column           The index of the column
   * @return {Array | Matrix}         The retrieved column
   */
  var column = typed(column_name, {
    'Matrix, number': _column,
    'Array, number': function ArrayNumber(value, column) {
      return _column(matrix(Object(utils_object["a" /* clone */])(value)), column).valueOf();
    }
  });
  return column;
  /**
   * Retrieve a column of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} column  The index of the column
   * @return {Matrix}        The retrieved column
   */

  function _column(value, column) {
    // check dimensions
    if (value.size().length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }

    Object(utils_array["s" /* validateIndex */])(column, value.size()[1]);
    var rowRange = range(0, value.size()[0]);
    var index = new Index(rowRange, column);
    return value.subset(index);
  }
});
// CONCATENATED MODULE: ./src/function/matrix/cross.js


var cross_name = 'cross';
var cross_dependencies = ['typed', 'matrix', 'subtract', 'multiply'];
var createCross =
/* #__PURE__ */
Object(factory["a" /* factory */])(cross_name, cross_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      subtract = _ref.subtract,
      multiply = _ref.multiply;

  /**
   * Calculate the cross product for two vectors in three dimensional space.
   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
   * as:
   *
   *    cross(A, B) = [
   *      a2 * b3 - a3 * b2,
   *      a3 * b1 - a1 * b3,
   *      a1 * b2 - a2 * b1
   *    ]
   *
   * If one of the input vectors has a dimension greater than 1, the output
   * vector will be a 1x3 (2-dimensional) matrix.
   *
   * Syntax:
   *
   *    math.cross(x, y)
   *
   * Examples:
   *
   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
   *
   * See also:
   *
   *    dot, multiply
   *
   * @param  {Array | Matrix} x   First vector
   * @param  {Array | Matrix} y   Second vector
   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
   */
  return typed(cross_name, {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return matrix(_cross(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return matrix(_cross(x.toArray(), y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return matrix(_cross(x, y.toArray()));
    },
    'Array, Array': _cross
  });
  /**
   * Calculate the cross product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {Array} Returns the cross product of x and y
   * @private
   */

  function _cross(x, y) {
    var highestDimension = Math.max(Object(utils_array["a" /* arraySize */])(x).length, Object(utils_array["a" /* arraySize */])(y).length);
    x = Object(utils_array["p" /* squeeze */])(x);
    y = Object(utils_array["p" /* squeeze */])(y);
    var xSize = Object(utils_array["a" /* arraySize */])(x);
    var ySize = Object(utils_array["a" /* arraySize */])(y);

    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
    }

    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];

    if (highestDimension > 1) {
      return [product];
    } else {
      return product;
    }
  }
});
// CONCATENATED MODULE: ./src/function/matrix/diag.js




var diag_name = 'diag';
var diag_dependencies = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];
var createDiag =
/* #__PURE__ */
Object(factory["a" /* factory */])(diag_name, diag_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a diagonal matrix or retrieve the diagonal of a matrix
   *
   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
   * When k is positive, the values are placed on the super diagonal.
   * When k is negative, the values are placed on the sub diagonal.
   *
   * Syntax:
   *
   *     math.diag(X)
   *     math.diag(X, format)
   *     math.diag(X, k)
   *     math.diag(X, k, format)
   *
   * Examples:
   *
   *     // create a diagonal matrix
   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *
   *    // retrieve the diagonal from a matrix
   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
   *    math.diag(a)   // returns [1, 5, 9]
   *
   * See also:
   *
   *     ones, zeros, identity
   *
   * @param {Matrix | Array} x          A two dimensional matrix or a vector
   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
   *                                    in or retrieved.
   * @param {string} [format='dense']   The matrix storage format.
   *
   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
   */
  return typed(diag_name, {
    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
    Array: function Array(x) {
      return _diag(x, 0, Object(utils_array["a" /* arraySize */])(x), null);
    },
    'Array, number': function ArrayNumber(x, k) {
      return _diag(x, k, Object(utils_array["a" /* arraySize */])(x), null);
    },
    'Array, BigNumber': function ArrayBigNumber(x, k) {
      return _diag(x, k.toNumber(), Object(utils_array["a" /* arraySize */])(x), null);
    },
    'Array, string': function ArrayString(x, format) {
      return _diag(x, 0, Object(utils_array["a" /* arraySize */])(x), format);
    },
    'Array, number, string': function ArrayNumberString(x, k, format) {
      return _diag(x, k, Object(utils_array["a" /* arraySize */])(x), format);
    },
    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
      return _diag(x, k.toNumber(), Object(utils_array["a" /* arraySize */])(x), format);
    },
    Matrix: function Matrix(x) {
      return _diag(x, 0, x.size(), x.storage());
    },
    'Matrix, number': function MatrixNumber(x, k) {
      return _diag(x, k, x.size(), x.storage());
    },
    'Matrix, BigNumber': function MatrixBigNumber(x, k) {
      return _diag(x, k.toNumber(), x.size(), x.storage());
    },
    'Matrix, string': function MatrixString(x, format) {
      return _diag(x, 0, x.size(), format);
    },
    'Matrix, number, string': function MatrixNumberString(x, k, format) {
      return _diag(x, k, x.size(), format);
    },
    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
      return _diag(x, k.toNumber(), x.size(), format);
    }
  });
  /**
   * Creeate diagonal matrix from a vector or vice versa
   * @param {Array | Matrix} x
   * @param {number} k
   * @param {string} format Storage format for matrix. If null,
   *                          an Array is returned
   * @returns {Array | Matrix}
   * @private
   */

  function _diag(x, k, size, format) {
    if (!Object(utils_number["i" /* isInteger */])(k)) {
      throw new TypeError('Second parameter in function diag must be an integer');
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // check dimensions

    switch (size.length) {
      case 1:
        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);

      case 2:
        return _getDiagonal(x, k, format, size, kSub, kSuper);
    }

    throw new RangeError('Matrix for function diag must be 2 dimensional');
  }

  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
    // matrix size
    var ms = [l + kSub, l + kSuper];

    if (format && format !== 'sparse' && format !== 'dense') {
      throw new TypeError("Unknown matrix type ".concat(format, "\""));
    } // create diagonal matrix


    var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k); // check we need to return a matrix

    return format !== null ? m : m.valueOf();
  }

  function _getDiagonal(x, k, format, s, kSub, kSuper) {
    // check x is a Matrix
    if (Object(is["v" /* isMatrix */])(x)) {
      // get diagonal matrix
      var dm = x.diagonal(k); // check we need to return a matrix

      if (format !== null) {
        // check we need to change matrix format
        if (format !== dm.storage()) {
          return matrix(dm, format);
        }

        return dm;
      }

      return dm.valueOf();
    } // vector size


    var n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values

    var vector = []; // loop diagonal

    for (var i = 0; i < n; i++) {
      vector[i] = x[i + kSub][i + kSuper];
    } // check we need to return a matrix


    return format !== null ? matrix(vector) : vector;
  }
});
// CONCATENATED MODULE: ./src/function/matrix/eye.js
// TODO: function eye is removed since v5.0.0 (June 2018). Remove it some day.

var createEye =
/* #__PURE__ */
Object(factory["a" /* factory */])('eye', [], function () {
  return function eye() {
    throw new Error('Function "eye" is renamed to "identity" since mathjs version 5.0.0. ' + 'To keep eye working, create an alias for it using "math.import({eye: math.identity}, {override: true})"');
  };
});
// CONCATENATED MODULE: ./src/utils/function.js
function function_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { function_typeof = function _typeof(obj) { return typeof obj; }; } else { function_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return function_typeof(obj); }

// function utils

/**
 * Memoize a given function by caching the computed result.
 * The cache of a memoized function can be cleared by deleting the `cache`
 * property of the function.
 *
 * @param {function} fn                     The function to be memoized.
 *                                          Must be a pure function.
 * @param {function(args: Array)} [hasher]  A custom hash builder.
 *                                          Is JSON.stringify by default.
 * @return {function}                       Returns the memoized function
 */
function memoize(fn, hasher) {
  return function memoize() {
    if (function_typeof(memoize.cache) !== 'object') {
      memoize.cache = {};
    }

    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    var hash = hasher ? hasher(args) : JSON.stringify(args);

    if (!(hash in memoize.cache)) {
      memoize.cache[hash] = fn.apply(fn, args);
    }

    return memoize.cache[hash];
  };
}
/**
 * Memoize a given function by caching all results and the arguments,
 * and comparing against the arguments of previous results before
 * executing again.
 * This is less performant than `memoize` which calculates a hash,
 * which is very fast to compare. Use `memoizeCompare` only when it is
 * not possible to create a unique serializable hash from the function
 * arguments.
 * The isEqual function must compare two sets of arguments
 * and return true when equal (can be a deep equality check for example).
 * @param {function} fn
 * @param {function(a: *, b: *) : boolean} isEqual
 * @returns {function}
 */

function memoizeCompare(fn, isEqual) {
  var memoize = function memoize() {
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    for (var c = 0; c < memoize.cache.length; c++) {
      var cached = memoize.cache[c];

      if (isEqual(args, cached.args)) {
        // TODO: move this cache entry to the top so recently used entries move up?
        return cached.res;
      }
    }

    var res = fn.apply(fn, args);
    memoize.cache.unshift({
      args: args,
      res: res
    });
    return res;
  };

  memoize.cache = [];
  return memoize;
}
/**
 * Find the maximum number of arguments expected by a typed function.
 * @param {function} fn   A typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */

function maxArgumentCount(fn) {
  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
    var count = (signature.match(/,/g) || []).length + 1;
    return Math.max(args, count);
  }, -1);
}
// CONCATENATED MODULE: ./src/function/matrix/filter.js



var filter_name = 'filter';
var filter_dependencies = ['typed'];
var createFilter =
/* #__PURE__ */
Object(factory["a" /* factory */])(filter_name, filter_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Filter the items in an array or one dimensional matrix.
   *
   * Syntax:
   *
   *    math.filter(x, test)
   *
   * Examples:
   *
   *    function isPositive (x) {
   *      return x > 0
   *    }
   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]
   *
   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/) // returns ["23", "100", "55"]
   *
   * See also:
   *
   *    forEach, map, sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
   * @param {Function | RegExp} test
   *        A function or regular expression to test items.
   *        All entries for which `test` returns true are returned.
   *        When `test` is a function, it is invoked with three parameters:
   *        the value of the element, the index of the element, and the
   *        matrix/array being traversed. The function must return a boolean.
   * @return {Matrix | Array} Returns the filtered matrix.
   */
  return typed('filter', {
    'Array, function': _filterCallback,
    'Matrix, function': function MatrixFunction(x, test) {
      return x.create(_filterCallback(x.toArray(), test));
    },
    'Array, RegExp': utils_array["d" /* filterRegExp */],
    'Matrix, RegExp': function MatrixRegExp(x, test) {
      return x.create(Object(utils_array["d" /* filterRegExp */])(x.toArray(), test));
    }
  });
});
/**
 * Filter values in a callback given a callback function
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */

function _filterCallback(x, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);
  return Object(utils_array["c" /* filter */])(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index]);
    } else {
      // 3 or -1
      return callback(value, [index], array);
    }
  });
}
// CONCATENATED MODULE: ./src/function/matrix/flatten.js



var flatten_name = 'flatten';
var flatten_dependencies = ['typed', 'matrix'];
var createFlatten =
/* #__PURE__ */
Object(factory["a" /* factory */])(flatten_name, flatten_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;

  /**
   * Flatten a multi dimensional matrix into a single dimensional matrix.
   *
   * Syntax:
   *
   *    math.flatten(x)
   *
   * Examples:
   *
   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
   *
   * See also:
   *
   *    concat, resize, size, squeeze
   *
   * @param {Matrix | Array} x   Matrix to be flattened
   * @return {Matrix | Array} Returns the flattened matrix
   */
  return typed(flatten_name, {
    Array: function Array(x) {
      return Object(utils_array["e" /* flatten */])(Object(utils_object["a" /* clone */])(x));
    },
    Matrix: function Matrix(x) {
      var flat = Object(utils_array["e" /* flatten */])(Object(utils_object["a" /* clone */])(x.toArray())); // TODO: return the same matrix type as x

      return matrix(flat);
    }
  });
});
// CONCATENATED MODULE: ./src/function/matrix/forEach.js



var forEach_name = 'forEach';
var forEach_dependencies = ['typed'];
var createForEach =
/* #__PURE__ */
Object(factory["a" /* factory */])(forEach_name, forEach_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterate over all elements of a matrix/array, and executes the given callback function.
   *
   * Syntax:
   *
   *    math.forEach(x, callback)
   *
   * Examples:
   *
   *    math.forEach([1, 2, 3], function(value) {
   *      console.log(value)
   *    })
   *    // outputs 1, 2, 3
   *
   * See also:
   *
   *    filter, map, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix/array being traversed.
   */
  return typed(forEach_name, {
    'Array, function': forEach_forEach,
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.forEach(callback);
    }
  });
});
/**
 * forEach for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @private
 */

function forEach_forEach(array, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);

  var recurse = function recurse(value, index) {
    if (Array.isArray(value)) {
      Object(utils_array["f" /* forEach */])(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        callback(value);
      } else if (args === 2) {
        callback(value, index);
      } else {
        // 3 or -1
        callback(value, index, array);
      }
    }
  };

  recurse(array, []);
}
// CONCATENATED MODULE: ./src/function/matrix/getMatrixDataType.js



var getMatrixDataType_name = 'getMatrixDataType';
var getMatrixDataType_dependencies = ['typed'];
var createGetMatrixDataType =
/* #__PURE__ */
Object(factory["a" /* factory */])(getMatrixDataType_name, getMatrixDataType_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Find the data type of all elements in a matrix or array,
   * for example 'number' if all items are a number and 'Complex' if all values
   * are complex numbers.
   * If a matrix contains more than one data type, it will return 'mixed'.
   *
   * Syntax:
   *
   *    math.getMatrixDataType(x)
   *
   * Examples:
   *
   *    const x = [ [1, 2, 3], [4, 5, 6] ]
   *    const mixedX = [ [1, true], [2, 3] ]
   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]
   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]
   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]
   *    const sparse = math.sparse(x)
   *    const dense = math.matrix(x)
   *    math.getMatrixDataType(x)   // returns 'number'
   *    math.getMatrixDataType(sparse)   // returns 'number'
   *    math.getMatrixDataType(dense)   // returns 'number'
   *    math.getMatrixDataType(mixedX) // returns 'mixed'
   *    math.getMatrixDataType(fractionX) // returns 'Fraction'
   *    math.getMatrixDataType(unitX) // returns 'Unit'
   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'
   *
   * See also:
   *  SparseMatrix, DenseMatrix
   *
   * @param {...Matrix | Array} x   The Matrix with values.
   *
   * @return {string} A string representation of the matrix type
   */
  return typed(getMatrixDataType_name, {
    Array: function Array(x) {
      return Object(utils_array["h" /* getArrayDataType */])(x, is["M" /* typeOf */]);
    },
    Matrix: function Matrix(x) {
      return x.getDataType();
    }
  });
});
// CONCATENATED MODULE: ./src/function/matrix/identity.js




var identity_name = 'identity';
var identity_dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];
var createIdentity =
/* #__PURE__ */
Object(factory["a" /* factory */])(identity_name, identity_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      BigNumber = _ref.BigNumber,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a 2-dimensional identity matrix with size m x n or n x n.
   * The matrix has ones on the diagonal and zeros elsewhere.
   *
   * Syntax:
   *
   *    math.identity(n)
   *    math.identity(n, format)
   *    math.identity(m, n)
   *    math.identity(m, n, format)
   *    math.identity([m, n])
   *    math.identity([m, n], format)
   *
   * Examples:
   *
   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
   *
   * See also:
   *
   *    diag, ones, zeros, size, range
   *
   * @param {...number | Matrix | Array} size   The size for the matrix
   * @param {string} [format]                   The Matrix storage format
   *
   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
   */
  return typed(identity_name, {
    '': function _() {
      return config.matrix === 'Matrix' ? matrix([]) : [];
    },
    string: function string(format) {
      return matrix(format);
    },
    'number | BigNumber': function numberBigNumber(rows) {
      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber, string': function numberBigNumberString(rows, format) {
      return _identity(rows, rows, format);
    },
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
      return _identity(rows, cols, format);
    },
    Array: function Array(size) {
      return _identityVector(size);
    },
    'Array, string': function ArrayString(size, format) {
      return _identityVector(size, format);
    },
    Matrix: function Matrix(size) {
      return _identityVector(size.valueOf(), size.storage());
    },
    'Matrix, string': function MatrixString(size, format) {
      return _identityVector(size.valueOf(), format);
    }
  });

  function _identityVector(size, format) {
    switch (size.length) {
      case 0:
        return format ? matrix(format) : [];

      case 1:
        return _identity(size[0], size[0], format);

      case 2:
        return _identity(size[0], size[1], format);

      default:
        throw new Error('Vector containing two values expected');
    }
  }
  /**
   * Create an identity matrix
   * @param {number | BigNumber} rows
   * @param {number | BigNumber} cols
   * @param {string} [format]
   * @returns {Matrix}
   * @private
   */


  function _identity(rows, cols, format) {
    // BigNumber constructor with the right precision
    var Big = Object(is["e" /* isBigNumber */])(rows) || Object(is["e" /* isBigNumber */])(cols) ? BigNumber : null;
    if (Object(is["e" /* isBigNumber */])(rows)) rows = rows.toNumber();
    if (Object(is["e" /* isBigNumber */])(cols)) cols = cols.toNumber();

    if (!Object(utils_number["i" /* isInteger */])(rows) || rows < 1) {
      throw new Error('Parameters in function identity must be positive integers');
    }

    if (!Object(utils_number["i" /* isInteger */])(cols) || cols < 1) {
      throw new Error('Parameters in function identity must be positive integers');
    }

    var one = Big ? new BigNumber(1) : 1;
    var defaultValue = Big ? new Big(0) : 0;
    var size = [rows, cols]; // check we need to return a matrix

    if (format) {
      // create diagonal matrix (use optimized implementation for storage format)
      if (format === 'sparse') {
        return SparseMatrix.diagonal(size, one, 0, defaultValue);
      }

      if (format === 'dense') {
        return DenseMatrix.diagonal(size, one, 0, defaultValue);
      }

      throw new TypeError("Unknown matrix type \"".concat(format, "\""));
    } // create and resize array


    var res = Object(utils_array["o" /* resize */])([], size, defaultValue); // fill in ones on the diagonal

    var minimum = rows < cols ? rows : cols; // fill diagonal

    for (var d = 0; d < minimum; d++) {
      res[d][d] = one;
    }

    return res;
  }
});
// CONCATENATED MODULE: ./src/function/matrix/kron.js


var kron_name = 'kron';
var kron_dependencies = ['typed', 'matrix', 'multiplyScalar'];
var createKron =
/* #__PURE__ */
Object(factory["a" /* factory */])(kron_name, kron_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      multiplyScalar = _ref.multiplyScalar;

  /**
     * Calculates the kronecker product of 2 matrices or vectors.
     *
     * NOTE: If a one dimensional vector / matrix is given, it will be
     * wrapped so its two dimensions.
     * See the examples.
     *
     * Syntax:
     *
     *    math.kron(x, y)
     *
     * Examples:
     *
     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
     *
     *    math.kron([1,1], [2,3,4])
     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
     *
     * See also:
     *
     *    multiply, dot, cross
     *
     * @param  {Array | Matrix} x     First vector
     * @param  {Array | Matrix} y     Second vector
     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
     */
  return typed(kron_name, {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return matrix(_kron(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return matrix(_kron(x.toArray(), y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return matrix(_kron(x, y.toArray()));
    },
    'Array, Array': _kron
  });
  /**
     * Calculate the kronecker product of two matrices / vectors
     * @param {Array} a  First vector
     * @param {Array} b  Second vector
     * @returns {Array} Returns the kronecker product of x and y
     * @private
     */

  function _kron(a, b) {
    // Deal with the dimensions of the matricies.
    if (Object(utils_array["a" /* arraySize */])(a).length === 1) {
      // Wrap it in a 2D Matrix
      a = [a];
    }

    if (Object(utils_array["a" /* arraySize */])(b).length === 1) {
      // Wrap it in a 2D Matrix
      b = [b];
    }

    if (Object(utils_array["a" /* arraySize */])(a).length > 2 || Object(utils_array["a" /* arraySize */])(b).length > 2) {
      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
    }

    var t = [];
    var r = [];
    return a.map(function (a) {
      return b.map(function (b) {
        r = [];
        t.push(r);
        return a.map(function (y) {
          return b.map(function (x) {
            return r.push(multiplyScalar(y, x));
          });
        });
      });
    }) && t;
  }
});
// CONCATENATED MODULE: ./src/function/matrix/map.js


var map_name = 'map';
var map_dependencies = ['typed'];
var createMap =
/* #__PURE__ */
Object(factory["a" /* factory */])(map_name, map_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a new matrix or array with the results of the callback function executed on
   * each entry of the matrix/array.
   *
   * Syntax:
   *
   *    math.map(x, callback)
   *
   * Examples:
   *
   *    math.map([1, 2, 3], function(value) {
   *      return value * value
   *    })  // returns [1, 4, 9]
   *
   * See also:
   *
   *    filter, forEach, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the matrix being traversed.
   * @return {Matrix | array}     Transformed map of x
   */
  return typed(map_name, {
    'Array, function': map_map,
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.map(callback);
    }
  });
});
/**
 * Map for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @return {Array}
 * @private
 */

function map_map(array, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);

  var recurse = function recurse(value, index) {
    if (Array.isArray(value)) {
      return value.map(function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        return callback(value);
      } else if (args === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, array);
      }
    }
  };

  return recurse(array, []);
}
// CONCATENATED MODULE: ./src/function/matrix/ones.js




var ones_name = 'ones';
var ones_dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
var createOnes =
/* #__PURE__ */
Object(factory["a" /* factory */])(ones_name, ones_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      BigNumber = _ref.BigNumber;

  /**
   * Create a matrix filled with ones. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.ones(m)
   *    math.ones(m, format)
   *    math.ones(m, n)
   *    math.ones(m, n, format)
   *    math.ones([m, n])
   *    math.ones([m, n], format)
   *    math.ones([m, n, p, ...])
   *    math.ones([m, n, p, ...], format)
   *
   * Examples:
   *
   *    math.ones(3)                   // returns [1, 1, 1]
   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]
   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]
   *
   * See also:
   *
   *    zeros, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix | number}  A matrix filled with ones
   */
  return typed('ones', {
    '': function _() {
      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
    },
    // math.ones(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function numberBigNumberString(size) {
      var last = size[size.length - 1];

      if (typeof last === 'string') {
        var format = size.pop();
        return _ones(size, format);
      } else if (config.matrix === 'Array') {
        return _ones(size);
      } else {
        return _ones(size, 'default');
      }
    },
    Array: _ones,
    Matrix: function Matrix(size) {
      var format = size.storage();
      return _ones(size.valueOf(), format);
    },
    'Array | Matrix, string': function ArrayMatrixString(size, format) {
      return _ones(size.valueOf(), format);
    }
  });
  /**
   * Create an Array or Matrix with ones
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _ones(size, format) {
    var hasBigNumbers = _normalize(size);

    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;

    _validate(size);

    if (format) {
      // return a matrix
      var m = matrix(format);

      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }

      return m;
    } else {
      // return an Array
      var arr = [];

      if (size.length > 0) {
        return Object(utils_array["o" /* resize */])(arr, size, defaultValue);
      }

      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if (Object(is["e" /* isBigNumber */])(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments


  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !Object(utils_number["i" /* isInteger */])(value) || value < 0) {
        throw new Error('Parameters in function ones must be positive integers');
      }
    });
  }
});
// CONCATENATED MODULE: ./src/utils/noop.js
function noBignumber() {
  throw new Error('No "bignumber" implementation available');
}
function noFraction() {
  throw new Error('No "fraction" implementation available');
}
function noMatrix() {
  throw new Error('No "matrix" implementation available');
}
function noIndexClass() {
  throw new Error('No "Index" implementation available');
}
function noSubset() {
  throw new Error('No "matrix" implementation available');
}
// CONCATENATED MODULE: ./src/function/matrix/range.js


var range_name = 'range';
var range_dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
var range_createRange =
/* #__PURE__ */
Object(factory["a" /* factory */])(range_name, range_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      bignumber = _ref.bignumber,
      smaller = _ref.smaller,
      smallerEq = _ref.smallerEq,
      larger = _ref.larger,
      largerEq = _ref.largerEq;

  /**
   * Create an array from a range.
   * By default, the range end is excluded. This can be customized by providing
   * an extra parameter `includeEnd`.
   *
   * Syntax:
   *
   *     math.range(str [, includeEnd])               // Create a range from a string,
   *                                                  // where the string contains the
   *                                                  // start, optional step, and end,
   *                                                  // separated by a colon.
   *     math.range(start, end [, includeEnd])        // Create a range with start and
   *                                                  // end and a step size of 1.
   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
   *                                                  // and end.
   *
   * Where:
   *
   * - `str: string`
   *   A string 'start:end' or 'start:step:end'
   * - `start: {number | BigNumber}`
   *   Start of the range
   * - `end: number | BigNumber`
   *   End of the range, excluded by default, included when parameter includeEnd=true
   * - `step: number | BigNumber`
   *   Step size. Default value is 1.
   * - `includeEnd: boolean`
   *   Option to specify whether to include the end or not. False by default.
   *
   * Examples:
   *
   *     math.range(2, 6)        // [2, 3, 4, 5]
   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
   *     math.range('2:1:6')     // [2, 3, 4, 5]
   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
   *
   * See also:
   *
   *     ones, zeros, size, subset
   *
   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
   * @return {Array | Matrix} range
   */
  return typed(range_name, {
    // TODO: simplify signatures when typed-function supports default values and optional arguments
    // TODO: a number or boolean should not be converted to string here
    string: _strRange,
    'string, boolean': _strRange,
    'number, number': function numberNumber(start, end) {
      return _out(_rangeEx(start, end, 1));
    },
    'number, number, number': function numberNumberNumber(start, end, step) {
      return _out(_rangeEx(start, end, step));
    },
    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
    },
    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
      var BigNumber = start.constructor;
      return _out(_bigRangeEx(start, end, new BigNumber(1)));
    },
    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
      return _out(_bigRangeEx(start, end, step));
    },
    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
      var BigNumber = start.constructor;
      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));
    },
    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
    }
  });

  function _out(arr) {
    if (config.matrix === 'Matrix') {
      return matrix ? matrix(arr) : noMatrix();
    }

    return arr;
  }

  function _strRange(str, includeEnd) {
    var r = _parse(str);

    if (!r) {
      throw new SyntaxError('String "' + str + '" is no valid range');
    }

    var fn;

    if (config.number === 'BigNumber') {
      if (bignumber === undefined) {
        noBignumber();
      }

      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));
    } else {
      fn = includeEnd ? _rangeInc : _rangeEx;
      return _out(fn(r.start, r.end, r.step));
    }
  }
  /**
   * Create a range with numbers. End is excluded
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */


  function _rangeEx(start, end, step) {
    var array = [];
    var x = start;

    if (step > 0) {
      while (smaller(x, end)) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (larger(x, end)) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }
  /**
   * Create a range with numbers. End is included
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */


  function _rangeInc(start, end, step) {
    var array = [];
    var x = start;

    if (step > 0) {
      while (smallerEq(x, end)) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (largerEq(x, end)) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }
  /**
   * Create a range with big numbers. End is excluded
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */


  function _bigRangeEx(start, end, step) {
    var zero = bignumber(0);
    var array = [];
    var x = start;

    if (step.gt(zero)) {
      while (smaller(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(zero)) {
      while (larger(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }
  /**
   * Create a range with big numbers. End is included
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */


  function _bigRangeInc(start, end, step) {
    var zero = bignumber(0);
    var array = [];
    var x = start;

    if (step.gt(zero)) {
      while (smallerEq(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(zero)) {
      while (largerEq(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @param {string} str
   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
   * @private
   */


  function _parse(str) {
    var args = str.split(':'); // number

    var nums = args.map(function (arg) {
      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
      return Number(arg);
    });
    var invalid = nums.some(function (num) {
      return isNaN(num);
    });

    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return {
          start: nums[0],
          end: nums[1],
          step: 1
        };

      case 3:
        return {
          start: nums[0],
          end: nums[2],
          step: nums[1]
        };

      default:
        return null;
    }
  }
});
// CONCATENATED MODULE: ./src/function/matrix/reshape.js


var reshape_name = 'reshape';
var reshape_dependencies = ['typed', 'isInteger', 'matrix'];
var createReshape =
/* #__PURE__ */
Object(factory["a" /* factory */])(reshape_name, reshape_dependencies, function (_ref) {
  var typed = _ref.typed,
      isInteger = _ref.isInteger,
      matrix = _ref.matrix;

  /**
   * Reshape a multi dimensional array to fit the specified dimensions
   *
   * Syntax:
   *
   *     math.reshape(x, sizes)
   *
   * Examples:
   *
   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
   *
   *     math.reshape([[1, 2], [3, 4]], [1, 4])
   *     // returns Array  [[1, 2, 3, 4]]
   *
   *     math.reshape([[1, 2], [3, 4]], [4])
   *     // returns Array [1, 2, 3, 4]
   *
   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
   *     math.reshape(x, [2, 2, 2])
   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
   *
   * See also:
   *
   *     size, squeeze, resize
   *
   * @param {Array | Matrix | *} x  Matrix to be reshaped
   * @param {number[]} sizes        One dimensional array with integral sizes for
   *                                each dimension
   *
   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
   *
   * @throws {TypeError}            If `sizes` does not contain solely integers
   * @throws {DimensionError}       If the product of the new dimension sizes does
   *                                not equal that of the old ones
   */
  return typed(reshape_name, {
    'Matrix, Array': function MatrixArray(x, sizes) {
      if (x.reshape) {
        return x.reshape(sizes);
      } else {
        return matrix(Object(utils_array["n" /* reshape */])(x.valueOf(), sizes));
      }
    },
    'Array, Array': function ArrayArray(x, sizes) {
      sizes.forEach(function (size) {
        if (!isInteger(size)) {
          throw new TypeError('Invalid size for dimension: ' + size);
        }
      });
      return Object(utils_array["n" /* reshape */])(x, sizes);
    }
  });
});
// EXTERNAL MODULE: ./src/error/ArgumentsError.js
var ArgumentsError = __webpack_require__(13);

// CONCATENATED MODULE: ./src/function/matrix/resize.js








var resize_name = 'resize';
var resize_dependencies = ['config', 'matrix'];
var createResize =
/* #__PURE__ */
Object(factory["a" /* factory */])(resize_name, resize_dependencies, function (_ref) {
  var config = _ref.config,
      matrix = _ref.matrix;

  /**
   * Resize a matrix
   *
   * Syntax:
   *
   *     math.resize(x, size)
   *     math.resize(x, size, defaultValue)
   *
   * Examples:
   *
   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]
   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]
   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]
   *     math.resize("hello", [8], "!")    // returns string 'hello!!!'
   *
   * See also:
   *
   *     size, squeeze, subset, reshape
   *
   * @param {Array | Matrix | *} x             Matrix to be resized
   * @param {Array | Matrix} size              One dimensional array with numbers
   * @param {number | string} [defaultValue=0] Zero by default, except in
   *                                           case of a string, in that case
   *                                           defaultValue = ' '
   * @return {* | Array | Matrix} A resized clone of matrix `x`
   */
  // TODO: rework resize to a typed-function
  return function resize(x, size, defaultValue) {
    if (arguments.length !== 2 && arguments.length !== 3) {
      throw new ArgumentsError["a" /* ArgumentsError */]('resize', arguments.length, 2, 3);
    }

    if (Object(is["v" /* isMatrix */])(size)) {
      size = size.valueOf(); // get Array
    }

    if (Object(is["e" /* isBigNumber */])(size[0])) {
      // convert bignumbers to numbers
      size = size.map(function (value) {
        return !Object(is["e" /* isBigNumber */])(value) ? value : value.toNumber();
      });
    } // check x is a Matrix


    if (Object(is["v" /* isMatrix */])(x)) {
      // use optimized matrix implementation, return copy
      return x.resize(size, defaultValue, true);
    }

    if (typeof x === 'string') {
      // resize string
      return _resizeString(x, size, defaultValue);
    } // check result should be a matrix


    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';

    if (size.length === 0) {
      // output a scalar
      while (Array.isArray(x)) {
        x = x[0];
      }

      return Object(utils_object["a" /* clone */])(x);
    } else {
      // output an array/matrix
      if (!Array.isArray(x)) {
        x = [x];
      }

      x = Object(utils_object["a" /* clone */])(x);
      var res = Object(utils_array["o" /* resize */])(x, size, defaultValue);
      return asMatrix ? matrix(res) : res;
    }
  };
  /**
   * Resize a string
   * @param {string} str
   * @param {number[]} size
   * @param {string} [defaultChar=' ']
   * @private
   */

  function _resizeString(str, size, defaultChar) {
    if (defaultChar !== undefined) {
      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
        throw new TypeError('Single character expected as defaultValue');
      }
    } else {
      defaultChar = ' ';
    }

    if (size.length !== 1) {
      throw new DimensionError["a" /* DimensionError */](size.length, 1);
    }

    var len = size[0];

    if (typeof len !== 'number' || !Object(utils_number["i" /* isInteger */])(len)) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
    }

    if (str.length > len) {
      return str.substring(0, len);
    } else if (str.length < len) {
      var res = str;

      for (var i = 0, ii = len - str.length; i < ii; i++) {
        res += defaultChar;
      }

      return res;
    } else {
      return str;
    }
  }
});
// CONCATENATED MODULE: ./src/function/matrix/row.js



var row_name = 'row';
var row_dependencies = ['typed', 'Index', 'matrix', 'range'];
var createRow =
/* #__PURE__ */
Object(factory["a" /* factory */])(row_name, row_dependencies, function (_ref) {
  var typed = _ref.typed,
      Index = _ref.Index,
      matrix = _ref.matrix,
      range = _ref.range;

  /**
   * Return a row from a Matrix.
   *
   * Syntax:
   *
   *     math.row(value, index)
   *
   * Example:
   *
   *     // get a row
   *     const d = [[1, 2], [3, 4]]
   *     math.row(d, 1) // returns [3, 4]
   *
   * See also:
   *
   *     column
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} row              The index of the row
   * @return {Array | Matrix}         The retrieved row
   */
  var row = typed(row_name, {
    'Matrix, number': _row,
    'Array, number': function ArrayNumber(value, row) {
      return _row(matrix(Object(utils_object["a" /* clone */])(value)), row).valueOf();
    }
  });
  return row;
  /**
   * Retrieve a row of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} row     The index of the row
   * @return {Matrix}        The retrieved row
   */

  function _row(value, row) {
    // check dimensions
    if (value.size().length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }

    Object(utils_array["s" /* validateIndex */])(row, value.size()[0]);
    var columnRange = range(0, value.size()[1]);
    var index = new Index(row, columnRange);
    return value.subset(index);
  }
});
// CONCATENATED MODULE: ./src/function/matrix/size.js



var size_name = 'size';
var size_dependencies = ['typed', 'config', '?matrix'];
var createSize =
/* #__PURE__ */
Object(factory["a" /* factory */])(size_name, size_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix;

  /**
   * Calculate the size of a matrix or scalar.
   *
   * Syntax:
   *
   *     math.size(x)
   *
   * Examples:
   *
   *     math.size(2.3)                  // returns []
   *     math.size('hello world')        // returns [11]
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.size(A)                    // returns [2, 3]
   *     math.size(math.range(1,6))      // returns [5]
   *
   * See also:
   *
   *     resize, squeeze, subset
   *
   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
   * @return {Array | Matrix} A vector with size of `x`.
   */
  return typed(size_name, {
    Matrix: function Matrix(x) {
      return x.create(x.size());
    },
    Array: utils_array["a" /* arraySize */],
    string: function string(x) {
      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
    },
    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
      // scalar
      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();
    }
  });
});
// CONCATENATED MODULE: ./src/function/matrix/squeeze.js



var squeeze_name = 'squeeze';
var squeeze_dependencies = ['typed', 'matrix'];
var createSqueeze =
/* #__PURE__ */
Object(factory["a" /* factory */])(squeeze_name, squeeze_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;

  /**
   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
   *
   * Syntax:
   *
   *     math.squeeze(x)
   *
   * Examples:
   *
   *     math.squeeze([3])           // returns 3
   *     math.squeeze([[3]])         // returns 3
   *
   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)
   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)
   *
   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)
   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)
   *
   *     // only inner and outer dimensions are removed
   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *
   * See also:
   *
   *     subset
   *
   * @param {Matrix | Array} x      Matrix to be squeezed
   * @return {Matrix | Array} Squeezed matrix
   */
  return typed(squeeze_name, {
    Array: function Array(x) {
      return Object(utils_array["p" /* squeeze */])(Object(utils_object["a" /* clone */])(x));
    },
    Matrix: function Matrix(x) {
      var res = Object(utils_array["p" /* squeeze */])(x.toArray()); // FIXME: return the same type of matrix as the input

      return Array.isArray(res) ? matrix(res) : res;
    },
    any: function any(x) {
      // scalar
      return Object(utils_object["a" /* clone */])(x);
    }
  });
});
// CONCATENATED MODULE: ./src/utils/customs.js
function customs_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { customs_typeof = function _typeof(obj) { return typeof obj; }; } else { customs_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return customs_typeof(obj); }


/**
 * Get a property of a plain object
 * Throws an error in case the object is not a plain object or the
 * property is not defined on the object itself
 * @param {Object} object
 * @param {string} prop
 * @return {*} Returns the property value when safe
 */

function getSafeProperty(object, prop) {
  // only allow getting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    return object[prop];
  }

  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
    throw new Error('Cannot access method "' + prop + '" as a property');
  }

  throw new Error('No access to property "' + prop + '"');
}
/**
 * Set a property on a plain object.
 * Throws an error in case the object is not a plain object or the
 * property would override an inherited property like .constructor or .toString
 * @param {Object} object
 * @param {string} prop
 * @param {*} value
 * @return {*} Returns the value
 */
// TODO: merge this function into access.js?


function setSafeProperty(object, prop, value) {
  // only allow setting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    object[prop] = value;
    return value;
  }

  throw new Error('No access to property "' + prop + '"');
}
/**
 * Test whether a property is safe to use for an object.
 * For example .toString and .constructor are not safe
 * @param {string} prop
 * @return {boolean} Returns true when safe
 */


function isSafeProperty(object, prop) {
  if (!object || customs_typeof(object) !== 'object') {
    return false;
  } // SAFE: whitelisted
  // e.g length


  if (Object(utils_object["f" /* hasOwnProperty */])(safeNativeProperties, prop)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor


  if (prop in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply


  if (prop in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }

  return true;
}
/**
 * Validate whether a method is safe.
 * Throws an error when that's not the case.
 * @param {Object} object
 * @param {string} method
 */
// TODO: merge this function into assign.js?


function validateSafeMethod(object, method) {
  if (!isSafeMethod(object, method)) {
    throw new Error('No access to method "' + method + '"');
  }
}
/**
 * Check whether a method is safe.
 * Throws an error when that's not the case (for example for `constructor`).
 * @param {Object} object
 * @param {string} method
 * @return {boolean} Returns true when safe, false otherwise
 */


function isSafeMethod(object, method) {
  if (object === null || object === undefined || typeof object[method] !== 'function') {
    return false;
  } // UNSAFE: ghosted
  // e.g overridden toString
  // Note that IE10 doesn't support __proto__ and we can't do this check there.


  if (Object(utils_object["f" /* hasOwnProperty */])(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {
    return false;
  } // SAFE: whitelisted
  // e.g toString


  if (Object(utils_object["f" /* hasOwnProperty */])(safeNativeMethods, method)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor


  if (method in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply


  if (method in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }

  return true;
}

function isPlainObject(object) {
  return customs_typeof(object) === 'object' && object && object.constructor === Object;
}

var safeNativeProperties = {
  length: true,
  name: true
};
var safeNativeMethods = {
  toString: true,
  valueOf: true,
  toLocaleString: true
};






// CONCATENATED MODULE: ./src/function/matrix/subset.js






var subset_name = 'subset';
var subset_dependencies = ['typed', 'matrix'];
var createSubset =
/* #__PURE__ */
Object(factory["a" /* factory */])(subset_name, subset_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;

  /**
   * Get or set a subset of a matrix or string.
   *
   * Syntax:
   *     math.subset(value, index)                                // retrieve a subset
   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
   *
   * Examples:
   *
   *     // get a subset
   *     const d = [[1, 2], [3, 4]]
   *     math.subset(d, math.index(1, 0))        // returns 3
   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]
   *
   *     // replace a subset
   *     const e = []
   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]
   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]
   *
   * See also:
   *
   *     size, resize, squeeze, index
   *
   * @param {Array | Matrix | string} matrix  An array, matrix, or string
   * @param {Index} index                     An index containing ranges for each
   *                                          dimension
   * @param {*} [replacement]                 An array, matrix, or scalar.
   *                                          If provided, the subset is replaced with replacement.
   *                                          If not provided, the subset is returned
   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
   *                                          the matrix is resized. If not provided,
   *                                          math.matrix elements will be left undefined.
   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
   */
  return typed(subset_name, {
    // get subset
    'Array, Index': function ArrayIndex(value, index) {
      var m = matrix(value);
      var subset = m.subset(index); // returns a Matrix

      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
    },
    'Matrix, Index': function MatrixIndex(value, index) {
      return value.subset(index);
    },
    'Object, Index': _getObjectProperty,
    'string, Index': _getSubstring,
    // set subset
    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
      return matrix(Object(utils_object["a" /* clone */])(value)).subset(index, replacement, undefined).valueOf();
    },
    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
      return matrix(Object(utils_object["a" /* clone */])(value)).subset(index, replacement, defaultValue).valueOf();
    },
    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
      return value.clone().subset(index, replacement);
    },
    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
      return value.clone().subset(index, replacement, defaultValue);
    },
    'string, Index, string': _setSubstring,
    'string, Index, string, string': _setSubstring,
    'Object, Index, any': _setObjectProperty
  });
});
/**
 * Retrieve a subset of a string
 * @param {string} str            string from which to get a substring
 * @param {Index} index           An index containing ranges for each dimension
 * @returns {string} substring
 * @private
 */

function _getSubstring(str, index) {
  if (!Object(is["t" /* isIndex */])(index)) {
    // TODO: better error message
    throw new TypeError('Index expected');
  }

  if (index.size().length !== 1) {
    throw new DimensionError["a" /* DimensionError */](index.size().length, 1);
  } // validate whether the range is out of range


  var strLen = str.length;
  Object(utils_array["s" /* validateIndex */])(index.min()[0], strLen);
  Object(utils_array["s" /* validateIndex */])(index.max()[0], strLen);
  var range = index.dimension(0);
  var substr = '';
  range.forEach(function (v) {
    substr += str.charAt(v);
  });
  return substr;
}
/**
 * Replace a substring in a string
 * @param {string} str            string to be replaced
 * @param {Index} index           An index containing ranges for each dimension
 * @param {string} replacement    Replacement string
 * @param {string} [defaultValue] Default value to be uses when resizing
 *                                the string. is ' ' by default
 * @returns {string} result
 * @private
 */


function _setSubstring(str, index, replacement, defaultValue) {
  if (!index || index.isIndex !== true) {
    // TODO: better error message
    throw new TypeError('Index expected');
  }

  if (index.size().length !== 1) {
    throw new DimensionError["a" /* DimensionError */](index.size().length, 1);
  }

  if (defaultValue !== undefined) {
    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
      throw new TypeError('Single character expected as defaultValue');
    }
  } else {
    defaultValue = ' ';
  }

  var range = index.dimension(0);
  var len = range.size()[0];

  if (len !== replacement.length) {
    throw new DimensionError["a" /* DimensionError */](range.size()[0], replacement.length);
  } // validate whether the range is out of range


  var strLen = str.length;
  Object(utils_array["s" /* validateIndex */])(index.min()[0]);
  Object(utils_array["s" /* validateIndex */])(index.max()[0]); // copy the string into an array with characters

  var chars = [];

  for (var i = 0; i < strLen; i++) {
    chars[i] = str.charAt(i);
  }

  range.forEach(function (v, i) {
    chars[v] = replacement.charAt(i[0]);
  }); // initialize undefined characters with a space

  if (chars.length > strLen) {
    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {
      if (!chars[_i]) {
        chars[_i] = defaultValue;
      }
    }
  }

  return chars.join('');
}
/**
 * Retrieve a property from an object
 * @param {Object} object
 * @param {Index} index
 * @return {*} Returns the value of the property
 * @private
 */


function _getObjectProperty(object, index) {
  if (index.size().length !== 1) {
    throw new DimensionError["a" /* DimensionError */](index.size(), 1);
  }

  var key = index.dimension(0);

  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  }

  return getSafeProperty(object, key);
}
/**
 * Set a property on an object
 * @param {Object} object
 * @param {Index} index
 * @param {*} replacement
 * @return {*} Returns the updated object
 * @private
 */


function _setObjectProperty(object, index, replacement) {
  if (index.size().length !== 1) {
    throw new DimensionError["a" /* DimensionError */](index.size(), 1);
  }

  var key = index.dimension(0);

  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  } // clone the object, and apply the property to the clone


  var updated = Object(utils_object["a" /* clone */])(object);
  setSafeProperty(updated, key, replacement);
  return updated;
}
// CONCATENATED MODULE: ./src/function/matrix/transpose.js



var transpose_name = 'transpose';
var transpose_dependencies = ['typed', 'matrix'];
var createTranspose =
/* #__PURE__ */
Object(factory["a" /* factory */])(transpose_name, transpose_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;

  /**
   * Transpose a matrix. All values of the matrix are reflected over its
   * main diagonal. Only applicable to two dimensional matrices containing
   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
   * vectors and scalars return the input unchanged.
   *
   * Syntax:
   *
   *     math.transpose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
   *
   * See also:
   *
   *     diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be transposed
   * @return {Array | Matrix}   The transposed matrix
   */
  var transpose = typed('transpose', {
    Array: function Array(x) {
      // use dense matrix implementation
      return transpose(matrix(x)).valueOf();
    },
    Matrix: function Matrix(x) {
      // matrix size
      var size = x.size(); // result

      var c; // process dimensions

      switch (size.length) {
        case 1:
          // vector
          c = x.clone();
          break;

        case 2:
          {
            // rows and columns
            var rows = size[0];
            var columns = size[1]; // check columns

            if (columns === 0) {
              // throw exception
              throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + Object(utils_string["d" /* format */])(size) + ')');
            } // process storage format


            switch (x.storage()) {
              case 'dense':
                c = _denseTranspose(x, rows, columns);
                break;

              case 'sparse':
                c = _sparseTranspose(x, rows, columns);
                break;
            }
          }
          break;

        default:
          // multi dimensional
          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + Object(utils_string["d" /* format */])(this._size) + ')');
      }

      return c;
    },
    // scalars
    any: function any(x) {
      return Object(utils_object["a" /* clone */])(x);
    }
  });

  function _denseTranspose(m, rows, columns) {
    // matrix array
    var data = m._data; // transposed matrix data

    var transposed = [];
    var transposedRow; // loop columns

    for (var j = 0; j < columns; j++) {
      // initialize row
      transposedRow = transposed[j] = []; // loop rows

      for (var i = 0; i < rows; i++) {
        // set data
        transposedRow[i] = Object(utils_object["a" /* clone */])(data[i][j]);
      }
    } // return matrix


    return m.createDenseMatrix({
      data: transposed,
      size: [columns, rows],
      datatype: m._datatype
    });
  }

  function _sparseTranspose(m, rows, columns) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result matrices

    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = []; // row counts

    var w = [];

    for (var x = 0; x < rows; x++) {
      w[x] = 0;
    } // vars


    var p, l, j; // loop values in matrix

    for (p = 0, l = index.length; p < l; p++) {
      // number of values in row
      w[index[p]]++;
    } // cumulative sum


    var sum = 0; // initialize cptr with the cummulative sum of row counts

    for (var i = 0; i < rows; i++) {
      // update cptr
      cptr.push(sum); // update sum

      sum += w[i]; // update w

      w[i] = cptr[i];
    } // update cptr


    cptr.push(sum); // loop columns

    for (j = 0; j < columns; j++) {
      // values & index in column
      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
        // C values & index
        var q = w[index[k]]++; // C[j, i] = A[i, j]

        cindex[q] = j; // check we need to process values (pattern matrix)

        if (values) {
          cvalues[q] = Object(utils_object["a" /* clone */])(values[k]);
        }
      }
    } // return matrix


    return m.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [columns, rows],
      datatype: m._datatype
    });
  }

  return transpose;
});
// CONCATENATED MODULE: ./src/function/matrix/ctranspose.js

var ctranspose_name = 'ctranspose';
var ctranspose_dependencies = ['typed', 'transpose', 'conj'];
var createCtranspose =
/* #__PURE__ */
Object(factory["a" /* factory */])(ctranspose_name, ctranspose_dependencies, function (_ref) {
  var typed = _ref.typed,
      transpose = _ref.transpose,
      conj = _ref.conj;

  /**
   * Transpose and complex conjugate a matrix. All values of the matrix are
   * reflected over its main diagonal and then the complex conjugate is
   * taken. This is equivalent to complex conjugation for scalars and
   * vectors.
   *
   * Syntax:
   *
   *     math.ctranspose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
   *
   * See also:
   *
   *     transpose, diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be ctransposed
   * @return {Array | Matrix}   The ctransposed matrix
   */
  return typed(ctranspose_name, {
    any: function any(x) {
      return conj(transpose(x));
    }
  });
});
// CONCATENATED MODULE: ./src/function/matrix/zeros.js




var zeros_name = 'zeros';
var zeros_dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
var createZeros =
/* #__PURE__ */
Object(factory["a" /* factory */])(zeros_name, zeros_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      BigNumber = _ref.BigNumber;

  /**
   * Create a matrix filled with zeros. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.zeros(m)
   *    math.zeros(m, format)
   *    math.zeros(m, n)
   *    math.zeros(m, n, format)
   *    math.zeros([m, n])
   *    math.zeros([m, n], format)
   *
   * Examples:
   *
   *    math.zeros(3)                  // returns [0, 0, 0]
   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
   *    math.zeros(3, 'dense')         // returns [0, 0, 0]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
   *
   * See also:
   *
   *    ones, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix}           A matrix filled with zeros
   */
  return typed(zeros_name, {
    '': function _() {
      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
    },
    // math.zeros(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function numberBigNumberString(size) {
      var last = size[size.length - 1];

      if (typeof last === 'string') {
        var format = size.pop();
        return _zeros(size, format);
      } else if (config.matrix === 'Array') {
        return _zeros(size);
      } else {
        return _zeros(size, 'default');
      }
    },
    Array: _zeros,
    Matrix: function Matrix(size) {
      var format = size.storage();
      return _zeros(size.valueOf(), format);
    },
    'Array | Matrix, string': function ArrayMatrixString(size, format) {
      return _zeros(size.valueOf(), format);
    }
  });
  /**
   * Create an Array or Matrix with zeros
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _zeros(size, format) {
    var hasBigNumbers = _normalize(size);

    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;

    _validate(size);

    if (format) {
      // return a matrix
      var m = matrix(format);

      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }

      return m;
    } else {
      // return an Array
      var arr = [];

      if (size.length > 0) {
        return Object(utils_array["o" /* resize */])(arr, size, defaultValue);
      }

      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if (Object(is["e" /* isBigNumber */])(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments


  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !Object(utils_number["i" /* isInteger */])(value) || value < 0) {
        throw new Error('Parameters in function zeros must be positive integers');
      }
    });
  }
}); // TODO: zeros contains almost the same code as ones. Reuse this?
// CONCATENATED MODULE: ./src/function/special/erf.js



var erf_name = 'erf';
var erf_dependencies = ['typed'];
var createErf =
/* #__PURE__ */
Object(factory["a" /* factory */])(erf_name, erf_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the erf function of a value using a rational Chebyshev
   * approximations for different intervals of x.
   *
   * This is a translation of W. J. Cody's Fortran implementation from 1987
   * ( https://www.netlib.org/specfun/erf ). See the AMS publication
   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
   * for an explanation of this process.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.erf(x)
   *
   * Examples:
   *
   *    math.erf(0.2)    // returns 0.22270258921047847
   *    math.erf(-0.5)   // returns -0.5204998778130465
   *    math.erf(4)      // returns 0.9999999845827421
   *
   * @param {number | Array | Matrix} x   A real number
   * @return {number | Array | Matrix}    The erf of `x`
   */
  var erf = typed('name', {
    number: function number(x) {
      var y = Math.abs(x);

      if (y >= MAX_NUM) {
        return Object(utils_number["n" /* sign */])(x);
      }

      if (y <= THRESH) {
        return Object(utils_number["n" /* sign */])(x) * erf1(y);
      }

      if (y <= 4.0) {
        return Object(utils_number["n" /* sign */])(x) * (1 - erfc2(y));
      }

      return Object(utils_number["n" /* sign */])(x) * (1 - erfc3(y));
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return deepMap(n, erf);
    } // TODO: For complex numbers, use the approximation for the Faddeeva function
    //  from "More Efficient Computation of the Complex Error Function" (AMS)

  });
  /**
   * Approximates the error function erf() for x <= 0.46875 using this function:
   *               n
   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
   *              j=0
   */

  function erf1(y) {
    var ysq = y * y;
    var xnum = erf_P[0][4] * ysq;
    var xden = ysq;
    var i;

    for (i = 0; i < 3; i += 1) {
      xnum = (xnum + erf_P[0][i]) * ysq;
      xden = (xden + Q[0][i]) * ysq;
    }

    return y * (xnum + erf_P[0][3]) / (xden + Q[0][3]);
  }
  /**
   * Approximates the complement of the error function erfc() for
   * 0.46875 <= x <= 4.0 using this function:
   *                       n
   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
   *                      j=0
   */


  function erfc2(y) {
    var xnum = erf_P[1][8] * y;
    var xden = y;
    var i;

    for (i = 0; i < 7; i += 1) {
      xnum = (xnum + erf_P[1][i]) * y;
      xden = (xden + Q[1][i]) * y;
    }

    var result = (xnum + erf_P[1][7]) / (xden + Q[1][7]);
    var ysq = parseInt(y * 16) / 16;
    var del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
  }
  /**
   * Approximates the complement of the error function erfc() for x > 4.0 using
   * this function:
   *
   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
   *               n
   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
   *              j=0
   */


  function erfc3(y) {
    var ysq = 1 / (y * y);
    var xnum = erf_P[2][5] * ysq;
    var xden = ysq;
    var i;

    for (i = 0; i < 4; i += 1) {
      xnum = (xnum + erf_P[2][i]) * ysq;
      xden = (xden + Q[2][i]) * ysq;
    }

    var result = ysq * (xnum + erf_P[2][4]) / (xden + Q[2][4]);
    result = (SQRPI - result) / y;
    ysq = parseInt(y * 16) / 16;
    var del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
  }

  return erf;
});
/**
 * Upper bound for the first approximation interval, 0 <= x <= THRESH
 * @constant
 */

var THRESH = 0.46875;
/**
 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
 * @constant
 */

var SQRPI = 5.6418958354775628695e-1;
/**
 * Coefficients for each term of the numerator sum (p_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */

var erf_P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];
/**
 * Coefficients for each term of the denominator sum (q_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */

var Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];
/**
 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
 * return 1
 */

var MAX_NUM = Math.pow(2, 53);
// CONCATENATED MODULE: ./src/function/statistics/mode.js


var mode_name = 'mode';
var mode_dependencies = ['typed', 'isNaN', 'isNumeric'];
var createMode =
/* #__PURE__ */
Object(factory["a" /* factory */])(mode_name, mode_dependencies, function (_ref) {
  var typed = _ref.typed,
      isNaN = _ref.isNaN,
      isNumeric = _ref.isNumeric;

  /**
  * Computes the mode of a set of numbers or a list with values(numbers or characters).
  * If there are more than one modes, it returns a list of those values.
  *
  * Syntax:
  *
  *     math.mode(a, b, c, ...)
  *     math.mode(A)
  *
  * Examples:
  *
  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
  *     math.mode('a','a','b','c')                           // returns ["a"]
  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
  *
  * See also:
  *
  *     median,
  *     mean
  *
  * @param {... *} args  A single matrix
  * @return {*} The mode of all values
  */
  return typed(mode_name, {
    'Array | Matrix': _mode,
    '...': function _(args) {
      return _mode(args);
    }
  });
  /**
   * Calculates the mode in an 1-dimensional array
   * @param {Array} values
   * @return {Array} mode
   * @private
   */

  function _mode(values) {
    values = Object(utils_array["e" /* flatten */])(values.valueOf());
    var num = values.length;

    if (num === 0) {
      throw new Error('Cannot calculate mode of an empty array');
    }

    var count = {};
    var mode = [];
    var max = 0;

    for (var i = 0; i < values.length; i++) {
      var value = values[i];

      if (isNumeric(value) && isNaN(value)) {
        throw new Error('Cannot calculate mode of an array containing NaN values');
      }

      if (!(value in count)) {
        count[value] = 0;
      }

      count[value]++;

      if (count[value] === max) {
        mode.push(value);
      } else if (count[value] > max) {
        max = count[value];
        mode = [value];
      }
    }

    return mode;
  }
});
// CONCATENATED MODULE: ./src/function/statistics/utils/improveErrorMessage.js

/**
 * Improve error messages for statistics functions. Errors are typically
 * thrown in an internally used function like larger, causing the error
 * not to mention the function (like max) which is actually used by the user.
 *
 * @param {Error} err
 * @param {String} fnName
 * @param {*} [value]
 * @return {Error}
 */

function improveErrorMessage(err, fnName, value) {
  // TODO: add information with the index (also needs transform in expression parser)
  var details;

  if (String(err).indexOf('Unexpected type') !== -1) {
    details = arguments.length > 2 ? ' (type: ' + Object(is["M" /* typeOf */])(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';
    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
  }

  if (String(err).indexOf('complex numbers') !== -1) {
    details = arguments.length > 2 ? ' (type: ' + Object(is["M" /* typeOf */])(value) + ', value: ' + JSON.stringify(value) + ')' : '';
    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
  }

  return err;
}
// CONCATENATED MODULE: ./src/function/statistics/prod.js



var prod_name = 'prod';
var prod_dependencies = ['typed', 'multiply'];
var createProd =
/* #__PURE__ */
Object(factory["a" /* factory */])(prod_name, prod_dependencies, function (_ref) {
  var typed = _ref.typed,
      multiply = _ref.multiply;

  /**
   * Compute the product of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.prod(a, b, c, ...)
   *     math.prod(A)
   *
   * Examples:
   *
   *     math.multiply(2, 3)           // returns 6
   *     math.prod(2, 3)               // returns 6
   *     math.prod(2, 3, 4)            // returns 24
   *     math.prod([2, 3, 4])          // returns 24
   *     math.prod([[2, 5], [4, 3]])   // returns 120
   *
   * See also:
   *
   *    mean, median, min, max, sum, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The product of all values
   */
  return typed(prod_name, {
    // prod([a, b, c, d, ...])
    'Array | Matrix': _prod,
    // prod([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      // TODO: implement prod(A, dim)
      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)
    },
    // prod(a, b, c, d, ...)
    '...': function _(args) {
      return _prod(args);
    }
  });
  /**
   * Recursively calculate the product of an n-dimensional array
   * @param {Array} array
   * @return {number} prod
   * @private
   */

  function _prod(array) {
    var prod;
    deepForEach(array, function (value) {
      try {
        prod = prod === undefined ? value : multiply(prod, value);
      } catch (err) {
        throw improveErrorMessage(err, 'prod', value);
      }
    });

    if (prod === undefined) {
      throw new Error('Cannot calculate prod of an empty array');
    }

    return prod;
  }
});
// CONCATENATED MODULE: ./src/function/string/format.js


var format_name = 'format';
var format_dependencies = ['typed'];
var createFormat =
/* #__PURE__ */
Object(factory["a" /* factory */])(format_name, format_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Format a value of any type into a string.
   *
   * Syntax:
   *
   *    math.format(value)
   *    math.format(value, options)
   *    math.format(value, precision)
   *    math.format(value, callback)
   *
   * Where:
   *
   *  - `value: *`
   *    The value to be formatted
   *  - `options: Object`
   *    An object with formatting options. Available options:
   *    - `notation: string`
   *      Number notation. Choose from:
   *      - 'fixed'
   *        Always use regular number notation.
   *        For example '123.40' and '14000000'
   *      - 'exponential'
   *        Always use exponential notation.
   *        For example '1.234e+2' and '1.4e+7'
   *      - 'engineering'
   *        Always use engineering notation.
   *        For example '123.4e+0' and '14.0e+6'
   *      - 'auto' (default)
   *        Regular number notation for numbers having an absolute value between
   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
   *        Lower bound is included, upper bound is excluded.
   *        For example '123.4' and '1.4e7'.
   *    - `precision: number`
   *      A number between 0 and 16 to round the digits of the number. In case
   *      of notations 'exponential', 'engineering', and 'auto', `precision`
   *      defines the total number of significant digits returned.
   *      In case of notation 'fixed', `precision` defines the number of
   *      significant digits after the decimal point.
   *      `precision` is undefined by default.
   *    - `lowerExp: number`
   *      Exponent determining the lower boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `-3`.
   *    - `upperExp: number`
   *      Exponent determining the upper boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `5`.
   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
   *      configured, and will output `0.(3)` when 'decimal' is configured.
   * - `callback: function`
   *   A custom formatting function, invoked for all numeric elements in `value`,
   *   for example all elements of a matrix, or the real and imaginary
   *   parts of a complex number. This callback can be used to override the
   *   built-in numeric notation with any type of formatting. Function `callback`
   *   is called with `value` as parameter and must return a string.
   *
   * When `value` is an Object:
   *
   * - When the object contains a property `format` being a function, this function
   *   is invoked as `value.format(options)` and the result is returned.
   * - When the object has its own `toString` method, this method is invoked
   *   and the result is returned.
   * - In other cases the function will loop over all object properties and
   *   return JSON object notation like '{"a": 2, "b": 3}'.
   *
   * When value is a function:
   *
   * - When the function has a property `syntax`, it returns this
   *   syntax description.
   * - In other cases, a string `'function'` is returned.
   *
   * Examples:
   *
   *    math.format(6.4)                                        // returns '6.4'
   *    math.format(1240000)                                    // returns '1.24e6'
   *    math.format(1/3)                                        // returns '0.3333333333333333'
   *    math.format(1/3, 3)                                     // returns '0.333'
   *    math.format(21385, 2)                                   // returns '21000'
   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
   *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'
   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
   *
   *    function formatCurrency(value) {
   *      // return currency notation with two digits:
   *      return '$' + value.toFixed(2)
   *
   *      // you could also use math.format inside the callback:
   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
   *    }
   *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'
   *
   * See also:
   *
   *    print
   *
   * @param {*} value                               Value to be stringified
   * @param {Object | Function | number} [options]  Formatting options
   * @return {string} The formatted value
   */
  return typed(format_name, {
    any: utils_string["d" /* format */],
    'any, Object | function | number': utils_string["d" /* format */]
  });
});
// CONCATENATED MODULE: ./src/function/string/print.js



var print_name = 'print';
var print_dependencies = ['typed'];
var createPrint =
/* #__PURE__ */
Object(factory["a" /* factory */])(print_name, print_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Interpolate values into a string template.
   *
   * Syntax:
   *
   *     math.print(template, values)
   *     math.print(template, values, precision)
   *     math.print(template, values, options)
   *
   * Example usage:
   *
   *     // the following outputs: 'Lucy is 5 years old'
   *     math.print('Lucy is $age years old', {age: 5})
   *
   *     // the following outputs: 'The value of pi is 3.141592654'
   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
   *
   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
   *     math.print('Hello $user.name! The date is $date', {
   *       user: {
   *         name: 'Mary',
   *       },
   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
   *     })
   *
   *     // the following outputs: 'My favorite fruits are apples and bananas !'
   *     math.print('My favorite fruits are $0 and $1 !', [
   *       'apples',
   *       'bananas'
   *     ])
   *
   * See also:
   *
   *     format
   *
   * @param {string} template           A string containing variable placeholders.
   * @param {Object | Array | Matrix}   values An object or array containing variables
   *                                    which will be filled in in the template.
   * @param {number | Object} [options] Formatting options,
   *                                    or the number of digits to format numbers.
   *                                    See function math.format for a description
   *                                    of all options.
   * @return {string} Interpolated string
   */
  return typed(print_name, {
    // note: Matrix will be converted automatically to an Array
    'string, Object | Array': _print,
    'string, Object | Array, number | Object': _print
  });
});
/**
 * Interpolate values into a string template.
 * @param {string} template
 * @param {Object} values
 * @param {number | Object} [options]
 * @returns {string} Interpolated string
 * @private
 */

function _print(template, values, options) {
  return template.replace(/\$([\w.]+)/g, function (original, key) {
    var keys = key.split('.');
    var value = values[keys.shift()];

    while (keys.length && value !== undefined) {
      var k = keys.shift();
      value = k ? value[k] : value + '.';
    }

    if (value !== undefined) {
      if (!Object(is["I" /* isString */])(value)) {
        return Object(utils_string["d" /* format */])(value, options);
      } else {
        return value;
      }
    }

    return original;
  });
}
// CONCATENATED MODULE: ./src/function/unit/to.js



var to_name = 'to';
var to_dependencies = ['typed', 'matrix'];
var createTo =
/* #__PURE__ */
Object(factory["a" /* factory */])(to_name, to_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Change the unit of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.to(x, unit)
   *
   * Examples:
   *
   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm
   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm
   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits
   *
   * See also:
   *
   *    unit
   *
   * @param {Unit | Array | Matrix} x     The unit to be converted.
   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
   *                                      or a unit without value.
   * @return {Unit | Array | Matrix} value with changed, fixed unit.
   */

  var to = typed(to_name, {
    'Unit, Unit | string': function UnitUnitString(x, unit) {
      return x.to(unit);
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // SparseMatrix does not support Units
      return algorithm13(x, y, to);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return to(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return to(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return to(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // SparseMatrix does not support Units
      return algorithm14(x, y, to, false);
    },
    'any, Matrix': function anyMatrix(x, y) {
      // SparseMatrix does not support Units
      return algorithm14(y, x, to, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, to, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, to, true).valueOf();
    }
  });
  return to;
});
// CONCATENATED MODULE: ./src/function/utils/isPrime.js


var isPrime_name = 'isPrime';
var isPrime_dependencies = ['typed'];
var createIsPrime =
/* #__PURE__ */
Object(factory["a" /* factory */])(isPrime_name, isPrime_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is prime: has no divisors other than itself and one.
   * The function supports type `number`, `bignumber`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPrime(x)
   *
   * Examples:
   *
   *    math.isPrime(3)                     // returns true
   *    math.isPrime(-2)                    // returns false
   *    math.isPrime(0)                     // returns false
   *    math.isPrime(-0)                    // returns false
   *    math.isPrime(0.5)                   // returns false
   *    math.isPrime('2')                   // returns true
   *    math.isPrime([2, 17, 100])           // returns [true, true, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isPrime = typed(isPrime_name, {
    number: function number(x) {
      if (x < 2) {
        return false;
      }

      if (x === 2) {
        return true;
      }

      if (x % 2 === 0) {
        return false;
      }

      for (var i = 3; i * i <= x; i += 2) {
        if (x % i === 0) {
          return false;
        }
      }

      return true;
    },
    BigNumber: function BigNumber(x) {
      if (x.lt(2)) {
        return false;
      }

      if (x.equals(2)) {
        return true;
      }

      if (x.mod(2).isZero()) {
        return false;
      }

      for (var i = new x.constructor(3); i.times(i).lte(x); i = i.plus(1)) {
        if (x.mod(i).isZero()) {
          return false;
        }
      }

      return true;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isPrime);
    }
  });
  return isPrime;
});
// CONCATENATED MODULE: ./src/function/utils/numeric.js



var numeric_name = 'numeric';
var numeric_dependencies = ['number', '?bignumber', '?fraction'];
var createNumeric =
/* #__PURE__ */
Object(factory["a" /* factory */])(numeric_name, numeric_dependencies, function (_ref) {
  var _number = _ref.number,
      bignumber = _ref.bignumber,
      fraction = _ref.fraction;
  var validInputTypes = {
    string: true,
    number: true,
    BigNumber: true,
    Fraction: true
  }; // Load the conversion functions for each output type

  var validOutputTypes = {
    number: function number(x) {
      return _number(x);
    },
    BigNumber: bignumber ? function (x) {
      return bignumber(x);
    } : noBignumber,
    Fraction: fraction ? function (x) {
      return fraction(x);
    } : noFraction
  };
  /**
   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
   *
   * Syntax:
   *
   *    math.numeric(x)
   *
   * Examples:
   *
   *    math.numeric('4')                           // returns number 4
   *    math.numeric('4', 'number')                 // returns number 4
   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
   *    math.numeric('4', 'Fraction')               // returns Fraction 4
   *    math.numeric(4, 'Fraction')                 // returns Fraction 4
   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4
   *
   * See also:
   *
   *    number, fraction, bignumber, string, format
   *
   * @param {string | number | BigNumber | Fraction } value
   *              A numeric value or a string containing a numeric value
   * @param {string} outputType
   *              Desired numeric output type.
   *              Available values: 'number', 'BigNumber', or 'Fraction'
   * @return {number | BigNumber | Fraction}
   *              Returns an instance of the numeric in the requested type
   */

  return function numeric(value, outputType) {
    var inputType = Object(is["M" /* typeOf */])(value);

    if (!(inputType in validInputTypes)) {
      throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
    }

    if (!(outputType in validOutputTypes)) {
      throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
    }

    if (outputType === inputType) {
      return value;
    } else {
      return validOutputTypes[outputType](value);
    }
  };
});
// CONCATENATED MODULE: ./src/function/arithmetic/divideScalar.js


var divideScalar_name = 'divideScalar';
var divideScalar_dependencies = ['typed', 'numeric'];
var createDivideScalar =
/* #__PURE__ */
Object(factory["a" /* factory */])(divideScalar_name, divideScalar_dependencies, function (_ref) {
  var typed = _ref.typed,
      numeric = _ref.numeric;

  /**
   * Divide two scalar values, `x / y`.
   * This function is meant for internal use: it is used by the public functions
   * `divide` and `inv`.
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`
   * @private
   */
  var divideScalar = typed(divideScalar_name, {
    'number, number': function numberNumber(x, y) {
      return x / y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.div(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.div(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.div(y);
    },
    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit

      var one = numeric(1, Object(is["M" /* typeOf */])(y));
      res.value = divideScalar(res.value === null ? res._normalize(one) : res.value, y);
      return res;
    },
    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
      var res = y.clone();
      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit

      var one = numeric(1, Object(is["M" /* typeOf */])(x));
      res.value = divideScalar(x, y.value === null ? y._normalize(one) : y.value);
      return res;
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return x.divide(y);
    }
  });
  return divideScalar;
});
// CONCATENATED MODULE: ./src/function/arithmetic/pow.js




var pow_name = 'pow';
var pow_dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'fraction', 'number', 'Complex'];
var createPow =
/* #__PURE__ */
Object(factory["a" /* factory */])(pow_name, pow_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      identity = _ref.identity,
      multiply = _ref.multiply,
      matrix = _ref.matrix,
      number = _ref.number,
      fraction = _ref.fraction,
      Complex = _ref.Complex;

  /**
   * Calculates the power of x to y, `x ^ y`.
   * Matrix exponentiation is supported for square matrices `x`, and positive
   * integer exponents `y`.
   *
   * For cubic roots of negative numbers, the function returns the principal
   * root by default. In order to let the function return the real root,
   * math.js can be configured with `math.config({predictable: true})`.
   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
   *
   * Syntax:
   *
   *    math.pow(x, y)
   *
   * Examples:
   *
   *    math.pow(2, 3)               // returns number 8
   *
   *    const a = math.complex(2, 3)
   *    math.pow(a, 2)                // returns Complex -5 + 12i
   *
   *    const b = [[1, 2], [4, 3]]
   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    multiply, sqrt, cbrt, nthRoot
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex} y                          The exponent
   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
   */
  return typed(pow_name, {
    'number, number': _pow,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.pow(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      if (y.isInteger() || x >= 0 || config.predictable) {
        return x.pow(y);
      } else {
        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
      }
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      if (y.d !== 1) {
        if (config.predictable) {
          throw new Error('Function pow does not support non-integer exponents for fractions.');
        } else {
          return _pow(x.valueOf(), y.valueOf());
        }
      } else {
        return x.pow(y);
      }
    },
    'Array, number': _powArray,
    'Array, BigNumber': function ArrayBigNumber(x, y) {
      return _powArray(x, y.toNumber());
    },
    'Matrix, number': _powMatrix,
    'Matrix, BigNumber': function MatrixBigNumber(x, y) {
      return _powMatrix(x, y.toNumber());
    },
    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {
      return x.pow(y);
    }
  });
  /**
   * Calculates the power of x to y, x^y, for two numbers.
   * @param {number} x
   * @param {number} y
   * @return {number | Complex} res
   * @private
   */

  function _pow(x, y) {
    // Alternatively could define a 'realmode' config option or something, but
    // 'predictable' will work for now
    if (config.predictable && !Object(utils_number["i" /* isInteger */])(y) && x < 0) {
      // Check to see if y can be represented as a fraction
      try {
        var yFrac = fraction(y);
        var yNum = number(yFrac);

        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
          if (yFrac.d % 2 === 1) {
            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
          }
        }
      } catch (ex) {} // fraction() throws an error if y is Infinity, etc.
      // Unable to express y as a fraction, so continue on

    } // **for predictable mode** x^Infinity === NaN if x < -1
    // N.B. this behavour is different from `Math.pow` which gives
    // (-2)^Infinity === Infinity


    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
      return NaN;
    }

    if (Object(utils_number["i" /* isInteger */])(y) || x >= 0 || config.predictable) {
      return powNumber(x, y);
    } else {
      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow
      // x^Infinity === 0 if -1 < x < 1
      // A real number 0 is returned instead of complex(0)
      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
        return 0;
      }

      return new Complex(x, 0).pow(y, 0);
    }
  }
  /**
   * Calculate the power of a 2d array
   * @param {Array} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Array}
   * @private
   */


  function _powArray(x, y) {
    if (!Object(utils_number["i" /* isInteger */])(y) || y < 0) {
      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
    } // verify that A is a 2 dimensional square matrix


    var s = Object(utils_array["a" /* arraySize */])(x);

    if (s.length !== 2) {
      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
    }

    if (s[0] !== s[1]) {
      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
    }

    var res = identity(s[0]).valueOf();
    var px = x;

    while (y >= 1) {
      if ((y & 1) === 1) {
        res = multiply(px, res);
      }

      y >>= 1;
      px = multiply(px, px);
    }

    return res;
  }
  /**
   * Calculate the power of a 2d matrix
   * @param {Matrix} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Matrix}
   * @private
   */


  function _powMatrix(x, y) {
    return matrix(_powArray(x.valueOf(), y));
  }
});
// CONCATENATED MODULE: ./src/function/arithmetic/round.js
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }








var NO_INT = 'Number of decimals in function round must be an integer';
var round_name = 'round';
var round_dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];
var createRound =
/* #__PURE__ */
Object(factory["a" /* factory */])(round_name, round_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      zeros = _ref.zeros,
      BigNumber = _ref.BigNumber,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Round a value towards the nearest integer.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.round(x)
   *    math.round(x, n)
   *
   * Examples:
   *
   *    math.round(3.2)              // returns number 3
   *    math.round(3.8)              // returns number 4
   *    math.round(-4.2)             // returns number -4
   *    math.round(-4.7)             // returns number -5
   *    math.round(math.pi, 3)       // returns number 3.142
   *    math.round(123.45678, 2)     // returns number 123.46
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.round(c)                // returns Complex 3 - 3i
   *
   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]
   *
   * See also:
   *
   *    ceil, fix, floor
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  var round = typed(round_name, _objectSpread({}, roundNumberSignatures, {
    Complex: function Complex(x) {
      return x.round();
    },
    'Complex, number': function ComplexNumber(x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }

      return x.round(n);
    },
    'Complex, BigNumber': function ComplexBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      var _n = n.toNumber();

      return x.round(_n);
    },
    'number, BigNumber': function numberBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      return new BigNumber(x).toDecimalPlaces(n.toNumber());
    },
    BigNumber: function BigNumber(x) {
      return x.toDecimalPlaces(0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      return x.toDecimalPlaces(n.toNumber());
    },
    Fraction: function Fraction(x) {
      return x.round();
    },
    'Fraction, number': function FractionNumber(x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }

      return x.round(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since round(0) = 0
      return deepMap(x, round, true);
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, round, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, round, false);
    },
    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {
      // check scalar is zero
      if (equalScalar(x, 0)) {
        // do not execute algorithm, result will be a zero matrix
        return zeros(y.size(), y.storage());
      }

      return algorithm12(y, x, round, true);
    },
    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {
      // check scalar is zero
      if (equalScalar(x, 0)) {
        // do not execute algorithm, result will be a zero matrix
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, round, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, round, false).valueOf();
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, round, true).valueOf();
    }
  }));
  return round;
});
var roundNumberSignatures = {
  number: roundNumber,
  'number, number': function numberNumber(x, n) {
    if (!Object(utils_number["i" /* isInteger */])(n)) {
      throw new TypeError(NO_INT);
    }

    if (n < 0 || n > 15) {
      throw new Error('Number of decimals in function round must be in te range of 0-15');
    }

    return roundNumber(x, n);
  }
};
var createRoundNumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(round_name, ['typed'], function (_ref2) {
  var typed = _ref2.typed;
  return typed(round_name, roundNumberSignatures);
});
// CONCATENATED MODULE: ./src/function/arithmetic/log.js



var log_name = 'log';
var log_dependencies = ['config', 'typed', 'divideScalar', 'Complex'];
var createLog =
/* #__PURE__ */
Object(factory["a" /* factory */])(log_name, log_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      divideScalar = _ref.divideScalar,
      Complex = _ref.Complex;

  /**
   * Calculate the logarithm of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log(x)
   *    math.log(x, base)
   *
   * Examples:
   *
   *    math.log(3.5)                  // returns 1.252762968495368
   *    math.exp(math.log(2.4))        // returns 2.4
   *
   *    math.pow(10, 4)                // returns 10000
   *    math.log(10000, 10)            // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *
   *    math.log(1024, 2)              // returns 10
   *    math.pow(2, 10)                // returns 1024
   *
   * See also:
   *
   *    exp, log2, log10, log1p
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x`
   */
  var log = typed(log_name, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return logNumber(x);
      } else {
        // negative value -> complex value computation
        return new Complex(x, 0).log();
      }
    },
    Complex: function Complex(x) {
      return x.log();
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.ln();
      } else {
        // downgrade to number, return Complex valued result
        return new Complex(x.toNumber(), 0).log();
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, log);
    },
    'any, any': function anyAny(x, base) {
      // calculate logarithm for a specified base, log(x, base)
      return divideScalar(log(x), log(base));
    }
  });
  return log;
});
// CONCATENATED MODULE: ./src/function/arithmetic/log1p.js



var log1p_name = 'log1p';
var log1p_dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];
var createLog1p =
/* #__PURE__ */
Object(factory["a" /* factory */])(log1p_name, log1p_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      divideScalar = _ref.divideScalar,
      log = _ref.log,
      Complex = _ref.Complex;

  /**
   * Calculate the logarithm of a `value+1`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log1p(x)
   *    math.log1p(x, base)
   *
   * Examples:
   *
   *    math.log1p(2.5)                 // returns 1.252762968495368
   *    math.exp(math.log1p(1.4))       // returns 2.4
   *
   *    math.pow(10, 4)                 // returns 10000
   *    math.log1p(9999, 10)            // returns 4
   *    math.log1p(9999) / math.log(10) // returns 4
   *
   * See also:
   *
   *    exp, log, log2, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm of `x+1`.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x+1` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x+1`
   */
  var log1p = typed(log1p_name, {
    number: function number(x) {
      if (x >= -1 || config.predictable) {
        return Object(utils_number["k" /* log1p */])(x);
      } else {
        // negative value -> complex value computation
        return _log1pComplex(new Complex(x, 0));
      }
    },
    Complex: _log1pComplex,
    BigNumber: function BigNumber(x) {
      var y = x.plus(1);

      if (!y.isNegative() || config.predictable) {
        return y.ln();
      } else {
        // downgrade to number, return Complex valued result
        return _log1pComplex(new Complex(x.toNumber(), 0));
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, log1p);
    },
    'any, any': function anyAny(x, base) {
      // calculate logarithm for a specified base, log1p(x, base)
      return divideScalar(log1p(x), log(base));
    }
  });
  /**
   * Calculate the natural logarithm of a complex number + 1
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */

  function _log1pComplex(x) {
    var xRe1p = x.re + 1;
    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));
  }

  return log1p;
});
// CONCATENATED MODULE: ./src/function/arithmetic/nthRoots.js

var nthRoots_name = 'nthRoots';
var nthRoots_dependencies = ['config', 'typed', 'divideScalar', 'Complex'];
var createNthRoots =
/* #__PURE__ */
Object(factory["a" /* factory */])(nthRoots_name, nthRoots_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      divideScalar = _ref.divideScalar,
      Complex = _ref.Complex;

  /**
   * Calculate the nth roots of a value.
   * An nth root of a positive real number A,
   * is a positive real solution of the equation "x^root = A".
   * This function returns an array of complex values.
   *
   * Syntax:
   *
   *    math.nthRoots(x)
   *    math.nthRoots(x, root)
   *
   * Examples:
   *
   *    math.nthRoots(1)
   *    // returns [
   *    //   {re: 1, im: 0},
   *    //   {re: -1, im: 0}
   *    // ]
   *    nthRoots(1, 3)
   *    // returns [
   *    //   { re: 1, im: 0 },
   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },
   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }
   *    ]
   *
   * See also:
   *
   *    nthRoot, pow, sqrt
   *
   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
   */
  var nthRoots = typed(nthRoots_name, {
    Complex: function Complex(x) {
      return _nthComplexRoots(x, 2);
    },
    'Complex, number': _nthComplexRoots
  });
  /**
   * Each function here returns a real multiple of i as a Complex value.
   * @param  {number} val
   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3
   */
  // This is used to fix float artifacts for zero-valued components.

  var _calculateExactResult = [function realPos(val) {
    return new Complex(val, 0);
  }, function imagPos(val) {
    return new Complex(0, val);
  }, function realNeg(val) {
    return new Complex(-val, 0);
  }, function imagNeg(val) {
    return new Complex(0, -val);
  }];
  /**
   * Calculate the nth root of a Complex Number a using De Movire's Theorem.
   * @param  {Complex} a
   * @param  {number} root
   * @return {Array} array of n Complex Roots
   */

  function _nthComplexRoots(a, root) {
    if (root < 0) throw new Error('Root must be greater than zero');
    if (root === 0) throw new Error('Root must be non-zero');
    if (root % 1 !== 0) throw new Error('Root must be an integer');
    if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];
    var aIsNumeric = typeof a === 'number';
    var offset; // determine the offset (argument of a)/(pi/2)

    if (aIsNumeric || a.re === 0 || a.im === 0) {
      if (aIsNumeric) {
        offset = 2 * +(a < 0); // numeric value on the real axis
      } else if (a.im === 0) {
        offset = 2 * +(a.re < 0); // complex value on the real axis
      } else {
        offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis
      }
    }

    var arg = a.arg();
    var abs = a.abs();
    var roots = [];
    var r = Math.pow(abs, 1 / root);

    for (var k = 0; k < root; k++) {
      var halfPiFactor = (offset + 4 * k) / root;
      /**
       * If (offset + 4*k)/root is an integral multiple of pi/2
       * then we can produce a more exact result.
       */

      if (halfPiFactor === Math.round(halfPiFactor)) {
        roots.push(_calculateExactResult[halfPiFactor % 4](r));
        continue;
      }

      roots.push(new Complex({
        r: r,
        phi: (arg + 2 * Math.PI * k) / root
      }));
    }

    return roots;
  }

  return nthRoots;
});
// CONCATENATED MODULE: ./src/function/arithmetic/dotPow.js







var dotPow_name = 'dotPow';
var dotPow_dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];
var createDotPow =
/* #__PURE__ */
Object(factory["a" /* factory */])(dotPow_name, dotPow_dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar,
      matrix = _ref.matrix,
      pow = _ref.pow,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculates the power of x to y element wise.
   *
   * Syntax:
   *
   *    math.dotPow(x, y)
   *
   * Examples:
   *
   *    math.dotPow(2, 3)            // returns number 8
   *
   *    const a = [[1, 2], [4, 3]]
   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]
   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    pow, sqrt, multiply
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
   */

  var dotPow = typed(dotPow_name, {
    'any, any': pow,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, pow, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, pow, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, pow, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, pow);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return dotPow(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return dotPow(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return dotPow(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, dotPow, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, dotPow, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, dotPow, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, dotPow, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, dotPow, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, dotPow, true).valueOf();
    }
  });
  return dotPow;
});
// CONCATENATED MODULE: ./src/function/arithmetic/dotDivide.js








var dotDivide_name = 'dotDivide';
var dotDivide_dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];
var createDotDivide =
/* #__PURE__ */
Object(factory["a" /* factory */])(dotDivide_name, dotDivide_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      divideScalar = _ref.divideScalar,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Divide two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotDivide(x, y)
   *
   * Examples:
   *
   *    math.dotDivide(2, 4)   // returns 0.5
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]
   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]
   *
   * See also:
   *
   *    divide, multiply, dotMultiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
   */

  var dotDivide = typed(dotDivide_name, {
    'any, any': divideScalar,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, divideScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, divideScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, divideScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, divideScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return dotDivide(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return dotDivide(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return dotDivide(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, divideScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, divideScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, divideScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, divideScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, divideScalar, true).valueOf();
    }
  });
  return dotDivide;
});
// CONCATENATED MODULE: ./src/function/algebra/solver/utils/solveValidation.js



function createSolveValidation(_ref) {
  var DenseMatrix = _ref.DenseMatrix;

  /**
   * Validates matrix and column vector b for backward/forward substitution algorithms.
   *
   * @param {Matrix} m            An N x N matrix
   * @param {Array | Matrix} b    A column vector
   * @param {Boolean} copy        Return a copy of vector b
   *
   * @return {DenseMatrix}        Dense column vector b
   */
  return function solveValidation(m, b, copy) {
    // matrix size
    var size = m.size(); // validate matrix dimensions

    if (size.length !== 2) {
      throw new RangeError('Matrix must be two dimensional (size: ' + Object(utils_string["d" /* format */])(size) + ')');
    } // rows & columns


    var rows = size[0];
    var columns = size[1]; // validate rows & columns

    if (rows !== columns) {
      throw new RangeError('Matrix must be square (size: ' + Object(utils_string["d" /* format */])(size) + ')');
    } // vars


    var data, i, bdata; // check b is matrix

    if (Object(is["v" /* isMatrix */])(b)) {
      // matrix size
      var msize = b.size(); // vector

      if (msize.length === 1) {
        // check vector length
        if (msize[0] !== rows) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        } // create data array


        data = []; // matrix data (DenseMatrix)

        bdata = b._data; // loop b data

        for (i = 0; i < rows; i++) {
          // row array
          data[i] = [bdata[i]];
        } // return Dense Matrix


        return new DenseMatrix({
          data: data,
          size: [rows, 1],
          datatype: b._datatype
        });
      } // two dimensions


      if (msize.length === 2) {
        // array must be a column vector
        if (msize[0] !== rows || msize[1] !== 1) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        } // check matrix type


        if (Object(is["n" /* isDenseMatrix */])(b)) {
          // check a copy is needed
          if (copy) {
            // create data array
            data = []; // matrix data (DenseMatrix)

            bdata = b._data; // loop b data

            for (i = 0; i < rows; i++) {
              // row array
              data[i] = [bdata[i][0]];
            } // return Dense Matrix


            return new DenseMatrix({
              data: data,
              size: [rows, 1],
              datatype: b._datatype
            });
          } // b is already a column vector


          return b;
        } // create data array


        data = [];

        for (i = 0; i < rows; i++) {
          data[i] = [0];
        } // sparse matrix arrays


        var values = b._values;
        var index = b._index;
        var ptr = b._ptr; // loop values in column 0

        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
          // row
          i = index[k]; // add to data

          data[i][0] = values[k];
        } // return Dense Matrix


        return new DenseMatrix({
          data: data,
          size: [rows, 1],
          datatype: b._datatype
        });
      } // throw error


      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
    } // check b is array


    if (Object(is["b" /* isArray */])(b)) {
      // size
      var asize = Object(utils_array["a" /* arraySize */])(b); // check matrix dimensions, vector

      if (asize.length === 1) {
        // check vector length
        if (asize[0] !== rows) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        } // create data array


        data = []; // loop b

        for (i = 0; i < rows; i++) {
          // row array
          data[i] = [b[i]];
        } // return Dense Matrix


        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      }

      if (asize.length === 2) {
        // array must be a column vector
        if (asize[0] !== rows || asize[1] !== 1) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        } // create data array


        data = []; // loop b data

        for (i = 0; i < rows; i++) {
          // row array
          data[i] = [b[i][0]];
        } // return Dense Matrix


        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      } // throw error


      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
    }
  };
}
// CONCATENATED MODULE: ./src/function/algebra/solver/lsolve.js


var lsolve_name = 'lsolve';
var lsolve_dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createLsolve =
/* #__PURE__ */
Object(factory["a" /* factory */])(lsolve_name, lsolve_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      subtract = _ref.subtract,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var solveValidation = createSolveValidation({
    DenseMatrix: DenseMatrix
  });
  /**
   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolve(L, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = lsolve(a, b)  // [[-5.5], [20]]
   *
   * See also:
   *
   *    lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */

  return typed(lsolve_name, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      // process matrix
      return _sparseForwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      // process matrix
      return _denseForwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      // create dense matrix from array
      var m = matrix(a); // use matrix implementation

      var r = _denseForwardSubstitution(m, b); // result


      return r.valueOf();
    }
  });

  function _denseForwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true); // column vector data

    var bdata = b._data; // rows & columns

    var rows = m._size[0];
    var columns = m._size[1]; // result

    var x = []; // data

    var data = m._data; // forward solve m * x = b, loop columns

    for (var j = 0; j < columns; j++) {
      // b[j]
      var bj = bdata[j][0] || 0; // x[j]

      var xj = void 0; // forward substitution (outer product) avoids inner looping when bj === 0

      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        var vjj = data[j][j]; // check vjj

        if (equalScalar(vjj, 0)) {
          // system cannot be solved
          throw new Error('Linear system cannot be solved since matrix is singular');
        } // calculate xj


        xj = divideScalar(bj, vjj); // loop rows

        for (var i = j + 1; i < rows; i++) {
          // update copy of b
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
        }
      } else {
        // zero @ j
        xj = 0;
      } // update x


      x[j] = [xj];
    } // return vector


    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }

  function _sparseForwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true); // column vector data

    var bdata = b._data; // rows & columns

    var rows = m._size[0];
    var columns = m._size[1]; // matrix arrays

    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // vars

    var i, k; // result

    var x = []; // forward solve m * x = b, loop columns

    for (var j = 0; j < columns; j++) {
      // b[j]
      var bj = bdata[j][0] || 0; // forward substitution (outer product) avoids inner looping when bj === 0

      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        var vjj = 0; // lower triangular matrix values & index (column j)

        var jvalues = [];
        var jindex = []; // last index in column

        var l = ptr[j + 1]; // values in column, find value @ [j, j]

        for (k = ptr[j]; k < l; k++) {
          // row
          i = index[k]; // check row (rows are not sorted!)

          if (i === j) {
            // update vjj
            vjj = values[k];
          } else if (i > j) {
            // store lower triangular
            jvalues.push(values[k]);
            jindex.push(i);
          }
        } // at this point we must have a value @ [j, j]


        if (equalScalar(vjj, 0)) {
          // system cannot be solved, there is no value @ [j, j]
          throw new Error('Linear system cannot be solved since matrix is singular');
        } // calculate xj


        var xj = divideScalar(bj, vjj); // loop lower triangular

        for (k = 0, l = jindex.length; k < l; k++) {
          // row
          i = jindex[k]; // update copy of b

          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];
        } // update x


        x[j] = [xj];
      } else {
        // update x
        x[j] = [0];
      }
    } // return vector


    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
});
// CONCATENATED MODULE: ./src/function/algebra/solver/usolve.js


var usolve_name = 'usolve';
var usolve_dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createUsolve =
/* #__PURE__ */
Object(factory["a" /* factory */])(usolve_name, usolve_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      subtract = _ref.subtract,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var solveValidation = createSolveValidation({
    DenseMatrix: DenseMatrix
  });
  /**
   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolve(U, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = usolve(a, b)  // [[8], [9]]
   *
   * See also:
   *
   *    lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */

  return typed(usolve_name, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      // process matrix
      return _sparseBackwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      // process matrix
      return _denseBackwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      // create dense matrix from array
      var m = matrix(a); // use matrix implementation

      var r = _denseBackwardSubstitution(m, b); // result


      return r.valueOf();
    }
  });

  function _denseBackwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true); // column vector data

    var bdata = b._data; // rows & columns

    var rows = m._size[0];
    var columns = m._size[1]; // result

    var x = []; // arrays

    var data = m._data; // backward solve m * x = b, loop columns (backwards)

    for (var j = columns - 1; j >= 0; j--) {
      // b[j]
      var bj = bdata[j][0] || 0; // x[j]

      var xj = void 0; // backward substitution (outer product) avoids inner looping when bj === 0

      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        var vjj = data[j][j]; // check vjj

        if (equalScalar(vjj, 0)) {
          // system cannot be solved
          throw new Error('Linear system cannot be solved since matrix is singular');
        } // calculate xj


        xj = divideScalar(bj, vjj); // loop rows

        for (var i = j - 1; i >= 0; i--) {
          // update copy of b
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
        }
      } else {
        // zero value @ j
        xj = 0;
      } // update x


      x[j] = [xj];
    } // return column vector


    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }

  function _sparseBackwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true); // column vector data

    var bdata = b._data; // rows & columns

    var rows = m._size[0];
    var columns = m._size[1]; // matrix arrays

    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // vars

    var i, k; // result

    var x = []; // backward solve m * x = b, loop columns (backwards)

    for (var j = columns - 1; j >= 0; j--) {
      // b[j]
      var bj = bdata[j][0] || 0; // backward substitution (outer product) avoids inner looping when bj === 0

      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        var vjj = 0; // upper triangular matrix values & index (column j)

        var jvalues = [];
        var jindex = []; // first & last indeces in column

        var f = ptr[j];
        var l = ptr[j + 1]; // values in column, find value @ [j, j], loop backwards

        for (k = l - 1; k >= f; k--) {
          // row
          i = index[k]; // check row

          if (i === j) {
            // update vjj
            vjj = values[k];
          } else if (i < j) {
            // store upper triangular
            jvalues.push(values[k]);
            jindex.push(i);
          }
        } // at this point we must have a value @ [j, j]


        if (equalScalar(vjj, 0)) {
          // system cannot be solved, there is no value @ [j, j]
          throw new Error('Linear system cannot be solved since matrix is singular');
        } // calculate xj


        var xj = divideScalar(bj, vjj); // loop upper triangular

        for (k = 0, l = jindex.length; k < l; k++) {
          // row
          i = jindex[k]; // update copy of b

          bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];
        } // update x


        x[j] = [xj];
      } else {
        // update x
        x[j] = [0];
      }
    } // return vector


    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
});
// CONCATENATED MODULE: ./src/type/matrix/utils/algorithm08.js


var algorithm08_name = 'algorithm08';
var algorithm08_dependencies = ['typed', 'equalScalar'];
var createAlgorithm08 =
/* #__PURE__ */
Object(factory["a" /* factory */])(algorithm08_name, algorithm08_dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm08(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError["a" /* DimensionError */](asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!avalues || !bvalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrices');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = [];
    var cindex = [];
    var cptr = []; // matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspace

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // vars

    var k, k0, k1, i; // loop columns

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop values in a

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // mark workspace

        w[i] = mark; // set value

        x[i] = avalues[k]; // add index

        cindex.push(i);
      } // loop values in b


      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check value exists in workspace

        if (w[i] === mark) {
          // evaluate callback
          x[i] = cf(x[i], bvalues[k]);
        }
      } // initialize first index in j


      k = cptr[j]; // loop index in j

      while (k < cindex.length) {
        // row
        i = cindex[k]; // value @ i

        var v = x[i]; // check for zero value

        if (!eq(v, zero)) {
          // push value
          cvalues.push(v); // increment pointer

          k++;
        } else {
          // remove value @ i, do not increment pointer
          cindex.splice(k, 1);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
// CONCATENATED MODULE: ./src/function/bitwise/leftShift.js










var leftShift_name = 'leftShift';
var leftShift_dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createLeftShift =
/* #__PURE__ */
Object(factory["a" /* factory */])(leftShift_name, leftShift_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      zeros = _ref.zeros,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm08 = createAlgorithm08({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.leftShift(x, y)
   *
   * Examples:
   *
   *    math.leftShift(1, 2)               // returns number 4
   *
   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]
   *
   * See also:
   *
   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
   */

  var leftShift = typed(leftShift_name, {
    'number, number': leftShiftNumber,
    'BigNumber, BigNumber': leftShiftBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, leftShift, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, leftShift, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, leftShift, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, leftShift);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return leftShift(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return leftShift(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return leftShift(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, leftShift, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, leftShift, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, leftShift, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, leftShift, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return leftShift(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return leftShift(x, matrix(y)).valueOf();
    }
  });
  return leftShift;
});
// CONCATENATED MODULE: ./src/function/bitwise/rightArithShift.js










var rightArithShift_name = 'rightArithShift';
var rightArithShift_dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createRightArithShift =
/* #__PURE__ */
Object(factory["a" /* factory */])(rightArithShift_name, rightArithShift_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      zeros = _ref.zeros,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm08 = createAlgorithm08({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightArithShift(x, y)
   *
   * Examples:
   *
   *    math.rightArithShift(4, 2)               // returns number 1
   *
   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
   */

  var rightArithShift = typed(rightArithShift_name, {
    'number, number': rightArithShiftNumber,
    'BigNumber, BigNumber': rightArithShiftBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, rightArithShift, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, rightArithShift, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, rightArithShift, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, rightArithShift);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return rightArithShift(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return rightArithShift(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return rightArithShift(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, rightArithShift, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, rightArithShift, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, rightArithShift, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, rightArithShift, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return rightArithShift(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return rightArithShift(x, matrix(y)).valueOf();
    }
  });
  return rightArithShift;
});
// CONCATENATED MODULE: ./src/function/bitwise/rightLogShift.js









var rightLogShift_name = 'rightLogShift';
var rightLogShift_dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createRightLogShift =
/* #__PURE__ */
Object(factory["a" /* factory */])(rightLogShift_name, rightLogShift_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      zeros = _ref.zeros,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm08 = createAlgorithm08({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightLogShift(x, y)
   *
   * Examples:
   *
   *    math.rightLogShift(4, 2)               // returns number 1
   *
   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
   *
   * @param  {number | Array | Matrix} x Value to be shifted
   * @param  {number} y Amount of shifts
   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
   */

  var rightLogShift = typed(rightLogShift_name, {
    'number, number': rightLogShiftNumber,
    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, rightLogShift, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, rightLogShift, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, rightLogShift, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, rightLogShift);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return rightLogShift(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return rightLogShift(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return rightLogShift(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, rightLogShift, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, rightLogShift, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, rightLogShift, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, rightLogShift, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return rightLogShift(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return rightLogShift(x, matrix(y)).valueOf();
    }
  });
  return rightLogShift;
});
// CONCATENATED MODULE: ./src/function/logical/and.js







var and_name = 'and';
var and_dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];
var createAnd =
/* #__PURE__ */
Object(factory["a" /* factory */])(and_name, and_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      zeros = _ref.zeros,
      not = _ref.not;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = createAlgorithm06({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.and(x, y)
   *
   * Examples:
   *
   *    math.and(2, 4)   // returns true
   *
   *    a = [2, 0, 0]
   *    b = [3, 7, 0]
   *    c = 0
   *
   *    math.and(a, b)   // returns [true, false, false]
   *    math.and(a, c)   // returns [false, false, false]
   *
   * See also:
   *
   *    not, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when both inputs are defined with a nonzero/nonempty value.
   */

  var and = typed(and_name, {
    'number, number': andNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return and(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, and, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, and, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, and, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, and);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return and(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return and(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return and(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm11(x, y, and, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm14(x, y, and, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm11(y, x, and, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm14(y, x, and, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return and(matrix(x), y).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return and(x, matrix(y)).valueOf();
    }
  });
  return and;
});
// CONCATENATED MODULE: ./src/function/relational/compare.js








var compare_name = 'compare';
var compare_dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];
var createCompare =
/* #__PURE__ */
Object(factory["a" /* factory */])(compare_name, compare_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      equalScalar = _ref.equalScalar,
      matrix = _ref.matrix,
      BigNumber = _ref.BigNumber,
      Fraction = _ref.Fraction,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm05 = createAlgorithm05({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * x and y are considered equal when the relative difference between x and y
   * is smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.compare(x, y)
   *
   * Examples:
   *
   *    math.compare(6, 1)           // returns 1
   *    math.compare(2, 3)           // returns -1
   *    math.compare(7, 7)           // returns 0
   *    math.compare('10', '2')      // returns 1
   *    math.compare('1000', '1e3')  // returns 0
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compare(a, b)           // returns 1
   *
   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
   *
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:
   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
   */

  var compare = typed(compare_name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x === y ? 0 : x > y ? 1 : -1;
    },
    'number, number': function numberNumber(x, y) {
      return Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return nearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return new Fraction(x.compare(y));
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return compare(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, compare);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, compare, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, compare, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, compare);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return compare(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return compare(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return compare(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, compare, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, compare, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, compare, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, compare, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, compare, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, compare, true).valueOf();
    }
  });
  return compare;
});
var createCompareNumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(compare_name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(compare_name, {
    'number, number': function numberNumber(x, y) {
      return Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
    }
  });
});
// EXTERNAL MODULE: ./node_modules/javascript-natural-sort/naturalSort.js
var naturalSort = __webpack_require__(12);
var naturalSort_default = /*#__PURE__*/__webpack_require__.n(naturalSort);

// CONCATENATED MODULE: ./src/function/relational/compareNatural.js



var compareNatural_name = 'compareNatural';
var compareNatural_dependencies = ['typed', 'compare'];
var createCompareNatural =
/* #__PURE__ */
Object(factory["a" /* factory */])(compareNatural_name, compareNatural_dependencies, function (_ref) {
  var typed = _ref.typed,
      compare = _ref.compare;
  var compareBooleans = compare.signatures['boolean,boolean'];
  /**
   * Compare two values of any type in a deterministic, natural way.
   *
   * For numeric values, the function works the same as `math.compare`.
   * For types of values that can't be compared mathematically,
   * the function compares in a natural way.
   *
   * For numeric values, x and y are considered equal when the relative
   * difference between x and y is smaller than the configured epsilon.
   * The function cannot be used to compare values smaller than
   * approximately 2.22e-16.
   *
   * For Complex numbers, first the real parts are compared. If equal,
   * the imaginary parts are compared.
   *
   * Strings are compared with a natural sorting algorithm, which
   * orders strings in a "logic" way following some heuristics.
   * This differs from the function `compare`, which converts the string
   * into a numeric value and compares that. The function `compareText`
   * on the other hand compares text lexically.
   *
   * Arrays and Matrices are compared value by value until there is an
   * unequal pair of values encountered. Objects are compared by sorted
   * keys until the keys or their values are unequal.
   *
   * Syntax:
   *
   *    math.compareNatural(x, y)
   *
   * Examples:
   *
   *    math.compareNatural(6, 1)              // returns 1
   *    math.compareNatural(2, 3)              // returns -1
   *    math.compareNatural(7, 7)              // returns 0
   *
   *    math.compareNatural('10', '2')         // returns 1
   *    math.compareText('10', '2')            // returns -1
   *    math.compare('10', '2')                // returns 1
   *
   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
   *    math.compare('Answer: 10', 'Answer: 2')
   *        // Error: Cannot convert "Answer: 10" to a number
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compareNatural(a, b)              // returns 1
   *
   *    const c = math.complex('2 + 3i')
   *    const d = math.complex('2 + 4i')
   *    math.compareNatural(c, d)              // returns -1
   *
   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
   *    math.compareNatural([1, 2], [1, 2])       // returns 0
   *
   *    math.compareNatural({a: 2}, {a: 4})       // returns -1
   *
   * See also:
   *
   *    compare, compareText
   *
   * @param  {*} x First value to compare
   * @param  {*} y Second value to compare
   * @return {number} Returns the result of the comparison:
   *                  1 when x > y, -1 when x < y, and 0 when x == y.
   */

  var compareNatural = typed(compareNatural_name, {
    'any, any': function anyAny(x, y) {
      var typeX = Object(is["M" /* typeOf */])(x);
      var typeY = Object(is["M" /* typeOf */])(y);
      var c; // numeric types

      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
        c = compare(x, y);

        if (c.toString() !== '0') {
          // c can be number, BigNumber, or Fraction
          return c > 0 ? 1 : -1; // return a number
        } else {
          return naturalSort_default()(typeX, typeY);
        }
      } // matrix types


      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
        c = compareMatricesAndArrays(x, y);

        if (c !== 0) {
          return c;
        } else {
          return naturalSort_default()(typeX, typeY);
        }
      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'


      if (typeX !== typeY) {
        return naturalSort_default()(typeX, typeY);
      }

      if (typeX === 'Complex') {
        return compareComplexNumbers(x, y);
      }

      if (typeX === 'Unit') {
        if (x.equalBase(y)) {
          return compareNatural(x.value, y.value);
        } // compare by units


        return compareArrays(x.formatUnits(), y.formatUnits());
      }

      if (typeX === 'boolean') {
        return compareBooleans(x, y);
      }

      if (typeX === 'string') {
        return naturalSort_default()(x, y);
      }

      if (typeX === 'Object') {
        return compareObjects(x, y);
      }

      if (typeX === 'null') {
        return 0;
      }

      if (typeX === 'undefined') {
        return 0;
      } // this should not occur...


      throw new TypeError('Unsupported type of value "' + typeX + '"');
    }
  });
  /**
   * Compare mixed matrix/array types, by converting to same-shaped array.
   * This comparator is non-deterministic regarding input types.
   * @param {Array | SparseMatrix | DenseMatrix | *} x
   * @param {Array | SparseMatrix | DenseMatrix | *} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */

  function compareMatricesAndArrays(x, y) {
    if (Object(is["H" /* isSparseMatrix */])(x) && Object(is["H" /* isSparseMatrix */])(y)) {
      return compareArrays(x.toJSON().values, y.toJSON().values);
    }

    if (Object(is["H" /* isSparseMatrix */])(x)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(x.toArray(), y);
    }

    if (Object(is["H" /* isSparseMatrix */])(y)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(x, y.toArray());
    } // convert DenseArray into Array


    if (Object(is["n" /* isDenseMatrix */])(x)) {
      return compareMatricesAndArrays(x.toJSON().data, y);
    }

    if (Object(is["n" /* isDenseMatrix */])(y)) {
      return compareMatricesAndArrays(x, y.toJSON().data);
    } // convert scalars to array


    if (!Array.isArray(x)) {
      return compareMatricesAndArrays([x], y);
    }

    if (!Array.isArray(y)) {
      return compareMatricesAndArrays(x, [y]);
    }

    return compareArrays(x, y);
  }
  /**
   * Compare two Arrays
   *
   * - First, compares value by value
   * - Next, if all corresponding values are equal,
   *   look at the length: longest array will be considered largest
   *
   * @param {Array} x
   * @param {Array} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  function compareArrays(x, y) {
    // compare each value
    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
      var v = compareNatural(x[i], y[i]);

      if (v !== 0) {
        return v;
      }
    } // compare the size of the arrays


    if (x.length > y.length) {
      return 1;
    }

    if (x.length < y.length) {
      return -1;
    } // both Arrays have equal size and content


    return 0;
  }
  /**
   * Compare two objects
   *
   * - First, compare sorted property names
   * - Next, compare the property values
   *
   * @param {Object} x
   * @param {Object} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  function compareObjects(x, y) {
    var keysX = Object.keys(x);
    var keysY = Object.keys(y); // compare keys

    keysX.sort(naturalSort_default.a);
    keysY.sort(naturalSort_default.a);
    var c = compareArrays(keysX, keysY);

    if (c !== 0) {
      return c;
    } // compare values


    for (var i = 0; i < keysX.length; i++) {
      var v = compareNatural(x[keysX[i]], y[keysY[i]]);

      if (v !== 0) {
        return v;
      }
    }

    return 0;
  }

  return compareNatural;
});
/**
 * Compare two complex numbers, `x` and `y`:
 *
 * - First, compare the real values of `x` and `y`
 * - If equal, compare the imaginary values of `x` and `y`
 *
 * @params {Complex} x
 * @params {Complex} y
 * @returns {number} Returns the comparison result: -1, 0, or 1
 */

function compareComplexNumbers(x, y) {
  if (x.re > y.re) {
    return 1;
  }

  if (x.re < y.re) {
    return -1;
  }

  if (x.im > y.im) {
    return 1;
  }

  if (x.im < y.im) {
    return -1;
  }

  return 0;
}
// CONCATENATED MODULE: ./src/function/relational/compareText.js




var compareText_name = 'compareText';
var compareText_dependencies = ['typed', 'matrix'];
var createCompareText =
/* #__PURE__ */
Object(factory["a" /* factory */])(compareText_name, compareText_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Compare two strings lexically. Comparison is case sensitive.
   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.compareText(x, y)
   *
   * Examples:
   *
   *    math.compareText('B', 'A')     // returns 1
   *    math.compareText('2', '10')    // returns 1
   *    math.compare('2', '10')        // returns -1
   *    math.compareNatural('2', '10') // returns -1
   *
   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, equalText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns the result of the comparison:
   *                                        1 when x > y, -1 when x < y, and 0 when x == y.
   */

  var compareText = typed(compareText_name, {
    'any, any': utils_string["a" /* compareText */],
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, utils_string["a" /* compareText */]);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return compareText(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return compareText(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return compareText(x, matrix(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, utils_string["a" /* compareText */], false);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, utils_string["a" /* compareText */], true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, utils_string["a" /* compareText */], false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, utils_string["a" /* compareText */], true).valueOf();
    }
  });
  return compareText;
});
var createCompareTextNumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(compareText_name, ['typed'], function (_ref2) {
  var typed = _ref2.typed;
  return typed(compareText_name, {
    'any, any': utils_string["a" /* compareText */]
  });
});
// CONCATENATED MODULE: ./src/function/relational/equal.js






var equal_name = 'equal';
var equal_dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createEqual =
/* #__PURE__ */
Object(factory["a" /* factory */])(equal_name, equal_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether two values are equal.
   *
   * The function tests whether the relative difference between x and y is
   * smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is only
   * equal to `null` and nothing else, and `undefined` is only equal to
   * `undefined` and nothing else. Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.equal(x, y)
   *
   * Examples:
   *
   *    math.equal(2 + 2, 3)         // returns false
   *    math.equal(2 + 2, 4)         // returns true
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.equal(a, b)             // returns true
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.equal(c, d)             // returns [true, false, true]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.equal("1000", "1e3")    // returns true
   *    math.equal(0, null)          // returns false
   *
   * See also:
   *
   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
   *
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
   */

  var equal = typed(equal_name, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y === null;
      }

      if (y === null) {
        return x === null;
      }

      if (x === undefined) {
        return y === undefined;
      }

      if (y === undefined) {
        return x === undefined;
      }

      return equalScalar(x, y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, equalScalar);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, equalScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, equalScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, equalScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return equal(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return equal(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return equal(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, equalScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, equalScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, equalScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, equalScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, equalScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, equalScalar, true).valueOf();
    }
  });
  return equal;
});
var createEqualNumber = Object(factory["a" /* factory */])(equal_name, ['typed', 'equalScalar'], function (_ref2) {
  var typed = _ref2.typed,
      equalScalar = _ref2.equalScalar;
  return typed(equal_name, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y === null;
      }

      if (y === null) {
        return x === null;
      }

      if (x === undefined) {
        return y === undefined;
      }

      if (y === undefined) {
        return x === undefined;
      }

      return equalScalar(x, y);
    }
  });
});
// CONCATENATED MODULE: ./src/function/relational/equalText.js

var equalText_name = 'equalText';
var equalText_dependencies = ['typed', 'compareText', 'isZero'];
var createEqualText =
/* #__PURE__ */
Object(factory["a" /* factory */])(equalText_name, equalText_dependencies, function (_ref) {
  var typed = _ref.typed,
      compareText = _ref.compareText,
      isZero = _ref.isZero;

  /**
   * Check equality of two strings. Comparison is case sensitive.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.equalText(x, y)
   *
   * Examples:
   *
   *    math.equalText('Hello', 'Hello')     // returns true
   *    math.equalText('a', 'A')             // returns false
   *    math.equal('2e3', '2000')            // returns true
   *    math.equalText('2e3', '2000')        // returns false
   *
   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
   *
   * See also:
   *
   *    equal, compareText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
   */
  return typed(equalText_name, {
    'any, any': function anyAny(x, y) {
      return isZero(compareText(x, y));
    }
  });
});
// CONCATENATED MODULE: ./src/function/relational/smaller.js








var smaller_name = 'smaller';
var smaller_dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createSmaller =
/* #__PURE__ */
Object(factory["a" /* factory */])(smaller_name, smaller_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether value x is smaller than y.
   *
   * The function returns true when x is smaller than y and the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smaller(x, y)
   *
   * Examples:
   *
   *    math.smaller(2, 3)            // returns true
   *    math.smaller(5, 2 * 2)        // returns false
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.smaller(a, b)            // returns true
   *
   * See also:
   *
   *    equal, unequal, smallerEq, smaller, smallerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */

  var smaller = typed(smaller_name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x < y;
    },
    'number, number': function numberNumber(x, y) {
      return x < y && !Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.lt(y) && !nearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) === -1;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return smaller(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, smaller);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, smaller, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, smaller, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, smaller);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return smaller(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return smaller(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return smaller(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, smaller, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, smaller, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, smaller, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, smaller, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, smaller, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, smaller, true).valueOf();
    }
  });
  return smaller;
});
var createSmallerNumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(smaller_name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(smaller_name, {
    'number, number': function numberNumber(x, y) {
      return x < y && !Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon);
    }
  });
});
// CONCATENATED MODULE: ./src/function/relational/smallerEq.js








var smallerEq_name = 'smallerEq';
var smallerEq_dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createSmallerEq =
/* #__PURE__ */
Object(factory["a" /* factory */])(smallerEq_name, smallerEq_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether value x is smaller or equal to y.
   *
   * The function returns true when x is smaller than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smallerEq(x, y)
   *
   * Examples:
   *
   *    math.smaller(1 + 2, 3)        // returns false
   *    math.smallerEq(1 + 2, 3)      // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */

  var smallerEq = typed(smallerEq_name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x <= y;
    },
    'number, number': function numberNumber(x, y) {
      return x <= y || Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.lte(y) || nearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) !== 1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return smallerEq(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, smallerEq);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, smallerEq, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, smallerEq, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, smallerEq);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return smallerEq(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return smallerEq(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return smallerEq(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, smallerEq, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, smallerEq, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, smallerEq, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, smallerEq, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, smallerEq, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, smallerEq, true).valueOf();
    }
  });
  return smallerEq;
});
var createSmallerEqNumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(smallerEq_name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(smallerEq_name, {
    'number, number': function numberNumber(x, y) {
      return x <= y || Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon);
    }
  });
});
// CONCATENATED MODULE: ./src/function/relational/larger.js








var larger_name = 'larger';
var larger_dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createLarger =
/* #__PURE__ */
Object(factory["a" /* factory */])(larger_name, larger_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether value x is larger than y.
   *
   * The function returns true when x is larger than y and the relative
   * difference between x and y is larger than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.larger(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 3)             // returns false
   *    math.larger(5, 2 + 2)         // returns true
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.larger(a, b)             // returns false
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
   */

  var larger = typed(larger_name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x > y;
    },
    'number, number': function numberNumber(x, y) {
      return x > y && !Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.gt(y) && !nearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) === 1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return larger(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, larger);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, larger, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, larger, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, larger);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return larger(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return larger(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return larger(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, larger, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, larger, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, larger, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, larger, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, larger, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, larger, true).valueOf();
    }
  });
  return larger;
});
var createLargerNumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(larger_name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(larger_name, {
    'number, number': function numberNumber(x, y) {
      return x > y && !Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon);
    }
  });
});
// CONCATENATED MODULE: ./src/function/relational/largerEq.js








var largerEq_name = 'largerEq';
var largerEq_dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createLargerEq =
/* #__PURE__ */
Object(factory["a" /* factory */])(largerEq_name, largerEq_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether value x is larger or equal to y.
   *
   * The function returns true when x is larger than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.largerEq(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 1 + 1)         // returns false
   *    math.largerEq(2, 1 + 1)       // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
   */

  var largerEq = typed(largerEq_name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x >= y;
    },
    'number, number': function numberNumber(x, y) {
      return x >= y || Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.gte(y) || nearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) !== -1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return largerEq(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, largerEq);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, largerEq, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, largerEq, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, largerEq);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return largerEq(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return largerEq(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return largerEq(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, largerEq, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, largerEq, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, largerEq, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, largerEq, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, largerEq, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, largerEq, true).valueOf();
    }
  });
  return largerEq;
});
var createLargerEqNumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(largerEq_name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(largerEq_name, {
    'number, number': function numberNumber(x, y) {
      return x >= y || Object(utils_number["m" /* nearlyEqual */])(x, y, config.epsilon);
    }
  });
});
// CONCATENATED MODULE: ./src/function/relational/deepEqual.js

var deepEqual_name = 'deepEqual';
var deepEqual_dependencies = ['typed', 'equal'];
var createDeepEqual =
/* #__PURE__ */
Object(factory["a" /* factory */])(deepEqual_name, deepEqual_dependencies, function (_ref) {
  var typed = _ref.typed,
      equal = _ref.equal;

  /**
   * Test element wise whether two matrices are equal.
   * The function accepts both matrices and scalar values.
   *
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.deepEqual(x, y)
   *
   * Examples:
   *
   *    math.deepEqual(2, 4)   // returns false
   *
   *    a = [2, 5, 1]
   *    b = [2, 7, 1]
   *
   *    math.deepEqual(a, b)   // returns false
   *    math.equal(a, b)       // returns [true, false, true]
   *
   * See also:
   *
   *    equal, unequal
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns true when the input matrices have the same size and each of their elements is equal.
   */
  return typed(deepEqual_name, {
    'any, any': function anyAny(x, y) {
      return _deepEqual(x.valueOf(), y.valueOf());
    }
  });
  /**
   * Test whether two arrays have the same size and all elements are equal
   * @param {Array | *} x
   * @param {Array | *} y
   * @return {boolean} Returns true if both arrays are deep equal
   */

  function _deepEqual(x, y) {
    if (Array.isArray(x)) {
      if (Array.isArray(y)) {
        var len = x.length;

        if (len !== y.length) {
          return false;
        }

        for (var i = 0; i < len; i++) {
          if (!_deepEqual(x[i], y[i])) {
            return false;
          }
        }

        return true;
      } else {
        return false;
      }
    } else {
      if (Array.isArray(y)) {
        return false;
      } else {
        return equal(x, y);
      }
    }
  }
});
// CONCATENATED MODULE: ./src/function/relational/unequal.js






var unequal_name = 'unequal';
var unequal_dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix'];
var createUnequal =
/* #__PURE__ */
Object(factory["a" /* factory */])(unequal_name, unequal_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      equalScalar = _ref.equalScalar,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether two values are unequal.
   *
   * The function tests whether the relative difference between x and y is
   * larger than the configured epsilon. The function cannot be used to compare
   * values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
   * Strings are compared by their numerical value.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
   * with everything except `null`, and `undefined` is unequal with everything
   * except `undefined`.
   *
   * Syntax:
   *
   *    math.unequal(x, y)
   *
   * Examples:
   *
   *    math.unequal(2 + 2, 3)       // returns true
   *    math.unequal(2 + 2, 4)       // returns false
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.unequal(a, b)           // returns false
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.unequal(c, d)           // returns [false, true, false]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.unequal(0, null)        // returns true
   * See also:
   *
   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
   */

  var unequal = typed('unequal', {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y !== null;
      }

      if (y === null) {
        return x !== null;
      }

      if (x === undefined) {
        return y !== undefined;
      }

      if (y === undefined) {
        return x !== undefined;
      }

      return _unequal(x, y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, _unequal);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, _unequal, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, _unequal, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, _unequal);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return unequal(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return unequal(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return unequal(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, _unequal, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, _unequal, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, _unequal, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, _unequal, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, _unequal, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, _unequal, true).valueOf();
    }
  });

  function _unequal(x, y) {
    return !equalScalar(x, y);
  }

  return unequal;
});
var createUnequalNumber = Object(factory["a" /* factory */])(unequal_name, ['typed', 'equalScalar'], function (_ref2) {
  var typed = _ref2.typed,
      equalScalar = _ref2.equalScalar;
  return typed(unequal_name, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y !== null;
      }

      if (y === null) {
        return x !== null;
      }

      if (x === undefined) {
        return y !== undefined;
      }

      if (y === undefined) {
        return x !== undefined;
      }

      return !equalScalar(x, y);
    }
  });
});
// CONCATENATED MODULE: ./src/function/matrix/partitionSelect.js



var partitionSelect_name = 'partitionSelect';
var partitionSelect_dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];
var createPartitionSelect =
/* #__PURE__ */
Object(factory["a" /* factory */])(partitionSelect_name, partitionSelect_dependencies, function (_ref) {
  var typed = _ref.typed,
      isNumeric = _ref.isNumeric,
      isNaN = _ref.isNaN,
      compare = _ref.compare;
  var asc = compare;

  var desc = function desc(a, b) {
    return -compare(a, b);
  };
  /**
   * Partition-based selection of an array or 1D matrix.
   * Will find the kth smallest value, and mutates the input array.
   * Uses Quickselect.
   *
   * Syntax:
   *
   *    math.partitionSelect(x, k)
   *    math.partitionSelect(x, k, compare)
   *
   * Examples:
   *
   *    math.partitionSelect([5, 10, 1], 2)           // returns 10
   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'
   *
   * See also:
   *
   *    sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Number} k            The kth smallest value to be retrieved zero-based index
   * @param {Function | 'asc' | 'desc'} [compare='asc']
   *        An optional comparator function. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {*} Returns the kth lowest value.
   */


  return typed(partitionSelect_name, {
    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
      return _partitionSelect(x, k, asc);
    },
    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {
      if (compare === 'asc') {
        return _partitionSelect(x, k, asc);
      } else if (compare === 'desc') {
        return _partitionSelect(x, k, desc);
      } else {
        throw new Error('Compare string must be "asc" or "desc"');
      }
    },
    'Array | Matrix, number, function': _partitionSelect
  });

  function _partitionSelect(x, k, compare) {
    if (!Object(utils_number["i" /* isInteger */])(k) || k < 0) {
      throw new Error('k must be a non-negative integer');
    }

    if (Object(is["v" /* isMatrix */])(x)) {
      var size = x.size();

      if (size.length > 1) {
        throw new Error('Only one dimensional matrices supported');
      }

      return quickSelect(x.valueOf(), k, compare);
    }

    if (Array.isArray(x)) {
      return quickSelect(x, k, compare);
    }
  }
  /**
   * Quickselect algorithm.
   * Code adapted from:
   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
   *
   * @param {Array} arr
   * @param {Number} k
   * @param {Function} compare
   * @private
   */


  function quickSelect(arr, k, compare) {
    if (k >= arr.length) {
      throw new Error('k out of bounds');
    } // check for NaN values since these can cause an infinite while loop


    for (var i = 0; i < arr.length; i++) {
      if (isNumeric(arr[i]) && isNaN(arr[i])) {
        return arr[i]; // return NaN
      }
    }

    var from = 0;
    var to = arr.length - 1; // if from == to we reached the kth element

    while (from < to) {
      var r = from;
      var w = to;
      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets

      while (r < w) {
        // arr[r] >= pivot
        if (compare(arr[r], pivot) >= 0) {
          // put the large values at the end
          var tmp = arr[w];
          arr[w] = arr[r];
          arr[r] = tmp;
          --w;
        } else {
          // the value is smaller than the pivot, skip
          ++r;
        }
      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)


      if (compare(arr[r], pivot) > 0) {
        --r;
      } // the r pointer is on the end of the first k elements


      if (k <= r) {
        to = r;
      } else {
        from = r + 1;
      }
    }

    return arr[k];
  }
});
// CONCATENATED MODULE: ./src/function/matrix/sort.js


var sort_name = 'sort';
var sort_dependencies = ['typed', 'matrix', 'compare', 'compareNatural'];
var createSort =
/* #__PURE__ */
Object(factory["a" /* factory */])(sort_name, sort_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      compare = _ref.compare,
      compareNatural = _ref.compareNatural;
  var compareAsc = compare;

  var compareDesc = function compareDesc(a, b) {
    return -compare(a, b);
  };
  /**
   * Sort the items in a matrix.
   *
   * Syntax:
   *
   *    math.sort(x)
   *    math.sort(x, compare)
   *
   * Examples:
   *
   *    math.sort([5, 10, 1]) // returns [1, 5, 10]
   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)
   *    // returns ['A', 'B', 'C', 'D']
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)
   *    // returns ['Tom', 'Sara', 'Langdon']
   *
   * See also:
   *
   *    filter, forEach, map, compare, compareNatural
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
   *        An optional _comparator function or name. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {Matrix | Array} Returns the sorted matrix.
   */


  return typed(sort_name, {
    Array: function Array(x) {
      _arrayIsVector(x);

      return x.sort(compareAsc);
    },
    Matrix: function Matrix(x) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(compareAsc), x.storage());
    },
    'Array, function': function ArrayFunction(x, _comparator) {
      _arrayIsVector(x);

      return x.sort(_comparator);
    },
    'Matrix, function': function MatrixFunction(x, _comparator) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(_comparator), x.storage());
    },
    'Array, string': function ArrayString(x, order) {
      _arrayIsVector(x);

      return x.sort(_comparator(order));
    },
    'Matrix, string': function MatrixString(x, order) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(_comparator(order)), x.storage());
    }
  });
  /**
   * Get the comparator for given order ('asc', 'desc', 'natural')
   * @param {'asc' | 'desc' | 'natural'} order
   * @return {Function} Returns a _comparator function
   */

  function _comparator(order) {
    if (order === 'asc') {
      return compareAsc;
    } else if (order === 'desc') {
      return compareDesc;
    } else if (order === 'natural') {
      return compareNatural;
    } else {
      throw new Error('String "asc", "desc", or "natural" expected');
    }
  }
  /**
   * Validate whether an array is one dimensional
   * Throws an error when this is not the case
   * @param {Array} array
   * @private
   */


  function _arrayIsVector(array) {
    if (Object(utils_array["a" /* arraySize */])(array).length !== 1) {
      throw new Error('One dimensional array expected');
    }
  }
  /**
   * Validate whether a matrix is one dimensional
   * Throws an error when this is not the case
   * @param {Matrix} matrix
   * @private
   */


  function _matrixIsVector(matrix) {
    if (matrix.size().length !== 1) {
      throw new Error('One dimensional matrix expected');
    }
  }
});
// CONCATENATED MODULE: ./src/function/statistics/max.js



var max_name = 'max';
var max_dependencies = ['typed', 'larger'];
var createMax =
/* #__PURE__ */
Object(factory["a" /* factory */])(max_name, max_dependencies, function (_ref) {
  var typed = _ref.typed,
      larger = _ref.larger;

  /**
   * Compute the maximum value of a matrix or a  list with values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.max(a, b, c, ...)
   *     math.max(A)
   *     math.max(A, dim)
   *
   * Examples:
   *
   *     math.max(2, 1, 4, 3)                  // returns 4
   *     math.max([2, 1, 4, 3])                // returns 4
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, min, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The maximum value
   */
  return typed(max_name, {
    // max([a, b, c, d, ...])
    'Array | Matrix': _max,
    // max([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return reduce(array, dim.valueOf(), _largest);
    },
    // max(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function max');
      }

      return _max(args);
    }
  });
  /**
   * Return the largest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is largest, or y when y is largest
   * @private
   */

  function _largest(x, y) {
    try {
      return larger(x, y) ? x : y;
    } catch (err) {
      throw improveErrorMessage(err, 'max', y);
    }
  }
  /**
   * Recursively calculate the maximum value in an n-dimensional array
   * @param {Array} array
   * @return {number} max
   * @private
   */


  function _max(array) {
    var res;
    deepForEach(array, function (value) {
      try {
        if (isNaN(value) && typeof value === 'number') {
          res = NaN;
        } else if (res === undefined || larger(value, res)) {
          res = value;
        }
      } catch (err) {
        throw improveErrorMessage(err, 'max', value);
      }
    });

    if (res === undefined) {
      throw new Error('Cannot calculate max of an empty array');
    }

    return res;
  }
});
// CONCATENATED MODULE: ./src/function/statistics/min.js



var min_name = 'min';
var min_dependencies = ['typed', 'smaller'];
var createMin =
/* #__PURE__ */
Object(factory["a" /* factory */])(min_name, min_dependencies, function (_ref) {
  var typed = _ref.typed,
      smaller = _ref.smaller;

  /**
   * Compute the minimum value of a matrix or a  list of values.
   * In case of a multi dimensional array, the minimum of the flattened array
   * will be calculated. When `dim` is provided, the minimum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.min(a, b, c, ...)
   *     math.min(A)
   *     math.min(A, dim)
   *
   * Examples:
   *
   *     math.min(2, 1, 4, 3)                  // returns 1
   *     math.min([2, 1, 4, 3])                // returns 1
   *
   *     // minimum over a specified dimension (zero-based)
   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, max, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The minimum value
   */
  return typed(min_name, {
    // min([a, b, c, d, ...])
    'Array | Matrix': _min,
    // min([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return reduce(array, dim.valueOf(), _smallest);
    },
    // min(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function min');
      }

      return _min(args);
    }
  });
  /**
   * Return the smallest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is smallest, or y when y is smallest
   * @private
   */

  function _smallest(x, y) {
    try {
      return smaller(x, y) ? x : y;
    } catch (err) {
      throw improveErrorMessage(err, 'min', y);
    }
  }
  /**
   * Recursively calculate the minimum value in an n-dimensional array
   * @param {Array} array
   * @return {number} min
   * @private
   */


  function _min(array) {
    var min;
    deepForEach(array, function (value) {
      try {
        if (isNaN(value) && typeof value === 'number') {
          min = NaN;
        } else if (min === undefined || smaller(value, min)) {
          min = value;
        }
      } catch (err) {
        throw improveErrorMessage(err, 'min', value);
      }
    });

    if (min === undefined) {
      throw new Error('Cannot calculate min of an empty array');
    }

    return min;
  }
});
// CONCATENATED MODULE: ./src/type/matrix/ImmutableDenseMatrix.js



var ImmutableDenseMatrix_name = 'ImmutableDenseMatrix';
var ImmutableDenseMatrix_dependencies = ['smaller', 'DenseMatrix'];
var createImmutableDenseMatrixClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(ImmutableDenseMatrix_name, ImmutableDenseMatrix_dependencies, function (_ref) {
  var smaller = _ref.smaller,
      DenseMatrix = _ref.DenseMatrix;

  function ImmutableDenseMatrix(data, datatype) {
    if (!(this instanceof ImmutableDenseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !Object(is["I" /* isString */])(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if (Object(is["v" /* isMatrix */])(data) || Object(is["b" /* isArray */])(data)) {
      // use DenseMatrix implementation
      var matrix = new DenseMatrix(data, datatype); // internal structures

      this._data = matrix._data;
      this._size = matrix._size;
      this._datatype = matrix._datatype;
      this._min = null;
      this._max = null;
    } else if (data && Object(is["b" /* isArray */])(data.data) && Object(is["b" /* isArray */])(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = data.datatype;
      this._min = typeof data.min !== 'undefined' ? data.min : null;
      this._max = typeof data.max !== 'undefined' ? data.max : null;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + Object(is["M" /* typeOf */])(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
      this._min = null;
      this._max = null;
    }
  }

  ImmutableDenseMatrix.prototype = new DenseMatrix();
  /**
   * Attach type information
   */

  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | ImmutableDenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */

  ImmutableDenseMatrix.prototype.subset = function (index) {
    switch (arguments.length) {
      case 1:
        {
          // use base implementation
          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix

          if (Object(is["v" /* isMatrix */])(m)) {
            // return immutable matrix
            return new ImmutableDenseMatrix({
              data: m._data,
              size: m._size,
              datatype: m._datatype
            });
          }

          return m;
        }
      // intentional fall through

      case 2:
      case 3:
        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Replace a single element in the matrix.
   * @param {Number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {ImmutableDenseMatrix} self
   */


  ImmutableDenseMatrix.prototype.set = function () {
    throw new Error('Cannot invoke set on an Immutable Matrix instance');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {Number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  ImmutableDenseMatrix.prototype.resize = function () {
    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
  };
  /**
   * Disallows reshaping in favor of immutability.
   *
   * @throws {Error} Operation not allowed
   */


  ImmutableDenseMatrix.prototype.reshape = function () {
    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
  };
  /**
   * Create a clone of the matrix
   * @return {ImmutableDenseMatrix} clone
   */


  ImmutableDenseMatrix.prototype.clone = function () {
    return new ImmutableDenseMatrix({
      data: Object(utils_object["a" /* clone */])(this._data),
      size: Object(utils_object["a" /* clone */])(this._size),
      datatype: this._datatype
    });
  };
  /**
   * Get a JSON representation of the matrix
   * @returns {Object}
   */


  ImmutableDenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'ImmutableDenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Generate a matrix from a JSON object
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {ImmutableDenseMatrix}
   */


  ImmutableDenseMatrix.fromJSON = function (json) {
    return new ImmutableDenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @param {Number} i       Matrix row index 1
   * @param {Number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  ImmutableDenseMatrix.prototype.swapRows = function () {
    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
  };
  /**
   * Calculate the minimum value in the set
   * @return {Number | undefined} min
   */


  ImmutableDenseMatrix.prototype.min = function () {
    // check min has been calculated before
    if (this._min === null) {
      // minimum
      var m = null; // compute min

      this.forEach(function (v) {
        if (m === null || smaller(v, m)) {
          m = v;
        }
      });
      this._min = m !== null ? m : undefined;
    }

    return this._min;
  };
  /**
   * Calculate the maximum value in the set
   * @return {Number | undefined} max
   */


  ImmutableDenseMatrix.prototype.max = function () {
    // check max has been calculated before
    if (this._max === null) {
      // maximum
      var m = null; // compute max

      this.forEach(function (v) {
        if (m === null || smaller(m, v)) {
          m = v;
        }
      });
      this._max = m !== null ? m : undefined;
    }

    return this._max;
  };

  return ImmutableDenseMatrix;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/type/matrix/MatrixIndex.js




var MatrixIndex_name = 'Index';
var MatrixIndex_dependencies = ['ImmutableDenseMatrix'];
var createIndexClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(MatrixIndex_name, MatrixIndex_dependencies, function (_ref) {
  var ImmutableDenseMatrix = _ref.ImmutableDenseMatrix;

  /**
   * Create an index. An Index can store ranges and sets for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Usage:
   *     const index = new Index(range1, range2, matrix1, array1, ...)
   *
   * Where each parameter can be any of:
   *     A number
   *     A string (containing a name of an object property)
   *     An instance of Range
   *     An Array with the Set values
   *     A Matrix with the Set values
   *
   * The parameters start, end, and step must be integer numbers.
   *
   * @class Index
   * @Constructor Index
   * @param {...*} ranges
   */
  function Index(ranges) {
    if (!(this instanceof Index)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this._dimensions = [];
    this._isScalar = true;

    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i];

      if (Object(is["D" /* isRange */])(arg)) {
        this._dimensions.push(arg);

        this._isScalar = false;
      } else if (Array.isArray(arg) || Object(is["v" /* isMatrix */])(arg)) {
        // create matrix
        var m = _createImmutableMatrix(arg.valueOf());

        this._dimensions.push(m); // size


        var size = m.size(); // scalar

        if (size.length !== 1 || size[0] !== 1) {
          this._isScalar = false;
        }
      } else if (typeof arg === 'number') {
        this._dimensions.push(_createImmutableMatrix([arg]));
      } else if (typeof arg === 'string') {
        // object property (arguments.count should be 1)
        this._dimensions.push(arg);
      } else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      } // TODO: implement support for wildcard '*'

    }
  }
  /**
   * Attach type information
   */


  Index.prototype.type = 'Index';
  Index.prototype.isIndex = true;

  function _createImmutableMatrix(arg) {
    // loop array elements
    for (var i = 0, l = arg.length; i < l; i++) {
      if (typeof arg[i] !== 'number' || !Object(utils_number["i" /* isInteger */])(arg[i])) {
        throw new TypeError('Index parameters must be positive integer numbers');
      }
    } // create matrix


    return new ImmutableDenseMatrix(arg);
  }
  /**
   * Create a clone of the index
   * @memberof Index
   * @return {Index} clone
   */


  Index.prototype.clone = function () {
    var index = new Index();
    index._dimensions = Object(utils_object["a" /* clone */])(this._dimensions);
    index._isScalar = this._isScalar;
    return index;
  };
  /**
   * Create an index from an array with ranges/numbers
   * @memberof Index
   * @param {Array.<Array | number>} ranges
   * @return {Index} index
   * @private
   */


  Index.create = function (ranges) {
    var index = new Index();
    Index.apply(index, ranges);
    return index;
  };
  /**
   * Retrieve the size of the index, the number of elements for each dimension.
   * @memberof Index
   * @returns {number[]} size
   */


  Index.prototype.size = function () {
    var size = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var d = this._dimensions[i];
      size[i] = typeof d === 'string' ? 1 : d.size()[0];
    }

    return size;
  };
  /**
   * Get the maximum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} max
   */


  Index.prototype.max = function () {
    var values = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.max();
    }

    return values;
  };
  /**
   * Get the minimum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} min
   */


  Index.prototype.min = function () {
    var values = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.min();
    }

    return values;
  };
  /**
   * Loop over each of the ranges of the index
   * @memberof Index
   * @param {Function} callback   Called for each range with a Range as first
   *                              argument, the dimension as second, and the
   *                              index object as third.
   */


  Index.prototype.forEach = function (callback) {
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      callback(this._dimensions[i], i, this);
    }
  };
  /**
   * Retrieve the dimension for the given index
   * @memberof Index
   * @param {Number} dim                  Number of the dimension
   * @returns {Range | null} range
   */


  Index.prototype.dimension = function (dim) {
    return this._dimensions[dim] || null;
  };
  /**
   * Test whether this index contains an object property
   * @returns {boolean} Returns true if the index is an object property
   */


  Index.prototype.isObjectProperty = function () {
    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
  };
  /**
   * Returns the object property name when the Index holds a single object property,
   * else returns null
   * @returns {string | null}
   */


  Index.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this._dimensions[0] : null;
  };
  /**
   * Test whether this index contains only a single value.
   *
   * This is the case when the index is created with only scalar values as ranges,
   * not for ranges resolving into a single value.
   * @memberof Index
   * @return {boolean} isScalar
   */


  Index.prototype.isScalar = function () {
    return this._isScalar;
  };
  /**
   * Expand the Index into an array.
   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
   * @memberof Index
   * @returns {Array} array
   */


  Index.prototype.toArray = function () {
    var array = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];
      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
    }

    return array;
  };
  /**
   * Get the primitive value of the Index, a two dimensional array.
   * Equivalent to Index.toArray().
   * @memberof Index
   * @returns {Array} array
   */


  Index.prototype.valueOf = Index.prototype.toArray;
  /**
   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
   * @memberof Index
   * @returns {String} str
   */

  Index.prototype.toString = function () {
    var strings = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];

      if (typeof dimension === 'string') {
        strings.push(JSON.stringify(dimension));
      } else {
        strings.push(dimension.toString());
      }
    }

    return '[' + strings.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the Index
   * @memberof Index
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   */


  Index.prototype.toJSON = function () {
    return {
      mathjs: 'Index',
      dimensions: this._dimensions
    };
  };
  /**
   * Instantiate an Index from a JSON object
   * @memberof Index
   * @param {Object} json A JSON object structured as:
   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   * @return {Index}
   */


  Index.fromJSON = function (json) {
    return Index.create(json.dimensions);
  };

  return Index;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/type/matrix/FibonacciHeap.js

var FibonacciHeap_name = 'FibonacciHeap';
var FibonacciHeap_dependencies = ['smaller', 'larger'];
var createFibonacciHeapClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(FibonacciHeap_name, FibonacciHeap_dependencies, function (_ref) {
  var smaller = _ref.smaller,
      larger = _ref.larger;
  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
  /**
   * Fibonacci Heap implementation, used interally for Matrix math.
   * @class FibonacciHeap
   * @constructor FibonacciHeap
   */

  function FibonacciHeap() {
    if (!(this instanceof FibonacciHeap)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // initialize fields


    this._minimum = null;
    this._size = 0;
  }
  /**
   * Attach type information
   */


  FibonacciHeap.prototype.type = 'FibonacciHeap';
  FibonacciHeap.prototype.isFibonacciHeap = true;
  /**
   * Inserts a new data element into the heap. No heap consolidation is
   * performed at this time, the new node is simply inserted into the root
   * list of this heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.insert = function (key, value) {
    // create node
    var node = {
      key: key,
      value: value,
      degree: 0
    }; // check we have a node in the minimum

    if (this._minimum) {
      // minimum node
      var minimum = this._minimum; // update left & right of node

      node.left = minimum;
      node.right = minimum.right;
      minimum.right = node;
      node.right.left = node; // update minimum node in heap if needed

      if (smaller(key, minimum.key)) {
        // node has a smaller key, use it as minimum
        this._minimum = node;
      }
    } else {
      // set left & right
      node.left = node;
      node.right = node; // this is the first node

      this._minimum = node;
    } // increment number of nodes in heap


    this._size++; // return node

    return node;
  };
  /**
   * Returns the number of nodes in heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.size = function () {
    return this._size;
  };
  /**
   * Removes all elements from this heap.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.clear = function () {
    this._minimum = null;
    this._size = 0;
  };
  /**
   * Returns true if the heap is empty, otherwise false.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.isEmpty = function () {
    return this._size === 0;
  };
  /**
   * Extracts the node with minimum key from heap. Amortized running
   * time: O(log n).
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.extractMinimum = function () {
    // node to remove
    var node = this._minimum; // check we have a minimum

    if (node === null) {
      return node;
    } // current minimum


    var minimum = this._minimum; // get number of children

    var numberOfChildren = node.degree; // pointer to the first child

    var x = node.child; // for each child of node do...

    while (numberOfChildren > 0) {
      // store node in right side
      var tempRight = x.right; // remove x from child list

      x.left.right = x.right;
      x.right.left = x.left; // add x to root list of heap

      x.left = minimum;
      x.right = minimum.right;
      minimum.right = x;
      x.right.left = x; // set Parent[x] to null

      x.parent = null;
      x = tempRight;
      numberOfChildren--;
    } // remove node from root list of heap


    node.left.right = node.right;
    node.right.left = node.left; // update minimum

    if (node === node.right) {
      // empty
      minimum = null;
    } else {
      // update minimum
      minimum = node.right; // we need to update the pointer to the root with minimum key

      minimum = _findMinimumNode(minimum, this._size);
    } // decrement size of heap


    this._size--; // update minimum

    this._minimum = minimum; // return node

    return node;
  };
  /**
   * Removes a node from the heap given the reference to the node. The trees
   * in the heap will be consolidated, if necessary. This operation may fail
   * to remove the correct element if there are nodes with key value -Infinity.
   * Running time: O(log n) amortized.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.remove = function (node) {
    // decrease key value
    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest

    this.extractMinimum();
  };
  /**
   * Decreases the key value for a heap node, given the new value to take on.
   * The structure of the heap may be changed and will not be consolidated.
   * Running time: O(1) amortized.
   * @memberof FibonacciHeap
   */


  function _decreaseKey(minimum, node, key) {
    // set node key
    node.key = key; // get parent node

    var parent = node.parent;

    if (parent && smaller(node.key, parent.key)) {
      // remove node from parent
      _cut(minimum, node, parent); // remove all nodes from parent to the root parent


      _cascadingCut(minimum, parent);
    } // update minimum node if needed


    if (smaller(node.key, minimum.key)) {
      minimum = node;
    } // return minimum


    return minimum;
  }
  /**
   * The reverse of the link operation: removes node from the child list of parent.
   * This method assumes that min is non-null. Running time: O(1).
   * @memberof FibonacciHeap
   */


  function _cut(minimum, node, parent) {
    // remove node from parent children and decrement Degree[parent]
    node.left.right = node.right;
    node.right.left = node.left;
    parent.degree--; // reset y.child if necessary

    if (parent.child === node) {
      parent.child = node.right;
    } // remove child if degree is 0


    if (parent.degree === 0) {
      parent.child = null;
    } // add node to root list of heap


    node.left = minimum;
    node.right = minimum.right;
    minimum.right = node;
    node.right.left = node; // set parent[node] to null

    node.parent = null; // set mark[node] to false

    node.mark = false;
  }
  /**
   * Performs a cascading cut operation. This cuts node from its parent and then
   * does the same for its parent, and so on up the tree.
   * Running time: O(log n); O(1) excluding the recursion.
   * @memberof FibonacciHeap
   */


  function _cascadingCut(minimum, node) {
    // store parent node
    var parent = node.parent; // if there's a parent...

    if (!parent) {
      return;
    } // if node is unmarked, set it marked


    if (!node.mark) {
      node.mark = true;
    } else {
      // it's marked, cut it from parent
      _cut(minimum, node, parent); // cut its parent as well


      _cascadingCut(parent);
    }
  }
  /**
   * Make the first node a child of the second one. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */


  var _linkNodes = function _linkNodes(node, parent) {
    // remove node from root list of heap
    node.left.right = node.right;
    node.right.left = node.left; // make node a Child of parent

    node.parent = parent;

    if (!parent.child) {
      parent.child = node;
      node.right = node;
      node.left = node;
    } else {
      node.left = parent.child;
      node.right = parent.child.right;
      parent.child.right = node;
      node.right.left = node;
    } // increase degree[parent]


    parent.degree++; // set mark[node] false

    node.mark = false;
  };

  function _findMinimumNode(minimum, size) {
    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity

    var array = new Array(arraySize); // find the number of root nodes.

    var numRoots = 0;
    var x = minimum;

    if (x) {
      numRoots++;
      x = x.right;

      while (x !== minimum) {
        numRoots++;
        x = x.right;
      }
    } // vars


    var y; // For each node in root list do...

    while (numRoots > 0) {
      // access this node's degree..
      var d = x.degree; // get next node

      var next = x.right; // check if there is a node already in array with the same degree

      while (true) {
        // get node with the same degree is any
        y = array[d];

        if (!y) {
          break;
        } // make one node with the same degree a child of the other, do this based on the key value.


        if (larger(x.key, y.key)) {
          var temp = y;
          y = x;
          x = temp;
        } // make y a child of x


        _linkNodes(y, x); // we have handled this degree, go to next one.


        array[d] = null;
        d++;
      } // save this node for later when we might encounter another of the same degree.


      array[d] = x; // move forward through list.

      x = next;
      numRoots--;
    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].


    minimum = null; // loop nodes in array

    for (var i = 0; i < arraySize; i++) {
      // get current node
      y = array[i];

      if (!y) {
        continue;
      } // check if we have a linked list


      if (minimum) {
        // First remove node from root list.
        y.left.right = y.right;
        y.right.left = y.left; // now add to root list, again.

        y.left = minimum;
        y.right = minimum.right;
        minimum.right = y;
        y.right.left = y; // check if this is a new min.

        if (smaller(y.key, minimum.key)) {
          minimum = y;
        }
      } else {
        minimum = y;
      }
    }

    return minimum;
  }

  return FibonacciHeap;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/type/matrix/Spa.js

var Spa_name = 'Spa';
var Spa_dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];
var createSpaClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(Spa_name, Spa_dependencies, function (_ref) {
  var addScalar = _ref.addScalar,
      equalScalar = _ref.equalScalar,
      FibonacciHeap = _ref.FibonacciHeap;

  /**
   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array
   * of the vector elements and an ordered list of non-zero elements.
   */
  function Spa() {
    if (!(this instanceof Spa)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // allocate vector, TODO use typed arrays


    this._values = [];
    this._heap = new FibonacciHeap();
  }
  /**
   * Attach type information
   */


  Spa.prototype.type = 'Spa';
  Spa.prototype.isSpa = true;
  /**
   * Set the value for index i.
   *
   * @param {number} i                       The index
   * @param {number | BigNumber | Complex}   The value at index i
   */

  Spa.prototype.set = function (i, v) {
    // check we have a value @ i
    if (!this._values[i]) {
      // insert in heap
      var node = this._heap.insert(i, v); // set the value @ i


      this._values[i] = node;
    } else {
      // update the value @ i
      this._values[i].value = v;
    }
  };

  Spa.prototype.get = function (i) {
    var node = this._values[i];

    if (node) {
      return node.value;
    }

    return 0;
  };

  Spa.prototype.accumulate = function (i, v) {
    // node @ i
    var node = this._values[i];

    if (!node) {
      // insert in heap
      node = this._heap.insert(i, v); // initialize value

      this._values[i] = node;
    } else {
      // accumulate value
      node.value = addScalar(node.value, v);
    }
  };

  Spa.prototype.forEach = function (from, to, callback) {
    // references
    var heap = this._heap;
    var values = this._values; // nodes

    var nodes = []; // node with minimum key, save it

    var node = heap.extractMinimum();

    if (node) {
      nodes.push(node);
    } // extract nodes from heap (ordered)


    while (node && node.key <= to) {
      // check it is in range
      if (node.key >= from) {
        // check value is not zero
        if (!equalScalar(node.value, 0)) {
          // invoke callback
          callback(node.key, node.value, this);
        }
      } // extract next node, save it


      node = heap.extractMinimum();

      if (node) {
        nodes.push(node);
      }
    } // reinsert all nodes in heap


    for (var i = 0; i < nodes.length; i++) {
      // current node
      var n = nodes[i]; // insert node in heap

      node = heap.insert(n.key, n.value); // update values

      values[node.key] = node;
    }
  };

  Spa.prototype.swap = function (i, j) {
    // node @ i and j
    var nodei = this._values[i];
    var nodej = this._values[j]; // check we need to insert indeces

    if (!nodei && nodej) {
      // insert in heap
      nodei = this._heap.insert(i, nodej.value); // remove from heap

      this._heap.remove(nodej); // set values


      this._values[i] = nodei;
      this._values[j] = undefined;
    } else if (nodei && !nodej) {
      // insert in heap
      nodej = this._heap.insert(j, nodei.value); // remove from heap

      this._heap.remove(nodei); // set values


      this._values[j] = nodej;
      this._values[i] = undefined;
    } else if (nodei && nodej) {
      // swap values
      var v = nodei.value;
      nodei.value = nodej.value;
      nodej.value = v;
    }
  };

  return Spa;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/utils/bignumber/constants.js

/**
 * Calculate BigNumber e
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns e
 */

var createBigNumberE = memoize(function (BigNumber) {
  return new BigNumber(1).exp();
}, hasher);
/**
 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns phi
 */

var createBigNumberPhi = memoize(function (BigNumber) {
  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
}, hasher);
/**
 * Calculate BigNumber pi.
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns pi
 */

var createBigNumberPi = memoize(function (BigNumber) {
  return BigNumber.acos(-1);
}, hasher);
/**
 * Calculate BigNumber tau, tau = 2 * pi
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns tau
 */

var createBigNumberTau = memoize(function (BigNumber) {
  return createBigNumberPi(BigNumber).times(2);
}, hasher);
/**
 * Create a hash for a BigNumber constructor function. The created has is
 * the configured precision
 * @param {Array} args         Supposed to contain a single entry with
 *                             a BigNumber constructor
 * @return {number} precision
 * @private
 */

function hasher(args) {
  return args[0].precision;
}
// CONCATENATED MODULE: ./src/type/unit/Unit.js
function Unit_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Unit_typeof = function _typeof(obj) { return typeof obj; }; } else { Unit_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Unit_typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }






var Unit_name = 'Unit';
var Unit_dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];
var createUnitClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(Unit_name, Unit_dependencies, function (_ref) {
  var on = _ref.on,
      config = _ref.config,
      addScalar = _ref.addScalar,
      subtract = _ref.subtract,
      multiplyScalar = _ref.multiplyScalar,
      divideScalar = _ref.divideScalar,
      pow = _ref.pow,
      abs = _ref.abs,
      fix = _ref.fix,
      round = _ref.round,
      equal = _ref.equal,
      isNumeric = _ref.isNumeric,
      format = _ref.format,
      number = _ref.number,
      Complex = _ref.Complex,
      _BigNumber = _ref.BigNumber,
      _Fraction = _ref.Fraction;
  var toNumber = number;
  /**
   * A unit can be constructed in the following ways:
   *
   *     const a = new Unit(value, name)
   *     const b = new Unit(null, name)
   *     const c = Unit.parse(str)
   *
   * Example usage:
   *
   *     const a = new Unit(5, 'cm')               // 50 mm
   *     const b = Unit.parse('23 kg')             // 23 kg
   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m
   *     const d = new Unit(9.81, "m/s^2")         // 9.81 m/s^2
   *
   * @class Unit
   * @constructor Unit
   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
   */

  function Unit(value, name) {
    if (!(this instanceof Unit)) {
      throw new Error('Constructor must be called with the new operator');
    }

    if (!(value === null || value === undefined || isNumeric(value) || Object(is["j" /* isComplex */])(value))) {
      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
    }

    if (name !== undefined && (typeof name !== 'string' || name === '')) {
      throw new TypeError('Second parameter in Unit constructor must be a string');
    }

    if (name !== undefined) {
      var u = Unit.parse(name);
      this.units = u.units;
      this.dimensions = u.dimensions;
    } else {
      this.units = [{
        unit: UNIT_NONE,
        prefix: PREFIXES.NONE,
        // link to a list with supported prefixes
        power: 0
      }];
      this.dimensions = [];

      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        this.dimensions[i] = 0;
      }
    }

    this.value = value !== undefined && value !== null ? this._normalize(value) : null;
    this.fixPrefix = false; // if true, function format will not search for the
    // best prefix but leave it as initially provided.
    // fixPrefix is set true by the method Unit.to
    // The justification behind this is that if the constructor is explicitly called,
    // the caller wishes the units to be returned exactly as he supplied.

    this.skipAutomaticSimplification = true;
  }
  /**
   * Attach type information
   */


  Unit.prototype.type = 'Unit';
  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser

  var text, index, c;

  function skipWhitespace() {
    while (c === ' ' || c === '\t') {
      next();
    }
  }

  function isDigitDot(c) {
    return c >= '0' && c <= '9' || c === '.';
  }

  function isDigit(c) {
    return c >= '0' && c <= '9';
  }

  function next() {
    index++;
    c = text.charAt(index);
  }

  function revert(oldIndex) {
    index = oldIndex;
    c = text.charAt(index);
  }

  function parseNumber() {
    var number = '';
    var oldIndex = index;

    if (c === '+') {
      next();
    } else if (c === '-') {
      number += c;
      next();
    }

    if (!isDigitDot(c)) {
      // a + or - must be followed by a digit
      revert(oldIndex);
      return null;
    } // get number, can have a single dot


    if (c === '.') {
      number += c;
      next();

      if (!isDigit(c)) {
        // this is no legal number, it is just a dot
        revert(oldIndex);
        return null;
      }
    } else {
      while (isDigit(c)) {
        number += c;
        next();
      }

      if (c === '.') {
        number += c;
        next();
      }
    }

    while (isDigit(c)) {
      number += c;
      next();
    } // check for exponential notation like "2.3e-4" or "1.23e50"


    if (c === 'E' || c === 'e') {
      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"
      var tentativeNumber = '';
      var tentativeIndex = index;
      tentativeNumber += c;
      next();

      if (c === '+' || c === '-') {
        tentativeNumber += c;
        next();
      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)


      if (!isDigit(c)) {
        // The e or E must belong to something else, so return the number without the e or E.
        revert(tentativeIndex);
        return number;
      } // We can now safely say that this is scientific notation.


      number = number + tentativeNumber;

      while (isDigit(c)) {
        number += c;
        next();
      }
    }

    return number;
  }

  function parseUnit() {
    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]

    var code = text.charCodeAt(index);

    while (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) {
      unitName += c;
      next();
      code = text.charCodeAt(index);
    } // Must begin with [a-zA-Z]


    code = unitName.charCodeAt(0);

    if (code >= 65 && code <= 90 || code >= 97 && code <= 122) {
      return unitName || null;
    } else {
      return null;
    }
  }

  function parseCharacter(toFind) {
    if (c === toFind) {
      next();
      return toFind;
    } else {
      return null;
    }
  }
  /**
   * Parse a string into a unit. The value of the unit is parsed as number,
   * BigNumber, or Fraction depending on the math.js config setting `number`.
   *
   * Throws an exception if the provided string does not contain a valid unit or
   * cannot be parsed.
   * @memberof Unit
   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
   * @return {Unit} unit
   */


  Unit.parse = function (str, options) {
    options = options || {};
    text = str;
    index = -1;
    c = '';

    if (typeof text !== 'string') {
      throw new TypeError('Invalid argument in Unit.parse, string expected');
    }

    var unit = new Unit();
    unit.units = [];
    var powerMultiplierCurrent = 1;
    var expectingUnit = false; // A unit should follow this pattern:
    // [number] ...[ [*/] unit[^number] ]
    // unit[^number] ... [ [*/] unit[^number] ]
    // Rules:
    // number is any floating point number.
    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
    // The string may optionally begin with a number.
    // Each unit may optionally be followed by ^number.
    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
    //   2m^2kg/s^2
    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
    //   4erg

    next();
    skipWhitespace(); // Optional number at the start of the string

    var valueStr = parseNumber();
    var value = null;

    if (valueStr) {
      if (config.number === 'BigNumber') {
        value = new _BigNumber(valueStr);
      } else if (config.number === 'Fraction') {
        try {
          // not all numbers can be turned in Fractions, for example very small numbers not
          value = new _Fraction(valueStr);
        } catch (err) {
          value = parseFloat(valueStr);
        }
      } else {
        // number
        value = parseFloat(valueStr);
      }

      skipWhitespace(); // Whitespace is not required here
      // handle multiplication or division right after the value, like '1/s'

      if (parseCharacter('*')) {
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      } else if (parseCharacter('/')) {
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      }
    } // Stack to keep track of powerMultipliers applied to each parentheses group


    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack

    var powerMultiplierStackProduct = 1;

    while (true) {
      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
      // A '(' will always appear directly before a unit.

      while (c === '(') {
        powerMultiplierStack.push(powerMultiplierCurrent);
        powerMultiplierStackProduct *= powerMultiplierCurrent;
        powerMultiplierCurrent = 1;
        next();
        skipWhitespace();
      } // Is there something here?


      var uStr = void 0;

      if (c) {
        var oldC = c;
        uStr = parseUnit();

        if (uStr === null) {
          throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
        }
      } else {
        // End of input.
        break;
      } // Verify the unit exists and get the prefix (if any)


      var res = _findUnit(uStr);

      if (res === null) {
        // Unit not found.
        throw new SyntaxError('Unit "' + uStr + '" not found.');
      }

      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a "^ number"?

      skipWhitespace();

      if (parseCharacter('^')) {
        skipWhitespace();
        var p = parseNumber();

        if (p === null) {
          // No valid number found for the power!
          throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
        }

        power *= p;
      } // Add the unit to the list


      unit.units.push({
        unit: res.unit,
        prefix: res.prefix,
        power: power
      });

      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
      } // Check for and consume closing parentheses, popping from the stack.
      // A ')' will always follow a unit.


      skipWhitespace();

      while (c === ')') {
        if (powerMultiplierStack.length === 0) {
          throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
        }

        powerMultiplierStackProduct /= powerMultiplierStack.pop();
        next();
        skipWhitespace();
      } // "*" and "/" should mean we are expecting something to come next.
      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.


      expectingUnit = false;

      if (parseCharacter('*')) {
        // explicit multiplication
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      } else if (parseCharacter('/')) {
        // division
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      } else {
        // implicit multiplication
        powerMultiplierCurrent = 1;
      } // Replace the unit into the auto unit system


      if (res.unit.base) {
        var baseDim = res.unit.base.key;
        UNIT_SYSTEMS.auto[baseDim] = {
          unit: res.unit,
          prefix: res.prefix
        };
      }
    } // Has the string been entirely consumed?


    skipWhitespace();

    if (c) {
      throw new SyntaxError('Could not parse: "' + str + '"');
    } // Is there a trailing slash?


    if (expectingUnit) {
      throw new SyntaxError('Trailing characters: "' + str + '"');
    } // Is the parentheses stack empty?


    if (powerMultiplierStack.length !== 0) {
      throw new SyntaxError('Unmatched "(" in "' + text + '"');
    } // Are there any units at all?


    if (unit.units.length === 0 && !options.allowNoUnits) {
      throw new SyntaxError('"' + str + '" contains no units');
    }

    unit.value = value !== undefined ? unit._normalize(value) : null;
    return unit;
  };
  /**
   * create a copy of this unit
   * @memberof Unit
   * @return {Unit} Returns a cloned version of the unit
   */


  Unit.prototype.clone = function () {
    var unit = new Unit();
    unit.fixPrefix = this.fixPrefix;
    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;
    unit.value = Object(utils_object["a" /* clone */])(this.value);
    unit.dimensions = this.dimensions.slice(0);
    unit.units = [];

    for (var i = 0; i < this.units.length; i++) {
      unit.units[i] = {};

      for (var p in this.units[i]) {
        if (Object(utils_object["f" /* hasOwnProperty */])(this.units[i], p)) {
          unit.units[i][p] = this.units[i][p];
        }
      }
    }

    return unit;
  };
  /**
   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
   * @memberof Unit
   * @return {boolean} True if the unit is derived
   */


  Unit.prototype._isDerived = function () {
    if (this.units.length === 0) {
      return false;
    }

    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
  };
  /**
   * Normalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number | BigNumber | Fraction | boolean} value
   * @return {number | BigNumber | Fraction | boolean} normalized value
   * @private
   */


  Unit.prototype._normalize = function (value) {
    var unitValue, unitOffset, unitPower, unitPrefixValue;
    var convert;

    if (value === null || value === undefined || this.units.length === 0) {
      return value;
    } else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      var res = value;
      convert = Unit._getNumberConverter(Object(is["M" /* typeOf */])(value)); // convert to Fraction or BigNumber if needed

      for (var i = 0; i < this.units.length; i++) {
        unitValue = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower = convert(this.units[i].power);
        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
      }

      return res;
    } else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter(Object(is["M" /* typeOf */])(value)); // convert to Fraction or BigNumber if needed

      unitValue = convert(this.units[0].unit.value);
      unitOffset = convert(this.units[0].unit.offset);
      unitPrefixValue = convert(this.units[0].prefix.value);
      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));
    }
  };
  /**
   * Denormalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number} value
   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
   * @return {number} denormalized value
   * @private
   */


  Unit.prototype._denormalize = function (value, prefixValue) {
    var unitValue, unitOffset, unitPower, unitPrefixValue;
    var convert;

    if (value === null || value === undefined || this.units.length === 0) {
      return value;
    } else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
      var res = value;
      convert = Unit._getNumberConverter(Object(is["M" /* typeOf */])(value)); // convert to Fraction or BigNumber if needed

      for (var i = 0; i < this.units.length; i++) {
        unitValue = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower = convert(this.units[i].power);
        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
      }

      return res;
    } else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter(Object(is["M" /* typeOf */])(value)); // convert to Fraction or BigNumber if needed

      unitValue = convert(this.units[0].unit.value);
      unitPrefixValue = convert(this.units[0].prefix.value);
      unitOffset = convert(this.units[0].unit.offset);

      if (prefixValue === undefined || prefixValue === null) {
        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);
      } else {
        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);
      }
    }
  };
  /**
   * Find a unit from a string
   * @memberof Unit
   * @param {string} str              A string like 'cm' or 'inch'
   * @returns {Object | null} result  When found, an object with fields unit and
   *                                  prefix is returned. Else, null is returned.
   * @private
   */


  function _findUnit(str) {
    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
    if (Object(utils_object["f" /* hasOwnProperty */])(UNITS, str)) {
      var unit = UNITS[str];
      var prefix = unit.prefixes[''];
      return {
        unit: unit,
        prefix: prefix
      };
    }

    for (var _name in UNITS) {
      if (Object(utils_object["f" /* hasOwnProperty */])(UNITS, _name)) {
        if (Object(utils_string["b" /* endsWith */])(str, _name)) {
          var _unit = UNITS[_name];
          var prefixLen = str.length - _name.length;
          var prefixName = str.substring(0, prefixLen);

          var _prefix = Object(utils_object["f" /* hasOwnProperty */])(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;

          if (_prefix !== undefined) {
            // store unit, prefix, and value
            return {
              unit: _unit,
              prefix: _prefix
            };
          }
        }
      }
    }

    return null;
  }
  /**
   * Test if the given expression is a unit.
   * The unit can have a prefix but cannot have a value.
   * @memberof Unit
   * @param {string} name   A string to be tested whether it is a value less unit.
   *                        The unit can have prefix, like "cm"
   * @return {boolean}      true if the given string is a unit
   */


  Unit.isValuelessUnit = function (name) {
    return _findUnit(name) !== null;
  };
  /**
   * check if this unit has given base unit
   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
   * @memberof Unit
   * @param {BASE_UNITS | string | undefined} base
   */


  Unit.prototype.hasBase = function (base) {
    if (typeof base === 'string') {
      base = BASE_UNITS[base];
    }

    if (!base) {
      return false;
    } // All dimensions must be the same


    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }

    return true;
  };
  /**
   * Check if this unit has a base or bases equal to another base or bases
   * For derived units, the exponent on each base also must match
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if equal base
   */


  Unit.prototype.equalBase = function (other) {
    // All dimensions must be the same
    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }

    return true;
  };
  /**
   * Check if this unit equals another unit
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if both units are equal
   */


  Unit.prototype.equals = function (other) {
    return this.equalBase(other) && equal(this.value, other.value);
  };
  /**
   * Multiply this unit with another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} product of this unit and the other unit
   */


  Unit.prototype.multiply = function (other) {
    var res = this.clone();

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
    } // Append other's units list onto res


    for (var _i = 0; _i < other.units.length; _i++) {
      // Make a deep copy
      var inverted = {};

      for (var key in other.units[_i]) {
        inverted[key] = other.units[_i][key];
      }

      res.units.push(inverted);
    } // If at least one operand has a value, then the result should also have a value


    if (this.value !== null || other.value !== null) {
      var valThis = this.value === null ? this._normalize(1) : this.value;
      var valOther = other.value === null ? other._normalize(1) : other.value;
      res.value = multiplyScalar(valThis, valOther);
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Divide this unit by another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} result of dividing this unit by the other unit
   */


  Unit.prototype.divide = function (other) {
    var res = this.clone();

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
    } // Invert and append other's units list onto res


    for (var _i2 = 0; _i2 < other.units.length; _i2++) {
      // Make a deep copy
      var inverted = {};

      for (var key in other.units[_i2]) {
        inverted[key] = other.units[_i2][key];
      }

      inverted.power = -inverted.power;
      res.units.push(inverted);
    } // If at least one operand has a value, the result should have a value


    if (this.value !== null || other.value !== null) {
      var valThis = this.value === null ? this._normalize(1) : this.value;
      var valOther = other.value === null ? other._normalize(1) : other.value;
      res.value = divideScalar(valThis, valOther);
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Calculate the power of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} p
   * @returns {Unit}      The result: this^p
   */


  Unit.prototype.pow = function (p) {
    var res = this.clone();

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) * p;
    } // Adjust the power of each unit in the list


    for (var _i3 = 0; _i3 < res.units.length; _i3++) {
      res.units[_i3].power *= p;
    }

    if (res.value !== null) {
      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number
      // if (!isNumeric(res.value)) {
      //  res.value = NaN
      // }
      // Update: Complex supported now
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
   * @param {Unit} unit
   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
   */


  function getNumericIfUnitless(unit) {
    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
      return unit.value;
    } else {
      return unit;
    }
  }
  /**
   * Calculate the absolute value of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} x
   * @returns {Unit}      The result: |x|, absolute value of x
   */


  Unit.prototype.abs = function () {
    // This gives correct, but unexpected, results for units with an offset.
    // For example, abs(-283.15 degC) = -263.15 degC !!!
    var ret = this.clone();
    ret.value = ret.value !== null ? abs(ret.value) : null;

    for (var i in ret.units) {
      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
        ret.units[i].unit = UNITS.W;
      }
    }

    return ret;
  };
  /**
   * Convert the unit to a specific unit name.
   * @memberof Unit
   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
   */


  Unit.prototype.to = function (valuelessUnit) {
    var other;
    var value = this.value === null ? this._normalize(1) : this.value;

    if (typeof valuelessUnit === 'string') {
      // other = new Unit(null, valuelessUnit)
      other = Unit.parse(valuelessUnit);

      if (!this.equalBase(other)) {
        throw new Error("Units do not match ('".concat(other.toString(), "' != '").concat(this.toString(), "')"));
      }

      if (other.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }

      other.value = Object(utils_object["a" /* clone */])(value);
      other.fixPrefix = true;
      other.skipAutomaticSimplification = true;
      return other;
    } else if (Object(is["L" /* isUnit */])(valuelessUnit)) {
      if (!this.equalBase(valuelessUnit)) {
        throw new Error("Units do not match ('".concat(valuelessUnit.toString(), "' != '").concat(this.toString(), "')"));
      }

      if (valuelessUnit.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }

      other = valuelessUnit.clone();
      other.value = Object(utils_object["a" /* clone */])(value);
      other.fixPrefix = true;
      other.skipAutomaticSimplification = true;
      return other;
    } else {
      throw new Error('String or Unit expected as parameter');
    }
  };
  /**
   * Return the value of the unit when represented with given valueless unit
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number} Returns the unit value as number.
   */
  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric


  Unit.prototype.toNumber = function (valuelessUnit) {
    return toNumber(this.toNumeric(valuelessUnit));
  };
  /**
   * Return the value of the unit in the original numeric type
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number | BigNumber | Fraction} Returns the unit value
   */


  Unit.prototype.toNumeric = function (valuelessUnit) {
    var other;

    if (valuelessUnit) {
      // Allow getting the numeric value without converting to a different unit
      other = this.to(valuelessUnit);
    } else {
      other = this.clone();
    }

    if (other._isDerived()) {
      return other._denormalize(other.value);
    } else {
      return other._denormalize(other.value, other.units[0].prefix.value);
    }
  };
  /**
   * Get a string representation of the unit.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the unit
   * @memberof Unit
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   */


  Unit.prototype.toJSON = function () {
    return {
      mathjs: 'Unit',
      value: this._denormalize(this.value),
      unit: this.formatUnits(),
      fixPrefix: this.fixPrefix
    };
  };
  /**
   * Instantiate a Unit from a JSON object
   * @memberof Unit
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   * @return {Unit}
   */


  Unit.fromJSON = function (json) {
    var unit = new Unit(json.value, json.unit);
    unit.fixPrefix = json.fixPrefix || false;
    return unit;
  };
  /**
   * Returns the string representation of the unit.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.valueOf = Unit.prototype.toString;
  /**
   * Simplify this Unit's unit list and return a new Unit with the simplified list.
   * The returned Unit will contain a list of the "best" units for formatting.
   */

  Unit.prototype.simplify = function () {
    var ret = this.clone();
    var proposedUnitList = []; // Search for a matching base

    var matchingBase;

    for (var key in currentUnitSystem) {
      if (ret.hasBase(BASE_UNITS[key])) {
        matchingBase = key;
        break;
      }
    }

    if (matchingBase === 'NONE') {
      ret.units = [];
    } else {
      var matchingUnit;

      if (matchingBase) {
        // Does the unit system have a matching unit?
        if (Object(utils_object["f" /* hasOwnProperty */])(currentUnitSystem, matchingBase)) {
          matchingUnit = currentUnitSystem[matchingBase];
        }
      }

      if (matchingUnit) {
        ret.units = [{
          unit: matchingUnit.unit,
          prefix: matchingUnit.prefix,
          power: 1.0
        }];
      } else {
        // Multiple units or units with powers are formatted like this:
        // 5 (kg m^2) / (s^3 mol)
        // Build an representation from the base units of the current unit system
        var missingBaseDim = false;

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          var baseDim = BASE_DIMENSIONS[i];

          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
            if (Object(utils_object["f" /* hasOwnProperty */])(currentUnitSystem, baseDim)) {
              proposedUnitList.push({
                unit: currentUnitSystem[baseDim].unit,
                prefix: currentUnitSystem[baseDim].prefix,
                power: ret.dimensions[i] || 0
              });
            } else {
              missingBaseDim = true;
            }
          }
        } // Is the proposed unit list "simpler" than the existing one?


        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {
          // Replace this unit list with the proposed list
          ret.units = proposedUnitList;
        }
      }
    }

    return ret;
  };
  /**
   * Returns a new Unit in the SI system with the same value as this one
   */


  Unit.prototype.toSI = function () {
    var ret = this.clone();
    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:
    // 5 (kg m^2) / (s^3 mol)
    // Build an representation from the base units of the SI unit system

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      var baseDim = BASE_DIMENSIONS[i];

      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
        if (Object(utils_object["f" /* hasOwnProperty */])(UNIT_SYSTEMS.si, baseDim)) {
          proposedUnitList.push({
            unit: UNIT_SYSTEMS.si[baseDim].unit,
            prefix: UNIT_SYSTEMS.si[baseDim].prefix,
            power: ret.dimensions[i] || 0
          });
        } else {
          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');
        }
      }
    } // Replace this unit list with the proposed list


    ret.units = proposedUnitList;
    ret.fixPrefix = true;
    ret.skipAutomaticSimplification = true;
    return ret;
  };
  /**
   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.formatUnits = function () {
    var strNum = '';
    var strDen = '';
    var nNum = 0;
    var nDen = 0;

    for (var i = 0; i < this.units.length; i++) {
      if (this.units[i].power > 0) {
        nNum++;
        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;

        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
          strNum += '^' + this.units[i].power;
        }
      } else if (this.units[i].power < 0) {
        nDen++;
      }
    }

    if (nDen > 0) {
      for (var _i4 = 0; _i4 < this.units.length; _i4++) {
        if (this.units[_i4].power < 0) {
          if (nNum > 0) {
            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;

            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {
              strDen += '^' + -this.units[_i4].power;
            }
          } else {
            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
            strDen += '^' + this.units[_i4].power;
          }
        }
      }
    } // Remove leading " "


    strNum = strNum.substr(1);
    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting

    if (nNum > 1 && nDen > 0) {
      strNum = '(' + strNum + ')';
    }

    if (nDen > 1 && nNum > 0) {
      strDen = '(' + strDen + ')';
    }

    var str = strNum;

    if (nNum > 0 && nDen > 0) {
      str += ' / ';
    }

    str += strDen;
    return str;
  };
  /**
   * Get a string representation of the Unit, with optional formatting options.
   * @memberof Unit
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string}
   */


  Unit.prototype.format = function (options) {
    // Simplfy the unit list, unless it is valueless or was created directly in the
    // constructor or as the result of to or toSI
    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.

    var isImaginary = false;

    if (typeof simp.value !== 'undefined' && simp.value !== null && Object(is["j" /* isComplex */])(simp.value)) {
      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
      isImaginary = Math.abs(simp.value.re) < 1e-14;
    }

    for (var i in simp.units) {
      if (simp.units[i].unit) {
        if (simp.units[i].unit.name === 'VA' && isImaginary) {
          simp.units[i].unit = UNITS.VAR;
        } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {
          simp.units[i].unit = UNITS.VA;
        }
      }
    } // Now apply the best prefix
    // Units must have only one unit and not have the fixPrefix flag set


    if (simp.units.length === 1 && !simp.fixPrefix) {
      // Units must have integer powers, otherwise the prefix will change the
      // outputted value by not-an-integer-power-of-ten
      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {
        // Apply the best prefix
        simp.units[0].prefix = simp._bestPrefix();
      }
    }

    var value = simp._denormalize(simp.value);

    var str = simp.value !== null ? format(value, options || {}) : '';
    var unitStr = simp.formatUnits();

    if (simp.value && Object(is["j" /* isComplex */])(simp.value)) {
      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing
    }

    if (unitStr.length > 0 && str.length > 0) {
      str += ' ';
    }

    str += unitStr;
    return str;
  };
  /**
   * Calculate the best prefix using current value.
   * @memberof Unit
   * @returns {Object} prefix
   * @private
   */


  Unit.prototype._bestPrefix = function () {
    if (this.units.length !== 1) {
      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
    }

    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
    } // find the best prefix value (resulting in the value of which
    // the absolute value of the log10 is closest to zero,
    // though with a little offset of 1.2 for nicer values: you get a
    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
    // Note: the units value can be any numeric type, but to find the best
    // prefix it's enough to work with limited precision of a regular number
    // Update: using mathjs abs since we also allow complex numbers


    var absValue = this.value !== null ? abs(this.value) : 0;
    var absUnitValue = abs(this.units[0].unit.value);
    var bestPrefix = this.units[0].prefix;

    if (absValue === 0) {
      return bestPrefix;
    }

    var power = this.units[0].power;
    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix

    bestDiff = Math.abs(bestDiff);
    var prefixes = this.units[0].unit.prefixes;

    for (var p in prefixes) {
      if (Object(utils_object["f" /* hasOwnProperty */])(prefixes, p)) {
        var prefix = prefixes[p];

        if (prefix.scientific) {
          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
            // choose the prefix with the smallest diff, or if equal, choose the one
            // with the shortest name (can happen with SHORTLONG for example)
            bestPrefix = prefix;
            bestDiff = diff;
          }
        }
      }
    }

    return bestPrefix;
  };
  /**
   * Returns an array of units whose sum is equal to this unit
   * @memberof Unit
   * @param {Array} [parts] An array of strings or valueless units.
   *
   *   Example:
   *
   *   const u = new Unit(1, 'm')
   *   u.splitUnit(['feet', 'inch'])
   *     [ 3 feet, 3.3700787401575 inch ]
   *
   * @return {Array} An array of units.
   */


  Unit.prototype.splitUnit = function (parts) {
    var x = this.clone();
    var ret = [];

    for (var i = 0; i < parts.length; i++) {
      // Convert x to the requested unit
      x = x.to(parts[i]);
      if (i === parts.length - 1) break; // Get the numeric value of this unit

      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,
      // since fix can incorrectly round down if there is round-off error

      var xRounded = round(xNumeric);
      var xFixed = void 0;
      var isNearlyEqual = equal(xRounded, xNumeric);

      if (isNearlyEqual) {
        xFixed = xRounded;
      } else {
        xFixed = fix(x.toNumeric());
      }

      var y = new Unit(xFixed, parts[i].toString());
      ret.push(y);
      x = subtract(x, y);
    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
    // But instead of comparing x, the remainder, with zero--we will compare the sum of
    // all the parts so far with the original value. If they are nearly equal,
    // we set the remainder to 0.


    var testSum = 0;

    for (var _i5 = 0; _i5 < ret.length; _i5++) {
      testSum = addScalar(testSum, ret[_i5].value);
    }

    if (equal(testSum, this.value)) {
      x.value = 0;
    }

    ret.push(x);
    return ret;
  };

  var PREFIXES = {
    NONE: {
      '': {
        name: '',
        value: 1,
        scientific: true
      }
    },
    SHORT: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e1,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e2,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e3,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e6,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e9,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e12,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e15,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e18,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e21,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e24,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-1,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-2,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-3,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-6,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-9,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-12,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-15,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-18,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-21,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-24,
        scientific: true
      }
    },
    LONG: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      deca: {
        name: 'deca',
        value: 1e1,
        scientific: false
      },
      hecto: {
        name: 'hecto',
        value: 1e2,
        scientific: false
      },
      kilo: {
        name: 'kilo',
        value: 1e3,
        scientific: true
      },
      mega: {
        name: 'mega',
        value: 1e6,
        scientific: true
      },
      giga: {
        name: 'giga',
        value: 1e9,
        scientific: true
      },
      tera: {
        name: 'tera',
        value: 1e12,
        scientific: true
      },
      peta: {
        name: 'peta',
        value: 1e15,
        scientific: true
      },
      exa: {
        name: 'exa',
        value: 1e18,
        scientific: true
      },
      zetta: {
        name: 'zetta',
        value: 1e21,
        scientific: true
      },
      yotta: {
        name: 'yotta',
        value: 1e24,
        scientific: true
      },
      deci: {
        name: 'deci',
        value: 1e-1,
        scientific: false
      },
      centi: {
        name: 'centi',
        value: 1e-2,
        scientific: false
      },
      milli: {
        name: 'milli',
        value: 1e-3,
        scientific: true
      },
      micro: {
        name: 'micro',
        value: 1e-6,
        scientific: true
      },
      nano: {
        name: 'nano',
        value: 1e-9,
        scientific: true
      },
      pico: {
        name: 'pico',
        value: 1e-12,
        scientific: true
      },
      femto: {
        name: 'femto',
        value: 1e-15,
        scientific: true
      },
      atto: {
        name: 'atto',
        value: 1e-18,
        scientific: true
      },
      zepto: {
        name: 'zepto',
        value: 1e-21,
        scientific: true
      },
      yocto: {
        name: 'yocto',
        value: 1e-24,
        scientific: true
      }
    },
    SQUARED: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e2,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e4,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e6,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e12,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e18,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e24,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e30,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e36,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e42,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e48,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-2,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-4,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-6,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-12,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-18,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-24,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-30,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-36,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-42,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-48,
        scientific: true
      }
    },
    CUBIC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e3,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e6,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e9,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e18,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e27,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e36,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e45,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e54,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e63,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e72,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-3,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-6,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-9,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-18,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-27,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-36,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-45,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-54,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-63,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-72,
        scientific: true
      }
    },
    BINARY_SHORT_SI: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      k: {
        name: 'k',
        value: 1e3,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e6,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e9,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e12,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e15,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e18,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e21,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e24,
        scientific: true
      }
    },
    BINARY_SHORT_IEC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      Ki: {
        name: 'Ki',
        value: 1024,
        scientific: true
      },
      Mi: {
        name: 'Mi',
        value: Math.pow(1024, 2),
        scientific: true
      },
      Gi: {
        name: 'Gi',
        value: Math.pow(1024, 3),
        scientific: true
      },
      Ti: {
        name: 'Ti',
        value: Math.pow(1024, 4),
        scientific: true
      },
      Pi: {
        name: 'Pi',
        value: Math.pow(1024, 5),
        scientific: true
      },
      Ei: {
        name: 'Ei',
        value: Math.pow(1024, 6),
        scientific: true
      },
      Zi: {
        name: 'Zi',
        value: Math.pow(1024, 7),
        scientific: true
      },
      Yi: {
        name: 'Yi',
        value: Math.pow(1024, 8),
        scientific: true
      }
    },
    BINARY_LONG_SI: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      kilo: {
        name: 'kilo',
        value: 1e3,
        scientific: true
      },
      mega: {
        name: 'mega',
        value: 1e6,
        scientific: true
      },
      giga: {
        name: 'giga',
        value: 1e9,
        scientific: true
      },
      tera: {
        name: 'tera',
        value: 1e12,
        scientific: true
      },
      peta: {
        name: 'peta',
        value: 1e15,
        scientific: true
      },
      exa: {
        name: 'exa',
        value: 1e18,
        scientific: true
      },
      zetta: {
        name: 'zetta',
        value: 1e21,
        scientific: true
      },
      yotta: {
        name: 'yotta',
        value: 1e24,
        scientific: true
      }
    },
    BINARY_LONG_IEC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      kibi: {
        name: 'kibi',
        value: 1024,
        scientific: true
      },
      mebi: {
        name: 'mebi',
        value: Math.pow(1024, 2),
        scientific: true
      },
      gibi: {
        name: 'gibi',
        value: Math.pow(1024, 3),
        scientific: true
      },
      tebi: {
        name: 'tebi',
        value: Math.pow(1024, 4),
        scientific: true
      },
      pebi: {
        name: 'pebi',
        value: Math.pow(1024, 5),
        scientific: true
      },
      exi: {
        name: 'exi',
        value: Math.pow(1024, 6),
        scientific: true
      },
      zebi: {
        name: 'zebi',
        value: Math.pow(1024, 7),
        scientific: true
      },
      yobi: {
        name: 'yobi',
        value: Math.pow(1024, 8),
        scientific: true
      }
    },
    BTU: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      MM: {
        name: 'MM',
        value: 1e6,
        scientific: true
      }
    }
  };
  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);
  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);
  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);
  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
   * Index  Dimension
   * -----  ---------
   *   0    Length
   *   1    Mass
   *   2    Time
   *   3    Current
   *   4    Temperature
   *   5    Luminous intensity
   *   6    Amount of substance
   *   7    Angle
   *   8    Bit (digital)
   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
   *
   */

  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];
  var BASE_UNITS = {
    NONE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    MASS: {
      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    LENGTH: {
      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
    },
    TIME: {
      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
    },
    CURRENT: {
      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
    },
    TEMPERATURE: {
      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
    },
    LUMINOUS_INTENSITY: {
      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
    },
    AMOUNT_OF_SUBSTANCE: {
      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
    },
    FORCE: {
      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
    },
    SURFACE: {
      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
    },
    VOLUME: {
      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
    },
    ENERGY: {
      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
    },
    POWER: {
      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
    },
    PRESSURE: {
      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CHARGE: {
      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CAPACITANCE: {
      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_POTENTIAL: {
      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_RESISTANCE: {
      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_INDUCTANCE: {
      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CONDUCTANCE: {
      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX: {
      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX_DENSITY: {
      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
    },
    FREQUENCY: {
      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
    },
    ANGLE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
    },
    BIT: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
    }
  };

  for (var key in BASE_UNITS) {
    BASE_UNITS[key].key = key;
  }

  var BASE_UNIT_NONE = {};
  var UNIT_NONE = {
    name: '',
    base: BASE_UNIT_NONE,
    value: 1,
    offset: 0,
    dimensions: BASE_DIMENSIONS.map(function (x) {
      return 0;
    })
  };
  var UNITS = {
    // length
    meter: {
      name: 'meter',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    inch: {
      name: 'inch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    foot: {
      name: 'foot',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yard: {
      name: 'yard',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mile: {
      name: 'mile',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    link: {
      name: 'link',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rod: {
      name: 'rod',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.0292,
      offset: 0
    },
    chain: {
      name: 'chain',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    angstrom: {
      name: 'angstrom',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1e-10,
      offset: 0
    },
    m: {
      name: 'm',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    "in": {
      name: 'in',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    ft: {
      name: 'ft',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yd: {
      name: 'yd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mi: {
      name: 'mi',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    li: {
      name: 'li',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rd: {
      name: 'rd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.029210,
      offset: 0
    },
    ch: {
      name: 'ch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    mil: {
      name: 'mil',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0000254,
      offset: 0
    },
    // 1/1000 inch
    // Surface
    m2: {
      name: 'm2',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.SQUARED,
      value: 1,
      offset: 0
    },
    sqin: {
      name: 'sqin',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.00064516,
      offset: 0
    },
    // 645.16 mm2
    sqft: {
      name: 'sqft',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.09290304,
      offset: 0
    },
    // 0.09290304 m2
    sqyd: {
      name: 'sqyd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.83612736,
      offset: 0
    },
    // 0.83612736 m2
    sqmi: {
      name: 'sqmi',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 2589988.110336,
      offset: 0
    },
    // 2.589988110336 km2
    sqrd: {
      name: 'sqrd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 25.29295,
      offset: 0
    },
    // 25.29295 m2
    sqch: {
      name: 'sqch',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 404.6873,
      offset: 0
    },
    // 404.6873 m2
    sqmil: {
      name: 'sqmil',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 6.4516e-10,
      offset: 0
    },
    // 6.4516 * 10^-10 m2
    acre: {
      name: 'acre',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 4046.86,
      offset: 0
    },
    // 4046.86 m2
    hectare: {
      name: 'hectare',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 10000,
      offset: 0
    },
    // 10000 m2
    // Volume
    m3: {
      name: 'm3',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.CUBIC,
      value: 1,
      offset: 0
    },
    L: {
      name: 'L',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    // litre
    l: {
      name: 'l',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    // litre
    litre: {
      name: 'litre',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    cuin: {
      name: 'cuin',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1.6387064e-5,
      offset: 0
    },
    // 1.6387064e-5 m3
    cuft: {
      name: 'cuft',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.028316846592,
      offset: 0
    },
    // 28.316 846 592 L
    cuyd: {
      name: 'cuyd',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.764554857984,
      offset: 0
    },
    // 764.554 857 984 L
    teaspoon: {
      name: 'teaspoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000005,
      offset: 0
    },
    // 5 mL
    tablespoon: {
      name: 'tablespoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000015,
      offset: 0
    },
    // 15 mL
    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
    drop: {
      name: 'drop',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    gtt: {
      name: 'gtt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    // Liquid volume
    minim: {
      name: 'minim',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00000006161152,
      offset: 0
    },
    // 0.06161152 mL
    fluiddram: {
      name: 'fluiddram',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },
    // 3.696691 mL
    fluidounce: {
      name: 'fluidounce',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    },
    // 29.57353 mL
    gill: {
      name: 'gill',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    },
    // 118.2941 mL
    cc: {
      name: 'cc',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1e-6,
      offset: 0
    },
    // 1e-6 L
    cup: {
      name: 'cup',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    },
    // 236.5882 mL
    pint: {
      name: 'pint',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    },
    // 473.1765 mL
    quart: {
      name: 'quart',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    },
    // 946.3529 mL
    gallon: {
      name: 'gallon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    },
    // 3.785412 L
    beerbarrel: {
      name: 'beerbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    oilbarrel: {
      name: 'oilbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    hogshead: {
      name: 'hogshead',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.2384810,
      offset: 0
    },
    // 238.4810 L
    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
    fldr: {
      name: 'fldr',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },
    // 3.696691 mL
    floz: {
      name: 'floz',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    },
    // 29.57353 mL
    gi: {
      name: 'gi',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    },
    // 118.2941 mL
    cp: {
      name: 'cp',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    },
    // 236.5882 mL
    pt: {
      name: 'pt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    },
    // 473.1765 mL
    qt: {
      name: 'qt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    },
    // 946.3529 mL
    gal: {
      name: 'gal',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    },
    // 3.785412 L
    bbl: {
      name: 'bbl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    obl: {
      name: 'obl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
    // Mass
    g: {
      name: 'g',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    gram: {
      name: 'gram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    ton: {
      name: 'ton',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 907.18474,
      offset: 0
    },
    t: {
      name: 't',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 1000,
      offset: 0
    },
    tonne: {
      name: 'tonne',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 1000,
      offset: 0
    },
    grain: {
      name: 'grain',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dram: {
      name: 'dram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    ounce: {
      name: 'ounce',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    poundmass: {
      name: 'poundmass',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    hundredweight: {
      name: 'hundredweight',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    stick: {
      name: 'stick',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 115e-3,
      offset: 0
    },
    stone: {
      name: 'stone',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 6.35029318,
      offset: 0
    },
    gr: {
      name: 'gr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dr: {
      name: 'dr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    oz: {
      name: 'oz',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    lbm: {
      name: 'lbm',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    cwt: {
      name: 'cwt',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    // Time
    s: {
      name: 's',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    min: {
      name: 'min',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    h: {
      name: 'h',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    second: {
      name: 'second',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    sec: {
      name: 'sec',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    minute: {
      name: 'minute',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    hour: {
      name: 'hour',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    day: {
      name: 'day',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 86400,
      offset: 0
    },
    week: {
      name: 'week',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 7 * 86400,
      offset: 0
    },
    month: {
      name: 'month',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 2629800,
      // 1/12th of Julian year
      offset: 0
    },
    year: {
      name: 'year',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600,
      // Julian year
      offset: 0
    },
    decade: {
      name: 'decade',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 315576000,
      // Julian decade
      offset: 0
    },
    century: {
      name: 'century',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3155760000,
      // Julian century
      offset: 0
    },
    millennium: {
      name: 'millennium',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600000,
      // Julian millennium
      offset: 0
    },
    // Frequency
    hertz: {
      name: 'Hertz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    Hz: {
      name: 'Hz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    // Angle
    rad: {
      name: 'rad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    radian: {
      name: 'radian',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
    deg: {
      name: 'deg',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    degree: {
      name: 'degree',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
    grad: {
      name: 'grad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    gradian: {
      name: 'gradian',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
    cycle: {
      name: 'cycle',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
    arcsec: {
      name: 'arcsec',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
    arcmin: {
      name: 'arcmin',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // Electric current
    A: {
      name: 'A',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    ampere: {
      name: 'ampere',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // Temperature
    // K(C) = °C + 273.15
    // K(F) = (°F + 459.67) / 1.8
    // K(R) = °R / 1.8
    K: {
      name: 'K',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    degC: {
      name: 'degC',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    degF: {
      name: 'degF',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    degR: {
      name: 'degR',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    kelvin: {
      name: 'kelvin',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    celsius: {
      name: 'celsius',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    fahrenheit: {
      name: 'fahrenheit',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    rankine: {
      name: 'rankine',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    // amount of substance
    mol: {
      name: 'mol',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    mole: {
      name: 'mole',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // luminous intensity
    cd: {
      name: 'cd',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    candela: {
      name: 'candela',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // TODO: units STERADIAN
    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // Force
    N: {
      name: 'N',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    newton: {
      name: 'newton',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    dyn: {
      name: 'dyn',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 0.00001,
      offset: 0
    },
    dyne: {
      name: 'dyne',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 0.00001,
      offset: 0
    },
    lbf: {
      name: 'lbf',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    poundforce: {
      name: 'poundforce',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    kip: {
      name: 'kip',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 4448.2216,
      offset: 0
    },
    // Energy
    J: {
      name: 'J',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    joule: {
      name: 'joule',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    erg: {
      name: 'erg',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.NONE,
      value: 1e-7,
      offset: 0
    },
    Wh: {
      name: 'Wh',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 3600,
      offset: 0
    },
    BTU: {
      name: 'BTU',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.BTU,
      value: 1055.05585262,
      offset: 0
    },
    eV: {
      name: 'eV',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1.602176565e-19,
      offset: 0
    },
    electronvolt: {
      name: 'electronvolt',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.LONG,
      value: 1.602176565e-19,
      offset: 0
    },
    // Power
    W: {
      name: 'W',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    watt: {
      name: 'watt',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    hp: {
      name: 'hp',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.NONE,
      value: 745.6998715386,
      offset: 0
    },
    // Electrical power units
    VAR: {
      name: 'VAR',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: Complex.I,
      offset: 0
    },
    VA: {
      name: 'VA',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Pressure
    Pa: {
      name: 'Pa',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    psi: {
      name: 'psi',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 6894.75729276459,
      offset: 0
    },
    atm: {
      name: 'atm',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 101325,
      offset: 0
    },
    bar: {
      name: 'bar',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORTLONG,
      value: 100000,
      offset: 0
    },
    torr: {
      name: 'torr',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmHg: {
      name: 'mmHg',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmH2O: {
      name: 'mmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 9.80665,
      offset: 0
    },
    cmH2O: {
      name: 'cmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 98.0665,
      offset: 0
    },
    // Electric charge
    coulomb: {
      name: 'coulomb',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    C: {
      name: 'C',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric capacitance
    farad: {
      name: 'farad',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    F: {
      name: 'F',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric potential
    volt: {
      name: 'volt',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    V: {
      name: 'V',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric resistance
    ohm: {
      name: 'ohm',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORTLONG,
      // Both Mohm and megaohm are acceptable
      value: 1,
      offset: 0
    },

    /*
     * Unicode breaks in browsers if charset is not specified
    Ω: {
      name: 'Ω',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    */
    // Electric inductance
    henry: {
      name: 'henry',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    H: {
      name: 'H',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric conductance
    siemens: {
      name: 'siemens',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    S: {
      name: 'S',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux
    weber: {
      name: 'weber',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    Wb: {
      name: 'Wb',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux density
    tesla: {
      name: 'tesla',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    T: {
      name: 'T',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Binary
    b: {
      name: 'b',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 1,
      offset: 0
    },
    bits: {
      name: 'bits',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 1,
      offset: 0
    },
    B: {
      name: 'B',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 8,
      offset: 0
    },
    bytes: {
      name: 'bytes',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 8,
      offset: 0
    }
  }; // aliases (formerly plurals)

  var ALIASES = {
    meters: 'meter',
    inches: 'inch',
    feet: 'foot',
    yards: 'yard',
    miles: 'mile',
    links: 'link',
    rods: 'rod',
    chains: 'chain',
    angstroms: 'angstrom',
    lt: 'l',
    litres: 'litre',
    liter: 'litre',
    liters: 'litre',
    teaspoons: 'teaspoon',
    tablespoons: 'tablespoon',
    minims: 'minim',
    fluiddrams: 'fluiddram',
    fluidounces: 'fluidounce',
    gills: 'gill',
    cups: 'cup',
    pints: 'pint',
    quarts: 'quart',
    gallons: 'gallon',
    beerbarrels: 'beerbarrel',
    oilbarrels: 'oilbarrel',
    hogsheads: 'hogshead',
    gtts: 'gtt',
    grams: 'gram',
    tons: 'ton',
    tonnes: 'tonne',
    grains: 'grain',
    drams: 'dram',
    ounces: 'ounce',
    poundmasses: 'poundmass',
    hundredweights: 'hundredweight',
    sticks: 'stick',
    lb: 'lbm',
    lbs: 'lbm',
    kips: 'kip',
    acres: 'acre',
    hectares: 'hectare',
    sqfeet: 'sqft',
    sqyard: 'sqyd',
    sqmile: 'sqmi',
    sqmiles: 'sqmi',
    mmhg: 'mmHg',
    mmh2o: 'mmH2O',
    cmh2o: 'cmH2O',
    seconds: 'second',
    secs: 'second',
    minutes: 'minute',
    mins: 'minute',
    hours: 'hour',
    hr: 'hour',
    hrs: 'hour',
    days: 'day',
    weeks: 'week',
    months: 'month',
    years: 'year',
    decades: 'decade',
    centuries: 'century',
    millennia: 'millennium',
    hertz: 'hertz',
    radians: 'radian',
    degrees: 'degree',
    gradians: 'gradian',
    cycles: 'cycle',
    arcsecond: 'arcsec',
    arcseconds: 'arcsec',
    arcminute: 'arcmin',
    arcminutes: 'arcmin',
    BTUs: 'BTU',
    watts: 'watt',
    joules: 'joule',
    amperes: 'ampere',
    coulombs: 'coulomb',
    volts: 'volt',
    ohms: 'ohm',
    farads: 'farad',
    webers: 'weber',
    teslas: 'tesla',
    electronvolts: 'electronvolt',
    moles: 'mole',
    bit: 'bits',
    "byte": 'bytes'
  };
  /**
   * Calculate the values for the angle units.
   * Value is calculated as number or BigNumber depending on the configuration
   * @param {{number: 'number' | 'BigNumber'}} config
   */

  function calculateAngleValues(config) {
    if (config.number === 'BigNumber') {
      var pi = createBigNumberPi(_BigNumber);
      UNITS.rad.value = new _BigNumber(1);
      UNITS.deg.value = pi.div(180); // 2 * pi / 360

      UNITS.grad.value = pi.div(200); // 2 * pi / 400

      UNITS.cycle.value = pi.times(2); // 2 * pi

      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600

      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
    } else {
      // number
      UNITS.rad.value = 1;
      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360

      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400

      UNITS.cycle.value = Math.PI * 2; // 2 * pi

      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600

      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60
    } // copy to the full names of the angles


    UNITS.radian.value = UNITS.rad.value;
    UNITS.degree.value = UNITS.deg.value;
    UNITS.gradian.value = UNITS.grad.value;
  } // apply the angle values now


  calculateAngleValues(config);

  if (on) {
    // recalculate the values on change of configuration
    on('config', function (curr, prev) {
      if (curr.number !== prev.number) {
        calculateAngleValues(curr);
      }
    });
  }
  /**
   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
   */


  var UNIT_SYSTEMS = {
    si: {
      // Base units
      NONE: {
        unit: UNIT_NONE,
        prefix: PREFIXES.NONE['']
      },
      LENGTH: {
        unit: UNITS.m,
        prefix: PREFIXES.SHORT['']
      },
      MASS: {
        unit: UNITS.g,
        prefix: PREFIXES.SHORT.k
      },
      TIME: {
        unit: UNITS.s,
        prefix: PREFIXES.SHORT['']
      },
      CURRENT: {
        unit: UNITS.A,
        prefix: PREFIXES.SHORT['']
      },
      TEMPERATURE: {
        unit: UNITS.K,
        prefix: PREFIXES.SHORT['']
      },
      LUMINOUS_INTENSITY: {
        unit: UNITS.cd,
        prefix: PREFIXES.SHORT['']
      },
      AMOUNT_OF_SUBSTANCE: {
        unit: UNITS.mol,
        prefix: PREFIXES.SHORT['']
      },
      ANGLE: {
        unit: UNITS.rad,
        prefix: PREFIXES.SHORT['']
      },
      BIT: {
        unit: UNITS.bits,
        prefix: PREFIXES.SHORT['']
      },
      // Derived units
      FORCE: {
        unit: UNITS.N,
        prefix: PREFIXES.SHORT['']
      },
      ENERGY: {
        unit: UNITS.J,
        prefix: PREFIXES.SHORT['']
      },
      POWER: {
        unit: UNITS.W,
        prefix: PREFIXES.SHORT['']
      },
      PRESSURE: {
        unit: UNITS.Pa,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CHARGE: {
        unit: UNITS.C,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CAPACITANCE: {
        unit: UNITS.F,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_POTENTIAL: {
        unit: UNITS.V,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_RESISTANCE: {
        unit: UNITS.ohm,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_INDUCTANCE: {
        unit: UNITS.H,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CONDUCTANCE: {
        unit: UNITS.S,
        prefix: PREFIXES.SHORT['']
      },
      MAGNETIC_FLUX: {
        unit: UNITS.Wb,
        prefix: PREFIXES.SHORT['']
      },
      MAGNETIC_FLUX_DENSITY: {
        unit: UNITS.T,
        prefix: PREFIXES.SHORT['']
      },
      FREQUENCY: {
        unit: UNITS.Hz,
        prefix: PREFIXES.SHORT['']
      }
    }
  }; // Clone to create the other unit systems

  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.cgs.LENGTH = {
    unit: UNITS.m,
    prefix: PREFIXES.SHORT.c
  };
  UNIT_SYSTEMS.cgs.MASS = {
    unit: UNITS.g,
    prefix: PREFIXES.SHORT['']
  };
  UNIT_SYSTEMS.cgs.FORCE = {
    unit: UNITS.dyn,
    prefix: PREFIXES.SHORT['']
  };
  UNIT_SYSTEMS.cgs.ENERGY = {
    unit: UNITS.erg,
    prefix: PREFIXES.NONE['']
  }; // there are wholly 4 unique cgs systems for electricity and magnetism,
  // so let's not worry about it unless somebody complains

  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.us.LENGTH = {
    unit: UNITS.ft,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.MASS = {
    unit: UNITS.lbm,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.TEMPERATURE = {
    unit: UNITS.degF,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.FORCE = {
    unit: UNITS.lbf,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.ENERGY = {
    unit: UNITS.BTU,
    prefix: PREFIXES.BTU['']
  };
  UNIT_SYSTEMS.us.POWER = {
    unit: UNITS.hp,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.PRESSURE = {
    unit: UNITS.psi,
    prefix: PREFIXES.NONE['']
  }; // Add additional unit systems here.
  // Choose a unit system to seed the auto unit system.

  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system

  var currentUnitSystem = UNIT_SYSTEMS.auto;
  /**
   * Set a unit system for formatting derived units.
   * @param {string} [name] The name of the unit system.
   */

  Unit.setUnitSystem = function (name) {
    if (Object(utils_object["f" /* hasOwnProperty */])(UNIT_SYSTEMS, name)) {
      currentUnitSystem = UNIT_SYSTEMS[name];
    } else {
      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
    }
  };
  /**
   * Return the current unit system.
   * @return {string} The current unit system.
   */


  Unit.getUnitSystem = function () {
    for (var _key in UNIT_SYSTEMS) {
      if (UNIT_SYSTEMS[_key] === currentUnitSystem) {
        return _key;
      }
    }
  };
  /**
   * Converters to convert from number to an other numeric type like BigNumber
   * or Fraction
   */


  Unit.typeConverters = {
    BigNumber: function BigNumber(x) {
      return new _BigNumber(x + ''); // stringify to prevent constructor error
    },
    Fraction: function Fraction(x) {
      return new _Fraction(x);
    },
    Complex: function Complex(x) {
      return x;
    },
    number: function number(x) {
      return x;
    }
  };
  /**
   * Retrieve the right convertor function corresponding with the type
   * of provided exampleValue.
   *
   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
   *                        In case of an unknown type,
   * @return {Function}
   */

  Unit._getNumberConverter = function (type) {
    if (!Unit.typeConverters[type]) {
      throw new TypeError('Unsupported type "' + type + '"');
    }

    return Unit.typeConverters[type];
  }; // Add dimensions to each built-in unit


  for (var _key2 in UNITS) {
    var unit = UNITS[_key2];
    unit.dimensions = unit.base.dimensions;
  } // Create aliases


  for (var _name2 in ALIASES) {
    if (Object(utils_object["f" /* hasOwnProperty */])(ALIASES, _name2)) {
      var _unit2 = UNITS[ALIASES[_name2]];
      var alias = {};

      for (var _key3 in _unit2) {
        if (Object(utils_object["f" /* hasOwnProperty */])(_unit2, _key3)) {
          alias[_key3] = _unit2[_key3];
        }
      }

      alias.name = _name2;
      UNITS[_name2] = alias;
    }
  }

  function assertUnitNameIsValid(name) {
    for (var i = 0; i < name.length; i++) {
      var _c = name.charAt(i);

      var isValidAlpha = function isValidAlpha(p) {
        return /^[a-zA-Z]$/.test(p);
      };

      var _isDigit = function _isDigit(c) {
        return c >= '0' && c <= '9';
      };

      if (i === 0 && !isValidAlpha(_c)) {
        throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
      }

      if (i > 0 && !(isValidAlpha(_c) || _isDigit(_c))) {
        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
      }
    }
  }
  /**
   * Wrapper around createUnitSingle.
   * Example:
   *  createUnit({
   *    foo: { },
   *    bar: {
   *      definition: 'kg/foo',
   *      aliases: ['ba', 'barr', 'bars'],
   *      offset: 200
   *    },
   *    baz: '4 bar'
   *  },
   *  {
   *    override: true
   *  })
   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
   * @param {object} options
   */


  Unit.createUnit = function (obj, options) {
    if (Unit_typeof(obj) !== 'object') {
      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
    } // Remove all units and aliases we are overriding


    if (options && options.override) {
      for (var _key4 in obj) {
        if (Object(utils_object["f" /* hasOwnProperty */])(obj, _key4)) {
          Unit.deleteUnit(_key4);
        }

        if (obj[_key4].aliases) {
          for (var i = 0; i < obj[_key4].aliases.length; i++) {
            Unit.deleteUnit(obj[_key4].aliases[i]);
          }
        }
      }
    } // TODO: traverse multiple times until all units have been added


    var lastUnit;

    for (var _key5 in obj) {
      if (Object(utils_object["f" /* hasOwnProperty */])(obj, _key5)) {
        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);
      }
    }

    return lastUnit;
  };
  /**
   * Create a user-defined unit and register it with the Unit type.
   * Example:
   *  createUnitSingle('knot', '0.514444444 m/s')
   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.
   *
   * @return {Unit}
   */


  Unit.createUnitSingle = function (name, obj, options) {
    if (typeof obj === 'undefined' || obj === null) {
      obj = {};
    }

    if (typeof name !== 'string') {
      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
    } // Check collisions with existing units


    if (Object(utils_object["f" /* hasOwnProperty */])(UNITS, name)) {
      throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.


    assertUnitNameIsValid(name);
    var defUnit = null; // The Unit from which the new unit will be created.

    var aliases = [];
    var offset = 0;
    var definition;
    var prefixes;

    if (obj && obj.type === 'Unit') {
      defUnit = obj.clone();
    } else if (typeof obj === 'string') {
      if (obj !== '') {
        definition = obj;
      }
    } else if (Unit_typeof(obj) === 'object') {
      definition = obj.definition;
      prefixes = obj.prefixes;
      offset = obj.offset;

      if (obj.aliases) {
        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
      }
    } else {
      throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
    }

    if (aliases) {
      for (var i = 0; i < aliases.length; i++) {
        if (Object(utils_object["f" /* hasOwnProperty */])(UNITS, aliases[i])) {
          throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
        }
      }
    }

    if (definition && typeof definition === 'string' && !defUnit) {
      try {
        defUnit = Unit.parse(definition, {
          allowNoUnits: true
        });
      } catch (ex) {
        ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
        throw ex;
      }
    } else if (definition && definition.type === 'Unit') {
      defUnit = definition.clone();
    }

    aliases = aliases || [];
    offset = offset || 0;

    if (prefixes && prefixes.toUpperCase) {
      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
    } else {
      prefixes = PREFIXES.NONE;
    } // If defUnit is null, it is because the user did not
    // specify a defintion. So create a new base dimension.


    var newUnit = {};

    if (!defUnit) {
      // Add a new base dimension
      var baseName = name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo

      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
        throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
      }

      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units

      for (var b in BASE_UNITS) {
        if (Object(utils_object["f" /* hasOwnProperty */])(BASE_UNITS, b)) {
          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
        }
      } // Add the new base unit


      var newBaseUnit = {
        dimensions: []
      };

      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {
        newBaseUnit.dimensions[_i6] = 0;
      }

      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
      newBaseUnit.key = baseName;
      BASE_UNITS[baseName] = newBaseUnit;
      newUnit = {
        name: name,
        value: 1,
        dimensions: BASE_UNITS[baseName].dimensions.slice(0),
        prefixes: prefixes,
        offset: offset,
        base: BASE_UNITS[baseName]
      };
      currentUnitSystem[baseName] = {
        unit: newUnit,
        prefix: PREFIXES.NONE['']
      };
    } else {
      newUnit = {
        name: name,
        value: defUnit.value,
        dimensions: defUnit.dimensions.slice(0),
        prefixes: prefixes,
        offset: offset
      }; // Create a new base if no matching base exists

      var anyMatch = false;

      for (var _i7 in BASE_UNITS) {
        if (Object(utils_object["f" /* hasOwnProperty */])(BASE_UNITS, _i7)) {
          var match = true;

          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {
              match = false;
              break;
            }
          }

          if (match) {
            anyMatch = true;
            newUnit.base = BASE_UNITS[_i7];
            break;
          }
        }
      }

      if (!anyMatch) {
        var _baseName = name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
        // Add the new base unit


        var _newBaseUnit = {
          dimensions: defUnit.dimensions.slice(0)
        };
        _newBaseUnit.key = _baseName;
        BASE_UNITS[_baseName] = _newBaseUnit;
        currentUnitSystem[_baseName] = {
          unit: newUnit,
          prefix: PREFIXES.NONE['']
        };
        newUnit.base = BASE_UNITS[_baseName];
      }
    }

    Unit.UNITS[name] = newUnit;

    for (var _i8 = 0; _i8 < aliases.length; _i8++) {
      var aliasName = aliases[_i8];
      var _alias = {};

      for (var _key6 in newUnit) {
        if (Object(utils_object["f" /* hasOwnProperty */])(newUnit, _key6)) {
          _alias[_key6] = newUnit[_key6];
        }
      }

      _alias.name = aliasName;
      Unit.UNITS[aliasName] = _alias;
    }

    return new Unit(null, name);
  };

  Unit.deleteUnit = function (name) {
    delete Unit.UNITS[name];
  }; // expose arrays with prefixes, dimensions, units, systems


  Unit.PREFIXES = PREFIXES;
  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
  Unit.BASE_UNITS = BASE_UNITS;
  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
  Unit.UNITS = UNITS;
  return Unit;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/type/unit/function/unit.js


var unit_name = 'unit';
var unit_dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit

var createUnitFunction =
/* #__PURE__ */
Object(factory["a" /* factory */])(unit_name, unit_dependencies, function (_ref) {
  var typed = _ref.typed,
      Unit = _ref.Unit;

  /**
   * Create a unit. Depending on the passed arguments, the function
   * will create and return a new math.Unit object.
   * When a matrix is provided, all elements will be converted to units.
   *
   * Syntax:
   *
   *     math.unit(unit : string)
   *     math.unit(value : number, unit : string)
   *
   * Examples:
   *
   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm
   *    const b = math.unit('23 kg')    // returns Unit 23 kg
   *    a.to('m')                       // returns Unit 0.05 m
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
   *
   * @param {* | Array | Matrix} args   A number and unit.
   * @return {Unit | Array | Matrix}    The created unit
   */
  var unit = typed(unit_name, {
    Unit: function Unit(x) {
      return x.clone();
    },
    string: function string(x) {
      if (Unit.isValuelessUnit(x)) {
        return new Unit(null, x); // a pure unit
      }

      return Unit.parse(x, {
        allowNoUnits: true
      }); // a unit with value, like '5cm'
    },
    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {
      return new Unit(value, unit);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, unit);
    }
  });
  return unit;
});
// CONCATENATED MODULE: ./src/type/matrix/function/sparse.js

var sparse_name = 'sparse';
var sparse_dependencies = ['typed', 'SparseMatrix'];
var createSparse =
/* #__PURE__ */
Object(factory["a" /* factory */])(sparse_name, sparse_dependencies, function (_ref) {
  var typed = _ref.typed,
      SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   *
   * Syntax:
   *
   *    math.sparse()               // creates an empty sparse matrix.
   *    math.sparse(data)           // creates a sparse matrix with initial data.
   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
   *
   * Examples:
   *
   *    let m = math.sparse([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, matrix
   *
   * @param {Array | Matrix} [data]    A two dimensional array
   *
   * @return {Matrix} The created matrix
   */
  return typed(sparse_name, {
    '': function _() {
      return new SparseMatrix([]);
    },
    string: function string(datatype) {
      return new SparseMatrix([], datatype);
    },
    'Array | Matrix': function ArrayMatrix(data) {
      return new SparseMatrix(data);
    },
    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
      return new SparseMatrix(data, datatype);
    }
  });
});
// CONCATENATED MODULE: ./src/type/unit/function/createUnit.js

var createUnit_name = 'createUnit';
var createUnit_dependencies = ['typed', 'Unit'];
var createCreateUnit =
/* #__PURE__ */
Object(factory["a" /* factory */])(createUnit_name, createUnit_dependencies, function (_ref) {
  var typed = _ref.typed,
      Unit = _ref.Unit;

  /**
   * Create a user-defined unit and register it with the Unit type.
   *
   * Syntax:
   *
   *     math.createUnit({
   *       baseUnit1: {
   *         aliases: [string, ...]
   *         prefixes: object
   *       },
   *       unit2: {
   *         definition: string,
   *         aliases: [string, ...]
   *         prefixes: object,
   *         offset: number
   *       },
   *       unit3: string    // Shortcut
   *     })
   *
   *     // Another shortcut:
   *     math.createUnit(string, unit : string, [object])
   *
   * Examples:
   *
   *     math.createUnit('foo')
   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})
   *     math.createUnit('mph', '1 mile/hour')
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     - `prefixes {string}` "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']
   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
   *
   * See also:
   *
   *     unit
   *
   * @return {Unit} The new unit
   */
  return typed(createUnit_name, {
    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
    'Object, Object': function ObjectObject(obj, options) {
      return Unit.createUnit(obj, options);
    },
    // Same as above but without the options.
    Object: function Object(obj) {
      return Unit.createUnit(obj, {});
    },
    // Shortcut method for creating one unit.
    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {
      var obj = {};
      obj[name] = def;
      return Unit.createUnit(obj, options);
    },
    // Same as above but without the options.
    'string, Unit | string | Object': function stringUnitStringObject(name, def) {
      var obj = {};
      obj[name] = def;
      return Unit.createUnit(obj, {});
    },
    // Without a definition, creates a base unit.
    string: function string(name) {
      var obj = {};
      obj[name] = {};
      return Unit.createUnit(obj, {});
    }
  });
});
// CONCATENATED MODULE: ./src/function/trigonometry/acos.js


var acos_name = 'acos';
var acos_dependencies = ['typed', 'config', 'Complex'];
var createAcos =
/* #__PURE__ */
Object(factory["a" /* factory */])(acos_name, acos_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex;

  /**
   * Calculate the inverse cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acos(x)
   *
   * Examples:
   *
   *    math.acos(0.5)           // returns number 1.0471975511965979
   *    math.acos(math.cos(1.5)) // returns number 1.5
   *
   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    cos, atan, asin
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
   */
  var acos = typed(acos_name, {
    number: function number(x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.acos(x);
      } else {
        return new Complex(x, 0).acos();
      }
    },
    Complex: function Complex(x) {
      return x.acos();
    },
    BigNumber: function BigNumber(x) {
      return x.acos();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acos);
    }
  });
  return acos;
});
// CONCATENATED MODULE: ./src/plain/number/trigonometry.js

var trigonometry_n1 = 'number';
var trigonometry_n2 = 'number, number';
function acosNumber(x) {
  return Math.acos(x);
}
acosNumber.signature = trigonometry_n1;
function acoshNumber(x) {
  return Object(utils_number["a" /* acosh */])(x);
}
acoshNumber.signature = trigonometry_n1;
function acotNumber(x) {
  return Math.atan(1 / x);
}
acotNumber.signature = trigonometry_n1;
function acothNumber(x) {
  return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
}
acothNumber.signature = trigonometry_n1;
function acscNumber(x) {
  return Math.asin(1 / x);
}
acscNumber.signature = trigonometry_n1;
function acschNumber(x) {
  var xInv = 1 / x;
  return Math.log(xInv + Math.sqrt(xInv * xInv + 1));
}
acschNumber.signature = trigonometry_n1;
function asecNumber(x) {
  return Math.acos(1 / x);
}
asecNumber.signature = trigonometry_n1;
function asechNumber(x) {
  var xInv = 1 / x;
  var ret = Math.sqrt(xInv * xInv - 1);
  return Math.log(ret + xInv);
}
asechNumber.signature = trigonometry_n1;
function asinNumber(x) {
  return Math.asin(x);
}
asinNumber.signature = trigonometry_n1;
function asinhNumber(x) {
  return Object(utils_number["b" /* asinh */])(x);
}
asinhNumber.signature = trigonometry_n1;
function atanNumber(x) {
  return Math.atan(x);
}
atanNumber.signature = trigonometry_n1;
function atan2Number(y, x) {
  return Math.atan2(y, x);
}
atan2Number.signature = trigonometry_n2;
function atanhNumber(x) {
  return Object(utils_number["c" /* atanh */])(x);
}
atanhNumber.signature = trigonometry_n1;
function cosNumber(x) {
  return Math.cos(x);
}
cosNumber.signature = trigonometry_n1;
function coshNumber(x) {
  return Object(utils_number["e" /* cosh */])(x);
}
coshNumber.signature = trigonometry_n1;
function cotNumber(x) {
  return 1 / Math.tan(x);
}
cotNumber.signature = trigonometry_n1;
function cothNumber(x) {
  var e = Math.exp(2 * x);
  return (e + 1) / (e - 1);
}
cothNumber.signature = trigonometry_n1;
function cscNumber(x) {
  return 1 / Math.sin(x);
}
cscNumber.signature = trigonometry_n1;
function cschNumber(x) {
  // consider values close to zero (+/-)
  if (x === 0) {
    return Number.POSITIVE_INFINITY;
  } else {
    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * Object(utils_number["n" /* sign */])(x);
  }
}
cschNumber.signature = trigonometry_n1;
function secNumber(x) {
  return 1 / Math.cos(x);
}
secNumber.signature = trigonometry_n1;
function sechNumber(x) {
  return 2 / (Math.exp(x) + Math.exp(-x));
}
sechNumber.signature = trigonometry_n1;
function sinNumber(x) {
  return Math.sin(x);
}
sinNumber.signature = trigonometry_n1;
function sinhNumber(x) {
  return Object(utils_number["o" /* sinh */])(x);
}
sinhNumber.signature = trigonometry_n1;
function tanNumber(x) {
  return Math.tan(x);
}
tanNumber.signature = trigonometry_n1;
function tanhNumber(x) {
  return Object(utils_number["p" /* tanh */])(x);
}
tanhNumber.signature = trigonometry_n1;
// CONCATENATED MODULE: ./src/function/trigonometry/acosh.js



var acosh_name = 'acosh';
var acosh_dependencies = ['typed', 'config', 'Complex'];
var createAcosh =
/* #__PURE__ */
Object(factory["a" /* factory */])(acosh_name, acosh_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex;

  /**
   * Calculate the hyperbolic arccos of a value,
   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acosh(x)
   *
   * Examples:
   *
   *    math.acosh(1.5)       // returns 0.9624236501192069
   *
   * See also:
   *
   *    cosh, asinh, atanh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
   */
  var acosh = typed(acosh_name, {
    number: function number(x) {
      if (x >= 1 || config.predictable) {
        return acoshNumber(x);
      }

      if (x <= -1) {
        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
      }

      return new Complex(x, 0).acosh();
    },
    Complex: function Complex(x) {
      return x.acosh();
    },
    BigNumber: function BigNumber(x) {
      return x.acosh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acosh);
    }
  });
  return acosh;
});
// CONCATENATED MODULE: ./src/function/trigonometry/acot.js



var acot_name = 'acot';
var acot_dependencies = ['typed', 'BigNumber'];
var createAcot =
/* #__PURE__ */
Object(factory["a" /* factory */])(acot_name, acot_dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acot(x)
   *
   * Examples:
   *
   *    math.acot(0.5)           // returns number 0.4636476090008061
   *    math.acot(math.cot(1.5)) // returns number 1.5
   *
   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    cot, atan
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cotangent of x
   */
  var acot = typed(acot_name, {
    number: acotNumber,
    Complex: function Complex(x) {
      return x.acot();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).atan();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acot);
    }
  });
  return acot;
});
// CONCATENATED MODULE: ./src/function/trigonometry/acoth.js



var acoth_name = 'acoth';
var acoth_dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAcoth =
/* #__PURE__ */
Object(factory["a" /* factory */])(acoth_name, acoth_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic arccotangent of a value,
   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acoth(x)
   *
   * Examples:
   *
   *    math.acoth(0.5)       // returns 0.8047189562170503
   *
   * See also:
   *
   *    acsch, asech
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
   */
  var acoth = typed(acoth_name, {
    number: function number(x) {
      if (x >= 1 || x <= -1 || config.predictable) {
        return acothNumber(x);
      }

      return new Complex(x, 0).acoth();
    },
    Complex: function Complex(x) {
      return x.acoth();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).atanh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acoth);
    }
  });
  return acoth;
});
// CONCATENATED MODULE: ./src/function/trigonometry/acsc.js



var acsc_name = 'acsc';
var acsc_dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAcsc =
/* #__PURE__ */
Object(factory["a" /* factory */])(acsc_name, acsc_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsc(x)
   *
   * Examples:
   *
   *    math.acsc(0.5)           // returns number 0.5235987755982989
   *    math.acsc(math.csc(1.5)) // returns number ~1.5
   *
   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    csc, asin, asec
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cosecant of x
   */
  var acsc = typed(acsc_name, {
    number: function number(x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return acscNumber(x);
      }

      return new Complex(x, 0).acsc();
    },
    Complex: function Complex(x) {
      return x.acsc();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).asin();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acsc);
    }
  });
  return acsc;
});
// CONCATENATED MODULE: ./src/function/trigonometry/acsch.js



var acsch_name = 'acsch';
var acsch_dependencies = ['typed', 'BigNumber'];
var createAcsch =
/* #__PURE__ */
Object(factory["a" /* factory */])(acsch_name, acsch_dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic arccosecant of a value,
   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsch(x)
   *
   * Examples:
   *
   *    math.acsch(0.5)       // returns 1.4436354751788103
   *
   * See also:
   *
   *    asech, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
   */
  var acsch = typed(acsch_name, {
    number: acschNumber,
    Complex: function Complex(x) {
      return x.acsch();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).asinh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acsch);
    }
  });
  return acsch;
});
// CONCATENATED MODULE: ./src/function/trigonometry/asec.js



var asec_name = 'asec';
var asec_dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAsec =
/* #__PURE__ */
Object(factory["a" /* factory */])(asec_name, asec_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asec(x)
   *
   * Examples:
   *
   *    math.asec(0.5)           // returns 1.0471975511965979
   *    math.asec(math.sec(1.5)) // returns 1.5
   *
   *    math.asec(2)             // returns 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    acos, acot, acsc
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} The arc secant of x
   */
  var asec = typed(asec_name, {
    number: function number(x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return asecNumber(x);
      }

      return new Complex(x, 0).asec();
    },
    Complex: function Complex(x) {
      return x.asec();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).acos();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, asec);
    }
  });
  return asec;
});
// CONCATENATED MODULE: ./src/function/trigonometry/asech.js



var asech_name = 'asech';
var asech_dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAsech =
/* #__PURE__ */
Object(factory["a" /* factory */])(asech_name, asech_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic arcsecant of a value,
   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asech(x)
   *
   * Examples:
   *
   *    math.asech(0.5)       // returns 1.3169578969248166
   *
   * See also:
   *
   *    acsch, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
   */
  var asech = typed(asech_name, {
    number: function number(x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        var xInv = 1 / x;

        if (xInv > 0 || config.predictable) {
          return asechNumber(x);
        }

        var ret = Math.sqrt(xInv * xInv - 1);
        return new Complex(Math.log(ret - xInv), Math.PI);
      }

      return new Complex(x, 0).asech();
    },
    Complex: function Complex(x) {
      return x.asech();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).acosh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, asech);
    }
  });
  return asech;
});
// CONCATENATED MODULE: ./src/function/trigonometry/asin.js


var asin_name = 'asin';
var asin_dependencies = ['typed', 'config', 'Complex'];
var createAsin =
/* #__PURE__ */
Object(factory["a" /* factory */])(asin_name, asin_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex;

  /**
   * Calculate the inverse sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asin(x)
   *
   * Examples:
   *
   *    math.asin(0.5)           // returns number 0.5235987755982989
   *    math.asin(math.sin(1.5)) // returns number ~1.5
   *
   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    sin, atan, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
   */
  var asin = typed(asin_name, {
    number: function number(x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.asin(x);
      } else {
        return new Complex(x, 0).asin();
      }
    },
    Complex: function Complex(x) {
      return x.asin();
    },
    BigNumber: function BigNumber(x) {
      return x.asin();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since asin(0) = 0
      return deepMap(x, asin, true);
    }
  });
  return asin;
});
// CONCATENATED MODULE: ./src/function/trigonometry/asinh.js



var asinh_name = 'asinh';
var asinh_dependencies = ['typed'];
var createAsinh =
/* #__PURE__ */
Object(factory["a" /* factory */])(asinh_name, asinh_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic arcsine of a value,
   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asinh(x)
   *
   * Examples:
   *
   *    math.asinh(0.5)       // returns 0.48121182505960347
   *
   * See also:
   *
   *    acosh, atanh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
   */
  var asinh = typed('asinh', {
    number: asinhNumber,
    Complex: function Complex(x) {
      return x.asinh();
    },
    BigNumber: function BigNumber(x) {
      return x.asinh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since asinh(0) = 0
      return deepMap(x, asinh, true);
    }
  });
  return asinh;
});
// CONCATENATED MODULE: ./src/function/trigonometry/atan.js


var atan_name = 'atan';
var atan_dependencies = ['typed'];
var createAtan =
/* #__PURE__ */
Object(factory["a" /* factory */])(atan_name, atan_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the inverse tangent of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan(x)
   *
   * Examples:
   *
   *    math.atan(0.5)           // returns number 0.4636476090008061
   *    math.atan(math.tan(1.5)) // returns number 1.5
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, asin, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
   */
  var atan = typed('atan', {
    number: function number(x) {
      return Math.atan(x);
    },
    Complex: function Complex(x) {
      return x.atan();
    },
    BigNumber: function BigNumber(x) {
      return x.atan();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since atan(0) = 0
      return deepMap(x, atan, true);
    }
  });
  return atan;
});
// CONCATENATED MODULE: ./src/function/trigonometry/atan2.js








var atan2_name = 'atan2';
var atan2_dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
var createAtan2 =
/* #__PURE__ */
Object(factory["a" /* factory */])(atan2_name, atan2_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      BigNumber = _ref.BigNumber,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm09 = createAlgorithm09({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculate the inverse tangent function with two arguments, y/x.
   * By providing two arguments, the right quadrant of the computed angle can be
   * determined.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan2(y, x)
   *
   * Examples:
   *
   *    math.atan2(2, 2) / math.pi       // returns number 0.25
   *
   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
   *    const x = math.cos(angle)
   *    const y = math.sin(angle)
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, atan, sin, cos
   *
   * @param {number | Array | Matrix} y  Second dimension
   * @param {number | Array | Matrix} x  First dimension
   * @return {number | Array | Matrix} Four-quadrant inverse tangent
   */

  var atan2 = typed(atan2_name, {
    'number, number': Math.atan2,
    // Complex numbers doesn't seem to have a reasonable implementation of
    // atan2(). Even Matlab removed the support, after they only calculated
    // the atan only on base of the real part of the numbers and ignored the imaginary.
    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
      return BigNumber.atan2(y, x);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm09(x, y, atan2, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      // mind the order of y and x!
      return algorithm02(y, x, atan2, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, atan2, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, atan2);
    },
    'Array, Array': function ArrayArray(x, y) {
      return atan2(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return atan2(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return atan2(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, atan2, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, atan2, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // mind the order of y and x
      return algorithm12(y, x, atan2, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // mind the order of y and x
      return algorithm14(y, x, atan2, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      return algorithm14(matrix(x), y, atan2, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      return algorithm14(matrix(y), x, atan2, true).valueOf();
    }
  });
  return atan2;
});
// CONCATENATED MODULE: ./src/function/trigonometry/atanh.js



var atanh_name = 'atanh';
var atanh_dependencies = ['typed', 'config', 'Complex'];
var createAtanh =
/* #__PURE__ */
Object(factory["a" /* factory */])(atanh_name, atanh_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex;

  /**
   * Calculate the hyperbolic arctangent of a value,
   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atanh(x)
   *
   * Examples:
   *
   *    math.atanh(0.5)       // returns 0.5493061443340549
   *
   * See also:
   *
   *    acosh, asinh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
   */
  var atanh = typed(atanh_name, {
    number: function number(x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        return atanhNumber(x);
      }

      return new Complex(x, 0).atanh();
    },
    Complex: function Complex(x) {
      return x.atanh();
    },
    BigNumber: function BigNumber(x) {
      return x.atanh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since atanh(0) = 0
      return deepMap(x, atanh, true);
    }
  });
  return atanh;
});
// CONCATENATED MODULE: ./src/function/trigonometry/cos.js


var cos_name = 'cos';
var cos_dependencies = ['typed'];
var createCos =
/* #__PURE__ */
Object(factory["a" /* factory */])(cos_name, cos_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cos(x)
   *
   * Examples:
   *
   *    math.cos(2)                      // returns number -0.4161468365471422
   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
   *    math.cos(math.unit(180, 'deg'))  // returns number -1
   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
   */
  var cos = typed(cos_name, {
    number: Math.cos,
    Complex: function Complex(x) {
      return x.cos();
    },
    BigNumber: function BigNumber(x) {
      return x.cos();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cos is no angle');
      }

      return cos(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, cos);
    }
  });
  return cos;
});
// CONCATENATED MODULE: ./src/function/trigonometry/cosh.js



var cosh_name = 'cosh';
var cosh_dependencies = ['typed'];
var createCosh =
/* #__PURE__ */
Object(factory["a" /* factory */])(cosh_name, cosh_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic cosine of a value,
   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cosh(x)
   *
   * Examples:
   *
   *    math.cosh(0.5)       // returns number 1.1276259652063807
   *
   * See also:
   *
   *    sinh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
   */
  var cosh = typed(cosh_name, {
    number: utils_number["e" /* cosh */],
    Complex: function Complex(x) {
      return x.cosh();
    },
    BigNumber: function BigNumber(x) {
      return x.cosh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cosh is no angle');
      }

      return cosh(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, cosh);
    }
  });
  return cosh;
});
// CONCATENATED MODULE: ./src/function/trigonometry/cot.js



var cot_name = 'cot';
var cot_dependencies = ['typed', 'BigNumber'];
var createCot =
/* #__PURE__ */
Object(factory["a" /* factory */])(cot_name, cot_dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cot(x)
   *
   * Examples:
   *
   *    math.cot(2)      // returns number -0.45765755436028577
   *    1 / math.tan(2)  // returns number -0.45765755436028577
   *
   * See also:
   *
   *    tan, sec, csc
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cotangent of x
   */
  var cot = typed(cot_name, {
    number: cotNumber,
    Complex: function Complex(x) {
      return x.cot();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.tan());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cot is no angle');
      }

      return cot(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, cot);
    }
  });
  return cot;
});
// CONCATENATED MODULE: ./src/function/trigonometry/coth.js



var coth_name = 'coth';
var coth_dependencies = ['typed', 'BigNumber'];
var createCoth =
/* #__PURE__ */
Object(factory["a" /* factory */])(coth_name, coth_dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic cotangent of a value,
   * defined as `coth(x) = 1 / tanh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.coth(x)
   *
   * Examples:
   *
   *    // coth(x) = 1 / tanh(x)
   *    math.coth(2)         // returns 1.0373147207275482
   *    1 / math.tanh(2)     // returns 1.0373147207275482
   *
   * See also:
   *
   *    sinh, tanh, cosh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
   */
  var coth = typed(coth_name, {
    number: cothNumber,
    Complex: function Complex(x) {
      return x.coth();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.tanh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function coth is no angle');
      }

      return coth(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, coth);
    }
  });
  return coth;
});
// CONCATENATED MODULE: ./src/function/trigonometry/csc.js



var csc_name = 'csc';
var csc_dependencies = ['typed', 'BigNumber'];
var createCsc =
/* #__PURE__ */
Object(factory["a" /* factory */])(csc_name, csc_dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csc(x)
   *
   * Examples:
   *
   *    math.csc(2)      // returns number 1.099750170294617
   *    1 / math.sin(2)  // returns number 1.099750170294617
   *
   * See also:
   *
   *    sin, sec, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cosecant of x
   */
  var csc = typed(csc_name, {
    number: cscNumber,
    Complex: function Complex(x) {
      return x.csc();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.sin());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csc is no angle');
      }

      return csc(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, csc);
    }
  });
  return csc;
});
// CONCATENATED MODULE: ./src/function/trigonometry/csch.js



var csch_name = 'csch';
var csch_dependencies = ['typed', 'BigNumber'];
var createCsch =
/* #__PURE__ */
Object(factory["a" /* factory */])(csch_name, csch_dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic cosecant of a value,
   * defined as `csch(x) = 1 / sinh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csch(x)
   *
   * Examples:
   *
   *    // csch(x) = 1/ sinh(x)
   *    math.csch(0.5)       // returns 1.9190347513349437
   *    1 / math.sinh(0.5)   // returns 1.9190347513349437
   *
   * See also:
   *
   *    sinh, sech, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
   */
  var csch = typed(csch_name, {
    number: cschNumber,
    Complex: function Complex(x) {
      return x.csch();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.sinh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csch is no angle');
      }

      return csch(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, csch);
    }
  });
  return csch;
});
// CONCATENATED MODULE: ./src/function/trigonometry/sec.js



var sec_name = 'sec';
var sec_dependencies = ['typed', 'BigNumber'];
var createSec =
/* #__PURE__ */
Object(factory["a" /* factory */])(sec_name, sec_dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sec(x)
   *
   * Examples:
   *
   *    math.sec(2)      // returns number -2.4029979617223822
   *    1 / math.cos(2)  // returns number -2.4029979617223822
   *
   * See also:
   *
   *    cos, csc, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Secant of x
   */
  var sec = typed(sec_name, {
    number: secNumber,
    Complex: function Complex(x) {
      return x.sec();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.cos());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sec is no angle');
      }

      return sec(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, sec);
    }
  });
  return sec;
});
// CONCATENATED MODULE: ./src/function/trigonometry/sech.js



var sech_name = 'sech';
var sech_dependencies = ['typed', 'BigNumber'];
var createSech =
/* #__PURE__ */
Object(factory["a" /* factory */])(sech_name, sech_dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic secant of a value,
   * defined as `sech(x) = 1 / cosh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sech(x)
   *
   * Examples:
   *
   *    // sech(x) = 1/ cosh(x)
   *    math.sech(0.5)       // returns 0.886818883970074
   *    1 / math.cosh(0.5)   // returns 0.886818883970074
   *
   * See also:
   *
   *    cosh, csch, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
   */
  var sech = typed(sech_name, {
    number: sechNumber,
    Complex: function Complex(x) {
      return x.sech();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.cosh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sech is no angle');
      }

      return sech(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, sech);
    }
  });
  return sech;
});
// CONCATENATED MODULE: ./src/function/trigonometry/sin.js


var sin_name = 'sin';
var sin_dependencies = ['typed'];
var createSin =
/* #__PURE__ */
Object(factory["a" /* factory */])(sin_name, sin_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sin(x)
   *
   * Examples:
   *
   *    math.sin(2)                      // returns number 0.9092974268256813
   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
   *    math.sin(math.unit(90, 'deg'))   // returns number 1
   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
   */
  var sin = typed(sin_name, {
    number: Math.sin,
    Complex: function Complex(x) {
      return x.sin();
    },
    BigNumber: function BigNumber(x) {
      return x.sin();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sin is no angle');
      }

      return sin(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sin(0) = 0
      return deepMap(x, sin, true);
    }
  });
  return sin;
});
// CONCATENATED MODULE: ./src/function/trigonometry/sinh.js



var sinh_name = 'sinh';
var sinh_dependencies = ['typed'];
var createSinh =
/* #__PURE__ */
Object(factory["a" /* factory */])(sinh_name, sinh_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic sine of a value,
   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sinh(x)
   *
   * Examples:
   *
   *    math.sinh(0.5)       // returns number 0.5210953054937474
   *
   * See also:
   *
   *    cosh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
   */
  var sinh = typed(sinh_name, {
    number: sinhNumber,
    Complex: function Complex(x) {
      return x.sinh();
    },
    BigNumber: function BigNumber(x) {
      return x.sinh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sinh is no angle');
      }

      return sinh(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sinh(0) = 0
      return deepMap(x, sinh, true);
    }
  });
  return sinh;
});
// CONCATENATED MODULE: ./src/function/trigonometry/tan.js


var tan_name = 'tan';
var tan_dependencies = ['typed'];
var createTan =
/* #__PURE__ */
Object(factory["a" /* factory */])(tan_name, tan_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tan(x)
   *
   * Examples:
   *
   *    math.tan(0.5)                    // returns number 0.5463024898437905
   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
   *    math.tan(math.pi / 4)            // returns number 1
   *    math.tan(math.unit(45, 'deg'))   // returns number 1
   *
   * See also:
   *
   *    atan, sin, cos
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
   */
  var tan = typed(tan_name, {
    number: Math.tan,
    Complex: function Complex(x) {
      return x.tan();
    },
    BigNumber: function BigNumber(x) {
      return x.tan();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tan is no angle');
      }

      return tan(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since tan(0) = 0
      return deepMap(x, tan, true);
    }
  });
  return tan;
});
// CONCATENATED MODULE: ./src/function/trigonometry/tanh.js



var tanh_name = 'tanh';
var tanh_dependencies = ['typed'];
var createTanh =
/* #__PURE__ */
Object(factory["a" /* factory */])(tanh_name, tanh_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic tangent of a value,
   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tanh(x)
   *
   * Examples:
   *
   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
   *    math.tanh(0.5)                   // returns 0.46211715726000974
   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
   *    1 / math.coth(0.5)               // returns 0.46211715726000974
   *
   * See also:
   *
   *    sinh, cosh, coth
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
   */
  var tanh = typed('tanh', {
    number: utils_number["p" /* tanh */],
    Complex: function Complex(x) {
      return x.tanh();
    },
    BigNumber: function BigNumber(x) {
      return x.tanh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tanh is no angle');
      }

      return tanh(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since tanh(0) = 0
      return deepMap(x, tanh, true);
    }
  });
  return tanh;
});
// CONCATENATED MODULE: ./src/function/set/setCartesian.js


var setCartesian_name = 'setCartesian';
var setCartesian_dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetCartesian =
/* #__PURE__ */
Object(factory["a" /* factory */])(setCartesian_name, setCartesian_dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Create the cartesian product of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setCartesian(set1, set2)
   *
   * Examples:
   *
   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference, setPowerset
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The cartesian product of two (multi)sets
   */
  return typed(setCartesian_name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result = [];

      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {
        // if any of them is empty, return empty
        var b1 = Object(utils_array["e" /* flatten */])(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
        var b2 = Object(utils_array["e" /* flatten */])(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
        result = [];

        for (var i = 0; i < b1.length; i++) {
          for (var j = 0; j < b2.length; j++) {
            result.push([b1[i], b2[j]]);
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return result;
      } // return a matrix otherwise


      return new DenseMatrix(result);
    }
  });
});
// CONCATENATED MODULE: ./src/function/set/setDifference.js


var setDifference_name = 'setDifference';
var setDifference_dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetDifference =
/* #__PURE__ */
Object(factory["a" /* factory */])(setDifference_name, setDifference_dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
   *
   * See also:
   *
   *    setUnion, setIntersect, setSymDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The difference of two (multi)sets
   */
  return typed(setDifference_name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result;

      if (subset(size(a1), new Index(0)) === 0) {
        // empty-anything=empty
        result = [];
      } else if (subset(size(a2), new Index(0)) === 0) {
        // anything-empty=anything
        return Object(utils_array["e" /* flatten */])(a1.toArray());
      } else {
        var b1 = Object(utils_array["i" /* identify */])(Object(utils_array["e" /* flatten */])(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        var b2 = Object(utils_array["i" /* identify */])(Object(utils_array["e" /* flatten */])(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        result = [];
        var inb2;

        for (var i = 0; i < b1.length; i++) {
          inb2 = false;

          for (var j = 0; j < b2.length; j++) {
            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
              // the identifier is always a decimal int
              inb2 = true;
              break;
            }
          }

          if (!inb2) {
            result.push(b1[i]);
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return Object(utils_array["g" /* generalize */])(result);
      } // return a matrix otherwise


      return new DenseMatrix(Object(utils_array["g" /* generalize */])(result));
    }
  });
});
// CONCATENATED MODULE: ./src/function/set/setDistinct.js


var setDistinct_name = 'setDistinct';
var setDistinct_dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetDistinct =
/* #__PURE__ */
Object(factory["a" /* factory */])(setDistinct_name, setDistinct_dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Collect the distinct elements of a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setDistinct(set)
   *
   * Examples:
   *
   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
   *
   * See also:
   *
   *    setMultiplicity
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {Array | Matrix}    A set containing the distinc elements of the multiset
   */
  return typed(setDistinct_name, {
    'Array | Matrix': function ArrayMatrix(a) {
      var result;

      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return empty
        result = [];
      } else {
        var b = Object(utils_array["e" /* flatten */])(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        result = [];
        result.push(b[0]);

        for (var i = 1; i < b.length; i++) {
          if (compareNatural(b[i], b[i - 1]) !== 0) {
            result.push(b[i]);
          }
        }
      } // return an array, if the input was an array


      if (Array.isArray(a)) {
        return result;
      } // return a matrix otherwise


      return new DenseMatrix(result);
    }
  });
});
// CONCATENATED MODULE: ./src/function/set/setIntersect.js


var setIntersect_name = 'setIntersect';
var setIntersect_dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetIntersect =
/* #__PURE__ */
Object(factory["a" /* factory */])(setIntersect_name, setIntersect_dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Create the intersection of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIntersect(set1, set2)
   *
   * Examples:
   *
   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
   *
   * See also:
   *
   *    setUnion, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The intersection of two (multi)sets
   */
  return typed(setIntersect_name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result;

      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {
        // of any of them is empty, return empty
        result = [];
      } else {
        var b1 = Object(utils_array["i" /* identify */])(Object(utils_array["e" /* flatten */])(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        var b2 = Object(utils_array["i" /* identify */])(Object(utils_array["e" /* flatten */])(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        result = [];

        for (var i = 0; i < b1.length; i++) {
          for (var j = 0; j < b2.length; j++) {
            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
              // the identifier is always a decimal int
              result.push(b1[i]);
              break;
            }
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return Object(utils_array["g" /* generalize */])(result);
      } // return a matrix otherwise


      return new DenseMatrix(Object(utils_array["g" /* generalize */])(result));
    }
  });
});
// CONCATENATED MODULE: ./src/function/set/setIsSubset.js


var setIsSubset_name = 'setIsSubset';
var setIsSubset_dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetIsSubset =
/* #__PURE__ */
Object(factory["a" /* factory */])(setIsSubset_name, setIsSubset_dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index;

  /**
   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIsSubset(set1, set2)
   *
   * Examples:
   *
   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {boolean}            true | false
   */
  return typed(setIsSubset_name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // empty is a subset of anything
        return true;
      } else if (subset(size(a2), new Index(0)) === 0) {
        // anything is not a subset of empty
        return false;
      }

      var b1 = Object(utils_array["i" /* identify */])(Object(utils_array["e" /* flatten */])(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
      var b2 = Object(utils_array["i" /* identify */])(Object(utils_array["e" /* flatten */])(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
      var inb2;

      for (var i = 0; i < b1.length; i++) {
        inb2 = false;

        for (var j = 0; j < b2.length; j++) {
          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
            // the identifier is always a decimal int
            inb2 = true;
            break;
          }
        }

        if (inb2 === false) {
          return false;
        }
      }

      return true;
    }
  });
});
// CONCATENATED MODULE: ./src/function/set/setMultiplicity.js


var setMultiplicity_name = 'setMultiplicity';
var setMultiplicity_dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetMultiplicity =
/* #__PURE__ */
Object(factory["a" /* factory */])(setMultiplicity_name, setMultiplicity_dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index;

  /**
   * Count the multiplicity of an element in a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setMultiplicity(element, set)
   *
   * Examples:
   *
   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
   *
   * See also:
   *
   *    setDistinct, setSize
   *
   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
   * @param {Array | Matrix}     a  A multiset
   * @return {number}            The number of how many times the multiset contains the element
   */
  return typed(setMultiplicity_name, {
    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return 0
        return 0;
      }

      var b = Object(utils_array["e" /* flatten */])(Array.isArray(a) ? a : a.toArray());
      var count = 0;

      for (var i = 0; i < b.length; i++) {
        if (compareNatural(b[i], e) === 0) {
          count++;
        }
      }

      return count;
    }
  });
});
// CONCATENATED MODULE: ./src/function/set/setPowerset.js


var setPowerset_name = 'setPowerset';
var setPowerset_dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetPowerset =
/* #__PURE__ */
Object(factory["a" /* factory */])(setPowerset_name, setPowerset_dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index;

  /**
   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setPowerset(set)
   *
   * Examples:
   *
   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
   *
   * See also:
   *
   *    setCartesian
   *
   * @param {Array | Matrix}    a  A (multi)set
   * @return {Array}    The powerset of the (multi)set
   */
  return typed(setPowerset_name, {
    'Array | Matrix': function ArrayMatrix(a) {
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return empty
        return [];
      }

      var b = Object(utils_array["e" /* flatten */])(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
      var result = [];
      var number = 0;

      while (number.toString(2).length <= b.length) {
        result.push(_subset(b, number.toString(2).split('').reverse()));
        number++;
      } // can not return a matrix, because of the different size of the subarrays


      return _sort(result);
    }
  }); // create subset

  function _subset(array, bitarray) {
    var result = [];

    for (var i = 0; i < bitarray.length; i++) {
      if (bitarray[i] === '1') {
        result.push(array[i]);
      }
    }

    return result;
  } // sort subsests by length


  function _sort(array) {
    var temp = [];

    for (var i = array.length - 1; i > 0; i--) {
      for (var j = 0; j < i; j++) {
        if (array[j].length > array[j + 1].length) {
          temp = array[j];
          array[j] = array[j + 1];
          array[j + 1] = temp;
        }
      }
    }

    return array;
  }
});
// CONCATENATED MODULE: ./src/function/set/setSize.js


var setSize_name = 'setSize';
var setSize_dependencies = ['typed', 'compareNatural'];
var createSetSize =
/* #__PURE__ */
Object(factory["a" /* factory */])(setSize_name, setSize_dependencies, function (_ref) {
  var typed = _ref.typed,
      compareNatural = _ref.compareNatural;

  /**
   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setSize(set)
   *    math.setSize(set, unique)
   *
   * Examples:
   *
   *    math.setSize([1, 2, 2, 4])          // returns 4
   *    math.setSize([1, 2, 2, 4], true)    // returns 3
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {number}            The number of elements of the (multi)set
   */
  return typed(setSize_name, {
    'Array | Matrix': function ArrayMatrix(a) {
      return Array.isArray(a) ? Object(utils_array["e" /* flatten */])(a).length : Object(utils_array["e" /* flatten */])(a.toArray()).length;
    },
    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {
      if (unique === false || a.length === 0) {
        return Array.isArray(a) ? Object(utils_array["e" /* flatten */])(a).length : Object(utils_array["e" /* flatten */])(a.toArray()).length;
      } else {
        var b = Object(utils_array["e" /* flatten */])(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        var count = 1;

        for (var i = 1; i < b.length; i++) {
          if (compareNatural(b[i], b[i - 1]) !== 0) {
            count++;
          }
        }

        return count;
      }
    }
  });
});
// CONCATENATED MODULE: ./src/function/set/setSymDifference.js


var setSymDifference_name = 'setSymDifference';
var setSymDifference_dependencies = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];
var createSetSymDifference =
/* #__PURE__ */
Object(factory["a" /* factory */])(setSymDifference_name, setSymDifference_dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      concat = _ref.concat,
      subset = _ref.subset,
      setDifference = _ref.setDifference,
      Index = _ref.Index;

  /**
   * Create the symmetric difference of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setSymDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The symmetric difference of two (multi)sets
   */
  return typed(setSymDifference_name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // if any of them is empty, return the other one
        return Object(utils_array["e" /* flatten */])(a2);
      } else if (subset(size(a2), new Index(0)) === 0) {
        return Object(utils_array["e" /* flatten */])(a1);
      }

      var b1 = Object(utils_array["e" /* flatten */])(a1);
      var b2 = Object(utils_array["e" /* flatten */])(a2);
      return concat(setDifference(b1, b2), setDifference(b2, b1));
    }
  });
});
// CONCATENATED MODULE: ./src/function/set/setUnion.js


var setUnion_name = 'setUnion';
var setUnion_dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];
var createSetUnion =
/* #__PURE__ */
Object(factory["a" /* factory */])(setUnion_name, setUnion_dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      concat = _ref.concat,
      subset = _ref.subset,
      setIntersect = _ref.setIntersect,
      setSymDifference = _ref.setSymDifference,
      Index = _ref.Index;

  /**
   * Create the union of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setUnion(set1, set2)
   *
   * Examples:
   *
   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
   *
   * See also:
   *
   *    setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The union of two (multi)sets
   */
  return typed(setUnion_name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // if any of them is empty, return the other one
        return Object(utils_array["e" /* flatten */])(a2);
      } else if (subset(size(a2), new Index(0)) === 0) {
        return Object(utils_array["e" /* flatten */])(a1);
      }

      var b1 = Object(utils_array["e" /* flatten */])(a1);
      var b2 = Object(utils_array["e" /* flatten */])(a2);
      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
    }
  });
});
// CONCATENATED MODULE: ./src/function/arithmetic/add.js







var add_name = 'add';
var add_dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];
var createAdd =
/* #__PURE__ */
Object(factory["a" /* factory */])(add_name, add_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      addScalar = _ref.addScalar,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm04 = createAlgorithm04({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Add two or more values, `x + y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.add(x, y)
   *    math.add(x, y, z, ...)
   *
   * Examples:
   *
   *    math.add(2, 3)               // returns number 5
   *    math.add(2, 3, 4)            // returns number 9
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(-4, 1)
   *    math.add(a, b)               // returns Complex -2 + 4i
   *
   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   *    const c = math.unit('5 cm')
   *    const d = math.unit('2.1 mm')
   *    math.add(c, d)               // returns Unit 52.1 mm
   *
   *    math.add("2.3", "4")         // returns number 6.3
   *
   * See also:
   *
   *    subtract, sum
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
   */

  var add = typed(add_name, Object(utils_object["e" /* extend */])({
    // we extend the signatures of addScalar with signatures dealing with matrices
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, addScalar);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, addScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, addScalar, true);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, addScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return add(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return add(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return add(x, matrix(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, addScalar, false);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, y, addScalar, false);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, addScalar, true);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, addScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, addScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, addScalar, true).valueOf();
    },
    'any, any': addScalar,
    'any, any, ...any': function anyAnyAny(x, y, rest) {
      var result = add(x, y);

      for (var i = 0; i < rest.length; i++) {
        result = add(result, rest[i]);
      }

      return result;
    }
  }, addScalar.signatures));
  return add;
});
// CONCATENATED MODULE: ./src/function/arithmetic/hypot.js


var hypot_name = 'hypot';
var hypot_dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];
var createHypot =
/* #__PURE__ */
Object(factory["a" /* factory */])(hypot_name, hypot_dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      addScalar = _ref.addScalar,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      sqrt = _ref.sqrt,
      smaller = _ref.smaller,
      isPositive = _ref.isPositive;

  /**
   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
   *
   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
   *
   * For matrix input, the hypotenusa is calculated for all values in the matrix.
   *
   * Syntax:
   *
   *     math.hypot(a, b, ...)
   *     math.hypot([a, b, c, ...])
   *
   * Examples:
   *
   *     math.hypot(3, 4)      // 5
   *     math.hypot(3, 4, 5)   // 7.0710678118654755
   *     math.hypot([3, 4, 5]) // 7.0710678118654755
   *     math.hypot(-2)        // 2
   *
   * See also:
   *
   *     abs, norm
   *
   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.
   *                                                          Matrix and Array input is flattened and returns a
   *                                                          single number for the whole matrix.
   * @return {number | BigNumber} Returns the hypothenusa of the input values.
   */
  var hypot = typed(hypot_name, {
    '... number | BigNumber': _hypot,
    Array: function Array(x) {
      return hypot.apply(hypot, Object(utils_array["e" /* flatten */])(x));
    },
    Matrix: function Matrix(x) {
      return hypot.apply(hypot, Object(utils_array["e" /* flatten */])(x.toArray()));
    }
  });
  /**
   * Calculate the hypotenusa for an Array with values
   * @param {Array.<number | BigNumber>} args
   * @return {number | BigNumber} Returns the result
   * @private
   */

  function _hypot(args) {
    // code based on `hypot` from es6-shim:
    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
    var result = 0;
    var largest = 0;

    for (var i = 0; i < args.length; i++) {
      var value = abs(args[i]);

      if (smaller(largest, value)) {
        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));
        result = addScalar(result, 1);
        largest = value;
      } else {
        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);
      }
    }

    return multiplyScalar(largest, sqrt(result));
  }

  return hypot;
});
// CONCATENATED MODULE: ./src/function/arithmetic/norm.js

var norm_name = 'norm';
var norm_dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix'];
var createNorm =
/* #__PURE__ */
Object(factory["a" /* factory */])(norm_name, norm_dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      add = _ref.add,
      pow = _ref.pow,
      conj = _ref.conj,
      sqrt = _ref.sqrt,
      multiply = _ref.multiply,
      equalScalar = _ref.equalScalar,
      larger = _ref.larger,
      smaller = _ref.smaller,
      matrix = _ref.matrix;

  /**
   * Calculate the norm of a number, vector or matrix.
   *
   * The second parameter p is optional. If not provided, it defaults to 2.
   *
   * Syntax:
   *
   *    math.norm(x)
   *    math.norm(x, p)
   *
   * Examples:
   *
   *    math.abs(-3.5)                         // returns 3.5
   *    math.norm(-3.5)                        // returns 3.5
   *
   *    math.norm(math.complex(3, -4))         // returns 5
   *
   *    math.norm([1, 2, -3], Infinity)        // returns 3
   *    math.norm([1, 2, -3], -Infinity)       // returns 1
   *
   *    math.norm([3, 4], 2)                   // returns 5
   *
   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
   *
   * See also:
   *
   *    abs, hypot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the norm
   * @param  {number | BigNumber | string} [p=2]
   *            Vector space.
   *            Supported numbers include Infinity and -Infinity.
   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
   * @return {number | BigNumber} the p-norm
   */
  var norm = typed(norm_name, {
    number: Math.abs,
    Complex: function Complex(x) {
      return x.abs();
    },
    BigNumber: function BigNumber(x) {
      // norm(x) = abs(x)
      return x.abs();
    },
    "boolean": function boolean(x) {
      // norm(x) = abs(x)
      return Math.abs(x);
    },
    Array: function Array(x) {
      return _norm(matrix(x), 2);
    },
    Matrix: function Matrix(x) {
      return _norm(x, 2);
    },
    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {
      // ignore second parameter, TODO: remove the option of second parameter for these types
      return norm(x);
    },
    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
      return _norm(matrix(x), p);
    },
    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
      return _norm(x, p);
    }
  });
  /**
   * Calculate the norm for an array
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */

  function _norm(x, p) {
    // size
    var sizeX = x.size(); // check if it is a vector

    if (sizeX.length === 1) {
      // check p
      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
        // norm(x, Infinity) = max(abs(x))
        var pinf = 0; // skip zeros since abs(0) === 0

        x.forEach(function (value) {
          var v = abs(value);

          if (larger(v, pinf)) {
            pinf = v;
          }
        }, true);
        return pinf;
      }

      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
        // norm(x, -Infinity) = min(abs(x))
        var ninf; // skip zeros since abs(0) === 0

        x.forEach(function (value) {
          var v = abs(value);

          if (!ninf || smaller(v, ninf)) {
            ninf = v;
          }
        }, true);
        return ninf || 0;
      }

      if (p === 'fro') {
        return _norm(x, 2);
      }

      if (typeof p === 'number' && !isNaN(p)) {
        // check p != 0
        if (!equalScalar(p, 0)) {
          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
          var n = 0; // skip zeros since abs(0) === 0

          x.forEach(function (value) {
            n = add(pow(abs(value), p), n);
          }, true);
          return pow(n, 1 / p);
        }

        return Number.POSITIVE_INFINITY;
      } // invalid parameter value


      throw new Error('Unsupported parameter value');
    } // MxN matrix


    if (sizeX.length === 2) {
      // check p
      if (p === 1) {
        // norm(x) = the largest column sum
        var c = []; // result

        var maxc = 0; // skip zeros since abs(0) == 0

        x.forEach(function (value, index) {
          var j = index[1];
          var cj = add(c[j] || 0, abs(value));

          if (larger(cj, maxc)) {
            maxc = cj;
          }

          c[j] = cj;
        }, true);
        return maxc;
      }

      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
        // norm(x) = the largest row sum
        var r = []; // result

        var maxr = 0; // skip zeros since abs(0) == 0

        x.forEach(function (value, index) {
          var i = index[0];
          var ri = add(r[i] || 0, abs(value));

          if (larger(ri, maxr)) {
            maxr = ri;
          }

          r[i] = ri;
        }, true);
        return maxr;
      }

      if (p === 'fro') {
        // norm(x) = sqrt(sum(diag(x'x)))
        var fro = 0;
        x.forEach(function (value, index) {
          fro = add(fro, multiply(value, conj(value)));
        });
        return abs(sqrt(fro));
      }

      if (p === 2) {
        // not implemented
        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
      } // invalid parameter value


      throw new Error('Unsupported parameter value');
    }
  }

  return norm;
});
// CONCATENATED MODULE: ./src/function/matrix/dot.js


var dot_name = 'dot';
var dot_dependencies = ['typed', 'add', 'multiply'];
var createDot =
/* #__PURE__ */
Object(factory["a" /* factory */])(dot_name, dot_dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      multiply = _ref.multiply;

  /**
   * Calculate the dot product of two vectors. The dot product of
   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
   *
   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
   *
   * Syntax:
   *
   *    math.dot(x, y)
   *
   * Examples:
   *
   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
   *
   * See also:
   *
   *    multiply, cross
   *
   * @param  {Array | Matrix} x     First vector
   * @param  {Array | Matrix} y     Second vector
   * @return {number}               Returns the dot product of `x` and `y`
   */
  return typed(dot_name, {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return _dot(x.toArray(), y.toArray());
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return _dot(x.toArray(), y);
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return _dot(x, y.toArray());
    },
    'Array, Array': _dot
  });
  /**
   * Calculate the dot product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {number} Returns the dot product of x and y
   * @private
   */
  // TODO: double code with math.multiply

  function _dot(x, y) {
    var xSize = Object(utils_array["a" /* arraySize */])(x);
    var ySize = Object(utils_array["a" /* arraySize */])(y);
    var len = xSize[0];
    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message

    if (xSize[0] !== ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
    if (len === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
    var prod = 0;

    for (var i = 0; i < len; i++) {
      prod = add(prod, multiply(x[i], y[i]));
    }

    return prod;
  }
});
// CONCATENATED MODULE: ./src/function/matrix/trace.js



var trace_name = 'trace';
var trace_dependencies = ['typed', 'matrix', 'add'];
var createTrace =
/* #__PURE__ */
Object(factory["a" /* factory */])(trace_name, trace_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      add = _ref.add;

  /**
   * Calculate the trace of a matrix: the sum of the elements on the main
   * diagonal of a square matrix.
   *
   * Syntax:
   *
   *    math.trace(x)
   *
   * Examples:
   *
   *    math.trace([[1, 2], [3, 4]]) // returns 5
   *
   *    const A = [
   *      [1, 2, 3],
   *      [-1, 2, 3],
   *      [2, 0, 3]
   *    ]
   *    math.trace(A) // returns 6
   *
   * See also:
   *
   *    diag
   *
   * @param {Array | Matrix} x  A matrix
   *
   * @return {number} The trace of `x`
   */
  return typed('trace', {
    Array: function _arrayTrace(x) {
      // use dense matrix implementation
      return _denseTrace(matrix(x));
    },
    SparseMatrix: _sparseTrace,
    DenseMatrix: _denseTrace,
    any: utils_object["a" /* clone */]
  });

  function _denseTrace(m) {
    // matrix size & data
    var size = m._size;
    var data = m._data; // process dimensions

    switch (size.length) {
      case 1:
        // vector
        if (size[0] === 1) {
          // return data[0]
          return Object(utils_object["a" /* clone */])(data[0]);
        }

        throw new RangeError('Matrix must be square (size: ' + Object(utils_string["d" /* format */])(size) + ')');

      case 2:
        {
          // two dimensional
          var rows = size[0];
          var cols = size[1];

          if (rows === cols) {
            // calulate sum
            var sum = 0; // loop diagonal

            for (var i = 0; i < rows; i++) {
              sum = add(sum, data[i][i]);
            } // return trace


            return sum;
          } else {
            throw new RangeError('Matrix must be square (size: ' + Object(utils_string["d" /* format */])(size) + ')');
          }
        }

      default:
        // multi dimensional
        throw new RangeError('Matrix must be two dimensional (size: ' + Object(utils_string["d" /* format */])(size) + ')');
    }
  }

  function _sparseTrace(m) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    var size = m._size; // check dimensions

    var rows = size[0];
    var columns = size[1]; // matrix must be square

    if (rows === columns) {
      // calulate sum
      var sum = 0; // check we have data (avoid looping columns)

      if (values.length > 0) {
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // loop k within [k0, k1[

          for (var k = k0; k < k1; k++) {
            // row index
            var i = index[k]; // check row

            if (i === j) {
              // accumulate value
              sum = add(sum, values[k]); // exit loop

              break;
            }

            if (i > j) {
              // exit loop, no value on the diagonal for column j
              break;
            }
          }
        }
      } // return trace


      return sum;
    }

    throw new RangeError('Matrix must be square (size: ' + Object(utils_string["d" /* format */])(size) + ')');
  }
});
// CONCATENATED MODULE: ./src/type/matrix/function/index.js


var function_name = 'index';
var function_dependencies = ['typed', 'Index'];
var createIndex =
/* #__PURE__ */
Object(factory["a" /* factory */])(function_name, function_dependencies, function (_ref) {
  var typed = _ref.typed,
      Index = _ref.Index;

  /**
   * Create an index. An Index can store ranges having start, step, and end
   * for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Syntax:
   *
   *     math.index(range1, range2, ...)
   *
   * Where each range can be any of:
   *
   * - A number
   * - A string for getting/setting an object property
   * - An instance of `Range`
   * - A one-dimensional Array or a Matrix with numbers
   *
   * Indexes must be zero-based, integer numbers.
   *
   * Examples:
   *
   *    const b = [1, 2, 3, 4, 5]
   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]
   *
   *    const a = math.matrix([[1, 2], [3, 4]])
   *    a.subset(math.index(0, 1))             // returns 2
   *
   * See also:
   *
   *    bignumber, boolean, complex, matrix, number, string, unit
   *
   * @param {...*} ranges   Zero or more ranges or numbers.
   * @return {Index}        Returns the created index
   */
  return typed(function_name, {
    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
      var ranges = args.map(function (arg) {
        if (Object(is["e" /* isBigNumber */])(arg)) {
          return arg.toNumber(); // convert BigNumber to Number
        } else if (Array.isArray(arg) || Object(is["v" /* isMatrix */])(arg)) {
          return arg.map(function (elem) {
            // convert BigNumber to Number
            return Object(is["e" /* isBigNumber */])(elem) ? elem.toNumber() : elem;
          });
        } else {
          return arg;
        }
      });
      var res = new Index();
      Index.apply(res, ranges);
      return res;
    }
  });
});
// CONCATENATED MODULE: ./src/expression/keywords.js
// Reserved keywords not allowed to use in the parser
var keywords = {
  end: true
};
// CONCATENATED MODULE: ./src/expression/node/Node.js
function Node_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Node_typeof = function _typeof(obj) { return typeof obj; }; } else { Node_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Node_typeof(obj); }






var Node_name = 'Node';
var Node_dependencies = ['mathWithTransform'];
var createNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(Node_name, Node_dependencies, function (_ref) {
  var mathWithTransform = _ref.mathWithTransform;

  /**
   * Node
   */
  function Node() {
    if (!(this instanceof Node)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Evaluate the node
   * @param {Object} [scope]  Scope to read/write variables
   * @return {*}              Returns the result
   */


  Node.prototype.evaluate = function (scope) {
    return this.compile().evaluate(scope);
  };
  /**
   * Evaluate the node
   * @param {Object} [scope]  Scope to read/write variables
   * @return {*}              Returns the result
   */
  // TODO: Deprecated since v6.0.0. Clean up some day


  Node.prototype.eval = function (scope) {
    Object(utils_log["a" /* warnOnce */])('Method Node.eval is renamed to Node.evaluate. Please use the new method name.');
    return this.evaluate(scope);
  };

  Node.prototype.type = 'Node';
  Node.prototype.isNode = true;
  Node.prototype.comment = '';
  /**
   * Compile the node into an optimized, evauatable JavaScript function
   * @return {{evaluate: function([Object])}} object
   *                Returns an object with a function 'evaluate',
   *                which can be invoked as expr.evaluate([scope: Object]),
   *                where scope is an optional object with
   *                variables.
   */

  Node.prototype.compile = function () {
    var expr = this._compile(mathWithTransform, {});

    var args = {};
    var context = null;

    function evaluate(scope) {
      var s = scope || {};

      _validateScope(s);

      return expr(s, args, context);
    }

    return {
      evaluate: evaluate,
      // TODO: Deprecated since v6.0.0. Clean up some day
      eval: function deprecatedEval(scope) {
        Object(utils_log["a" /* warnOnce */])('Method eval is renamed to evaluate. Please use the new method.');
        return evaluate(scope);
      }
    };
  };
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */


  Node.prototype._compile = function (math, argNames) {
    throw new Error('Method _compile should be implemented by type ' + this.type);
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  Node.prototype.forEach = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run forEach on a Node interface');
  };
  /**
   * Create a new Node having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */


  Node.prototype.map = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run map on a Node interface');
  };
  /**
   * Validate whether an object is a Node, for use with map
   * @param {Node} node
   * @returns {Node} Returns the input if it's a node, else throws an Error
   * @protected
   */


  Node.prototype._ifNode = function (node) {
    if (!Object(is["w" /* isNode */])(node)) {
      throw new TypeError('Callback function must return a Node');
    }

    return node;
  };
  /**
   * Recursively traverse all nodes in a node tree. Executes given callback for
   * this node and each of its child nodes.
   * @param {function(node: Node, path: string, parent: Node)} callback
   *          A callback called for every node in the node tree.
   */


  Node.prototype.traverse = function (callback) {
    // execute callback for itself
    callback(this, null, null); // eslint-disable-line standard/no-callback-literal
    // recursively traverse over all childs of a node

    function _traverse(node, callback) {
      node.forEach(function (child, path, parent) {
        callback(child, path, parent);

        _traverse(child, callback);
      });
    }

    _traverse(this, callback);
  };
  /**
   * Recursively transform a node tree via a transform function.
   *
   * For example, to replace all nodes of type SymbolNode having name 'x' with a
   * ConstantNode with value 2:
   *
   *     const res = Node.transform(function (node, path, parent) {
   *       if (node && node.isSymbolNode) && (node.name === 'x')) {
   *         return new ConstantNode(2)
   *       }
   *       else {
   *         return node
   *       }
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *          A mapping function accepting a node, and returning
   *          a replacement for the node or the original node.
   *          Signature: callback(node: Node, index: string, parent: Node) : Node
   * @return {Node} Returns the original node or its replacement
   */


  Node.prototype.transform = function (callback) {
    function _transform(child, path, parent) {
      var replacement = callback(child, path, parent);

      if (replacement !== child) {
        // stop iterating when the node is replaced
        return replacement;
      }

      return child.map(_transform);
    }

    return _transform(this, null, null);
  };
  /**
   * Find any node in the node tree matching given filter function. For example, to
   * find all nodes of type SymbolNode having name 'x':
   *
   *     const results = Node.filter(function (node) {
   *       return (node && node.isSymbolNode) && (node.name === 'x')
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *            A test function returning true when a node matches, and false
   *            otherwise. Function signature:
   *            callback(node: Node, index: string, parent: Node) : boolean
   * @return {Node[]} nodes       An array with nodes matching given filter criteria
   */


  Node.prototype.filter = function (callback) {
    var nodes = [];
    this.traverse(function (node, path, parent) {
      if (callback(node, path, parent)) {
        nodes.push(node);
      }
    });
    return nodes;
  }; // TODO: deprecated since version 1.1.0, remove this some day


  Node.prototype.find = function () {
    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
  }; // TODO: deprecated since version 1.1.0, remove this some day


  Node.prototype.match = function () {
    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
  };
  /**
   * Create a shallow clone of this node
   * @return {Node}
   */


  Node.prototype.clone = function () {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot clone a Node interface');
  };
  /**
   * Create a deep clone of this node
   * @return {Node}
   */


  Node.prototype.cloneDeep = function () {
    return this.map(function (node) {
      return node.cloneDeep();
    });
  };
  /**
   * Deep compare this node with another node.
   * @param {Node} other
   * @return {boolean} Returns true when both nodes are of the same type and
   *                   contain the same values (as do their childs)
   */


  Node.prototype.equals = function (other) {
    return other ? Object(utils_object["d" /* deepStrictEqual */])(this, other) : false;
  };
  /**
   * Get string representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toString = function (options) {
    var customString;

    if (options && Node_typeof(options) === 'object') {
      switch (Node_typeof(options.handler)) {
        case 'object':
        case 'undefined':
          break;

        case 'function':
          customString = options.handler(this, options);
          break;

        default:
          throw new TypeError('Object or function expected as callback');
      }
    }

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this._toString(options);
  };
  /**
   * Get a JSON representation of the node
   * Both .toJSON() and the static .fromJSON(json) should be implemented by all
   * implementations of Node
   * @returns {Object}
   */


  Node.prototype.toJSON = function () {
    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
  };
  /**
   * Get HTML representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)" or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toHTML = function (options) {
    var customString;

    if (options && Node_typeof(options) === 'object') {
      switch (Node_typeof(options.handler)) {
        case 'object':
        case 'undefined':
          break;

        case 'function':
          customString = options.handler(this, options);
          break;

        default:
          throw new TypeError('Object or function expected as callback');
      }
    }

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this.toHTML(options);
  };
  /**
   * Internal function to generate the string output.
   * This has to be implemented by every Node
   *
   * @throws {Error}
   */


  Node.prototype._toString = function () {
    // must be implemented by each of the Node implementations
    throw new Error('_toString not implemented for ' + this.type);
  };
  /**
   * Get LaTeX representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toTex = function (options) {
    var customTex;

    if (options && Node_typeof(options) === 'object') {
      switch (Node_typeof(options.handler)) {
        case 'object':
        case 'undefined':
          break;

        case 'function':
          customTex = options.handler(this, options);
          break;

        default:
          throw new TypeError('Object or function expected as callback');
      }
    }

    if (typeof customTex !== 'undefined') {
      return customTex;
    }

    return this._toTex(options);
  };
  /**
   * Internal function to generate the LaTeX output.
   * This has to be implemented by every Node
   *
   * @param {Object} [options]
   * @throws {Error}
   */


  Node.prototype._toTex = function (options) {
    // must be implemented by each of the Node implementations
    throw new Error('_toTex not implemented for ' + this.type);
  };
  /**
   * Get identifier.
   * @return {string}
   */


  Node.prototype.getIdentifier = function () {
    return this.type;
  };
  /**
   * Get the content of the current Node.
   * @return {Node} node
   **/


  Node.prototype.getContent = function () {
    return this;
  };
  /**
   * Validate the symbol names of a scope.
   * Throws an error when the scope contains an illegal symbol.
   * @param {Object} scope
   */


  function _validateScope(scope) {
    for (var symbol in scope) {
      if (Object(utils_object["f" /* hasOwnProperty */])(scope, symbol)) {
        if (symbol in keywords) {
          throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
        }
      }
    }
  }

  return Node;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/transform/utils/errorTransform.js

/**
 * Transform zero-based indices to one-based indices in errors
 * @param {Error} err
 * @returns {Error | IndexError} Returns the transformed error
 */

function errorTransform(err) {
  if (err && err.isIndexError) {
    return new IndexError["a" /* IndexError */](err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
  }

  return err;
}
// CONCATENATED MODULE: ./src/expression/node/utils/access.js
function access_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { access_typeof = function _typeof(obj) { return typeof obj; }; } else { access_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return access_typeof(obj); }



function accessFactory(_ref) {
  var subset = _ref.subset;

  /**
   * Retrieve part of an object:
   *
   * - Retrieve a property from an object
   * - Retrieve a part of a string
   * - Retrieve a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @return {Object | Array | Matrix | string} Returns the subset
   */
  return function access(object, index) {
    try {
      if (Array.isArray(object)) {
        return subset(object, index);
      } else if (object && typeof object.subset === 'function') {
        // Matrix
        return object.subset(index);
      } else if (typeof object === 'string') {
        // TODO: move getStringSubset into a separate util file, use that
        return subset(object, index);
      } else if (access_typeof(object) === 'object') {
        if (!index.isObjectProperty()) {
          throw new TypeError('Cannot apply a numeric index as object property');
        }

        return getSafeProperty(object, index.getObjectProperty());
      } else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    } catch (err) {
      throw errorTransform(err);
    }
  };
}
// CONCATENATED MODULE: ./src/expression/node/AccessorNode.js




var AccessorNode_name = 'AccessorNode';
var AccessorNode_dependencies = ['subset', 'Node'];
var createAccessorNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(AccessorNode_name, AccessorNode_dependencies, function (_ref) {
  var subset = _ref.subset,
      Node = _ref.Node;
  var access = accessFactory({
    subset: subset
  });
  /**
   * @constructor AccessorNode
   * @extends {Node}
   * Access an object property or get a matrix subset
   *
   * @param {Node} object                 The object from which to retrieve
   *                                      a property or subset.
   * @param {IndexNode} index             IndexNode containing ranges
   */

  function AccessorNode(object, index) {
    if (!(this instanceof AccessorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!Object(is["w" /* isNode */])(object)) {
      throw new TypeError('Node expected for parameter "object"');
    }

    if (!Object(is["u" /* isIndexNode */])(index)) {
      throw new TypeError('IndexNode expected for parameter "index"');
    }

    this.object = object || null;
    this.index = index; // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
        } else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  AccessorNode.prototype = new Node();
  AccessorNode.prototype.type = 'AccessorNode';
  AccessorNode.prototype.isAccessorNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  AccessorNode.prototype._compile = function (math, argNames) {
    var evalObject = this.object._compile(math, argNames);

    var evalIndex = this.index._compile(math, argNames);

    if (this.index.isObjectProperty()) {
      var prop = this.index.getObjectProperty();
      return function evalAccessorNode(scope, args, context) {
        return getSafeProperty(evalObject(scope, args, context), prop);
      };
    } else {
      return function evalAccessorNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        var index = evalIndex(scope, args, object); // we pass object here instead of context

        return access(object, index);
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  AccessorNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);
    callback(this.index, 'index', this);
  };
  /**
   * Create a new AccessorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AccessorNode} Returns a transformed copy of the node
   */


  AccessorNode.prototype.map = function (callback) {
    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {AccessorNode}
   */


  AccessorNode.prototype.clone = function () {
    return new AccessorNode(this.object, this.index);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype._toString = function (options) {
    var object = this.object.toString(options);

    if (needParenthesis(this.object)) {
      object = '(' + object + ')';
    }

    return object + this.index.toString(options);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype.toHTML = function (options) {
    var object = this.object.toHTML(options);

    if (needParenthesis(this.object)) {
      object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return object + this.index.toHTML(options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype._toTex = function (options) {
    var object = this.object.toTex(options);

    if (needParenthesis(this.object)) {
      object = '\\left(\' + object + \'\\right)';
    }

    return object + this.index.toTex(options);
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  AccessorNode.prototype.toJSON = function () {
    return {
      mathjs: 'AccessorNode',
      object: this.object,
      index: this.index
    };
  };
  /**
   * Instantiate an AccessorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AccessorNode", object: ..., index: ...}`,
   *                       where mathjs is optional
   * @returns {AccessorNode}
   */


  AccessorNode.fromJSON = function (json) {
    return new AccessorNode(json.object, json.index);
  };
  /**
   * Are parenthesis needed?
   * @private
   */


  function needParenthesis(node) {
    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
    return !(Object(is["a" /* isAccessorNode */])(node) || Object(is["c" /* isArrayNode */])(node) || Object(is["l" /* isConstantNode */])(node) || Object(is["r" /* isFunctionNode */])(node) || Object(is["A" /* isObjectNode */])(node) || Object(is["C" /* isParenthesisNode */])(node) || Object(is["J" /* isSymbolNode */])(node));
  }

  return AccessorNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/ArrayNode.js



var ArrayNode_name = 'ArrayNode';
var ArrayNode_dependencies = ['Node'];
var createArrayNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(ArrayNode_name, ArrayNode_dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor ArrayNode
   * @extends {Node}
   * Holds an 1-dimensional array with items
   * @param {Node[]} [items]   1 dimensional array with items
   */
  function ArrayNode(items) {
    if (!(this instanceof ArrayNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.items = items || []; // validate input

    if (!Array.isArray(this.items) || !this.items.every(is["w" /* isNode */])) {
      throw new TypeError('Array containing Nodes expected');
    } // TODO: deprecated since v3, remove some day


    var deprecated = function deprecated() {
      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
    };

    Object.defineProperty(this, 'nodes', {
      get: deprecated,
      set: deprecated
    });
  }

  ArrayNode.prototype = new Node();
  ArrayNode.prototype.type = 'ArrayNode';
  ArrayNode.prototype.isArrayNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ArrayNode.prototype._compile = function (math, argNames) {
    var evalItems = Object(utils_array["m" /* map */])(this.items, function (item) {
      return item._compile(math, argNames);
    });
    var asMatrix = math.config.matrix !== 'Array';

    if (asMatrix) {
      var matrix = math.matrix;
      return function evalArrayNode(scope, args, context) {
        return matrix(Object(utils_array["m" /* map */])(evalItems, function (evalItem) {
          return evalItem(scope, args, context);
        }));
      };
    } else {
      return function evalArrayNode(scope, args, context) {
        return Object(utils_array["m" /* map */])(evalItems, function (evalItem) {
          return evalItem(scope, args, context);
        });
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ArrayNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.items.length; i++) {
      var node = this.items[i];
      callback(node, 'items[' + i + ']', this);
    }
  };
  /**
   * Create a new ArrayNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ArrayNode} Returns a transformed copy of the node
   */


  ArrayNode.prototype.map = function (callback) {
    var items = [];

    for (var i = 0; i < this.items.length; i++) {
      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
    }

    return new ArrayNode(items);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ArrayNode}
   */


  ArrayNode.prototype.clone = function () {
    return new ArrayNode(this.items.slice(0));
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ArrayNode.prototype._toString = function (options) {
    var items = this.items.map(function (node) {
      return node.toString(options);
    });
    return '[' + items.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ArrayNode.prototype.toJSON = function () {
    return {
      mathjs: 'ArrayNode',
      items: this.items
    };
  };
  /**
   * Instantiate an ArrayNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ArrayNode", items: [...]}`,
   *                       where mathjs is optional
   * @returns {ArrayNode}
   */


  ArrayNode.fromJSON = function (json) {
    return new ArrayNode(json.items);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ArrayNode.prototype.toHTML = function (options) {
    var items = this.items.map(function (node) {
      return node.toHTML(options);
    });
    return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ArrayNode.prototype._toTex = function (options) {
    var s = '\\begin{bmatrix}';
    this.items.forEach(function (node) {
      if (node.items) {
        s += node.items.map(function (childNode) {
          return childNode.toTex(options);
        }).join('&');
      } else {
        s += node.toTex(options);
      } // new line


      s += '\\\\';
    });
    s += '\\end{bmatrix}';
    return s;
  };

  return ArrayNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/utils/assign.js
function assign_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { assign_typeof = function _typeof(obj) { return typeof obj; }; } else { assign_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return assign_typeof(obj); }



function assignFactory(_ref) {
  var subset = _ref.subset,
      matrix = _ref.matrix;

  /**
   * Replace part of an object:
   *
   * - Assign a property to an object
   * - Replace a part of a string
   * - Replace a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @param {*} value
   * @return {Object | Array | Matrix | string} Returns the original object
   *                                            except in case of a string
   */
  // TODO: change assign to return the value instead of the object
  return function assign(object, index, value) {
    try {
      if (Array.isArray(object)) {
        // we use matrix.subset here instead of the function subset because we must not clone the contents
        return matrix(object).subset(index, value).valueOf();
      } else if (object && typeof object.subset === 'function') {
        // Matrix
        return object.subset(index, value);
      } else if (typeof object === 'string') {
        // TODO: move setStringSubset into a separate util file, use that
        return subset(object, index, value);
      } else if (assign_typeof(object) === 'object') {
        if (!index.isObjectProperty()) {
          throw TypeError('Cannot apply a numeric index as object property');
        }

        setSafeProperty(object, index.getObjectProperty(), value);
        return object;
      } else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    } catch (err) {
      throw errorTransform(err);
    }
  };
}
// CONCATENATED MODULE: ./src/expression/operators.js
// list of identifiers of nodes in order of their precedence
// also contains information about left/right associativity
// and which other operator the operator is associative with
// Example:
// addition is associative with addition and subtraction, because:
// (a+b)+c=a+(b+c)
// (a+b)-c=a+(b-c)
//
// postfix operators are left associative, prefix operators
// are right associative
//
// It's also possible to set the following properties:
// latexParens: if set to false, this node doesn't need to be enclosed
//              in parentheses when using LaTeX
// latexLeftParens: if set to false, this !OperatorNode's!
//                  left argument doesn't need to be enclosed
//                  in parentheses
// latexRightParens: the same for the right argument

var operators_properties = [{
  // assignment
  AssignmentNode: {},
  FunctionAssignmentNode: {}
}, {
  // conditional expression
  ConditionalNode: {
    latexLeftParens: false,
    latexRightParens: false,
    latexParens: false // conditionals don't need parentheses in LaTeX because
    // they are 2 dimensional

  }
}, {
  // logical or
  'OperatorNode:or': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // logical xor
  'OperatorNode:xor': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // logical and
  'OperatorNode:and': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise or
  'OperatorNode:bitOr': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise xor
  'OperatorNode:bitXor': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise and
  'OperatorNode:bitAnd': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // relational operators
  'OperatorNode:equal': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:unequal': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:smaller': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:larger': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:smallerEq': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:largerEq': {
    associativity: 'left',
    associativeWith: []
  },
  RelationalNode: {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitshift operators
  'OperatorNode:leftShift': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:rightArithShift': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:rightLogShift': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // unit conversion
  'OperatorNode:to': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // range
  RangeNode: {}
}, {
  // addition, subtraction
  'OperatorNode:add': {
    associativity: 'left',
    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
  },
  'OperatorNode:subtract': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // multiply, divide, modulus
  'OperatorNode:multiply': {
    associativity: 'left',
    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
  },
  'OperatorNode:divide': {
    associativity: 'left',
    associativeWith: [],
    latexLeftParens: false,
    latexRightParens: false,
    latexParens: false // fractions don't require parentheses because
    // they're 2 dimensional, so parens aren't needed
    // in LaTeX

  },
  'OperatorNode:dotMultiply': {
    associativity: 'left',
    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
  },
  'OperatorNode:dotDivide': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:mod': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // unary prefix operators
  'OperatorNode:unaryPlus': {
    associativity: 'right'
  },
  'OperatorNode:unaryMinus': {
    associativity: 'right'
  },
  'OperatorNode:bitNot': {
    associativity: 'right'
  },
  'OperatorNode:not': {
    associativity: 'right'
  }
}, {
  // exponentiation
  'OperatorNode:pow': {
    associativity: 'right',
    associativeWith: [],
    latexRightParens: false // the exponent doesn't need parentheses in
    // LaTeX because it's 2 dimensional
    // (it's on top)

  },
  'OperatorNode:dotPow': {
    associativity: 'right',
    associativeWith: []
  }
}, {
  // factorial
  'OperatorNode:factorial': {
    associativity: 'left'
  }
}, {
  // matrix transpose
  'OperatorNode:transpose': {
    associativity: 'left'
  }
}];
/**
 * Get the precedence of a Node.
 * Higher number for higher precedence, starting with 0.
 * Returns null if the precedence is undefined.
 *
 * @param {Node} _node
 * @param {string} parenthesis
 * @return {number | null}
 */

function getPrecedence(_node, parenthesis) {
  var node = _node;

  if (parenthesis !== 'keep') {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }

  var identifier = node.getIdentifier();

  for (var i = 0; i < operators_properties.length; i++) {
    if (identifier in operators_properties[i]) {
      return i;
    }
  }

  return null;
}
/**
 * Get the associativity of an operator (left or right).
 * Returns a string containing 'left' or 'right' or null if
 * the associativity is not defined.
 *
 * @param {Node}
 * @param {string} parenthesis
 * @return {string|null}
 * @throws {Error}
 */

function getAssociativity(_node, parenthesis) {
  var node = _node;

  if (parenthesis !== 'keep') {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }

  var identifier = node.getIdentifier();
  var index = getPrecedence(node, parenthesis);

  if (index === null) {
    // node isn't in the list
    return null;
  }

  var property = operators_properties[index][identifier];

  if (Object(utils_object["f" /* hasOwnProperty */])(property, 'associativity')) {
    if (property.associativity === 'left') {
      return 'left';
    }

    if (property.associativity === 'right') {
      return 'right';
    } // associativity is invalid


    throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
  } // associativity is undefined


  return null;
}
/**
 * Check if an operator is associative with another operator.
 * Returns either true or false or null if not defined.
 *
 * @param {Node} nodeA
 * @param {Node} nodeB
 * @param {string} parenthesis
 * @return {boolean | null}
 */

function isAssociativeWith(nodeA, nodeB, parenthesis) {
  // ParenthesisNodes are only ignored when not in 'keep' mode
  var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
  var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
  var identifierA = a.getIdentifier();
  var identifierB = b.getIdentifier();
  var index = getPrecedence(a, parenthesis);

  if (index === null) {
    // node isn't in the list
    return null;
  }

  var property = operators_properties[index][identifierA];

  if (Object(utils_object["f" /* hasOwnProperty */])(property, 'associativeWith') && property.associativeWith instanceof Array) {
    for (var i = 0; i < property.associativeWith.length; i++) {
      if (property.associativeWith[i] === identifierB) {
        return true;
      }
    }

    return false;
  } // associativeWith is not defined


  return null;
}
// CONCATENATED MODULE: ./src/expression/node/AssignmentNode.js






var AssignmentNode_name = 'AssignmentNode';
var AssignmentNode_dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset
'Node'];
var createAssignmentNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(AssignmentNode_name, AssignmentNode_dependencies, function (_ref) {
  var subset = _ref.subset,
      matrix = _ref.matrix,
      Node = _ref.Node;
  var access = accessFactory({
    subset: subset
  });
  var assign = assignFactory({
    subset: subset,
    matrix: matrix
  });
  /**
   * @constructor AssignmentNode
   * @extends {Node}
   *
   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
   * replace a subset of a matrix like `A[2,2]=42`.
   *
   * Syntax:
   *
   *     new AssignmentNode(symbol, value)
   *     new AssignmentNode(object, index, value)
   *
   * Usage:
   *
   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
   *
   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
   * @param {IndexNode} [index=null]            Index, property name or matrix
   *                                            index. Optional. If not provided
   *                                            and `object` is a SymbolNode,
   *                                            the property is assigned to the
   *                                            global scope.
   * @param {Node} value                        The value to be assigned
   */

  function AssignmentNode(object, index, value) {
    if (!(this instanceof AssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.object = object;
    this.index = value ? index : null;
    this.value = value || index; // validate input

    if (!Object(is["J" /* isSymbolNode */])(object) && !Object(is["a" /* isAccessorNode */])(object)) {
      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
    }

    if (Object(is["J" /* isSymbolNode */])(object) && object.name === 'end') {
      throw new Error('Cannot assign to symbol "end"');
    }

    if (this.index && !Object(is["u" /* isIndexNode */])(this.index)) {
      // index is optional
      throw new TypeError('IndexNode expected as "index"');
    }

    if (!Object(is["w" /* isNode */])(this.value)) {
      throw new TypeError('Node expected as "value"');
    } // readonly property name


    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
        } else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  AssignmentNode.prototype = new Node();
  AssignmentNode.prototype.type = 'AssignmentNode';
  AssignmentNode.prototype.isAssignmentNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  AssignmentNode.prototype._compile = function (math, argNames) {
    var evalObject = this.object._compile(math, argNames);

    var evalIndex = this.index ? this.index._compile(math, argNames) : null;

    var evalValue = this.value._compile(math, argNames);

    var name = this.object.name;

    if (!this.index) {
      // apply a variable to the scope, for example `a=2`
      if (!Object(is["J" /* isSymbolNode */])(this.object)) {
        throw new TypeError('SymbolNode expected as object');
      }

      return function evalAssignmentNode(scope, args, context) {
        return setSafeProperty(scope, name, evalValue(scope, args, context));
      };
    } else if (this.index.isObjectProperty()) {
      // apply an object property for example `a.b=2`
      var prop = this.index.getObjectProperty();
      return function evalAssignmentNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        var value = evalValue(scope, args, context);
        return setSafeProperty(object, prop, value);
      };
    } else if (Object(is["J" /* isSymbolNode */])(this.object)) {
      // update a matrix subset, for example `a[2]=3`
      return function evalAssignmentNode(scope, args, context) {
        var childObject = evalObject(scope, args, context);
        var value = evalValue(scope, args, context);
        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

        setSafeProperty(scope, name, assign(childObject, index, value));
        return value;
      };
    } else {
      // isAccessorNode(node.object) === true
      // update a matrix subset, for example `a.b[2]=3`
      // we will not use the compile function of the AccessorNode, but compile it
      // ourselves here as we need the parent object of the AccessorNode:
      // wee need to apply the updated object to parent object
      var evalParentObject = this.object.object._compile(math, argNames);

      if (this.object.index.isObjectProperty()) {
        var parentProp = this.object.index.getObjectProperty();
        return function evalAssignmentNode(scope, args, context) {
          var parent = evalParentObject(scope, args, context);
          var childObject = getSafeProperty(parent, parentProp);
          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context

          var value = evalValue(scope, args, context);
          setSafeProperty(parent, parentProp, assign(childObject, index, value));
          return value;
        };
      } else {
        // if some parameters use the 'end' parameter, we need to calculate the size
        var evalParentIndex = this.object.index._compile(math, argNames);

        return function evalAssignmentNode(scope, args, context) {
          var parent = evalParentObject(scope, args, context);
          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context

          var childObject = access(parent, parentIndex);
          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

          var value = evalValue(scope, args, context);
          assign(parent, parentIndex, assign(childObject, index, value));
          return value;
        };
      }
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  AssignmentNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);

    if (this.index) {
      callback(this.index, 'index', this);
    }

    callback(this.value, 'value', this);
  };
  /**
   * Create a new AssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AssignmentNode} Returns a transformed copy of the node
   */


  AssignmentNode.prototype.map = function (callback) {
    var object = this._ifNode(callback(this.object, 'object', this));

    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;

    var value = this._ifNode(callback(this.value, 'value', this));

    return new AssignmentNode(object, index, value);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {AssignmentNode}
   */


  AssignmentNode.prototype.clone = function () {
    return new AssignmentNode(this.object, this.index, this.value);
  };
  /*
   * Is parenthesis needed?
   * @param {node} node
   * @param {string} [parenthesis='keep']
   * @private
   */


  function needParenthesis(node, parenthesis) {
    if (!parenthesis) {
      parenthesis = 'keep';
    }

    var precedence = getPrecedence(node, parenthesis);
    var exprPrecedence = getPrecedence(node.value, parenthesis);
    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
  }
  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype._toString = function (options) {
    var object = this.object.toString(options);
    var index = this.index ? this.index.toString(options) : '';
    var value = this.value.toString(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = '(' + value + ')';
    }

    return object + index + ' = ' + value;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  AssignmentNode.prototype.toJSON = function () {
    return {
      mathjs: 'AssignmentNode',
      object: this.object,
      index: this.index,
      value: this.value
    };
  };
  /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
   *                       where mathjs is optional
   * @returns {AssignmentNode}
   */


  AssignmentNode.fromJSON = function (json) {
    return new AssignmentNode(json.object, json.index, json.value);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype.toHTML = function (options) {
    var object = this.object.toHTML(options);
    var index = this.index ? this.index.toHTML(options) : '';
    var value = this.value.toHTML(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
    }

    return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype._toTex = function (options) {
    var object = this.object.toTex(options);
    var index = this.index ? this.index.toTex(options) : '';
    var value = this.value.toTex(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = "\\left(".concat(value, "\\right)");
    }

    return object + index + ':=' + value;
  };

  return AssignmentNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/BlockNode.js



var BlockNode_name = 'BlockNode';
var BlockNode_dependencies = ['ResultSet', 'Node'];
var createBlockNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(BlockNode_name, BlockNode_dependencies, function (_ref) {
  var ResultSet = _ref.ResultSet,
      Node = _ref.Node;

  /**
   * @constructor BlockNode
   * @extends {Node}
   * Holds a set with blocks
   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
   *            An array with blocks, where a block is constructed as an Object
   *            with properties block, which is a Node, and visible, which is
   *            a boolean. The property visible is optional and is true by default
   */
  function BlockNode(blocks) {
    if (!(this instanceof BlockNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input, copy blocks


    if (!Array.isArray(blocks)) throw new Error('Array expected');
    this.blocks = blocks.map(function (block) {
      var node = block && block.node;
      var visible = block && block.visible !== undefined ? block.visible : true;
      if (!Object(is["w" /* isNode */])(node)) throw new TypeError('Property "node" must be a Node');
      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
      return {
        node: node,
        visible: visible
      };
    });
  }

  BlockNode.prototype = new Node();
  BlockNode.prototype.type = 'BlockNode';
  BlockNode.prototype.isBlockNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  BlockNode.prototype._compile = function (math, argNames) {
    var evalBlocks = Object(utils_array["m" /* map */])(this.blocks, function (block) {
      return {
        evaluate: block.node._compile(math, argNames),
        visible: block.visible
      };
    });
    return function evalBlockNodes(scope, args, context) {
      var results = [];
      Object(utils_array["f" /* forEach */])(evalBlocks, function evalBlockNode(block) {
        var result = block.evaluate(scope, args, context);

        if (block.visible) {
          results.push(result);
        }
      });
      return new ResultSet(results);
    };
  };
  /**
   * Execute a callback for each of the child blocks of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  BlockNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.blocks.length; i++) {
      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
    }
  };
  /**
   * Create a new BlockNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {BlockNode} Returns a transformed copy of the node
   */


  BlockNode.prototype.map = function (callback) {
    var blocks = [];

    for (var i = 0; i < this.blocks.length; i++) {
      var block = this.blocks[i];

      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));

      blocks[i] = {
        node: node,
        visible: block.visible
      };
    }

    return new BlockNode(blocks);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {BlockNode}
   */


  BlockNode.prototype.clone = function () {
    var blocks = this.blocks.map(function (block) {
      return {
        node: block.node,
        visible: block.visible
      };
    });
    return new BlockNode(blocks);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  BlockNode.prototype._toString = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toString(options) + (param.visible ? '' : ';');
    }).join('\n');
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  BlockNode.prototype.toJSON = function () {
    return {
      mathjs: 'BlockNode',
      blocks: this.blocks
    };
  };
  /**
   * Instantiate an BlockNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
   *                       where mathjs is optional
   * @returns {BlockNode}
   */


  BlockNode.fromJSON = function (json) {
    return new BlockNode(json.blocks);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  BlockNode.prototype.toHTML = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
    }).join('<span class="math-separator"><br /></span>');
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  BlockNode.prototype._toTex = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toTex(options) + (param.visible ? '' : ';');
    }).join('\\;\\;\n');
  };

  return BlockNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/ConditionalNode.js



var ConditionalNode_name = 'ConditionalNode';
var ConditionalNode_dependencies = ['Node'];
var createConditionalNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(ConditionalNode_name, ConditionalNode_dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
   *
   * @param {Node} condition   Condition, must result in a boolean
   * @param {Node} trueExpr    Expression evaluated when condition is true
   * @param {Node} falseExpr   Expression evaluated when condition is true
   *
   * @constructor ConditionalNode
   * @extends {Node}
   */
  function ConditionalNode(condition, trueExpr, falseExpr) {
    if (!(this instanceof ConditionalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!Object(is["w" /* isNode */])(condition)) throw new TypeError('Parameter condition must be a Node');
    if (!Object(is["w" /* isNode */])(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
    if (!Object(is["w" /* isNode */])(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');
    this.condition = condition;
    this.trueExpr = trueExpr;
    this.falseExpr = falseExpr;
  }

  ConditionalNode.prototype = new Node();
  ConditionalNode.prototype.type = 'ConditionalNode';
  ConditionalNode.prototype.isConditionalNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ConditionalNode.prototype._compile = function (math, argNames) {
    var evalCondition = this.condition._compile(math, argNames);

    var evalTrueExpr = this.trueExpr._compile(math, argNames);

    var evalFalseExpr = this.falseExpr._compile(math, argNames);

    return function evalConditionalNode(scope, args, context) {
      return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ConditionalNode.prototype.forEach = function (callback) {
    callback(this.condition, 'condition', this);
    callback(this.trueExpr, 'trueExpr', this);
    callback(this.falseExpr, 'falseExpr', this);
  };
  /**
   * Create a new ConditionalNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ConditionalNode} Returns a transformed copy of the node
   */


  ConditionalNode.prototype.map = function (callback) {
    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ConditionalNode}
   */


  ConditionalNode.prototype.clone = function () {
    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
    // or have lower or equal precedence
    // NOTE: enclosing all OperatorNodes in parentheses is a decision
    // purely based on aesthetics and readability

    var condition = this.condition.toString(options);
    var conditionPrecedence = getPrecedence(this.condition, parenthesis);

    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
      condition = '(' + condition + ')';
    }

    var trueExpr = this.trueExpr.toString(options);
    var truePrecedence = getPrecedence(this.trueExpr, parenthesis);

    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
      trueExpr = '(' + trueExpr + ')';
    }

    var falseExpr = this.falseExpr.toString(options);
    var falsePrecedence = getPrecedence(this.falseExpr, parenthesis);

    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
      falseExpr = '(' + falseExpr + ')';
    }

    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ConditionalNode.prototype.toJSON = function () {
    return {
      mathjs: 'ConditionalNode',
      condition: this.condition,
      trueExpr: this.trueExpr,
      falseExpr: this.falseExpr
    };
  };
  /**
   * Instantiate an ConditionalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ConditionalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {ConditionalNode}
   */


  ConditionalNode.fromJSON = function (json) {
    return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
    // or have lower or equal precedence
    // NOTE: enclosing all OperatorNodes in parentheses is a decision
    // purely based on aesthetics and readability

    var condition = this.condition.toHTML(options);
    var conditionPrecedence = getPrecedence(this.condition, parenthesis);

    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
      condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    var trueExpr = this.trueExpr.toHTML(options);
    var truePrecedence = getPrecedence(this.trueExpr, parenthesis);

    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
      trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    var falseExpr = this.falseExpr.toHTML(options);
    var falsePrecedence = getPrecedence(this.falseExpr, parenthesis);

    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
      falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype._toTex = function (options) {
    return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
  };
  /**
   * Test whether a condition is met
   * @param {*} condition
   * @returns {boolean} true if condition is true or non-zero, else false
   */


  function testCondition(condition) {
    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
      return !!condition;
    }

    if (condition) {
      if (Object(is["e" /* isBigNumber */])(condition)) {
        return !condition.isZero();
      }

      if (Object(is["j" /* isComplex */])(condition)) {
        return !!(condition.re || condition.im);
      }

      if (Object(is["L" /* isUnit */])(condition)) {
        return !!condition.value;
      }
    }

    if (condition === null || condition === undefined) {
      return false;
    }

    throw new TypeError('Unsupported type of condition "' + Object(is["M" /* typeOf */])(condition) + '"');
  }

  return ConditionalNode;
}, {
  isClass: true,
  isNode: true
});
// EXTERNAL MODULE: ./node_modules/escape-latex/dist/index.js
var dist = __webpack_require__(17);
var dist_default = /*#__PURE__*/__webpack_require__.n(dist);

// CONCATENATED MODULE: ./src/utils/latex.js
/* eslint no-template-curly-in-string: "off" */


var latexSymbols = {
  // GREEK LETTERS
  Alpha: 'A',
  alpha: '\\alpha',
  Beta: 'B',
  beta: '\\beta',
  Gamma: '\\Gamma',
  gamma: '\\gamma',
  Delta: '\\Delta',
  delta: '\\delta',
  Epsilon: 'E',
  epsilon: '\\epsilon',
  varepsilon: '\\varepsilon',
  Zeta: 'Z',
  zeta: '\\zeta',
  Eta: 'H',
  eta: '\\eta',
  Theta: '\\Theta',
  theta: '\\theta',
  vartheta: '\\vartheta',
  Iota: 'I',
  iota: '\\iota',
  Kappa: 'K',
  kappa: '\\kappa',
  varkappa: '\\varkappa',
  Lambda: '\\Lambda',
  lambda: '\\lambda',
  Mu: 'M',
  mu: '\\mu',
  Nu: 'N',
  nu: '\\nu',
  Xi: '\\Xi',
  xi: '\\xi',
  Omicron: 'O',
  omicron: 'o',
  Pi: '\\Pi',
  pi: '\\pi',
  varpi: '\\varpi',
  Rho: 'P',
  rho: '\\rho',
  varrho: '\\varrho',
  Sigma: '\\Sigma',
  sigma: '\\sigma',
  varsigma: '\\varsigma',
  Tau: 'T',
  tau: '\\tau',
  Upsilon: "\\Upsilon",
  upsilon: "\\upsilon",
  Phi: '\\Phi',
  phi: '\\phi',
  varphi: '\\varphi',
  Chi: 'X',
  chi: '\\chi',
  Psi: '\\Psi',
  psi: '\\psi',
  Omega: '\\Omega',
  omega: '\\omega',
  // logic
  "true": '\\mathrm{True}',
  "false": '\\mathrm{False}',
  // other
  i: 'i',
  // TODO use \i ??
  inf: '\\infty',
  Inf: '\\infty',
  infinity: '\\infty',
  Infinity: '\\infty',
  oo: '\\infty',
  lim: '\\lim',
  undefined: '\\mathbf{?}'
};
var latexOperators = {
  transpose: '^\\top',
  ctranspose: '^H',
  factorial: '!',
  pow: '^',
  dotPow: '.^\\wedge',
  // TODO find ideal solution
  unaryPlus: '+',
  unaryMinus: '-',
  bitNot: '\\~',
  // TODO find ideal solution
  not: '\\neg',
  multiply: '\\cdot',
  divide: '\\frac',
  // TODO how to handle that properly?
  dotMultiply: '.\\cdot',
  // TODO find ideal solution
  dotDivide: '.:',
  // TODO find ideal solution
  mod: '\\mod',
  add: '+',
  subtract: '-',
  to: '\\rightarrow',
  leftShift: '<<',
  rightArithShift: '>>',
  rightLogShift: '>>>',
  equal: '=',
  unequal: '\\neq',
  smaller: '<',
  larger: '>',
  smallerEq: '\\leq',
  largerEq: '\\geq',
  bitAnd: '\\&',
  bitXor: "\\underline{|}",
  bitOr: '|',
  and: '\\wedge',
  xor: '\\veebar',
  or: '\\vee'
};
var latexFunctions = {
  // arithmetic
  abs: {
    1: '\\left|${args[0]}\\right|'
  },
  add: {
    2: "\\left(${args[0]}".concat(latexOperators.add, "${args[1]}\\right)")
  },
  cbrt: {
    1: '\\sqrt[3]{${args[0]}}'
  },
  ceil: {
    1: '\\left\\lceil${args[0]}\\right\\rceil'
  },
  cube: {
    1: '\\left(${args[0]}\\right)^3'
  },
  divide: {
    2: '\\frac{${args[0]}}{${args[1]}}'
  },
  dotDivide: {
    2: "\\left(${args[0]}".concat(latexOperators.dotDivide, "${args[1]}\\right)")
  },
  dotMultiply: {
    2: "\\left(${args[0]}".concat(latexOperators.dotMultiply, "${args[1]}\\right)")
  },
  dotPow: {
    2: "\\left(${args[0]}".concat(latexOperators.dotPow, "${args[1]}\\right)")
  },
  exp: {
    1: '\\exp\\left(${args[0]}\\right)'
  },
  expm1: "\\left(e".concat(latexOperators.pow, "{${args[0]}}-1\\right)"),
  fix: {
    1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
  },
  floor: {
    1: '\\left\\lfloor${args[0]}\\right\\rfloor'
  },
  gcd: '\\gcd\\left(${args}\\right)',
  hypot: '\\hypot\\left(${args}\\right)',
  log: {
    1: '\\ln\\left(${args[0]}\\right)',
    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
  },
  log10: {
    1: '\\log_{10}\\left(${args[0]}\\right)'
  },
  log1p: {
    1: '\\ln\\left(${args[0]}+1\\right)',
    2: '\\log_{${args[1]}}\\left(${args[0]}+1\\right)'
  },
  log2: '\\log_{2}\\left(${args[0]}\\right)',
  mod: {
    2: "\\left(${args[0]}".concat(latexOperators.mod, "${args[1]}\\right)")
  },
  multiply: {
    2: "\\left(${args[0]}".concat(latexOperators.multiply, "${args[1]}\\right)")
  },
  norm: {
    1: '\\left\\|${args[0]}\\right\\|',
    2: undefined // use default template

  },
  nthRoot: {
    2: '\\sqrt[${args[1]}]{${args[0]}}'
  },
  nthRoots: {
    2: '\\{y : $y^{args[1]} = {${args[0]}}\\}'
  },
  pow: {
    2: "\\left(${args[0]}\\right)".concat(latexOperators.pow, "{${args[1]}}")
  },
  round: {
    1: '\\left\\lfloor${args[0]}\\right\\rceil',
    2: undefined // use default template

  },
  sign: {
    1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
  },
  sqrt: {
    1: '\\sqrt{${args[0]}}'
  },
  square: {
    1: '\\left(${args[0]}\\right)^2'
  },
  subtract: {
    2: "\\left(${args[0]}".concat(latexOperators.subtract, "${args[1]}\\right)")
  },
  unaryMinus: {
    1: "".concat(latexOperators.unaryMinus, "\\left(${args[0]}\\right)")
  },
  unaryPlus: {
    1: "".concat(latexOperators.unaryPlus, "\\left(${args[0]}\\right)")
  },
  // bitwise
  bitAnd: {
    2: "\\left(${args[0]}".concat(latexOperators.bitAnd, "${args[1]}\\right)")
  },
  bitNot: {
    1: latexOperators.bitNot + '\\left(${args[0]}\\right)'
  },
  bitOr: {
    2: "\\left(${args[0]}".concat(latexOperators.bitOr, "${args[1]}\\right)")
  },
  bitXor: {
    2: "\\left(${args[0]}".concat(latexOperators.bitXor, "${args[1]}\\right)")
  },
  leftShift: {
    2: "\\left(${args[0]}".concat(latexOperators.leftShift, "${args[1]}\\right)")
  },
  rightArithShift: {
    2: "\\left(${args[0]}".concat(latexOperators.rightArithShift, "${args[1]}\\right)")
  },
  rightLogShift: {
    2: "\\left(${args[0]}".concat(latexOperators.rightLogShift, "${args[1]}\\right)")
  },
  // combinatorics
  bellNumbers: {
    1: '\\mathrm{B}_{${args[0]}}'
  },
  catalan: {
    1: '\\mathrm{C}_{${args[0]}}'
  },
  stirlingS2: {
    2: '\\mathrm{S}\\left(${args}\\right)'
  },
  // complex
  arg: {
    1: '\\arg\\left(${args[0]}\\right)'
  },
  conj: {
    1: '\\left(${args[0]}\\right)^*'
  },
  im: {
    1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace'
  },
  re: {
    1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace'
  },
  // logical
  and: {
    2: "\\left(${args[0]}".concat(latexOperators.and, "${args[1]}\\right)")
  },
  not: {
    1: latexOperators.not + '\\left(${args[0]}\\right)'
  },
  or: {
    2: "\\left(${args[0]}".concat(latexOperators.or, "${args[1]}\\right)")
  },
  xor: {
    2: "\\left(${args[0]}".concat(latexOperators.xor, "${args[1]}\\right)")
  },
  // matrix
  cross: {
    2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
  },
  ctranspose: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.ctranspose)
  },
  det: {
    1: '\\det\\left(${args[0]}\\right)'
  },
  dot: {
    2: '\\left(${args[0]}\\cdot${args[1]}\\right)'
  },
  expm: {
    1: '\\exp\\left(${args[0]}\\right)'
  },
  inv: {
    1: '\\left(${args[0]}\\right)^{-1}'
  },
  sqrtm: {
    1: "{${args[0]}}".concat(latexOperators.pow, "{\\frac{1}{2}}")
  },
  trace: {
    1: '\\mathrm{tr}\\left(${args[0]}\\right)'
  },
  transpose: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.transpose)
  },
  // probability
  combinations: {
    2: '\\binom{${args[0]}}{${args[1]}}'
  },
  combinationsWithRep: {
    2: '\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)'
  },
  factorial: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.factorial)
  },
  gamma: {
    1: '\\Gamma\\left(${args[0]}\\right)'
  },
  // relational
  equal: {
    2: "\\left(${args[0]}".concat(latexOperators.equal, "${args[1]}\\right)")
  },
  larger: {
    2: "\\left(${args[0]}".concat(latexOperators.larger, "${args[1]}\\right)")
  },
  largerEq: {
    2: "\\left(${args[0]}".concat(latexOperators.largerEq, "${args[1]}\\right)")
  },
  smaller: {
    2: "\\left(${args[0]}".concat(latexOperators.smaller, "${args[1]}\\right)")
  },
  smallerEq: {
    2: "\\left(${args[0]}".concat(latexOperators.smallerEq, "${args[1]}\\right)")
  },
  unequal: {
    2: "\\left(${args[0]}".concat(latexOperators.unequal, "${args[1]}\\right)")
  },
  // special
  erf: {
    1: 'erf\\left(${args[0]}\\right)'
  },
  // statistics
  max: '\\max\\left(${args}\\right)',
  min: '\\min\\left(${args}\\right)',
  variance: '\\mathrm{Var}\\left(${args}\\right)',
  // trigonometry
  acos: {
    1: '\\cos^{-1}\\left(${args[0]}\\right)'
  },
  acosh: {
    1: '\\cosh^{-1}\\left(${args[0]}\\right)'
  },
  acot: {
    1: '\\cot^{-1}\\left(${args[0]}\\right)'
  },
  acoth: {
    1: '\\coth^{-1}\\left(${args[0]}\\right)'
  },
  acsc: {
    1: '\\csc^{-1}\\left(${args[0]}\\right)'
  },
  acsch: {
    1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'
  },
  asec: {
    1: '\\sec^{-1}\\left(${args[0]}\\right)'
  },
  asech: {
    1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'
  },
  asin: {
    1: '\\sin^{-1}\\left(${args[0]}\\right)'
  },
  asinh: {
    1: '\\sinh^{-1}\\left(${args[0]}\\right)'
  },
  atan: {
    1: '\\tan^{-1}\\left(${args[0]}\\right)'
  },
  atan2: {
    2: '\\mathrm{atan2}\\left(${args}\\right)'
  },
  atanh: {
    1: '\\tanh^{-1}\\left(${args[0]}\\right)'
  },
  cos: {
    1: '\\cos\\left(${args[0]}\\right)'
  },
  cosh: {
    1: '\\cosh\\left(${args[0]}\\right)'
  },
  cot: {
    1: '\\cot\\left(${args[0]}\\right)'
  },
  coth: {
    1: '\\coth\\left(${args[0]}\\right)'
  },
  csc: {
    1: '\\csc\\left(${args[0]}\\right)'
  },
  csch: {
    1: '\\mathrm{csch}\\left(${args[0]}\\right)'
  },
  sec: {
    1: '\\sec\\left(${args[0]}\\right)'
  },
  sech: {
    1: '\\mathrm{sech}\\left(${args[0]}\\right)'
  },
  sin: {
    1: '\\sin\\left(${args[0]}\\right)'
  },
  sinh: {
    1: '\\sinh\\left(${args[0]}\\right)'
  },
  tan: {
    1: '\\tan\\left(${args[0]}\\right)'
  },
  tanh: {
    1: '\\tanh\\left(${args[0]}\\right)'
  },
  // unit
  to: {
    2: "\\left(${args[0]}".concat(latexOperators.to, "${args[1]}\\right)")
  },
  // utils
  numeric: function numeric(node, options) {
    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.
    return node.args[0].toTex();
  },
  // type
  number: {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  },
  string: {
    0: '\\mathtt{""}',
    1: '\\mathrm{string}\\left(${args[0]}\\right)'
  },
  bignumber: {
    0: '0',
    1: '\\left(${args[0]}\\right)'
  },
  complex: {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: "\\left(\\left(${args[0]}\\right)+".concat(latexSymbols.i, "\\cdot\\left(${args[1]}\\right)\\right)")
  },
  matrix: {
    0: '\\begin{bmatrix}\\end{bmatrix}',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(${args[0]}\\right)'
  },
  sparse: {
    0: '\\begin{bsparse}\\end{bsparse}',
    1: '\\left(${args[0]}\\right)'
  },
  unit: {
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  }
};
var defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
var latexUnits = {
  deg: '^\\circ'
};
function escapeLatex(string) {
  return dist_default()(string, {
    preserveFormatting: true
  });
} // @param {string} name
// @param {boolean} isUnit

function toSymbol(name, isUnit) {
  isUnit = typeof isUnit === 'undefined' ? false : isUnit;

  if (isUnit) {
    if (Object(utils_object["f" /* hasOwnProperty */])(latexUnits, name)) {
      return latexUnits[name];
    }

    return '\\mathrm{' + escapeLatex(name) + '}';
  }

  if (Object(utils_object["f" /* hasOwnProperty */])(latexSymbols, name)) {
    return latexSymbols[name];
  }

  return escapeLatex(name);
}
// CONCATENATED MODULE: ./src/expression/node/ConstantNode.js




var ConstantNode_name = 'ConstantNode';
var ConstantNode_dependencies = ['Node'];
var ConstantNode_createConstantNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(ConstantNode_name, ConstantNode_dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * A ConstantNode holds a constant value like a number or string.
   *
   * Usage:
   *
   *     new ConstantNode(2.3)
   *     new ConstantNode('hello')
   *
   * @param {*} value    Value can be any type (number, BigNumber, string, ...)
   * @constructor ConstantNode
   * @extends {Node}
   */
  function ConstantNode(value) {
    if (!(this instanceof ConstantNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (arguments.length === 2) {
      // TODO: remove deprecation error some day (created 2018-01-23)
      throw new SyntaxError('new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.');
    }

    this.value = value;
  }

  ConstantNode.prototype = new Node();
  ConstantNode.prototype.type = 'ConstantNode';
  ConstantNode.prototype.isConstantNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ConstantNode.prototype._compile = function (math, argNames) {
    var value = this.value;
    return function evalConstantNode() {
      return value;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ConstantNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs

  /**
   * Create a new ConstantNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ConstantNode} Returns a clone of the node
   */
  ;

  ConstantNode.prototype.map = function (callback) {
    return this.clone();
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ConstantNode}
   */


  ConstantNode.prototype.clone = function () {
    return new ConstantNode(this.value);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype._toString = function (options) {
    return Object(utils_string["d" /* format */])(this.value, options);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype.toHTML = function (options) {
    var value = this._toString(options);

    switch (Object(is["M" /* typeOf */])(this.value)) {
      case 'number':
      case 'BigNumber':
      case 'Fraction':
        return '<span class="math-number">' + value + '</span>';

      case 'string':
        return '<span class="math-string">' + value + '</span>';

      case 'boolean':
        return '<span class="math-boolean">' + value + '</span>';

      case 'null':
        return '<span class="math-null-symbol">' + value + '</span>';

      case 'undefined':
        return '<span class="math-undefined">' + value + '</span>';

      default:
        return '<span class="math-symbol">' + value + '</span>';
    }
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ConstantNode.prototype.toJSON = function () {
    return {
      mathjs: 'ConstantNode',
      value: this.value
    };
  };
  /**
   * Instantiate a ConstantNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", value: 2.3}`,
   *                       where mathjs is optional
   * @returns {ConstantNode}
   */


  ConstantNode.fromJSON = function (json) {
    return new ConstantNode(json.value);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype._toTex = function (options) {
    var value = this._toString(options);

    switch (Object(is["M" /* typeOf */])(this.value)) {
      case 'string':
        return '\\mathtt{' + escapeLatex(value) + '}';

      case 'number':
      case 'BigNumber':
        {
          var index = value.toLowerCase().indexOf('e');

          if (index !== -1) {
            return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
          }
        }
        return value;

      case 'Fraction':
        return this.value.toLatex();

      default:
        return value;
    }
  };

  return ConstantNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/FunctionAssignmentNode.js








var FunctionAssignmentNode_name = 'FunctionAssignmentNode';
var FunctionAssignmentNode_dependencies = ['typed', 'Node'];
var createFunctionAssignmentNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(FunctionAssignmentNode_name, FunctionAssignmentNode_dependencies, function (_ref) {
  var typed = _ref.typed,
      Node = _ref.Node;

  /**
   * @constructor FunctionAssignmentNode
   * @extends {Node}
   * Function assignment
   *
   * @param {string} name           Function name
   * @param {string[] | Array.<{name: string, type: string}>} params
   *                                Array with function parameter names, or an
   *                                array with objects containing the name
   *                                and type of the parameter
   * @param {Node} expr             The function expression
   */
  function FunctionAssignmentNode(name, params, expr) {
    if (!(this instanceof FunctionAssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
    if (!Object(is["w" /* isNode */])(expr)) throw new TypeError('Node expected for parameter "expr"');
    if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
    this.name = name;
    this.params = params.map(function (param) {
      return param && param.name || param;
    });
    this.types = params.map(function (param) {
      return param && param.type || 'any';
    });
    this.expr = expr;
  }

  FunctionAssignmentNode.prototype = new Node();
  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  FunctionAssignmentNode.prototype._compile = function (math, argNames) {
    var childArgNames = Object.create(argNames);
    Object(utils_array["f" /* forEach */])(this.params, function (param) {
      childArgNames[param] = true;
    }); // compile the function expression with the child args

    var evalExpr = this.expr._compile(math, childArgNames);

    var name = this.name;
    var params = this.params;
    var signature = Object(utils_array["k" /* join */])(this.types, ',');
    var syntax = name + '(' + Object(utils_array["k" /* join */])(this.params, ', ') + ')';
    return function evalFunctionAssignmentNode(scope, args, context) {
      var signatures = {};

      signatures[signature] = function () {
        var childArgs = Object.create(args);

        for (var i = 0; i < params.length; i++) {
          childArgs[params[i]] = arguments[i];
        }

        return evalExpr(scope, childArgs, context);
      };

      var fn = typed(name, signatures);
      fn.syntax = syntax;
      setSafeProperty(scope, name, fn);
      return fn;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  FunctionAssignmentNode.prototype.forEach = function (callback) {
    callback(this.expr, 'expr', this);
  };
  /**
   * Create a new FunctionAssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
   */


  FunctionAssignmentNode.prototype.map = function (callback) {
    var expr = this._ifNode(callback(this.expr, 'expr', this));

    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionAssignmentNode}
   */


  FunctionAssignmentNode.prototype.clone = function () {
    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
  };
  /**
   * Is parenthesis needed?
   * @param {Node} node
   * @param {Object} parenthesis
   * @private
   */


  function needParenthesis(node, parenthesis) {
    var precedence = getPrecedence(node, parenthesis);
    var exprPrecedence = getPrecedence(node.expr, parenthesis);
    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
  }
  /**
   * get string representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var expr = this.expr.toString(options);

    if (needParenthesis(this, parenthesis)) {
      expr = '(' + expr + ')';
    }

    return this.name + '(' + this.params.join(', ') + ') = ' + expr;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  FunctionAssignmentNode.prototype.toJSON = function () {
    var types = this.types;
    return {
      mathjs: 'FunctionAssignmentNode',
      name: this.name,
      params: this.params.map(function (param, index) {
        return {
          name: param,
          type: types[index]
        };
      }),
      expr: this.expr
    };
  };
  /**
   * Instantiate an FunctionAssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionAssignmentNode", name: ..., params: ..., expr: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionAssignmentNode}
   */


  FunctionAssignmentNode.fromJSON = function (json) {
    return new FunctionAssignmentNode(json.name, json.params, json.expr);
  };
  /**
   * get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var params = [];

    for (var i = 0; i < this.params.length; i++) {
      params.push('<span class="math-symbol math-parameter">' + Object(utils_string["c" /* escape */])(this.params[i]) + '</span>');
    }

    var expr = this.expr.toHTML(options);

    if (needParenthesis(this, parenthesis)) {
      expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return '<span class="math-function">' + Object(utils_string["c" /* escape */])(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
  };
  /**
   * get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var expr = this.expr.toTex(options);

    if (needParenthesis(this, parenthesis)) {
      expr = "\\left(".concat(expr, "\\right)");
    }

    return '\\mathrm{' + this.name + '}\\left(' + this.params.map(toSymbol).join(',') + '\\right):=' + expr;
  };

  return FunctionAssignmentNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/transform/index.transform.js


var index_transform_name = 'index';
var index_transform_dependencies = ['Index'];
var createIndexTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(index_transform_name, index_transform_dependencies, function (_ref) {
  var Index = _ref.Index;

  /**
   * Attach a transform function to math.index
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  return function indexTransform() {
    var args = [];

    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number

      if (Object(is["D" /* isRange */])(arg)) {
        arg.start--;
        arg.end -= arg.step > 0 ? 0 : 2;
      } else if (arg && arg.isSet === true) {
        arg = arg.map(function (v) {
          return v - 1;
        });
      } else if (Object(is["b" /* isArray */])(arg) || Object(is["v" /* isMatrix */])(arg)) {
        arg = arg.map(function (v) {
          return v - 1;
        });
      } else if (Object(is["y" /* isNumber */])(arg)) {
        arg--;
      } else if (Object(is["e" /* isBigNumber */])(arg)) {
        arg = arg.toNumber() - 1;
      } else if (typeof arg === 'string') {// leave as is
      } else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      }

      args[i] = arg;
    }

    var res = new Index();
    Index.apply(res, args);
    return res;
  };
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/node/IndexNode.js
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }






var IndexNode_name = 'IndexNode';
var IndexNode_dependencies = ['Range', 'Node', 'Index', 'size'];
var createIndexNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(IndexNode_name, IndexNode_dependencies, function (_ref) {
  var Range = _ref.Range,
      Node = _ref.Node,
      Index = _ref.Index,
      size = _ref.size;
  var index = createIndexTransform({
    Index: Index
  });
  /**
   * @constructor IndexNode
   * @extends Node
   *
   * Describes a subset of a matrix or an object property.
   * Cannot be used on its own, needs to be used within an AccessorNode or
   * AssignmentNode.
   *
   * @param {Node[]} dimensions
   * @param {boolean} [dotNotation=false]  Optional property describing whether
   *                                       this index was written using dot
   *                                       notation like `a.b`, or using bracket
   *                                       notation like `a["b"]` (default).
   *                                       Used to stringify an IndexNode.
   */

  function IndexNode(dimensions, dotNotation) {
    if (!(this instanceof IndexNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.dimensions = dimensions;
    this.dotNotation = dotNotation || false; // validate input

    if (!Array.isArray(dimensions) || !dimensions.every(is["w" /* isNode */])) {
      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
    }

    if (this.dotNotation && !this.isObjectProperty()) {
      throw new Error('dotNotation only applicable for object properties');
    } // TODO: deprecated since v3, remove some day


    var deprecated = function deprecated() {
      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
    };

    Object.defineProperty(this, 'object', {
      get: deprecated,
      set: deprecated
    });
  }

  IndexNode.prototype = new Node();
  IndexNode.prototype.type = 'IndexNode';
  IndexNode.prototype.isIndexNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  IndexNode.prototype._compile = function (math, argNames) {
    // TODO: implement support for bignumber (currently bignumbers are silently
    //       reduced to numbers when changing the value to zero-based)
    // TODO: Optimization: when the range values are ConstantNodes,
    //       we can beforehand resolve the zero-based value
    // optimization for a simple object property
    var evalDimensions = Object(utils_array["m" /* map */])(this.dimensions, function (range, i) {
      if (Object(is["E" /* isRangeNode */])(range)) {
        if (range.needsEnd()) {
          // create a range containing end (like '4:end')
          var childArgNames = Object.create(argNames);
          childArgNames.end = true;

          var evalStart = range.start._compile(math, childArgNames);

          var evalEnd = range.end._compile(math, childArgNames);

          var evalStep = range.step ? range.step._compile(math, childArgNames) : function () {
            return 1;
          };
          return function evalDimension(scope, args, context) {
            var s = size(context).valueOf();
            var childArgs = Object.create(args);
            childArgs.end = s[i];
            return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));
          };
        } else {
          // create range
          var _evalStart = range.start._compile(math, argNames);

          var _evalEnd = range.end._compile(math, argNames);

          var _evalStep = range.step ? range.step._compile(math, argNames) : function () {
            return 1;
          };

          return function evalDimension(scope, args, context) {
            return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));
          };
        }
      } else if (Object(is["J" /* isSymbolNode */])(range) && range.name === 'end') {
        // SymbolNode 'end'
        var _childArgNames = Object.create(argNames);

        _childArgNames.end = true;

        var evalRange = range._compile(math, _childArgNames);

        return function evalDimension(scope, args, context) {
          var s = size(context).valueOf();
          var childArgs = Object.create(args);
          childArgs.end = s[i];
          return evalRange(scope, childArgs, context);
        };
      } else {
        // ConstantNode
        var _evalRange = range._compile(math, argNames);

        return function evalDimension(scope, args, context) {
          return _evalRange(scope, args, context);
        };
      }
    });
    return function evalIndexNode(scope, args, context) {
      var dimensions = Object(utils_array["m" /* map */])(evalDimensions, function (evalDimension) {
        return evalDimension(scope, args, context);
      });
      return index.apply(void 0, _toConsumableArray(dimensions));
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  IndexNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.dimensions.length; i++) {
      callback(this.dimensions[i], 'dimensions[' + i + ']', this);
    }
  };
  /**
   * Create a new IndexNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {IndexNode} Returns a transformed copy of the node
   */


  IndexNode.prototype.map = function (callback) {
    var dimensions = [];

    for (var i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
    }

    return new IndexNode(dimensions, this.dotNotation);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {IndexNode}
   */


  IndexNode.prototype.clone = function () {
    return new IndexNode(this.dimensions.slice(0), this.dotNotation);
  };
  /**
   * Test whether this IndexNode contains a single property name
   * @return {boolean}
   */


  IndexNode.prototype.isObjectProperty = function () {
    return this.dimensions.length === 1 && Object(is["l" /* isConstantNode */])(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
  };
  /**
   * Returns the property name if IndexNode contains a property.
   * If not, returns null.
   * @return {string | null}
   */


  IndexNode.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this.dimensions[0].value : null;
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype._toString = function (options) {
    // format the parameters like "[1, 0:5]"
    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  IndexNode.prototype.toJSON = function () {
    return {
      mathjs: 'IndexNode',
      dimensions: this.dimensions,
      dotNotation: this.dotNotation
    };
  };
  /**
   * Instantiate an IndexNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
   *                       where mathjs is optional
   * @returns {IndexNode}
   */


  IndexNode.fromJSON = function (json) {
    return new IndexNode(json.dimensions, json.dotNotation);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype.toHTML = function (options) {
    // format the parameters like "[1, 0:5]"
    var dimensions = [];

    for (var i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this.dimensions[i].toHTML();
    }

    if (this.dotNotation) {
      return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + Object(utils_string["c" /* escape */])(this.getObjectProperty()) + '</span>';
    } else {
      return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    }
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype._toTex = function (options) {
    var dimensions = this.dimensions.map(function (range) {
      return range.toTex(options);
    });
    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
  }; // helper function to create a Range from start, step and end


  function createRange(start, end, step) {
    return new Range(Object(is["e" /* isBigNumber */])(start) ? start.toNumber() : start, Object(is["e" /* isBigNumber */])(end) ? end.toNumber() : end, Object(is["e" /* isBigNumber */])(step) ? step.toNumber() : step);
  }

  return IndexNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/ObjectNode.js
function ObjectNode_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { ObjectNode_typeof = function _typeof(obj) { return typeof obj; }; } else { ObjectNode_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return ObjectNode_typeof(obj); }






var ObjectNode_name = 'ObjectNode';
var ObjectNode_dependencies = ['Node'];
var createObjectNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(ObjectNode_name, ObjectNode_dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor ObjectNode
   * @extends {Node}
   * Holds an object with keys/values
   * @param {Object.<string, Node>} [properties]   object with key/value pairs
   */
  function ObjectNode(properties) {
    if (!(this instanceof ObjectNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.properties = properties || {}; // validate input

    if (properties) {
      if (!(ObjectNode_typeof(properties) === 'object') || !Object.keys(properties).every(function (key) {
        return Object(is["w" /* isNode */])(properties[key]);
      })) {
        throw new TypeError('Object containing Nodes expected');
      }
    }
  }

  ObjectNode.prototype = new Node();
  ObjectNode.prototype.type = 'ObjectNode';
  ObjectNode.prototype.isObjectNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ObjectNode.prototype._compile = function (math, argNames) {
    var evalEntries = {};

    for (var key in this.properties) {
      if (Object(utils_object["f" /* hasOwnProperty */])(this.properties, key)) {
        // we stringify/parse the key here to resolve unicode characters,
        // so you cannot create a key like {"co\\u006Estructor": null}
        var stringifiedKey = Object(utils_string["e" /* stringify */])(key);
        var parsedKey = JSON.parse(stringifiedKey);

        if (!isSafeProperty(this.properties, parsedKey)) {
          throw new Error('No access to property "' + parsedKey + '"');
        }

        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);
      }
    }

    return function evalObjectNode(scope, args, context) {
      var obj = {};

      for (var _key in evalEntries) {
        if (Object(utils_object["f" /* hasOwnProperty */])(evalEntries, _key)) {
          obj[_key] = evalEntries[_key](scope, args, context);
        }
      }

      return obj;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ObjectNode.prototype.forEach = function (callback) {
    for (var key in this.properties) {
      if (Object(utils_object["f" /* hasOwnProperty */])(this.properties, key)) {
        callback(this.properties[key], 'properties[' + Object(utils_string["e" /* stringify */])(key) + ']', this);
      }
    }
  };
  /**
   * Create a new ObjectNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ObjectNode} Returns a transformed copy of the node
   */


  ObjectNode.prototype.map = function (callback) {
    var properties = {};

    for (var key in this.properties) {
      if (Object(utils_object["f" /* hasOwnProperty */])(this.properties, key)) {
        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + Object(utils_string["e" /* stringify */])(key) + ']', this));
      }
    }

    return new ObjectNode(properties);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ObjectNode}
   */


  ObjectNode.prototype.clone = function () {
    var properties = {};

    for (var key in this.properties) {
      if (Object(utils_object["f" /* hasOwnProperty */])(this.properties, key)) {
        properties[key] = this.properties[key];
      }
    }

    return new ObjectNode(properties);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ObjectNode.prototype._toString = function (options) {
    var entries = [];

    for (var key in this.properties) {
      if (Object(utils_object["f" /* hasOwnProperty */])(this.properties, key)) {
        entries.push(Object(utils_string["e" /* stringify */])(key) + ': ' + this.properties[key].toString(options));
      }
    }

    return '{' + entries.join(', ') + '}';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ObjectNode.prototype.toJSON = function () {
    return {
      mathjs: 'ObjectNode',
      properties: this.properties
    };
  };
  /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
   *                       where mathjs is optional
   * @returns {ObjectNode}
   */


  ObjectNode.fromJSON = function (json) {
    return new ObjectNode(json.properties);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ObjectNode.prototype.toHTML = function (options) {
    var entries = [];

    for (var key in this.properties) {
      if (Object(utils_object["f" /* hasOwnProperty */])(this.properties, key)) {
        entries.push('<span class="math-symbol math-property">' + Object(utils_string["c" /* escape */])(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
      }
    }

    return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ObjectNode.prototype._toTex = function (options) {
    var entries = [];

    for (var key in this.properties) {
      if (Object(utils_object["f" /* hasOwnProperty */])(this.properties, key)) {
        entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
      }
    }

    return "\\left\\{\\begin{array}{ll}".concat(entries.join('\n'), "\\end{array}\\right\\}");
  };

  return ObjectNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/OperatorNode.js







var OperatorNode_name = 'OperatorNode';
var OperatorNode_dependencies = ['Node'];
var createOperatorNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(OperatorNode_name, OperatorNode_dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor OperatorNode
   * @extends {Node}
   * An operator with two arguments, like 2+3
   *
   * @param {string} op           Operator name, for example '+'
   * @param {string} fn           Function name, for example 'add'
   * @param {Node[]} args         Operator arguments
   * @param {boolean} [implicit]  Is this an implicit multiplication?
   */
  function OperatorNode(op, fn, args, implicit) {
    if (!(this instanceof OperatorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof op !== 'string') {
      throw new TypeError('string expected for parameter "op"');
    }

    if (typeof fn !== 'string') {
      throw new TypeError('string expected for parameter "fn"');
    }

    if (!Array.isArray(args) || !args.every(is["w" /* isNode */])) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }

    this.implicit = implicit === true;
    this.op = op;
    this.fn = fn;
    this.args = args || [];
  }

  OperatorNode.prototype = new Node();
  OperatorNode.prototype.type = 'OperatorNode';
  OperatorNode.prototype.isOperatorNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  OperatorNode.prototype._compile = function (math, argNames) {
    // validate fn
    if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {
      if (!math[this.fn]) {
        throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
      } else {
        throw new Error('No access to function "' + this.fn + '"');
      }
    }

    var fn = getSafeProperty(math, this.fn);
    var evalArgs = Object(utils_array["m" /* map */])(this.args, function (arg) {
      return arg._compile(math, argNames);
    });

    if (evalArgs.length === 1) {
      var evalArg0 = evalArgs[0];
      return function evalOperatorNode(scope, args, context) {
        return fn(evalArg0(scope, args, context));
      };
    } else if (evalArgs.length === 2) {
      var _evalArg = evalArgs[0];
      var evalArg1 = evalArgs[1];
      return function evalOperatorNode(scope, args, context) {
        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));
      };
    } else {
      return function evalOperatorNode(scope, args, context) {
        return fn.apply(null, Object(utils_array["m" /* map */])(evalArgs, function (evalArg) {
          return evalArg(scope, args, context);
        }));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  OperatorNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };
  /**
   * Create a new OperatorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */


  OperatorNode.prototype.map = function (callback) {
    var args = [];

    for (var i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }

    return new OperatorNode(this.op, this.fn, args, this.implicit);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {OperatorNode}
   */


  OperatorNode.prototype.clone = function () {
    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
  };
  /**
   * Check whether this is an unary OperatorNode:
   * has exactly one argument, like `-a`.
   * @return {boolean} Returns true when an unary operator node, false otherwise.
   */


  OperatorNode.prototype.isUnary = function () {
    return this.args.length === 1;
  };
  /**
   * Check whether this is a binary OperatorNode:
   * has exactly two arguments, like `a + b`.
   * @return {boolean} Returns true when a binary operator node, false otherwise.
   */


  OperatorNode.prototype.isBinary = function () {
    return this.args.length === 2;
  };
  /**
   * Calculate which parentheses are necessary. Gets an OperatorNode
   * (which is the root of the tree) and an Array of Nodes
   * (this.args) and returns an array where 'true' means that an argument
   * has to be enclosed in parentheses whereas 'false' means the opposite.
   *
   * @param {OperatorNode} root
   * @param {string} parenthesis
   * @param {Node[]} args
   * @param {boolean} latex
   * @return {boolean[]}
   * @private
   */


  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
    // precedence of the root OperatorNode
    var precedence = getPrecedence(root, parenthesis);
    var associativity = getAssociativity(root, parenthesis);

    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {
      return args.map(function (arg) {
        switch (arg.getContent().type) {
          // Nodes that don't need extra parentheses
          case 'ArrayNode':
          case 'ConstantNode':
          case 'SymbolNode':
          case 'ParenthesisNode':
            return false;

          default:
            return true;
        }
      });
    }

    var result;

    switch (args.length) {
      case 0:
        result = [];
        break;

      case 1:
        // unary operators
        {
          // precedence of the operand
          var operandPrecedence = getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed

          if (latex && operandPrecedence !== null) {
            var operandIdentifier;
            var rootIdentifier;

            if (parenthesis === 'keep') {
              operandIdentifier = args[0].getIdentifier();
              rootIdentifier = root.getIdentifier();
            } else {
              // Ignore Parenthesis Nodes when not in 'keep' mode
              operandIdentifier = args[0].getContent().getIdentifier();
              rootIdentifier = root.getContent().getIdentifier();
            }

            if (operators_properties[precedence][rootIdentifier].latexLeftParens === false) {
              result = [false];
              break;
            }

            if (operators_properties[operandPrecedence][operandIdentifier].latexParens === false) {
              result = [false];
              break;
            }
          }

          if (operandPrecedence === null) {
            // if the operand has no defined precedence, no parens are needed
            result = [false];
            break;
          }

          if (operandPrecedence <= precedence) {
            // if the operands precedence is lower, parens are needed
            result = [true];
            break;
          } // otherwise, no parens needed


          result = [false];
        }
        break;

      case 2:
        // binary operators
        {
          var lhsParens; // left hand side needs parenthesis?
          // precedence of the left hand side

          var lhsPrecedence = getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side

          var assocWithLhs = isAssociativeWith(root, args[0], parenthesis);

          if (lhsPrecedence === null) {
            // if the left hand side has no defined precedence, no parens are needed
            // FunctionNode for example
            lhsParens = false;
          } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
            // In case of equal precedence, if the root node is left associative
            // parens are **never** necessary for the left hand side.
            // If it is right associative however, parens are necessary
            // if the root node isn't associative with the left hand side
            lhsParens = true;
          } else if (lhsPrecedence < precedence) {
            lhsParens = true;
          } else {
            lhsParens = false;
          }

          var rhsParens; // right hand side needs parenthesis?
          // precedence of the right hand side

          var rhsPrecedence = getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?

          var assocWithRhs = isAssociativeWith(root, args[1], parenthesis);

          if (rhsPrecedence === null) {
            // if the right hand side has no defined precedence, no parens are needed
            // FunctionNode for example
            rhsParens = false;
          } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
            // In case of equal precedence, if the root node is right associative
            // parens are **never** necessary for the right hand side.
            // If it is left associative however, parens are necessary
            // if the root node isn't associative with the right hand side
            rhsParens = true;
          } else if (rhsPrecedence < precedence) {
            rhsParens = true;
          } else {
            rhsParens = false;
          } // handle special cases for LaTeX, where some of the parentheses aren't needed


          if (latex) {
            var _rootIdentifier;

            var lhsIdentifier;
            var rhsIdentifier;

            if (parenthesis === 'keep') {
              _rootIdentifier = root.getIdentifier();
              lhsIdentifier = root.args[0].getIdentifier();
              rhsIdentifier = root.args[1].getIdentifier();
            } else {
              // Ignore ParenthesisNodes when not in 'keep' mode
              _rootIdentifier = root.getContent().getIdentifier();
              lhsIdentifier = root.args[0].getContent().getIdentifier();
              rhsIdentifier = root.args[1].getContent().getIdentifier();
            }

            if (lhsPrecedence !== null) {
              if (operators_properties[precedence][_rootIdentifier].latexLeftParens === false) {
                lhsParens = false;
              }

              if (operators_properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
                lhsParens = false;
              }
            }

            if (rhsPrecedence !== null) {
              if (operators_properties[precedence][_rootIdentifier].latexRightParens === false) {
                rhsParens = false;
              }

              if (operators_properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
                rhsParens = false;
              }
            }
          }

          result = [lhsParens, rhsParens];
        }
        break;

      default:
        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {
          result = args.map(function (arg) {
            var argPrecedence = getPrecedence(arg, parenthesis);
            var assocWithArg = isAssociativeWith(root, arg, parenthesis);
            var argAssociativity = getAssociativity(arg, parenthesis);

            if (argPrecedence === null) {
              // if the argument has no defined precedence, no parens are needed
              return false;
            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
              return true;
            } else if (argPrecedence < precedence) {
              return true;
            }

            return false;
          });
        }

        break;
    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
    // printed.


    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {
      result = args.map(function (arg, index) {
        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';

        if (result[index] || isParenthesisNode) {
          // put in parenthesis?
          return true;
        }

        return false;
      });
    }

    return result;
  }
  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

    if (args.length === 1) {
      // unary operators
      var assoc = getAssociativity(this, parenthesis);
      var operand = args[0].toString(options);

      if (parens[0]) {
        operand = '(' + operand + ')';
      } // for example for "not", we want a space between operand and argument


      var opIsNamed = /[a-zA-Z]+/.test(this.op);

      if (assoc === 'right') {
        // prefix operator
        return this.op + (opIsNamed ? ' ' : '') + operand;
      } else if (assoc === 'left') {
        // postfix
        return operand + (opIsNamed ? ' ' : '') + this.op;
      } // fall back to postfix


      return operand + this.op;
    } else if (args.length === 2) {
      var lhs = args[0].toString(options); // left hand side

      var rhs = args[1].toString(options); // right hand side

      if (parens[0]) {
        // left hand side in parenthesis?
        lhs = '(' + lhs + ')';
      }

      if (parens[1]) {
        // right hand side in parenthesis?
        rhs = '(' + rhs + ')';
      }

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return lhs + ' ' + rhs;
      }

      return lhs + ' ' + this.op + ' ' + rhs;
    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
      var stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toString(options);

        if (parens[index]) {
          // put in parenthesis?
          arg = '(' + arg + ')';
        }

        return arg;
      });

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return stringifiedArgs.join(' ');
      }

      return stringifiedArgs.join(' ' + this.op + ' ');
    } else {
      // fallback to formatting as a function call
      return this.fn + '(' + this.args.join(', ') + ')';
    }
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  OperatorNode.prototype.toJSON = function () {
    return {
      mathjs: 'OperatorNode',
      op: this.op,
      fn: this.fn,
      args: this.args,
      implicit: this.implicit
    };
  };
  /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "OperatorNode", "op": "+", "fn": "add", "args": [...], "implicit": false}`,
   *                       where mathjs is optional
   * @returns {OperatorNode}
   */


  OperatorNode.fromJSON = function (json) {
    return new OperatorNode(json.op, json.fn, json.args, json.implicit);
  };
  /**
   * Get HTML representation.
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

    if (args.length === 1) {
      // unary operators
      var assoc = getAssociativity(this, parenthesis);
      var operand = args[0].toHTML(options);

      if (parens[0]) {
        operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (assoc === 'right') {
        // prefix operator
        return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + Object(utils_string["c" /* escape */])(this.op) + '</span>' + operand;
      } else {
        // postfix when assoc === 'left' or undefined
        return operand + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + Object(utils_string["c" /* escape */])(this.op) + '</span>';
      }
    } else if (args.length === 2) {
      // binary operatoes
      var lhs = args[0].toHTML(options); // left hand side

      var rhs = args[1].toHTML(options); // right hand side

      if (parens[0]) {
        // left hand side in parenthesis?
        lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (parens[1]) {
        // right hand side in parenthesis?
        rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
      }

      return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + Object(utils_string["c" /* escape */])(this.op) + '</span>' + rhs;
    } else {
      var stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toHTML(options);

        if (parens[index]) {
          // put in parenthesis?
          arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return arg;
      });

      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
          return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
        }

        return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + Object(utils_string["c" /* escape */])(this.op) + '</span>');
      } else {
        // fallback to formatting as a function call
        return '<span class="math-function">' + Object(utils_string["c" /* escape */])(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
      }
    }
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
    var op = latexOperators[this.fn];
    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op

    if (args.length === 1) {
      // unary operators
      var assoc = getAssociativity(this, parenthesis);
      var operand = args[0].toTex(options);

      if (parens[0]) {
        operand = "\\left(".concat(operand, "\\right)");
      }

      if (assoc === 'right') {
        // prefix operator
        return op + operand;
      } else if (assoc === 'left') {
        // postfix operator
        return operand + op;
      } // fall back to postfix


      return operand + op;
    } else if (args.length === 2) {
      // binary operators
      var lhs = args[0]; // left hand side

      var lhsTex = lhs.toTex(options);

      if (parens[0]) {
        lhsTex = "\\left(".concat(lhsTex, "\\right)");
      }

      var rhs = args[1]; // right hand side

      var rhsTex = rhs.toTex(options);

      if (parens[1]) {
        rhsTex = "\\left(".concat(rhsTex, "\\right)");
      } // handle some exceptions (due to the way LaTeX works)


      var lhsIdentifier;

      if (parenthesis === 'keep') {
        lhsIdentifier = lhs.getIdentifier();
      } else {
        // Ignore ParenthesisNodes if in 'keep' mode
        lhsIdentifier = lhs.getContent().getIdentifier();
      }

      switch (this.getIdentifier()) {
        case 'OperatorNode:divide':
          // op contains '\\frac' at this point
          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';

        case 'OperatorNode:pow':
          lhsTex = '{' + lhsTex + '}';
          rhsTex = '{' + rhsTex + '}';

          switch (lhsIdentifier) {
            case 'ConditionalNode': //

            case 'OperatorNode:divide':
              lhsTex = "\\left(".concat(lhsTex, "\\right)");
          }

          break;

        case 'OperatorNode:multiply':
          if (this.implicit && implicit === 'hide') {
            return lhsTex + '~' + rhsTex;
          }

      }

      return lhsTex + op + rhsTex;
    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
      var texifiedArgs = args.map(function (arg, index) {
        arg = arg.toTex(options);

        if (parens[index]) {
          arg = "\\left(".concat(arg, "\\right)");
        }

        return arg;
      });

      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {
        return texifiedArgs.join('~');
      }

      return texifiedArgs.join(op);
    } else {
      // fall back to formatting as a function call
      // as this is a fallback, it doesn't use
      // fancy function names
      return '\\mathrm{' + this.fn + '}\\left(' + args.map(function (arg) {
        return arg.toTex(options);
      }).join(',') + '\\right)';
    }
  };
  /**
   * Get identifier.
   * @return {string}
   */


  OperatorNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.fn;
  };

  return OperatorNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/ParenthesisNode.js


var ParenthesisNode_name = 'ParenthesisNode';
var ParenthesisNode_dependencies = ['Node'];
var createParenthesisNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(ParenthesisNode_name, ParenthesisNode_dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor ParenthesisNode
   * @extends {Node}
   * A parenthesis node describes manual parenthesis from the user input
   * @param {Node} content
   * @extends {Node}
   */
  function ParenthesisNode(content) {
    if (!(this instanceof ParenthesisNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (!Object(is["w" /* isNode */])(content)) {
      throw new TypeError('Node expected for parameter "content"');
    }

    this.content = content;
  }

  ParenthesisNode.prototype = new Node();
  ParenthesisNode.prototype.type = 'ParenthesisNode';
  ParenthesisNode.prototype.isParenthesisNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ParenthesisNode.prototype._compile = function (math, argNames) {
    return this.content._compile(math, argNames);
  };
  /**
   * Get the content of the current Node.
   * @return {Node} content
   * @override
   **/


  ParenthesisNode.prototype.getContent = function () {
    return this.content.getContent();
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ParenthesisNode.prototype.forEach = function (callback) {
    callback(this.content, 'content', this);
  };
  /**
   * Create a new ParenthesisNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ParenthesisNode} Returns a clone of the node
   */


  ParenthesisNode.prototype.map = function (callback) {
    var content = callback(this.content, 'content', this);
    return new ParenthesisNode(content);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ParenthesisNode}
   */


  ParenthesisNode.prototype.clone = function () {
    return new ParenthesisNode(this.content);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype._toString = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return '(' + this.content.toString(options) + ')';
    }

    return this.content.toString(options);
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ParenthesisNode.prototype.toJSON = function () {
    return {
      mathjs: 'ParenthesisNode',
      content: this.content
    };
  };
  /**
   * Instantiate an ParenthesisNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
   *                       where mathjs is optional
   * @returns {ParenthesisNode}
   */


  ParenthesisNode.fromJSON = function (json) {
    return new ParenthesisNode(json.content);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype.toHTML = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return this.content.toHTML(options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype._toTex = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return "\\left(".concat(this.content.toTex(options), "\\right)");
    }

    return this.content.toTex(options);
  };

  return ParenthesisNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/RangeNode.js



var RangeNode_name = 'RangeNode';
var RangeNode_dependencies = ['Node'];
var createRangeNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(RangeNode_name, RangeNode_dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor RangeNode
   * @extends {Node}
   * create a range
   * @param {Node} start  included lower-bound
   * @param {Node} end    included upper-bound
   * @param {Node} [step] optional step
   */
  function RangeNode(start, end, step) {
    if (!(this instanceof RangeNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate inputs


    if (!Object(is["w" /* isNode */])(start)) throw new TypeError('Node expected');
    if (!Object(is["w" /* isNode */])(end)) throw new TypeError('Node expected');
    if (step && !Object(is["w" /* isNode */])(step)) throw new TypeError('Node expected');
    if (arguments.length > 3) throw new Error('Too many arguments');
    this.start = start; // included lower-bound

    this.end = end; // included upper-bound

    this.step = step || null; // optional step
  }

  RangeNode.prototype = new Node();
  RangeNode.prototype.type = 'RangeNode';
  RangeNode.prototype.isRangeNode = true;
  /**
   * Check whether the RangeNode needs the `end` symbol to be defined.
   * This end is the size of the Matrix in current dimension.
   * @return {boolean}
   */

  RangeNode.prototype.needsEnd = function () {
    // find all `end` symbols in this RangeNode
    var endSymbols = this.filter(function (node) {
      return Object(is["J" /* isSymbolNode */])(node) && node.name === 'end';
    });
    return endSymbols.length > 0;
  };
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */


  RangeNode.prototype._compile = function (math, argNames) {
    var range = math.range;

    var evalStart = this.start._compile(math, argNames);

    var evalEnd = this.end._compile(math, argNames);

    if (this.step) {
      var evalStep = this.step._compile(math, argNames);

      return function evalRangeNode(scope, args, context) {
        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
      };
    } else {
      return function evalRangeNode(scope, args, context) {
        return range(evalStart(scope, args, context), evalEnd(scope, args, context));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  RangeNode.prototype.forEach = function (callback) {
    callback(this.start, 'start', this);
    callback(this.end, 'end', this);

    if (this.step) {
      callback(this.step, 'step', this);
    }
  };
  /**
   * Create a new RangeNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RangeNode} Returns a transformed copy of the node
   */


  RangeNode.prototype.map = function (callback) {
    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {RangeNode}
   */


  RangeNode.prototype.clone = function () {
    return new RangeNode(this.start, this.end, this.step && this.step);
  };
  /**
   * Calculate the necessary parentheses
   * @param {Node} node
   * @param {string} parenthesis
   * @return {Object} parentheses
   * @private
   */


  function calculateNecessaryParentheses(node, parenthesis) {
    var precedence = getPrecedence(node, parenthesis);
    var parens = {};
    var startPrecedence = getPrecedence(node.start, parenthesis);
    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';

    if (node.step) {
      var stepPrecedence = getPrecedence(node.step, parenthesis);
      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
    }

    var endPrecedence = getPrecedence(node.end, parenthesis);
    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';
    return parens;
  }
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  RangeNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

    var str;
    var start = this.start.toString(options);

    if (parens.start) {
      start = '(' + start + ')';
    }

    str = start;

    if (this.step) {
      var step = this.step.toString(options);

      if (parens.step) {
        step = '(' + step + ')';
      }

      str += ':' + step;
    }

    var end = this.end.toString(options);

    if (parens.end) {
      end = '(' + end + ')';
    }

    str += ':' + end;
    return str;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  RangeNode.prototype.toJSON = function () {
    return {
      mathjs: 'RangeNode',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate an RangeNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
   *                       where mathjs is optional
   * @returns {RangeNode}
   */


  RangeNode.fromJSON = function (json) {
    return new RangeNode(json.start, json.end, json.step);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  RangeNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

    var str;
    var start = this.start.toHTML(options);

    if (parens.start) {
      start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    str = start;

    if (this.step) {
      var step = this.step.toHTML(options);

      if (parens.step) {
        step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      str += '<span class="math-operator math-range-operator">:</span>' + step;
    }

    var end = this.end.toHTML(options);

    if (parens.end) {
      end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    str += '<span class="math-operator math-range-operator">:</span>' + end;
    return str;
  };
  /**
   * Get LaTeX representation
   * @params {Object} options
   * @return {string} str
   */


  RangeNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis);
    var str = this.start.toTex(options);

    if (parens.start) {
      str = "\\left(".concat(str, "\\right)");
    }

    if (this.step) {
      var step = this.step.toTex(options);

      if (parens.step) {
        step = "\\left(".concat(step, "\\right)");
      }

      str += ':' + step;
    }

    var end = this.end.toTex(options);

    if (parens.end) {
      end = "\\left(".concat(end, "\\right)");
    }

    str += ':' + end;
    return str;
  };

  return RangeNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/RelationalNode.js





var RelationalNode_name = 'RelationalNode';
var RelationalNode_dependencies = ['Node'];
var createRelationalNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(RelationalNode_name, RelationalNode_dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * A node representing a chained conditional expression, such as 'x > y > z'
   *
   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters
   * @param {Node[]} params   The parameters that will be compared
   *
   * @constructor RelationalNode
   * @extends {Node}
   */
  function RelationalNode(conditionals, params) {
    if (!(this instanceof RelationalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');
    if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');
    if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');
    this.conditionals = conditionals;
    this.params = params;
  }

  RelationalNode.prototype = new Node();
  RelationalNode.prototype.type = 'RelationalNode';
  RelationalNode.prototype.isRelationalNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  RelationalNode.prototype._compile = function (math, argNames) {
    var self = this;
    var compiled = this.params.map(function (p) {
      return p._compile(math, argNames);
    });
    return function evalRelationalNode(scope, args, context) {
      var evalLhs;
      var evalRhs = compiled[0](scope, args, context);

      for (var i = 0; i < self.conditionals.length; i++) {
        evalLhs = evalRhs;
        evalRhs = compiled[i + 1](scope, args, context);
        var condFn = getSafeProperty(math, self.conditionals[i]);

        if (!condFn(evalLhs, evalRhs)) {
          return false;
        }
      }

      return true;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  RelationalNode.prototype.forEach = function (callback) {
    var _this = this;

    this.params.forEach(function (n, i) {
      return callback(n, 'params[' + i + ']', _this);
    }, this);
  };
  /**
   * Create a new RelationalNode having its childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RelationalNode} Returns a transformed copy of the node
   */


  RelationalNode.prototype.map = function (callback) {
    var _this2 = this;

    return new RelationalNode(this.conditionals.slice(), this.params.map(function (n, i) {
      return _this2._ifNode(callback(n, 'params[' + i + ']', _this2));
    }, this));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {RelationalNode}
   */


  RelationalNode.prototype.clone = function () {
    return new RelationalNode(this.conditionals, this.params);
  };
  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = getPrecedence(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = getPrecedence(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);
    });
    var operatorMap = {
      equal: '==',
      unequal: '!=',
      smaller: '<',
      larger: '>',
      smallerEq: '<=',
      largerEq: '>='
    };
    var ret = paramStrings[0];

    for (var i = 0; i < this.conditionals.length; i++) {
      ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];
    }

    return ret;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  RelationalNode.prototype.toJSON = function () {
    return {
      mathjs: 'RelationalNode',
      conditionals: this.conditionals,
      params: this.params
    };
  };
  /**
   * Instantiate a RelationalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RelationalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {RelationalNode}
   */


  RelationalNode.fromJSON = function (json) {
    return new RelationalNode(json.conditionals, json.params);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = getPrecedence(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = getPrecedence(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + p.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : p.toHTML(options);
    });
    var operatorMap = {
      equal: '==',
      unequal: '!=',
      smaller: '<',
      larger: '>',
      smallerEq: '<=',
      largerEq: '>='
    };
    var ret = paramStrings[0];

    for (var i = 0; i < this.conditionals.length; i++) {
      ret += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + Object(utils_string["c" /* escape */])(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];
    }

    return ret;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = getPrecedence(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = getPrecedence(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\left(' + p.toTex(options) + '\right)' : p.toTex(options);
    });
    var ret = paramStrings[0];

    for (var i = 0; i < this.conditionals.length; i++) {
      ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];
    }

    return ret;
  };

  return RelationalNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/SymbolNode.js




var SymbolNode_name = 'SymbolNode';
var SymbolNode_dependencies = ['math', '?Unit', 'Node'];
var createSymbolNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(SymbolNode_name, SymbolNode_dependencies, function (_ref) {
  var math = _ref.math,
      Unit = _ref.Unit,
      Node = _ref.Node;

  /**
   * Check whether some name is a valueless unit like "inch".
   * @param {string} name
   * @return {boolean}
   */
  function isValuelessUnit(name) {
    return Unit ? Unit.isValuelessUnit(name) : false;
  }
  /**
   * @constructor SymbolNode
   * @extends {Node}
   * A symbol node can hold and resolve a symbol
   * @param {string} name
   * @extends {Node}
   */


  function SymbolNode(name) {
    if (!(this instanceof SymbolNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    this.name = name;
  }

  SymbolNode.prototype = new Node();
  SymbolNode.prototype.type = 'SymbolNode';
  SymbolNode.prototype.isSymbolNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  SymbolNode.prototype._compile = function (math, argNames) {
    var name = this.name;

    if (argNames[name] === true) {
      // this is a FunctionAssignment argument
      // (like an x when inside the expression of a function assignment `f(x) = ...`)
      return function (scope, args, context) {
        return args[name];
      };
    } else if (name in math) {
      return function (scope, args, context) {
        return name in scope ? getSafeProperty(scope, name) : getSafeProperty(math, name);
      };
    } else {
      var isUnit = isValuelessUnit(name);
      return function (scope, args, context) {
        return name in scope ? getSafeProperty(scope, name) : isUnit ? new Unit(null, name) : undef(name);
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  SymbolNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs

  /**
   * Create a new SymbolNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {SymbolNode} Returns a clone of the node
   */
  ;

  SymbolNode.prototype.map = function (callback) {
    return this.clone();
  };
  /**
   * Throws an error 'Undefined symbol {name}'
   * @param {string} name
   */


  function undef(name) {
    throw new Error('Undefined symbol ' + name);
  }
  /**
   * Create a clone of this node, a shallow copy
   * @return {SymbolNode}
   */


  SymbolNode.prototype.clone = function () {
    return new SymbolNode(this.name);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype._toString = function (options) {
    return this.name;
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype.toHTML = function (options) {
    var name = Object(utils_string["c" /* escape */])(this.name);

    if (name === 'true' || name === 'false') {
      return '<span class="math-symbol math-boolean">' + name + '</span>';
    } else if (name === 'i') {
      return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
    } else if (name === 'Infinity') {
      return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
    } else if (name === 'NaN') {
      return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
    } else if (name === 'null') {
      return '<span class="math-symbol math-null-symbol">' + name + '</span>';
    } else if (name === 'undefined') {
      return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
    }

    return '<span class="math-symbol">' + name + '</span>';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  SymbolNode.prototype.toJSON = function () {
    return {
      mathjs: 'SymbolNode',
      name: this.name
    };
  };
  /**
   * Instantiate a SymbolNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", name: "x"}`,
   *                       where mathjs is optional
   * @returns {SymbolNode}
   */


  SymbolNode.fromJSON = function (json) {
    return new SymbolNode(json.name);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype._toTex = function (options) {
    var isUnit = false;

    if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {
      isUnit = true;
    }

    var symbol = toSymbol(this.name, isUnit);

    if (symbol[0] === '\\') {
      // no space needed if the symbol starts with '\'
      return symbol;
    } // the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol


    return ' ' + symbol;
  };

  return SymbolNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/node/FunctionNode.js
function FunctionNode_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { FunctionNode_typeof = function _typeof(obj) { return typeof obj; }; } else { FunctionNode_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return FunctionNode_typeof(obj); }

function FunctionNode_extends() { FunctionNode_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return FunctionNode_extends.apply(this, arguments); }








var FunctionNode_name = 'FunctionNode';
var FunctionNode_dependencies = ['math', 'Node', 'SymbolNode'];
var createFunctionNode =
/* #__PURE__ */
Object(factory["a" /* factory */])(FunctionNode_name, FunctionNode_dependencies, function (_ref) {
  var math = _ref.math,
      Node = _ref.Node,
      SymbolNode = _ref.SymbolNode;

  /**
   * @constructor FunctionNode
   * @extends {./Node}
   * invoke a list with arguments on a node
   * @param {./Node | string} fn Node resolving with a function on which to invoke
   *                             the arguments, typically a SymboNode or AccessorNode
   * @param {./Node[]} args
   */
  function FunctionNode(fn, args) {
    if (!(this instanceof FunctionNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (typeof fn === 'string') {
      fn = new SymbolNode(fn);
    } // validate input


    if (!Object(is["w" /* isNode */])(fn)) throw new TypeError('Node expected as parameter "fn"');

    if (!Array.isArray(args) || !args.every(is["w" /* isNode */])) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }

    this.fn = fn;
    this.args = args || []; // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        return this.fn.name || '';
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    }); // TODO: deprecated since v3, remove some day

    var deprecated = function deprecated() {
      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
    };

    Object.defineProperty(this, 'object', {
      get: deprecated,
      set: deprecated
    });
  }

  FunctionNode.prototype = new Node();
  FunctionNode.prototype.type = 'FunctionNode';
  FunctionNode.prototype.isFunctionNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  FunctionNode.prototype._compile = function (math, argNames) {
    if (!(this instanceof FunctionNode)) {
      throw new TypeError('No valid FunctionNode');
    } // compile arguments


    var evalArgs = Object(utils_array["m" /* map */])(this.args, function (arg) {
      return arg._compile(math, argNames);
    });

    if (Object(is["J" /* isSymbolNode */])(this.fn)) {
      // we can statically determine whether the function has an rawArgs property
      var _name = this.fn.name;
      var fn = _name in math ? getSafeProperty(math, _name) : undefined;
      var isRaw = typeof fn === 'function' && fn.rawArgs === true;

      if (isRaw) {
        // pass unevaluated parameters (nodes) to the function
        // "raw" evaluation
        var rawArgs = this.args;
        return function evalFunctionNode(scope, args, context) {
          return (_name in scope ? getSafeProperty(scope, _name) : fn)(rawArgs, math, FunctionNode_extends({}, scope, args));
        };
      } else {
        // "regular" evaluation
        if (evalArgs.length === 1) {
          var evalArg0 = evalArgs[0];
          return function evalFunctionNode(scope, args, context) {
            return (_name in scope ? getSafeProperty(scope, _name) : fn)(evalArg0(scope, args, context));
          };
        } else if (evalArgs.length === 2) {
          var _evalArg = evalArgs[0];
          var evalArg1 = evalArgs[1];
          return function evalFunctionNode(scope, args, context) {
            return (_name in scope ? getSafeProperty(scope, _name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));
          };
        } else {
          return function evalFunctionNode(scope, args, context) {
            return (_name in scope ? getSafeProperty(scope, _name) : fn).apply(null, Object(utils_array["m" /* map */])(evalArgs, function (evalArg) {
              return evalArg(scope, args, context);
            }));
          };
        }
      }
    } else if (Object(is["a" /* isAccessorNode */])(this.fn) && Object(is["u" /* isIndexNode */])(this.fn.index) && this.fn.index.isObjectProperty()) {
      // execute the function with the right context: the object of the AccessorNode
      var evalObject = this.fn.object._compile(math, argNames);

      var prop = this.fn.index.getObjectProperty();
      var _rawArgs = this.args;
      return function evalFunctionNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        validateSafeMethod(object, prop);
        var isRaw = object[prop] && object[prop].rawArgs;
        return isRaw ? object[prop](_rawArgs, math, FunctionNode_extends({}, scope, args)) // "raw" evaluation
        : object[prop].apply(object, Object(utils_array["m" /* map */])(evalArgs, function (evalArg) {
          // "regular" evaluation
          return evalArg(scope, args, context);
        }));
      };
    } else {
      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
      // we have to dynamically determine whether the function has a rawArgs property
      var evalFn = this.fn._compile(math, argNames);

      var _rawArgs2 = this.args;
      return function evalFunctionNode(scope, args, context) {
        var fn = evalFn(scope, args, context);
        var isRaw = fn && fn.rawArgs;
        return isRaw ? fn(_rawArgs2, math, FunctionNode_extends({}, scope, args)) // "raw" evaluation
        : fn.apply(fn, Object(utils_array["m" /* map */])(evalArgs, function (evalArg) {
          // "regular" evaluation
          return evalArg(scope, args, context);
        }));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  FunctionNode.prototype.forEach = function (callback) {
    callback(this.fn, 'fn', this);

    for (var i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };
  /**
   * Create a new FunctionNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionNode} Returns a transformed copy of the node
   */


  FunctionNode.prototype.map = function (callback) {
    var fn = this._ifNode(callback(this.fn, 'fn', this));

    var args = [];

    for (var i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }

    return new FunctionNode(fn, args);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionNode}
   */


  FunctionNode.prototype.clone = function () {
    return new FunctionNode(this.fn, this.args.slice(0));
  }; // backup Node's toString function
  // @private


  var nodeToString = FunctionNode.prototype.toString;
  /**
   * Get string representation. (wrapper function)
   * This overrides parts of Node's toString function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toString
   * function.
   *
   * @param {Object} options
   * @return {string} str
   * @override
   */

  FunctionNode.prototype.toString = function (options) {
    var customString;
    var name = this.fn.toString(options);

    if (options && FunctionNode_typeof(options.handler) === 'object' && Object(utils_object["f" /* hasOwnProperty */])(options.handler, name)) {
      // callback is a map of callback functions
      customString = options.handler[name](this, options);
    }

    if (typeof customString !== 'undefined') {
      return customString;
    } // fall back to Node's toString


    return nodeToString.call(this, options);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype._toString = function (options) {
    var args = this.args.map(function (arg) {
      return arg.toString(options);
    });
    var fn = Object(is["q" /* isFunctionAssignmentNode */])(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like "add(2, 4.2)"

    return fn + '(' + args.join(', ') + ')';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  FunctionNode.prototype.toJSON = function () {
    return {
      mathjs: 'FunctionNode',
      fn: this.fn,
      args: this.args
    };
  };
  /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionNode}
   */


  FunctionNode.fromJSON = function (json) {
    return new FunctionNode(json.fn, json.args);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype.toHTML = function (options) {
    var args = this.args.map(function (arg) {
      return arg.toHTML(options);
    }); // format the arguments like "add(2, 4.2)"

    return '<span class="math-function">' + Object(utils_string["c" /* escape */])(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
  };
  /*
   * Expand a LaTeX template
   *
   * @param {string} template
   * @param {Node} node
   * @param {Object} options
   * @private
   **/


  function expandTemplate(template, node, options) {
    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$
    // while submatching identifier and 2 (in the second case)

    var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');
    var inputPos = 0; // position in the input string

    var match;

    while ((match = regex.exec(template)) !== null) {
      // go through all matches
      // add everything in front of the match to the LaTeX string
      latex += template.substring(inputPos, match.index);
      inputPos = match.index;

      if (match[0] === '$$') {
        // escaped dollar sign
        latex += '$';
        inputPos++;
      } else {
        // template parameter
        inputPos += match[0].length;
        var property = node[match[1]];

        if (!property) {
          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
        }

        if (match[2] === undefined) {
          // no square brackets
          switch (FunctionNode_typeof(property)) {
            case 'string':
              latex += property;
              break;

            case 'object':
              if (Object(is["w" /* isNode */])(property)) {
                latex += property.toTex(options);
              } else if (Array.isArray(property)) {
                // make array of Nodes into comma separated list
                latex += property.map(function (arg, index) {
                  if (Object(is["w" /* isNode */])(arg)) {
                    return arg.toTex(options);
                  }

                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                }).join(',');
              } else {
                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
              }

              break;

            default:
              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
          }
        } else {
          // with square brackets
          if (Object(is["w" /* isNode */])(property[match[2]] && property[match[2]])) {
            latex += property[match[2]].toTex(options);
          } else {
            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
          }
        }
      }
    }

    latex += template.slice(inputPos); // append rest of the template

    return latex;
  } // backup Node's toTex function
  // @private


  var nodeToTex = FunctionNode.prototype.toTex;
  /**
   * Get LaTeX representation. (wrapper function)
   * This overrides parts of Node's toTex function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toTex
   * function.
   *
   * @param {Object} options
   * @return {string}
   */

  FunctionNode.prototype.toTex = function (options) {
    var customTex;

    if (options && FunctionNode_typeof(options.handler) === 'object' && Object(utils_object["f" /* hasOwnProperty */])(options.handler, this.name)) {
      // callback is a map of callback functions
      customTex = options.handler[this.name](this, options);
    }

    if (typeof customTex !== 'undefined') {
      return customTex;
    } // fall back to Node's toTex


    return nodeToTex.call(this, options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype._toTex = function (options) {
    var args = this.args.map(function (arg) {
      // get LaTeX of the arguments
      return arg.toTex(options);
    });
    var latexConverter;

    if (latexFunctions[this.name]) {
      latexConverter = latexFunctions[this.name];
    } // toTex property on the function itself


    if (math[this.name] && (typeof math[this.name].toTex === 'function' || FunctionNode_typeof(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {
      // .toTex is a callback function
      latexConverter = math[this.name].toTex;
    }

    var customToTex;

    switch (FunctionNode_typeof(latexConverter)) {
      case 'function':
        // a callback function
        customToTex = latexConverter(this, options);
        break;

      case 'string':
        // a template string
        customToTex = expandTemplate(latexConverter, this, options);
        break;

      case 'object':
        // an object with different "converters" for different numbers of arguments
        switch (FunctionNode_typeof(latexConverter[args.length])) {
          case 'function':
            customToTex = latexConverter[args.length](this, options);
            break;

          case 'string':
            customToTex = expandTemplate(latexConverter[args.length], this, options);
            break;
        }

    }

    if (typeof customToTex !== 'undefined') {
      return customToTex;
    }

    return expandTemplate(defaultTemplate, this, options);
  };
  /**
   * Get identifier.
   * @return {string}
   */


  FunctionNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.name;
  };

  return FunctionNode;
}, {
  isClass: true,
  isNode: true
});
// CONCATENATED MODULE: ./src/expression/parse.js
function parse_extends() { parse_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return parse_extends.apply(this, arguments); }





var parse_name = 'parse';
var parse_dependencies = ['typed', 'numeric', 'config', 'AccessorNode', 'ArrayNode', 'AssignmentNode', 'BlockNode', 'ConditionalNode', 'ConstantNode', 'FunctionAssignmentNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'RangeNode', 'RelationalNode', 'SymbolNode'];
var createParse =
/* #__PURE__ */
Object(factory["a" /* factory */])(parse_name, parse_dependencies, function (_ref) {
  var typed = _ref.typed,
      numeric = _ref.numeric,
      config = _ref.config,
      AccessorNode = _ref.AccessorNode,
      ArrayNode = _ref.ArrayNode,
      AssignmentNode = _ref.AssignmentNode,
      BlockNode = _ref.BlockNode,
      ConditionalNode = _ref.ConditionalNode,
      ConstantNode = _ref.ConstantNode,
      FunctionAssignmentNode = _ref.FunctionAssignmentNode,
      FunctionNode = _ref.FunctionNode,
      IndexNode = _ref.IndexNode,
      ObjectNode = _ref.ObjectNode,
      OperatorNode = _ref.OperatorNode,
      ParenthesisNode = _ref.ParenthesisNode,
      RangeNode = _ref.RangeNode,
      RelationalNode = _ref.RelationalNode,
      SymbolNode = _ref.SymbolNode;

  /**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.evaluate().
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.parse(expr)
   *     math.parse(expr, options)
   *     math.parse([expr1, expr2, expr3, ...])
   *     math.parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     const node1 = math.parse('sqrt(3^2 + 4^2)')
   *     node1.compile().evaluate() // 5
   *
   *     let scope = {a:3, b:4}
   *     const node2 = math.parse('a * b') // 12
   *     const code2 = node2.compile()
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].compile().evaluate() // 12
   *
   * See also:
   *
   *     evaluate, compile
   *
   * @param {string | string[] | Matrix} expr          Expression to be parsed
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */
  var parse = typed(parse_name, {
    string: function string(expression) {
      return parseStart(expression, {});
    },
    'Array | Matrix': function ArrayMatrix(expressions) {
      return parseMultiple(expressions, {});
    },
    'string, Object': function stringObject(expression, options) {
      var extraNodes = options.nodes !== undefined ? options.nodes : {};
      return parseStart(expression, extraNodes);
    },
    'Array | Matrix, Object': parseMultiple
  });

  function parseMultiple(expressions) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var extraNodes = options.nodes !== undefined ? options.nodes : {}; // parse an array or matrix with expressions

    return deepMap(expressions, function (elem) {
      if (typeof elem !== 'string') throw new TypeError('String expected');
      return parseStart(elem, extraNodes);
    });
  } // token types enumeration


  var TOKENTYPE = {
    NULL: 0,
    DELIMITER: 1,
    NUMBER: 2,
    SYMBOL: 3,
    UNKNOWN: 4
  }; // map with all delimiters

  var DELIMITERS = {
    ',': true,
    '(': true,
    ')': true,
    '[': true,
    ']': true,
    '{': true,
    '}': true,
    '"': true,
    '\'': true,
    ';': true,
    '+': true,
    '-': true,
    '*': true,
    '.*': true,
    '/': true,
    './': true,
    '%': true,
    '^': true,
    '.^': true,
    '~': true,
    '!': true,
    '&': true,
    '|': true,
    '^|': true,
    '=': true,
    ':': true,
    '?': true,
    '==': true,
    '!=': true,
    '<': true,
    '>': true,
    '<=': true,
    '>=': true,
    '<<': true,
    '>>': true,
    '>>>': true
  }; // map with all named delimiters

  var NAMED_DELIMITERS = {
    mod: true,
    to: true,
    "in": true,
    and: true,
    xor: true,
    or: true,
    not: true
  };
  var CONSTANTS = {
    "true": true,
    "false": false,
    "null": null,
    undefined: undefined
  };
  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];

  function initialState() {
    return {
      extraNodes: {},
      // current extra nodes, must be careful not to mutate
      expression: '',
      // current expression
      comment: '',
      // last parsed comment
      index: 0,
      // current index in expr
      token: '',
      // current token
      tokenType: TOKENTYPE.NULL,
      // type of the token
      nestingLevel: 0,
      // level of nesting inside parameters, used to ignore newline characters
      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here

    };
  }
  /**
   * View upto `length` characters of the expression starting at the current character.
   *
   * @param {Object} state
   * @param {number} [length=1] Number of characters to view
   * @returns {string}
   * @private
   */


  function currentString(state, length) {
    return state.expression.substr(state.index, length);
  }
  /**
   * View the current character. Returns '' if end of expression is reached.
   *
   * @param {Object} state
   * @returns {string}
   * @private
   */


  function currentCharacter(state) {
    return currentString(state, 1);
  }
  /**
   * Get the next character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */


  function next(state) {
    state.index++;
  }
  /**
   * Preview the previous character from the expression.
   * @return {string} cNext
   * @private
   */


  function prevCharacter(state) {
    return state.expression.charAt(state.index - 1);
  }
  /**
   * Preview the next character from the expression.
   * @return {string} cNext
   * @private
   */


  function nextCharacter(state) {
    return state.expression.charAt(state.index + 1);
  }
  /**
   * Get next token in the current string expr.
   * The token and token type are available as token and tokenType
   * @private
   */


  function getToken(state) {
    state.tokenType = TOKENTYPE.NULL;
    state.token = '';
    state.comment = ''; // skip over whitespaces
    // space, tab, and newline when inside parameters

    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {
      next(state);
    } // skip comment


    if (currentCharacter(state) === '#') {
      while (currentCharacter(state) !== '\n' && currentCharacter(state) !== '') {
        state.comment += currentCharacter(state);
        next(state);
      }
    } // check for end of expression


    if (currentCharacter(state) === '') {
      // token is still empty
      state.tokenType = TOKENTYPE.DELIMITER;
      return;
    } // check for new line character


    if (currentCharacter(state) === '\n' && !state.nestingLevel) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = currentCharacter(state);
      next(state);
      return;
    }

    var c1 = currentCharacter(state);
    var c2 = currentString(state, 2);
    var c3 = currentString(state, 3);

    if (c3.length === 3 && DELIMITERS[c3]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c3;
      next(state);
      next(state);
      next(state);
      return;
    } // check for delimiters consisting of 2 characters


    if (c2.length === 2 && DELIMITERS[c2]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c2;
      next(state);
      next(state);
      return;
    } // check for delimiters consisting of 1 character


    if (DELIMITERS[c1]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c1;
      next(state);
      return;
    } // check for a number


    if (parse.isDigitDot(c1)) {
      state.tokenType = TOKENTYPE.NUMBER; // get number, can have a single dot

      if (currentCharacter(state) === '.') {
        state.token += currentCharacter(state);
        next(state);

        if (!parse.isDigit(currentCharacter(state))) {
          // this is no number, it is just a dot (can be dot notation)
          state.tokenType = TOKENTYPE.DELIMITER;
        }
      } else {
        while (parse.isDigit(currentCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }

        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }
      }

      while (parse.isDigit(currentCharacter(state))) {
        state.token += currentCharacter(state);
        next(state);
      } // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"


      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
          state.token += currentCharacter(state);
          next(state);

          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
            state.token += currentCharacter(state);
            next(state);
          } // Scientific notation MUST be followed by an exponent


          if (!parse.isDigit(currentCharacter(state))) {
            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
          }

          while (parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }

          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
          }
        } else if (nextCharacter(state) === '.') {
          next(state);
          throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
        }
      }

      return;
    } // check for variables, functions, named operators


    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {
        state.token += currentCharacter(state);
        next(state);
      }

      if (Object(utils_object["f" /* hasOwnProperty */])(NAMED_DELIMITERS, state.token)) {
        state.tokenType = TOKENTYPE.DELIMITER;
      } else {
        state.tokenType = TOKENTYPE.SYMBOL;
      }

      return;
    } // something unknown is found, wrong characters -> a syntax error


    state.tokenType = TOKENTYPE.UNKNOWN;

    while (currentCharacter(state) !== '') {
      state.token += currentCharacter(state);
      next(state);
    }

    throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
  }
  /**
   * Get next token and skip newline tokens
   */


  function getTokenSkipNewline(state) {
    do {
      getToken(state);
    } while (state.token === '\n'); // eslint-disable-line no-unmodified-loop-condition

  }
  /**
   * Open parameters.
   * New line characters will be ignored until closeParams(state) is called
   */


  function openParams(state) {
    state.nestingLevel++;
  }
  /**
   * Close parameters.
   * New line characters will no longer be ignored
   */


  function closeParams(state) {
    state.nestingLevel--;
  }
  /**
   * Checks whether the current character `c` is a valid alpha character:
   *
   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
   * - An underscore                        Ascii: _
   * - A dollar sign                        Ascii: $
   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
   * - A greek letter                       Unicode: \u0370 - \u03FF
   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
   *
   * The previous and next characters are needed to determine whether
   * this character is part of a unicode surrogate pair.
   *
   * @param {string} c      Current character in the expression
   * @param {string} cPrev  Previous character
   * @param {string} cNext  Next character
   * @return {boolean}
   */


  parse.isAlpha = function isAlpha(c, cPrev, cNext) {
    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
  };
  /**
   * Test whether a character is a valid latin, greek, or letter-like character
   * @param {string} c
   * @return {boolean}
   */


  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
  };
  /**
   * Test whether two given 16 bit characters form a surrogate pair of a
   * unicode math symbol.
   *
   * https://unicode-table.com/en/
   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
   *
   * Note: In ES6 will be unicode aware:
   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes
   * https://mathiasbynens.be/notes/es6-unicode-regex
   *
   * @param {string} high
   * @param {string} low
   * @return {boolean}
   */


  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
    return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
  };
  /**
   * Check whether given character c is a white space character: space, tab, or enter
   * @param {string} c
   * @param {number} nestingLevel
   * @return {boolean}
   */


  parse.isWhitespace = function isWhitespace(c, nestingLevel) {
    // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
    return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
  };
  /**
   * Test whether the character c is a decimal mark (dot).
   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
   * @param {string} c
   * @param {string} cNext
   * @return {boolean}
   */


  parse.isDecimalMark = function isDecimalMark(c, cNext) {
    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
  };
  /**
   * checks if the given char c is a digit or dot
   * @param {string} c   a string with one character
   * @return {boolean}
   */


  parse.isDigitDot = function isDigitDot(c) {
    return c >= '0' && c <= '9' || c === '.';
  };
  /**
   * checks if the given char c is a digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */


  parse.isDigit = function isDigit(c) {
    return c >= '0' && c <= '9';
  };
  /**
   * Start of the parse levels below, in order of precedence
   * @return {Node} node
   * @private
   */


  function parseStart(expression, extraNodes) {
    var state = initialState();

    parse_extends(state, {
      expression: expression,
      extraNodes: extraNodes
    });

    getToken(state);
    var node = parseBlock(state); // check for garbage at the end of the expression
    // an expression ends with a empty character '' and tokenType DELIMITER

    if (state.token !== '') {
      if (state.tokenType === TOKENTYPE.DELIMITER) {
        // user entered a not existing operator like "//"
        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
        throw createError(state, 'Unexpected operator ' + state.token);
      } else {
        throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
      }
    }

    return node;
  }
  /**
   * Parse a block with expressions. Expressions can be separated by a newline
   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
   * of the preceding line is returned.
   * @return {Node} node
   * @private
   */


  function parseBlock(state) {
    var node;
    var blocks = [];
    var visible;

    if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
      node = parseAssignment(state);
      node.comment = state.comment;
    } // TODO: simplify this loop


    while (state.token === '\n' || state.token === ';') {
      // eslint-disable-line no-unmodified-loop-condition
      if (blocks.length === 0 && node) {
        visible = state.token !== ';';
        blocks.push({
          node: node,
          visible: visible
        });
      }

      getToken(state);

      if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
        node = parseAssignment(state);
        node.comment = state.comment;
        visible = state.token !== ';';
        blocks.push({
          node: node,
          visible: visible
        });
      }
    }

    if (blocks.length > 0) {
      return new BlockNode(blocks);
    } else {
      if (!node) {
        node = new ConstantNode(undefined);
        node.comment = state.comment;
      }

      return node;
    }
  }
  /**
   * Assignment of a function or variable,
   * - can be a variable like 'a=2.3'
   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
   * - defining a function like 'f(x) = x^2'
   * @return {Node} node
   * @private
   */


  function parseAssignment(state) {
    var name, args, value, valid;
    var node = parseConditional(state);

    if (state.token === '=') {
      if (Object(is["J" /* isSymbolNode */])(node)) {
        // parse a variable assignment like 'a = 2/3'
        name = node.name;
        getTokenSkipNewline(state);
        value = parseAssignment(state);
        return new AssignmentNode(new SymbolNode(name), value);
      } else if (Object(is["a" /* isAccessorNode */])(node)) {
        // parse a matrix subset assignment like 'A[1,2] = 4'
        getTokenSkipNewline(state);
        value = parseAssignment(state);
        return new AssignmentNode(node.object, node.index, value);
      } else if (Object(is["r" /* isFunctionNode */])(node) && Object(is["J" /* isSymbolNode */])(node.fn)) {
        // parse function assignment like 'f(x) = x^2'
        valid = true;
        args = [];
        name = node.name;
        node.args.forEach(function (arg, index) {
          if (Object(is["J" /* isSymbolNode */])(arg)) {
            args[index] = arg.name;
          } else {
            valid = false;
          }
        });

        if (valid) {
          getTokenSkipNewline(state);
          value = parseAssignment(state);
          return new FunctionAssignmentNode(name, args, value);
        }
      }

      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
    }

    return node;
  }
  /**
   * conditional operation
   *
   *     condition ? truePart : falsePart
   *
   * Note: conditional operator is right-associative
   *
   * @return {Node} node
   * @private
   */


  function parseConditional(state) {
    var node = parseLogicalOr(state);

    while (state.token === '?') {
      // eslint-disable-line no-unmodified-loop-condition
      // set a conditional level, the range operator will be ignored as long
      // as conditionalLevel === state.nestingLevel.
      var prev = state.conditionalLevel;
      state.conditionalLevel = state.nestingLevel;
      getTokenSkipNewline(state);
      var condition = node;
      var trueExpr = parseAssignment(state);
      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');
      state.conditionalLevel = null;
      getTokenSkipNewline(state);
      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity

      node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level

      state.conditionalLevel = prev;
    }

    return node;
  }
  /**
   * logical or, 'x or y'
   * @return {Node} node
   * @private
   */


  function parseLogicalOr(state) {
    var node = parseLogicalXor(state);

    while (state.token === 'or') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);
    }

    return node;
  }
  /**
   * logical exclusive or, 'x xor y'
   * @return {Node} node
   * @private
   */


  function parseLogicalXor(state) {
    var node = parseLogicalAnd(state);

    while (state.token === 'xor') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);
    }

    return node;
  }
  /**
   * logical and, 'x and y'
   * @return {Node} node
   * @private
   */


  function parseLogicalAnd(state) {
    var node = parseBitwiseOr(state);

    while (state.token === 'and') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);
    }

    return node;
  }
  /**
   * bitwise or, 'x | y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseOr(state) {
    var node = parseBitwiseXor(state);

    while (state.token === '|') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);
    }

    return node;
  }
  /**
   * bitwise exclusive or (xor), 'x ^| y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseXor(state) {
    var node = parseBitwiseAnd(state);

    while (state.token === '^|') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);
    }

    return node;
  }
  /**
   * bitwise and, 'x & y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseAnd(state) {
    var node = parseRelational(state);

    while (state.token === '&') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);
    }

    return node;
  }
  /**
   * Parse a chained conditional, like 'a > b >= c'
   * @return {Node} node
   */


  function parseRelational(state) {
    var params = [parseShift(state)];
    var conditionals = [];
    var operators = {
      '==': 'equal',
      '!=': 'unequal',
      '<': 'smaller',
      '>': 'larger',
      '<=': 'smallerEq',
      '>=': 'largerEq'
    };

    while (Object(utils_object["f" /* hasOwnProperty */])(operators, state.token)) {
      // eslint-disable-line no-unmodified-loop-condition
      var cond = {
        name: state.token,
        fn: operators[state.token]
      };
      conditionals.push(cond);
      getTokenSkipNewline(state);
      params.push(parseShift(state));
    }

    if (params.length === 1) {
      return params[0];
    } else if (params.length === 2) {
      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);
    } else {
      return new RelationalNode(conditionals.map(function (c) {
        return c.fn;
      }), params);
    }
  }
  /**
   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
   * @return {Node} node
   * @private
   */


  function parseShift(state) {
    var node, name, fn, params;
    node = parseConversion(state);
    var operators = {
      '<<': 'leftShift',
      '>>': 'rightArithShift',
      '>>>': 'rightLogShift'
    };

    while (Object(utils_object["f" /* hasOwnProperty */])(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      params = [node, parseConversion(state)];
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * conversion operators 'to' and 'in'
   * @return {Node} node
   * @private
   */


  function parseConversion(state) {
    var node, name, fn, params;
    node = parseRange(state);
    var operators = {
      to: 'to',
      "in": 'to' // alias of 'to'

    };

    while (Object(utils_object["f" /* hasOwnProperty */])(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);

      if (name === 'in' && state.token === '') {
        // end of expression -> this is the unit 'in' ('inch')
        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
      } else {
        // operator 'a to b' or 'a in b'
        params = [node, parseRange(state)];
        node = new OperatorNode(name, fn, params);
      }
    }

    return node;
  }
  /**
   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
   * @return {Node} node
   * @private
   */


  function parseRange(state) {
    var node;
    var params = [];

    if (state.token === ':') {
      // implicit start=1 (one-based)
      node = new ConstantNode(1);
    } else {
      // explicit start
      node = parseAddSubtract(state);
    }

    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
      // we ignore the range operator when a conditional operator is being processed on the same level
      params.push(node); // parse step and end

      while (state.token === ':' && params.length < 3) {
        // eslint-disable-line no-unmodified-loop-condition
        getTokenSkipNewline(state);

        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {
          // implicit end
          params.push(new SymbolNode('end'));
        } else {
          // explicit end
          params.push(parseAddSubtract(state));
        }
      }

      if (params.length === 3) {
        // params = [start, step, end]
        node = new RangeNode(params[0], params[2], params[1]); // start, end, step
      } else {
        // length === 2
        // params = [start, end]
        node = new RangeNode(params[0], params[1]); // start, end
      }
    }

    return node;
  }
  /**
   * add or subtract
   * @return {Node} node
   * @private
   */


  function parseAddSubtract(state) {
    var node, name, fn, params;
    node = parseMultiplyDivide(state);
    var operators = {
      '+': 'add',
      '-': 'subtract'
    };

    while (Object(utils_object["f" /* hasOwnProperty */])(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      params = [node, parseMultiplyDivide(state)];
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * multiply, divide, modulus
   * @return {Node} node
   * @private
   */


  function parseMultiplyDivide(state) {
    var node, last, name, fn;
    node = parseImplicitMultiplication(state);
    last = node;
    var operators = {
      '*': 'multiply',
      '.*': 'dotMultiply',
      '/': 'divide',
      './': 'dotDivide',
      '%': 'mod',
      mod: 'mod'
    };

    while (true) {
      if (Object(utils_object["f" /* hasOwnProperty */])(operators, state.token)) {
        // explicit operators
        name = state.token;
        fn = operators[name];
        getTokenSkipNewline(state);
        last = parseImplicitMultiplication(state);
        node = new OperatorNode(name, fn, [node, last]);
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * implicit multiplication
   * @return {Node} node
   * @private
   */


  function parseImplicitMultiplication(state) {
    var node, last;
    node = parseRule2(state);
    last = node;

    while (true) {
      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && Object(is["l" /* isConstantNode */])(node) || state.tokenType === TOKENTYPE.NUMBER && !Object(is["l" /* isConstantNode */])(last) && (!Object(is["B" /* isOperatorNode */])(last) || last.op === '!') || state.token === '(') {
        // parse implicit multiplication
        //
        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
        // number:      implicit multiplication like '(2+3)2'
        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
        last = parseRule2(state);
        node = new OperatorNode('*', 'multiply', [node, last], true
        /* implicit */
        );
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
   * Explicit division gets higher precedence than implicit multiplication
   * when the division matches this pattern: [number] / [number] [symbol]
   * @return {Node} node
   * @private
   */


  function parseRule2(state) {
    var node = parseUnary(state);
    var last = node;
    var tokenStates = [];

    while (true) {
      // Match the "number /" part of the pattern "number / number symbol"
      if (state.token === '/' && Object(is["l" /* isConstantNode */])(last)) {
        // Look ahead to see if the next token is a number
        tokenStates.push(parse_extends({}, state));
        getTokenSkipNewline(state); // Match the "number / number" part of the pattern

        if (state.tokenType === TOKENTYPE.NUMBER) {
          // Look ahead again
          tokenStates.push(parse_extends({}, state));
          getTokenSkipNewline(state); // Match the "symbol" part of the pattern, or a left parenthesis

          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {
            // We've matched the pattern "number / number symbol".
            // Rewind once and build the "number / number" node; the symbol will be consumed later
            parse_extends(state, tokenStates.pop());

            tokenStates.pop();
            last = parseUnary(state);
            node = new OperatorNode('/', 'divide', [node, last]);
          } else {
            // Not a match, so rewind
            tokenStates.pop();

            parse_extends(state, tokenStates.pop());

            break;
          }
        } else {
          // Not a match, so rewind
          parse_extends(state, tokenStates.pop());

          break;
        }
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * Unary plus and minus, and logical and bitwise not
   * @return {Node} node
   * @private
   */


  function parseUnary(state) {
    var name, params, fn;
    var operators = {
      '-': 'unaryMinus',
      '+': 'unaryPlus',
      '~': 'bitNot',
      not: 'not'
    };

    if (Object(utils_object["f" /* hasOwnProperty */])(operators, state.token)) {
      fn = operators[state.token];
      name = state.token;
      getTokenSkipNewline(state);
      params = [parseUnary(state)];
      return new OperatorNode(name, fn, params);
    }

    return parsePow(state);
  }
  /**
   * power
   * Note: power operator is right associative
   * @return {Node} node
   * @private
   */


  function parsePow(state) {
    var node, name, fn, params;
    node = parseLeftHandOperators(state);

    if (state.token === '^' || state.token === '.^') {
      name = state.token;
      fn = name === '^' ? 'pow' : 'dotPow';
      getTokenSkipNewline(state);
      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'

      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * Left hand operators: factorial x!, ctranspose x'
   * @return {Node} node
   * @private
   */


  function parseLeftHandOperators(state) {
    var node, name, fn, params;
    node = parseCustomNodes(state);
    var operators = {
      '!': 'factorial',
      '\'': 'ctranspose'
    };

    while (Object(utils_object["f" /* hasOwnProperty */])(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getToken(state);
      params = [node];
      node = new OperatorNode(name, fn, params);
      node = parseAccessors(state, node);
    }

    return node;
  }
  /**
   * Parse a custom node handler. A node handler can be used to process
   * nodes in a custom way, for example for handling a plot.
   *
   * A handler must be passed as second argument of the parse function.
   * - must extend math.expression.node.Node
   * - must contain a function _compile(defs: Object) : string
   * - must contain a function find(filter: Object) : Node[]
   * - must contain a function toString() : string
   * - the constructor is called with a single argument containing all parameters
   *
   * For example:
   *
   *     nodes = {
   *       'plot': PlotHandler
   *     }
   *
   * The constructor of the handler is called as:
   *
   *     node = new PlotHandler(params)
   *
   * The handler will be invoked when evaluating an expression like:
   *
   *     node = math.parse('plot(sin(x), x)', nodes)
   *
   * @return {Node} node
   * @private
   */


  function parseCustomNodes(state) {
    var params = [];

    if (state.tokenType === TOKENTYPE.SYMBOL && Object(utils_object["f" /* hasOwnProperty */])(state.extraNodes, state.token)) {
      var CustomNode = state.extraNodes[state.token];
      getToken(state); // parse parameters

      if (state.token === '(') {
        params = [];
        openParams(state);
        getToken(state);

        if (state.token !== ')') {
          params.push(parseAssignment(state)); // parse a list with parameters

          while (state.token === ',') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params.push(parseAssignment(state));
          }
        }

        if (state.token !== ')') {
          throw createSyntaxError(state, 'Parenthesis ) expected');
        }

        closeParams(state);
        getToken(state);
      } // create a new custom node
      // noinspection JSValidateTypes


      return new CustomNode(params);
    }

    return parseSymbol(state);
  }
  /**
   * parse symbols: functions, variables, constants, units
   * @return {Node} node
   * @private
   */


  function parseSymbol(state) {
    var node, name;

    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
      name = state.token;
      getToken(state);

      if (Object(utils_object["f" /* hasOwnProperty */])(CONSTANTS, name)) {
        // true, false, null, ...
        node = new ConstantNode(CONSTANTS[name]);
      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {
        // NaN, Infinity
        node = new ConstantNode(numeric(name, 'number'));
      } else {
        node = new SymbolNode(name);
      } // parse function parameters and matrix index


      node = parseAccessors(state, node);
      return node;
    }

    return parseDoubleQuotesString(state);
  }
  /**
   * parse accessors:
   * - function invocation in round brackets (...), for example sqrt(2)
   * - index enclosed in square brackets [...], for example A[2,3]
   * - dot notation for properties, like foo.bar
   * @param {Object} state
   * @param {Node} node    Node on which to apply the parameters. If there
   *                       are no parameters in the expression, the node
   *                       itself is returned
   * @param {string[]} [types]  Filter the types of notations
   *                            can be ['(', '[', '.']
   * @return {Node} node
   * @private
   */


  function parseAccessors(state, node, types) {
    var params;

    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {
      // eslint-disable-line no-unmodified-loop-condition
      params = [];

      if (state.token === '(') {
        if (Object(is["J" /* isSymbolNode */])(node) || Object(is["a" /* isAccessorNode */])(node)) {
          // function invocation like fn(2, 3) or obj.fn(2, 3)
          openParams(state);
          getToken(state);

          if (state.token !== ')') {
            params.push(parseAssignment(state)); // parse a list with parameters

            while (state.token === ',') {
              // eslint-disable-line no-unmodified-loop-condition
              getToken(state);
              params.push(parseAssignment(state));
            }
          }

          if (state.token !== ')') {
            throw createSyntaxError(state, 'Parenthesis ) expected');
          }

          closeParams(state);
          getToken(state);
          node = new FunctionNode(node, params);
        } else {
          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
          // don't parse it here but let it be handled by parseImplicitMultiplication
          // with correct precedence
          return node;
        }
      } else if (state.token === '[') {
        // index notation like variable[2, 3]
        openParams(state);
        getToken(state);

        if (state.token !== ']') {
          params.push(parseAssignment(state)); // parse a list with parameters

          while (state.token === ',') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params.push(parseAssignment(state));
          }
        }

        if (state.token !== ']') {
          throw createSyntaxError(state, 'Parenthesis ] expected');
        }

        closeParams(state);
        getToken(state);
        node = new AccessorNode(node, new IndexNode(params));
      } else {
        // dot notation like variable.prop
        getToken(state);

        if (state.tokenType !== TOKENTYPE.SYMBOL) {
          throw createSyntaxError(state, 'Property name expected after dot');
        }

        params.push(new ConstantNode(state.token));
        getToken(state);
        var dotNotation = true;
        node = new AccessorNode(node, new IndexNode(params, dotNotation));
      }
    }

    return node;
  }
  /**
   * Parse a double quotes string.
   * @return {Node} node
   * @private
   */


  function parseDoubleQuotesString(state) {
    var node, str;

    if (state.token === '"') {
      str = parseDoubleQuotesStringToken(state); // create constant

      node = new ConstantNode(str); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseSingleQuotesString(state);
  }
  /**
   * Parse a string surrounded by double quotes "..."
   * @return {string}
   */


  function parseDoubleQuotesStringToken(state) {
    var str = '';

    while (currentCharacter(state) !== '' && currentCharacter(state) !== '"') {
      if (currentCharacter(state) === '\\') {
        // escape character, immediately process the next
        // character to prevent stopping at a next '\"'
        str += currentCharacter(state);
        next(state);
      }

      str += currentCharacter(state);
      next(state);
    }

    getToken(state);

    if (state.token !== '"') {
      throw createSyntaxError(state, 'End of string " expected');
    }

    getToken(state);
    return JSON.parse('"' + str + '"'); // unescape escaped characters
  }
  /**
   * Parse a single quotes string.
   * @return {Node} node
   * @private
   */


  function parseSingleQuotesString(state) {
    var node, str;

    if (state.token === '\'') {
      str = parseSingleQuotesStringToken(state); // create constant

      node = new ConstantNode(str); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseMatrix(state);
  }
  /**
   * Parse a string surrounded by single quotes '...'
   * @return {string}
   */


  function parseSingleQuotesStringToken(state) {
    var str = '';

    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\'') {
      if (currentCharacter(state) === '\\') {
        // escape character, immediately process the next
        // character to prevent stopping at a next '\''
        str += currentCharacter(state);
        next(state);
      }

      str += currentCharacter(state);
      next(state);
    }

    getToken(state);

    if (state.token !== '\'') {
      throw createSyntaxError(state, 'End of string \' expected');
    }

    getToken(state);
    return JSON.parse('"' + str + '"'); // unescape escaped characters
  }
  /**
   * parse the matrix
   * @return {Node} node
   * @private
   */


  function parseMatrix(state) {
    var array, params, rows, cols;

    if (state.token === '[') {
      // matrix [...]
      openParams(state);
      getToken(state);

      if (state.token !== ']') {
        // this is a non-empty matrix
        var row = parseRow(state);

        if (state.token === ';') {
          // 2 dimensional array
          rows = 1;
          params = [row]; // the rows of the matrix are separated by dot-comma's

          while (state.token === ';') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params[rows] = parseRow(state);
            rows++;
          }

          if (state.token !== ']') {
            throw createSyntaxError(state, 'End of matrix ] expected');
          }

          closeParams(state);
          getToken(state); // check if the number of columns matches in all rows

          cols = params[0].items.length;

          for (var r = 1; r < rows; r++) {
            if (params[r].items.length !== cols) {
              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');
            }
          }

          array = new ArrayNode(params);
        } else {
          // 1 dimensional vector
          if (state.token !== ']') {
            throw createSyntaxError(state, 'End of matrix ] expected');
          }

          closeParams(state);
          getToken(state);
          array = row;
        }
      } else {
        // this is an empty matrix "[ ]"
        closeParams(state);
        getToken(state);
        array = new ArrayNode([]);
      }

      return parseAccessors(state, array);
    }

    return parseObject(state);
  }
  /**
   * Parse a single comma-separated row from a matrix, like 'a, b, c'
   * @return {ArrayNode} node
   */


  function parseRow(state) {
    var params = [parseAssignment(state)];
    var len = 1;

    while (state.token === ',') {
      // eslint-disable-line no-unmodified-loop-condition
      getToken(state); // parse expression

      params[len] = parseAssignment(state);
      len++;
    }

    return new ArrayNode(params);
  }
  /**
   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
   * @return {Node} node
   * @private
   */


  function parseObject(state) {
    if (state.token === '{') {
      openParams(state);
      var key;
      var properties = {};

      do {
        getToken(state);

        if (state.token !== '}') {
          // parse key
          if (state.token === '"') {
            key = parseDoubleQuotesStringToken(state);
          } else if (state.token === '\'') {
            key = parseSingleQuotesStringToken(state);
          } else if (state.tokenType === TOKENTYPE.SYMBOL) {
            key = state.token;
            getToken(state);
          } else {
            throw createSyntaxError(state, 'Symbol or string expected as object key');
          } // parse key/value separator


          if (state.token !== ':') {
            throw createSyntaxError(state, 'Colon : expected after object key');
          }

          getToken(state); // parse key

          properties[key] = parseAssignment(state);
        }
      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition


      if (state.token !== '}') {
        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
      }

      closeParams(state);
      getToken(state);
      var node = new ObjectNode(properties); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseNumber(state);
  }
  /**
   * parse a number
   * @return {Node} node
   * @private
   */


  function parseNumber(state) {
    var numberStr;

    if (state.tokenType === TOKENTYPE.NUMBER) {
      // this is a number
      numberStr = state.token;
      getToken(state);
      return new ConstantNode(numeric(numberStr, config.number));
    }

    return parseParentheses(state);
  }
  /**
   * parentheses
   * @return {Node} node
   * @private
   */


  function parseParentheses(state) {
    var node; // check if it is a parenthesized expression

    if (state.token === '(') {
      // parentheses (...)
      openParams(state);
      getToken(state);
      node = parseAssignment(state); // start again

      if (state.token !== ')') {
        throw createSyntaxError(state, 'Parenthesis ) expected');
      }

      closeParams(state);
      getToken(state);
      node = new ParenthesisNode(node);
      node = parseAccessors(state, node);
      return node;
    }

    return parseEnd(state);
  }
  /**
   * Evaluated when the expression is not yet ended but expected to end
   * @return {Node} res
   * @private
   */


  function parseEnd(state) {
    if (state.token === '') {
      // syntax error or unexpected end of expression
      throw createSyntaxError(state, 'Unexpected end of expression');
    } else {
      throw createSyntaxError(state, 'Value expected');
    }
  }
  /**
   * Shortcut for getting the current row value (one based)
   * Returns the line of the currently handled expression
   * @private
   */

  /* TODO: implement keeping track on the row number
  function row () {
    return null
  }
  */

  /**
   * Shortcut for getting the current col value (one based)
   * Returns the column (position) where the last state.token starts
   * @private
   */


  function col(state) {
    return state.index - state.token.length + 1;
  }
  /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {SyntaxError} instantiated error
   * @private
   */


  function createSyntaxError(state, message) {
    var c = col(state);
    var error = new SyntaxError(message + ' (char ' + c + ')');
    error["char"] = c;
    return error;
  }
  /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {Error} instantiated error
   * @private
   */


  function createError(state, message) {
    var c = col(state);
    var error = new SyntaxError(message + ' (char ' + c + ')');
    error["char"] = c;
    return error;
  }

  return parse;
});
// CONCATENATED MODULE: ./src/expression/function/compile.js


var compile_name = 'compile';
var compile_dependencies = ['typed', 'parse'];
var createCompile =
/* #__PURE__ */
Object(factory["a" /* factory */])(compile_name, compile_dependencies, function (_ref) {
  var typed = _ref.typed,
      parse = _ref.parse;

  /**
   * Parse and compile an expression.
   * Returns a an object with a function `evaluate([scope])` to evaluate the
   * compiled expression.
   *
   * Syntax:
   *
   *     math.compile(expr)                       // returns one node
   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
   *
   * Examples:
   *
   *     const code1 = math.compile('sqrt(3^2 + 4^2)')
   *     code1.evaluate() // 5
   *
   *     let scope = {a: 3, b: 4}
   *     const code2 = math.compile('a * b') // 12
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].evaluate() // 12
   *
   * See also:
   *
   *    parse, evaluate
   *
   * @param {string | string[] | Array | Matrix} expr
   *            The expression to be compiled
   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code
   *            An object with the compiled expression
   * @throws {Error}
   */
  return typed(compile_name, {
    string: function string(expr) {
      return parse(expr).compile();
    },
    'Array | Matrix': function ArrayMatrix(expr) {
      return deepMap(expr, function (entry) {
        return parse(entry).compile();
      });
    }
  });
});
// CONCATENATED MODULE: ./src/expression/function/evaluate.js


var evaluate_name = 'evaluate';
var evaluate_dependencies = ['typed', 'parse'];
var createEvaluate =
/* #__PURE__ */
Object(factory["a" /* factory */])(evaluate_name, evaluate_dependencies, function (_ref) {
  var typed = _ref.typed,
      parse = _ref.parse;

  /**
   * Evaluate an expression.
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.evaluate(expr)
   *     math.evaluate(expr, scope)
   *     math.evaluate([expr1, expr2, expr3, ...])
   *     math.evaluate([expr1, expr2, expr3, ...], scope)
   *
   * Example:
   *
   *     math.evaluate('(2+3)/4')                // 1.25
   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5
   *     math.evaluate('sqrt(-4)')               // 2i
   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
   *
   *     let scope = {a:3, b:4}
   *     math.evaluate('a * b', scope)           // 12
   *
   * See also:
   *
   *    parse, compile
   *
   * @param {string | string[] | Matrix} expr   The expression to be evaluated
   * @param {Object} [scope]                    Scope to read/write variables
   * @return {*} The result of the expression
   * @throws {Error}
   */
  return typed(evaluate_name, {
    string: function string(expr) {
      var scope = {};
      return parse(expr).compile().evaluate(scope);
    },
    'string, Object': function stringObject(expr, scope) {
      return parse(expr).compile().evaluate(scope);
    },
    'Array | Matrix': function ArrayMatrix(expr) {
      var scope = {};
      return deepMap(expr, function (entry) {
        return parse(entry).compile().evaluate(scope);
      });
    },
    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {
      return deepMap(expr, function (entry) {
        return parse(entry).compile().evaluate(scope);
      });
    }
  });
});
// CONCATENATED MODULE: ./src/expression/function/eval.js
// For backward compatibility, deprecated since version 6.0.0. Date: 2018-12-05


var createDeprecatedEval =
/* #__PURE__ */
Object(factory["a" /* factory */])('eval', ['evaluate'], function (_ref) {
  var evaluate = _ref.evaluate;
  return function () {
    Object(utils_log["a" /* warnOnce */])('Function "eval" has been renamed to "evaluate" in v6.0.0, please use the new function instead.');

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return evaluate.apply(evaluate, args);
  };
});
// CONCATENATED MODULE: ./src/expression/Parser.js




var Parser_name = 'Parser';
var Parser_dependencies = ['parse'];
var createParserClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(Parser_name, Parser_dependencies, function (_ref) {
  var parse = _ref.parse;

  /**
   * @constructor Parser
   * Parser contains methods to evaluate or parse expressions, and has a number
   * of convenience methods to get, set, and remove variables from memory. Parser
   * keeps a scope containing variables in memory, which is used for all
   * evaluations.
   *
   * Methods:
   *    const result = parser.evaluate(expr)  // evaluate an expression
   *    const value = parser.get(name)        // retrieve a variable from the parser
   *    const values = parser.getAll()        // retrieve all defined variables
   *    parser.set(name, value)               // set a variable in the parser
   *    parser.remove(name)                   // clear a variable from the
   *                                          // parsers scope
   *    parser.clear()                        // clear the parsers scope
   *
   * Example usage:
   *    const parser = new Parser()
   *    // Note: there is a convenience method which can be used instead:
   *    // const parser = new math.parser()
   *
   *    // evaluate expressions
   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5
   *    parser.evaluate('sqrt(-4)')               // 2i
   *    parser.evaluate('2 inch in cm')           // 5.08 cm
   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476
   *
   *    // define variables and functions
   *    parser.evaluate('x = 7 / 2')              // 3.5
   *    parser.evaluate('x + 3')                  // 6.5
   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)
   *    parser.evaluate('f(2, 3)')                // 8
   *
   *    // get and set variables and functions
   *    const x = parser.get('x')                 // 7
   *    const f = parser.get('f')                 // function
   *    const g = f(3, 2)                         // 9
   *    parser.set('h', 500)
   *    const i = parser.evaluate('h / 2')        // 250
   *    parser.set('hello', function (name) {
   *        return 'hello, ' + name + '!'
   *    })
   *    parser.evaluate('hello("user")')          // "hello, user!"
   *
   *    // clear defined functions and variables
   *    parser.clear()
   *
   */
  function Parser() {
    if (!(this instanceof Parser)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.scope = {};
  }
  /**
   * Attach type information
   */


  Parser.prototype.type = 'Parser';
  Parser.prototype.isParser = true;
  /**
   * Parse an expression and return the parsed function node.
   * The node tree can be compiled via `code = node.compile(math)`,
   * and the compiled code can be executed as `code.evaluate([scope])`
   * @param {string} expr
   * @return {Node} node
   * @throws {Error}
   */

  Parser.prototype.parse = function (expr) {
    throw new Error('Parser.parse is deprecated. Use math.parse instead.');
  };
  /**
   * Parse and compile an expression, return the compiled javascript code.
   * The node can be evaluated via code.evaluate([scope])
   * @param {string} expr
   * @return {{evaluate: function}} code
   * @throws {Error}
   */


  Parser.prototype.compile = function (expr) {
    throw new Error('Parser.compile is deprecated. Use math.compile instead.');
  };
  /**
   * Parse and evaluate the given expression
   * @param {string} expr   A string containing an expression, for example "2+3"
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */


  Parser.prototype.evaluate = function (expr) {
    // TODO: validate arguments
    return parse(expr).compile().evaluate(this.scope);
  };
  /**
   * Parse and evaluate the given expression
   * @param {string} expr   A string containing an expression, for example "2+3"
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */
  // TODO: Deprecated since v6.0.0. Clean up some day


  Parser.prototype.eval = function (expr) {
    Object(utils_log["a" /* warnOnce */])('Method Parser.eval is renamed to Parser.evaluate. Please use the new method name.');
    return this.evaluate(expr);
  };
  /**
   * Get a variable (a function or variable) by name from the parsers scope.
   * Returns undefined when not found
   * @param {string} name
   * @return {* | undefined} value
   */


  Parser.prototype.get = function (name) {
    // TODO: validate arguments
    return name in this.scope ? getSafeProperty(this.scope, name) : undefined;
  };
  /**
   * Get a map with all defined variables
   * @return {Object} values
   */


  Parser.prototype.getAll = function () {
    return Object(utils_object["e" /* extend */])({}, this.scope);
  };
  /**
   * Set a symbol (a function or variable) by name from the parsers scope.
   * @param {string} name
   * @param {* | undefined} value
   */


  Parser.prototype.set = function (name, value) {
    // TODO: validate arguments
    return setSafeProperty(this.scope, name, value);
  };
  /**
   * Remove a variable from the parsers scope
   * @param {string} name
   */


  Parser.prototype.remove = function (name) {
    // TODO: validate arguments
    delete this.scope[name];
  };
  /**
   * Clear the scope with variables and functions
   */


  Parser.prototype.clear = function () {
    for (var _name in this.scope) {
      if (Object(utils_object["f" /* hasOwnProperty */])(this.scope, _name)) {
        delete this.scope[_name];
      }
    }
  };

  return Parser;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/expression/function/parser.js

var parser_name = 'parser';
var parser_dependencies = ['typed', 'Parser'];
var createParser =
/* #__PURE__ */
Object(factory["a" /* factory */])(parser_name, parser_dependencies, function (_ref) {
  var typed = _ref.typed,
      Parser = _ref.Parser;

  /**
   * Create a parser. The function creates a new `math.Parser` object.
   *
   * Syntax:
   *
   *    math.parser()
   *
   * Examples:
   *
   *     const parser = new math.parser()
   *
   *     // evaluate expressions
   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5
   *     const b = parser.evaluate('sqrt(-4)')        // 2i
   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm
   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476
   *
   *     // define variables and functions
   *     parser.evaluate('x = 7 / 2')                 // 3.5
   *     parser.evaluate('x + 3')                     // 6.5
   *     parser.evaluate('function f(x, y) = x^y')    // f(x, y)
   *     parser.evaluate('f(2, 3)')                   // 8
   *
   *     // get and set variables and functions
   *     const x = parser.get('x')                // 7
   *     const f = parser.get('f')                // function
   *     const g = f(3, 2)                        // 9
   *     parser.set('h', 500)
   *     const i = parser.evaluate('h / 2')       // 250
   *     parser.set('hello', function (name) {
   *       return 'hello, ' + name + '!'
   *     })
   *     parser.evaluate('hello("user")')         // "hello, user!"
   *
   *     // clear defined functions and variables
   *     parser.clear()
   *
   * See also:
   *
   *    evaluate, compile, parse
   *
   * @return {Parser} Parser
   */
  return typed(parser_name, {
    '': function _() {
      return new Parser();
    }
  });
});
// CONCATENATED MODULE: ./src/function/algebra/decomposition/lup.js


var lup_name = 'lup';
var lup_dependencies = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];
var createLup =
/* #__PURE__ */
Object(factory["a" /* factory */])(lup_name, lup_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      abs = _ref.abs,
      addScalar = _ref.addScalar,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      subtract = _ref.subtract,
      larger = _ref.larger,
      equalScalar = _ref.equalScalar,
      unaryMinus = _ref.unaryMinus,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix,
      Spa = _ref.Spa;

  /**
   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
   * row permutation vector `p` where `A[p,:] = L * U`
   *
   * Syntax:
   *
   *    math.lup(A)
   *
   * Example:
   *
   *    const m = [[2, 1], [1, 4]]
   *    const r = math.lup(m)
   *    // r = {
   *    //   L: [[1, 0], [0.5, 1]],
   *    //   U: [[2, 1], [0, 3.5]],
   *    //   P: [0, 1]
   *    // }
   *
   * See also:
   *
   *    slu, lsolve, lusolve, usolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
   *
   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
   */
  return typed(lup_name, {
    DenseMatrix: function DenseMatrix(m) {
      return _denseLUP(m);
    },
    SparseMatrix: function SparseMatrix(m) {
      return _sparseLUP(m);
    },
    Array: function Array(a) {
      // create dense matrix from array
      var m = matrix(a); // lup, use matrix implementation

      var r = _denseLUP(m); // result


      return {
        L: r.L.valueOf(),
        U: r.U.valueOf(),
        p: r.p
      };
    }
  });

  function _denseLUP(m) {
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1]; // minimum rows and columns

    var n = Math.min(rows, columns); // matrix array, clone original data

    var data = Object(utils_object["a" /* clone */])(m._data); // l matrix arrays

    var ldata = [];
    var lsize = [rows, n]; // u matrix arrays

    var udata = [];
    var usize = [n, columns]; // vars

    var i, j, k; // permutation vector

    var p = [];

    for (i = 0; i < rows; i++) {
      p[i] = i;
    } // loop columns


    for (j = 0; j < columns; j++) {
      // skip first column in upper triangular matrix
      if (j > 0) {
        // loop rows
        for (i = 0; i < rows; i++) {
          // min i,j
          var min = Math.min(i, j); // v[i, j]

          var s = 0; // loop up to min

          for (k = 0; k < min; k++) {
            // s = l[i, k] - data[k, j]
            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
          }

          data[i][j] = subtract(data[i][j], s);
        }
      } // row with larger value in cvector, row >= j


      var pi = j;
      var pabsv = 0;
      var vjj = 0; // loop rows

      for (i = j; i < rows; i++) {
        // data @ i, j
        var v = data[i][j]; // absolute value

        var absv = abs(v); // value is greater than pivote value

        if (larger(absv, pabsv)) {
          // store row
          pi = i; // update max value

          pabsv = absv; // value @ [j, j]

          vjj = v;
        }
      } // swap rows (j <-> pi)


      if (j !== pi) {
        // swap values j <-> pi in p
        p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data

        DenseMatrix._swapRows(j, pi, data);
      } // check column is in lower triangular matrix


      if (j < rows) {
        // loop rows (lower triangular matrix)
        for (i = j + 1; i < rows; i++) {
          // value @ i, j
          var vij = data[i][j];

          if (!equalScalar(vij, 0)) {
            // update data
            data[i][j] = divideScalar(data[i][j], vjj);
          }
        }
      }
    } // loop columns


    for (j = 0; j < columns; j++) {
      // loop rows
      for (i = 0; i < rows; i++) {
        // initialize row in arrays
        if (j === 0) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i] = [];
          } // L


          ldata[i] = [];
        } // check we are in the upper triangular matrix


        if (i < j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          } // check column exists in lower triangular matrix


          if (j < rows) {
            // L
            ldata[i][j] = 0;
          }

          continue;
        } // diagonal value


        if (i === j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          } // check column exists in lower triangular matrix


          if (j < rows) {
            // L
            ldata[i][j] = 1;
          }

          continue;
        } // check row exists in upper triangular matrix


        if (i < columns) {
          // U
          udata[i][j] = 0;
        } // check column exists in lower triangular matrix


        if (j < rows) {
          // L
          ldata[i][j] = data[i][j];
        }
      }
    } // l matrix


    var l = new DenseMatrix({
      data: ldata,
      size: lsize
    }); // u matrix

    var u = new DenseMatrix({
      data: udata,
      size: usize
    }); // p vector

    var pv = [];

    for (i = 0, n = p.length; i < n; i++) {
      pv[p[i]] = i;
    } // return matrices


    return {
      L: l,
      U: u,
      p: pv,
      toString: function toString() {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  }

  function _sparseLUP(m) {
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1]; // minimum rows and columns

    var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)

    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // l matrix arrays

    var lvalues = [];
    var lindex = [];
    var lptr = [];
    var lsize = [rows, n]; // u matrix arrays

    var uvalues = [];
    var uindex = [];
    var uptr = [];
    var usize = [n, columns]; // vars

    var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)

    var pvCo = [];
    var pvOc = [];

    for (i = 0; i < rows; i++) {
      pvCo[i] = i;
      pvOc[i] = i;
    } // swap indices in permutation vectors (condition x < y)!


    var swapIndeces = function swapIndeces(x, y) {
      // find pv indeces getting data from x and y
      var kx = pvOc[x];
      var ky = pvOc[y]; // update permutation vector current -> original

      pvCo[kx] = y;
      pvCo[ky] = x; // update permutation vector original -> current

      pvOc[x] = ky;
      pvOc[y] = kx;
    }; // loop columns


    var _loop = function _loop() {
      // sparse accumulator
      var spa = new Spa(); // check lower triangular matrix has a value @ column j

      if (j < rows) {
        // update ptr
        lptr.push(lvalues.length); // first value in j column for lower triangular matrix

        lvalues.push(1);
        lindex.push(j);
      } // update ptr


      uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // copy column j into sparse accumulator

      for (k = k0; k < k1; k++) {
        // row
        i = index[k]; // copy column values into sparse accumulator (use permutation vector)

        spa.set(pvCo[i], values[k]);
      } // skip first column in upper triangular matrix


      if (j > 0) {
        // loop rows in column j (above diagonal)
        spa.forEach(0, j - 1, function (k, vkj) {
          // loop rows in column k (L)
          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
            // check row is below k
            if (i > k) {
              // update spa value
              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
            }
          });
        });
      } // row with larger value in spa, row >= j


      var pi = j;
      var vjj = spa.get(j);
      var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)

      spa.forEach(j + 1, rows - 1, function (x, v) {
        // absolute value
        var absv = abs(v); // value is greater than pivote value

        if (larger(absv, pabsv)) {
          // store row
          pi = x; // update max value

          pabsv = absv; // value @ [j, j]

          vjj = v;
        }
      }); // swap rows (j <-> pi)

      if (j !== pi) {
        // swap values j <-> pi in L
        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U


        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa


        spa.swap(j, pi); // update permutation vector (swap values @ j, pi)

        swapIndeces(j, pi);
      } // loop values in spa (order by row)


      spa.forEach(0, rows - 1, function (x, v) {
        // check we are above diagonal
        if (x <= j) {
          // update upper triangular matrix
          uvalues.push(v);
          uindex.push(x);
        } else {
          // update value
          v = divideScalar(v, vjj); // check value is non zero

          if (!equalScalar(v, 0)) {
            // update lower triangular matrix
            lvalues.push(v);
            lindex.push(x);
          }
        }
      });
    };

    for (j = 0; j < columns; j++) {
      _loop();
    } // update ptrs


    uptr.push(uvalues.length);
    lptr.push(lvalues.length); // return matrices

    return {
      L: new SparseMatrix({
        values: lvalues,
        index: lindex,
        ptr: lptr,
        size: lsize
      }),
      U: new SparseMatrix({
        values: uvalues,
        index: uindex,
        ptr: uptr,
        size: usize
      }),
      p: pvCo,
      toString: function toString() {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  }
});
// CONCATENATED MODULE: ./src/function/algebra/decomposition/qr.js

var qr_name = 'qr';
var qr_dependencies = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'unequal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract'];
var createQr =
/* #__PURE__ */
Object(factory["a" /* factory */])(qr_name, qr_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      zeros = _ref.zeros,
      identity = _ref.identity,
      isZero = _ref.isZero,
      unequal = _ref.unequal,
      sign = _ref.sign,
      sqrt = _ref.sqrt,
      conj = _ref.conj,
      unaryMinus = _ref.unaryMinus,
      addScalar = _ref.addScalar,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      subtract = _ref.subtract;

  /**
   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
   * two matrices (`Q`, `R`) where `Q` is an
   * orthogonal matrix and `R` is an upper triangular matrix.
   *
   * Syntax:
   *
   *    math.qr(A)
   *
   * Example:
   *
   *    const m = [
   *      [1, -1,  4],
   *      [1,  4, -2],
   *      [1,  4,  2],
   *      [1,  -1, 0]
   *    ]
   *    const result = math.qr(m)
   *    // r = {
   *    //   Q: [
   *    //     [0.5, -0.5,   0.5],
   *    //     [0.5,  0.5,  -0.5],
   *    //     [0.5,  0.5,   0.5],
   *    //     [0.5, -0.5,  -0.5],
   *    //   ],
   *    //   R: [
   *    //     [2, 3,  2],
   *    //     [0, 5, -2],
   *    //     [0, 0,  4],
   *    //     [0, 0,  0]
   *    //   ]
   *    // }
   *
   * See also:
   *
   *    lup, lusolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array
   * for which to get the QR decomposition.
   *
   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
   * matrix and R: the upper triangular matrix
   */
  return typed(qr_name, {
    DenseMatrix: function DenseMatrix(m) {
      return _denseQR(m);
    },
    SparseMatrix: function SparseMatrix(m) {
      return _sparseQR(m);
    },
    Array: function Array(a) {
      // create dense matrix from array
      var m = matrix(a); // lup, use matrix implementation

      var r = _denseQR(m); // result


      return {
        Q: r.Q.valueOf(),
        R: r.R.valueOf()
      };
    }
  });

  function _denseQR(m) {
    // rows & columns (m x n)
    var rows = m._size[0]; // m

    var cols = m._size[1]; // n

    var Q = identity([rows], 'dense');
    var Qdata = Q._data;
    var R = m.clone();
    var Rdata = R._data; // vars

    var i, j, k;
    var w = zeros([rows], '');

    for (k = 0; k < Math.min(cols, rows); ++k) {
      /*
       * **k-th Household matrix**
       *
       * The matrix I - 2*v*transpose(v)
       * x     = first column of A
       * x1    = first element of x
       * alpha = x1 / |x1| * |x|
       * e1    = tranpose([1, 0, 0, ...])
       * u     = x - alpha * e1
       * v     = u / |u|
       *
       * Household matrix = I - 2 * v * tranpose(v)
       *
       *  * Initially Q = I and R = A.
       *  * Household matrix is a reflection in a plane normal to v which
       *    will zero out all but the top right element in R.
       *  * Appplying reflection to both Q and R will not change product.
       *  * Repeat this process on the (1,1) minor to get R as an upper
       *    triangular matrix.
       *  * Reflections leave the magnitude of the columns of Q unchanged
       *    so Q remains othoganal.
       *
       */
      var pivot = Rdata[k][k];
      var sgn = unaryMinus(sign(pivot));
      var conjSgn = conj(sgn);
      var alphaSquared = 0;

      for (i = k; i < rows; i++) {
        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));
      }

      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));

      if (!isZero(alpha)) {
        // first element in vector u
        var u1 = subtract(pivot, alpha); // w = v * u1 / |u|    (only elements k to (rows-1) are used)

        w[k] = 1;

        for (i = k + 1; i < rows; i++) {
          w[i] = divideScalar(Rdata[i][k], u1);
        } // tau = - conj(u1 / alpha)


        var tau = unaryMinus(conj(divideScalar(u1, alpha)));
        var s = void 0;
        /*
         * tau and w have been choosen so that
         *
         * 2 * v * tranpose(v) = tau * w * tranpose(w)
         */

        /*
         * -- calculate R = R - tau * w * tranpose(w) * R --
         * Only do calculation with rows k to (rows-1)
         * Additionally columns 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */

        for (j = k; j < cols; j++) {
          s = 0.0; // calculate jth element of [tranpose(w) * R]

          for (i = k; i < rows; i++) {
            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
          } // calculate the jth element of [tau * transpose(w) * R]


          s = multiplyScalar(s, tau);

          for (i = k; i < rows; i++) {
            Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);
          }
        }
        /*
         * -- calculate Q = Q - tau * Q * w * transpose(w) --
         * Q is a square matrix (rows x rows)
         * Only do calculation with columns k to (rows-1)
         * Additionally rows 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */


        for (i = 0; i < rows; i++) {
          s = 0.0; // calculate ith element of [Q * w]

          for (j = k; j < rows; j++) {
            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
          } // calculate the ith element of [tau * Q * w]


          s = multiplyScalar(s, tau);

          for (j = k; j < rows; ++j) {
            Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);
          }
        }
      }
    } // coerse almost zero elements to zero
    // TODO I feel uneasy just zeroing these values


    for (i = 0; i < rows; ++i) {
      for (j = 0; j < i && j < cols; ++j) {
        if (unequal(0, divideScalar(Rdata[i][j], 1e5))) {
          throw new Error('math.qr(): unknown error - ' + 'R is not lower triangular (element (' + i + ', ' + j + ')  = ' + Rdata[i][j] + ')');
        }

        Rdata[i][j] = multiplyScalar(Rdata[i][j], 0);
      }
    } // return matrices


    return {
      Q: Q,
      R: R,
      toString: function toString() {
        return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
      }
    };
  }

  function _sparseQR(m) {
    throw new Error('qr not implemented for sparse matrices yet');
  }
});
// CONCATENATED MODULE: ./src/function/algebra/sparse/csPermute.js
/**
 * Permutes a sparse matrix C = P * A * Q
 *
 * @param {SparseMatrix}  a         The Matrix A
 * @param {Array}   pinv            The row permutation vector
 * @param {Array}   q               The column permutation vector
 * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
 *
 * @return {Matrix}                 C = P * A * Q, null on error
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csPermute(a, pinv, q, values) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size;
  var adt = a._datatype; // rows & columns

  var m = asize[0];
  var n = asize[1]; // c arrays

  var cvalues = values && a._values ? [] : null;
  var cindex = []; // (aptr[n])

  var cptr = []; // (n + 1)
  // initialize vars

  var nz = 0; // loop columns

  for (var k = 0; k < n; k++) {
    // column k of C is column q[k] of A
    cptr[k] = nz; // apply column permutation

    var j = q ? q[k] : k; // loop values in column j of A

    for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
      // row i of A is row pinv[i] of C
      var r = pinv ? pinv[aindex[t]] : aindex[t]; // index

      cindex[nz] = r; // check we need to populate values

      if (cvalues) {
        cvalues[nz] = avalues[t];
      } // increment number of nonzero elements


      nz++;
    }
  } // finalize the last column of C


  cptr[n] = nz; // return C matrix

  return a.createSparseMatrix({
    values: cvalues,
    index: cindex,
    ptr: cptr,
    size: [m, n],
    datatype: adt
  });
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csTdfs.js
/**
 * Depth-first search and postorder of a tree rooted at node j
 *
 * @param {Number}  j               The tree node
 * @param {Number}  k
 * @param {Array}   w               The workspace array
 * @param {Number}  head            The index offset within the workspace for the head array
 * @param {Number}  next            The index offset within the workspace for the next array
 * @param {Array}   post            The post ordering array
 * @param {Number}  stack           The index offset within the workspace for the stack array
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csTdfs(j, k, w, head, next, post, stack) {
  // variables
  var top = 0; // place j on the stack

  w[stack] = j; // while (stack is not empty)

  while (top >= 0) {
    // p = top of stack
    var p = w[stack + top]; // i = youngest child of p

    var i = w[head + p];

    if (i === -1) {
      // p has no unordered children left
      top--; // node p is the kth postordered node

      post[k++] = p;
    } else {
      // remove i from children of p
      w[head + p] = w[next + i]; // increment top

      ++top; // start dfs on child node i

      w[stack + top] = i;
    }
  }

  return k;
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csPost.js

/**
 * Post order a tree of forest
 *
 * @param {Array}   parent          The tree or forest
 * @param {Number}  n               Number of columns
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csPost(parent, n) {
  // check inputs
  if (!parent) {
    return null;
  } // vars


  var k = 0;
  var j; // allocate result

  var post = []; // (n)
  // workspace, head: first n entries, next: next n entries, stack: last n entries

  var w = []; // (3 * n)

  var head = 0;
  var next = n;
  var stack = 2 * n; // initialize workspace

  for (j = 0; j < n; j++) {
    // empty linked lists
    w[head + j] = -1;
  } // traverse nodes in reverse order


  for (j = n - 1; j >= 0; j--) {
    // check j is a root
    if (parent[j] === -1) {
      continue;
    } // add j to list of its parent


    w[next + j] = w[head + parent[j]];
    w[head + parent[j]] = j;
  } // loop nodes


  for (j = 0; j < n; j++) {
    // skip j if it is not a root
    if (parent[j] !== -1) {
      continue;
    } // depth-first search


    k = csTdfs(j, k, w, head, next, post, stack);
  }

  return post;
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csEtree.js
/**
 * Computes the elimination tree of Matrix A (using triu(A)) or the
 * elimination tree of A'A without forming A'A.
 *
 * @param {Matrix}  a               The A Matrix
 * @param {boolean} ata             A value of true the function computes the etree of A'A
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csEtree(a, ata) {
  // check inputs
  if (!a) {
    return null;
  } // a arrays


  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size; // rows & columns

  var m = asize[0];
  var n = asize[1]; // allocate result

  var parent = []; // (n)
  // allocate workspace

  var w = []; // (n + (ata ? m : 0))

  var ancestor = 0; // first n entries in w

  var prev = n; // last m entries (ata = true)

  var i, inext; // check we are calculating A'A

  if (ata) {
    // initialize workspace
    for (i = 0; i < m; i++) {
      w[prev + i] = -1;
    }
  } // loop columns


  for (var k = 0; k < n; k++) {
    // node k has no parent yet
    parent[k] = -1; // nor does k have an ancestor

    w[ancestor + k] = -1; // values in column k

    for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
      // row
      var r = aindex[p]; // node

      i = ata ? w[prev + r] : r; // traverse from i to k

      for (; i !== -1 && i < k; i = inext) {
        // inext = ancestor of i
        inext = w[ancestor + i]; // path compression

        w[ancestor + i] = k; // check no anc., parent is k

        if (inext === -1) {
          parent[i] = k;
        }
      }

      if (ata) {
        w[prev + r] = k;
      }
    }
  }

  return parent;
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csFkeep.js
/**
 * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
 *
 * @param {Matrix}   a              The sparse matrix
 * @param {function} callback       The callback function, function will be invoked with the following args:
 *                                    - The entry row
 *                                    - The entry column
 *                                    - The entry value
 *                                    - The state parameter
 * @param {any}      other          The state
 *
 * @return                          The number of nonzero elements in the matrix
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csFkeep(a, callback, other) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size; // columns

  var n = asize[1]; // nonzero items

  var nz = 0; // loop columns

  for (var j = 0; j < n; j++) {
    // get current location of col j
    var p = aptr[j]; // record new location of col j

    aptr[j] = nz;

    for (; p < aptr[j + 1]; p++) {
      // check we need to keep this item
      if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
        // keep A(i,j)
        aindex[nz] = aindex[p]; // check we need to process values (pattern only)

        if (avalues) {
          avalues[nz] = avalues[p];
        } // increment nonzero items


        nz++;
      }
    }
  } // finalize A


  aptr[n] = nz; // trim arrays

  aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)

  if (avalues) {
    avalues.splice(nz, avalues.length - nz);
  } // return number of nonzero items


  return nz;
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csFlip.js
/**
 * This function "flips" its input about the integer -1.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csFlip(i) {
  // flip the value
  return -i - 2;
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csAmd.js




var csAmd_name = 'csAmd';
var csAmd_dependencies = ['add', 'multiply', 'transpose'];
var createCsAmd =
/* #__PURE__ */
Object(factory["a" /* factory */])(csAmd_name, csAmd_dependencies, function (_ref) {
  var add = _ref.add,
      multiply = _ref.multiply,
      transpose = _ref.transpose;

  /**
   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used
   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
   * than A. It is a gready method that selects the sparsest pivot row and column during the course
   * of a right looking sparse Cholesky factorization.
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   *
   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
   * @param {Matrix} m        Sparse Matrix
   */
  return function csAmd(order, a) {
    // check input parameters
    if (!a || order <= 0 || order > 3) {
      return null;
    } // a matrix arrays


    var asize = a._size; // rows and columns

    var m = asize[0];
    var n = asize[1]; // initialize vars

    var lemax = 0; // dense threshold

    var dense = Math.max(16, 10 * Math.sqrt(n));
    dense = Math.min(n - 2, dense); // create target matrix C

    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries


    csFkeep(cm, _diag, null); // C matrix arrays

    var cindex = cm._index;
    var cptr = cm._ptr; // number of nonzero elements in C

    var cnz = cptr[n]; // allocate result (n+1)

    var P = []; // create workspace (8 * (n + 1))

    var W = [];
    var len = 0; // first n + 1 entries

    var nv = n + 1; // next n + 1 entries

    var next = 2 * (n + 1); // next n + 1 entries

    var head = 3 * (n + 1); // next n + 1 entries

    var elen = 4 * (n + 1); // next n + 1 entries

    var degree = 5 * (n + 1); // next n + 1 entries

    var w = 6 * (n + 1); // next n + 1 entries

    var hhead = 7 * (n + 1); // last n + 1 entries
    // use P as workspace for last

    var last = P; // initialize quotient graph

    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists


    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node


    var mindeg = 0; // vars

    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do

    while (nel < n) {
      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
      // many nodes have been eliminated.
      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {
        ;
      }

      if (W[next + k] !== -1) {
        last[W[next + k]] = -1;
      } // remove k from degree list


      W[head + mindeg] = W[next + k]; // elenk = |Ek|

      var elenk = W[elen + k]; // # of nodes k represents

      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated

      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is
      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
      // degree lists. All elements e in Ek are absorved into element k.

      var dk = 0; // flag k as in Lk

      W[nv + k] = -nvk;
      var p = cptr[k]; // do in place if W[elen + k] === 0

      var pk1 = elenk === 0 ? p : cnz;
      var pk2 = pk1;

      for (k1 = 1; k1 <= elenk + 1; k1++) {
        if (k1 > elenk) {
          // search the nodes in k
          e = k; // list of nodes starts at cindex[pj]

          pj = p; // length of list of nodes in k

          ln = W[len + k] - elenk;
        } else {
          // search the nodes in e
          e = cindex[p++];
          pj = cptr[e]; // length of list of nodes in e

          ln = W[len + e];
        }

        for (k2 = 1; k2 <= ln; k2++) {
          i = cindex[pj++]; // check  node i dead, or seen

          if ((nvi = W[nv + i]) <= 0) {
            continue;
          } // W[degree + Lk] += size of node i


          dk += nvi; // negate W[nv + i] to denote i in Lk

          W[nv + i] = -nvi; // place i in Lk

          cindex[pk2++] = i;

          if (W[next + i] !== -1) {
            last[W[next + i]] = last[i];
          } // check we need to remove i from degree list


          if (last[i] !== -1) {
            W[next + last[i]] = W[next + i];
          } else {
            W[head + W[degree + i]] = W[next + i];
          }
        }

        if (e !== k) {
          // absorb e into k
          cptr[e] = csFlip(k); // e is now a dead element

          W[w + e] = 0;
        }
      } // cindex[cnz...nzmax] is free


      if (elenk !== 0) {
        cnz = pk2;
      } // external degree of k - |Lk\i|


      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]

      cptr[k] = pk1;
      W[len + k] = pk2 - pk1; // k is now an element

      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
      // scan, no entry in the w array is greater than or equal to mark.
      // clear w if necessary

      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\Lk|

      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check if W[elen + i] empty, skip it

        if ((eln = W[elen + i]) <= 0) {
          continue;
        } // W[nv + i] was negated


        nvi = -W[nv + i];
        var wnvi = mark - nvi; // scan Ei

        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
          e = cindex[p];

          if (W[w + e] >= mark) {
            // decrement |Le\Lk|
            W[w + e] -= nvi;
          } else if (W[w + e] !== 0) {
            // ensure e is a live element, 1st time e seen in scan 1
            W[w + e] = W[degree + e] + wnvi;
          }
        }
      } // degree update
      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
      // function h(i) for all nodes in Lk.
      // scan2: degree update


      for (pk = pk1; pk < pk2; pk++) {
        // consider node i in Lk
        i = cindex[pk];
        p1 = cptr[i];
        p2 = p1 + W[elen + i] - 1;
        pn = p1; // scan Ei

        for (h = 0, d = 0, p = p1; p <= p2; p++) {
          e = cindex[p]; // check e is an unabsorbed element

          if (W[w + e] !== 0) {
            // dext = |Le\Lk|
            var dext = W[w + e] - mark;

            if (dext > 0) {
              // sum up the set differences
              d += dext; // keep e in Ei

              cindex[pn++] = e; // compute the hash of node i

              h += e;
            } else {
              // aggressive absorb. e->k
              cptr[e] = csFlip(k); // e is a dead element

              W[w + e] = 0;
            }
          }
        } // W[elen + i] = |Ei|


        W[elen + i] = pn - p1 + 1;
        var p3 = pn;
        var p4 = p1 + W[len + i]; // prune edges in Ai

        for (p = p2 + 1; p < p4; p++) {
          j = cindex[p]; // check node j dead or in Lk

          var nvj = W[nv + j];

          if (nvj <= 0) {
            continue;
          } // degree(i) += |j|


          d += nvj; // place j in node list of i

          cindex[pn++] = j; // compute hash for node i

          h += j;
        } // check for mass elimination


        if (d === 0) {
          // absorb i into k
          cptr[i] = csFlip(k);
          nvi = -W[nv + i]; // |Lk| -= |i|

          dk -= nvi; // |k| += W[nv + i]

          nvk += nvi;
          nel += nvi;
          W[nv + i] = 0; // node i is dead

          W[elen + i] = -1;
        } else {
          // update degree(i)
          W[degree + i] = Math.min(W[degree + i], d); // move first node to end

          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei

          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei

          cindex[p1] = k; // new len of adj. list of node i

          W[len + i] = pn - p1 + 1; // finalize hash of i

          h = (h < 0 ? -h : h) % n; // place i in hash bucket

          W[next + i] = W[hhead + h];
          W[hhead + h] = i; // save hash of i in last[i]

          last[i] = h;
        }
      } // finalize |Lk|


      W[degree + k] = dk;
      lemax = Math.max(lemax, dk); // clear w

      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
      // If two nodes have identical adjacency lists, their hash functions wil be identical.

      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check i is dead, skip it

        if (W[nv + i] >= 0) {
          continue;
        } // scan hash bucket of node i


        h = last[i];
        i = W[hhead + h]; // hash bucket will be empty

        W[hhead + h] = -1;

        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {
          ln = W[len + i];
          eln = W[elen + i];

          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {
            W[w + cindex[p]] = mark;
          }

          var jlast = i; // compare i with all j

          for (j = W[next + i]; j !== -1;) {
            var ok = W[len + j] === ln && W[elen + j] === eln;

            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
              // compare i and j
              if (W[w + cindex[p]] !== mark) {
                ok = 0;
              }
            } // check i and j are identical


            if (ok) {
              // absorb j into i
              cptr[j] = csFlip(i);
              W[nv + i] += W[nv + j];
              W[nv + j] = 0; // node j is dead

              W[elen + j] = -1; // delete j from hash bucket

              j = W[next + j];
              W[next + jlast] = j;
            } else {
              // j and i are different
              jlast = j;
              j = W[next + j];
            }
          }
        }
      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.


      for (p = pk1, pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check  i is dead, skip it

        if ((nvi = -W[nv + i]) <= 0) {
          continue;
        } // restore W[nv + i]


        W[nv + i] = nvi; // compute external degree(i)

        d = W[degree + i] + dk - nvi;
        d = Math.min(d, n - nel - nvi);

        if (W[head + d] !== -1) {
          last[W[head + d]] = i;
        } // put i back in degree list


        W[next + i] = W[head + d];
        last[i] = -1;
        W[head + d] = i; // find new minimum degree

        mindeg = Math.min(mindeg, d);
        W[degree + i] = d; // place i in Lk

        cindex[p++] = i;
      } // # nodes absorbed into k


      W[nv + k] = nvk; // length of adj list of element k

      if ((W[len + k] = p - pk1) === 0) {
        // k is a root of the tree
        cptr[k] = -1; // k is now a dead element

        W[w + k] = 0;
      }

      if (elenk !== 0) {
        // free unused space in Lk
        cnz = p;
      }
    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left
    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
    // is computed. The tree is restored by unflipping all of ptr.
    // fix assembly tree


    for (i = 0; i < n; i++) {
      cptr[i] = csFlip(cptr[i]);
    }

    for (j = 0; j <= n; j++) {
      W[head + j] = -1;
    } // place unordered nodes in lists


    for (j = n; j >= 0; j--) {
      // skip if j is an element
      if (W[nv + j] > 0) {
        continue;
      } // place j in list of its parent


      W[next + j] = W[head + cptr[j]];
      W[head + cptr[j]] = j;
    } // place elements in lists


    for (e = n; e >= 0; e--) {
      // skip unless e is an element
      if (W[nv + e] <= 0) {
        continue;
      }

      if (cptr[e] !== -1) {
        // place e in list of its parent
        W[next + e] = W[head + cptr[e]];
        W[head + cptr[e]] = e;
      }
    } // postorder the assembly tree


    for (k = 0, i = 0; i <= n; i++) {
      if (cptr[i] === -1) {
        k = csTdfs(i, k, W, head, next, P, w);
      }
    } // remove last item in array


    P.splice(P.length - 1, 1); // return P

    return P;
  };
  /**
   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
   *
   * Order: 0
   *   A natural ordering P=null matrix is returned.
   *
   * Order: 1
   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
   *   P = M + M'
   *
   * Order: 2
   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
   *   P = M' * M
   *
   * Order: 3
   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
   *   P = M' * M
   */

  function _createTargetMatrix(order, a, m, n, dense) {
    // compute A'
    var at = transpose(a); // check order = 1, matrix must be square

    if (order === 1 && n === m) {
      // C = A + A'
      return add(a, at);
    } // check order = 2, drop dense columns from M'


    if (order === 2) {
      // transpose arrays
      var tindex = at._index;
      var tptr = at._ptr; // new column index

      var p2 = 0; // loop A' columns (rows)

      for (var j = 0; j < m; j++) {
        // column j of AT starts here
        var p = tptr[j]; // new column j starts here

        tptr[j] = p2; // skip dense col j

        if (tptr[j + 1] - p > dense) {
          continue;
        } // map rows in column j of A


        for (var p1 = tptr[j + 1]; p < p1; p++) {
          tindex[p2++] = tindex[p];
        }
      } // finalize AT


      tptr[m] = p2; // recreate A from new transpose matrix

      a = transpose(at); // use A' * A

      return multiply(at, a);
    } // use A' * A, square or rectangular matrix


    return multiply(at, a);
  }
  /**
   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
   *
   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
   */


  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
    // Initialize quotient graph
    for (var k = 0; k < n; k++) {
      W[len + k] = cptr[k + 1] - cptr[k];
    }

    W[len + n] = 0; // initialize workspace

    for (var i = 0; i <= n; i++) {
      // degree list i is empty
      W[head + i] = -1;
      last[i] = -1;
      W[next + i] = -1; // hash list i is empty

      W[hhead + i] = -1; // node i is just one node

      W[nv + i] = 1; // node i is alive

      W[w + i] = 1; // Ek of node i is empty

      W[elen + i] = 0; // degree of node i

      W[degree + i] = W[len + i];
    } // clear w


    var mark = _wclear(0, 0, W, w, n); // n is a dead element


    W[elen + n] = -2; // n is a root of assembly tree

    cptr[n] = -1; // n is a dead element

    W[w + n] = 0; // return mark

    return mark;
  }
  /**
   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with
   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
   * output permutation p.
   */


  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
    // result
    var nel = 0; // loop columns

    for (var i = 0; i < n; i++) {
      // degree @ i
      var d = W[degree + i]; // check node i is empty

      if (d === 0) {
        // element i is dead
        W[elen + i] = -2;
        nel++; // i is a root of assembly tree

        cptr[i] = -1;
        W[w + i] = 0;
      } else if (d > dense) {
        // absorb i into element n
        W[nv + i] = 0; // node i is dead

        W[elen + i] = -1;
        nel++;
        cptr[i] = csFlip(n);
        W[nv + n]++;
      } else {
        var h = W[head + d];

        if (h !== -1) {
          last[h] = i;
        } // put node i in degree list d


        W[next + i] = W[head + d];
        W[head + d] = i;
      }
    }

    return nel;
  }

  function _wclear(mark, lemax, W, w, n) {
    if (mark < 2 || mark + lemax < 0) {
      for (var k = 0; k < n; k++) {
        if (W[w + k] !== 0) {
          W[w + k] = 1;
        }
      }

      mark = 2;
    } // at this point, W [0..n-1] < mark holds


    return mark;
  }

  function _diag(i, j) {
    return i !== j;
  }
});
// CONCATENATED MODULE: ./src/function/algebra/sparse/csLeaf.js
/**
 * This function determines if j is a leaf of the ith row subtree.
 * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
 *
 * @param {Number}  i               The ith row subtree
 * @param {Number}  j               The node to test
 * @param {Array}   w               The workspace array
 * @param {Number}  first           The index offset within the workspace for the first array
 * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
 * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
 * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
 *
 * @return {Object}
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {
  var s, sparent; // our result

  var jleaf = 0;
  var q; // check j is a leaf

  if (i <= j || w[first + j] <= w[maxfirst + i]) {
    return -1;
  } // update max first[j] seen so far


  w[maxfirst + i] = w[first + j]; // jprev = previous leaf of ith subtree

  var jprev = w[prevleaf + i];
  w[prevleaf + i] = j; // check j is first or subsequent leaf

  if (jprev === -1) {
    // 1st leaf, q = root of ith subtree
    jleaf = 1;
    q = i;
  } else {
    // update jleaf
    jleaf = 2; // q = least common ancester (jprev,j)

    for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]) {
      ;
    }

    for (s = jprev; s !== q; s = sparent) {
      // path compression
      sparent = w[ancestor + s];
      w[ancestor + s] = q;
    }
  }

  return {
    jleaf: jleaf,
    q: q
  };
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csCounts.js


var csCounts_name = 'csCounts';
var csCounts_dependencies = ['transpose'];
var createCsCounts =
/* #__PURE__ */
Object(factory["a" /* factory */])(csCounts_name, csCounts_dependencies, function (_ref) {
  var transpose = _ref.transpose;

  /**
   * Computes the column counts using the upper triangular part of A.
   * It transposes A internally, none of the input parameters are modified.
   *
   * @param {Matrix} a           The sparse matrix A
   *
   * @param {Matrix} ata         Count the columns of A'A instead
   *
   * @return                     An array of size n of the column counts or null on error
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  return function (a, parent, post, ata) {
    // check inputs
    if (!a || !parent || !post) {
      return null;
    } // a matrix arrays


    var asize = a._size; // rows and columns

    var m = asize[0];
    var n = asize[1]; // variables

    var i, j, k, J, p, p0, p1; // workspace size

    var s = 4 * n + (ata ? n + m + 1 : 0); // allocate workspace

    var w = []; // (s)

    var ancestor = 0; // first n entries

    var maxfirst = n; // next n entries

    var prevleaf = 2 * n; // next n entries

    var first = 3 * n; // next n entries

    var head = 4 * n; // next n + 1 entries (used when ata is true)

    var next = 5 * n + 1; // last entries in workspace
    // clear workspace w[0..s-1]

    for (k = 0; k < s; k++) {
      w[k] = -1;
    } // allocate result


    var colcount = []; // (n)
    // AT = A'

    var at = transpose(a); // at arrays

    var tindex = at._index;
    var tptr = at._ptr; // find w[first + j]

    for (k = 0; k < n; k++) {
      j = post[k]; // colcount[j]=1 if j is a leaf

      colcount[j] = w[first + j] === -1 ? 1 : 0;

      for (; j !== -1 && w[first + j] === -1; j = parent[j]) {
        w[first + j] = k;
      }
    } // initialize ata if needed


    if (ata) {
      // invert post
      for (k = 0; k < n; k++) {
        w[post[k]] = k;
      } // loop rows (columns in AT)


      for (i = 0; i < m; i++) {
        // values in column i of AT
        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {
          k = Math.min(k, w[tindex[p]]);
        } // place row i in linked list k


        w[next + i] = w[head + k];
        w[head + k] = i;
      }
    } // each node in its own set


    for (i = 0; i < n; i++) {
      w[ancestor + i] = i;
    }

    for (k = 0; k < n; k++) {
      // j is the kth node in postordered etree
      j = post[k]; // check j is not a root

      if (parent[j] !== -1) {
        colcount[parent[j]]--;
      } // J=j for LL'=A case


      for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {
        for (p = tptr[J]; p < tptr[J + 1]; p++) {
          i = tindex[p];
          var r = csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor); // check A(i,j) is in skeleton

          if (r.jleaf >= 1) {
            colcount[j]++;
          } // check account for overlap in q


          if (r.jleaf === 2) {
            colcount[r.q]--;
          }
        }
      }

      if (parent[j] !== -1) {
        w[ancestor + j] = parent[j];
      }
    } // sum up colcount's of each child


    for (j = 0; j < n; j++) {
      if (parent[j] !== -1) {
        colcount[parent[j]] += colcount[j];
      }
    }

    return colcount;
  };
});
// CONCATENATED MODULE: ./src/function/algebra/sparse/csSqr.js






var csSqr_name = 'csSqr';
var csSqr_dependencies = ['add', 'multiply', 'transpose'];
var createCsSqr =
/* #__PURE__ */
Object(factory["a" /* factory */])(csSqr_name, csSqr_dependencies, function (_ref) {
  var add = _ref.add,
      multiply = _ref.multiply,
      transpose = _ref.transpose;
  var csAmd = createCsAmd({
    add: add,
    multiply: multiply,
    transpose: transpose
  });
  var csCounts = createCsCounts({
    transpose: transpose
  });
  /**
   * Symbolic ordering and analysis for QR and LU decompositions.
   *
   * @param {Number}  order           The ordering strategy (see csAmd for more details)
   * @param {Matrix}  a               The A matrix
   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
   *                                  symbolic ordering and analysis for LU decomposition (false)
   *
   * @return {Object}                 The Symbolic ordering and analysis for matrix A
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */

  return function csSqr(order, a, qr) {
    // a arrays
    var aptr = a._ptr;
    var asize = a._size; // columns

    var n = asize[1]; // vars

    var k; // symbolic analysis result

    var s = {}; // fill-reducing ordering

    s.q = csAmd(order, a); // validate results

    if (order && !s.q) {
      return null;
    } // QR symbolic analysis


    if (qr) {
      // apply permutations if needed
      var c = order ? csPermute(a, null, s.q, 0) : a; // etree of C'*C, where C=A(:,q)

      s.parent = csEtree(c, 1); // post order elimination tree

      var post = csPost(s.parent, n); // col counts chol(C'*C)

      s.cp = csCounts(c, s.parent, post, 1); // check we have everything needed to calculate number of nonzero elements

      if (c && s.parent && s.cp && _vcount(c, s)) {
        // calculate number of nonzero elements
        for (s.unz = 0, k = 0; k < n; k++) {
          s.unz += s.cp[k];
        }
      }
    } else {
      // for LU factorization only, guess nnz(L) and nnz(U)
      s.unz = 4 * aptr[n] + n;
      s.lnz = s.unz;
    } // return result S


    return s;
  };
  /**
   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
   */

  function _vcount(a, s) {
    // a arrays
    var aptr = a._ptr;
    var aindex = a._index;
    var asize = a._size; // rows & columns

    var m = asize[0];
    var n = asize[1]; // initialize s arrays

    s.pinv = []; // (m + n)

    s.leftmost = []; // (m)
    // vars

    var parent = s.parent;
    var pinv = s.pinv;
    var leftmost = s.leftmost; // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries

    var w = []; // (m + 3 * n)

    var next = 0;
    var head = m;
    var tail = m + n;
    var nque = m + 2 * n; // vars

    var i, k, p, p0, p1; // initialize w

    for (k = 0; k < n; k++) {
      // queue k is empty
      w[head + k] = -1;
      w[tail + k] = -1;
      w[nque + k] = 0;
    } // initialize row arrays


    for (i = 0; i < m; i++) {
      leftmost[i] = -1;
    } // loop columns backwards


    for (k = n - 1; k >= 0; k--) {
      // values & index for column k
      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
        // leftmost[i] = min(find(A(i,:)))
        leftmost[aindex[p]] = k;
      }
    } // scan rows in reverse order


    for (i = m - 1; i >= 0; i--) {
      // row i is not yet ordered
      pinv[i] = -1;
      k = leftmost[i]; // check row i is empty

      if (k === -1) {
        continue;
      } // first row in queue k


      if (w[nque + k]++ === 0) {
        w[tail + k] = i;
      } // put i at head of queue k


      w[next + i] = w[head + k];
      w[head + k] = i;
    }

    s.lnz = 0;
    s.m2 = m; // find row permutation and nnz(V)

    for (k = 0; k < n; k++) {
      // remove row i from queue k
      i = w[head + k]; // count V(k,k) as nonzero

      s.lnz++; // add a fictitious row

      if (i < 0) {
        i = s.m2++;
      } // associate row i with V(:,k)


      pinv[i] = k; // skip if V(k+1:m,k) is empty

      if (--nque[k] <= 0) {
        continue;
      } // nque[k] is nnz (V(k+1:m,k))


      s.lnz += w[nque + k]; // move all rows to parent of k

      var pa = parent[k];

      if (pa !== -1) {
        if (w[nque + pa] === 0) {
          w[tail + pa] = w[tail + k];
        }

        w[next + w[tail + k]] = w[head + pa];
        w[head + pa] = w[next + i];
        w[nque + pa] += w[nque + k];
      }
    }

    for (i = 0; i < m; i++) {
      if (pinv[i] < 0) {
        pinv[i] = k++;
      }
    }

    return true;
  }
});
// CONCATENATED MODULE: ./src/function/algebra/sparse/csMarked.js
/**
 * Checks if the node at w[j] is marked
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csMarked(w, j) {
  // check node is marked
  return w[j] < 0;
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csMark.js

/**
 * Marks the node at w[j]
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csMark(w, j) {
  // mark w[j]
  w[j] = csFlip(w[j]);
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csUnflip.js

/**
 * Flips the value if it is negative of returns the same value otherwise.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csUnflip(i) {
  // flip the value if it is negative
  return i < 0 ? csFlip(i) : i;
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csDfs.js



/**
 * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
 * at nodes in B (see csReach()).
 *
 * @param {Number}  j               The starting node for the DFS algorithm
 * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
 * @param {Number}  top             Start index in stack xi[top..n-1]
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
 *
 * @return {Number}                 New value of top
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csDfs(j, g, top, xi, pinv) {
  // g arrays
  var index = g._index;
  var ptr = g._ptr;
  var size = g._size; // columns

  var n = size[1]; // vars

  var i, p, p2; // initialize head

  var head = 0; // initialize the recursion stack

  xi[0] = j; // loop

  while (head >= 0) {
    // get j from the top of the recursion stack
    j = xi[head]; // apply permutation vector

    var jnew = pinv ? pinv[j] : j; // check node j is marked

    if (!csMarked(ptr, j)) {
      // mark node j as visited
      csMark(ptr, j); // update stack (last n entries in xi)

      xi[n + head] = jnew < 0 ? 0 : csUnflip(ptr[jnew]);
    } // node j done if no unvisited neighbors


    var done = 1; // examine all neighbors of j, stack (last n entries in xi)

    for (p = xi[n + head], p2 = jnew < 0 ? 0 : csUnflip(ptr[jnew + 1]); p < p2; p++) {
      // consider neighbor node i
      i = index[p]; // check we have visited node i, skip it

      if (csMarked(ptr, i)) {
        continue;
      } // pause depth-first search of node j, update stack (last n entries in xi)


      xi[n + head] = p; // start dfs at node i

      xi[++head] = i; // node j is not done

      done = 0; // break, to start dfs(i)

      break;
    } // check depth-first search at node j is done


    if (done) {
      // remove j from the recursion stack
      head--; // and place in the output stack

      xi[--top] = j;
    }
  }

  return top;
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csReach.js



/**
 * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1
 * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
 * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
 *
 * @param {Matrix}  g               The G matrix
 * @param {Matrix}  b               The B matrix
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector
 *
 * @return {Number}                 The index for the nonzero pattern
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csReach(g, b, k, xi, pinv) {
  // g arrays
  var gptr = g._ptr;
  var gsize = g._size; // b arrays

  var bindex = b._index;
  var bptr = b._ptr; // columns

  var n = gsize[1]; // vars

  var p, p0, p1; // initialize top

  var top = n; // loop column indeces in B

  for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
    // node i
    var i = bindex[p]; // check node i is marked

    if (!csMarked(gptr, i)) {
      // start a dfs at unmarked node i
      top = csDfs(i, g, top, xi, pinv);
    }
  } // loop columns from top -> n - 1


  for (p = top; p < n; p++) {
    // restore G
    csMark(gptr, xi[p]);
  }

  return top;
}
// CONCATENATED MODULE: ./src/function/algebra/sparse/csSpsolve.js


var csSpsolve_name = 'csSpsolve';
var csSpsolve_dependencies = ['divideScalar', 'multiply', 'subtract'];
var createCsSpsolve =
/* #__PURE__ */
Object(factory["a" /* factory */])(csSpsolve_name, csSpsolve_dependencies, function (_ref) {
  var divideScalar = _ref.divideScalar,
      multiply = _ref.multiply,
      subtract = _ref.subtract;

  /**
   * The function csSpsolve() computes the solution to G * x = bk, where bk is the
   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U
   * is upper triangular with the diagonal entry as the last entry in each column.
   *
   * @param {Matrix}  g               The G matrix
   * @param {Matrix}  b               The B matrix
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   x               The soluton to the linear system G * x = b
   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
   * @param {boolean} lo              The lower (true) upper triangular (false) flag
   *
   * @return {Number}                 The index for the nonzero pattern
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  return function csSpsolve(g, b, k, xi, x, pinv, lo) {
    // g arrays
    var gvalues = g._values;
    var gindex = g._index;
    var gptr = g._ptr;
    var gsize = g._size; // columns

    var n = gsize[1]; // b arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr; // vars

    var p, p0, p1, q; // xi[top..n-1] = csReach(B(:,k))

    var top = csReach(g, b, k, xi, pinv); // clear x

    for (p = top; p < n; p++) {
      x[xi[p]] = 0;
    } // scatter b


    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
      x[bindex[p]] = bvalues[p];
    } // loop columns


    for (var px = top; px < n; px++) {
      // x array index for px
      var j = xi[px]; // apply permutation vector (U x = b), j maps to column J of G

      var J = pinv ? pinv[j] : j; // check column J is empty

      if (J < 0) {
        continue;
      } // column value indeces in G, p0 <= p < p1


      p0 = gptr[J];
      p1 = gptr[J + 1]; // x(j) /= G(j,j)

      x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]); // first entry L(j,j)

      p = lo ? p0 + 1 : p0;
      q = lo ? p1 : p1 - 1; // loop

      for (; p < q; p++) {
        // row
        var i = gindex[p]; // x(i) -= G(i,j) * x(j)

        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
      }
    } // return top of stack


    return top;
  };
});
// CONCATENATED MODULE: ./src/function/algebra/sparse/csLu.js


var csLu_name = 'csLu';
var csLu_dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
var createCsLu =
/* #__PURE__ */
Object(factory["a" /* factory */])(csLu_name, csLu_dependencies, function (_ref) {
  var abs = _ref.abs,
      divideScalar = _ref.divideScalar,
      multiply = _ref.multiply,
      subtract = _ref.subtract,
      larger = _ref.larger,
      largerEq = _ref.largerEq,
      SparseMatrix = _ref.SparseMatrix;
  var csSpsolve = createCsSpsolve({
    divideScalar: divideScalar,
    multiply: multiply,
    subtract: subtract
  });
  /**
   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L
   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
   * L * U = A(p, q), where p is the inverse of pinv.
   *
   * @param {Matrix}  m               The A Matrix to factorize
   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing
   *                                  column ordering q
   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Number}                 The numeric LU factorization of A or null
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */

  return function csLu(m, s, tol) {
    // validate input
    if (!m) {
      return null;
    } // m arrays


    var size = m._size; // columns

    var n = size[1]; // symbolic analysis result

    var q;
    var lnz = 100;
    var unz = 100; // update symbolic analysis parameters

    if (s) {
      q = s.q;
      lnz = s.lnz || lnz;
      unz = s.unz || unz;
    } // L arrays


    var lvalues = []; // (lnz)

    var lindex = []; // (lnz)

    var lptr = []; // (n + 1)
    // L

    var L = new SparseMatrix({
      values: lvalues,
      index: lindex,
      ptr: lptr,
      size: [n, n]
    }); // U arrays

    var uvalues = []; // (unz)

    var uindex = []; // (unz)

    var uptr = []; // (n + 1)
    // U

    var U = new SparseMatrix({
      values: uvalues,
      index: uindex,
      ptr: uptr,
      size: [n, n]
    }); // inverse of permutation vector

    var pinv = []; // (n)
    // vars

    var i, p; // allocate arrays

    var x = []; // (n)

    var xi = []; // (2 * n)
    // initialize variables

    for (i = 0; i < n; i++) {
      // clear workspace
      x[i] = 0; // no rows pivotal yet

      pinv[i] = -1; // no cols of L yet

      lptr[i + 1] = 0;
    } // reset number of nonzero elements in L and U


    lnz = 0;
    unz = 0; // compute L(:,k) and U(:,k)

    for (var k = 0; k < n; k++) {
      // update ptr
      lptr[k] = lnz;
      uptr[k] = unz; // apply column permutations if needed

      var col = q ? q[k] : k; // solve triangular system, x = L\A(:,col)

      var top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot

      var ipiv = -1;
      var a = -1; // loop xi[] from top -> n

      for (p = top; p < n; p++) {
        // x[i] is nonzero
        i = xi[p]; // check row i is not yet pivotal

        if (pinv[i] < 0) {
          // absolute value of x[i]
          var xabs = abs(x[i]); // check absoulte value is greater than pivot value

          if (larger(xabs, a)) {
            // largest pivot candidate so far
            a = xabs;
            ipiv = i;
          }
        } else {
          // x(i) is the entry U(pinv[i],k)
          uindex[unz] = pinv[i];
          uvalues[unz++] = x[i];
        }
      } // validate we found a valid pivot


      if (ipiv === -1 || a <= 0) {
        return null;
      } // update actual pivot column, give preference to diagonal value


      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {
        ipiv = col;
      } // the chosen pivot


      var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)

      uindex[unz] = k;
      uvalues[unz++] = pivot; // ipiv is the kth pivot row

      pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1

      lindex[lnz] = ipiv;
      lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot

      for (p = top; p < n; p++) {
        // row
        i = xi[p]; // check x(i) is an entry in L(:,k)

        if (pinv[i] < 0) {
          // save unpermuted row in L
          lindex[lnz] = i; // scale pivot column

          lvalues[lnz++] = divideScalar(x[i], pivot);
        } // x[0..n-1] = 0 for next k


        x[i] = 0;
      }
    } // update ptr


    lptr[n] = lnz;
    uptr[n] = unz; // fix row indices of L for final pinv

    for (p = 0; p < lnz; p++) {
      lindex[p] = pinv[lindex[p]];
    } // trim arrays


    lvalues.splice(lnz, lvalues.length - lnz);
    lindex.splice(lnz, lindex.length - lnz);
    uvalues.splice(unz, uvalues.length - unz);
    uindex.splice(unz, uindex.length - unz); // return LU factor

    return {
      L: L,
      U: U,
      pinv: pinv
    };
  };
});
// CONCATENATED MODULE: ./src/function/algebra/decomposition/slu.js




var slu_name = 'slu';
var slu_dependencies = ['typed', 'abs', 'add', 'multiply', 'transpose', 'divideScalar', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
var createSlu =
/* #__PURE__ */
Object(factory["a" /* factory */])(slu_name, slu_dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      add = _ref.add,
      multiply = _ref.multiply,
      transpose = _ref.transpose,
      divideScalar = _ref.divideScalar,
      subtract = _ref.subtract,
      larger = _ref.larger,
      largerEq = _ref.largerEq,
      SparseMatrix = _ref.SparseMatrix;
  var csSqr = createCsSqr({
    add: add,
    multiply: multiply,
    transpose: transpose
  });
  var csLu = createCsLu({
    abs: abs,
    divideScalar: divideScalar,
    multiply: multiply,
    subtract: subtract,
    larger: larger,
    largerEq: largerEq,
    SparseMatrix: SparseMatrix
  });
  /**
   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
   *
   * `P * A * Q = L * U`
   *
   * Syntax:
   *
   *    math.slu(A, order, threshold)
   *
   * Examples:
   *
   *    const A = math.sparse([[4,3], [6, 3]])
   *    math.slu(A, 1, 0.001)
   *    // returns:
   *    // {
   *    //   L: [[1, 0], [1.5, 1]]
   *    //   U: [[4, 3], [0, -1.5]]
   *    //   p: [0, 1]
   *    //   q: [0, 1]
   *    // }
   *
   * See also:
   *
   *    lup, lsolve, usolve, lusolve
   *
   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
   * @param {Number}       order          The Symbolic Ordering and Analysis order:
   *                                       0 - Natural ordering, no permutation vector q is returned
   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.
   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
   *                                           A dense row is a row with more than 10*sqr(columns) entries.
   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
   */

  return typed(slu_name, {
    'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {
      // verify order
      if (!Object(utils_number["i" /* isInteger */])(order) || order < 0 || order > 3) {
        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
      } // verify threshold


      if (threshold < 0 || threshold > 1) {
        throw new Error('Partial pivoting threshold must be a number from 0 to 1');
      } // perform symbolic ordering and analysis


      var s = csSqr(order, a, false); // perform lu decomposition

      var f = csLu(a, s, threshold); // return decomposition

      return {
        L: f.L,
        U: f.U,
        p: f.pinv,
        q: s.q,
        toString: function toString() {
          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
        }
      };
    }
  });
});
// CONCATENATED MODULE: ./src/function/algebra/sparse/csIpvec.js
/**
 * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
 *
 * @param {Array} p           The permutation vector of length n. null value denotes identity
 * @param {Array} b           The input vector
 *
 * @return {Array}            The output vector x = P'b
 */
function csIpvec(p, b) {
  // vars
  var k;
  var n = b.length;
  var x = []; // check permutation vector was provided, p = null denotes identity

  if (p) {
    // loop vector
    for (k = 0; k < n; k++) {
      // apply permutation
      x[p[k]] = b[k];
    }
  } else {
    // loop vector
    for (k = 0; k < n; k++) {
      // x[i] = b[i]
      x[k] = b[k];
    }
  }

  return x;
}
// CONCATENATED MODULE: ./src/function/algebra/solver/lusolve.js




var lusolve_name = 'lusolve';
var lusolve_dependencies = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];
var createLusolve =
/* #__PURE__ */
Object(factory["a" /* factory */])(lusolve_name, lusolve_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      lup = _ref.lup,
      slu = _ref.slu,
      usolve = _ref.usolve,
      lsolve = _ref.lsolve,
      DenseMatrix = _ref.DenseMatrix;
  var solveValidation = createSolveValidation({
    DenseMatrix: DenseMatrix
  });
  /**
   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
   *
   * Syntax:
   *
   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
   *
   * Examples:
   *
   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]
   *
   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]
   *
   *    const f = math.lup(m)
   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = math.lusolve(a, b)  // [[2], [5]]
   *
   * See also:
   *
   *    lup, slu, lsolve, usolve
   *
   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
   * @param {Matrix | Array} b               Column Vector
   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
   *
   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
   */

  return typed(lusolve_name, {
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      // convert a to matrix
      a = matrix(a); // matrix lup decomposition

      var d = lup(a); // solve

      var x = _lusolve(d.L, d.U, d.p, null, b); // convert result to array


      return x.valueOf();
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {
      // matrix lup decomposition
      var d = lup(a); // solve

      return _lusolve(d.L, d.U, d.p, null, b);
    },
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {
      // matrix lup decomposition
      var d = lup(a); // solve

      return _lusolve(d.L, d.U, d.p, null, b);
    },
    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {
      // matrix lu decomposition
      var d = slu(a, order, threshold); // solve

      return _lusolve(d.L, d.U, d.p, d.q, b);
    },
    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {
      // solve
      return _lusolve(d.L, d.U, d.p, d.q, b);
    }
  });

  function _toMatrix(a) {
    // check it is a matrix
    if (Object(is["v" /* isMatrix */])(a)) {
      return a;
    } // check array


    if (Object(is["b" /* isArray */])(a)) {
      return matrix(a);
    } // throw


    throw new TypeError('Invalid Matrix LU decomposition');
  }

  function _lusolve(l, u, p, q, b) {
    // verify L, U, P
    l = _toMatrix(l);
    u = _toMatrix(u); // validate matrix and vector

    b = solveValidation(l, b, false); // apply row permutations if needed (b is a DenseMatrix)

    if (p) {
      b._data = csIpvec(p, b._data);
    } // use forward substitution to resolve L * y = b


    var y = lsolve(l, b); // use backward substitution to resolve U * x = y

    var x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)

    if (q) {
      x._data = csIpvec(q, x._data);
    } // return solution


    return x;
  }
});
// CONCATENATED MODULE: ./src/expression/Help.js




var Help_name = 'Help';
var Help_dependencies = ['parse'];
var createHelpClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(Help_name, Help_dependencies, function (_ref) {
  var parse = _ref.parse;

  /**
   * Documentation object
   * @param {Object} doc  Object containing properties:
   *                      {string} name
   *                      {string} category
   *                      {string} description
   *                      {string[]} syntax
   *                      {string[]} examples
   *                      {string[]} seealso
   * @constructor
   */
  function Help(doc) {
    if (!(this instanceof Help)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!doc) throw new Error('Argument "doc" missing');
    this.doc = doc;
  }
  /**
   * Attach type information
   */


  Help.prototype.type = 'Help';
  Help.prototype.isHelp = true;
  /**
   * Generate a string representation of the Help object
   * @return {string} Returns a string
   * @private
   */

  Help.prototype.toString = function () {
    var doc = this.doc || {};
    var desc = '\n';

    if (doc.name) {
      desc += 'Name: ' + doc.name + '\n\n';
    }

    if (doc.category) {
      desc += 'Category: ' + doc.category + '\n\n';
    }

    if (doc.description) {
      desc += 'Description:\n    ' + doc.description + '\n\n';
    }

    if (doc.syntax) {
      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
    }

    if (doc.examples) {
      desc += 'Examples:\n';
      var scope = {};

      for (var i = 0; i < doc.examples.length; i++) {
        var expr = doc.examples[i];
        desc += '    ' + expr + '\n';
        var res = void 0;

        try {
          // note: res can be undefined when `expr` is an empty string
          res = parse(expr).compile().evaluate(scope);
        } catch (e) {
          res = e;
        }

        if (res !== undefined && !Object(is["s" /* isHelp */])(res)) {
          desc += '        ' + Object(utils_string["d" /* format */])(res, {
            precision: 14
          }) + '\n';
        }
      }

      desc += '\n';
    }

    if (doc.seealso && doc.seealso.length) {
      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
    }

    return desc;
  };
  /**
   * Export the help object to JSON
   */


  Help.prototype.toJSON = function () {
    var obj = Object(utils_object["a" /* clone */])(this.doc);
    obj.mathjs = 'Help';
    return obj;
  };
  /**
   * Instantiate a Help object from a JSON object
   * @param {Object} json
   * @returns {Help} Returns a new Help object
   */


  Help.fromJSON = function (json) {
    var doc = {};

    for (var prop in json) {
      if (prop !== 'mathjs') {
        // ignore mathjs field
        doc[prop] = json[prop];
      }
    }

    return new Help(doc);
  };
  /**
   * Returns a string representation of the Help object
   */


  Help.prototype.valueOf = Help.prototype.toString;
  return Help;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/type/chain/Chain.js




var Chain_name = 'Chain';
var Chain_dependencies = ['?on', 'math'];
var createChainClass =
/* #__PURE__ */
Object(factory["a" /* factory */])(Chain_name, Chain_dependencies, function (_ref) {
  var on = _ref.on,
      math = _ref.math;

  /**
   * @constructor Chain
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing chain.done(), which will return
   * the final value.
   *
   * The Chain has a number of special functions:
   * - done()             Finalize the chained operation and return the
   *                      chain's value.
   * - valueOf()          The same as done()
   * - toString()         Returns a string representation of the chain's value.
   *
   * @param {*} [value]
   */
  function Chain(value) {
    if (!(this instanceof Chain)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (Object(is["h" /* isChain */])(value)) {
      this.value = value.value;
    } else {
      this.value = value;
    }
  }
  /**
   * Attach type information
   */


  Chain.prototype.type = 'Chain';
  Chain.prototype.isChain = true;
  /**
   * Close the chain. Returns the final value.
   * Does the same as method valueOf()
   * @returns {*} value
   */

  Chain.prototype.done = function () {
    return this.value;
  };
  /**
   * Close the chain. Returns the final value.
   * Does the same as method done()
   * @returns {*} value
   */


  Chain.prototype.valueOf = function () {
    return this.value;
  };
  /**
   * Get a string representation of the value in the chain
   * @returns {string}
   */


  Chain.prototype.toString = function () {
    return Object(utils_string["d" /* format */])(this.value);
  };
  /**
   * Get a JSON representation of the chain
   * @returns {Object}
   */


  Chain.prototype.toJSON = function () {
    return {
      mathjs: 'Chain',
      value: this.value
    };
  };
  /**
   * Instantiate a Chain from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "Chain", value: ...}`,
   *                       where mathjs is optional
   * @returns {Chain}
   */


  Chain.fromJSON = function (json) {
    return new Chain(json.value);
  };
  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {Function} fn      The function to be proxied
   *                           If fn is no function, it is silently ignored.
   * @private
   */


  function createProxy(name, fn) {
    if (typeof fn === 'function') {
      Chain.prototype[name] = chainify(fn);
    }
  }
  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {function} resolver   The function resolving with the
   *                              function to be proxied
   * @private
   */


  function createLazyProxy(name, resolver) {
    Object(utils_object["h" /* lazy */])(Chain.prototype, name, function outerResolver() {
      var fn = resolver();

      if (typeof fn === 'function') {
        return chainify(fn);
      }

      return undefined; // if not a function, ignore
    });
  }
  /**
   * Make a function chainable
   * @param {function} fn
   * @return {Function} chain function
   * @private
   */


  function chainify(fn) {
    return function () {
      var args = [this.value]; // `this` will be the context of a Chain instance

      for (var i = 0; i < arguments.length; i++) {
        args[i + 1] = arguments[i];
      }

      return new Chain(fn.apply(fn, args));
    };
  }
  /**
   * Create a proxy for a single method, or an object with multiple methods.
   * Example usage:
   *
   *   Chain.createProxy('add', function add (x, y) {...})
   *   Chain.createProxy({
   *     add:      function add (x, y) {...},
   *     subtract: function subtract (x, y) {...}
   *   }
   *
   * @param {string | Object} arg0   A name (string), or an object with
   *                                 functions
   * @param {*} [arg1]               A function, when arg0 is a name
   */


  Chain.createProxy = function (arg0, arg1) {
    if (typeof arg0 === 'string') {
      // createProxy(name, value)
      createProxy(arg0, arg1);
    } else {
      var _loop = function _loop(_name) {
        if (Object(utils_object["f" /* hasOwnProperty */])(arg0, _name) && excludedNames[_name] === undefined) {
          createLazyProxy(_name, function () {
            return arg0[_name];
          });
        }
      };

      // createProxy(values)
      for (var _name in arg0) {
        _loop(_name);
      }
    }
  };

  var excludedNames = {
    expression: true,
    docs: true,
    type: true,
    classes: true,
    json: true,
    error: true,
    isChain: true // conflicts with the property isChain of a Chain instance

  }; // create proxy for everything that is in math.js

  Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.

  if (on) {
    on('import', function (name, resolver, path) {
      if (!path) {
        // an imported function (not a data type or something special)
        createLazyProxy(name, resolver);
      }
    });
  }

  return Chain;
}, {
  isClass: true
});
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/bignumber.js
var bignumberDocs = {
  name: 'bignumber',
  category: 'Construction',
  syntax: ['bignumber(x)'],
  description: 'Create a big number from a number or string.',
  examples: ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
  seealso: ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/typeOf.js
var typeOfDocs = {
  name: 'typeOf',
  category: 'Utils',
  syntax: ['typeOf(x)'],
  description: 'Get the type of a variable.',
  examples: ['typeOf(3.5)', 'typeOf(2 - 4i)', 'typeOf(45 deg)', 'typeOf("hello world")'],
  seealso: ['getMatrixDataType']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/isZero.js
var isZeroDocs = {
  name: 'isZero',
  category: 'Utils',
  syntax: ['isZero(x)'],
  description: 'Test whether a value is zero.',
  examples: ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/isPrime.js
var isPrimeDocs = {
  name: 'isPrime',
  category: 'Utils',
  syntax: ['isPrime(x)'],
  description: 'Test whether a value is prime: has no divisors other than itself and one.',
  examples: ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/isPositive.js
var isPositiveDocs = {
  name: 'isPositive',
  category: 'Utils',
  syntax: ['isPositive(x)'],
  description: 'Test whether a value is positive: larger than zero.',
  examples: ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/isNumeric.js
var isNumericDocs = {
  name: 'isNumeric',
  category: 'Utils',
  syntax: ['isNumeric(x)'],
  description: 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
  examples: ['isNumeric(2)', 'isNumeric("2")', 'hasNumericValue("2")', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
  seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'hasNumericValue']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/hasNumericValue.js
var hasNumericValueDocs = {
  name: 'hasNumericValue',
  category: 'Utils',
  syntax: ['hasNumericValue(x)'],
  description: 'Test whether a value is an numeric value. ' + 'In case of a string, true is returned if the string contains a numeric value.',
  examples: ['hasNumericValue(2)', 'hasNumericValue("2")', 'isNumeric("2")', 'hasNumericValue(0)', 'hasNumericValue(bignumber(500))', 'hasNumericValue(fraction(0.125))', 'hasNumericValue(2 + 3i)', 'hasNumericValue([2.3, "foo", false])'],
  seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'isNumeric']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/isNegative.js
var isNegativeDocs = {
  name: 'isNegative',
  category: 'Utils',
  syntax: ['isNegative(x)'],
  description: 'Test whether a value is negative: smaller than zero.',
  examples: ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
  seealso: ['isInteger', 'isNumeric', 'isPositive', 'isZero']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/isInteger.js
var isIntegerDocs = {
  name: 'isInteger',
  category: 'Utils',
  syntax: ['isInteger(x)'],
  description: 'Test whether a value is an integer number.',
  examples: ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
  seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/isNaN.js
var isNaNDocs = {
  name: 'isNaN',
  category: 'Utils',
  syntax: ['isNaN(x)'],
  description: 'Test whether a value is NaN (not a number)',
  examples: ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],
  seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/format.js
var formatDocs = {
  name: 'format',
  category: 'Utils',
  syntax: ['format(value)', 'format(value, precision)'],
  description: 'Format a value of any type as string.',
  examples: ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
  seealso: ['print']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/clone.js
var cloneDocs = {
  name: 'clone',
  category: 'Utils',
  syntax: ['clone(x)'],
  description: 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
  examples: ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/units/to.js
var toDocs = {
  name: 'to',
  category: 'Units',
  syntax: ['x to unit', 'to(x, unit)'],
  description: 'Change the unit of a value.',
  examples: ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/tanh.js
var tanhDocs = {
  name: 'tanh',
  category: 'Trigonometry',
  syntax: ['tanh(x)'],
  description: 'Compute the hyperbolic tangent of x in radians.',
  examples: ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
  seealso: ['sinh', 'cosh']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/tan.js
var tanDocs = {
  name: 'tan',
  category: 'Trigonometry',
  syntax: ['tan(x)'],
  description: 'Compute the tangent of x in radians.',
  examples: ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
  seealso: ['atan', 'sin', 'cos']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/sinh.js
var sinhDocs = {
  name: 'sinh',
  category: 'Trigonometry',
  syntax: ['sinh(x)'],
  description: 'Compute the hyperbolic sine of x in radians.',
  examples: ['sinh(0.5)'],
  seealso: ['cosh', 'tanh']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/sech.js
var sechDocs = {
  name: 'sech',
  category: 'Trigonometry',
  syntax: ['sech(x)'],
  description: 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
  examples: ['sech(2)', '1 / cosh(2)'],
  seealso: ['coth', 'csch', 'cosh']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/sec.js
var secDocs = {
  name: 'sec',
  category: 'Trigonometry',
  syntax: ['sec(x)'],
  description: 'Compute the secant of x in radians. Defined as 1/cos(x)',
  examples: ['sec(2)', '1 / cos(2)'],
  seealso: ['cot', 'csc', 'cos']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/csch.js
var cschDocs = {
  name: 'csch',
  category: 'Trigonometry',
  syntax: ['csch(x)'],
  description: 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
  examples: ['csch(2)', '1 / sinh(2)'],
  seealso: ['sech', 'coth', 'sinh']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/csc.js
var cscDocs = {
  name: 'csc',
  category: 'Trigonometry',
  syntax: ['csc(x)'],
  description: 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
  examples: ['csc(2)', '1 / sin(2)'],
  seealso: ['sec', 'cot', 'sin']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/coth.js
var cothDocs = {
  name: 'coth',
  category: 'Trigonometry',
  syntax: ['coth(x)'],
  description: 'Compute the hyperbolic cotangent of x in radians.',
  examples: ['coth(2)', '1 / tanh(2)'],
  seealso: ['sech', 'csch', 'tanh']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/cot.js
var cotDocs = {
  name: 'cot',
  category: 'Trigonometry',
  syntax: ['cot(x)'],
  description: 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
  examples: ['cot(2)', '1 / tan(2)'],
  seealso: ['sec', 'csc', 'tan']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/cosh.js
var coshDocs = {
  name: 'cosh',
  category: 'Trigonometry',
  syntax: ['cosh(x)'],
  description: 'Compute the hyperbolic cosine of x in radians.',
  examples: ['cosh(0.5)'],
  seealso: ['sinh', 'tanh', 'coth']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/cos.js
var cosDocs = {
  name: 'cos',
  category: 'Trigonometry',
  syntax: ['cos(x)'],
  description: 'Compute the cosine of x in radians.',
  examples: ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
  seealso: ['acos', 'sin', 'tan']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/atan2.js
var atan2Docs = {
  name: 'atan2',
  category: 'Trigonometry',
  syntax: ['atan2(y, x)'],
  description: 'Computes the principal value of the arc tangent of y/x in radians.',
  examples: ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
  seealso: ['sin', 'cos', 'tan']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/atanh.js
var atanhDocs = {
  name: 'atanh',
  category: 'Trigonometry',
  syntax: ['atanh(x)'],
  description: 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
  examples: ['atanh(0.5)'],
  seealso: ['acosh', 'asinh']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/atan.js
var atanDocs = {
  name: 'atan',
  category: 'Trigonometry',
  syntax: ['atan(x)'],
  description: 'Compute the inverse tangent of a value in radians.',
  examples: ['atan(0.5)', 'atan(tan(0.5))'],
  seealso: ['tan', 'acos', 'asin']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/asinh.js
var asinhDocs = {
  name: 'asinh',
  category: 'Trigonometry',
  syntax: ['asinh(x)'],
  description: 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
  examples: ['asinh(0.5)'],
  seealso: ['acosh', 'atanh']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/asin.js
var asinDocs = {
  name: 'asin',
  category: 'Trigonometry',
  syntax: ['asin(x)'],
  description: 'Compute the inverse sine of a value in radians.',
  examples: ['asin(0.5)', 'asin(sin(0.5))'],
  seealso: ['sin', 'acos', 'atan']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/asech.js
var asechDocs = {
  name: 'asech',
  category: 'Trigonometry',
  syntax: ['asech(x)'],
  description: 'Calculate the inverse secant of a value.',
  examples: ['asech(0.5)'],
  seealso: ['acsch', 'acoth']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/asec.js
var asecDocs = {
  name: 'asec',
  category: 'Trigonometry',
  syntax: ['asec(x)'],
  description: 'Calculate the inverse secant of a value.',
  examples: ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
  seealso: ['acos', 'acot', 'acsc']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/acsch.js
var acschDocs = {
  name: 'acsch',
  category: 'Trigonometry',
  syntax: ['acsch(x)'],
  description: 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
  examples: ['acsch(0.5)'],
  seealso: ['asech', 'acoth']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/acsc.js
var acscDocs = {
  name: 'acsc',
  category: 'Trigonometry',
  syntax: ['acsc(x)'],
  description: 'Calculate the inverse cotangent of a value.',
  examples: ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],
  seealso: ['csc', 'asin', 'asec']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/acoth.js
var acothDocs = {
  name: 'acoth',
  category: 'Trigonometry',
  syntax: ['acoth(x)'],
  description: 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
  examples: ['acoth(2)', 'acoth(0.5)'],
  seealso: ['acsch', 'asech']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/acot.js
var acotDocs = {
  name: 'acot',
  category: 'Trigonometry',
  syntax: ['acot(x)'],
  description: 'Calculate the inverse cotangent of a value.',
  examples: ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
  seealso: ['cot', 'atan']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/acosh.js
var acoshDocs = {
  name: 'acosh',
  category: 'Trigonometry',
  syntax: ['acosh(x)'],
  description: 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
  examples: ['acosh(1.5)'],
  seealso: ['cosh', 'asinh', 'atanh']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/acos.js
var acosDocs = {
  name: 'acos',
  category: 'Trigonometry',
  syntax: ['acos(x)'],
  description: 'Compute the inverse cosine of a value in radians.',
  examples: ['acos(0.5)', 'acos(cos(2.3))'],
  seealso: ['cos', 'atan', 'asin']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/sum.js
var sumDocs = {
  name: 'sum',
  category: 'Statistics',
  syntax: ['sum(a, b, c, ...)', 'sum(A)'],
  description: 'Compute the sum of all values.',
  examples: ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
  seealso: ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/std.js
var stdDocs = {
  name: 'std',
  category: 'Statistics',
  syntax: ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
  description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
  seealso: ['max', 'mean', 'min', 'median', 'min', 'prod', 'sum', 'variance']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/quantileSeq.js
var quantileSeqDocs = {
  name: 'quantileSeq',
  category: 'Statistics',
  syntax: ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
  description: 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
  examples: ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
  seealso: ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'variance']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/prod.js
var prodDocs = {
  name: 'prod',
  category: 'Statistics',
  syntax: ['prod(a, b, c, ...)', 'prod(A)'],
  description: 'Compute the product of all values.',
  examples: ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
  seealso: ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'variance']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/mode.js
var modeDocs = {
  name: 'mode',
  category: 'Statistics',
  syntax: ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
  description: 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
  examples: ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],
  seealso: ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'variance']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/min.js
var minDocs = {
  name: 'min',
  category: 'Statistics',
  syntax: ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
  description: 'Compute the minimum value of a list of values.',
  examples: ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
  seealso: ['max', 'mean', 'median', 'prod', 'std', 'sum', 'variance']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/median.js
var medianDocs = {
  name: 'median',
  category: 'Statistics',
  syntax: ['median(a, b, c, ...)', 'median(A)'],
  description: 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
  examples: ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
  seealso: ['max', 'mean', 'min', 'prod', 'std', 'sum', 'variance', 'quantileSeq']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/mean.js
var meanDocs = {
  name: 'mean',
  category: 'Statistics',
  syntax: ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
  description: 'Compute the arithmetic mean of a list of values.',
  examples: ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
  seealso: ['max', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/max.js
var maxDocs = {
  name: 'max',
  category: 'Statistics',
  syntax: ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
  description: 'Compute the maximum value of a list of values.',
  examples: ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
  seealso: ['mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/mad.js
var madDocs = {
  name: 'mad',
  category: 'Statistics',
  syntax: ['mad(a, b, c, ...)', 'mad(A)'],
  description: 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
  examples: ['mad(10, 20, 30)', 'mad([1, 2, 3])'],
  seealso: ['mean', 'median', 'std', 'abs']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/special/erf.js
var erfDocs = {
  name: 'erf',
  category: 'Special',
  syntax: ['erf(x)'],
  description: 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
  examples: ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/set/setUnion.js
var setUnionDocs = {
  name: 'setUnion',
  category: 'Set',
  syntax: ['setUnion(set1, set2)'],
  description: 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setUnion([1, 2, 3, 4], [3, 4, 5, 6])', 'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setIntersect', 'setDifference']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/set/setSymDifference.js
var setSymDifferenceDocs = {
  name: 'setSymDifference',
  category: 'Set',
  syntax: ['setSymDifference(set1, set2)'],
  description: 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/set/setSize.js
var setSizeDocs = {
  name: 'setSize',
  category: 'Set',
  syntax: ['setSize(set)', 'setSize(set, unique)'],
  description: 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/set/setPowerset.js
var setPowersetDocs = {
  name: 'setPowerset',
  category: 'Set',
  syntax: ['setPowerset(set)'],
  description: 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setPowerset([1, 2, 3])'],
  seealso: ['setCartesian']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/set/setMultiplicity.js
var setMultiplicityDocs = {
  name: 'setMultiplicity',
  category: 'Set',
  syntax: ['setMultiplicity(element, set)'],
  description: 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setMultiplicity(1, [1, 2, 2, 4])', 'setMultiplicity(2, [1, 2, 2, 4])'],
  seealso: ['setDistinct', 'setSize']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/set/setIsSubset.js
var setIsSubsetDocs = {
  name: 'setIsSubset',
  category: 'Set',
  syntax: ['setIsSubset(set1, set2)'],
  description: 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/set/setIntersect.js
var setIntersectDocs = {
  name: 'setIntersect',
  category: 'Set',
  syntax: ['setIntersect(set1, set2)'],
  description: 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setIntersect([1, 2, 3, 4], [3, 4, 5, 6])', 'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setDifference']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/set/setDistinct.js
var setDistinctDocs = {
  name: 'setDistinct',
  category: 'Set',
  syntax: ['setDistinct(set)'],
  description: 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setDistinct([1, 1, 1, 2, 2, 3])'],
  seealso: ['setMultiplicity']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/set/setDifference.js
var setDifferenceDocs = {
  name: 'setDifference',
  category: 'Set',
  syntax: ['setDifference(set1, set2)'],
  description: 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setIntersect', 'setSymDifference']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/set/setCartesian.js
var setCartesianDocs = {
  name: 'setCartesian',
  category: 'Set',
  syntax: ['setCartesian(set1, set2)'],
  description: 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setCartesian([1, 2], [3, 4])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference', 'setPowerset']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/unequal.js
var unequalDocs = {
  name: 'unequal',
  category: 'Relational',
  syntax: ['x != y', 'unequal(x, y)'],
  description: 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
  examples: ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
  seealso: ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/smallerEq.js
var smallerEqDocs = {
  name: 'smallerEq',
  category: 'Relational',
  syntax: ['x <= y', 'smallerEq(x, y)'],
  description: 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
  examples: ['2 <= 1+1', '2 < 1+1', 'a = 3.2', 'b = 6-2.8', '(a <= b)'],
  seealso: ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/smaller.js
var smallerDocs = {
  name: 'smaller',
  category: 'Relational',
  syntax: ['x < y', 'smaller(x, y)'],
  description: 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
  examples: ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
  seealso: ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/largerEq.js
var largerEqDocs = {
  name: 'largerEq',
  category: 'Relational',
  syntax: ['x >= y', 'largerEq(x, y)'],
  description: 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
  examples: ['2 >= 1+1', '2 > 1+1', 'a = 3.2', 'b = 6-2.8', '(a >= b)'],
  seealso: ['equal', 'unequal', 'smallerEq', 'smaller', 'compare']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/larger.js
var largerDocs = {
  name: 'larger',
  category: 'Relational',
  syntax: ['x > y', 'larger(x, y)'],
  description: 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
  examples: ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/equalText.js
var equalTextDocs = {
  name: 'equalText',
  category: 'Relational',
  syntax: ['equalText(x, y)'],
  description: 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
  examples: ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
  seealso: ['compare', 'compareNatural', 'compareText', 'equal']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/equal.js
var equalDocs = {
  name: 'equal',
  category: 'Relational',
  syntax: ['x == y', 'equal(x, y)'],
  description: 'Check equality of two values. Returns true if the values are equal, and false if not.',
  examples: ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
  seealso: ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual', 'equalText']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/deepEqual.js
var deepEqualDocs = {
  name: 'deepEqual',
  category: 'Relational',
  syntax: ['deepEqual(x, y)'],
  description: 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
  examples: ['deepEqual([1,3,4], [1,3,4])', 'deepEqual([1,3,4], [1,3])'],
  seealso: ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/compareText.js
var compareTextDocs = {
  name: 'compareText',
  category: 'Relational',
  syntax: ['compareText(x, y)'],
  description: 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', 'compare(2, 10)', 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
  seealso: ['compare', 'compareNatural']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/compareNatural.js
var compareNaturalDocs = {
  name: 'compareNatural',
  category: 'Relational',
  syntax: ['compareNatural(x, y)'],
  description: 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compareNatural(2, 3)', 'compareNatural(3, 2)', 'compareNatural(2, 2)', 'compareNatural(5cm, 40mm)', 'compareNatural("2", "10")', 'compareNatural(2 + 3i, 2 + 4i)', 'compareNatural([1, 2, 4], [1, 2, 3])', 'compareNatural([1, 5], [1, 2, 3])', 'compareNatural([1, 2], [1, 2])', 'compareNatural({a: 2}, {a: 4})'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare', 'compareText']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/relational/compare.js
var compareDocs = {
  name: 'compare',
  category: 'Relational',
  syntax: ['compare(x, y)'],
  description: 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural', 'compareText']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/probability/randomInt.js
var randomIntDocs = {
  name: 'randomInt',
  category: 'Probability',
  syntax: ['randomInt(max)', 'randomInt(min, max)', 'randomInt(size)', 'randomInt(size, max)', 'randomInt(size, min, max)'],
  description: 'Return a random integer number',
  examples: ['randomInt(10, 20)', 'randomInt([2, 3], 10)'],
  seealso: ['pickRandom', 'random']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/probability/random.js
var randomDocs = {
  name: 'random',
  category: 'Probability',
  syntax: ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
  description: 'Return a random number.',
  examples: ['random()', 'random(10, 20)', 'random([2, 3])'],
  seealso: ['pickRandom', 'randomInt']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/probability/pickRandom.js
var pickRandomDocs = {
  name: 'pickRandom',
  category: 'Probability',
  syntax: ['pickRandom(array)', 'pickRandom(array, number)', 'pickRandom(array, weights)', 'pickRandom(array, number, weights)', 'pickRandom(array, weights, number)'],
  description: 'Pick a random entry from a given array.',
  examples: ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])', 'pickRandom([1, 3, 1, 6], 2)', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'],
  seealso: ['random', 'randomInt']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/probability/permutations.js
var permutationsDocs = {
  name: 'permutations',
  category: 'Probability',
  syntax: ['permutations(n)', 'permutations(n, k)'],
  description: 'Compute the number of permutations of n items taken k at a time',
  examples: ['permutations(5)', 'permutations(5, 3)'],
  seealso: ['combinations', 'combinationsWithRep', 'factorial']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/probability/multinomial.js
var multinomialDocs = {
  name: 'multinomial',
  category: 'Probability',
  syntax: ['multinomial(A)'],
  description: 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
  examples: ['multinomial([1, 2, 1])'],
  seealso: ['combinations', 'factorial']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/probability/kldivergence.js
var kldivergenceDocs = {
  name: 'kldivergence',
  category: 'Probability',
  syntax: ['kldivergence(x, y)'],
  description: 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
  examples: ['kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/probability/gamma.js
var gammaDocs = {
  name: 'gamma',
  category: 'Probability',
  syntax: ['gamma(n)'],
  description: 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
  examples: ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
  seealso: ['factorial']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/probability/factorial.js
var factorialDocs = {
  name: 'factorial',
  category: 'Probability',
  syntax: ['n!', 'factorial(n)'],
  description: 'Compute the factorial of a value',
  examples: ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
  seealso: ['combinations', 'combinationsWithRep', 'permutations', 'gamma']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/probability/combinations.js
var combinationsDocs = {
  name: 'combinations',
  category: 'Probability',
  syntax: ['combinations(n, k)'],
  description: 'Compute the number of combinations of n items taken k at a time',
  examples: ['combinations(7, 5)'],
  seealso: ['combinationsWithRep', 'permutations', 'factorial']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/probability/combinationsWithRep.js
var combinationsWithRepDocs = {
  name: 'combinationsWithRep',
  category: 'Probability',
  syntax: ['combinationsWithRep(n, k)'],
  description: 'Compute the number of combinations of n items taken k at a time with replacements.',
  examples: ['combinationsWithRep(7, 5)'],
  seealso: ['combinations', 'permutations', 'factorial']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/zeros.js
var zerosDocs = {
  name: 'zeros',
  category: 'Matrix',
  syntax: ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])'],
  description: 'Create a matrix containing zeros.',
  examples: ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/transpose.js
var transposeDocs = {
  name: 'transpose',
  category: 'Matrix',
  syntax: ['x\'', 'transpose(x)'],
  description: 'Transpose a matrix',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/trace.js
var traceDocs = {
  name: 'trace',
  category: 'Matrix',
  syntax: ['trace(A)'],
  description: 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
  examples: ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/subset.js
var subsetDocs = {
  name: 'subset',
  category: 'Matrix',
  syntax: ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
  description: 'Get or set a subset of a matrix or string. ' + 'Indexes are one-based. ' + 'Both the ranges lower-bound and upper-bound are included.',
  examples: ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/squeeze.js
var squeezeDocs = {
  name: 'squeeze',
  category: 'Matrix',
  syntax: ['squeeze(x)'],
  description: 'Remove inner and outer singleton dimensions from a matrix.',
  examples: ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/sort.js
var sortDocs = {
  name: 'sort',
  category: 'Matrix',
  syntax: ['sort(x)', 'sort(x, compare)'],
  description: 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
  examples: ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
  seealso: ['map', 'filter', 'forEach']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/size.js
var sizeDocs = {
  name: 'size',
  category: 'Matrix',
  syntax: ['size(x)'],
  description: 'Calculate the size of a matrix.',
  examples: ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/reshape.js
var reshapeDocs = {
  name: 'reshape',
  category: 'Matrix',
  syntax: ['reshape(x, sizes)'],
  description: 'Reshape a multi dimensional array to fit the specified dimensions.',
  examples: ['reshape([1, 2, 3, 4, 5, 6], [2, 3])', 'reshape([[1, 2], [3, 4]], [1, 4])', 'reshape([[1, 2], [3, 4]], [4])'],
  seealso: ['size', 'squeeze', 'resize']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/resize.js
var resizeDocs = {
  name: 'resize',
  category: 'Matrix',
  syntax: ['resize(x, size)', 'resize(x, size, defaultValue)'],
  description: 'Resize a matrix.',
  examples: ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
  seealso: ['size', 'subset', 'squeeze', 'reshape']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/range.js
var rangeDocs = {
  name: 'range',
  category: 'Type',
  syntax: ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
  description: 'Create a range. Lower bound of the range is included, upper bound is excluded.',
  examples: ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/partitionSelect.js
var partitionSelectDocs = {
  name: 'partitionSelect',
  category: 'Matrix',
  syntax: ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
  description: 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
  examples: ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
  seealso: ['sort']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/ones.js
var onesDocs = {
  name: 'ones',
  category: 'Matrix',
  syntax: ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])'],
  description: 'Create a matrix containing ones.',
  examples: ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/map.js
var mapDocs = {
  name: 'map',
  category: 'Matrix',
  syntax: ['map(x, callback)'],
  description: 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
  examples: ['map([1, 2, 3], square)'],
  seealso: ['filter', 'forEach']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/kron.js
var kronDocs = {
  name: 'kron',
  category: 'Matrix',
  syntax: ['kron(x, y)'],
  description: 'Calculates the kronecker product of 2 matrices or vectors.',
  examples: ['kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])', 'kron([1,1], [2,3,4])'],
  seealso: ['multiply', 'dot', 'cross']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/inv.js
var invDocs = {
  name: 'inv',
  category: 'Matrix',
  syntax: ['inv(x)'],
  description: 'Calculate the inverse of a matrix',
  examples: ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
  seealso: ['concat', 'det', 'diag', 'identity', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/forEach.js
var forEachDocs = {
  name: 'forEach',
  category: 'Matrix',
  syntax: ['forEach(x, callback)'],
  description: 'Iterates over all elements of a matrix/array, and executes the given callback function.',
  examples: ['forEach([1, 2, 3], function(val) { console.log(val) })'],
  seealso: ['map', 'sort', 'filter']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/flatten.js
var flattenDocs = {
  name: 'flatten',
  category: 'Matrix',
  syntax: ['flatten(x)'],
  description: 'Flatten a multi dimensional matrix into a single dimensional matrix.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
  seealso: ['concat', 'resize', 'size', 'squeeze']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/filter.js
var filterDocs = {
  name: 'filter',
  category: 'Matrix',
  syntax: ['filter(x, test)'],
  description: 'Filter items in a matrix.',
  examples: ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
  seealso: ['sort', 'map', 'forEach']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/identity.js
var identityDocs = {
  name: 'identity',
  category: 'Matrix',
  syntax: ['identity(n)', 'identity(m, n)', 'identity([m, n])'],
  description: 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
  examples: ['identity(3)', 'identity(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'identity(size(a))'],
  seealso: ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/getMatrixDataType.js
var getMatrixDataTypeDocs = {
  name: 'getMatrixDataType',
  category: 'Matrix',
  syntax: ['getMatrixDataType(x)'],
  description: 'Find the data type of all elements in a matrix or array, ' + 'for example "number" if all items are a number ' + 'and "Complex" if all values are complex numbers. ' + 'If a matrix contains more than one data type, it will return "mixed".',
  examples: ['getMatrixDataType([1, 2, 3])', 'getMatrixDataType([[5 cm], [2 inch]])', 'getMatrixDataType([1, "text"])', 'getMatrixDataType([1, bignumber(4)])'],
  seealso: ['matrix', 'sparse', 'typeOf']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/dot.js
var dotDocs = {
  name: 'dot',
  category: 'Matrix',
  syntax: ['dot(A, B)', 'A * B'],
  description: 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
  examples: ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
  seealso: ['multiply', 'cross']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/diag.js
var diagDocs = {
  name: 'diag',
  category: 'Matrix',
  syntax: ['diag(x)', 'diag(x, k)'],
  description: 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
  examples: ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
  seealso: ['concat', 'det', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/det.js
var detDocs = {
  name: 'det',
  category: 'Matrix',
  syntax: ['det(x)'],
  description: 'Calculate the determinant of a matrix',
  examples: ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
  seealso: ['concat', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/ctranspose.js
var ctransposeDocs = {
  name: 'ctranspose',
  category: 'Matrix',
  syntax: ['x\'', 'ctranspose(x)'],
  description: 'Complex Conjugate and Transpose a matrix',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'ctranspose(a)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/cross.js
var crossDocs = {
  name: 'cross',
  category: 'Matrix',
  syntax: ['cross(A, B)'],
  description: 'Calculate the cross product for two vectors in three dimensional space.',
  examples: ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
  seealso: ['multiply', 'dot']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/concat.js
var concatDocs = {
  name: 'concat',
  category: 'Matrix',
  syntax: ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
  description: 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
  examples: ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
  seealso: ['det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/logical/xor.js
var xorDocs = {
  name: 'xor',
  category: 'Logical',
  syntax: ['x xor y', 'xor(x, y)'],
  description: 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
  examples: ['true xor false', 'false xor false', 'true xor true', '0 xor 4'],
  seealso: ['not', 'and', 'or']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/logical/or.js
var orDocs = {
  name: 'or',
  category: 'Logical',
  syntax: ['x or y', 'or(x, y)'],
  description: 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
  examples: ['true or false', 'false or false', '0 or 4'],
  seealso: ['not', 'and', 'xor']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/logical/not.js
var notDocs = {
  name: 'not',
  category: 'Logical',
  syntax: ['not x', 'not(x)'],
  description: 'Logical not. Flips the boolean value of given argument.',
  examples: ['not true', 'not false', 'not 2', 'not 0'],
  seealso: ['and', 'or', 'xor']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/logical/and.js
var andDocs = {
  name: 'and',
  category: 'Logical',
  syntax: ['x and y', 'and(x, y)'],
  description: 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
  examples: ['true and false', 'true and true', '2 and 4'],
  seealso: ['not', 'or', 'xor']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/geometry/intersect.js
var intersectDocs = {
  name: 'intersect',
  category: 'Geometry',
  syntax: ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
  description: 'Computes the intersection point of lines and/or planes.',
  examples: ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/geometry/distance.js
var distanceDocs = {
  name: 'distance',
  category: 'Geometry',
  syntax: ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2])'],
  description: 'Calculates the Euclidean distance between two points.',
  examples: ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/expression/help.js
var helpDocs = {
  name: 'help',
  category: 'Expression',
  syntax: ['help(object)', 'help(string)'],
  description: 'Display documentation on a function or data type.',
  examples: ['help(sqrt)', 'help("complex")'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/expression/evaluate.js
var evaluateDocs = {
  name: 'evaluate',
  category: 'Expression',
  syntax: ['evaluate(expression)', 'evaluate([expr1, expr2, expr3, ...])'],
  description: 'Evaluate an expression or an array with expressions.',
  examples: ['evaluate("2 + 3")', 'evaluate("sqrt(" + 4 + ")")'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/complex/im.js
var imDocs = {
  name: 'im',
  category: 'Complex',
  syntax: ['im(x)'],
  description: 'Get the imaginary part of a complex number.',
  examples: ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
  seealso: ['re', 'conj', 'abs', 'arg']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/complex/re.js
var reDocs = {
  name: 're',
  category: 'Complex',
  syntax: ['re(x)'],
  description: 'Get the real part of a complex number.',
  examples: ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
  seealso: ['im', 'conj', 'abs', 'arg']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/complex/conj.js
var conjDocs = {
  name: 'conj',
  category: 'Complex',
  syntax: ['conj(x)'],
  description: 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
  examples: ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
  seealso: ['re', 'im', 'abs', 'arg']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/complex/arg.js
var argDocs = {
  name: 'arg',
  category: 'Complex',
  syntax: ['arg(x)'],
  description: 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
  examples: ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
  seealso: ['re', 'im', 'conj', 'abs']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/core/typed.js
var typedDocs = {
  name: 'typed',
  category: 'Core',
  syntax: ['typed(signatures)', 'typed(name, signatures)'],
  description: 'Create a typed function.',
  examples: ['double = typed({ "number, number": f(x)=x+x })', 'double(2)', 'double("hello")'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/core/import.js
var importDocs = {
  name: 'import',
  category: 'Core',
  syntax: ['import(functions)', 'import(functions, options)'],
  description: 'Import functions or constants from an object.',
  examples: ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/core/config.js
var configDocs = {
  name: 'config',
  category: 'Core',
  syntax: ['config()', 'config(options)'],
  description: 'Get configuration or change configuration.',
  examples: ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/combinatorics/stirlingS2.js
var stirlingS2Docs = {
  name: 'stirlingS2',
  category: 'Combinatorics',
  syntax: ['stirlingS2(n, k)'],
  description: 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
  examples: ['stirlingS2(5, 3)'],
  seealso: ['bellNumbers']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/combinatorics/composition.js
var compositionDocs = {
  name: 'composition',
  category: 'Combinatorics',
  syntax: ['composition(n, k)'],
  description: 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
  examples: ['composition(5, 3)'],
  seealso: ['combinations']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/combinatorics/catalan.js
var catalanDocs = {
  name: 'catalan',
  category: 'Combinatorics',
  syntax: ['catalan(n)'],
  description: 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
  examples: ['catalan(3)', 'catalan(8)'],
  seealso: ['bellNumbers']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/combinatorics/bellNumbers.js
var bellNumbersDocs = {
  name: 'bellNumbers',
  category: 'Combinatorics',
  syntax: ['bellNumbers(n)'],
  description: 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
  examples: ['bellNumbers(3)', 'bellNumbers(8)'],
  seealso: ['stirlingS2']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/bitwise/rightLogShift.js
var rightLogShiftDocs = {
  name: 'rightLogShift',
  category: 'Bitwise',
  syntax: ['x >>> y', 'rightLogShift(x, y)'],
  description: 'Bitwise right logical shift of a value x by y number of bits.',
  examples: ['8 >>> 1', '4 << 1', '-12 >>> 2'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/bitwise/rightArithShift.js
var rightArithShiftDocs = {
  name: 'rightArithShift',
  category: 'Bitwise',
  syntax: ['x >> y', 'rightArithShift(x, y)'],
  description: 'Bitwise right arithmetic shift of a value x by y number of bits.',
  examples: ['8 >> 1', '4 << 1', '-12 >> 2'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/bitwise/leftShift.js
var leftShiftDocs = {
  name: 'leftShift',
  category: 'Bitwise',
  syntax: ['x << y', 'leftShift(x, y)'],
  description: 'Bitwise left logical shift of a value x by y number of bits.',
  examples: ['4 << 1', '8 >> 1'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/bitwise/bitXor.js
var bitXorDocs = {
  name: 'bitXor',
  category: 'Bitwise',
  syntax: ['bitXor(x, y)'],
  description: 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
  examples: ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/bitwise/bitOr.js
var bitOrDocs = {
  name: 'bitOr',
  category: 'Bitwise',
  syntax: ['x | y', 'bitOr(x, y)'],
  description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
  examples: ['5 | 3', 'bitOr([1, 2, 3], 4)'],
  seealso: ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/bitwise/bitNot.js
var bitNotDocs = {
  name: 'bitNot',
  category: 'Bitwise',
  syntax: ['~x', 'bitNot(x)'],
  description: 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
  examples: ['~1', '~2', 'bitNot([2, -3, 4])'],
  seealso: ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/bitwise/bitAnd.js
var bitAndDocs = {
  name: 'bitAnd',
  category: 'Bitwise',
  syntax: ['x & y', 'bitAnd(x, y)'],
  description: 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
  examples: ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
  seealso: ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/xgcd.js
var xgcdDocs = {
  name: 'xgcd',
  category: 'Arithmetic',
  syntax: ['xgcd(a, b)'],
  description: 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
  examples: ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
  seealso: ['gcd', 'lcm']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/unaryPlus.js
var unaryPlusDocs = {
  name: 'unaryPlus',
  category: 'Operators',
  syntax: ['+x', 'unaryPlus(x)'],
  description: 'Converts booleans and strings to numbers.',
  examples: ['+true', '+"2"'],
  seealso: ['add', 'subtract', 'unaryMinus']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/unaryMinus.js
var unaryMinusDocs = {
  name: 'unaryMinus',
  category: 'Operators',
  syntax: ['-x', 'unaryMinus(x)'],
  description: 'Inverse the sign of a value. Converts booleans and strings to numbers.',
  examples: ['-4.5', '-(-5.6)', '-"22"'],
  seealso: ['add', 'subtract', 'unaryPlus']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/square.js
var squareDocs = {
  name: 'square',
  category: 'Arithmetic',
  syntax: ['square(x)'],
  description: 'Compute the square of a value. The square of x is x * x.',
  examples: ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
  seealso: ['multiply', 'pow', 'sqrt', 'cube']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/sqrtm.js
var sqrtmDocs = {
  name: 'sqrtm',
  category: 'Arithmetic',
  syntax: ['sqrtm(x)'],
  description: 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
  examples: ['sqrtm([[1, 2], [3, 4]])'],
  seealso: ['sqrt', 'abs', 'square', 'multiply']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/sqrt.js
var sqrtDocs = {
  name: 'sqrt',
  category: 'Arithmetic',
  syntax: ['sqrt(x)'],
  description: 'Compute the square root value. If x = y * y, then y is the square root of x.',
  examples: ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
  seealso: ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/sign.js
var signDocs = {
  name: 'sign',
  category: 'Arithmetic',
  syntax: ['sign(x)'],
  description: 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
  examples: ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
  seealso: ['abs']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/round.js
var roundDocs = {
  name: 'round',
  category: 'Arithmetic',
  syntax: ['round(x)', 'round(x, n)'],
  description: 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
  examples: ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
  seealso: ['ceil', 'floor', 'fix']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/pow.js
var powDocs = {
  name: 'pow',
  category: 'Operators',
  syntax: ['x ^ y', 'pow(x, y)'],
  description: 'Calculates the power of x to y, x^y.',
  examples: ['2^3', '2*2*2', '1 + e ^ (pi * i)'],
  seealso: ['multiply', 'nthRoot', 'nthRoots', 'sqrt']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/nthRoots.js
var nthRootsDocs = {
  name: 'nthRoots',
  category: 'Arithmetic',
  syntax: ['nthRoots(A)', 'nthRoots(A, root)'],
  description: '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation "x^root = A". ' + 'This function returns an array of complex values.',
  examples: ['nthRoots(1)', 'nthRoots(1, 3)'],
  seealso: ['sqrt', 'pow', 'nthRoot']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/nthRoot.js
var nthRootDocs = {
  name: 'nthRoot',
  category: 'Arithmetic',
  syntax: ['nthRoot(a)', 'nthRoot(a, root)'],
  description: 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
  examples: ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
  seealso: ['nthRoots', 'pow', 'sqrt']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/norm.js
var normDocs = {
  name: 'norm',
  category: 'Arithmetic',
  syntax: ['norm(x)', 'norm(x, p)'],
  description: 'Calculate the norm of a number, vector or matrix.',
  examples: ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/multiply.js
var multiplyDocs = {
  name: 'multiply',
  category: 'Operators',
  syntax: ['x * y', 'multiply(x, y)'],
  description: 'multiply two values.',
  examples: ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
  seealso: ['divide']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/mod.js
var modDocs = {
  name: 'mod',
  category: 'Operators',
  syntax: ['x % y', 'x mod y', 'mod(x, y)'],
  description: 'Calculates the modulus, the remainder of an integer division.',
  examples: ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
  seealso: ['divide']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/log10.js
var log10Docs = {
  name: 'log10',
  category: 'Arithmetic',
  syntax: ['log10(x)'],
  description: 'Compute the 10-base logarithm of a value.',
  examples: ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
  seealso: ['exp', 'log']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/log1p.js
var log1pDocs = {
  name: 'log1p',
  category: 'Arithmetic',
  syntax: ['log1p(x)', 'log1p(x, base)'],
  description: 'Calculate the logarithm of a `value+1`',
  examples: ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],
  seealso: ['exp', 'log', 'log2', 'log10']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/log2.js
var log2Docs = {
  name: 'log2',
  category: 'Arithmetic',
  syntax: ['log2(x)'],
  description: 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
  examples: ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],
  seealso: ['exp', 'log1p', 'log', 'log10']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/log.js
var logDocs = {
  name: 'log',
  category: 'Arithmetic',
  syntax: ['log(x)', 'log(x, base)'],
  description: 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
  examples: ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
  seealso: ['exp', 'log1p', 'log2', 'log10']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/lcm.js
var lcmDocs = {
  name: 'lcm',
  category: 'Arithmetic',
  syntax: ['lcm(x, y)'],
  description: 'Compute the least common multiple.',
  examples: ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
  seealso: ['gcd']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/hypot.js
var hypotDocs = {
  name: 'hypot',
  category: 'Arithmetic',
  syntax: ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
  description: 'Calculate the hypotenusa of a list with values. ',
  examples: ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
  seealso: ['abs', 'norm']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/gcd.js
var gcdDocs = {
  name: 'gcd',
  category: 'Arithmetic',
  syntax: ['gcd(a, b)', 'gcd(a, b, c, ...)'],
  description: 'Compute the greatest common divisor.',
  examples: ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
  seealso: ['lcm', 'xgcd']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/floor.js
var floorDocs = {
  name: 'floor',
  category: 'Arithmetic',
  syntax: ['floor(x)'],
  description: 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
  examples: ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
  seealso: ['ceil', 'fix', 'round']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/fix.js
var fixDocs = {
  name: 'fix',
  category: 'Arithmetic',
  syntax: ['fix(x)'],
  description: 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
  examples: ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
  seealso: ['ceil', 'floor', 'round']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/expm1.js
var expm1Docs = {
  name: 'expm1',
  category: 'Arithmetic',
  syntax: ['expm1(x)'],
  description: 'Calculate the value of subtracting 1 from the exponential value.',
  examples: ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],
  seealso: ['exp', 'pow', 'log']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/expm.js
var expmDocs = {
  name: 'expm',
  category: 'Arithmetic',
  syntax: ['exp(x)'],
  description: 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',
  examples: ['expm([[0,2],[0,0]])'],
  seealso: ['exp']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/exp.js
var expDocs = {
  name: 'exp',
  category: 'Arithmetic',
  syntax: ['exp(x)'],
  description: 'Calculate the exponent of a value.',
  examples: ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
  seealso: ['expm', 'expm1', 'pow', 'log']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/dotMultiply.js
var dotMultiplyDocs = {
  name: 'dotMultiply',
  category: 'Operators',
  syntax: ['x .* y', 'dotMultiply(x, y)'],
  description: 'Multiply two values element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
  seealso: ['multiply', 'divide', 'dotDivide']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/dotDivide.js
var dotDivideDocs = {
  name: 'dotDivide',
  category: 'Operators',
  syntax: ['x ./ y', 'dotDivide(x, y)'],
  description: 'Divide two values element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
  seealso: ['multiply', 'dotMultiply', 'divide']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/divide.js
var divideDocs = {
  name: 'divide',
  category: 'Operators',
  syntax: ['x / y', 'divide(x, y)'],
  description: 'Divide two values.',
  examples: ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
  seealso: ['multiply']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/cube.js
var cubeDocs = {
  name: 'cube',
  category: 'Arithmetic',
  syntax: ['cube(x)'],
  description: 'Compute the cube of a value. The cube of x is x * x * x.',
  examples: ['cube(2)', '2^3', '2 * 2 * 2'],
  seealso: ['multiply', 'square', 'pow']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/ceil.js
var ceilDocs = {
  name: 'ceil',
  category: 'Arithmetic',
  syntax: ['ceil(x)'],
  description: 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
  examples: ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
  seealso: ['floor', 'fix', 'round']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/cbrt.js
var cbrtDocs = {
  name: 'cbrt',
  category: 'Arithmetic',
  syntax: ['cbrt(x)', 'cbrt(x, allRoots)'],
  description: 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
  examples: ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
  seealso: ['square', 'sqrt', 'cube', 'multiply']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/add.js
var addDocs = {
  name: 'add',
  category: 'Operators',
  syntax: ['x + y', 'add(x, y)'],
  description: 'Add two values.',
  examples: ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
  seealso: ['subtract']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/abs.js
var absDocs = {
  name: 'abs',
  category: 'Arithmetic',
  syntax: ['abs(x)'],
  description: 'Compute the absolute value.',
  examples: ['abs(3.5)', 'abs(-4.2)'],
  seealso: ['sign']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/algebra/qr.js
var qrDocs = {
  name: 'qr',
  category: 'Algebra',
  syntax: ['qr(A)'],
  description: 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
  examples: ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],
  seealso: ['lup', 'slu', 'matrix']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/algebra/usolve.js
var usolveDocs = {
  name: 'usolve',
  category: 'Algebra',
  syntax: ['x=usolve(U, b)'],
  description: 'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
  examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
  seealso: ['lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/algebra/slu.js
var sluDocs = {
  name: 'slu',
  category: 'Algebra',
  syntax: ['slu(A, order, threshold)'],
  description: 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
  examples: ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
  seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/algebra/rationalize.js
var rationalizeDocs = {
  name: 'rationalize',
  category: 'Algebra',
  syntax: ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],
  description: 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
  examples: ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
  seealso: ['simplify']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/algebra/simplify.js
var simplifyDocs = {
  name: 'simplify',
  category: 'Algebra',
  syntax: ['simplify(expr)', 'simplify(expr, rules)'],
  description: 'Simplify an expression tree.',
  examples: ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', 'simplified = simplify(f)', 'simplified.evaluate({x: 2})'],
  seealso: ['derivative', 'parse', 'evaluate']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/algebra/lup.js
var lupDocs = {
  name: 'lup',
  category: 'Algebra',
  syntax: ['lup(m)'],
  description: 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
  examples: ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
  seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/algebra/lsolve.js
var lsolveDocs = {
  name: 'lsolve',
  category: 'Algebra',
  syntax: ['x=lsolve(L, b)'],
  description: 'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
  seealso: ['lup', 'lusolve', 'usolve', 'matrix', 'sparse']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/algebra/derivative.js
var derivativeDocs = {
  name: 'derivative',
  category: 'Algebra',
  syntax: ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],
  description: 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
  examples: ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', 'df = derivative(f, x)', 'df.evaluate({x: 3})'],
  seealso: ['simplify', 'parse', 'evaluate']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/version.js
var versionDocs = {
  name: 'version',
  category: 'Constants',
  syntax: ['version'],
  description: 'A string with the version number of math.js',
  examples: ['version'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/true.js
var trueDocs = {
  name: 'true',
  category: 'Constants',
  syntax: ['true'],
  description: 'Boolean value true',
  examples: ['true'],
  seealso: ['false']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/tau.js
var tauDocs = {
  name: 'tau',
  category: 'Constants',
  syntax: ['tau'],
  description: 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
  examples: ['tau', '2 * pi'],
  seealso: ['pi']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/SQRT2.js
var SQRT2Docs = {
  name: 'SQRT2',
  category: 'Constants',
  syntax: ['SQRT2'],
  description: 'Returns the square root of 2, approximately equal to 1.414',
  examples: ['SQRT2', 'sqrt(2)'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/SQRT1_2.js
var SQRT12Docs = {
  name: 'SQRT1_2',
  category: 'Constants',
  syntax: ['SQRT1_2'],
  description: 'Returns the square root of 1/2, approximately equal to 0.707',
  examples: ['SQRT1_2', 'sqrt(1/2)'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/phi.js
var phiDocs = {
  name: 'phi',
  category: 'Constants',
  syntax: ['phi'],
  description: 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
  examples: ['phi'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/pi.js
var piDocs = {
  name: 'pi',
  category: 'Constants',
  syntax: ['pi'],
  description: 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
  examples: ['pi', 'sin(pi/2)'],
  seealso: ['tau']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/null.js
var nullDocs = {
  name: 'null',
  category: 'Constants',
  syntax: ['null'],
  description: 'Value null',
  examples: ['null'],
  seealso: ['true', 'false']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/NaN.js
var NaNDocs = {
  name: 'NaN',
  category: 'Constants',
  syntax: ['NaN'],
  description: 'Not a number',
  examples: ['NaN', '0 / 0'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/LOG10E.js
var LOG10EDocs = {
  name: 'LOG10E',
  category: 'Constants',
  syntax: ['LOG10E'],
  description: 'Returns the base-10 logarithm of E, approximately equal to 0.434',
  examples: ['LOG10E', 'log(e, 10)'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/LOG2E.js
var LOG2EDocs = {
  name: 'LOG2E',
  category: 'Constants',
  syntax: ['LOG2E'],
  description: 'Returns the base-2 logarithm of E, approximately equal to 1.442',
  examples: ['LOG2E', 'log(e, 2)'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/LN10.js
var LN10Docs = {
  name: 'LN10',
  category: 'Constants',
  syntax: ['LN10'],
  description: 'Returns the natural logarithm of 10, approximately equal to 2.302',
  examples: ['LN10', 'log(10)'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/LN2.js
var LN2Docs = {
  name: 'LN2',
  category: 'Constants',
  syntax: ['LN2'],
  description: 'Returns the natural logarithm of 2, approximately equal to 0.693',
  examples: ['LN2', 'log(2)'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/Infinity.js
var InfinityDocs = {
  name: 'Infinity',
  category: 'Constants',
  syntax: ['Infinity'],
  description: 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
  examples: ['Infinity', '1 / 0'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/i.js
var iDocs = {
  name: 'i',
  category: 'Constants',
  syntax: ['i'],
  description: 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
  examples: ['i', 'i * i', 'sqrt(-1)'],
  seealso: []
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/false.js
var falseDocs = {
  name: 'false',
  category: 'Constants',
  syntax: ['false'],
  description: 'Boolean value false',
  examples: ['false'],
  seealso: ['true']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/constants/e.js
var eDocs = {
  name: 'e',
  category: 'Constants',
  syntax: ['e'],
  description: 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
  examples: ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
  seealso: ['exp']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/unit.js
var unitDocs = {
  name: 'unit',
  category: 'Construction',
  syntax: ['value unit', 'unit(value, unit)', 'unit(string)'],
  description: 'Create a unit.',
  examples: ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/string.js
var stringDocs = {
  name: 'string',
  category: 'Construction',
  syntax: ['"text"', 'string(x)'],
  description: 'Create a string or convert a value to a string',
  examples: ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/splitUnit.js
var splitUnitDocs = {
  name: 'splitUnit',
  category: 'Construction',
  syntax: ['splitUnit(unit: Unit, parts: Unit[])'],
  description: 'Split a unit in an array of units whose sum is equal to the original unit.',
  examples: ['splitUnit(1 m, ["feet", "inch"])'],
  seealso: ['unit', 'createUnit']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/sparse.js
var sparseDocs = {
  name: 'sparse',
  category: 'Construction',
  syntax: ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
  description: 'Create a sparse matrix.',
  examples: ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/number.js
var numberDocs = {
  name: 'number',
  category: 'Construction',
  syntax: ['x', 'number(x)', 'number(unit, valuelessUnit)'],
  description: 'Create a number or convert a string or boolean into a number.',
  examples: ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number(unit("52cm"), "m")'],
  seealso: ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/matrix.js
var matrixDocs = {
  name: 'matrix',
  category: 'Construction',
  syntax: ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
  description: 'Create a matrix.',
  examples: ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/index.js
var indexDocs = {
  name: 'index',
  category: 'Construction',
  syntax: ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
  description: 'Create an index to get or replace a subset of a matrix',
  examples: ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
  seealso: ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/fraction.js
var fractionDocs = {
  name: 'fraction',
  category: 'Construction',
  syntax: ['fraction(num)', 'fraction(num,den)'],
  description: 'Create a fraction from a number or from a numerator and denominator.',
  examples: ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/createUnit.js
var createUnitDocs = {
  name: 'createUnit',
  category: 'Construction',
  syntax: ['createUnit(definitions)', 'createUnit(name, definition)'],
  description: 'Create a user-defined unit and register it with the Unit type.',
  examples: ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
  seealso: ['unit', 'splitUnit']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/complex.js
var complexDocs = {
  name: 'complex',
  category: 'Construction',
  syntax: ['complex()', 'complex(re, im)', 'complex(string)'],
  description: 'Create a complex number.',
  examples: ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
  seealso: ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/construction/boolean.js
var booleanDocs = {
  name: 'boolean',
  category: 'Construction',
  syntax: ['x', 'boolean(x)'],
  description: 'Convert a string or number into a boolean.',
  examples: ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
  seealso: ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/dotPow.js
var dotPowDocs = {
  name: 'dotPow',
  category: 'Operators',
  syntax: ['x .^ y', 'dotPow(x, y)'],
  description: 'Calculates the power of x to y element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
  seealso: ['pow']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/algebra/lusolve.js
var lusolveDocs = {
  name: 'lusolve',
  category: 'Algebra',
  syntax: ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
  description: 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
  seealso: ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/arithmetic/subtract.js
var subtractDocs = {
  name: 'subtract',
  category: 'Operators',
  syntax: ['x - y', 'subtract(x, y)'],
  description: 'subtract two values.',
  examples: ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
  seealso: ['add']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/statistics/variance.js
var varianceDocs = {
  name: 'variance',
  category: 'Statistics',
  syntax: ['variance(a, b, c, ...)', 'variance(A)', 'variance(A, normalization)'],
  description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ['variance(2, 4, 6)', 'variance([2, 4, 6, 8])', 'variance([2, 4, 6, 8], "uncorrected")', 'variance([2, 4, 6, 8], "biased")', 'variance([1, 2, 3; 4, 5, 6])'],
  seealso: ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/trigonometry/sin.js
var sinDocs = {
  name: 'sin',
  category: 'Trigonometry',
  syntax: ['sin(x)'],
  description: 'Compute the sine of x in radians.',
  examples: ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
  seealso: ['asin', 'cos', 'tan']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/utils/numeric.js
var numericDocs = {
  name: 'numeric',
  category: 'Utils',
  syntax: ['numeric(x)'],
  description: 'Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.',
  examples: ['numeric("4")', 'numeric("4", "number")', 'numeric("4", "BigNumber")', 'numeric("4", "Fraction)', 'numeric(4, "Fraction")', 'numeric(fraction(2, 5), "number)'],
  seealso: ['number', 'fraction', 'bignumber', 'string', 'format']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/column.js
var columnDocs = {
  name: 'column',
  category: 'Matrix',
  syntax: ['column(x, index)'],
  description: 'Return a column from a matrix or array.',
  examples: ['A = [[1, 2], [3, 4]]', 'column(A, 1)', 'column(A, 2)'],
  seealso: ['row']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/function/matrix/row.js
var rowDocs = {
  name: 'row',
  category: 'Matrix',
  syntax: ['row(x, index)'],
  description: 'Return a row from a matrix or array.',
  examples: ['A = [[1, 2], [3, 4]]', 'row(A, 1)', 'row(A, 2)'],
  seealso: ['column']
};
// CONCATENATED MODULE: ./src/expression/embeddedDocs/embeddedDocs.js

















































































































































































































var embeddedDocs = {
  // construction functions
  bignumber: bignumberDocs,
  "boolean": booleanDocs,
  complex: complexDocs,
  createUnit: createUnitDocs,
  fraction: fractionDocs,
  index: indexDocs,
  matrix: matrixDocs,
  number: numberDocs,
  sparse: sparseDocs,
  splitUnit: splitUnitDocs,
  string: stringDocs,
  unit: unitDocs,
  // constants
  e: eDocs,
  E: eDocs,
  "false": falseDocs,
  i: iDocs,
  Infinity: InfinityDocs,
  LN2: LN2Docs,
  LN10: LN10Docs,
  LOG2E: LOG2EDocs,
  LOG10E: LOG10EDocs,
  NaN: NaNDocs,
  "null": nullDocs,
  pi: piDocs,
  PI: piDocs,
  phi: phiDocs,
  SQRT1_2: SQRT12Docs,
  SQRT2: SQRT2Docs,
  tau: tauDocs,
  "true": trueDocs,
  version: versionDocs,
  // physical constants
  // TODO: more detailed docs for physical constants
  speedOfLight: {
    description: 'Speed of light in vacuum',
    examples: ['speedOfLight']
  },
  gravitationConstant: {
    description: 'Newtonian constant of gravitation',
    examples: ['gravitationConstant']
  },
  planckConstant: {
    description: 'Planck constant',
    examples: ['planckConstant']
  },
  reducedPlanckConstant: {
    description: 'Reduced Planck constant',
    examples: ['reducedPlanckConstant']
  },
  magneticConstant: {
    description: 'Magnetic constant (vacuum permeability)',
    examples: ['magneticConstant']
  },
  electricConstant: {
    description: 'Electric constant (vacuum permeability)',
    examples: ['electricConstant']
  },
  vacuumImpedance: {
    description: 'Characteristic impedance of vacuum',
    examples: ['vacuumImpedance']
  },
  coulomb: {
    description: 'Coulomb\'s constant',
    examples: ['coulomb']
  },
  elementaryCharge: {
    description: 'Elementary charge',
    examples: ['elementaryCharge']
  },
  bohrMagneton: {
    description: 'Borh magneton',
    examples: ['bohrMagneton']
  },
  conductanceQuantum: {
    description: 'Conductance quantum',
    examples: ['conductanceQuantum']
  },
  inverseConductanceQuantum: {
    description: 'Inverse conductance quantum',
    examples: ['inverseConductanceQuantum']
  },
  // josephson: {description: 'Josephson constant', examples: ['josephson']},
  magneticFluxQuantum: {
    description: 'Magnetic flux quantum',
    examples: ['magneticFluxQuantum']
  },
  nuclearMagneton: {
    description: 'Nuclear magneton',
    examples: ['nuclearMagneton']
  },
  klitzing: {
    description: 'Von Klitzing constant',
    examples: ['klitzing']
  },
  bohrRadius: {
    description: 'Borh radius',
    examples: ['bohrRadius']
  },
  classicalElectronRadius: {
    description: 'Classical electron radius',
    examples: ['classicalElectronRadius']
  },
  electronMass: {
    description: 'Electron mass',
    examples: ['electronMass']
  },
  fermiCoupling: {
    description: 'Fermi coupling constant',
    examples: ['fermiCoupling']
  },
  fineStructure: {
    description: 'Fine-structure constant',
    examples: ['fineStructure']
  },
  hartreeEnergy: {
    description: 'Hartree energy',
    examples: ['hartreeEnergy']
  },
  protonMass: {
    description: 'Proton mass',
    examples: ['protonMass']
  },
  deuteronMass: {
    description: 'Deuteron Mass',
    examples: ['deuteronMass']
  },
  neutronMass: {
    description: 'Neutron mass',
    examples: ['neutronMass']
  },
  quantumOfCirculation: {
    description: 'Quantum of circulation',
    examples: ['quantumOfCirculation']
  },
  rydberg: {
    description: 'Rydberg constant',
    examples: ['rydberg']
  },
  thomsonCrossSection: {
    description: 'Thomson cross section',
    examples: ['thomsonCrossSection']
  },
  weakMixingAngle: {
    description: 'Weak mixing angle',
    examples: ['weakMixingAngle']
  },
  efimovFactor: {
    description: 'Efimov factor',
    examples: ['efimovFactor']
  },
  atomicMass: {
    description: 'Atomic mass constant',
    examples: ['atomicMass']
  },
  avogadro: {
    description: 'Avogadro\'s number',
    examples: ['avogadro']
  },
  boltzmann: {
    description: 'Boltzmann constant',
    examples: ['boltzmann']
  },
  faraday: {
    description: 'Faraday constant',
    examples: ['faraday']
  },
  firstRadiation: {
    description: 'First radiation constant',
    examples: ['firstRadiation']
  },
  loschmidt: {
    description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
    examples: ['loschmidt']
  },
  gasConstant: {
    description: 'Gas constant',
    examples: ['gasConstant']
  },
  molarPlanckConstant: {
    description: 'Molar Planck constant',
    examples: ['molarPlanckConstant']
  },
  molarVolume: {
    description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
    examples: ['molarVolume']
  },
  sackurTetrode: {
    description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
    examples: ['sackurTetrode']
  },
  secondRadiation: {
    description: 'Second radiation constant',
    examples: ['secondRadiation']
  },
  stefanBoltzmann: {
    description: 'Stefan-Boltzmann constant',
    examples: ['stefanBoltzmann']
  },
  wienDisplacement: {
    description: 'Wien displacement law constant',
    examples: ['wienDisplacement']
  },
  // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
  molarMass: {
    description: 'Molar mass constant',
    examples: ['molarMass']
  },
  molarMassC12: {
    description: 'Molar mass constant of carbon-12',
    examples: ['molarMassC12']
  },
  gravity: {
    description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
    examples: ['gravity']
  },
  planckLength: {
    description: 'Planck length',
    examples: ['planckLength']
  },
  planckMass: {
    description: 'Planck mass',
    examples: ['planckMass']
  },
  planckTime: {
    description: 'Planck time',
    examples: ['planckTime']
  },
  planckCharge: {
    description: 'Planck charge',
    examples: ['planckCharge']
  },
  planckTemperature: {
    description: 'Planck temperature',
    examples: ['planckTemperature']
  },
  // functions - algebra
  derivative: derivativeDocs,
  lsolve: lsolveDocs,
  lup: lupDocs,
  lusolve: lusolveDocs,
  simplify: simplifyDocs,
  rationalize: rationalizeDocs,
  slu: sluDocs,
  usolve: usolveDocs,
  qr: qrDocs,
  // functions - arithmetic
  abs: absDocs,
  add: addDocs,
  cbrt: cbrtDocs,
  ceil: ceilDocs,
  cube: cubeDocs,
  divide: divideDocs,
  dotDivide: dotDivideDocs,
  dotMultiply: dotMultiplyDocs,
  dotPow: dotPowDocs,
  exp: expDocs,
  expm: expmDocs,
  expm1: expm1Docs,
  fix: fixDocs,
  floor: floorDocs,
  gcd: gcdDocs,
  hypot: hypotDocs,
  lcm: lcmDocs,
  log: logDocs,
  log2: log2Docs,
  log1p: log1pDocs,
  log10: log10Docs,
  mod: modDocs,
  multiply: multiplyDocs,
  norm: normDocs,
  nthRoot: nthRootDocs,
  nthRoots: nthRootsDocs,
  pow: powDocs,
  round: roundDocs,
  sign: signDocs,
  sqrt: sqrtDocs,
  sqrtm: sqrtmDocs,
  square: squareDocs,
  subtract: subtractDocs,
  unaryMinus: unaryMinusDocs,
  unaryPlus: unaryPlusDocs,
  xgcd: xgcdDocs,
  // functions - bitwise
  bitAnd: bitAndDocs,
  bitNot: bitNotDocs,
  bitOr: bitOrDocs,
  bitXor: bitXorDocs,
  leftShift: leftShiftDocs,
  rightArithShift: rightArithShiftDocs,
  rightLogShift: rightLogShiftDocs,
  // functions - combinatorics
  bellNumbers: bellNumbersDocs,
  catalan: catalanDocs,
  composition: compositionDocs,
  stirlingS2: stirlingS2Docs,
  // functions - core
  config: configDocs,
  "import": importDocs,
  typed: typedDocs,
  // functions - complex
  arg: argDocs,
  conj: conjDocs,
  re: reDocs,
  im: imDocs,
  // functions - expression
  evaluate: evaluateDocs,
  eval: evaluateDocs,
  // TODO: deprecated, cleanup in v7
  help: helpDocs,
  // functions - geometry
  distance: distanceDocs,
  intersect: intersectDocs,
  // functions - logical
  and: andDocs,
  not: notDocs,
  or: orDocs,
  xor: xorDocs,
  // functions - matrix
  concat: concatDocs,
  cross: crossDocs,
  column: columnDocs,
  ctranspose: ctransposeDocs,
  det: detDocs,
  diag: diagDocs,
  dot: dotDocs,
  getMatrixDataType: getMatrixDataTypeDocs,
  identity: identityDocs,
  filter: filterDocs,
  flatten: flattenDocs,
  forEach: forEachDocs,
  inv: invDocs,
  kron: kronDocs,
  map: mapDocs,
  ones: onesDocs,
  partitionSelect: partitionSelectDocs,
  range: rangeDocs,
  resize: resizeDocs,
  reshape: reshapeDocs,
  row: rowDocs,
  size: sizeDocs,
  sort: sortDocs,
  squeeze: squeezeDocs,
  subset: subsetDocs,
  trace: traceDocs,
  transpose: transposeDocs,
  zeros: zerosDocs,
  // functions - probability
  combinations: combinationsDocs,
  combinationsWithRep: combinationsWithRepDocs,
  // distribution: distributionDocs,
  factorial: factorialDocs,
  gamma: gammaDocs,
  kldivergence: kldivergenceDocs,
  multinomial: multinomialDocs,
  permutations: permutationsDocs,
  pickRandom: pickRandomDocs,
  random: randomDocs,
  randomInt: randomIntDocs,
  // functions - relational
  compare: compareDocs,
  compareNatural: compareNaturalDocs,
  compareText: compareTextDocs,
  deepEqual: deepEqualDocs,
  equal: equalDocs,
  equalText: equalTextDocs,
  larger: largerDocs,
  largerEq: largerEqDocs,
  smaller: smallerDocs,
  smallerEq: smallerEqDocs,
  unequal: unequalDocs,
  // functions - set
  setCartesian: setCartesianDocs,
  setDifference: setDifferenceDocs,
  setDistinct: setDistinctDocs,
  setIntersect: setIntersectDocs,
  setIsSubset: setIsSubsetDocs,
  setMultiplicity: setMultiplicityDocs,
  setPowerset: setPowersetDocs,
  setSize: setSizeDocs,
  setSymDifference: setSymDifferenceDocs,
  setUnion: setUnionDocs,
  // functions - special
  erf: erfDocs,
  // functions - statistics
  mad: madDocs,
  max: maxDocs,
  mean: meanDocs,
  median: medianDocs,
  min: minDocs,
  mode: modeDocs,
  prod: prodDocs,
  quantileSeq: quantileSeqDocs,
  std: stdDocs,
  sum: sumDocs,
  variance: varianceDocs,
  "var": varianceDocs,
  // TODO: deprecated, cleanup in v7
  // functions - trigonometry
  acos: acosDocs,
  acosh: acoshDocs,
  acot: acotDocs,
  acoth: acothDocs,
  acsc: acscDocs,
  acsch: acschDocs,
  asec: asecDocs,
  asech: asechDocs,
  asin: asinDocs,
  asinh: asinhDocs,
  atan: atanDocs,
  atanh: atanhDocs,
  atan2: atan2Docs,
  cos: cosDocs,
  cosh: coshDocs,
  cot: cotDocs,
  coth: cothDocs,
  csc: cscDocs,
  csch: cschDocs,
  sec: secDocs,
  sech: sechDocs,
  sin: sinDocs,
  sinh: sinhDocs,
  tan: tanDocs,
  tanh: tanhDocs,
  // functions - units
  to: toDocs,
  // functions - utils
  clone: cloneDocs,
  format: formatDocs,
  isNaN: isNaNDocs,
  isInteger: isIntegerDocs,
  isNegative: isNegativeDocs,
  isNumeric: isNumericDocs,
  hasNumericValue: hasNumericValueDocs,
  isPositive: isPositiveDocs,
  isPrime: isPrimeDocs,
  isZero: isZeroDocs,
  // print: printDocs // TODO: add documentation for print as soon as the parser supports objects.
  typeOf: typeOfDocs,
  "typeof": typeOfDocs,
  // TODO: deprecated, cleanup in v7
  numeric: numericDocs
};
// CONCATENATED MODULE: ./src/expression/function/help.js




var help_name = 'help';
var help_dependencies = ['typed', 'mathWithTransform', 'Help'];
var createHelp =
/* #__PURE__ */
Object(factory["a" /* factory */])(help_name, help_dependencies, function (_ref) {
  var typed = _ref.typed,
      mathWithTransform = _ref.mathWithTransform,
      Help = _ref.Help;

  /**
   * Retrieve help on a function or data type.
   * Help files are retrieved from the embedded documentation in math.docs.
   *
   * Syntax:
   *
   *    math.help(search)
   *
   * Examples:
   *
   *    console.log(math.help('sin').toString())
   *    console.log(math.help(math.add).toString())
   *    console.log(math.help(math.add).toJSON())
   *
   * @param {Function | string | Object} search   A function or function name
   *                                              for which to get help
   * @return {Help} A help object
   */
  return typed(help_name, {
    any: function any(search) {
      var prop;
      var searchName = search;

      if (typeof search !== 'string') {
        for (prop in mathWithTransform) {
          // search in functions and constants
          if (Object(utils_object["f" /* hasOwnProperty */])(mathWithTransform, prop) && search === mathWithTransform[prop]) {
            searchName = prop;
            break;
          }
        }
        /* TODO: implement help for data types
         if (!text) {
         // search data type
         for (prop in math.type) {
         if (hasOwnProperty(math, prop)) {
         if (search === math.type[prop]) {
         text = prop
         break
         }
         }
         }
         }
         */

      }

      var doc = getSafeProperty(embeddedDocs, searchName);

      if (!doc) {
        var searchText = typeof searchName === 'function' ? searchName.name : searchName;
        throw new Error('No documentation found on "' + searchText + '"');
      }

      return new Help(doc);
    }
  });
});
// CONCATENATED MODULE: ./src/type/chain/function/chain.js

var chain_name = 'chain';
var chain_dependencies = ['typed', 'Chain'];
var createChain =
/* #__PURE__ */
Object(factory["a" /* factory */])(chain_name, chain_dependencies, function (_ref) {
  var typed = _ref.typed,
      Chain = _ref.Chain;

  /**
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing `chain.done()`, which returns
   * the final value.
   *
   * The chain has a number of special functions:
   *
   * - `done()`     Finalize the chain and return the chain's value.
   * - `valueOf()`  The same as `done()`
   * - `toString()` Executes `math.format()` onto the chain's value, returning
   *                a string representation of the value.
   *
   * Syntax:
   *
   *    math.chain(value)
   *
   * Examples:
   *
   *     math.chain(3)
   *         .add(4)
   *         .subtract(2)
   *         .done()     // 5
   *
   *     math.chain( [[1, 2], [3, 4]] )
   *         .subset(math.index(0, 0), 8)
   *         .multiply(3)
   *         .done()     // [[24, 6], [9, 12]]
   *
   * @param {*} [value]   A value of any type on which to start a chained operation.
   * @return {math.Chain} The created chain
   */
  return typed(chain_name, {
    '': function _() {
      return new Chain();
    },
    any: function any(value) {
      return new Chain(value);
    }
  });
});
// CONCATENATED MODULE: ./src/function/matrix/det.js




var det_name = 'det';
var det_dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'unaryMinus', 'lup'];
var createDet =
/* #__PURE__ */
Object(factory["a" /* factory */])(det_name, det_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      unaryMinus = _ref.unaryMinus,
      lup = _ref.lup;

  /**
   * Calculate the determinant of a matrix.
   *
   * Syntax:
   *
   *    math.det(x)
   *
   * Examples:
   *
   *    math.det([[1, 2], [3, 4]]) // returns -2
   *
   *    const A = [
   *      [-2, 2, 3],
   *      [-1, 1, 3],
   *      [2, 0, -1]
   *    ]
   *    math.det(A) // returns 6
   *
   * See also:
   *
   *    inv
   *
   * @param {Array | Matrix} x  A matrix
   * @return {number} The determinant of `x`
   */
  return typed(det_name, {
    any: function any(x) {
      return Object(utils_object["a" /* clone */])(x);
    },
    'Array | Matrix': function det(x) {
      var size;

      if (Object(is["v" /* isMatrix */])(x)) {
        size = x.size();
      } else if (Array.isArray(x)) {
        x = matrix(x);
        size = x.size();
      } else {
        // a scalar
        size = [];
      }

      switch (size.length) {
        case 0:
          // scalar
          return Object(utils_object["a" /* clone */])(x);

        case 1:
          // vector
          if (size[0] === 1) {
            return Object(utils_object["a" /* clone */])(x.valueOf()[0]);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
          }

        case 2:
          {
            // two dimensional array
            var rows = size[0];
            var cols = size[1];

            if (rows === cols) {
              return _det(x.clone().valueOf(), rows, cols);
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
            }
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
      }
    }
  });
  /**
   * Calculate the determinant of a matrix
   * @param {Array[]} matrix  A square, two dimensional matrix
   * @param {number} rows     Number of rows of the matrix (zero-based)
   * @param {number} cols     Number of columns of the matrix (zero-based)
   * @returns {number} det
   * @private
   */

  function _det(matrix, rows, cols) {
    if (rows === 1) {
      // this is a 1 x 1 matrix
      return Object(utils_object["a" /* clone */])(matrix[0][0]);
    } else if (rows === 2) {
      // this is a 2 x 2 matrix
      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
    } else {
      // Compute the LU decomposition
      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)

      var det = decomp.U[0][0];

      for (var _i = 1; _i < rows; _i++) {
        det = multiply(det, decomp.U[_i][_i]);
      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.
      // This can be determined by counting the cycles. This is roughly a linear time algorithm.


      var evenCycles = 0;
      var i = 0;
      var visited = [];

      while (true) {
        while (visited[i]) {
          i++;
        }

        if (i >= rows) break;
        var j = i;
        var cycleLen = 0;

        while (!visited[decomp.p[j]]) {
          visited[decomp.p[j]] = true;
          j = decomp.p[j];
          cycleLen++;
        }

        if (cycleLen % 2 === 0) {
          evenCycles++;
        }
      }

      return evenCycles % 2 === 0 ? det : unaryMinus(det);
    }
  }
});
// CONCATENATED MODULE: ./src/function/matrix/inv.js




var inv_name = 'inv';
var inv_dependencies = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];
var createInv =
/* #__PURE__ */
Object(factory["a" /* factory */])(inv_name, inv_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      divideScalar = _ref.divideScalar,
      addScalar = _ref.addScalar,
      multiply = _ref.multiply,
      unaryMinus = _ref.unaryMinus,
      det = _ref.det,
      identity = _ref.identity,
      abs = _ref.abs;

  /**
   * Calculate the inverse of a square matrix.
   *
   * Syntax:
   *
   *     math.inv(x)
   *
   * Examples:
   *
   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
   *     math.inv(4)                 // returns 0.25
   *     1 / 4                       // returns 0.25
   *
   * See also:
   *
   *     det, transpose
   *
   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
   * @return {number | Complex | Array | Matrix} The inverse of `x`.
   */
  return typed(inv_name, {
    'Array | Matrix': function ArrayMatrix(x) {
      var size = Object(is["v" /* isMatrix */])(x) ? x.size() : Object(utils_array["a" /* arraySize */])(x);

      switch (size.length) {
        case 1:
          // vector
          if (size[0] === 1) {
            if (Object(is["v" /* isMatrix */])(x)) {
              return matrix([divideScalar(1, x.valueOf()[0])]);
            } else {
              return [divideScalar(1, x[0])];
            }
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
          }

        case 2:
          // two dimensional array
          {
            var rows = size[0];
            var cols = size[1];

            if (rows === cols) {
              if (Object(is["v" /* isMatrix */])(x)) {
                return matrix(_inv(x.valueOf(), rows, cols), x.storage());
              } else {
                // return an Array
                return _inv(x, rows, cols);
              }
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
            }
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
      }
    },
    any: function any(x) {
      // scalar
      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
    }
  });
  /**
   * Calculate the inverse of a square matrix
   * @param {Array[]} mat     A square matrix
   * @param {number} rows     Number of rows
   * @param {number} cols     Number of columns, must equal rows
   * @return {Array[]} inv    Inverse matrix
   * @private
   */

  function _inv(mat, rows, cols) {
    var r, s, f, value, temp;

    if (rows === 1) {
      // this is a 1 x 1 matrix
      value = mat[0][0];

      if (value === 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }

      return [[divideScalar(1, value)]];
    } else if (rows === 2) {
      // this is a 2 x 2 matrix
      var d = det(mat);

      if (d === 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }

      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
    } else {
      // this is a matrix of 3 x 3 or larger
      // calculate inverse using gauss-jordan elimination
      //      https://en.wikipedia.org/wiki/Gaussian_elimination
      //      http://mathworld.wolfram.com/MatrixInverse.html
      //      http://math.uww.edu/~mcfarlat/inverse.htm
      // make a copy of the matrix (only the arrays, not of the elements)
      var A = mat.concat();

      for (r = 0; r < rows; r++) {
        A[r] = A[r].concat();
      } // create an identity matrix which in the end will contain the
      // matrix inverse


      var B = identity(rows).valueOf(); // loop over all columns, and perform row reductions

      for (var c = 0; c < cols; c++) {
        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
        var ABig = abs(A[c][c]);
        var rBig = c;
        r = c + 1;

        while (r < rows) {
          if (abs(A[r][c]) > ABig) {
            ABig = abs(A[r][c]);
            rBig = r;
          }

          r++;
        }

        if (ABig === 0) {
          throw Error('Cannot calculate inverse, determinant is zero');
        }

        r = rBig;

        if (r !== c) {
          temp = A[c];
          A[c] = A[r];
          A[r] = temp;
          temp = B[c];
          B[c] = B[r];
          B[r] = temp;
        } // eliminate non-zero values on the other rows at column c


        var Ac = A[c];
        var Bc = B[c];

        for (r = 0; r < rows; r++) {
          var Ar = A[r];
          var Br = B[r];

          if (r !== c) {
            // eliminate value at column c and row r
            if (Ar[c] !== 0) {
              f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value
              // at column c

              for (s = c; s < cols; s++) {
                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
              }

              for (s = 0; s < cols; s++) {
                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
              }
            }
          } else {
            // normalize value at Acc to 1,
            // divide each value on row r with the value at Acc
            f = Ac[c];

            for (s = c; s < cols; s++) {
              Ar[s] = divideScalar(Ar[s], f);
            }

            for (s = 0; s < cols; s++) {
              Br[s] = divideScalar(Br[s], f);
            }
          }
        }
      }

      return B;
    }
  }
});
// CONCATENATED MODULE: ./src/function/matrix/expm.js



var expm_name = 'expm';
var expm_dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];
var createExpm =
/* #__PURE__ */
Object(factory["a" /* factory */])(expm_name, expm_dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      add = _ref.add,
      identity = _ref.identity,
      inv = _ref.inv,
      multiply = _ref.multiply;

  /**
   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.
   * Not to be confused with exp(a), which performs element-wise
   * exponentiation.
   *
   * The exponential is calculated using the Padé approximant with scaling and
   * squaring; see "Nineteen Dubious Ways to Compute the Exponential of a
   * Matrix," by Moler and Van Loan.
   *
   * Syntax:
   *
   *     math.expm(x)
   *
   * Examples:
   *
   *     const A = [[0,2],[0,0]]
   *     math.expm(A)        // returns [[1,2],[0,1]]
   *
   * See also:
   *
   *     exp
   *
   * @param {Matrix} x  A square Matrix
   * @return {Matrix}   The exponential of x
   */
  return typed(expm_name, {
    Matrix: function Matrix(A) {
      // Check matrix size
      var size = A.size();

      if (size.length !== 2 || size[0] !== size[1]) {
        throw new RangeError('Matrix must be square ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
      }

      var n = size[0]; // Desired accuracy of the approximant (The actual accuracy
      // will be affected by round-off error)

      var eps = 1e-15; // The Padé approximant is not so accurate when the values of A
      // are "large", so scale A by powers of two. Then compute the
      // exponential, and square the result repeatedly according to
      // the identity e^A = (e^(A/m))^m
      // Compute infinity-norm of A, ||A||, to see how "big" it is

      var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the
      // Padé approximant to reach the desired accuracy

      var params = findParams(infNorm, eps);
      var q = params.q;
      var j = params.j; // The Pade approximation to e^A is:
      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)
      // where
      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i
      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i
      // Scale A by 1 / 2^j

      var Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix

      var N = identity(n);
      var D = identity(n); // Initialization (i=0)

      var factor = 1; // Initialization (i=1)

      var AposToI = Apos; // Cloning not necessary

      var alternate = -1;

      for (var i = 1; i <= q; i++) {
        if (i > 1) {
          AposToI = multiply(AposToI, Apos);
          alternate = -alternate;
        }

        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);
        N = add(N, multiply(factor, AposToI));
        D = add(D, multiply(factor * alternate, AposToI));
      }

      var R = multiply(inv(D), N); // Square j times

      for (var _i = 0; _i < j; _i++) {
        R = multiply(R, R);
      }

      return Object(is["H" /* isSparseMatrix */])(A) ? A.createSparseMatrix(R) : R;
    }
  });

  function infinityNorm(A) {
    var n = A.size()[0];
    var infNorm = 0;

    for (var i = 0; i < n; i++) {
      var rowSum = 0;

      for (var j = 0; j < n; j++) {
        rowSum += abs(A.get([i, j]));
      }

      infNorm = Math.max(rowSum, infNorm);
    }

    return infNorm;
  }
  /**
   * Find the best parameters for the Pade approximant given
   * the matrix norm and desired accuracy. Returns the first acceptable
   * combination in order of increasing computational load.
   */


  function findParams(infNorm, eps) {
    var maxSearchSize = 30;

    for (var k = 0; k < maxSearchSize; k++) {
      for (var q = 0; q <= k; q++) {
        var j = k - q;

        if (errorEstimate(infNorm, q, j) < eps) {
          return {
            q: q,
            j: j
          };
        }
      }
    }

    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');
  }
  /**
   * Returns the estimated error of the Pade approximant for the given
   * parameters.
   */


  function errorEstimate(infNorm, q, j) {
    var qfac = 1;

    for (var i = 2; i <= q; i++) {
      qfac *= i;
    }

    var twoqfac = qfac;

    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {
      twoqfac *= _i2;
    }

    var twoqp1fac = twoqfac * (2 * q + 1);
    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);
  }
});
// CONCATENATED MODULE: ./src/function/matrix/sqrtm.js




var sqrtm_name = 'sqrtm';
var sqrtm_dependencies = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];
var createSqrtm =
/* #__PURE__ */
Object(factory["a" /* factory */])(sqrtm_name, sqrtm_dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      add = _ref.add,
      multiply = _ref.multiply,
      sqrt = _ref.sqrt,
      subtract = _ref.subtract,
      inv = _ref.inv,
      size = _ref.size,
      max = _ref.max,
      identity = _ref.identity;

  /**
   * Calculate the principal square root of a square matrix.
   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix
   *
   * Syntax:
   *
   *     X = math.sqrtm(A)
   *
   * Examples:
   *
   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   */
  var sqrtm = typed(sqrtm_name, {
    'Array | Matrix': function ArrayMatrix(A) {
      var size = Object(is["v" /* isMatrix */])(A) ? A.size() : Object(utils_array["a" /* arraySize */])(A);

      switch (size.length) {
        case 1:
          // Single element Array | Matrix
          if (size[0] === 1) {
            return sqrt(A);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
          }

        case 2:
          {
            // Two-dimensional Array | Matrix
            var rows = size[0];
            var cols = size[1];

            if (rows === cols) {
              return _denmanBeavers(A);
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + Object(utils_string["d" /* format */])(size) + ')');
            }
          }
      }
    }
  });
  var _maxIterations = 1e3;
  var _tolerance = 1e-6;
  /**
   * Calculate the principal square root matrix using the Denman–Beavers iterative method
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   * @private
   */

  function _denmanBeavers(A) {
    var error;
    var iterations = 0;
    var Y = A;
    var Z = identity(size(A));

    do {
      var Yk = Y;
      Y = multiply(0.5, add(Yk, inv(Z)));
      Z = multiply(0.5, add(Z, inv(Yk)));
      error = max(abs(subtract(Y, Yk)));

      if (error > _tolerance && ++iterations > _maxIterations) {
        throw new Error('computing square root of matrix: iterative method could not converge');
      }
    } while (error > _tolerance);

    return Y;
  }

  return sqrtm;
});
// CONCATENATED MODULE: ./src/function/arithmetic/divide.js




var divide_name = 'divide';
var divide_dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];
var createDivide =
/* #__PURE__ */
Object(factory["a" /* factory */])(divide_name, divide_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      multiply = _ref.multiply,
      equalScalar = _ref.equalScalar,
      divideScalar = _ref.divideScalar,
      inv = _ref.inv;
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Divide two values, `x / y`.
   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
   *
   * Syntax:
   *
   *    math.divide(x, y)
   *
   * Examples:
   *
   *    math.divide(2, 3)            // returns number 0.6666666666666666
   *
   *    const a = math.complex(5, 14)
   *    const b = math.complex(4, 1)
   *    math.divide(a, b)            // returns Complex 2 + 3i
   *
   *    const c = [[7, -6], [13, -4]]
   *    const d = [[1, 2], [4, 3]]
   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]
   *
   *    const e = math.unit('18 km')
   *    math.divide(e, 4.5)          // returns Unit 4 km
   *
   * See also:
   *
   *    multiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
   */

  return typed('divide', Object(utils_object["e" /* extend */])({
    // we extend the signatures of divideScalar with signatures dealing with matrices
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
      // TODO: implement matrix right division using pseudo inverse
      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html
      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
      return multiply(x, inv(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, divideScalar, false);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, divideScalar, false);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array | Matrix': function anyArrayMatrix(x, y) {
      return multiply(x, inv(y));
    }
  }, divideScalar.signatures));
});
// CONCATENATED MODULE: ./src/function/geometry/distance.js


var distance_name = 'distance';
var distance_dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];
var createDistance =
/* #__PURE__ */
Object(factory["a" /* factory */])(distance_name, distance_dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      subtract = _ref.subtract,
      multiplyScalar = _ref.multiplyScalar,
      divideScalar = _ref.divideScalar,
      unaryMinus = _ref.unaryMinus,
      sqrt = _ref.sqrt,
      abs = _ref.abs;

  /**
    * Calculates:
    *    The eucledian distance between two points in 2 and 3 dimensional spaces.
    *    Distance between point and a line in 2 and 3 dimensional spaces.
    *    Pairwise distance between a set of 2D or 3D points
    * NOTE:
    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
    *
    * Syntax:
    *    math.distance([x1, y1], [x2, y2])
    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
    *    math.distance([x1, y1, z1], [x2, y2, z2])
    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
    *    math.distance([[A], [B], [C]...])
    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
    *
    * Examples:
    *    math.distance([0,0], [4,4])                     // Returns 5.6569
    *    math.distance(
    *     {pointOneX: 0, pointOneY: 0},
    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
    *    math.distance(
    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
    *    math.distance(
    *     {pointX: 1, pointY: 4},
    *     {lineOnePtX: 6, lineOnePtY: 3},
    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
    *    math.distance(
    *     {pointX: 2, pointY: 3, pointZ: 1},
    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
    *
    * @param {Array | Matrix | Object} x    Co-ordinates of first point
    * @param {Array | Matrix | Object} y    Co-ordinates of second point
    * @return {Number | BigNumber} Returns the distance from two/three points
  */
  return typed(distance_name, {
    'Array, Array, Array': function ArrayArrayArray(x, y, z) {
      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
      if (x.length === 2 && y.length === 2 && z.length === 2) {
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }

        if (!_2d(z)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
        }

        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));
        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);
        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));
        var constant = x[1];
        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object, Object': function ObjectObjectObject(x, y, z) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
        if (!_2d(x)) {
          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
        }

        if (!_2d(y)) {
          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
        }

        if (!_2d(z)) {
          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
        }

        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {
          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));
          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);
          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));
          var constant = x.pointX;
          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Array, Array': function ArrayArray(x, y) {
      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
      if (x.length === 2 && y.length === 3) {
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }

        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
      } else if (x.length === 3 && y.length === 6) {
        // Point to Line 3D
        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }

        if (!_parametricLine(y)) {
          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
        }

        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
      } else if (x.length === 2 && y.length === 2) {
        // Point to Point 2D
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }

        return _distance2d(x[0], x[1], y[0], y[1]);
      } else if (x.length === 3 && y.length === 3) {
        // Point to Point 3D
        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }

        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }

        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object': function ObjectObject(x, y) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
        if (!_2d(x)) {
          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
        }

        if (!_3d(y)) {
          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
        }

        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {
          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
        // Point to Line 3D
        if (!_3d(x)) {
          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
        }

        if (!_parametricLine(y)) {
          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
        }

        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {
          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
        // Point to Point 2D
        if (!_2d(x)) {
          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
        }

        if (!_2d(y)) {
          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
        }

        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {
          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
        // Point to Point 3D
        if (!_3d(x)) {
          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
        }

        if (!_3d(y)) {
          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
        }

        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {
          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    Array: function Array(arr) {
      if (!_pairwise(arr)) {
        throw new TypeError('Incorrect array format entered for pairwise distance calculation');
      }

      return _distancePairwise(arr);
    }
  });

  function _isNumber(a) {
    // distance supports numbers and bignumbers
    return typeof a === 'number' || Object(is["e" /* isBigNumber */])(a);
  }

  function _2d(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]);
  }

  function _3d(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
  }

  function _parametricLine(a) {
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
  }

  function _objectToArray(o) {
    var keys = Object.keys(o);
    var a = [];

    for (var i = 0; i < keys.length; i++) {
      a.push(o[keys[i]]);
    }

    return a;
  }

  function _pairwise(a) {
    // checks for valid arguments passed to _distancePairwise(Array)
    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
      if (a.some(function (aI) {
        return aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]);
      })) {
        return false;
      }
    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
      if (a.some(function (aI) {
        return aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]);
      })) {
        return false;
      }
    } else {
      return false;
    }

    return true;
  }

  function _distancePointLine2D(x, y, a, b, c) {
    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));
    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));
    return divideScalar(num, den);
  }

  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];
    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));
    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));
    return divideScalar(num, den);
  }

  function _distance2d(x1, y1, x2, y2) {
    var yDiff = subtract(y2, y1);
    var xDiff = subtract(x2, x1);
    var radicant = addScalar(multiplyScalar(yDiff, yDiff), multiplyScalar(xDiff, xDiff));
    return sqrt(radicant);
  }

  function _distance3d(x1, y1, z1, x2, y2, z2) {
    var zDiff = subtract(z2, z1);
    var yDiff = subtract(y2, y1);
    var xDiff = subtract(x2, x1);
    var radicant = addScalar(addScalar(multiplyScalar(zDiff, zDiff), multiplyScalar(yDiff, yDiff)), multiplyScalar(xDiff, xDiff));
    return sqrt(radicant);
  }

  function _distancePairwise(a) {
    var result = [];

    for (var i = 0; i < a.length - 1; i++) {
      for (var j = i + 1; j < a.length; j++) {
        if (a[0].length === 2) {
          result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
        } else if (a[0].length === 3) {
          result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
        }
      }
    }

    return result;
  }
});
// CONCATENATED MODULE: ./src/function/geometry/intersect.js


var intersect_name = 'intersect';
var intersect_dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar'];
var createIntersect =
/* #__PURE__ */
Object(factory["a" /* factory */])(intersect_name, intersect_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      abs = _ref.abs,
      add = _ref.add,
      addScalar = _ref.addScalar,
      matrix = _ref.matrix,
      multiply = _ref.multiply,
      multiplyScalar = _ref.multiplyScalar,
      divideScalar = _ref.divideScalar,
      subtract = _ref.subtract,
      smaller = _ref.smaller,
      equalScalar = _ref.equalScalar;

  /**
   * Calculates the point of intersection of two lines in two or three dimensions
   * and of a line and a plane in three dimensions. The inputs are in the form of
   * arrays or 1 dimensional matrices. The line intersection functions return null
   * if the lines do not meet.
   *
   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
   *
   * Syntax:
   *
   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
   *
   * Examples:
   *
   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
   *
   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
   *                              OR Co-efficients of the plane's equation
   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
   *                              OR null if the calculation is for line and plane
   * @return {Array}              Returns the point of intersection of lines/lines-planes
   */
  var intersect = typed('intersect', {
    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {
      if (!_3d(x)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
      }

      if (!_3d(y)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
      }

      if (!_4d(plane)) {
        throw new TypeError('Array with 4 numbers expected as third argument');
      }

      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
    },
    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {
      if (w.length === 2) {
        if (!_2d(w)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }

        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
        }

        if (!_2d(z)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
        }

        return _intersect2d(w, x, y, z);
      } else if (w.length === 3) {
        if (!_3d(w)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }

        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }

        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
        }

        if (!_3d(z)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
        }

        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
      } else {
        throw new TypeError('Arrays with two or thee dimensional points expected');
      }
    },
    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {
      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
    },
    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {
      // TODO: output matrix type should match input matrix type
      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
    }
  });

  function _isNumeric(a) {
    // intersect supports numbers and bignumbers
    return typeof a === 'number' || Object(is["e" /* isBigNumber */])(a);
  }

  function _2d(x) {
    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);
  }

  function _3d(x) {
    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);
  }

  function _4d(x) {
    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);
  }

  function _intersect2d(p1a, p1b, p2a, p2b) {
    var o1 = p1a;
    var o2 = p2a;
    var d1 = subtract(o1, p1b);
    var d2 = subtract(o2, p2b);
    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));

    if (smaller(abs(det), config.epsilon)) {
      return null;
    }

    var d20o11 = multiplyScalar(d2[0], o1[1]);
    var d21o10 = multiplyScalar(d2[1], o1[0]);
    var d20o21 = multiplyScalar(d2[0], o2[1]);
    var d21o20 = multiplyScalar(d2[1], o2[0]);
    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);
    return add(multiply(d1, t), o1);
  }

  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));
    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));
    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));
    return addScalar(addScalar(add1, add2), add3);
  }

  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);

    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);

    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);

    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);

    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);

    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));
    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);
    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));
    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));
    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));
    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));
    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));
    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));

    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {
      return [pax, pay, paz];
    } else {
      return null;
    }
  }

  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
    var x1x = multiplyScalar(x1, x);
    var x2x = multiplyScalar(x2, x);
    var y1y = multiplyScalar(y1, y);
    var y2y = multiplyScalar(y2, y);
    var z1z = multiplyScalar(z1, z);
    var z2z = multiplyScalar(z2, z);
    var t = divideScalar(subtract(subtract(subtract(c, x1x), y1y), z1z), subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z));
    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));
    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));
    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));
    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:
    //       (a) no intersection,
    //       (b) line contained in plane
  }

  return intersect;
});
// CONCATENATED MODULE: ./src/function/statistics/sum.js




var sum_name = 'sum';
var sum_dependencies = ['typed', 'config', 'add', '?bignumber', '?fraction'];
var createSum =
/* #__PURE__ */
Object(factory["a" /* factory */])(sum_name, sum_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      add = _ref.add,
      bignumber = _ref.bignumber,
      fraction = _ref.fraction;

  /**
   * Compute the sum of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.sum(a, b, c, ...)
   *     math.sum(A)
   *
   * Examples:
   *
   *     math.sum(2, 1, 4, 3)               // returns 10
   *     math.sum([2, 1, 4, 3])             // returns 10
   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The sum of all values
   */
  return typed(sum_name, {
    // sum([a, b, c, d, ...])
    'Array | Matrix': _sum,
    // sum([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nsumDim,
    // sum(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function sum');
      }

      return _sum(args);
    }
  });
  /**
   * Recursively calculate the sum of an n-dimensional array
   * @param {Array} array
   * @return {number} sum
   * @private
   */

  function _sum(array) {
    var sum;
    deepForEach(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
      } catch (err) {
        throw improveErrorMessage(err, 'sum', value);
      }
    });

    if (sum === undefined) {
      switch (config.number) {
        case 'number':
          return 0;

        case 'BigNumber':
          return bignumber ? bignumber(0) : noBignumber();

        case 'Fraction':
          return fraction ? fraction(0) : noFraction();

        default:
          return 0;
      }
    }

    return sum;
  }

  function _nsumDim(array, dim) {
    try {
      var sum = reduce(array, dim, add);
      return sum;
    } catch (err) {
      throw improveErrorMessage(err, 'sum');
    }
  }
});
// CONCATENATED MODULE: ./src/function/statistics/mean.js




var mean_name = 'mean';
var mean_dependencies = ['typed', 'add', 'divide'];
var createMean =
/* #__PURE__ */
Object(factory["a" /* factory */])(mean_name, mean_dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      divide = _ref.divide;

  /**
   * Compute the mean value of matrix or a list with values.
   * In case of a multi dimensional array, the mean of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.mean(a, b, c, ...)
   *     math.mean(A)
   *     math.mean(A, dim)
   *
   * Examples:
   *
   *     math.mean(2, 1, 4, 3)                     // returns 2.5
   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
   *
   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
   *
   * See also:
   *
   *     median, min, max, sum, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The mean of all values
   */
  return typed(mean_name, {
    // mean([a, b, c, d, ...])
    'Array | Matrix': _mean,
    // mean([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nmeanDim,
    // mean(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function mean');
      }

      return _mean(args);
    }
  });
  /**
   * Calculate the mean value in an n-dimensional array, returning a
   * n-1 dimensional array
   * @param {Array} array
   * @param {number} dim
   * @return {number} mean
   * @private
   */

  function _nmeanDim(array, dim) {
    try {
      var sum = reduce(array, dim, add);
      var s = Array.isArray(array) ? Object(utils_array["a" /* arraySize */])(array) : array.size();
      return divide(sum, s[dim]);
    } catch (err) {
      throw improveErrorMessage(err, 'mean');
    }
  }
  /**
   * Recursively calculate the mean value in an n-dimensional array
   * @param {Array} array
   * @return {number} mean
   * @private
   */


  function _mean(array) {
    var sum = 0;
    var num = 0;
    deepForEach(array, function (value) {
      try {
        sum = add(sum, value);
        num++;
      } catch (err) {
        throw improveErrorMessage(err, 'mean', value);
      }
    });

    if (num === 0) {
      throw new Error('Cannot calculate mean of an empty array');
    }

    return divide(sum, num);
  }
});
// CONCATENATED MODULE: ./src/function/statistics/median.js




var median_name = 'median';
var median_dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];
var createMedian =
/* #__PURE__ */
Object(factory["a" /* factory */])(median_name, median_dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      divide = _ref.divide,
      compare = _ref.compare,
      partitionSelect = _ref.partitionSelect;

  /**
   * Compute the median of a matrix or a list with values. The values are
   * sorted and the middle value is returned. In case of an even number of
   * values, the average of the two middle values is returned.
   * Supported types of values are: Number, BigNumber, Unit
   *
   * In case of a (multi dimensional) array or matrix, the median of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.median(a, b, c, ...)
   *     math.median(A)
   *
   * Examples:
   *
   *     math.median(5, 2, 7)        // returns 5
   *     math.median([3, -1, 5, 7])  // returns 4
   *
   * See also:
   *
   *     mean, min, max, sum, prod, std, variance, quantileSeq
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The median
   */
  var median = typed(median_name, {
    // median([a, b, c, d, ...])
    'Array | Matrix': _median,
    // median([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      // TODO: implement median(A, dim)
      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)
    },
    // median(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function median');
      }

      return _median(args);
    }
  });
  /**
   * Recursively calculate the median of an n-dimensional array
   * @param {Array} array
   * @return {Number} median
   * @private
   */

  function _median(array) {
    try {
      array = Object(utils_array["e" /* flatten */])(array.valueOf());
      var num = array.length;

      if (num === 0) {
        throw new Error('Cannot calculate median of an empty array');
      }

      if (num % 2 === 0) {
        // even: return the average of the two middle values
        var mid = num / 2 - 1;
        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part

        var left = array[mid];

        for (var i = 0; i < mid; ++i) {
          if (compare(array[i], left) > 0) {
            left = array[i];
          }
        }

        return middle2(left, right);
      } else {
        // odd: return the middle value
        var m = partitionSelect(array, (num - 1) / 2);
        return middle(m);
      }
    } catch (err) {
      throw improveErrorMessage(err, 'median');
    }
  } // helper function to type check the middle value of the array


  var middle = typed({
    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {
      return value;
    }
  }); // helper function to type check the two middle value of the array

  var middle2 = typed({
    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {
      return divide(add(left, right), 2);
    }
  });
  return median;
});
// CONCATENATED MODULE: ./src/function/statistics/mad.js



var mad_name = 'mad';
var mad_dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];
var createMad =
/* #__PURE__ */
Object(factory["a" /* factory */])(mad_name, mad_dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      map = _ref.map,
      median = _ref.median,
      subtract = _ref.subtract;

  /**
   * Compute the median absolute deviation of a matrix or a list with values.
   * The median absolute deviation is defined as the median of the absolute
   * deviations from the median.
   *
   * Syntax:
   *
   *     math.mad(a, b, c, ...)
   *     math.mad(A)
   *
   * Examples:
   *
   *     math.mad(10, 20, 30)             // returns 10
   *     math.mad([1, 2, 3])              // returns 1
   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
   *
   * See also:
   *
   *     median, mean, std, abs
   *
   * @param {Array | Matrix} array
   *                        A single matrix or multiple scalar values.
   * @return {*} The median absolute deviation.
   */
  return typed(mad_name, {
    // mad([a, b, c, d, ...])
    'Array | Matrix': _mad,
    // mad(a, b, c, d, ...)
    '...': function _(args) {
      return _mad(args);
    }
  });

  function _mad(array) {
    array = Object(utils_array["e" /* flatten */])(array.valueOf());

    if (array.length === 0) {
      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
    }

    try {
      var med = median(array);
      return median(map(array, function (value) {
        return abs(subtract(value, med));
      }));
    } catch (err) {
      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {
        throw new TypeError(err.message.replace('median', 'mad'));
      } else {
        throw improveErrorMessage(err, 'mad');
      }
    }
  }
});
// CONCATENATED MODULE: ./src/function/statistics/variance.js





var DEFAULT_NORMALIZATION = 'unbiased';
var variance_name = 'variance';
var variance_dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
var createVariance =
/* #__PURE__ */
Object(factory["a" /* factory */])(variance_name, variance_dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      divide = _ref.divide,
      apply = _ref.apply,
      isNaN = _ref.isNaN;

  /**
   * Compute the variance of a matrix or a  list with values.
   * In case of a (multi dimensional) array or matrix, the variance over all
   * elements will be calculated.
   *
   * Additionally, it is possible to compute the variance along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Note that older browser may not like the variable name `var`. In that
   * case, the function can be called as `math['var'](...)` instead of
   * `math.var(...)`.
   *
   * Syntax:
   *
   *     math.variance(a, b, c, ...)
   *     math.variance(A)
   *     math.variance(A, normalization)
   *     math.variance(A, dimension)
   *     math.variance(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.variance(2, 4, 6)                     // returns 4
   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667
   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5
   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4
   *
   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5
   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]
   *
   * See also:
   *
   *    mean, median, max, min, prod, std, sum
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the variance for a matrix
   * @return {*} The variance
   */
  return typed(variance_name, {
    // variance([a, b, c, d, ...])
    'Array | Matrix': function ArrayMatrix(array) {
      return _var(array, DEFAULT_NORMALIZATION);
    },
    // variance([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _var,
    // variance([a, b, c, c, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return _varDim(array, dim, DEFAULT_NORMALIZATION);
    },
    // variance([a, b, c, c, ...], dim, normalization)
    'Array | Matrix, number | BigNumber, string': _varDim,
    // variance(a, b, c, d, ...)
    '...': function _(args) {
      return _var(args, DEFAULT_NORMALIZATION);
    }
  });
  /**
   * Recursively calculate the variance of an n-dimensional array
   * @param {Array} array
   * @param {string} normalization
   *                        Determines how to normalize the variance:
   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
   *                        - 'uncorrected' The sum of squared errors is divided by n
   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
   * @return {number | BigNumber} variance
   * @private
   */

  function _var(array, normalization) {
    var sum = 0;
    var num = 0;

    if (array.length === 0) {
      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
    } // calculate the mean and number of elements


    deepForEach(array, function (value) {
      try {
        sum = add(sum, value);
        num++;
      } catch (err) {
        throw improveErrorMessage(err, 'variance', value);
      }
    });
    if (num === 0) throw new Error('Cannot calculate variance of an empty array');
    var mean = divide(sum, num); // calculate the variance

    sum = 0;
    deepForEach(array, function (value) {
      var diff = subtract(value, mean);
      sum = add(sum, multiply(diff, diff));
    });

    if (isNaN(sum)) {
      return sum;
    }

    switch (normalization) {
      case 'uncorrected':
        return divide(sum, num);

      case 'biased':
        return divide(sum, num + 1);

      case 'unbiased':
        {
          var zero = Object(is["e" /* isBigNumber */])(sum) ? sum.mul(0) : 0;
          return num === 1 ? zero : divide(sum, num - 1);
        }

      default:
        throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
    }
  }

  function _varDim(array, dim, normalization) {
    try {
      if (array.length === 0) {
        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
      }

      return apply(array, dim, function (x) {
        return _var(x, normalization);
      });
    } catch (err) {
      throw improveErrorMessage(err, 'variance');
    }
  }
}); // For backward compatibility, deprecated since version 6.0.0. Date: 2018-11-09

var createDeprecatedVar =
/* #__PURE__ */
Object(factory["a" /* factory */])('var', ['variance'], function (_ref2) {
  var variance = _ref2.variance;
  return function () {
    Object(utils_log["a" /* warnOnce */])('Function "var" has been renamed to "variance" in v6.0.0, please use the new function instead.');

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return variance.apply(variance, args);
  };
});
// CONCATENATED MODULE: ./src/function/statistics/quantileSeq.js




var quantileSeq_name = 'quantileSeq';
var quantileSeq_dependencies = ['typed', 'add', 'multiply', 'partitionSelect', 'compare'];
var createQuantileSeq =
/* #__PURE__ */
Object(factory["a" /* factory */])(quantileSeq_name, quantileSeq_dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      multiply = _ref.multiply,
      partitionSelect = _ref.partitionSelect,
      compare = _ref.compare;

  /**
   * Compute the prob order quantile of a matrix or a list with values.
   * The sequence is sorted and the middle value is returned.
   * Supported types of sequence values are: Number, BigNumber, Unit
   * Supported types of probability are: Number, BigNumber
   *
   * In case of a (multi dimensional) array or matrix, the prob order quantile
   * of all elements will be calculated.
   *
   * Syntax:
   *
   *     math.quantileSeq(A, prob[, sorted])
   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
   *     math.quantileSeq(A, N[, sorted])
   *
   * Examples:
   *
   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, variance
   *
   * @param {Array, Matrix} data                A single matrix or Array
   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
   *                                            the amount of evenly distributed steps of
   *                                            probabilities; only one of these options can
   *                                            be provided
   * @param {Boolean} sorted=false              is data sorted in ascending order
   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
   */
  function quantileSeq(data, probOrN, sorted) {
    var probArr, dataArr, one;

    if (arguments.length < 2 || arguments.length > 3) {
      throw new SyntaxError('Function quantileSeq requires two or three parameters');
    }

    if (Object(is["i" /* isCollection */])(data)) {
      sorted = sorted || false;

      if (typeof sorted === 'boolean') {
        dataArr = data.valueOf();

        if (Object(is["y" /* isNumber */])(probOrN)) {
          if (probOrN < 0) {
            throw new Error('N/prob must be non-negative');
          }

          if (probOrN <= 1) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return _quantileSeq(dataArr, probOrN, sorted);
          }

          if (probOrN > 1) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!Object(utils_number["i" /* isInteger */])(probOrN)) {
              throw new Error('N must be a positive integer');
            }

            var nPlusOne = probOrN + 1;
            probArr = new Array(probOrN);

            for (var i = 0; i < probOrN;) {
              probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
            }

            return probArr;
          }
        }

        if (Object(is["e" /* isBigNumber */])(probOrN)) {
          var BigNumber = probOrN.constructor;

          if (probOrN.isNegative()) {
            throw new Error('N/prob must be non-negative');
          }

          one = new BigNumber(1);

          if (probOrN.lte(one)) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return new BigNumber(_quantileSeq(dataArr, probOrN, sorted));
          }

          if (probOrN.gt(one)) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!probOrN.isInteger()) {
              throw new Error('N must be a positive integer');
            } // largest possible Array length is 2^32-1
            // 2^32 < 10^15, thus safe conversion guaranteed


            var intN = probOrN.toNumber();

            if (intN > 4294967295) {
              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
            }

            var _nPlusOne = new BigNumber(intN + 1);

            probArr = new Array(intN);

            for (var _i = 0; _i < intN;) {
              probArr[_i] = new BigNumber(_quantileSeq(dataArr, new BigNumber(++_i).div(_nPlusOne), sorted));
            }

            return probArr;
          }
        }

        if (Array.isArray(probOrN)) {
          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
          probArr = new Array(probOrN.length);

          for (var _i2 = 0; _i2 < probArr.length; ++_i2) {
            var currProb = probOrN[_i2];

            if (Object(is["y" /* isNumber */])(currProb)) {
              if (currProb < 0 || currProb > 1) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else if (Object(is["e" /* isBigNumber */])(currProb)) {
              one = new currProb.constructor(1);

              if (currProb.isNegative() || currProb.gt(one)) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else {
              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
            }

            probArr[_i2] = _quantileSeq(dataArr, currProb, sorted);
          }

          return probArr;
        }

        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
      }

      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
    }

    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
  }
  /**
   * Calculate the prob order quantile of an n-dimensional array.
   *
   * @param {Array} array
   * @param {Number, BigNumber} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */


  function _quantileSeq(array, prob, sorted) {
    var flat = Object(utils_array["e" /* flatten */])(array);
    var len = flat.length;

    if (len === 0) {
      throw new Error('Cannot calculate quantile of an empty sequence');
    }

    if (Object(is["y" /* isNumber */])(prob)) {
      var _index = prob * (len - 1);

      var _fracPart = _index % 1;

      if (_fracPart === 0) {
        var value = sorted ? flat[_index] : partitionSelect(flat, _index);
        validate(value);
        return value;
      }

      var _integerPart = Math.floor(_index);

      var _left;

      var _right;

      if (sorted) {
        _left = flat[_integerPart];
        _right = flat[_integerPart + 1];
      } else {
        _right = partitionSelect(flat, _integerPart + 1); // max of partition is kth largest

        _left = flat[_integerPart];

        for (var i = 0; i < _integerPart; ++i) {
          if (compare(flat[i], _left) > 0) {
            _left = flat[i];
          }
        }
      }

      validate(_left);
      validate(_right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

      return add(multiply(_left, 1 - _fracPart), multiply(_right, _fracPart));
    } // If prob is a BigNumber


    var index = prob.times(len - 1);

    if (index.isInteger()) {
      index = index.toNumber();

      var _value = sorted ? flat[index] : partitionSelect(flat, index);

      validate(_value);
      return _value;
    }

    var integerPart = index.floor();
    var fracPart = index.minus(integerPart);
    var integerPartNumber = integerPart.toNumber();
    var left;
    var right;

    if (sorted) {
      left = flat[integerPartNumber];
      right = flat[integerPartNumber + 1];
    } else {
      right = partitionSelect(flat, integerPartNumber + 1); // max of partition is kth largest

      left = flat[integerPartNumber];

      for (var _i3 = 0; _i3 < integerPartNumber; ++_i3) {
        if (compare(flat[_i3], left) > 0) {
          left = flat[_i3];
        }
      }
    }

    validate(left);
    validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

    var one = new fracPart.constructor(1);
    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
  }
  /**
   * Check if array value types are valid, throw error otherwise.
   * @param {number | BigNumber | Unit} x
   * @param {number | BigNumber | Unit} x
   * @private
   */


  var validate = typed({
    'number | BigNumber | Unit': function numberBigNumberUnit(x) {
      return x;
    }
  });
  return quantileSeq;
});
// CONCATENATED MODULE: ./src/function/statistics/std.js

var std_name = 'std';
var std_dependencies = ['typed', 'sqrt', 'variance'];
var createStd =
/* #__PURE__ */
Object(factory["a" /* factory */])(std_name, std_dependencies, function (_ref) {
  var typed = _ref.typed,
      sqrt = _ref.sqrt,
      variance = _ref.variance;

  /**
   * Compute the standard deviation of a matrix or a  list with values.
   * The standard deviations is defined as the square root of the variance:
   * `std(A) = sqrt(variance(A))`.
   * In case of a (multi dimensional) array or matrix, the standard deviation
   * over all elements will be calculated by default, unless an axis is specified
   * in which case the standard deviation will be computed along that axis.
   *
   * Additionally, it is possible to compute the standard deviation along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Syntax:
   *
   *     math.std(a, b, c, ...)
   *     math.std(A)
   *     math.std(A, normalization)
   *     math.std(A, dimension)
   *     math.std(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.std(2, 4, 6)                     // returns 2
   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
   *     math.std([2, 4, 6, 8], 'biased')      // returns 2
   *
   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]
   *
   * See also:
   *
   *    mean, median, max, min, prod, sum, variance
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the standard deviation for a matrix
   * @return {*} The standard deviation
   */
  return typed(std_name, {
    // std([a, b, c, d, ...])
    'Array | Matrix': _std,
    // std([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _std,
    // std([a, b, c, c, ...], dim)
    'Array | Matrix, number | BigNumber': _std,
    // std([a, b, c, c, ...], dim, normalization)
    'Array | Matrix, number | BigNumber, string': _std,
    // std(a, b, c, d, ...)
    '...': function _(args) {
      return _std(args);
    }
  });

  function _std(array, normalization) {
    if (array.length === 0) {
      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
    }

    try {
      return sqrt(variance.apply(null, arguments));
    } catch (err) {
      if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {
        throw new TypeError(err.message.replace(' variance', ' std'));
      } else {
        throw err;
      }
    }
  }
});
// CONCATENATED MODULE: ./src/utils/product.js
/** @param {number} i
 *  @param {number} n
 *  @returns {number} product of i to n
 */
function product_product(i, n) {
  if (n < i) {
    return 1;
  }

  if (n === i) {
    return n;
  }

  var half = n + i >> 1; // divide (n + i) by 2 and truncate to integer

  return product_product(i, half) * product_product(half + 1, n);
}
// CONCATENATED MODULE: ./src/plain/number/combinations.js


function combinationsNumber(n, k) {
  if (!Object(utils_number["i" /* isInteger */])(n) || n < 0) {
    throw new TypeError('Positive integer value expected in function combinations');
  }

  if (!Object(utils_number["i" /* isInteger */])(k) || k < 0) {
    throw new TypeError('Positive integer value expected in function combinations');
  }

  if (k > n) {
    throw new TypeError('k must be less than or equal to n');
  }

  var nMinusk = n - k;
  var prodrange;

  if (k < nMinusk) {
    prodrange = product_product(nMinusk + 1, n);
    return prodrange / product_product(1, k);
  }

  prodrange = product_product(k + 1, n);
  return prodrange / product_product(1, nMinusk);
}
combinationsNumber.signature = 'number, number';
// CONCATENATED MODULE: ./src/function/probability/combinations.js


var combinations_name = 'combinations';
var combinations_dependencies = ['typed'];
var createCombinations =
/* #__PURE__ */
Object(factory["a" /* factory */])(combinations_name, combinations_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities.
   *
   * Combinations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.combinations(n, k)
   *
   * Examples:
   *
   *    math.combinations(7, 5) // returns 21
   *
   * See also:
   *
   *    combinationsWithRep, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations.
   */
  return typed(combinations_name, {
    'number, number': combinationsNumber,
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var BigNumber = n.constructor;
      var result, i;
      var nMinusk = n.minus(k);
      var one = new BigNumber(1);

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (k.gt(n)) {
        throw new TypeError('k must be less than n in function combinations');
      }

      result = one;

      if (k.lt(nMinusk)) {
        for (i = one; i.lte(nMinusk); i = i.plus(one)) {
          result = result.times(k.plus(i)).dividedBy(i);
        }
      } else {
        for (i = one; i.lte(k); i = i.plus(one)) {
          result = result.times(nMinusk.plus(i)).dividedBy(i);
        }
      }

      return result;
    } // TODO: implement support for collection in combinations

  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}
// CONCATENATED MODULE: ./src/function/probability/combinationsWithRep.js



var combinationsWithRep_name = 'combinationsWithRep';
var combinationsWithRep_dependencies = ['typed'];
var createCombinationsWithRep =
/* #__PURE__ */
Object(factory["a" /* factory */])(combinationsWithRep_name, combinationsWithRep_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities, allowing individual outcomes to be repeated more than once.
   *
   * CombinationsWithRep only takes integer arguments.
   * The following condition must be enforced: k <= n + k -1.
   *
   * Syntax:
   *
   *     math.combinationsWithRep(n, k)
   *
   * Examples:
   *
   *    math.combinationsWithRep(7, 5) // returns 462
   *
   * See also:
   *
   *    combinations, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations with replacement.
   */
  return typed(combinationsWithRep_name, {
    'number, number': function numberNumber(n, k) {
      if (!Object(utils_number["i" /* isInteger */])(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }

      if (!Object(utils_number["i" /* isInteger */])(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }

      if (n < 1) {
        throw new TypeError('k must be less than or equal to n + k - 1');
      }

      if (k < n - 1) {
        var _prodrange = product_product(n, n + k - 1);

        return _prodrange / product_product(1, k);
      }

      var prodrange = product_product(k + 1, n + k - 1);
      return prodrange / product_product(1, n - 1);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var BigNumber = n.constructor;
      var result, i;
      var one = new BigNumber(1);
      var nMinusOne = n.minus(one);

      if (!combinationsWithRep_isPositiveInteger(n) || !combinationsWithRep_isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }

      if (n.lt(one)) {
        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');
      }

      result = one;

      if (k.lt(nMinusOne)) {
        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {
          result = result.times(k.plus(i)).dividedBy(i);
        }
      } else {
        for (i = one; i.lte(k); i = i.plus(one)) {
          result = result.times(nMinusOne.plus(i)).dividedBy(i);
        }
      }

      return result;
    }
  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

function combinationsWithRep_isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}
// CONCATENATED MODULE: ./src/plain/number/probability.js


function gammaNumber(n) {
  var x;

  if (Object(utils_number["i" /* isInteger */])(n)) {
    if (n <= 0) {
      return isFinite(n) ? Infinity : NaN;
    }

    if (n > 171) {
      return Infinity; // Will overflow
    }

    return product_product(1, n - 1);
  }

  if (n < 0.5) {
    return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));
  }

  if (n >= 171.35) {
    return Infinity; // will overflow
  }

  if (n > 85.0) {
    // Extended Stirling Approx
    var twoN = n * n;
    var threeN = twoN * n;
    var fourN = threeN * n;
    var fiveN = fourN * n;
    return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
  }

  --n;
  x = gammaP[0];

  for (var i = 1; i < gammaP.length; ++i) {
    x += gammaP[i] / (n + i);
  }

  var t = n + gammaG + 0.5;
  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
}
gammaNumber.signature = 'number'; // TODO: comment on the variables g and p

var gammaG = 4.7421875;
var gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];
// CONCATENATED MODULE: ./src/function/probability/gamma.js



var gamma_name = 'gamma';
var gamma_dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];
var createGamma =
/* #__PURE__ */
Object(factory["a" /* factory */])(gamma_name, gamma_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      multiplyScalar = _ref.multiplyScalar,
      pow = _ref.pow,
      _BigNumber = _ref.BigNumber,
      _Complex = _ref.Complex;

  /**
   * Compute the gamma function of a value using Lanczos approximation for
   * small values, and an extended Stirling approximation for large values.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gamma(n)
   *
   * Examples:
   *
   *    math.gamma(5)       // returns 24
   *    math.gamma(-0.5)    // returns -3.5449077018110335
   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
   *
   * See also:
   *
   *    combinations, factorial, permutations
   *
   * @param {number | Array | Matrix} n   A real or complex number
   * @return {number | Array | Matrix}    The gamma of `n`
   */
  var gamma = typed(gamma_name, {
    number: gammaNumber,
    Complex: function Complex(n) {
      if (n.im === 0) {
        return gamma(n.re);
      }

      n = new _Complex(n.re - 1, n.im);
      var x = new _Complex(gammaP[0], 0);

      for (var i = 1; i < gammaP.length; ++i) {
        var real = n.re + i; // x += p[i]/(n+i)

        var den = real * real + n.im * n.im;

        if (den !== 0) {
          x.re += gammaP[i] * real / den;
          x.im += -(gammaP[i] * n.im) / den;
        } else {
          x.re = gammaP[i] < 0 ? -Infinity : Infinity;
        }
      }

      var t = new _Complex(n.re + gammaG + 0.5, n.im);
      var twoPiSqrt = Math.sqrt(2 * Math.PI);
      n.re += 0.5;
      var result = pow(t, n);

      if (result.im === 0) {
        // sqrt(2*PI)*result
        result.re *= twoPiSqrt;
      } else if (result.re === 0) {
        result.im *= twoPiSqrt;
      } else {
        result.re *= twoPiSqrt;
        result.im *= twoPiSqrt;
      }

      var r = Math.exp(-t.re); // exp(-t)

      t.re = r * Math.cos(-t.im);
      t.im = r * Math.sin(-t.im);
      return multiplyScalar(multiplyScalar(result, t), x);
    },
    BigNumber: function BigNumber(n) {
      if (n.isInteger()) {
        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));
      }

      if (!n.isFinite()) {
        return new _BigNumber(n.isNegative() ? NaN : Infinity);
      }

      throw new Error('Integer BigNumber expected');
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return deepMap(n, gamma);
    }
  });
  /**
   * Calculate factorial for a BigNumber
   * @param {BigNumber} n
   * @returns {BigNumber} Returns the factorial of n
   */

  function bigFactorial(n) {
    if (n.isZero()) {
      return new _BigNumber(1); // 0! is per definition 1
    }

    var precision = config.precision + (Math.log(n.toNumber()) | 0);

    var Big = _BigNumber.clone({
      precision: precision
    });

    var res = new Big(n);
    var value = n.toNumber() - 1; // number

    while (value > 1) {
      res = res.times(value);
      value--;
    }

    return new _BigNumber(res.toPrecision(_BigNumber.precision));
  }

  return gamma;
});
// CONCATENATED MODULE: ./src/function/probability/factorial.js


var factorial_name = 'factorial';
var factorial_dependencies = ['typed', 'gamma'];
var createFactorial =
/* #__PURE__ */
Object(factory["a" /* factory */])(factorial_name, factorial_dependencies, function (_ref) {
  var typed = _ref.typed,
      gamma = _ref.gamma;

  /**
   * Compute the factorial of a value
   *
   * Factorial only supports an integer value as argument.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.factorial(n)
   *
   * Examples:
   *
   *    math.factorial(5)    // returns 120
   *    math.factorial(3)    // returns 6
   *
   * See also:
   *
   *    combinations, combinationsWithRep, gamma, permutations
   *
   * @param {number | BigNumber | Array | Matrix} n   An integer number
   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
   */
  var factorial = typed(factorial_name, {
    number: function number(n) {
      if (n < 0) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n + 1);
    },
    BigNumber: function BigNumber(n) {
      if (n.isNegative()) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n.plus(1));
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return deepMap(n, factorial);
    }
  });
  return factorial;
});
// CONCATENATED MODULE: ./src/function/probability/kldivergence.js

var kldivergence_name = 'kldivergence';
var kldivergence_dependencies = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'dotDivide', 'log', 'isNumeric'];
var createKldivergence =
/* #__PURE__ */
Object(factory["a" /* factory */])(kldivergence_name, kldivergence_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      divide = _ref.divide,
      sum = _ref.sum,
      multiply = _ref.multiply,
      dotDivide = _ref.dotDivide,
      log = _ref.log,
      isNumeric = _ref.isNumeric;

  /**
     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
     *
     * Syntax:
     *
     *     math.kldivergence(x, y)
     *
     * Examples:
     *
     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
     *
     *
     * @param  {Array | Matrix} q    First vector
     * @param  {Array | Matrix} p    Second vector
     * @return {number}              Returns distance between q and p
     */
  return typed(kldivergence_name, {
    'Array, Array': function ArrayArray(q, p) {
      return _kldiv(matrix(q), matrix(p));
    },
    'Matrix, Array': function MatrixArray(q, p) {
      return _kldiv(q, matrix(p));
    },
    'Array, Matrix': function ArrayMatrix(q, p) {
      return _kldiv(matrix(q), p);
    },
    'Matrix, Matrix': function MatrixMatrix(q, p) {
      return _kldiv(q, p);
    }
  });

  function _kldiv(q, p) {
    var plength = p.size().length;
    var qlength = q.size().length;

    if (plength > 1) {
      throw new Error('first object must be one dimensional');
    }

    if (qlength > 1) {
      throw new Error('second object must be one dimensional');
    }

    if (plength !== qlength) {
      throw new Error('Length of two vectors must be equal');
    } // Before calculation, apply normalization


    var sumq = sum(q);

    if (sumq === 0) {
      throw new Error('Sum of elements in first object must be non zero');
    }

    var sump = sum(p);

    if (sump === 0) {
      throw new Error('Sum of elements in second object must be non zero');
    }

    var qnorm = divide(q, sum(q));
    var pnorm = divide(p, sum(p));
    var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));

    if (isNumeric(result)) {
      return result;
    } else {
      return Number.NaN;
    }
  }
});
// CONCATENATED MODULE: ./src/function/probability/multinomial.js


var multinomial_name = 'multinomial';
var multinomial_dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];
var createMultinomial =
/* #__PURE__ */
Object(factory["a" /* factory */])(multinomial_name, multinomial_dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      divide = _ref.divide,
      multiply = _ref.multiply,
      factorial = _ref.factorial,
      isInteger = _ref.isInteger,
      isPositive = _ref.isPositive;

  /**
   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
   *
   * multinomial takes one array of integers as an argument.
   * The following condition must be enforced: every ai <= 0
   *
   * Syntax:
   *
   *     math.multinomial(a) // a is an array type
   *
   * Examples:
   *
   *    math.multinomial([1,2,1]) // returns 12
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
   * @return {Number | BigNumber}         Multinomial coefficient.
   */
  return typed(multinomial_name, {
    'Array | Matrix': function ArrayMatrix(a) {
      var sum = 0;
      var denom = 1;
      deepForEach(a, function (ai) {
        if (!isInteger(ai) || !isPositive(ai)) {
          throw new TypeError('Positive integer value expected in function multinomial');
        }

        sum = add(sum, ai);
        denom = multiply(denom, factorial(ai));
      });
      return divide(factorial(sum), denom);
    }
  });
});
// CONCATENATED MODULE: ./src/function/probability/permutations.js



var permutations_name = 'permutations';
var permutations_dependencies = ['typed', 'factorial'];
var createPermutations =
/* #__PURE__ */
Object(factory["a" /* factory */])(permutations_name, permutations_dependencies, function (_ref) {
  var typed = _ref.typed,
      factorial = _ref.factorial;

  /**
   * Compute the number of ways of obtaining an ordered subset of `k` elements
   * from a set of `n` elements.
   *
   * Permutations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.permutations(n)
   *     math.permutations(n, k)
   *
   * Examples:
   *
   *    math.permutations(5)     // 120
   *    math.permutations(5, 3)  // 60
   *
   * See also:
   *
   *    combinations, combinationsWithRep, factorial
   *
   * @param {number | BigNumber} n   The number of objects in total
   * @param {number | BigNumber} [k] The number of objects in the subset
   * @return {number | BigNumber}    The number of permutations
   */
  return typed(permutations_name, {
    'number | BigNumber': factorial,
    'number, number': function numberNumber(n, k) {
      if (!Object(utils_number["i" /* isInteger */])(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (!Object(utils_number["i" /* isInteger */])(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (k > n) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      } // Permute n objects, k at a time


      return product_product(n - k + 1, n);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var result, i;

      if (!permutations_isPositiveInteger(n) || !permutations_isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (k.gt(n)) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      }

      var one = n.mul(0).add(1);
      result = one;

      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
        result = result.times(i);
      }

      return result;
    } // TODO: implement support for collection in permutations

  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

function permutations_isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}
// EXTERNAL MODULE: ./node_modules/seed-random/index.js
var seed_random = __webpack_require__(15);
var seed_random_default = /*#__PURE__*/__webpack_require__.n(seed_random);

// CONCATENATED MODULE: ./src/function/probability/util/seededRNG.js
// create a random seed here to prevent an infinite loop from seed-random
// inside the factory. Reason is that math.random is defined as a getter/setter
// and seed-random generates a seed from the local entropy by reading every
// defined object including `math` itself. That means that whilst getting
// math.random, it tries to get math.random, etc... an infinite loop.
// See https://github.com/ForbesLindesay/seed-random/issues/6

var singletonRandom =
/* #__PURE__ */
seed_random_default()();
function createRng(randomSeed) {
  var random; // create a new random generator with given seed

  function setSeed(seed) {
    random = seed === null ? singletonRandom : seed_random_default()(String(seed));
  } // initialize a seeded pseudo random number generator with config's random seed


  setSeed(randomSeed); // wrapper function so the rng can be updated via generator

  function rng() {
    return random();
  }

  return rng;
}
// CONCATENATED MODULE: ./src/function/probability/pickRandom.js




var pickRandom_name = 'pickRandom';
var pickRandom_dependencies = ['typed', 'config', '?on'];
var createPickRandom =
/* #__PURE__ */
Object(factory["a" /* factory */])(pickRandom_name, pickRandom_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      on = _ref.on;
  // seeded pseudo random number generator
  var rng = createRng(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = createRng(curr.randomSeed);
      }
    });
  }
  /**
   * Random pick one or more values from a one dimensional array.
   * Array elements are picked using a random function with uniform or weighted distribution.
   *
   * Syntax:
   *
   *     math.pickRandom(array)
   *     math.pickRandom(array, number)
   *     math.pickRandom(array, weights)
   *     math.pickRandom(array, number, weights)
   *     math.pickRandom(array, weights, number)
   *
   * Examples:
   *
   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
   *
   * See also:
   *
   *     random, randomInt
   *
   * @param {Array | Matrix} array     A one dimensional array
   * @param {Int} number               An int or float
   * @param {Array | Matrix} weights   An array of ints or floats
   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.
   *                                   Returns an array with the configured number of elements when number is > 1.
   */


  return typed({
    'Array | Matrix': function ArrayMatrix(possibles) {
      return _pickRandom(possibles);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {
      return _pickRandom(possibles, number, undefined);
    },
    'Array | Matrix, Array': function ArrayMatrixArray(possibles, weights) {
      return _pickRandom(possibles, undefined, weights);
    },
    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {
      return _pickRandom(possibles, number, weights);
    },
    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {
      return _pickRandom(possibles, number, weights);
    }
  });

  function _pickRandom(possibles, number, weights) {
    var single = typeof number === 'undefined';

    if (single) {
      number = 1;
    }

    possibles = possibles.valueOf(); // get Array

    if (weights) {
      weights = weights.valueOf(); // get Array
    }

    if (Object(utils_array["a" /* arraySize */])(possibles).length > 1) {
      throw new Error('Only one dimensional vectors supported');
    }

    var totalWeights = 0;

    if (typeof weights !== 'undefined') {
      if (weights.length !== possibles.length) {
        throw new Error('Weights must have the same length as possibles');
      }

      for (var i = 0, len = weights.length; i < len; i++) {
        if (!Object(is["y" /* isNumber */])(weights[i]) || weights[i] < 0) {
          throw new Error('Weights must be an array of positive numbers');
        }

        totalWeights += weights[i];
      }
    }

    var length = possibles.length;

    if (length === 0) {
      return [];
    } else if (number >= length) {
      return number > 1 ? possibles : possibles[0];
    }

    var result = [];
    var pick;

    while (result.length < number) {
      if (typeof weights === 'undefined') {
        pick = possibles[Math.floor(rng() * length)];
      } else {
        var randKey = rng() * totalWeights;

        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {
          randKey -= weights[_i];

          if (randKey < 0) {
            pick = possibles[_i];
            break;
          }
        }
      }

      if (result.indexOf(pick) === -1) {
        result.push(pick);
      }
    }

    return single ? result[0] : result; // TODO: return matrix when input was a matrix
    // TODO: add support for multi dimensional matrices
  }
});
// CONCATENATED MODULE: ./src/function/probability/util/randomMatrix.js
/**
 * This is a util function for generating a random matrix recursively.
 * @param {number[]} size
 * @param {function} random
 * @returns {Array}
 */
function randomMatrix(size, random) {
  var data = [];
  size = size.slice(0);

  if (size.length > 1) {
    for (var i = 0, length = size.shift(); i < length; i++) {
      data.push(randomMatrix(size, random));
    }
  } else {
    for (var _i = 0, _length = size.shift(); _i < _length; _i++) {
      data.push(random());
    }
  }

  return data;
}
// CONCATENATED MODULE: ./src/function/probability/random.js




var random_name = 'random';
var random_dependencies = ['typed', 'config', '?on'];
var createRandom =
/* #__PURE__ */
Object(factory["a" /* factory */])(random_name, random_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      on = _ref.on;
  // seeded pseudo random number generator
  var rng = createRng(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = createRng(curr.randomSeed);
      }
    });
  }
  /**
   * Return a random number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.random()                // generate a random number between 0 and 1
   *     math.random(max)             // generate a random number between 0 and max
   *     math.random(min, max)        // generate a random number between min and max
   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
   *
   * Examples:
   *
   *     math.random()       // returns a random number between 0 and 1
   *     math.random(100)    // returns a random number between 0 and 100
   *     math.random(30, 40) // returns a random number between 30 and 40
   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
   *
   * See also:
   *
   *     randomInt, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random number
   */


  return typed(random_name, {
    '': function _() {
      return _random(0, 1);
    },
    number: function number(max) {
      return _random(0, max);
    },
    'number, number': function numberNumber(min, max) {
      return _random(min, max);
    },
    'Array | Matrix': function ArrayMatrix(size) {
      return _randomMatrix(size, 0, 1);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {
      return _randomMatrix(size, 0, max);
    },
    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {
      return _randomMatrix(size, min, max);
    }
  });

  function _randomMatrix(size, min, max) {
    var res = randomMatrix(size.valueOf(), function () {
      return _random(min, max);
    });
    return Object(is["v" /* isMatrix */])(size) ? size.create(res) : res;
  }

  function _random(min, max) {
    return min + rng() * (max - min);
  }
}); // number only implementation of random, no matrix support
// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?

var createRandomNumber =
/* #__PURE__ */
Object(factory["a" /* factory */])(random_name, ['typed', 'config', '?on'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config,
      on = _ref2.on,
      matrix = _ref2.matrix;
  // seeded pseudo random number generator1
  var rng = createRng(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = createRng(curr.randomSeed);
      }
    });
  }

  return typed(random_name, {
    '': function _() {
      return _random(0, 1);
    },
    number: function number(max) {
      return _random(0, max);
    },
    'number, number': function numberNumber(min, max) {
      return _random(min, max);
    }
  });

  function _random(min, max) {
    return min + rng() * (max - min);
  }
});
// CONCATENATED MODULE: ./src/function/probability/randomInt.js




var randomInt_name = 'randomInt';
var randomInt_dependencies = ['typed', 'config', '?on'];
var createRandomInt =
/* #__PURE__ */
Object(factory["a" /* factory */])(randomInt_name, randomInt_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      on = _ref.on;
  // seeded pseudo random number generator
  var rng = createRng(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = createRng(curr.randomSeed);
      }
    });
  }
  /**
   * Return a random integer number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.randomInt()                // generate a random integer between 0 and 1
   *     math.randomInt(max)             // generate a random integer between 0 and max
   *     math.randomInt(min, max)        // generate a random integer between min and max
   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
   *
   * Examples:
   *
   *     math.randomInt(100)    // returns a random integer between 0 and 100
   *     math.randomInt(30, 40) // returns a random integer between 30 and 40
   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
   *
   * See also:
   *
   *     random, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random integer value
   */


  return typed(randomInt_name, {
    '': function _() {
      return _randomInt(0, 1);
    },
    number: function number(max) {
      return _randomInt(0, max);
    },
    'number, number': function numberNumber(min, max) {
      return _randomInt(min, max);
    },
    'Array | Matrix': function ArrayMatrix(size) {
      return _randomIntMatrix(size, 0, 1);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {
      return _randomIntMatrix(size, 0, max);
    },
    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {
      return _randomIntMatrix(size, min, max);
    }
  });

  function _randomIntMatrix(size, min, max) {
    var res = randomMatrix(size.valueOf(), function () {
      return _randomInt(min, max);
    });
    return Object(is["v" /* isMatrix */])(size) ? size.create(res) : res;
  }

  function _randomInt(min, max) {
    return Math.floor(min + rng() * (max - min));
  }
});
// CONCATENATED MODULE: ./src/function/combinatorics/stirlingS2.js

var stirlingS2_name = 'stirlingS2';
var stirlingS2_dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];
var createStirlingS2 =
/* #__PURE__ */
Object(factory["a" /* factory */])(stirlingS2_name, stirlingS2_dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      subtract = _ref.subtract,
      multiplyScalar = _ref.multiplyScalar,
      divideScalar = _ref.divideScalar,
      pow = _ref.pow,
      factorial = _ref.factorial,
      combinations = _ref.combinations,
      isNegative = _ref.isNegative,
      isInteger = _ref.isInteger,
      larger = _ref.larger;

  /**
   * The Stirling numbers of the second kind, counts the number of ways to partition
   * a set of n labelled objects into k nonempty unlabelled subsets.
   * stirlingS2 only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   *  If n = k or k = 1, then s(n,k) = 1
   *
   * Syntax:
   *
   *   math.stirlingS2(n, k)
   *
   * Examples:
   *
   *    math.stirlingS2(5, 3) //returns 25
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     S(n,k)
   */
  return typed(stirlingS2_name, {
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
        throw new TypeError('Non-negative integer value expected in function stirlingS2');
      } else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function stirlingS2');
      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]


      var kFactorial = factorial(k);
      var result = 0;

      for (var i = 0; i <= k; i++) {
        var negativeOne = pow(-1, subtract(k, i));
        var kChooseI = combinations(k, i);
        var iPower = pow(i, n);
        result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));
      }

      return divideScalar(result, kFactorial);
    }
  });
});
// CONCATENATED MODULE: ./src/function/combinatorics/bellNumbers.js

var bellNumbers_name = 'bellNumbers';
var bellNumbers_dependencies = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];
var createBellNumbers =
/* #__PURE__ */
Object(factory["a" /* factory */])(bellNumbers_name, bellNumbers_dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      isNegative = _ref.isNegative,
      isInteger = _ref.isInteger,
      stirlingS2 = _ref.stirlingS2;

  /**
   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
   * bellNumbers only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.bellNumbers(n)
   *
   * Examples:
   *
   *    math.bellNumbers(3) // returns 5
   *    math.bellNumbers(8) // returns 4140
   *
   * See also:
   *
   *    stirlingS2
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @return {Number | BigNumber}     B(n)
   */
  return typed(bellNumbers_name, {
    'number | BigNumber': function numberBigNumber(n) {
      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function bellNumbers');
      } // Sum (k=0, n) S(n,k).


      var result = 0;

      for (var i = 0; i <= n; i++) {
        result = addScalar(result, stirlingS2(n, i));
      }

      return result;
    }
  });
});
// CONCATENATED MODULE: ./src/function/combinatorics/catalan.js

var catalan_name = 'catalan';
var catalan_dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];
var createCatalan =
/* #__PURE__ */
Object(factory["a" /* factory */])(catalan_name, catalan_dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      combinations = _ref.combinations,
      isNegative = _ref.isNegative,
      isInteger = _ref.isInteger;

  /**
   * The Catalan Numbers enumerate combinatorial structures of many different types.
   * catalan only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.catalan(n)
   *
   * Examples:
   *
   *    math.catalan(3) // returns 5
   *    math.catalan(8) // returns 1430
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    nth Catalan number
   * @return {Number | BigNumber}     Cn(n)
   */
  return typed(catalan_name, {
    'number | BigNumber': function numberBigNumber(n) {
      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function catalan');
      }

      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));
    }
  });
});
// CONCATENATED MODULE: ./src/function/combinatorics/composition.js

var composition_name = 'composition';
var composition_dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];
var createComposition =
/* #__PURE__ */
Object(factory["a" /* factory */])(composition_name, composition_dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      combinations = _ref.combinations,
      isPositive = _ref.isPositive,
      isNegative = _ref.isNegative,
      isInteger = _ref.isInteger,
      larger = _ref.larger;

  /**
   * The composition counts of n into k parts.
   *
   * composition only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *   math.composition(n, k)
   *
   * Examples:
   *
   *    math.composition(5, 3) // returns 6
   *
   * See also:
   *
   *    combinations
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
   */
  return typed(composition_name, {
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
        throw new TypeError('Positive integer value expected in function composition');
      } else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function composition');
      }

      return combinations(addScalar(n, -1), addScalar(k, -1));
    }
  });
});
// CONCATENATED MODULE: ./src/function/algebra/simplify/util.js



var util_name = 'simplifyUtil';
var util_dependencies = ['FunctionNode', 'OperatorNode', 'SymbolNode'];
var createUtil =
/* #__PURE__ */
Object(factory["a" /* factory */])(util_name, util_dependencies, function (_ref) {
  var FunctionNode = _ref.FunctionNode,
      OperatorNode = _ref.OperatorNode,
      SymbolNode = _ref.SymbolNode;
  // TODO commutative/associative properties rely on the arguments
  // e.g. multiply is not commutative for matrices
  // The properties should be calculated from an argument to simplify, or possibly something in math.config
  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments
  var commutative = {
    add: true,
    multiply: true
  };
  var associative = {
    add: true,
    multiply: true
  };

  function isCommutative(node, context) {
    if (!Object(is["B" /* isOperatorNode */])(node)) {
      return true;
    }

    var name = node.fn.toString();

    if (context && Object(utils_object["f" /* hasOwnProperty */])(context, name) && Object(utils_object["f" /* hasOwnProperty */])(context[name], 'commutative')) {
      return context[name].commutative;
    }

    return commutative[name] || false;
  }

  function isAssociative(node, context) {
    if (!Object(is["B" /* isOperatorNode */])(node)) {
      return false;
    }

    var name = node.fn.toString();

    if (context && Object(utils_object["f" /* hasOwnProperty */])(context, name) && Object(utils_object["f" /* hasOwnProperty */])(context[name], 'associative')) {
      return context[name].associative;
    }

    return associative[name] || false;
  }
  /**
   * Flatten all associative operators in an expression tree.
   * Assumes parentheses have already been removed.
   */


  function flatten(node) {
    if (!node.args || node.args.length === 0) {
      return node;
    }

    node.args = allChildren(node);

    for (var i = 0; i < node.args.length; i++) {
      flatten(node.args[i]);
    }
  }
  /**
   * Get the children of a node as if it has been flattened.
   * TODO implement for FunctionNodes
   */


  function allChildren(node) {
    var op;
    var children = [];

    var findChildren = function findChildren(node) {
      for (var i = 0; i < node.args.length; i++) {
        var child = node.args[i];

        if (Object(is["B" /* isOperatorNode */])(child) && op === child.op) {
          findChildren(child);
        } else {
          children.push(child);
        }
      }
    };

    if (isAssociative(node)) {
      op = node.op;
      findChildren(node);
      return children;
    } else {
      return node.args;
    }
  }
  /**
   *  Unflatten all flattened operators to a right-heavy binary tree.
   */


  function unflattenr(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }

    var makeNode = createMakeNodeFunction(node);
    var l = node.args.length;

    for (var i = 0; i < l; i++) {
      unflattenr(node.args[i]);
    }

    if (l > 2 && isAssociative(node)) {
      var curnode = node.args.pop();

      while (node.args.length > 0) {
        curnode = makeNode([node.args.pop(), curnode]);
      }

      node.args = curnode.args;
    }
  }
  /**
   *  Unflatten all flattened operators to a left-heavy binary tree.
   */


  function unflattenl(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }

    var makeNode = createMakeNodeFunction(node);
    var l = node.args.length;

    for (var i = 0; i < l; i++) {
      unflattenl(node.args[i]);
    }

    if (l > 2 && isAssociative(node)) {
      var curnode = node.args.shift();

      while (node.args.length > 0) {
        curnode = makeNode([curnode, node.args.shift()]);
      }

      node.args = curnode.args;
    }
  }

  function createMakeNodeFunction(node) {
    if (Object(is["B" /* isOperatorNode */])(node)) {
      return function (args) {
        try {
          return new OperatorNode(node.op, node.fn, args, node.implicit);
        } catch (err) {
          console.error(err);
          return [];
        }
      };
    } else {
      return function (args) {
        return new FunctionNode(new SymbolNode(node.name), args);
      };
    }
  }

  return {
    createMakeNodeFunction: createMakeNodeFunction,
    isCommutative: isCommutative,
    isAssociative: isAssociative,
    flatten: flatten,
    allChildren: allChildren,
    unflattenr: unflattenr,
    unflattenl: unflattenl
  };
});
// CONCATENATED MODULE: ./src/function/algebra/simplify/simplifyCore.js


var simplifyCore_name = 'simplifyCore';
var simplifyCore_dependencies = ['equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'ParenthesisNode'];
var createSimplifyCore =
/* #__PURE__ */
Object(factory["a" /* factory */])(simplifyCore_name, simplifyCore_dependencies, function (_ref) {
  var equal = _ref.equal,
      isZero = _ref.isZero,
      add = _ref.add,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      divide = _ref.divide,
      pow = _ref.pow,
      ConstantNode = _ref.ConstantNode,
      OperatorNode = _ref.OperatorNode,
      FunctionNode = _ref.FunctionNode,
      ParenthesisNode = _ref.ParenthesisNode;
  var node0 = new ConstantNode(0);
  var node1 = new ConstantNode(1);
  /**
   * simplifyCore() performs single pass simplification suitable for
   * applications requiring ultimate performance. In contrast, simplify()
   * extends simplifyCore() with additional passes to provide deeper
   * simplification.
   *
   * Syntax:
   *
   *     simplify.simplifyCore(expr)
   *
   * Examples:
   *
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify.simpifyCore(f)                          // Node {2 * x}
   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}
   *
   * See also:
   *
   *     derivative
   *
   * @param {Node} node
   *     The expression to be simplified
   */

  function simplifyCore(node) {
    if (Object(is["B" /* isOperatorNode */])(node) && node.isUnary()) {
      var a0 = simplifyCore(node.args[0]);

      if (node.op === '+') {
        // unary plus
        return a0;
      }

      if (node.op === '-') {
        // unary minus
        if (Object(is["B" /* isOperatorNode */])(a0)) {
          if (a0.isUnary() && a0.op === '-') {
            return a0.args[0];
          } else if (a0.isBinary() && a0.fn === 'subtract') {
            return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);
          }
        }

        return new OperatorNode(node.op, node.fn, [a0]);
      }
    } else if (Object(is["B" /* isOperatorNode */])(node) && node.isBinary()) {
      var _a = simplifyCore(node.args[0]);

      var a1 = simplifyCore(node.args[1]);

      if (node.op === '+') {
        if (Object(is["l" /* isConstantNode */])(_a)) {
          if (isZero(_a.value)) {
            return a1;
          } else if (Object(is["l" /* isConstantNode */])(a1)) {
            return new ConstantNode(add(_a.value, a1.value));
          }
        }

        if (Object(is["l" /* isConstantNode */])(a1) && isZero(a1.value)) {
          return _a;
        }

        if (Object(is["B" /* isOperatorNode */])(a1) && a1.isUnary() && a1.op === '-') {
          return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);
        }

        return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);
      } else if (node.op === '-') {
        if (Object(is["l" /* isConstantNode */])(_a) && a1) {
          if (Object(is["l" /* isConstantNode */])(a1)) {
            return new ConstantNode(subtract(_a.value, a1.value));
          } else if (isZero(_a.value)) {
            return new OperatorNode('-', 'unaryMinus', [a1]);
          }
        } // if (node.fn === "subtract" && node.args.length === 2) {


        if (node.fn === 'subtract') {
          if (Object(is["l" /* isConstantNode */])(a1) && isZero(a1.value)) {
            return _a;
          }

          if (Object(is["B" /* isOperatorNode */])(a1) && a1.isUnary() && a1.op === '-') {
            return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]));
          }

          return new OperatorNode(node.op, node.fn, [_a, a1]);
        }
      } else if (node.op === '*') {
        if (Object(is["l" /* isConstantNode */])(_a)) {
          if (isZero(_a.value)) {
            return node0;
          } else if (equal(_a.value, 1)) {
            return a1;
          } else if (Object(is["l" /* isConstantNode */])(a1)) {
            return new ConstantNode(multiply(_a.value, a1.value));
          }
        }

        if (Object(is["l" /* isConstantNode */])(a1)) {
          if (isZero(a1.value)) {
            return node0;
          } else if (equal(a1.value, 1)) {
            return _a;
          } else if (Object(is["B" /* isOperatorNode */])(_a) && _a.isBinary() && _a.op === node.op) {
            var a00 = _a.args[0];

            if (Object(is["l" /* isConstantNode */])(a00)) {
              var a00a1 = new ConstantNode(multiply(a00.value, a1.value));
              return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left
            }
          }

          return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left
        }

        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);
      } else if (node.op === '/') {
        if (Object(is["l" /* isConstantNode */])(_a)) {
          if (isZero(_a.value)) {
            return node0;
          } else if (Object(is["l" /* isConstantNode */])(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) {
            return new ConstantNode(divide(_a.value, a1.value));
          }
        }

        return new OperatorNode(node.op, node.fn, [_a, a1]);
      } else if (node.op === '^') {
        if (Object(is["l" /* isConstantNode */])(a1)) {
          if (isZero(a1.value)) {
            return node1;
          } else if (equal(a1.value, 1)) {
            return _a;
          } else {
            if (Object(is["l" /* isConstantNode */])(_a)) {
              // fold constant
              return new ConstantNode(pow(_a.value, a1.value));
            } else if (Object(is["B" /* isOperatorNode */])(_a) && _a.isBinary() && _a.op === '^') {
              var a01 = _a.args[1];

              if (Object(is["l" /* isConstantNode */])(a01)) {
                return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply(a01.value, a1.value))]);
              }
            }
          }
        }

        return new OperatorNode(node.op, node.fn, [_a, a1]);
      }
    } else if (Object(is["C" /* isParenthesisNode */])(node)) {
      var c = simplifyCore(node.content);

      if (Object(is["C" /* isParenthesisNode */])(c) || Object(is["J" /* isSymbolNode */])(c) || Object(is["l" /* isConstantNode */])(c)) {
        return c;
      }

      return new ParenthesisNode(c);
    } else if (Object(is["r" /* isFunctionNode */])(node)) {
      var args = node.args.map(simplifyCore).map(function (arg) {
        return Object(is["C" /* isParenthesisNode */])(arg) ? arg.content : arg;
      });
      return new FunctionNode(simplifyCore(node.fn), args);
    } else {// cannot simplify
    }

    return node;
  }

  return simplifyCore;
});
// CONCATENATED MODULE: ./src/function/algebra/simplify/simplifyConstant.js
// TODO this could be improved by simplifying seperated constants under associative and commutative operators




var simplifyConstant_name = 'simplifyConstant';
var simplifyConstant_dependencies = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];
var createSimplifyConstant =
/* #__PURE__ */
Object(factory["a" /* factory */])(simplifyConstant_name, simplifyConstant_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      mathWithTransform = _ref.mathWithTransform,
      fraction = _ref.fraction,
      bignumber = _ref.bignumber,
      ConstantNode = _ref.ConstantNode,
      OperatorNode = _ref.OperatorNode,
      FunctionNode = _ref.FunctionNode,
      SymbolNode = _ref.SymbolNode;

  var _createUtil = createUtil({
    FunctionNode: FunctionNode,
    OperatorNode: OperatorNode,
    SymbolNode: SymbolNode
  }),
      isCommutative = _createUtil.isCommutative,
      isAssociative = _createUtil.isAssociative,
      allChildren = _createUtil.allChildren,
      createMakeNodeFunction = _createUtil.createMakeNodeFunction;

  function simplifyConstant(expr, options) {
    var res = foldFraction(expr, options);
    return Object(is["w" /* isNode */])(res) ? res : _toNode(res);
  }

  function _eval(fnname, args, options) {
    try {
      return _toNumber(mathWithTransform[fnname].apply(null, args), options);
    } catch (ignore) {
      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
      args = args.map(function (x) {
        if (Object(is["o" /* isFraction */])(x)) {
          return x.valueOf();
        }

        return x;
      });
      return _toNumber(mathWithTransform[fnname].apply(null, args), options);
    }
  }

  var _toNode = typed({
    Fraction: _fractionToNode,
    number: function number(n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }

      return new ConstantNode(n);
    },
    BigNumber: function BigNumber(n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }

      return new ConstantNode(n); // old parameters: (n.toString(), 'number')
    },
    Complex: function Complex(s) {
      throw new Error('Cannot convert Complex number to Node');
    }
  }); // convert a number to a fraction only if it can be expressed exactly


  function _exactFraction(n, options) {
    var exactFractions = options && options.exactFractions !== false;

    if (exactFractions && isFinite(n) && fraction) {
      var f = fraction(n);

      if (f.valueOf() === n) {
        return f;
      }
    }

    return n;
  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
  // BigNumbers are left alone


  var _toNumber = typed({
    'string, Object': function stringObject(s, options) {
      if (config.number === 'BigNumber') {
        if (bignumber === undefined) {
          noBignumber();
        }

        return bignumber(s);
      } else if (config.number === 'Fraction') {
        if (fraction === undefined) {
          noFraction();
        }

        return fraction(s);
      } else {
        var n = parseFloat(s);
        return _exactFraction(n, options);
      }
    },
    'Fraction, Object': function FractionObject(s, options) {
      return s;
    },
    // we don't need options here
    'BigNumber, Object': function BigNumberObject(s, options) {
      return s;
    },
    // we don't need options here
    'number, Object': function numberObject(s, options) {
      return _exactFraction(s, options);
    },
    'Complex, Object': function ComplexObject(s, options) {
      if (s.im !== 0) {
        return s;
      }

      return _exactFraction(s.re, options);
    }
  });

  function unaryMinusNode(n) {
    return new OperatorNode('-', 'unaryMinus', [n]);
  }

  function _fractionToNode(f) {
    var n;
    var vn = f.s * f.n;

    if (vn < 0) {
      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);
    } else {
      n = new ConstantNode(vn);
    }

    if (f.d === 1) {
      return n;
    }

    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
  }
  /*
   * Create a binary tree from a list of Fractions and Nodes.
   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
   * @param args - list of Fractions and Nodes
   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
   * if args.length is 1, returns args[0]
   * @return - Either a Node representing a binary expression or Fraction
   */


  function foldOp(fn, args, makeNode, options) {
    return args.reduce(function (a, b) {
      if (!Object(is["w" /* isNode */])(a) && !Object(is["w" /* isNode */])(b)) {
        try {
          return _eval(fn, [a, b], options);
        } catch (ignoreandcontinue) {}

        a = _toNode(a);
        b = _toNode(b);
      } else if (!Object(is["w" /* isNode */])(a)) {
        a = _toNode(a);
      } else if (!Object(is["w" /* isNode */])(b)) {
        b = _toNode(b);
      }

      return makeNode([a, b]);
    });
  } // destroys the original node and returns a folded one


  function foldFraction(node, options) {
    switch (node.type) {
      case 'SymbolNode':
        return node;

      case 'ConstantNode':
        if (typeof node.value === 'number' || !isNaN(node.value)) {
          return _toNumber(node.value, options);
        }

        return node;

      case 'FunctionNode':
        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {
          return node;
        }

        {
          // Process operators as OperatorNode
          var operatorFunctions = ['add', 'multiply'];

          if (operatorFunctions.indexOf(node.name) === -1) {
            var args = node.args.map(function (arg) {
              return foldFraction(arg, options);
            }); // If all args are numbers

            if (!args.some(is["w" /* isNode */])) {
              try {
                return _eval(node.name, args, options);
              } catch (ignoreandcontine) {}
            } // Convert all args to nodes and construct a symbolic function call


            args = args.map(function (arg) {
              return Object(is["w" /* isNode */])(arg) ? arg : _toNode(arg);
            });
            return new FunctionNode(node.name, args);
          } else {// treat as operator
          }
        }

      /* falls through */

      case 'OperatorNode':
        {
          var fn = node.fn.toString();

          var _args;

          var res;
          var makeNode = createMakeNodeFunction(node);

          if (Object(is["B" /* isOperatorNode */])(node) && node.isUnary()) {
            _args = [foldFraction(node.args[0], options)];

            if (!Object(is["w" /* isNode */])(_args[0])) {
              res = _eval(fn, _args, options);
            } else {
              res = makeNode(_args);
            }
          } else if (isAssociative(node)) {
            _args = allChildren(node);
            _args = _args.map(function (arg) {
              return foldFraction(arg, options);
            });

            if (isCommutative(fn)) {
              // commutative binary operator
              var consts = [];
              var vars = [];

              for (var i = 0; i < _args.length; i++) {
                if (!Object(is["w" /* isNode */])(_args[i])) {
                  consts.push(_args[i]);
                } else {
                  vars.push(_args[i]);
                }
              }

              if (consts.length > 1) {
                res = foldOp(fn, consts, makeNode, options);
                vars.unshift(res);
                res = foldOp(fn, vars, makeNode, options);
              } else {
                // we won't change the children order since it's not neccessary
                res = foldOp(fn, _args, makeNode, options);
              }
            } else {
              // non-commutative binary operator
              res = foldOp(fn, _args, makeNode, options);
            }
          } else {
            // non-associative binary operator
            _args = node.args.map(function (arg) {
              return foldFraction(arg, options);
            });
            res = foldOp(fn, _args, makeNode, options);
          }

          return res;
        }

      case 'ParenthesisNode':
        // remove the uneccessary parenthesis
        return foldFraction(node.content, options);

      case 'AccessorNode':
      /* falls through */

      case 'ArrayNode':
      /* falls through */

      case 'AssignmentNode':
      /* falls through */

      case 'BlockNode':
      /* falls through */

      case 'FunctionAssignmentNode':
      /* falls through */

      case 'IndexNode':
      /* falls through */

      case 'ObjectNode':
      /* falls through */

      case 'RangeNode':
      /* falls through */

      case 'ConditionalNode':
      /* falls through */

      default:
        throw new Error("Unimplemented node type in simplifyConstant: ".concat(node.type));
    }
  }

  return simplifyConstant;
});
// CONCATENATED MODULE: ./src/function/algebra/simplify/resolve.js


var resolve_name = 'resolve';
var resolve_dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];
var createResolve =
/* #__PURE__ */
Object(factory["a" /* factory */])(resolve_name, resolve_dependencies, function (_ref) {
  var parse = _ref.parse,
      FunctionNode = _ref.FunctionNode,
      OperatorNode = _ref.OperatorNode,
      ParenthesisNode = _ref.ParenthesisNode;

  /**
   * resolve(expr, scope) replaces variable nodes with their scoped values
   *
   * Syntax:
   *
   *     simplify.resolve(expr, scope)
   *
   * Examples:
   *
   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}
   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // "6"
   *
   * @param {Node} node
   *     The expression tree to be simplified
   * @param {Object} scope with variables to be resolved
   */
  function resolve(node, scope) {
    if (!scope) {
      return node;
    }

    if (Object(is["J" /* isSymbolNode */])(node)) {
      var value = scope[node.name];

      if (Object(is["w" /* isNode */])(value)) {
        return resolve(value, scope);
      } else if (typeof value === 'number') {
        return parse(String(value));
      }
    } else if (Object(is["B" /* isOperatorNode */])(node)) {
      var args = node.args.map(function (arg) {
        return resolve(arg, scope);
      });
      return new OperatorNode(node.op, node.fn, args, node.implicit);
    } else if (Object(is["C" /* isParenthesisNode */])(node)) {
      return new ParenthesisNode(resolve(node.content, scope));
    } else if (Object(is["r" /* isFunctionNode */])(node)) {
      var _args = node.args.map(function (arg) {
        return resolve(arg, scope);
      });

      return new FunctionNode(node.name, _args);
    }

    return node;
  }

  return resolve;
});
// CONCATENATED MODULE: ./src/function/algebra/simplify.js
function simplify_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { simplify_typeof = function _typeof(obj) { return typeof obj; }; } else { simplify_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return simplify_typeof(obj); }








var simplify_name = 'simplify';
var simplify_dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
var createSimplify =
/* #__PURE__ */
Object(factory["a" /* factory */])(simplify_name, simplify_dependencies, function (_ref) {
  var config = _ref.config,
      typed = _ref.typed,
      parse = _ref.parse,
      add = _ref.add,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      divide = _ref.divide,
      pow = _ref.pow,
      isZero = _ref.isZero,
      equal = _ref.equal,
      fraction = _ref.fraction,
      bignumber = _ref.bignumber,
      mathWithTransform = _ref.mathWithTransform,
      ConstantNode = _ref.ConstantNode,
      FunctionNode = _ref.FunctionNode,
      OperatorNode = _ref.OperatorNode,
      ParenthesisNode = _ref.ParenthesisNode,
      SymbolNode = _ref.SymbolNode;
  var simplifyConstant = createSimplifyConstant({
    typed: typed,
    config: config,
    mathWithTransform: mathWithTransform,
    fraction: fraction,
    bignumber: bignumber,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    SymbolNode: SymbolNode
  });
  var simplifyCore = createSimplifyCore({
    equal: equal,
    isZero: isZero,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    pow: pow,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    ParenthesisNode: ParenthesisNode
  });
  var resolve = createResolve({
    parse: parse,
    FunctionNode: FunctionNode,
    OperatorNode: OperatorNode,
    ParenthesisNode: ParenthesisNode
  });

  var _createUtil = createUtil({
    FunctionNode: FunctionNode,
    OperatorNode: OperatorNode,
    SymbolNode: SymbolNode
  }),
      isCommutative = _createUtil.isCommutative,
      isAssociative = _createUtil.isAssociative,
      flatten = _createUtil.flatten,
      unflattenr = _createUtil.unflattenr,
      unflattenl = _createUtil.unflattenl,
      createMakeNodeFunction = _createUtil.createMakeNodeFunction;
  /**
   * Simplify an expression tree.
   *
   * A list of rules are applied to an expression, repeating over the list until
   * no further changes are made.
   * It's possible to pass a custom set of rules to the function as second
   * argument. A rule can be specified as an object, string, or function:
   *
   *     const rules = [
   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
   *       function (node) {
   *         // ... return a new node or return the node unchanged
   *         return node
   *       }
   *     ]
   *
   * String and object rules consist of a left and right pattern. The left is
   * used to match against the expression and the right determines what matches
   * are replaced with. The main difference between a pattern and a normal
   * expression is that variables starting with the following characters are
   * interpreted as wildcards:
   *
   * - 'n' - matches any Node
   * - 'c' - matches any ConstantNode
   * - 'v' - matches any Node that is not a ConstantNode
   *
   * The default list of rules is exposed on the function as `simplify.rules`
   * and can be used as a basis to built a set of custom rules.
   *
   * For more details on the theory, see:
   *
   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
   *
   *  An optional `options` argument can be passed as last argument of `simplify`.
   *  There is currently one option available: `exactFractions`, a boolean which
   *  is `true` by default.
   *
   * Syntax:
   *
   *     simplify(expr)
   *     simplify(expr, rules)
   *     simplify(expr, rules)
   *     simplify(expr, rules, scope)
   *     simplify(expr, rules, scope, options)
   *     simplify(expr, scope)
   *     simplify(expr, scope, options)
   *
   * Examples:
   *
   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node "2 * x"
   *     math.simplify('2 * 3 * x', {x: 4})        // Node "24"
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify(f)                          // Node "2 * x"
   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node "x * 2 / 5"
   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node "0.4 * x"
   *
   * See also:
   *
   *     derivative, parse, evaluate, rationalize
   *
   * @param {Node | string} expr
   *            The expression to be simplified
   * @param {Array<{l:string, r: string} | string | function>} [rules]
   *            Optional list with custom rules
   * @return {Node} Returns the simplified form of `expr`
   */


  var simplify = typed('simplify', {
    string: function string(expr) {
      return simplify(parse(expr), simplify.rules, {}, {});
    },
    'string, Object': function stringObject(expr, scope) {
      return simplify(parse(expr), simplify.rules, scope, {});
    },
    'string, Object, Object': function stringObjectObject(expr, scope, options) {
      return simplify(parse(expr), simplify.rules, scope, options);
    },
    'string, Array': function stringArray(expr, rules) {
      return simplify(parse(expr), rules, {}, {});
    },
    'string, Array, Object': function stringArrayObject(expr, rules, scope) {
      return simplify(parse(expr), rules, scope, {});
    },
    'string, Array, Object, Object': function stringArrayObjectObject(expr, rules, scope, options) {
      return simplify(parse(expr), rules, scope, options);
    },
    'Node, Object': function NodeObject(expr, scope) {
      return simplify(expr, simplify.rules, scope, {});
    },
    'Node, Object, Object': function NodeObjectObject(expr, scope, options) {
      return simplify(expr, simplify.rules, scope, options);
    },
    Node: function Node(expr) {
      return simplify(expr, simplify.rules, {}, {});
    },
    'Node, Array': function NodeArray(expr, rules) {
      return simplify(expr, rules, {}, {});
    },
    'Node, Array, Object': function NodeArrayObject(expr, rules, scope) {
      return simplify(expr, rules, scope, {});
    },
    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {
      rules = _buildRules(rules);
      var res = resolve(expr, scope);
      res = removeParens(res);
      var visited = {};
      var str = res.toString({
        parenthesis: 'all'
      });

      while (!visited[str]) {
        visited[str] = true;
        _lastsym = 0; // counter for placeholder symbols

        for (var i = 0; i < rules.length; i++) {
          if (typeof rules[i] === 'function') {
            res = rules[i](res, options);
          } else {
            flatten(res);
            res = applyRule(res, rules[i]);
          }

          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
        }

        str = res.toString({
          parenthesis: 'all'
        });
      }

      return res;
    }
  });
  simplify.simplifyCore = simplifyCore;
  simplify.resolve = resolve;

  function removeParens(node) {
    return node.transform(function (node, path, parent) {
      return Object(is["C" /* isParenthesisNode */])(node) ? removeParens(node.content) : node;
    });
  } // All constants that are allowed in rules


  var SUPPORTED_CONSTANTS = {
    "true": true,
    "false": true,
    e: true,
    i: true,
    Infinity: true,
    LN2: true,
    LN10: true,
    LOG2E: true,
    LOG10E: true,
    NaN: true,
    phi: true,
    pi: true,
    SQRT1_2: true,
    SQRT2: true,
    tau: true // null: false,
    // undefined: false,
    // version: false,

  }; // Array of strings, used to build the ruleSet.
  // Each l (left side) and r (right side) are parsed by
  // the expression parser into a node tree.
  // Left hand sides are matched to subtrees within the
  // expression to be parsed and replaced with the right
  // hand side.
  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
  // It is possible to get into an infinite loop with conflicting rules

  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore
  // { l: 'n^0', r: '1' },     // simplifyCore
  // { l: '0*n', r: '0' },     // simplifyCore
  // { l: 'n/n', r: '1'},      // simplifyCore
  // { l: 'n^1', r: 'n' },     // simplifyCore
  // { l: '+n1', r:'n1' },     // simplifyCore
  // { l: 'n--n1', r:'n+n1' }, // simplifyCore
  {
    l: 'log(e)',
    r: '1'
  }, // temporary rules
  {
    l: 'n-n1',
    r: 'n+-n1'
  }, // temporarily replace 'subtract' so we can further flatten the 'add' operator
  {
    l: '-(c*v)',
    r: '(-c) * v'
  }, // make non-constant terms positive
  {
    l: '-v',
    r: '(-1) * v'
  }, {
    l: 'n/n1^n2',
    r: 'n*n1^-n2'
  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator
  {
    l: 'n/n1',
    r: 'n*n1^-1'
  }, // expand nested exponentiation
  {
    l: '(n ^ n1) ^ n2',
    r: 'n ^ (n1 * n2)'
  }, // collect like factors
  {
    l: 'n*n',
    r: 'n^2'
  }, {
    l: 'n * n^n1',
    r: 'n^(n1+1)'
  }, {
    l: 'n^n1 * n^n2',
    r: 'n^(n1+n2)'
  }, // collect like terms
  {
    l: 'n+n',
    r: '2*n'
  }, {
    l: 'n+-n',
    r: '0'
  }, {
    l: 'n1*n2 + n2',
    r: '(n1+1)*n2'
  }, {
    l: 'n1*n3 + n2*n3',
    r: '(n1+n2)*n3'
  }, // remove parenthesis in the case of negating a quantitiy
  {
    l: 'n1 + -1 * (n2 + n3)',
    r: 'n1 + -1 * n2 + -1 * n3'
  }, simplifyConstant, {
    l: '(-n)*n1',
    r: '-(n*n1)'
  }, // make factors positive (and undo 'make non-constant terms positive')
  // ordering of constants
  {
    l: 'c+v',
    r: 'v+c',
    context: {
      add: {
        commutative: false
      }
    }
  }, {
    l: 'v*c',
    r: 'c*v',
    context: {
      multiply: {
        commutative: false
      }
    }
  }, // undo temporary rules
  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
  {
    l: 'n+-n1',
    r: 'n-n1'
  }, // undo replace 'subtract'
  {
    l: 'n*(n1^-1)',
    r: 'n/n1'
  }, // undo replace 'divide'
  {
    l: 'n*n1^-n2',
    r: 'n/n1^n2'
  }, {
    l: 'n1^-1',
    r: '1/n1'
  }, {
    l: 'n*(n1/n2)',
    r: '(n*n1)/n2'
  }, // '*' before '/'
  {
    l: 'n-(n1+n2)',
    r: 'n-n1-n2'
  }, // '-' before '+'
  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
  {
    l: '1*n',
    r: 'n'
  }];
  /**
   * Parse the string array of rules into nodes
   *
   * Example syntax for rules:
   *
   * Position constants to the left in a product:
   * { l: 'n1 * c1', r: 'c1 * n1' }
   * n1 is any Node, and c1 is a ConstantNode.
   *
   * Apply difference of squares formula:
   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
   * n1, n2 mean any Node.
   *
   * Short hand notation:
   * 'n1 * c1 -> c1 * n1'
   */

  function _buildRules(rules) {
    // Array of rules to be used to simplify expressions
    var ruleSet = [];

    for (var i = 0; i < rules.length; i++) {
      var rule = rules[i];
      var newRule = void 0;

      var ruleType = simplify_typeof(rule);

      switch (ruleType) {
        case 'string':
          {
            var lr = rule.split('->');

            if (lr.length === 2) {
              rule = {
                l: lr[0],
                r: lr[1]
              };
            } else {
              throw SyntaxError('Could not parse rule: ' + rule);
            }
          }

        /* falls through */

        case 'object':
          newRule = {
            l: removeParens(parse(rule.l)),
            r: removeParens(parse(rule.r))
          };

          if (rule.context) {
            newRule.evaluate = rule.context;
          }

          if (rule.evaluate) {
            newRule.evaluate = parse(rule.evaluate);
          }

          if (isAssociative(newRule.l)) {
            var makeNode = createMakeNodeFunction(newRule.l);

            var expandsym = _getExpandPlaceholderSymbol();

            newRule.expanded = {};
            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.
            // This helps to match the newRule against nodes returned from getSplits() later on.

            flatten(newRule.expanded.l);
            unflattenr(newRule.expanded.l);
            newRule.expanded.r = makeNode([newRule.r, expandsym]);
          }

          break;

        case 'function':
          newRule = rule;
          break;

        default:
          throw TypeError('Unsupported type of rule: ' + ruleType);
      } // console.log('Adding rule: ' + rules[i])
      // console.log(newRule)


      ruleSet.push(newRule);
    }

    return ruleSet;
  }

  var _lastsym = 0;

  function _getExpandPlaceholderSymbol() {
    return new SymbolNode('_p' + _lastsym++);
  }
  /**
   * Returns a simplfied form of node, or the original node if no simplification was possible.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
   */


  var applyRule = typed('applyRule', {
    'Node, Object': function NodeObject(node, rule) {
      // console.log('Entering applyRule(' + node.toString() + ')')
      // Do not clone node unless we find a match
      var res = node; // First replace our child nodes with their simplified versions
      // If a child could not be simplified, the assignments will have
      // no effect since the node is returned unchanged

      if (res instanceof OperatorNode || res instanceof FunctionNode) {
        if (res.args) {
          for (var i = 0; i < res.args.length; i++) {
            res.args[i] = applyRule(res.args[i], rule);
          }
        }
      } else if (res instanceof ParenthesisNode) {
        if (res.content) {
          res.content = applyRule(res.content, rule);
        }
      } // Try to match a rule against this node


      var repl = rule.r;

      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.
      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.


      if (!matches && rule.expanded) {
        repl = rule.expanded.r;
        matches = _ruleMatch(rule.expanded.l, res)[0];
      }

      if (matches) {
        // const before = res.toString({parenthesis: 'all'})
        // Create a new node by cloning the rhs of the matched rule
        // we keep any implicit multiplication state if relevant
        var implicit = res.implicit;
        res = repl.clone();

        if (implicit && 'implicit' in repl) {
          res.implicit = true;
        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes


        res = res.transform(function (node) {
          if (node.isSymbolNode && Object(utils_object["f" /* hasOwnProperty */])(matches.placeholders, node.name)) {
            return matches.placeholders[node.name].clone();
          } else {
            return node;
          }
        }); // const after = res.toString({parenthesis: 'all'})
        // console.log('Simplified ' + before + ' to ' + after)
      }

      return res;
    }
  });
  /**
   * Get (binary) combinations of a flattened binary node
   * e.g. +(node1, node2, node3) -> [
   *        +(node1,  +(node2, node3)),
   *        +(node2,  +(node1, node3)),
   *        +(node3,  +(node1, node2))]
   *
   */

  function getSplits(node, context) {
    var res = [];
    var right, rightArgs;
    var makeNode = createMakeNodeFunction(node);

    if (isCommutative(node, context)) {
      for (var i = 0; i < node.args.length; i++) {
        rightArgs = node.args.slice(0);
        rightArgs.splice(i, 1);
        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
        res.push(makeNode([node.args[i], right]));
      }
    } else {
      rightArgs = node.args.slice(1);
      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
      res.push(makeNode([node.args[0], right]));
    }

    return res;
  }
  /**
   * Returns the set union of two match-placeholders or null if there is a conflict.
   */


  function mergeMatch(match1, match2) {
    var res = {
      placeholders: {}
    }; // Some matches may not have placeholders; this is OK

    if (!match1.placeholders && !match2.placeholders) {
      return res;
    } else if (!match1.placeholders) {
      return match2;
    } else if (!match2.placeholders) {
      return match1;
    } // Placeholders with the same key must match exactly


    for (var key in match1.placeholders) {
      res.placeholders[key] = match1.placeholders[key];

      if (Object(utils_object["f" /* hasOwnProperty */])(match2.placeholders, key)) {
        if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
          return null;
        }
      }
    }

    for (var _key in match2.placeholders) {
      res.placeholders[_key] = match2.placeholders[_key];
    }

    return res;
  }
  /**
   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   */


  function combineChildMatches(list1, list2) {
    var res = [];

    if (list1.length === 0 || list2.length === 0) {
      return res;
    }

    var merged;

    for (var i1 = 0; i1 < list1.length; i1++) {
      for (var i2 = 0; i2 < list2.length; i2++) {
        merged = mergeMatch(list1[i1], list2[i2]);

        if (merged) {
          res.push(merged);
        }
      }
    }

    return res;
  }
  /**
   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   * Returns a list of unique matches.
   */


  function mergeChildMatches(childMatches) {
    if (childMatches.length === 0) {
      return childMatches;
    }

    var sets = childMatches.reduce(combineChildMatches);
    var uniqueSets = [];
    var unique = {};

    for (var i = 0; i < sets.length; i++) {
      var s = JSON.stringify(sets[i]);

      if (!unique[s]) {
        unique[s] = true;
        uniqueSets.push(sets[i]);
      }
    }

    return uniqueSets;
  }
  /**
   * Determines whether node matches rule.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {Object} Information about the match, if it exists.
   */


  function _ruleMatch(rule, node, isSplit) {
    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')
    //    console.log('rule = ' + rule)
    //    console.log('node = ' + node)
    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')
    var res = [{
      placeholders: {}
    }];

    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {
      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
      if (rule instanceof OperatorNode) {
        if (rule.op !== node.op || rule.fn !== node.fn) {
          return [];
        }
      } else if (rule instanceof FunctionNode) {
        if (rule.name !== node.name) {
          return [];
        }
      } // rule and node match. Search the children of rule and node.


      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {
        // Expect non-associative operators to match exactly
        var childMatches = [];

        for (var i = 0; i < rule.args.length; i++) {
          var childMatch = _ruleMatch(rule.args[i], node.args[i]);

          if (childMatch.length === 0) {
            // Child did not match, so stop searching immediately
            return [];
          } // The child matched, so add the information returned from the child to our result


          childMatches.push(childMatch);
        }

        res = mergeChildMatches(childMatches);
      } else if (node.args.length >= 2 && rule.args.length === 2) {
        // node is flattened, rule is not
        // Associative operators/functions can be split in different ways so we check if the rule matches each
        // them and return their union.
        var splits = getSplits(node, rule.context);
        var splitMatches = [];

        for (var _i = 0; _i < splits.length; _i++) {
          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here


          splitMatches = splitMatches.concat(matchSet);
        }

        return splitMatches;
      } else if (rule.args.length > 2) {
        throw Error('Unexpected non-binary associative function: ' + rule.toString());
      } else {
        // Incorrect number of arguments in rule and node, so no match
        return [];
      }
    } else if (rule instanceof SymbolNode) {
      // If the rule is a SymbolNode, then it carries a special meaning
      // according to the first character of the symbol node name.
      // c.* matches a ConstantNode
      // n.* matches any node
      if (rule.name.length === 0) {
        throw new Error('Symbol in rule has 0 length...!?');
      }

      if (SUPPORTED_CONSTANTS[rule.name]) {
        // built-in constant must match exactly
        if (rule.name !== node.name) {
          return [];
        }
      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {
        // rule matches _anything_, so assign this node to the rule.name placeholder
        // Assign node to the rule.name placeholder.
        // Our parent will check for matches among placeholders.
        res[0].placeholders[rule.name] = node;
      } else if (rule.name[0] === 'v') {
        // rule matches any variable thing (not a ConstantNode)
        if (!Object(is["l" /* isConstantNode */])(node)) {
          res[0].placeholders[rule.name] = node;
        } else {
          // Mis-match: rule was expecting something other than a ConstantNode
          return [];
        }
      } else if (rule.name[0] === 'c') {
        // rule matches any ConstantNode
        if (node instanceof ConstantNode) {
          res[0].placeholders[rule.name] = node;
        } else {
          // Mis-match: rule was expecting a ConstantNode
          return [];
        }
      } else {
        throw new Error('Invalid symbol in rule: ' + rule.name);
      }
    } else if (rule instanceof ConstantNode) {
      // Literal constant must match exactly
      if (!equal(rule.value, node.value)) {
        return [];
      }
    } else {
      // Some other node was encountered which we aren't prepared for, so no match
      return [];
    } // It's a match!
    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')


    return res;
  }
  /**
   * Determines whether p and q (and all their children nodes) are identical.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
   * @return {Object} Information about the match, if it exists.
   */


  function _exactMatch(p, q) {
    if (p instanceof ConstantNode && q instanceof ConstantNode) {
      if (!equal(p.value, q.value)) {
        return false;
      }
    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {
      if (p.name !== q.name) {
        return false;
      }
    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {
      if (p instanceof OperatorNode) {
        if (p.op !== q.op || p.fn !== q.fn) {
          return false;
        }
      } else if (p instanceof FunctionNode) {
        if (p.name !== q.name) {
          return false;
        }
      }

      if (p.args.length !== q.args.length) {
        return false;
      }

      for (var i = 0; i < p.args.length; i++) {
        if (!_exactMatch(p.args[i], q.args[i])) {
          return false;
        }
      }
    } else {
      return false;
    }

    return true;
  }

  return simplify;
});
// CONCATENATED MODULE: ./src/function/algebra/derivative.js


var derivative_name = 'derivative';
var derivative_dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
var createDerivative =
/* #__PURE__ */
Object(factory["a" /* factory */])(derivative_name, derivative_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      parse = _ref.parse,
      simplify = _ref.simplify,
      equal = _ref.equal,
      isZero = _ref.isZero,
      numeric = _ref.numeric,
      ConstantNode = _ref.ConstantNode,
      FunctionNode = _ref.FunctionNode,
      OperatorNode = _ref.OperatorNode,
      ParenthesisNode = _ref.ParenthesisNode,
      SymbolNode = _ref.SymbolNode;

  /**
   * Takes the derivative of an expression expressed in parser Nodes.
   * The derivative will be taken over the supplied variable in the
   * second parameter. If there are multiple variables in the expression,
   * it will return a partial derivative.
   *
   * This uses rules of differentiation which can be found here:
   *
   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)
   *
   * Syntax:
   *
   *     derivative(expr, variable)
   *     derivative(expr, variable, options)
   *
   * Examples:
   *
   *     math.derivative('x^2', 'x')                     // Node {2 * x}
   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)
   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}
   *     math.derivative('2*x', 'x').evaluate()          // number 2
   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8
   *     const f = math.parse('x^2')
   *     const x = math.parse('x')
   *     math.derivative(f, x)                           // Node {2 * x}
   *
   * See also:
   *
   *     simplify, parse, evaluate
   *
   * @param  {Node | string} expr           The expression to differentiate
   * @param  {SymbolNode | string} variable The variable over which to differentiate
   * @param  {{simplify: boolean}} [options]
   *                         There is one option available, `simplify`, which
   *                         is true by default. When false, output will not
   *                         be simplified.
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */
  var derivative = typed('derivative', {
    'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {
      var constNodes = {};
      constTag(constNodes, expr, variable.name);

      var res = _derivative(expr, constNodes);

      return options.simplify ? simplify(res) : res;
    },
    'Node, SymbolNode': function NodeSymbolNode(expr, variable) {
      return derivative(expr, variable, {
        simplify: true
      });
    },
    'string, SymbolNode': function stringSymbolNode(expr, variable) {
      return derivative(parse(expr), variable);
    },
    'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {
      return derivative(parse(expr), variable, options);
    },
    'string, string': function stringString(expr, variable) {
      return derivative(parse(expr), parse(variable));
    },
    'string, string, Object': function stringStringObject(expr, variable, options) {
      return derivative(parse(expr), parse(variable), options);
    },
    'Node, string': function NodeString(expr, variable) {
      return derivative(expr, parse(variable));
    },
    'Node, string, Object': function NodeStringObject(expr, variable, options) {
      return derivative(expr, parse(variable), options);
    } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments

    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
      let res = expr
      for (let i = 0; i < order; i++) {
        let constNodes = {}
        constTag(constNodes, expr, variable.name)
        res = _derivative(res, constNodes)
      }
      return res
    }
    */

  });
  derivative._simplify = true;

  derivative.toTex = function (deriv) {
    return _derivTex.apply(null, deriv.args);
  }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.
  // NOTE: the optional "order" parameter here is currently unused


  var _derivTex = typed('_derivTex', {
    'Node, SymbolNode': function NodeSymbolNode(expr, x) {
      if (Object(is["l" /* isConstantNode */])(expr) && Object(is["M" /* typeOf */])(expr.value) === 'string') {
        return _derivTex(parse(expr.value).toString(), x.toString(), 1);
      } else {
        return _derivTex(expr.toString(), x.toString(), 1);
      }
    },
    'Node, ConstantNode': function NodeConstantNode(expr, x) {
      if (Object(is["M" /* typeOf */])(x.value) === 'string') {
        return _derivTex(expr, parse(x.value));
      } else {
        throw new Error("The second parameter to 'derivative' is a non-string constant");
      }
    },
    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {
      return _derivTex(expr.toString(), x.name, order.value);
    },
    'string, string, number': function stringStringNumber(expr, x, order) {
      var d;

      if (order === 1) {
        d = '{d\\over d' + x + '}';
      } else {
        d = '{d^{' + order + '}\\over d' + x + '^{' + order + '}}';
      }

      return d + "\\left[".concat(expr, "\\right]");
    }
  });
  /**
   * Does a depth-first search on the expression tree to identify what Nodes
   * are constants (e.g. 2 + 2), and stores the ones that are constants in
   * constNodes. Classification is done as follows:
   *
   *   1. ConstantNodes are constants.
   *   2. If there exists a SymbolNode, of which we are differentiating over,
   *      in the subtree it is not constant.
   *
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {string} varName     Variable that we are differentiating
   * @return {boolean}  if node is constant
   */
  // TODO: can we rewrite constTag into a pure function?


  var constTag = typed('constTag', {
    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {
      constNodes[node] = true;
      return true;
    },
    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {
      // Treat other variables like constants. For reasoning, see:
      //   https://en.wikipedia.org/wiki/Partial_derivative
      if (node.name !== varName) {
        constNodes[node] = true;
        return true;
      }

      return false;
    },
    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {
      return constTag(constNodes, node.content, varName);
    },
    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {
      if (node.params.indexOf(varName) === -1) {
        constNodes[node] = true;
        return true;
      }

      return constTag(constNodes, node.expr, varName);
    },
    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {
      if (node.args.length > 0) {
        var isConst = constTag(constNodes, node.args[0], varName);

        for (var i = 1; i < node.args.length; ++i) {
          isConst = constTag(constNodes, node.args[i], varName) && isConst;
        }

        if (isConst) {
          constNodes[node] = true;
          return true;
        }
      }

      return false;
    }
  });
  /**
   * Applies differentiation rules.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */

  var _derivative = typed('_derivative', {
    'ConstantNode, Object': function ConstantNodeObject(node) {
      return createConstantNode(0);
    },
    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      return createConstantNode(1);
    },
    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {
      return new ParenthesisNode(_derivative(node.content, constNodes));
    },
    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      return _derivative(node.expr, constNodes);
    },
    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {
      if (node.args.length !== 1) {
        funcArgsCheck(node);
      }

      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      var arg0 = node.args[0];
      var arg1;
      var div = false; // is output a fraction?

      var negative = false; // is output negative?

      var funcDerivative;

      switch (node.name) {
        case 'cbrt':
          // d/dx(cbrt(x)) = 1 / (3x^(2/3))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);
          break;

        case 'sqrt':
        case 'nthRoot':
          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
          if (node.args.length === 1) {
            div = true;
            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);
          } else if (node.args.length === 2) {
            // Rearrange from nthRoot(x, a) -> x^(1/a)
            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?

            constNodes[arg1] = constNodes[node.args[1]];
            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);
          }

          break;

        case 'log10':
          arg1 = createConstantNode(10);

        /* fall through! */

        case 'log':
          if (!arg1 && node.args.length === 1) {
            // d/dx(log(x)) = 1 / x
            funcDerivative = arg0.clone();
            div = true;
          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {
            // d/dx(log(x, c)) = 1 / (x*ln(c))
            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);
            div = true;
          } else if (node.args.length === 2) {
            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);
          }

          break;

        case 'pow':
          constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser

          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);

        case 'exp':
          // d/dx(e^x) = e^x
          funcDerivative = new FunctionNode('exp', [arg0.clone()]);
          break;

        case 'sin':
          // d/dx(sin(x)) = cos(x)
          funcDerivative = new FunctionNode('cos', [arg0.clone()]);
          break;

        case 'cos':
          // d/dx(cos(x)) = -sin(x)
          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);
          break;

        case 'tan':
          // d/dx(tan(x)) = sec(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'sec':
          // d/dx(sec(x)) = sec(x)tan(x)
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);
          break;

        case 'csc':
          // d/dx(csc(x)) = -csc(x)cot(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);
          break;

        case 'cot':
          // d/dx(cot(x)) = -csc(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'asin':
          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
          break;

        case 'acos':
          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
          break;

        case 'atan':
          // d/dx(atan(x)) = 1 / (x^2 + 1)
          div = true;
          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
          break;

        case 'asec':
          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acsc':
          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acot':
          // d/dx(acot(x)) = -1 / (x^2 + 1)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
          break;

        case 'sinh':
          // d/dx(sinh(x)) = cosh(x)
          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);
          break;

        case 'cosh':
          // d/dx(cosh(x)) = sinh(x)
          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);
          break;

        case 'tanh':
          // d/dx(tanh(x)) = sech(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'sech':
          // d/dx(sech(x)) = -sech(x)tanh(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);
          break;

        case 'csch':
          // d/dx(csch(x)) = -csch(x)coth(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);
          break;

        case 'coth':
          // d/dx(coth(x)) = -csch(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'asinh':
          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
          break;

        case 'acosh':
          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
          break;

        case 'atanh':
          // d/dx(atanh(x)) = 1 / (1 - x^2)
          div = true;
          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
          break;

        case 'asech':
          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);
          break;

        case 'acsch':
          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acoth':
          // d/dx(acoth(x)) = -1 / (1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
          break;

        case 'abs':
          // d/dx(abs(x)) = abs(x)/x
          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);
          break;

        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)

        default:
          throw new Error('Function "' + node.name + '" is not supported by derivative, or a wrong number of arguments is passed');
      }

      var op, func;

      if (div) {
        op = '/';
        func = 'divide';
      } else {
        op = '*';
        func = 'multiply';
      }
      /* Apply chain rule to all functions:
         F(x)  = f(g(x))
         F'(x) = g'(x)*f'(g(x)) */


      var chainDerivative = _derivative(arg0, constNodes);

      if (negative) {
        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);
      }

      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
    },
    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      if (node.op === '+') {
        // d/dx(sum(f(x)) = sum(f'(x))
        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {
          return _derivative(arg, constNodes);
        }));
      }

      if (node.op === '-') {
        // d/dx(+/-f(x)) = +/-f'(x)
        if (node.isUnary()) {
          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);
        } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)


        if (node.isBinary()) {
          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);
        }
      }

      if (node.op === '*') {
        // d/dx(c*f(x)) = c*f'(x)
        var constantTerms = node.args.filter(function (arg) {
          return constNodes[arg] !== undefined;
        });

        if (constantTerms.length > 0) {
          var nonConstantTerms = node.args.filter(function (arg) {
            return constNodes[arg] === undefined;
          });
          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);
          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));
          return new OperatorNode('*', 'multiply', newArgs);
        } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)


        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {
          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {
            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();
          }));
        }));
      }

      if (node.op === '/' && node.isBinary()) {
        var arg0 = node.args[0];
        var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c

        if (constNodes[arg1] !== undefined) {
          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);
        } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)


        if (constNodes[arg0] !== undefined) {
          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);
        } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2


        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);
      }

      if (node.op === '^' && node.isBinary()) {
        var _arg = node.args[0];
        var _arg2 = node.args[1];

        if (constNodes[_arg] !== undefined) {
          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
          if (Object(is["l" /* isConstantNode */])(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {
            return createConstantNode(0);
          } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)


          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);
        }

        if (constNodes[_arg2] !== undefined) {
          if (Object(is["l" /* isConstantNode */])(_arg2)) {
            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
            if (isZero(_arg2.value)) {
              return createConstantNode(0);
            } // Ignore exponent; f(x)^1 = f(x)


            if (equal(_arg2.value, 1)) {
              return _derivative(_arg, constNodes);
            }
          } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)


          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);
          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);
        } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]


        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);
      }

      throw new Error('Operator "' + node.op + '" is not supported by derivative, or a wrong number of arguments is passed');
    }
  });
  /**
   * Ensures the number of arguments for a function are correct,
   * and will throw an error otherwise.
   *
   * @param {FunctionNode} node
   */


  function funcArgsCheck(node) {
    // TODO add min, max etc
    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {
      return;
    } // There should be an incorrect number of arguments if we reach here
    // Change all args to constants to avoid unidentified
    // symbol error when compiling function


    for (var i = 0; i < node.args.length; ++i) {
      node.args[i] = createConstantNode(0);
    }

    node.compile().evaluate();
    throw new Error('Expected TypeError, but none found');
  }
  /**
   * Helper function to create a constant node with a specific type
   * (number, BigNumber, Fraction)
   * @param {number} value
   * @param {string} [valueType]
   * @return {ConstantNode}
   */


  function createConstantNode(value, valueType) {
    return new ConstantNode(numeric(value, valueType || config.number));
  }

  return derivative;
});
// CONCATENATED MODULE: ./src/function/algebra/rationalize.js




var rationalize_name = 'rationalize';
var rationalize_dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode', 'ParenthesisNode'];
var createRationalize =
/* #__PURE__ */
Object(factory["a" /* factory */])(rationalize_name, rationalize_dependencies, function (_ref) {
  var config = _ref.config,
      typed = _ref.typed,
      equal = _ref.equal,
      isZero = _ref.isZero,
      add = _ref.add,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      divide = _ref.divide,
      pow = _ref.pow,
      parse = _ref.parse,
      simplify = _ref.simplify,
      fraction = _ref.fraction,
      bignumber = _ref.bignumber,
      mathWithTransform = _ref.mathWithTransform,
      ConstantNode = _ref.ConstantNode,
      OperatorNode = _ref.OperatorNode,
      FunctionNode = _ref.FunctionNode,
      SymbolNode = _ref.SymbolNode,
      ParenthesisNode = _ref.ParenthesisNode;
  var simplifyConstant = createSimplifyConstant({
    typed: typed,
    config: config,
    mathWithTransform: mathWithTransform,
    fraction: fraction,
    bignumber: bignumber,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    SymbolNode: SymbolNode
  });
  var simplifyCore = createSimplifyCore({
    equal: equal,
    isZero: isZero,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    pow: pow,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    ParenthesisNode: ParenthesisNode
  });
  /**
   * Transform a rationalizable expression in a rational fraction.
   * If rational fraction is one variable polynomial then converts
   * the numerator and denominator in canonical form, with decreasing
   * exponents, returning the coefficients of numerator.
   *
   * Syntax:
   *
   *     rationalize(expr)
   *     rationalize(expr, detailed)
   *     rationalize(expr, scope)
   *     rationalize(expr, scope, detailed)
   *
   * Examples:
   *
   *     math.rationalize('sin(x)+y')
   *                   //  Error: There is an unsolved function call
   *     math.rationalize('2x/y - y/(x+1)')
   *                   // (2*x^2-y^2+2*x)/(x*y+y)
   *     math.rationalize('(2x+1)^6')
   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')
   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
   *
   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
   *     math.rationalize('x+x+x+y',{})    // 3*x+y
   *
   *     const ret = math.rationalize('x+x+x+y',{},true)
   *                   // ret.expression=3*x+y, ret.variables = ["x","y"]
   *     const ret = math.rationalize('-2+5x^2',{},true)
   *                   // ret.expression=5*x^2-2, ret.variables = ["x"], ret.coefficients=[-2,0,5]
   *
   * See also:
   *
   *     simplify
   *
   * @param  {Node|string} expr    The expression to check if is a polynomial expression
   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)
   *
   * @return {Object | Node}    The rational polynomial of `expr` or na object
   *            {Object}
   *              {Expression Node} expression: node simplified expression
   *              {Expression Node} numerator: simplified numerator of expression
   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)
   *              {Array}           variables:  variable names
   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent
   *           {Expression Node}  node simplified expression
   *
   */

  var rationalize = typed(rationalize_name, {
    string: function string(expr) {
      return rationalize(parse(expr), {}, false);
    },
    'string, boolean': function stringBoolean(expr, detailed) {
      return rationalize(parse(expr), {}, detailed);
    },
    'string, Object': function stringObject(expr, scope) {
      return rationalize(parse(expr), scope, false);
    },
    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {
      return rationalize(parse(expr), scope, detailed);
    },
    Node: function Node(expr) {
      return rationalize(expr, {}, false);
    },
    'Node, boolean': function NodeBoolean(expr, detailed) {
      return rationalize(expr, {}, detailed);
    },
    'Node, Object': function NodeObject(expr, scope) {
      return rationalize(expr, scope, false);
    },
    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {
      var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form

      var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial

      var nVars = polyRet.variables.length;
      expr = polyRet.expression;

      if (nVars >= 1) {
        // If expression in not a constant
        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)

        var sBefore; // Previous expression

        var rules;
        var eDistrDiv = true;
        var redoInic = false;
        expr = simplify(expr, setRules.firstRules, {}, {
          exactFractions: false
        }); // Apply the initial rules, including succ div rules

        var s;

        while (true) {
          // Apply alternately  successive division rules and distr.div.rules
          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;
          expr = simplify(expr, rules); // until no more changes

          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules

          s = expr.toString();

          if (s === sBefore) {
            break; // No changes : end of the loop
          }

          redoInic = true;
          sBefore = s;
        }

        if (redoInic) {
          // Apply first rules again without succ div rules (if there are changes)
          expr = simplify(expr, setRules.firstRulesAgain, {}, {
            exactFractions: false
          });
        }

        expr = simplify(expr, setRules.finalRules, {}, {
          exactFractions: false
        }); // Apply final rules
      } // NVars >= 1


      var coefficients = [];
      var retRationalize = {};

      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {
        // Separate numerator from denominator
        if (nVars === 1) {
          expr.args[0] = polyToCanonical(expr.args[0], coefficients);
          expr.args[1] = polyToCanonical(expr.args[1]);
        }

        if (detailed) {
          retRationalize.numerator = expr.args[0];
          retRationalize.denominator = expr.args[1];
        }
      } else {
        if (nVars === 1) {
          expr = polyToCanonical(expr, coefficients);
        }

        if (detailed) {
          retRationalize.numerator = expr;
          retRationalize.denominator = null;
        }
      } // nVars


      if (!detailed) return expr;
      retRationalize.coefficients = coefficients;
      retRationalize.variables = polyRet.variables;
      retRationalize.expression = expr;
      return retRationalize;
    } // ^^^^^^^ end of rationalize ^^^^^^^^

  }); // end of typed rationalize

  /**
   *  Function to simplify an expression using an optional scope and
   *  return it if the expression is a polynomial expression, i.e.
   *  an expression with one or more variables and the operators
   *  +, -, *, and ^, where the exponent can only be a positive integer.
   *
   * Syntax:
   *
   *     polynomial(expr,scope,extended, rules)
   *
   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
   * @param  {object} scope           Optional scope for expression simplification
   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
   * @param  {array}  rules           Optional. Default is no rule.
   *
   *
   * @return {Object}
   *            {Object} node:   node simplified expression
   *            {Array}  variables:  variable names
   */

  function polynomial(expr, scope, extended, rules) {
    var variables = [];
    var node = simplify(expr, rules, scope, {
      exactFractions: false
    }); // Resolves any variables and functions with all defined parameters

    extended = !!extended;
    var oper = '+-*' + (extended ? '/' : '');
    recPoly(node);
    var retFunc = {};
    retFunc.expression = node;
    retFunc.variables = variables;
    return retFunc; // -------------------------------------------------------------------------------------------------------

    /**
     *  Function to simplify an expression using an optional scope and
     *  return it if the expression is a polynomial expression, i.e.
     *  an expression with one or more variables and the operators
     *  +, -, *, and ^, where the exponent can only be a positive integer.
     *
     * Syntax:
     *
     *     recPoly(node)
     *
     *
     * @param  {Node} node               The current sub tree expression in recursion
     *
     * @return                           nothing, throw an exception if error
     */

    function recPoly(node) {
      var tp = node.type; // node type

      if (tp === 'FunctionNode') {
        // No function call in polynomial expression
        throw new Error('There is an unsolved function call');
      } else if (tp === 'OperatorNode') {
        if (node.op === '^') {
          if (node.args[1].fn === 'unaryMinus') {
            node = node.args[0];
          }

          if (node.args[1].type !== 'ConstantNode' || !Object(utils_number["i" /* isInteger */])(parseFloat(node.args[1].value))) {
            throw new Error('There is a non-integer exponent');
          } else {
            recPoly(node.args[0]);
          }
        } else {
          if (oper.indexOf(node.op) === -1) {
            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');
          }

          for (var i = 0; i < node.args.length; i++) {
            recPoly(node.args[i]);
          }
        } // type of operator

      } else if (tp === 'SymbolNode') {
        var _name = node.name; // variable name

        var pos = variables.indexOf(_name);

        if (pos === -1) {
          // new variable in expression
          variables.push(_name);
        }
      } else if (tp === 'ParenthesisNode') {
        recPoly(node.content);
      } else if (tp !== 'ConstantNode') {
        throw new Error('type ' + tp + ' is not allowed in polynomial expression');
      }
    } // end of recPoly

  } // end of polynomial
  // ---------------------------------------------------------------------------------------

  /**
   * Return a rule set to rationalize an polynomial expression in rationalize
   *
   * Syntax:
   *
   *     rulesRationalize()
   *
   * @return {array}        rule set to rationalize an polynomial expression
   */


  function rulesRationalize() {
    var oldRules = [simplifyCore, // sCore
    {
      l: 'n+n',
      r: '2*n'
    }, {
      l: 'n+-n',
      r: '0'
    }, simplifyConstant, // sConstant
    {
      l: 'n*(n1^-1)',
      r: 'n/n1'
    }, {
      l: 'n*n1^-n2',
      r: 'n/n1^n2'
    }, {
      l: 'n1^-1',
      r: '1/n1'
    }, {
      l: 'n*(n1/n2)',
      r: '(n*n1)/n2'
    }, {
      l: '1*n',
      r: 'n'
    }];
    var rulesFirst = [{
      l: '(-n1)/(-n2)',
      r: 'n1/n2'
    }, // Unary division
    {
      l: '(-n1)*(-n2)',
      r: 'n1*n2'
    }, // Unary multiplication
    {
      l: 'n1--n2',
      r: 'n1+n2'
    }, // '--' elimination
    {
      l: 'n1-n2',
      r: 'n1+(-n2)'
    }, // Subtraction turn into add with un�ry minus
    {
      l: '(n1+n2)*n3',
      r: '(n1*n3 + n2*n3)'
    }, // Distributive 1
    {
      l: 'n1*(n2+n3)',
      r: '(n1*n2+n1*n3)'
    }, // Distributive 2
    {
      l: 'c1*n + c2*n',
      r: '(c1+c2)*n'
    }, // Joining constants
    {
      l: 'c1*n + n',
      r: '(c1+1)*n'
    }, // Joining constants
    {
      l: 'c1*n - c2*n',
      r: '(c1-c2)*n'
    }, // Joining constants
    {
      l: 'c1*n - n',
      r: '(c1-1)*n'
    }, // Joining constants
    {
      l: 'v/c',
      r: '(1/c)*v'
    }, // variable/constant (new!)
    {
      l: 'v/-c',
      r: '-(1/c)*v'
    }, // variable/constant (new!)
    {
      l: '-v*-c',
      r: 'c*v'
    }, // Inversion constant and variable 1
    {
      l: '-v*c',
      r: '-c*v'
    }, // Inversion constant and variable 2
    {
      l: 'v*-c',
      r: '-c*v'
    }, // Inversion constant and variable 3
    {
      l: 'v*c',
      r: 'c*v'
    }, // Inversion constant and variable 4
    {
      l: '-(-n1*n2)',
      r: '(n1*n2)'
    }, // Unary propagation
    {
      l: '-(n1*n2)',
      r: '(-n1*n2)'
    }, // Unary propagation
    {
      l: '-(-n1+n2)',
      r: '(n1-n2)'
    }, // Unary propagation
    {
      l: '-(n1+n2)',
      r: '(-n1-n2)'
    }, // Unary propagation
    {
      l: '(n1^n2)^n3',
      r: '(n1^(n2*n3))'
    }, // Power to Power
    {
      l: '-(-n1/n2)',
      r: '(n1/n2)'
    }, // Division and Unary
    {
      l: '-(n1/n2)',
      r: '(-n1/n2)'
    }]; // Divisao and Unary

    var rulesDistrDiv = [{
      l: '(n1/n2 + n3/n4)',
      r: '((n1*n4 + n3*n2)/(n2*n4))'
    }, // Sum of fractions
    {
      l: '(n1/n2 + n3)',
      r: '((n1 + n3*n2)/n2)'
    }, // Sum fraction with number 1
    {
      l: '(n1 + n2/n3)',
      r: '((n1*n3 + n2)/n3)'
    }]; // Sum fraction with number 1

    var rulesSucDiv = [{
      l: '(n1/(n2/n3))',
      r: '((n1*n3)/n2)'
    }, // Division simplification
    {
      l: '(n1/n2/n3)',
      r: '(n1/(n2*n3))'
    }];
    var setRules = {}; // rules set in 4 steps.
    // All rules => infinite loop
    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)

    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set

    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules

    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules

    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.
    // Division simplification
    // Second rule set.
    // There is no aggregate expression with parentesis, but the only variable can be scattered.

    setRules.finalRules = [simplifyCore, // simplify.rules[0]
    {
      l: 'n*-n',
      r: '-n^2'
    }, // Joining multiply with power 1
    {
      l: 'n*n',
      r: 'n^2'
    }, // Joining multiply with power 2
    simplifyConstant, // simplify.rules[14] old 3rd index in oldRules
    {
      l: 'n*-n^n1',
      r: '-n^(n1+1)'
    }, // Joining multiply with power 3
    {
      l: 'n*n^n1',
      r: 'n^(n1+1)'
    }, // Joining multiply with power 4
    {
      l: 'n^n1*-n^n2',
      r: '-n^(n1+n2)'
    }, // Joining multiply with power 5
    {
      l: 'n^n1*n^n2',
      r: 'n^(n1+n2)'
    }, // Joining multiply with power 6
    {
      l: 'n^n1*-n',
      r: '-n^(n1+1)'
    }, // Joining multiply with power 7
    {
      l: 'n^n1*n',
      r: 'n^(n1+1)'
    }, // Joining multiply with power 8
    {
      l: 'n^n1/-n',
      r: '-n^(n1-1)'
    }, // Joining multiply with power 8
    {
      l: 'n^n1/n',
      r: 'n^(n1-1)'
    }, // Joining division with power 1
    {
      l: 'n/-n^n1',
      r: '-n^(1-n1)'
    }, // Joining division with power 2
    {
      l: 'n/n^n1',
      r: 'n^(1-n1)'
    }, // Joining division with power 3
    {
      l: 'n^n1/-n^n2',
      r: 'n^(n1-n2)'
    }, // Joining division with power 4
    {
      l: 'n^n1/n^n2',
      r: 'n^(n1-n2)'
    }, // Joining division with power 5
    {
      l: 'n1+(-n2*n3)',
      r: 'n1-n2*n3'
    }, // Solving useless parenthesis 1
    {
      l: 'v*(-c)',
      r: '-c*v'
    }, // Solving useless unary 2
    {
      l: 'n1+-n2',
      r: 'n1-n2'
    }, // Solving +- together (new!)
    {
      l: 'v*c',
      r: 'c*v'
    }, // inversion constant with variable
    {
      l: '(n1^n2)^n3',
      r: '(n1^(n2*n3))'
    } // Power to Power
    ];
    return setRules;
  } // End rulesRationalize
  // ---------------------------------------------------------------------------------------

  /**
   *  Expand recursively a tree node for handling with expressions with exponents
   *  (it's not for constants, symbols or functions with exponents)
   *  PS: The other parameters are internal for recursion
   *
   * Syntax:
   *
   *     expandPower(node)
   *
   * @param  {Node} node         Current expression node
   * @param  {node} parent       Parent current node inside the recursion
   * @param  (int}               Parent number of chid inside the rercursion
   *
   * @return {node}        node expression with all powers expanded.
   */


  function expandPower(node, parent, indParent) {
    var tp = node.type;
    var internal = arguments.length > 1; // TRUE in internal calls

    if (tp === 'OperatorNode' && node.isBinary()) {
      var does = false;
      var val;

      if (node.op === '^') {
        // First operator: Parenthesis or UnaryMinus
        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {
          // Second operator: Constant
          val = parseFloat(node.args[1].value);
          does = val >= 2 && Object(utils_number["i" /* isInteger */])(val);
        }
      }

      if (does) {
        // Exponent >= 2
        // Before:
        //            operator A --> Subtree
        // parent pow
        //            constant
        //
        if (val > 2) {
          // Exponent > 2,
          // AFTER:  (exponent > 2)
          //             operator A --> Subtree
          // parent  *
          //                 deep clone (operator A --> Subtree
          //             pow
          //                 constant - 1
          //
          var nEsqTopo = node.args[0];
          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);
          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);
        } else {
          // Expo = 2 - no power
          // AFTER:  (exponent =  2)
          //             operator A --> Subtree
          // parent   oper
          //            deep clone (operator A --> Subtree)
          //
          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);
        }

        if (internal) {
          // Change parent references in internal recursive calls
          if (indParent === 'content') {
            parent.content = node;
          } else {
            parent.args[indParent] = node;
          }
        }
      } // does

    } // binary OperatorNode


    if (tp === 'ParenthesisNode') {
      // Recursion
      expandPower(node.content, node, 'content');
    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {
      for (var i = 0; i < node.args.length; i++) {
        expandPower(node.args[i], node, i);
      }
    }

    if (!internal) {
      // return the root node
      return node;
    }
  } // End expandPower
  // ---------------------------------------------------------------------------------------

  /**
   * Auxilary function for rationalize
   * Convert near canonical polynomial in one variable in a canonical polynomial
   * with one term for each exponent in decreasing order
   *
   * Syntax:
   *
   *     polyToCanonical(node [, coefficients])
   *
   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
   *
   *        The string or tree expression needs to be at below syntax, with free spaces:
   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
   *       Where 'var' is one variable with any valid name
   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
   *             'expo' are integers greater than 0. It can be omitted if equal than 1.
   *
   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent
   *
   *
   * @return {node}        new node tree with one variable polynomial or string error.
   */


  function polyToCanonical(node, coefficients) {
    if (coefficients === undefined) {
      coefficients = [];
    } // coefficients.


    coefficients[0] = 0; // index is the exponent

    var o = {};
    o.cte = 1;
    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -.
    //       It is used to deduce the exponent: 1 for *, 0 for "".

    o.fire = '';
    var maxExpo = 0; // maximum exponent

    var varname = ''; // variable name

    recurPol(node, null, o);
    maxExpo = coefficients.length - 1;
    var first = true;
    var no;

    for (var i = maxExpo; i >= 0; i--) {
      if (coefficients[i] === 0) continue;
      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));
      var op = coefficients[i] < 0 ? '-' : '+';

      if (i > 0) {
        // Is not a constant without variable
        var n2 = new SymbolNode(varname);

        if (i > 1) {
          var n3 = new ConstantNode(i);
          n2 = new OperatorNode('^', 'pow', [n2, n3]);
        }

        if (coefficients[i] === -1 && first) {
          n1 = new OperatorNode('-', 'unaryMinus', [n2]);
        } else if (Math.abs(coefficients[i]) === 1) {
          n1 = n2;
        } else {
          n1 = new OperatorNode('*', 'multiply', [n1, n2]);
        }
      }

      if (first) {
        no = n1;
      } else if (op === '+') {
        no = new OperatorNode('+', 'add', [no, n1]);
      } else {
        no = new OperatorNode('-', 'subtract', [no, n1]);
      }

      first = false;
    } // for


    if (first) {
      return new ConstantNode(0);
    } else {
      return no;
    }
    /**
     * Recursive auxilary function inside polyToCanonical for
     * converting expression in canonical form
     *
     * Syntax:
     *
     *     recurPol(node, noPai, obj)
     *
     * @param  {Node} node        The current subpolynomial expression
     * @param  {Node | Null}  noPai   The current parent node
     * @param  {object}    obj        Object with many internal flags
     *
     * @return {}                    No return. If error, throws an exception
     */


    function recurPol(node, noPai, o) {
      var tp = node.type;

      if (tp === 'FunctionNode') {
        // ***** FunctionName *****
        // No function call in polynomial expression
        throw new Error('There is an unsolved function call');
      } else if (tp === 'OperatorNode') {
        // ***** OperatorName *****
        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');

        if (noPai !== null) {
          // -(unary),^  : children of *,+,-
          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {
            throw new Error('Invalid ' + node.op + ' placing');
          } // -,+,* : children of +,-


          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {
            throw new Error('Invalid ' + node.op + ' placing');
          } // -,+ : first child


          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {
            throw new Error('Invalid ' + node.op + ' placing');
          }
        } // Has parent
        // Firers: ^,*       Old:   ^,&,-(unary): firers


        if (node.op === '^' || node.op === '*') {
          o.fire = node.op;
        }

        for (var _i = 0; _i < node.args.length; _i++) {
          // +,-: reset fire
          if (node.fn === 'unaryMinus') o.oper = '-';

          if (node.op === '+' || node.fn === 'subtract') {
            o.fire = '';
            o.cte = 1; // default if there is no constant

            o.oper = _i === 0 ? '+' : node.op;
          }

          o.noFil = _i; // number of son

          recurPol(node.args[_i], node, o);
        } // for in children

      } else if (tp === 'SymbolNode') {
        // ***** SymbolName *****
        if (node.name !== varname && varname !== '') {
          throw new Error('There is more than one variable');
        }

        varname = node.name;

        if (noPai === null) {
          coefficients[1] = 1;
          return;
        } // ^: Symbol is First child


        if (noPai.op === '^' && o.noFil !== 0) {
          throw new Error('In power the variable should be the first parameter');
        } // *: Symbol is Second child


        if (noPai.op === '*' && o.noFil !== 1) {
          throw new Error('In multiply the variable should be the second parameter');
        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)


        if (o.fire === '' || o.fire === '*') {
          if (maxExpo < 1) coefficients[1] = 0;
          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);
          maxExpo = Math.max(1, maxExpo);
        }
      } else if (tp === 'ConstantNode') {
        var valor = parseFloat(node.value);

        if (noPai === null) {
          coefficients[0] = valor;
          return;
        }

        if (noPai.op === '^') {
          // cte: second  child of power
          if (o.noFil !== 1) throw new Error('Constant cannot be powered');

          if (!Object(utils_number["i" /* isInteger */])(valor) || valor <= 0) {
            throw new Error('Non-integer exponent is not allowed');
          }

          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {
            coefficients[_i2] = 0;
          }

          if (valor > maxExpo) coefficients[valor] = 0;
          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);
          maxExpo = Math.max(valor, maxExpo);
          return;
        }

        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.

        if (o.fire === '') {
          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);
        }
      } else {
        throw new Error('Type ' + tp + ' is not allowed');
      }
    } // End of recurPol

  } // End of polyToCanonical


  return rationalize;
});
// CONCATENATED MODULE: ./src/json/reviver.js

var reviver_name = 'reviver';
var reviver_dependencies = ['classes'];
var createReviver =
/* #__PURE__ */
Object(factory["a" /* factory */])(reviver_name, reviver_dependencies, function (_ref) {
  var classes = _ref.classes;

  /**
   * Instantiate mathjs data types from their JSON representation
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the revived object
   */
  return function reviver(key, value) {
    var constructor = classes[value && value.mathjs];

    if (constructor && typeof constructor.fromJSON === 'function') {
      return constructor.fromJSON(value);
    }

    return value;
  };
});
// CONCATENATED MODULE: ./src/version.js
var version = '6.2.2'; // Note: This file is automatically generated when building math.js.
// Changes made in this file will be overwritten.
// CONCATENATED MODULE: ./src/plain/number/constants.js
var constants_pi = Math.PI;
var tau = 2 * Math.PI;
var constants_e = Math.E;
var constants_phi = 1.61803398874989484820458683436563811772030917980576286213545;
// CONCATENATED MODULE: ./src/constants.js




var createTrue =
/* #__PURE__ */
Object(factory["a" /* factory */])('true', [], function () {
  return true;
});
var createFalse =
/* #__PURE__ */
Object(factory["a" /* factory */])('false', [], function () {
  return false;
});
var createNull =
/* #__PURE__ */
Object(factory["a" /* factory */])('null', [], function () {
  return null;
});
var createInfinity =
/* #__PURE__ */
recreateFactory('Infinity', ['config', '?BigNumber'], function (_ref) {
  var config = _ref.config,
      BigNumber = _ref.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(Infinity) : Infinity;
});
var createNaN =
/* #__PURE__ */
recreateFactory('NaN', ['config', '?BigNumber'], function (_ref2) {
  var config = _ref2.config,
      BigNumber = _ref2.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(NaN) : NaN;
});
var createPi =
/* #__PURE__ */
recreateFactory('pi', ['config', '?BigNumber'], function (_ref3) {
  var config = _ref3.config,
      BigNumber = _ref3.BigNumber;
  return config.number === 'BigNumber' ? createBigNumberPi(BigNumber) : constants_pi;
});
var createTau =
/* #__PURE__ */
recreateFactory('tau', ['config', '?BigNumber'], function (_ref4) {
  var config = _ref4.config,
      BigNumber = _ref4.BigNumber;
  return config.number === 'BigNumber' ? createBigNumberTau(BigNumber) : tau;
});
var createE =
/* #__PURE__ */
recreateFactory('e', ['config', '?BigNumber'], function (_ref5) {
  var config = _ref5.config,
      BigNumber = _ref5.BigNumber;
  return config.number === 'BigNumber' ? createBigNumberE(BigNumber) : constants_e;
}); // golden ratio, (1+sqrt(5))/2

var createPhi =
/* #__PURE__ */
recreateFactory('phi', ['config', '?BigNumber'], function (_ref6) {
  var config = _ref6.config,
      BigNumber = _ref6.BigNumber;
  return config.number === 'BigNumber' ? createBigNumberPhi(BigNumber) : constants_phi;
});
var createLN2 =
/* #__PURE__ */
recreateFactory('LN2', ['config', '?BigNumber'], function (_ref7) {
  var config = _ref7.config,
      BigNumber = _ref7.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(2).ln() : Math.LN2;
});
var createLN10 =
/* #__PURE__ */
recreateFactory('LN10', ['config', '?BigNumber'], function (_ref8) {
  var config = _ref8.config,
      BigNumber = _ref8.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(10).ln() : Math.LN10;
});
var createLOG2E =
/* #__PURE__ */
recreateFactory('LOG2E', ['config', '?BigNumber'], function (_ref9) {
  var config = _ref9.config,
      BigNumber = _ref9.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(2).ln()) : Math.LOG2E;
});
var createLOG10E =
/* #__PURE__ */
recreateFactory('LOG10E', ['config', '?BigNumber'], function (_ref10) {
  var config = _ref10.config,
      BigNumber = _ref10.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(10).ln()) : Math.LOG10E;
});
var createSQRT1_2 =
/* #__PURE__ */
recreateFactory( // eslint-disable-line camelcase
'SQRT1_2', ['config', '?BigNumber'], function (_ref11) {
  var config = _ref11.config,
      BigNumber = _ref11.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber('0.5').sqrt() : Math.SQRT1_2;
});
var createSQRT2 =
/* #__PURE__ */
recreateFactory('SQRT2', ['config', '?BigNumber'], function (_ref12) {
  var config = _ref12.config,
      BigNumber = _ref12.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(2).sqrt() : Math.SQRT2;
});
var createI =
/* #__PURE__ */
recreateFactory('i', ['Complex'], function (_ref13) {
  var Complex = _ref13.Complex;
  return Complex.I;
}); // for backward compatibility with v5

var createUppercasePi =
/* #__PURE__ */
Object(factory["a" /* factory */])('PI', ['pi'], function (_ref14) {
  var pi = _ref14.pi;
  return pi;
});
var createUppercaseE =
/* #__PURE__ */
Object(factory["a" /* factory */])('E', ['e'], function (_ref15) {
  var e = _ref15.e;
  return e;
});
var createVersion =
/* #__PURE__ */
Object(factory["a" /* factory */])('version', [], function () {
  return version;
}); // helper function to create a factory with a flag recreateOnConfigChange
// idea: allow passing optional properties to be attached to the factory function as 4th argument?

function recreateFactory(name, dependencies, create) {
  return Object(factory["a" /* factory */])(name, dependencies, create, {
    recreateOnConfigChange: true
  });
}
// CONCATENATED MODULE: ./src/type/unit/physicalConstants.js
 // Source: https://en.wikipedia.org/wiki/Physical_constant
// Universal constants

var createSpeedOfLight =
/* #__PURE__ */
unitFactory('speedOfLight', '299792458', 'm s^-1');
var createGravitationConstant =
/* #__PURE__ */
unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');
var createPlanckConstant =
/* #__PURE__ */
unitFactory('planckConstant', '6.62607015e-34', 'J s');
var createReducedPlanckConstant =
/* #__PURE__ */
unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants

var createMagneticConstant =
/* #__PURE__ */
unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');
var createElectricConstant =
/* #__PURE__ */
unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');
var createVacuumImpedance =
/* #__PURE__ */
unitFactory('vacuumImpedance', '376.730313667', 'ohm');
var createCoulomb =
/* #__PURE__ */
unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');
var createElementaryCharge =
/* #__PURE__ */
unitFactory('elementaryCharge', '1.602176634e-19', 'C');
var createBohrMagneton =
/* #__PURE__ */
unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');
var createConductanceQuantum =
/* #__PURE__ */
unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');
var createInverseConductanceQuantum =
/* #__PURE__ */
unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');
var createMagneticFluxQuantum =
/* #__PURE__ */
unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');
var createNuclearMagneton =
/* #__PURE__ */
unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');
var createKlitzing =
/* #__PURE__ */
unitFactory('klitzing', '25812.807459304513', 'ohm');
var createJosephson =
/* #__PURE__ */
unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed
// Atomic and nuclear constants

var createBohrRadius =
/* #__PURE__ */
unitFactory('bohrRadius', '5.29177210903e-11', 'm');
var createClassicalElectronRadius =
/* #__PURE__ */
unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');
var createElectronMass =
/* #__PURE__ */
unitFactory('electronMass', '9.1093837015e-31', 'kg');
var createFermiCoupling =
/* #__PURE__ */
unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');
var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);
var createHartreeEnergy =
/* #__PURE__ */
unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');
var createProtonMass =
/* #__PURE__ */
unitFactory('protonMass', '1.67262192369e-27', 'kg');
var createDeuteronMass =
/* #__PURE__ */
unitFactory('deuteronMass', '3.3435830926e-27', 'kg');
var createNeutronMass =
/* #__PURE__ */
unitFactory('neutronMass', '1.6749271613e-27', 'kg');
var createQuantumOfCirculation =
/* #__PURE__ */
unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');
var createRydberg =
/* #__PURE__ */
unitFactory('rydberg', '10973731.568160', 'm^-1');
var createThomsonCrossSection =
/* #__PURE__ */
unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');
var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);
var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants

var createAtomicMass =
/* #__PURE__ */
unitFactory('atomicMass', '1.66053906660e-27', 'kg');
var createAvogadro =
/* #__PURE__ */
unitFactory('avogadro', '6.02214076e23', 'mol^-1');
var createBoltzmann =
/* #__PURE__ */
unitFactory('boltzmann', '1.380649e-23', 'J K^-1');
var createFaraday =
/* #__PURE__ */
unitFactory('faraday', '96485.33212331001', 'C mol^-1');
var createFirstRadiation =
/* #__PURE__ */
unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance

var createLoschmidt =
/* #__PURE__ */
unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');
var createGasConstant =
/* #__PURE__ */
unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');
var createMolarPlanckConstant =
/* #__PURE__ */
unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');
var createMolarVolume =
/* #__PURE__ */
unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');
var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);
var createSecondRadiation =
/* #__PURE__ */
unitFactory('secondRadiation', '0.014387768775039337', 'm K');
var createStefanBoltzmann =
/* #__PURE__ */
unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');
var createWienDisplacement =
/* #__PURE__ */
unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values

var createMolarMass =
/* #__PURE__ */
unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');
var createMolarMassC12 =
/* #__PURE__ */
unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');
var createGravity =
/* #__PURE__ */
unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js
// Natural units

var createPlanckLength =
/* #__PURE__ */
unitFactory('planckLength', '1.616255e-35', 'm');
var createPlanckMass =
/* #__PURE__ */
unitFactory('planckMass', '2.176435e-8', 'kg');
var createPlanckTime =
/* #__PURE__ */
unitFactory('planckTime', '5.391245e-44', 's');
var createPlanckCharge =
/* #__PURE__ */
unitFactory('planckCharge', '1.87554603778e-18', 'C');
var createPlanckTemperature =
/* #__PURE__ */
unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,
// a Unit with either a number value or a BigNumber value depending on the configuration

function unitFactory(name, valueStr, unitStr) {
  var dependencies = ['config', 'Unit', 'BigNumber'];
  return Object(factory["a" /* factory */])(name, dependencies, function (_ref) {
    var config = _ref.config,
        Unit = _ref.Unit,
        BigNumber = _ref.BigNumber;
    // Note that we can parse into number or BigNumber.
    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values
    // Therefore we dont use Unit.parse()
    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);
    var unit = new Unit(value, unitStr);
    unit.fixPrefix = true;
    return unit;
  });
} // helper function to create a factory function which creates a numeric constant,
// either a number or BigNumber depending on the configuration


function numberFactory(name, value) {
  var dependencies = ['config', 'BigNumber'];
  return Object(factory["a" /* factory */])(name, dependencies, function (_ref2) {
    var config = _ref2.config,
        BigNumber = _ref2.BigNumber;
    return config.number === 'BigNumber' ? new BigNumber(value) : value;
  });
}
// CONCATENATED MODULE: ./src/expression/transform/apply.transform.js




var apply_transform_name = 'apply';
var apply_transform_dependencies = ['typed', 'isInteger'];
/**
 * Attach a transform function to math.apply
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function apply
 * from one-based to zero based
 */

var createApplyTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(apply_transform_name, apply_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      isInteger = _ref.isInteger;
  var apply = createApply({
    typed: typed,
    isInteger: isInteger
  }); // @see: comment of concat itself

  return typed('apply', {
    '...any': function any(args) {
      // change dim from one-based to zero-based
      var dim = args[1];

      if (Object(is["y" /* isNumber */])(dim)) {
        args[1] = dim - 1;
      } else if (Object(is["e" /* isBigNumber */])(dim)) {
        args[1] = dim.minus(1);
      }

      try {
        return apply.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/column.transform.js




var column_transform_name = 'column';
var column_transform_dependencies = ['typed', 'Index', 'matrix', 'range'];
/**
 * Attach a transform function to matrix.column
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `index` parameter of function column
 * from zero-based to one-based
 */

var createColumnTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(column_transform_name, column_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      Index = _ref.Index,
      matrix = _ref.matrix,
      range = _ref.range;
  var column = createColumn({
    typed: typed,
    Index: Index,
    matrix: matrix,
    range: range
  }); // @see: comment of column itself

  return typed('column', {
    '...any': function any(args) {
      // change last argument from zero-based to one-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if (Object(is["y" /* isNumber */])(last)) {
        args[lastIndex] = last - 1;
      }

      try {
        return column.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/utils/compileInlineExpression.js

/**
 * Compile an inline expression like "x > 0"
 * @param {Node} expression
 * @param {Object} math
 * @param {Object} scope
 * @return {function} Returns a function with one argument which fills in the
 *                    undefined variable (like "x") and evaluates the expression
 */

function compileInlineExpression(expression, math, scope) {
  // find an undefined symbol
  var symbol = expression.filter(function (node) {
    return Object(is["J" /* isSymbolNode */])(node) && !(node.name in math) && !(node.name in scope);
  })[0];

  if (!symbol) {
    throw new Error('No undefined variable found in inline expression "' + expression + '"');
  } // create a test function for this equation


  var name = symbol.name; // variable name

  var subScope = Object.create(scope);
  var eq = expression.compile();
  return function inlineExpression(x) {
    subScope[name] = x;
    return eq.evaluate(subScope);
  };
}
// CONCATENATED MODULE: ./src/expression/transform/filter.transform.js





var filter_transform_name = 'filter';
var filter_transform_dependencies = ['typed'];
var createFilterTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(filter_transform_name, filter_transform_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Attach a transform function to math.filter
   * Adds a property transform containing the transform function.
   *
   * This transform adds support for equations as test function for math.filter,
   * so you can do something like 'filter([3, -2, 5], x > 0)'.
   */
  function filterTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if (Object(is["J" /* isSymbolNode */])(args[1]) || Object(is["q" /* isFunctionAssignmentNode */])(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = compileInlineExpression(args[1], math, scope);
      }
    }

    return filter(x, callback);
  }

  filterTransform.rawArgs = true; // one based version of function filter

  var filter = typed('filter', {
    'Array, function': _filter,
    'Matrix, function': function MatrixFunction(x, test) {
      return x.create(_filter(x.toArray(), test));
    },
    'Array, RegExp': utils_array["d" /* filterRegExp */],
    'Matrix, RegExp': function MatrixRegExp(x, test) {
      return x.create(Object(utils_array["d" /* filterRegExp */])(x.toArray(), test));
    }
  });
  return filterTransform;
}, {
  isTransformFunction: true
});
/**
 * Filter values in a callback given a callback function
 *
 * !!! Passes a one-based index !!!
 *
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */

function _filter(x, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);
  return Object(utils_array["c" /* filter */])(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index + 1]);
    } else {
      // 3 or -1
      return callback(value, [index + 1], array);
    }
  });
}
// CONCATENATED MODULE: ./src/expression/transform/forEach.transform.js





var forEach_transform_name = 'forEach';
var forEach_transform_dependencies = ['typed'];
var createForEachTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(forEach_transform_name, forEach_transform_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Attach a transform function to math.forEach
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  function forEachTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if (Object(is["J" /* isSymbolNode */])(args[1]) || Object(is["q" /* isFunctionAssignmentNode */])(args[1])) {
        // a function pointer, like forEach([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
        callback = compileInlineExpression(args[1], math, scope);
      }
    }

    return _forEach(x, callback);
  }

  forEachTransform.rawArgs = true; // one-based version of forEach

  var _forEach = typed('forEach', {
    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);

      var recurse = function recurse(value, index) {
        if (Array.isArray(value)) {
          Object(utils_array["f" /* forEach */])(value, function (child, i) {
            // we create a copy of the index array and append the new index value
            recurse(child, index.concat(i + 1)); // one based index, hence i+1
          });
        } else {
          // invoke the callback function with the right number of arguments
          if (args === 1) {
            callback(value);
          } else if (args === 2) {
            callback(value, index);
          } else {
            // 3 or -1
            callback(value, index, array);
          }
        }
      };

      recurse(array.valueOf(), []); // pass Array
    }
  });

  return forEachTransform;
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/map.transform.js





var map_transform_name = 'map';
var map_transform_dependencies = ['typed'];
var createMapTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(map_transform_name, map_transform_dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Attach a transform function to math.map
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  function mapTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if (Object(is["J" /* isSymbolNode */])(args[1]) || Object(is["q" /* isFunctionAssignmentNode */])(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = compileInlineExpression(args[1], math, scope);
      }
    }

    return map(x, callback);
  }

  mapTransform.rawArgs = true; // one-based version of map function

  var map = typed('map', {
    'Array, function': function ArrayFunction(x, callback) {
      return map_transform_map(x, callback, x);
    },
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.create(map_transform_map(x.valueOf(), callback, x));
    }
  });
  return mapTransform;
}, {
  isTransformFunction: true
});
/**
 * Map for a multi dimensional array. One-based indexes
 * @param {Array} array
 * @param {function} callback
 * @param {Array} orig
 * @return {Array}
 * @private
 */

function map_transform_map(array, callback, orig) {
  // figure out what number of arguments the callback function expects
  var argsCount = maxArgumentCount(callback);

  function recurse(value, index) {
    if (Array.isArray(value)) {
      return Object(utils_array["m" /* map */])(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
      });
    } else {
      // invoke the (typed) callback function with the right number of arguments
      if (argsCount === 1) {
        return callback(value);
      } else if (argsCount === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, orig);
      }
    }
  }

  return recurse(array, []);
}
// CONCATENATED MODULE: ./src/expression/transform/max.transform.js




var max_transform_name = 'max';
var max_transform_dependencies = ['typed', 'larger'];
var createMaxTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(max_transform_name, max_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      larger = _ref.larger;
  var max = createMax({
    typed: typed,
    larger: larger
  });
  /**
   * Attach a transform function to math.max
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function max
   * from one-based to zero based
   */

  return typed('max', {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && Object(is["i" /* isCollection */])(args[0])) {
        var dim = args[1];

        if (Object(is["y" /* isNumber */])(dim)) {
          args[1] = dim - 1;
        } else if (Object(is["e" /* isBigNumber */])(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return max.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/mean.transform.js




var mean_transform_name = 'mean';
var mean_transform_dependencies = ['typed', 'add', 'divide'];
var createMeanTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(mean_transform_name, mean_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      divide = _ref.divide;
  var mean = createMean({
    typed: typed,
    add: add,
    divide: divide
  });
  /**
   * Attach a transform function to math.mean
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function mean
   * from one-based to zero based
   */

  return typed('mean', {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && Object(is["i" /* isCollection */])(args[0])) {
        var dim = args[1];

        if (Object(is["y" /* isNumber */])(dim)) {
          args[1] = dim - 1;
        } else if (Object(is["e" /* isBigNumber */])(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return mean.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/min.transform.js




var min_transform_name = 'min';
var min_transform_dependencies = ['typed', 'smaller'];
var createMinTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(min_transform_name, min_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      smaller = _ref.smaller;
  var min = createMin({
    typed: typed,
    smaller: smaller
  });
  /**
   * Attach a transform function to math.min
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function min
   * from one-based to zero based
   */

  return typed('min', {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && Object(is["i" /* isCollection */])(args[0])) {
        var dim = args[1];

        if (Object(is["y" /* isNumber */])(dim)) {
          args[1] = dim - 1;
        } else if (Object(is["e" /* isBigNumber */])(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return min.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/range.transform.js


var range_transform_name = 'range';
var range_transform_dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
var createRangeTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(range_transform_name, range_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      bignumber = _ref.bignumber,
      smaller = _ref.smaller,
      smallerEq = _ref.smallerEq,
      larger = _ref.larger,
      largerEq = _ref.largerEq;
  var range = range_createRange({
    typed: typed,
    config: config,
    matrix: matrix,
    bignumber: bignumber,
    smaller: smaller,
    smallerEq: smallerEq,
    larger: larger,
    largerEq: largerEq
  });
  /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed('range', {
    '...any': function any(args) {
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if (typeof last !== 'boolean') {
        // append a parameter includeEnd=true
        args.push(true);
      }

      return range.apply(null, args);
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/row.transform.js




var row_transform_name = 'row';
var row_transform_dependencies = ['typed', 'Index', 'matrix', 'range'];
/**
 * Attach a transform function to matrix.column
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `index` parameter of function column
 * from zero-based to one-based
 */

var createRowTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(row_transform_name, row_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      Index = _ref.Index,
      matrix = _ref.matrix,
      range = _ref.range;
  var row = createRow({
    typed: typed,
    Index: Index,
    matrix: matrix,
    range: range
  }); // @see: comment of row itself

  return typed('row', {
    '...any': function any(args) {
      // change last argument from zero-based to one-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if (Object(is["y" /* isNumber */])(last)) {
        args[lastIndex] = last - 1;
      }

      try {
        return row.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/subset.transform.js



var subset_transform_name = 'subset';
var subset_transform_dependencies = ['typed', 'matrix'];
var createSubsetTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(subset_transform_name, subset_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;
  var subset = createSubset({
    typed: typed,
    matrix: matrix
  });
  /**
   * Attach a transform function to math.subset
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed('subset', {
    '...any': function any(args) {
      try {
        return subset.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/concat.transform.js




var concat_transform_name = 'concat';
var concat_transform_dependencies = ['typed', 'matrix', 'isInteger'];
var createConcatTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(concat_transform_name, concat_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      isInteger = _ref.isInteger;
  var concat = createConcat({
    typed: typed,
    matrix: matrix,
    isInteger: isInteger
  });
  /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function concat
   * from one-based to zero based
   */

  return typed('concat', {
    '...any': function any(args) {
      // change last argument from one-based to zero-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if (Object(is["y" /* isNumber */])(last)) {
        args[lastIndex] = last - 1;
      } else if (Object(is["e" /* isBigNumber */])(last)) {
        args[lastIndex] = last.minus(1);
      }

      try {
        return concat.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/std.transform.js




var std_transform_name = 'std';
var std_transform_dependencies = ['typed', 'sqrt', 'variance'];
/**
 * Attach a transform function to math.std
 * Adds a property transform containing the transform function.
 *
 * This transform changed the `dim` parameter of function std
 * from one-based to zero based
 */

var createStdTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(std_transform_name, std_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      sqrt = _ref.sqrt,
      variance = _ref.variance;
  var std = createStd({
    typed: typed,
    sqrt: sqrt,
    variance: variance
  });
  return typed('std', {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length >= 2 && Object(is["i" /* isCollection */])(args[0])) {
        var dim = args[1];

        if (Object(is["y" /* isNumber */])(dim)) {
          args[1] = dim - 1;
        } else if (Object(is["e" /* isBigNumber */])(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return std.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/sum.transform.js




/**
 * Attach a transform function to math.sum
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function mean
 * from one-based to zero based
 */

var sum_transform_name = 'sum';
var sum_transform_dependencies = ['typed', 'config', 'add', '?bignumber', '?fraction'];
var createSumTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(sum_transform_name, sum_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      add = _ref.add,
      bignumber = _ref.bignumber,
      fraction = _ref.fraction;
  var sum = createSum({
    typed: typed,
    config: config,
    add: add,
    bignumber: bignumber,
    fraction: fraction
  });
  return typed(sum_transform_name, {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && Object(is["i" /* isCollection */])(args[0])) {
        var dim = args[1];

        if (Object(is["y" /* isNumber */])(dim)) {
          args[1] = dim - 1;
        } else if (Object(is["e" /* isBigNumber */])(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return sum.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/expression/transform/variance.transform.js




var variance_transform_name = 'variance';
var variance_transform_dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
/**
 * Attach a transform function to math.var
 * Adds a property transform containing the transform function.
 *
 * This transform changed the `dim` parameter of function var
 * from one-based to zero based
 */

var createVarianceTransform =
/* #__PURE__ */
Object(factory["a" /* factory */])(variance_transform_name, variance_transform_dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      divide = _ref.divide,
      apply = _ref.apply,
      isNaN = _ref.isNaN;
  var variance = createVariance({
    typed: typed,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    apply: apply,
    isNaN: isNaN
  });
  return typed(variance_transform_name, {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length >= 2 && Object(is["i" /* isCollection */])(args[0])) {
        var dim = args[1];

        if (Object(is["y" /* isNumber */])(dim)) {
          args[1] = dim - 1;
        } else if (Object(is["e" /* isBigNumber */])(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return variance.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
// CONCATENATED MODULE: ./src/factoriesAny.js
/* concated harmony reexport createTyped */__webpack_require__.d(__webpack_exports__, "createTyped", function() { return typed_createTyped; });
/* concated harmony reexport createResultSet */__webpack_require__.d(__webpack_exports__, "createResultSet", function() { return createResultSet; });
/* concated harmony reexport createBigNumberClass */__webpack_require__.d(__webpack_exports__, "createBigNumberClass", function() { return createBigNumberClass; });
/* concated harmony reexport createComplexClass */__webpack_require__.d(__webpack_exports__, "createComplexClass", function() { return createComplexClass; });
/* concated harmony reexport createFractionClass */__webpack_require__.d(__webpack_exports__, "createFractionClass", function() { return createFractionClass; });
/* concated harmony reexport createRangeClass */__webpack_require__.d(__webpack_exports__, "createRangeClass", function() { return createRangeClass; });
/* concated harmony reexport createMatrixClass */__webpack_require__.d(__webpack_exports__, "createMatrixClass", function() { return createMatrixClass; });
/* concated harmony reexport createDenseMatrixClass */__webpack_require__.d(__webpack_exports__, "createDenseMatrixClass", function() { return createDenseMatrixClass; });
/* concated harmony reexport createClone */__webpack_require__.d(__webpack_exports__, "createClone", function() { return createClone; });
/* concated harmony reexport createIsInteger */__webpack_require__.d(__webpack_exports__, "createIsInteger", function() { return createIsInteger; });
/* concated harmony reexport createIsNegative */__webpack_require__.d(__webpack_exports__, "createIsNegative", function() { return createIsNegative; });
/* concated harmony reexport createIsNumeric */__webpack_require__.d(__webpack_exports__, "createIsNumeric", function() { return createIsNumeric; });
/* concated harmony reexport createHasNumericValue */__webpack_require__.d(__webpack_exports__, "createHasNumericValue", function() { return createHasNumericValue; });
/* concated harmony reexport createIsPositive */__webpack_require__.d(__webpack_exports__, "createIsPositive", function() { return createIsPositive; });
/* concated harmony reexport createIsZero */__webpack_require__.d(__webpack_exports__, "createIsZero", function() { return createIsZero; });
/* concated harmony reexport createIsNaN */__webpack_require__.d(__webpack_exports__, "createIsNaN", function() { return createIsNaN; });
/* concated harmony reexport createTypeOf */__webpack_require__.d(__webpack_exports__, "createTypeOf", function() { return createTypeOf; });
/* concated harmony reexport createDeprecatedTypeof */__webpack_require__.d(__webpack_exports__, "createDeprecatedTypeof", function() { return createDeprecatedTypeof; });
/* concated harmony reexport createEqualScalar */__webpack_require__.d(__webpack_exports__, "createEqualScalar", function() { return createEqualScalar; });
/* concated harmony reexport createSparseMatrixClass */__webpack_require__.d(__webpack_exports__, "createSparseMatrixClass", function() { return createSparseMatrixClass; });
/* concated harmony reexport createNumber */__webpack_require__.d(__webpack_exports__, "createNumber", function() { return createNumber; });
/* concated harmony reexport createString */__webpack_require__.d(__webpack_exports__, "createString", function() { return createString; });
/* concated harmony reexport createBoolean */__webpack_require__.d(__webpack_exports__, "createBoolean", function() { return createBoolean; });
/* concated harmony reexport createBignumber */__webpack_require__.d(__webpack_exports__, "createBignumber", function() { return createBignumber; });
/* concated harmony reexport createComplex */__webpack_require__.d(__webpack_exports__, "createComplex", function() { return createComplex; });
/* concated harmony reexport createFraction */__webpack_require__.d(__webpack_exports__, "createFraction", function() { return createFraction; });
/* concated harmony reexport createMatrix */__webpack_require__.d(__webpack_exports__, "createMatrix", function() { return createMatrix; });
/* concated harmony reexport createSplitUnit */__webpack_require__.d(__webpack_exports__, "createSplitUnit", function() { return createSplitUnit; });
/* concated harmony reexport createUnaryMinus */__webpack_require__.d(__webpack_exports__, "createUnaryMinus", function() { return createUnaryMinus; });
/* concated harmony reexport createUnaryPlus */__webpack_require__.d(__webpack_exports__, "createUnaryPlus", function() { return createUnaryPlus; });
/* concated harmony reexport createAbs */__webpack_require__.d(__webpack_exports__, "createAbs", function() { return createAbs; });
/* concated harmony reexport createApply */__webpack_require__.d(__webpack_exports__, "createApply", function() { return createApply; });
/* concated harmony reexport createAddScalar */__webpack_require__.d(__webpack_exports__, "createAddScalar", function() { return createAddScalar; });
/* concated harmony reexport createCbrt */__webpack_require__.d(__webpack_exports__, "createCbrt", function() { return createCbrt; });
/* concated harmony reexport createCeil */__webpack_require__.d(__webpack_exports__, "createCeil", function() { return createCeil; });
/* concated harmony reexport createCube */__webpack_require__.d(__webpack_exports__, "createCube", function() { return createCube; });
/* concated harmony reexport createExp */__webpack_require__.d(__webpack_exports__, "createExp", function() { return createExp; });
/* concated harmony reexport createExpm1 */__webpack_require__.d(__webpack_exports__, "createExpm1", function() { return createExpm1; });
/* concated harmony reexport createFix */__webpack_require__.d(__webpack_exports__, "createFix", function() { return createFix; });
/* concated harmony reexport createFloor */__webpack_require__.d(__webpack_exports__, "createFloor", function() { return createFloor; });
/* concated harmony reexport createGcd */__webpack_require__.d(__webpack_exports__, "createGcd", function() { return createGcd; });
/* concated harmony reexport createLcm */__webpack_require__.d(__webpack_exports__, "createLcm", function() { return createLcm; });
/* concated harmony reexport createLog10 */__webpack_require__.d(__webpack_exports__, "createLog10", function() { return createLog10; });
/* concated harmony reexport createLog2 */__webpack_require__.d(__webpack_exports__, "createLog2", function() { return createLog2; });
/* concated harmony reexport createMod */__webpack_require__.d(__webpack_exports__, "createMod", function() { return createMod; });
/* concated harmony reexport createMultiplyScalar */__webpack_require__.d(__webpack_exports__, "createMultiplyScalar", function() { return createMultiplyScalar; });
/* concated harmony reexport createMultiply */__webpack_require__.d(__webpack_exports__, "createMultiply", function() { return createMultiply; });
/* concated harmony reexport createNthRoot */__webpack_require__.d(__webpack_exports__, "createNthRoot", function() { return createNthRoot; });
/* concated harmony reexport createSign */__webpack_require__.d(__webpack_exports__, "createSign", function() { return createSign; });
/* concated harmony reexport createSqrt */__webpack_require__.d(__webpack_exports__, "createSqrt", function() { return createSqrt; });
/* concated harmony reexport createSquare */__webpack_require__.d(__webpack_exports__, "createSquare", function() { return createSquare; });
/* concated harmony reexport createSubtract */__webpack_require__.d(__webpack_exports__, "createSubtract", function() { return createSubtract; });
/* concated harmony reexport createXgcd */__webpack_require__.d(__webpack_exports__, "createXgcd", function() { return createXgcd; });
/* concated harmony reexport createDotMultiply */__webpack_require__.d(__webpack_exports__, "createDotMultiply", function() { return createDotMultiply; });
/* concated harmony reexport createBitAnd */__webpack_require__.d(__webpack_exports__, "createBitAnd", function() { return createBitAnd; });
/* concated harmony reexport createBitNot */__webpack_require__.d(__webpack_exports__, "createBitNot", function() { return createBitNot; });
/* concated harmony reexport createBitOr */__webpack_require__.d(__webpack_exports__, "createBitOr", function() { return createBitOr; });
/* concated harmony reexport createBitXor */__webpack_require__.d(__webpack_exports__, "createBitXor", function() { return createBitXor; });
/* concated harmony reexport createArg */__webpack_require__.d(__webpack_exports__, "createArg", function() { return createArg; });
/* concated harmony reexport createConj */__webpack_require__.d(__webpack_exports__, "createConj", function() { return createConj; });
/* concated harmony reexport createIm */__webpack_require__.d(__webpack_exports__, "createIm", function() { return createIm; });
/* concated harmony reexport createRe */__webpack_require__.d(__webpack_exports__, "createRe", function() { return createRe; });
/* concated harmony reexport createNot */__webpack_require__.d(__webpack_exports__, "createNot", function() { return createNot; });
/* concated harmony reexport createOr */__webpack_require__.d(__webpack_exports__, "createOr", function() { return createOr; });
/* concated harmony reexport createXor */__webpack_require__.d(__webpack_exports__, "createXor", function() { return createXor; });
/* concated harmony reexport createConcat */__webpack_require__.d(__webpack_exports__, "createConcat", function() { return createConcat; });
/* concated harmony reexport createColumn */__webpack_require__.d(__webpack_exports__, "createColumn", function() { return createColumn; });
/* concated harmony reexport createCross */__webpack_require__.d(__webpack_exports__, "createCross", function() { return createCross; });
/* concated harmony reexport createDiag */__webpack_require__.d(__webpack_exports__, "createDiag", function() { return createDiag; });
/* concated harmony reexport createEye */__webpack_require__.d(__webpack_exports__, "createEye", function() { return createEye; });
/* concated harmony reexport createFilter */__webpack_require__.d(__webpack_exports__, "createFilter", function() { return createFilter; });
/* concated harmony reexport createFlatten */__webpack_require__.d(__webpack_exports__, "createFlatten", function() { return createFlatten; });
/* concated harmony reexport createForEach */__webpack_require__.d(__webpack_exports__, "createForEach", function() { return createForEach; });
/* concated harmony reexport createGetMatrixDataType */__webpack_require__.d(__webpack_exports__, "createGetMatrixDataType", function() { return createGetMatrixDataType; });
/* concated harmony reexport createIdentity */__webpack_require__.d(__webpack_exports__, "createIdentity", function() { return createIdentity; });
/* concated harmony reexport createKron */__webpack_require__.d(__webpack_exports__, "createKron", function() { return createKron; });
/* concated harmony reexport createMap */__webpack_require__.d(__webpack_exports__, "createMap", function() { return createMap; });
/* concated harmony reexport createOnes */__webpack_require__.d(__webpack_exports__, "createOnes", function() { return createOnes; });
/* concated harmony reexport createRange */__webpack_require__.d(__webpack_exports__, "createRange", function() { return range_createRange; });
/* concated harmony reexport createReshape */__webpack_require__.d(__webpack_exports__, "createReshape", function() { return createReshape; });
/* concated harmony reexport createResize */__webpack_require__.d(__webpack_exports__, "createResize", function() { return createResize; });
/* concated harmony reexport createRow */__webpack_require__.d(__webpack_exports__, "createRow", function() { return createRow; });
/* concated harmony reexport createSize */__webpack_require__.d(__webpack_exports__, "createSize", function() { return createSize; });
/* concated harmony reexport createSqueeze */__webpack_require__.d(__webpack_exports__, "createSqueeze", function() { return createSqueeze; });
/* concated harmony reexport createSubset */__webpack_require__.d(__webpack_exports__, "createSubset", function() { return createSubset; });
/* concated harmony reexport createTranspose */__webpack_require__.d(__webpack_exports__, "createTranspose", function() { return createTranspose; });
/* concated harmony reexport createCtranspose */__webpack_require__.d(__webpack_exports__, "createCtranspose", function() { return createCtranspose; });
/* concated harmony reexport createZeros */__webpack_require__.d(__webpack_exports__, "createZeros", function() { return createZeros; });
/* concated harmony reexport createErf */__webpack_require__.d(__webpack_exports__, "createErf", function() { return createErf; });
/* concated harmony reexport createMode */__webpack_require__.d(__webpack_exports__, "createMode", function() { return createMode; });
/* concated harmony reexport createProd */__webpack_require__.d(__webpack_exports__, "createProd", function() { return createProd; });
/* concated harmony reexport createFormat */__webpack_require__.d(__webpack_exports__, "createFormat", function() { return createFormat; });
/* concated harmony reexport createPrint */__webpack_require__.d(__webpack_exports__, "createPrint", function() { return createPrint; });
/* concated harmony reexport createTo */__webpack_require__.d(__webpack_exports__, "createTo", function() { return createTo; });
/* concated harmony reexport createIsPrime */__webpack_require__.d(__webpack_exports__, "createIsPrime", function() { return createIsPrime; });
/* concated harmony reexport createNumeric */__webpack_require__.d(__webpack_exports__, "createNumeric", function() { return createNumeric; });
/* concated harmony reexport createDivideScalar */__webpack_require__.d(__webpack_exports__, "createDivideScalar", function() { return createDivideScalar; });
/* concated harmony reexport createPow */__webpack_require__.d(__webpack_exports__, "createPow", function() { return createPow; });
/* concated harmony reexport createRound */__webpack_require__.d(__webpack_exports__, "createRound", function() { return createRound; });
/* concated harmony reexport createLog */__webpack_require__.d(__webpack_exports__, "createLog", function() { return createLog; });
/* concated harmony reexport createLog1p */__webpack_require__.d(__webpack_exports__, "createLog1p", function() { return createLog1p; });
/* concated harmony reexport createNthRoots */__webpack_require__.d(__webpack_exports__, "createNthRoots", function() { return createNthRoots; });
/* concated harmony reexport createDotPow */__webpack_require__.d(__webpack_exports__, "createDotPow", function() { return createDotPow; });
/* concated harmony reexport createDotDivide */__webpack_require__.d(__webpack_exports__, "createDotDivide", function() { return createDotDivide; });
/* concated harmony reexport createLsolve */__webpack_require__.d(__webpack_exports__, "createLsolve", function() { return createLsolve; });
/* concated harmony reexport createUsolve */__webpack_require__.d(__webpack_exports__, "createUsolve", function() { return createUsolve; });
/* concated harmony reexport createLeftShift */__webpack_require__.d(__webpack_exports__, "createLeftShift", function() { return createLeftShift; });
/* concated harmony reexport createRightArithShift */__webpack_require__.d(__webpack_exports__, "createRightArithShift", function() { return createRightArithShift; });
/* concated harmony reexport createRightLogShift */__webpack_require__.d(__webpack_exports__, "createRightLogShift", function() { return createRightLogShift; });
/* concated harmony reexport createAnd */__webpack_require__.d(__webpack_exports__, "createAnd", function() { return createAnd; });
/* concated harmony reexport createCompare */__webpack_require__.d(__webpack_exports__, "createCompare", function() { return createCompare; });
/* concated harmony reexport createCompareNatural */__webpack_require__.d(__webpack_exports__, "createCompareNatural", function() { return createCompareNatural; });
/* concated harmony reexport createCompareText */__webpack_require__.d(__webpack_exports__, "createCompareText", function() { return createCompareText; });
/* concated harmony reexport createEqual */__webpack_require__.d(__webpack_exports__, "createEqual", function() { return createEqual; });
/* concated harmony reexport createEqualText */__webpack_require__.d(__webpack_exports__, "createEqualText", function() { return createEqualText; });
/* concated harmony reexport createSmaller */__webpack_require__.d(__webpack_exports__, "createSmaller", function() { return createSmaller; });
/* concated harmony reexport createSmallerEq */__webpack_require__.d(__webpack_exports__, "createSmallerEq", function() { return createSmallerEq; });
/* concated harmony reexport createLarger */__webpack_require__.d(__webpack_exports__, "createLarger", function() { return createLarger; });
/* concated harmony reexport createLargerEq */__webpack_require__.d(__webpack_exports__, "createLargerEq", function() { return createLargerEq; });
/* concated harmony reexport createDeepEqual */__webpack_require__.d(__webpack_exports__, "createDeepEqual", function() { return createDeepEqual; });
/* concated harmony reexport createUnequal */__webpack_require__.d(__webpack_exports__, "createUnequal", function() { return createUnequal; });
/* concated harmony reexport createPartitionSelect */__webpack_require__.d(__webpack_exports__, "createPartitionSelect", function() { return createPartitionSelect; });
/* concated harmony reexport createSort */__webpack_require__.d(__webpack_exports__, "createSort", function() { return createSort; });
/* concated harmony reexport createMax */__webpack_require__.d(__webpack_exports__, "createMax", function() { return createMax; });
/* concated harmony reexport createMin */__webpack_require__.d(__webpack_exports__, "createMin", function() { return createMin; });
/* concated harmony reexport createImmutableDenseMatrixClass */__webpack_require__.d(__webpack_exports__, "createImmutableDenseMatrixClass", function() { return createImmutableDenseMatrixClass; });
/* concated harmony reexport createIndexClass */__webpack_require__.d(__webpack_exports__, "createIndexClass", function() { return createIndexClass; });
/* concated harmony reexport createFibonacciHeapClass */__webpack_require__.d(__webpack_exports__, "createFibonacciHeapClass", function() { return createFibonacciHeapClass; });
/* concated harmony reexport createSpaClass */__webpack_require__.d(__webpack_exports__, "createSpaClass", function() { return createSpaClass; });
/* concated harmony reexport createUnitClass */__webpack_require__.d(__webpack_exports__, "createUnitClass", function() { return createUnitClass; });
/* concated harmony reexport createUnitFunction */__webpack_require__.d(__webpack_exports__, "createUnitFunction", function() { return createUnitFunction; });
/* concated harmony reexport createSparse */__webpack_require__.d(__webpack_exports__, "createSparse", function() { return createSparse; });
/* concated harmony reexport createCreateUnit */__webpack_require__.d(__webpack_exports__, "createCreateUnit", function() { return createCreateUnit; });
/* concated harmony reexport createAcos */__webpack_require__.d(__webpack_exports__, "createAcos", function() { return createAcos; });
/* concated harmony reexport createAcosh */__webpack_require__.d(__webpack_exports__, "createAcosh", function() { return createAcosh; });
/* concated harmony reexport createAcot */__webpack_require__.d(__webpack_exports__, "createAcot", function() { return createAcot; });
/* concated harmony reexport createAcoth */__webpack_require__.d(__webpack_exports__, "createAcoth", function() { return createAcoth; });
/* concated harmony reexport createAcsc */__webpack_require__.d(__webpack_exports__, "createAcsc", function() { return createAcsc; });
/* concated harmony reexport createAcsch */__webpack_require__.d(__webpack_exports__, "createAcsch", function() { return createAcsch; });
/* concated harmony reexport createAsec */__webpack_require__.d(__webpack_exports__, "createAsec", function() { return createAsec; });
/* concated harmony reexport createAsech */__webpack_require__.d(__webpack_exports__, "createAsech", function() { return createAsech; });
/* concated harmony reexport createAsin */__webpack_require__.d(__webpack_exports__, "createAsin", function() { return createAsin; });
/* concated harmony reexport createAsinh */__webpack_require__.d(__webpack_exports__, "createAsinh", function() { return createAsinh; });
/* concated harmony reexport createAtan */__webpack_require__.d(__webpack_exports__, "createAtan", function() { return createAtan; });
/* concated harmony reexport createAtan2 */__webpack_require__.d(__webpack_exports__, "createAtan2", function() { return createAtan2; });
/* concated harmony reexport createAtanh */__webpack_require__.d(__webpack_exports__, "createAtanh", function() { return createAtanh; });
/* concated harmony reexport createCos */__webpack_require__.d(__webpack_exports__, "createCos", function() { return createCos; });
/* concated harmony reexport createCosh */__webpack_require__.d(__webpack_exports__, "createCosh", function() { return createCosh; });
/* concated harmony reexport createCot */__webpack_require__.d(__webpack_exports__, "createCot", function() { return createCot; });
/* concated harmony reexport createCoth */__webpack_require__.d(__webpack_exports__, "createCoth", function() { return createCoth; });
/* concated harmony reexport createCsc */__webpack_require__.d(__webpack_exports__, "createCsc", function() { return createCsc; });
/* concated harmony reexport createCsch */__webpack_require__.d(__webpack_exports__, "createCsch", function() { return createCsch; });
/* concated harmony reexport createSec */__webpack_require__.d(__webpack_exports__, "createSec", function() { return createSec; });
/* concated harmony reexport createSech */__webpack_require__.d(__webpack_exports__, "createSech", function() { return createSech; });
/* concated harmony reexport createSin */__webpack_require__.d(__webpack_exports__, "createSin", function() { return createSin; });
/* concated harmony reexport createSinh */__webpack_require__.d(__webpack_exports__, "createSinh", function() { return createSinh; });
/* concated harmony reexport createTan */__webpack_require__.d(__webpack_exports__, "createTan", function() { return createTan; });
/* concated harmony reexport createTanh */__webpack_require__.d(__webpack_exports__, "createTanh", function() { return createTanh; });
/* concated harmony reexport createSetCartesian */__webpack_require__.d(__webpack_exports__, "createSetCartesian", function() { return createSetCartesian; });
/* concated harmony reexport createSetDifference */__webpack_require__.d(__webpack_exports__, "createSetDifference", function() { return createSetDifference; });
/* concated harmony reexport createSetDistinct */__webpack_require__.d(__webpack_exports__, "createSetDistinct", function() { return createSetDistinct; });
/* concated harmony reexport createSetIntersect */__webpack_require__.d(__webpack_exports__, "createSetIntersect", function() { return createSetIntersect; });
/* concated harmony reexport createSetIsSubset */__webpack_require__.d(__webpack_exports__, "createSetIsSubset", function() { return createSetIsSubset; });
/* concated harmony reexport createSetMultiplicity */__webpack_require__.d(__webpack_exports__, "createSetMultiplicity", function() { return createSetMultiplicity; });
/* concated harmony reexport createSetPowerset */__webpack_require__.d(__webpack_exports__, "createSetPowerset", function() { return createSetPowerset; });
/* concated harmony reexport createSetSize */__webpack_require__.d(__webpack_exports__, "createSetSize", function() { return createSetSize; });
/* concated harmony reexport createSetSymDifference */__webpack_require__.d(__webpack_exports__, "createSetSymDifference", function() { return createSetSymDifference; });
/* concated harmony reexport createSetUnion */__webpack_require__.d(__webpack_exports__, "createSetUnion", function() { return createSetUnion; });
/* concated harmony reexport createAdd */__webpack_require__.d(__webpack_exports__, "createAdd", function() { return createAdd; });
/* concated harmony reexport createHypot */__webpack_require__.d(__webpack_exports__, "createHypot", function() { return createHypot; });
/* concated harmony reexport createNorm */__webpack_require__.d(__webpack_exports__, "createNorm", function() { return createNorm; });
/* concated harmony reexport createDot */__webpack_require__.d(__webpack_exports__, "createDot", function() { return createDot; });
/* concated harmony reexport createTrace */__webpack_require__.d(__webpack_exports__, "createTrace", function() { return createTrace; });
/* concated harmony reexport createIndex */__webpack_require__.d(__webpack_exports__, "createIndex", function() { return createIndex; });
/* concated harmony reexport createNode */__webpack_require__.d(__webpack_exports__, "createNode", function() { return createNode; });
/* concated harmony reexport createAccessorNode */__webpack_require__.d(__webpack_exports__, "createAccessorNode", function() { return createAccessorNode; });
/* concated harmony reexport createArrayNode */__webpack_require__.d(__webpack_exports__, "createArrayNode", function() { return createArrayNode; });
/* concated harmony reexport createAssignmentNode */__webpack_require__.d(__webpack_exports__, "createAssignmentNode", function() { return createAssignmentNode; });
/* concated harmony reexport createBlockNode */__webpack_require__.d(__webpack_exports__, "createBlockNode", function() { return createBlockNode; });
/* concated harmony reexport createConditionalNode */__webpack_require__.d(__webpack_exports__, "createConditionalNode", function() { return createConditionalNode; });
/* concated harmony reexport createConstantNode */__webpack_require__.d(__webpack_exports__, "createConstantNode", function() { return ConstantNode_createConstantNode; });
/* concated harmony reexport createFunctionAssignmentNode */__webpack_require__.d(__webpack_exports__, "createFunctionAssignmentNode", function() { return createFunctionAssignmentNode; });
/* concated harmony reexport createIndexNode */__webpack_require__.d(__webpack_exports__, "createIndexNode", function() { return createIndexNode; });
/* concated harmony reexport createObjectNode */__webpack_require__.d(__webpack_exports__, "createObjectNode", function() { return createObjectNode; });
/* concated harmony reexport createOperatorNode */__webpack_require__.d(__webpack_exports__, "createOperatorNode", function() { return createOperatorNode; });
/* concated harmony reexport createParenthesisNode */__webpack_require__.d(__webpack_exports__, "createParenthesisNode", function() { return createParenthesisNode; });
/* concated harmony reexport createRangeNode */__webpack_require__.d(__webpack_exports__, "createRangeNode", function() { return createRangeNode; });
/* concated harmony reexport createRelationalNode */__webpack_require__.d(__webpack_exports__, "createRelationalNode", function() { return createRelationalNode; });
/* concated harmony reexport createSymbolNode */__webpack_require__.d(__webpack_exports__, "createSymbolNode", function() { return createSymbolNode; });
/* concated harmony reexport createFunctionNode */__webpack_require__.d(__webpack_exports__, "createFunctionNode", function() { return createFunctionNode; });
/* concated harmony reexport createParse */__webpack_require__.d(__webpack_exports__, "createParse", function() { return createParse; });
/* concated harmony reexport createCompile */__webpack_require__.d(__webpack_exports__, "createCompile", function() { return createCompile; });
/* concated harmony reexport createEvaluate */__webpack_require__.d(__webpack_exports__, "createEvaluate", function() { return createEvaluate; });
/* concated harmony reexport createDeprecatedEval */__webpack_require__.d(__webpack_exports__, "createDeprecatedEval", function() { return createDeprecatedEval; });
/* concated harmony reexport createParserClass */__webpack_require__.d(__webpack_exports__, "createParserClass", function() { return createParserClass; });
/* concated harmony reexport createParser */__webpack_require__.d(__webpack_exports__, "createParser", function() { return createParser; });
/* concated harmony reexport createLup */__webpack_require__.d(__webpack_exports__, "createLup", function() { return createLup; });
/* concated harmony reexport createQr */__webpack_require__.d(__webpack_exports__, "createQr", function() { return createQr; });
/* concated harmony reexport createSlu */__webpack_require__.d(__webpack_exports__, "createSlu", function() { return createSlu; });
/* concated harmony reexport createLusolve */__webpack_require__.d(__webpack_exports__, "createLusolve", function() { return createLusolve; });
/* concated harmony reexport createHelpClass */__webpack_require__.d(__webpack_exports__, "createHelpClass", function() { return createHelpClass; });
/* concated harmony reexport createChainClass */__webpack_require__.d(__webpack_exports__, "createChainClass", function() { return createChainClass; });
/* concated harmony reexport createHelp */__webpack_require__.d(__webpack_exports__, "createHelp", function() { return createHelp; });
/* concated harmony reexport createChain */__webpack_require__.d(__webpack_exports__, "createChain", function() { return createChain; });
/* concated harmony reexport createDet */__webpack_require__.d(__webpack_exports__, "createDet", function() { return createDet; });
/* concated harmony reexport createInv */__webpack_require__.d(__webpack_exports__, "createInv", function() { return createInv; });
/* concated harmony reexport createExpm */__webpack_require__.d(__webpack_exports__, "createExpm", function() { return createExpm; });
/* concated harmony reexport createSqrtm */__webpack_require__.d(__webpack_exports__, "createSqrtm", function() { return createSqrtm; });
/* concated harmony reexport createDivide */__webpack_require__.d(__webpack_exports__, "createDivide", function() { return createDivide; });
/* concated harmony reexport createDistance */__webpack_require__.d(__webpack_exports__, "createDistance", function() { return createDistance; });
/* concated harmony reexport createIntersect */__webpack_require__.d(__webpack_exports__, "createIntersect", function() { return createIntersect; });
/* concated harmony reexport createSum */__webpack_require__.d(__webpack_exports__, "createSum", function() { return createSum; });
/* concated harmony reexport createMean */__webpack_require__.d(__webpack_exports__, "createMean", function() { return createMean; });
/* concated harmony reexport createMedian */__webpack_require__.d(__webpack_exports__, "createMedian", function() { return createMedian; });
/* concated harmony reexport createMad */__webpack_require__.d(__webpack_exports__, "createMad", function() { return createMad; });
/* concated harmony reexport createVariance */__webpack_require__.d(__webpack_exports__, "createVariance", function() { return createVariance; });
/* concated harmony reexport createDeprecatedVar */__webpack_require__.d(__webpack_exports__, "createDeprecatedVar", function() { return createDeprecatedVar; });
/* concated harmony reexport createQuantileSeq */__webpack_require__.d(__webpack_exports__, "createQuantileSeq", function() { return createQuantileSeq; });
/* concated harmony reexport createStd */__webpack_require__.d(__webpack_exports__, "createStd", function() { return createStd; });
/* concated harmony reexport createCombinations */__webpack_require__.d(__webpack_exports__, "createCombinations", function() { return createCombinations; });
/* concated harmony reexport createCombinationsWithRep */__webpack_require__.d(__webpack_exports__, "createCombinationsWithRep", function() { return createCombinationsWithRep; });
/* concated harmony reexport createGamma */__webpack_require__.d(__webpack_exports__, "createGamma", function() { return createGamma; });
/* concated harmony reexport createFactorial */__webpack_require__.d(__webpack_exports__, "createFactorial", function() { return createFactorial; });
/* concated harmony reexport createKldivergence */__webpack_require__.d(__webpack_exports__, "createKldivergence", function() { return createKldivergence; });
/* concated harmony reexport createMultinomial */__webpack_require__.d(__webpack_exports__, "createMultinomial", function() { return createMultinomial; });
/* concated harmony reexport createPermutations */__webpack_require__.d(__webpack_exports__, "createPermutations", function() { return createPermutations; });
/* concated harmony reexport createPickRandom */__webpack_require__.d(__webpack_exports__, "createPickRandom", function() { return createPickRandom; });
/* concated harmony reexport createRandom */__webpack_require__.d(__webpack_exports__, "createRandom", function() { return createRandom; });
/* concated harmony reexport createRandomInt */__webpack_require__.d(__webpack_exports__, "createRandomInt", function() { return createRandomInt; });
/* concated harmony reexport createStirlingS2 */__webpack_require__.d(__webpack_exports__, "createStirlingS2", function() { return createStirlingS2; });
/* concated harmony reexport createBellNumbers */__webpack_require__.d(__webpack_exports__, "createBellNumbers", function() { return createBellNumbers; });
/* concated harmony reexport createCatalan */__webpack_require__.d(__webpack_exports__, "createCatalan", function() { return createCatalan; });
/* concated harmony reexport createComposition */__webpack_require__.d(__webpack_exports__, "createComposition", function() { return createComposition; });
/* concated harmony reexport createSimplify */__webpack_require__.d(__webpack_exports__, "createSimplify", function() { return createSimplify; });
/* concated harmony reexport createDerivative */__webpack_require__.d(__webpack_exports__, "createDerivative", function() { return createDerivative; });
/* concated harmony reexport createRationalize */__webpack_require__.d(__webpack_exports__, "createRationalize", function() { return createRationalize; });
/* concated harmony reexport createReviver */__webpack_require__.d(__webpack_exports__, "createReviver", function() { return createReviver; });
/* concated harmony reexport createE */__webpack_require__.d(__webpack_exports__, "createE", function() { return createE; });
/* concated harmony reexport createUppercaseE */__webpack_require__.d(__webpack_exports__, "createUppercaseE", function() { return createUppercaseE; });
/* concated harmony reexport createFalse */__webpack_require__.d(__webpack_exports__, "createFalse", function() { return createFalse; });
/* concated harmony reexport createI */__webpack_require__.d(__webpack_exports__, "createI", function() { return createI; });
/* concated harmony reexport createInfinity */__webpack_require__.d(__webpack_exports__, "createInfinity", function() { return createInfinity; });
/* concated harmony reexport createLN10 */__webpack_require__.d(__webpack_exports__, "createLN10", function() { return createLN10; });
/* concated harmony reexport createLN2 */__webpack_require__.d(__webpack_exports__, "createLN2", function() { return createLN2; });
/* concated harmony reexport createLOG10E */__webpack_require__.d(__webpack_exports__, "createLOG10E", function() { return createLOG10E; });
/* concated harmony reexport createLOG2E */__webpack_require__.d(__webpack_exports__, "createLOG2E", function() { return createLOG2E; });
/* concated harmony reexport createNaN */__webpack_require__.d(__webpack_exports__, "createNaN", function() { return createNaN; });
/* concated harmony reexport createNull */__webpack_require__.d(__webpack_exports__, "createNull", function() { return createNull; });
/* concated harmony reexport createPhi */__webpack_require__.d(__webpack_exports__, "createPhi", function() { return createPhi; });
/* concated harmony reexport createPi */__webpack_require__.d(__webpack_exports__, "createPi", function() { return createPi; });
/* concated harmony reexport createUppercasePi */__webpack_require__.d(__webpack_exports__, "createUppercasePi", function() { return createUppercasePi; });
/* concated harmony reexport createSQRT1_2 */__webpack_require__.d(__webpack_exports__, "createSQRT1_2", function() { return createSQRT1_2; });
/* concated harmony reexport createSQRT2 */__webpack_require__.d(__webpack_exports__, "createSQRT2", function() { return createSQRT2; });
/* concated harmony reexport createTau */__webpack_require__.d(__webpack_exports__, "createTau", function() { return createTau; });
/* concated harmony reexport createTrue */__webpack_require__.d(__webpack_exports__, "createTrue", function() { return createTrue; });
/* concated harmony reexport createVersion */__webpack_require__.d(__webpack_exports__, "createVersion", function() { return createVersion; });
/* concated harmony reexport createAtomicMass */__webpack_require__.d(__webpack_exports__, "createAtomicMass", function() { return createAtomicMass; });
/* concated harmony reexport createAvogadro */__webpack_require__.d(__webpack_exports__, "createAvogadro", function() { return createAvogadro; });
/* concated harmony reexport createBohrMagneton */__webpack_require__.d(__webpack_exports__, "createBohrMagneton", function() { return createBohrMagneton; });
/* concated harmony reexport createBohrRadius */__webpack_require__.d(__webpack_exports__, "createBohrRadius", function() { return createBohrRadius; });
/* concated harmony reexport createBoltzmann */__webpack_require__.d(__webpack_exports__, "createBoltzmann", function() { return createBoltzmann; });
/* concated harmony reexport createClassicalElectronRadius */__webpack_require__.d(__webpack_exports__, "createClassicalElectronRadius", function() { return createClassicalElectronRadius; });
/* concated harmony reexport createConductanceQuantum */__webpack_require__.d(__webpack_exports__, "createConductanceQuantum", function() { return createConductanceQuantum; });
/* concated harmony reexport createCoulomb */__webpack_require__.d(__webpack_exports__, "createCoulomb", function() { return createCoulomb; });
/* concated harmony reexport createDeuteronMass */__webpack_require__.d(__webpack_exports__, "createDeuteronMass", function() { return createDeuteronMass; });
/* concated harmony reexport createEfimovFactor */__webpack_require__.d(__webpack_exports__, "createEfimovFactor", function() { return createEfimovFactor; });
/* concated harmony reexport createElectricConstant */__webpack_require__.d(__webpack_exports__, "createElectricConstant", function() { return createElectricConstant; });
/* concated harmony reexport createElectronMass */__webpack_require__.d(__webpack_exports__, "createElectronMass", function() { return createElectronMass; });
/* concated harmony reexport createElementaryCharge */__webpack_require__.d(__webpack_exports__, "createElementaryCharge", function() { return createElementaryCharge; });
/* concated harmony reexport createFaraday */__webpack_require__.d(__webpack_exports__, "createFaraday", function() { return createFaraday; });
/* concated harmony reexport createFermiCoupling */__webpack_require__.d(__webpack_exports__, "createFermiCoupling", function() { return createFermiCoupling; });
/* concated harmony reexport createFineStructure */__webpack_require__.d(__webpack_exports__, "createFineStructure", function() { return createFineStructure; });
/* concated harmony reexport createFirstRadiation */__webpack_require__.d(__webpack_exports__, "createFirstRadiation", function() { return createFirstRadiation; });
/* concated harmony reexport createGasConstant */__webpack_require__.d(__webpack_exports__, "createGasConstant", function() { return createGasConstant; });
/* concated harmony reexport createGravitationConstant */__webpack_require__.d(__webpack_exports__, "createGravitationConstant", function() { return createGravitationConstant; });
/* concated harmony reexport createGravity */__webpack_require__.d(__webpack_exports__, "createGravity", function() { return createGravity; });
/* concated harmony reexport createHartreeEnergy */__webpack_require__.d(__webpack_exports__, "createHartreeEnergy", function() { return createHartreeEnergy; });
/* concated harmony reexport createInverseConductanceQuantum */__webpack_require__.d(__webpack_exports__, "createInverseConductanceQuantum", function() { return createInverseConductanceQuantum; });
/* concated harmony reexport createKlitzing */__webpack_require__.d(__webpack_exports__, "createKlitzing", function() { return createKlitzing; });
/* concated harmony reexport createLoschmidt */__webpack_require__.d(__webpack_exports__, "createLoschmidt", function() { return createLoschmidt; });
/* concated harmony reexport createMagneticConstant */__webpack_require__.d(__webpack_exports__, "createMagneticConstant", function() { return createMagneticConstant; });
/* concated harmony reexport createMagneticFluxQuantum */__webpack_require__.d(__webpack_exports__, "createMagneticFluxQuantum", function() { return createMagneticFluxQuantum; });
/* concated harmony reexport createMolarMass */__webpack_require__.d(__webpack_exports__, "createMolarMass", function() { return createMolarMass; });
/* concated harmony reexport createMolarMassC12 */__webpack_require__.d(__webpack_exports__, "createMolarMassC12", function() { return createMolarMassC12; });
/* concated harmony reexport createMolarPlanckConstant */__webpack_require__.d(__webpack_exports__, "createMolarPlanckConstant", function() { return createMolarPlanckConstant; });
/* concated harmony reexport createMolarVolume */__webpack_require__.d(__webpack_exports__, "createMolarVolume", function() { return createMolarVolume; });
/* concated harmony reexport createNeutronMass */__webpack_require__.d(__webpack_exports__, "createNeutronMass", function() { return createNeutronMass; });
/* concated harmony reexport createNuclearMagneton */__webpack_require__.d(__webpack_exports__, "createNuclearMagneton", function() { return createNuclearMagneton; });
/* concated harmony reexport createPlanckCharge */__webpack_require__.d(__webpack_exports__, "createPlanckCharge", function() { return createPlanckCharge; });
/* concated harmony reexport createPlanckConstant */__webpack_require__.d(__webpack_exports__, "createPlanckConstant", function() { return createPlanckConstant; });
/* concated harmony reexport createPlanckLength */__webpack_require__.d(__webpack_exports__, "createPlanckLength", function() { return createPlanckLength; });
/* concated harmony reexport createPlanckMass */__webpack_require__.d(__webpack_exports__, "createPlanckMass", function() { return createPlanckMass; });
/* concated harmony reexport createPlanckTemperature */__webpack_require__.d(__webpack_exports__, "createPlanckTemperature", function() { return createPlanckTemperature; });
/* concated harmony reexport createPlanckTime */__webpack_require__.d(__webpack_exports__, "createPlanckTime", function() { return createPlanckTime; });
/* concated harmony reexport createProtonMass */__webpack_require__.d(__webpack_exports__, "createProtonMass", function() { return createProtonMass; });
/* concated harmony reexport createQuantumOfCirculation */__webpack_require__.d(__webpack_exports__, "createQuantumOfCirculation", function() { return createQuantumOfCirculation; });
/* concated harmony reexport createReducedPlanckConstant */__webpack_require__.d(__webpack_exports__, "createReducedPlanckConstant", function() { return createReducedPlanckConstant; });
/* concated harmony reexport createRydberg */__webpack_require__.d(__webpack_exports__, "createRydberg", function() { return createRydberg; });
/* concated harmony reexport createSackurTetrode */__webpack_require__.d(__webpack_exports__, "createSackurTetrode", function() { return createSackurTetrode; });
/* concated harmony reexport createSecondRadiation */__webpack_require__.d(__webpack_exports__, "createSecondRadiation", function() { return createSecondRadiation; });
/* concated harmony reexport createSpeedOfLight */__webpack_require__.d(__webpack_exports__, "createSpeedOfLight", function() { return createSpeedOfLight; });
/* concated harmony reexport createStefanBoltzmann */__webpack_require__.d(__webpack_exports__, "createStefanBoltzmann", function() { return createStefanBoltzmann; });
/* concated harmony reexport createThomsonCrossSection */__webpack_require__.d(__webpack_exports__, "createThomsonCrossSection", function() { return createThomsonCrossSection; });
/* concated harmony reexport createVacuumImpedance */__webpack_require__.d(__webpack_exports__, "createVacuumImpedance", function() { return createVacuumImpedance; });
/* concated harmony reexport createWeakMixingAngle */__webpack_require__.d(__webpack_exports__, "createWeakMixingAngle", function() { return createWeakMixingAngle; });
/* concated harmony reexport createWienDisplacement */__webpack_require__.d(__webpack_exports__, "createWienDisplacement", function() { return createWienDisplacement; });
/* concated harmony reexport createApplyTransform */__webpack_require__.d(__webpack_exports__, "createApplyTransform", function() { return createApplyTransform; });
/* concated harmony reexport createColumnTransform */__webpack_require__.d(__webpack_exports__, "createColumnTransform", function() { return createColumnTransform; });
/* concated harmony reexport createFilterTransform */__webpack_require__.d(__webpack_exports__, "createFilterTransform", function() { return createFilterTransform; });
/* concated harmony reexport createForEachTransform */__webpack_require__.d(__webpack_exports__, "createForEachTransform", function() { return createForEachTransform; });
/* concated harmony reexport createIndexTransform */__webpack_require__.d(__webpack_exports__, "createIndexTransform", function() { return createIndexTransform; });
/* concated harmony reexport createMapTransform */__webpack_require__.d(__webpack_exports__, "createMapTransform", function() { return createMapTransform; });
/* concated harmony reexport createMaxTransform */__webpack_require__.d(__webpack_exports__, "createMaxTransform", function() { return createMaxTransform; });
/* concated harmony reexport createMeanTransform */__webpack_require__.d(__webpack_exports__, "createMeanTransform", function() { return createMeanTransform; });
/* concated harmony reexport createMinTransform */__webpack_require__.d(__webpack_exports__, "createMinTransform", function() { return createMinTransform; });
/* concated harmony reexport createRangeTransform */__webpack_require__.d(__webpack_exports__, "createRangeTransform", function() { return createRangeTransform; });
/* concated harmony reexport createRowTransform */__webpack_require__.d(__webpack_exports__, "createRowTransform", function() { return createRowTransform; });
/* concated harmony reexport createSubsetTransform */__webpack_require__.d(__webpack_exports__, "createSubsetTransform", function() { return createSubsetTransform; });
/* concated harmony reexport createConcatTransform */__webpack_require__.d(__webpack_exports__, "createConcatTransform", function() { return createConcatTransform; });
/* concated harmony reexport createStdTransform */__webpack_require__.d(__webpack_exports__, "createStdTransform", function() { return createStdTransform; });
/* concated harmony reexport createSumTransform */__webpack_require__.d(__webpack_exports__, "createSumTransform", function() { return createSumTransform; });
/* concated harmony reexport createVarianceTransform */__webpack_require__.d(__webpack_exports__, "createVarianceTransform", function() { return createVarianceTransform; });






























































































































































































































































/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./src/utils/object.js
var utils_object = __webpack_require__(3);

// EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js
var tiny_emitter = __webpack_require__(18);
var tiny_emitter_default = /*#__PURE__*/__webpack_require__.n(tiny_emitter);

// CONCATENATED MODULE: ./src/utils/emitter.js

/**
 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
 * @param {Object} obj
 * @return {Object} obj
 */

function mixin(obj) {
  // create event emitter
  var emitter = new tiny_emitter_default.a(); // bind methods to obj (we don't want to expose the emitter.e Array...)

  obj.on = emitter.on.bind(emitter);
  obj.off = emitter.off.bind(emitter);
  obj.once = emitter.once.bind(emitter);
  obj.emit = emitter.emit.bind(emitter);
  return obj;
}
// EXTERNAL MODULE: ./src/utils/is.js
var is = __webpack_require__(1);

// EXTERNAL MODULE: ./src/utils/factory.js
var utils_factory = __webpack_require__(0);

// EXTERNAL MODULE: ./src/utils/array.js
var array = __webpack_require__(2);

// EXTERNAL MODULE: ./src/error/ArgumentsError.js
var ArgumentsError = __webpack_require__(13);

// EXTERNAL MODULE: ./src/utils/log.js
var log = __webpack_require__(8);

// CONCATENATED MODULE: ./src/core/function/import.js
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }







function importFactory(typed, load, math, importedFactories) {
  /**
   * Import functions from an object or a module.
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *    math.import(functions)
   *    math.import(functions, options)
   *
   * Where:
   *
   * - `functions: Object`
   *   An object with functions or factories to be imported.
   * - `options: Object` An object with import options. Available options:
   *   - `override: boolean`
   *     If true, existing functions will be overwritten. False by default.
   *   - `silent: boolean`
   *     If true, the function will not throw errors on duplicates or invalid
   *     types. False by default.
   *   - `wrap: boolean`
   *     If true, the functions will be wrapped in a wrapper function
   *     which converts data types like Matrix to primitive data types like Array.
   *     The wrapper is needed when extending math.js with libraries which do not
   *     support these data type. False by default.
   *
   * Examples:
   *
   *    import { create, all } from 'mathjs'
   *    import * as numbers from 'numbers'
   *
   *    // create a mathjs instance
   *    const math = create(all)
   *
   *    // define new functions and variables
   *    math.import({
   *      myvalue: 42,
   *      hello: function (name) {
   *        return 'hello, ' + name + '!'
   *      }
   *    })
   *
   *    // use the imported function and variable
   *    math.myvalue * 2               // 84
   *    math.hello('user')             // 'hello, user!'
   *
   *    // import the npm module 'numbers'
   *    // (must be installed first with `npm install numbers`)
   *    math.import(numbers, {wrap: true})
   *
   *    math.fibonacci(7) // returns 13
   *
   * @param {Object | Array} functions  Object with functions to be imported.
   * @param {Object} [options]          Import options.
   */
  function mathImport(functions, options) {
    var num = arguments.length;

    if (num !== 1 && num !== 2) {
      throw new ArgumentsError["a" /* ArgumentsError */]('import', num, 1, 2);
    }

    if (!options) {
      options = {};
    }

    function flattenImports(flatValues, value, name) {
      if (Object(utils_object["g" /* isLegacyFactory */])(value)) {
        // legacy factories don't always have a name,
        // let's not handle them via the new flatValues
        _importLegacyFactory(value, options);
      } else if (Array.isArray(value)) {
        value.forEach(function (item) {
          return flattenImports(flatValues, item);
        });
      } else if (_typeof(value) === 'object') {
        for (var _name in value) {
          if (Object(utils_object["f" /* hasOwnProperty */])(value, _name)) {
            flattenImports(flatValues, value[_name], _name);
          }
        }
      } else if (Object(utils_factory["b" /* isFactory */])(value) || name !== undefined) {
        var flatName = Object(utils_factory["b" /* isFactory */])(value) ? isTransformFunctionFactory(value) ? value.fn + '.transform' : // TODO: this is ugly
        value.fn : name; // we allow importing the same function twice if it points to the same implementation

        if (Object(utils_object["f" /* hasOwnProperty */])(flatValues, flatName) && flatValues[flatName] !== value && !options.silent) {
          throw new Error('Cannot import "' + flatName + '" twice');
        }

        flatValues[flatName] = value;
      } else {
        if (!options.silent) {
          throw new TypeError('Factory, Object, or Array expected');
        }
      }
    }

    var flatValues = {};
    flattenImports(flatValues, functions);

    for (var name in flatValues) {
      if (Object(utils_object["f" /* hasOwnProperty */])(flatValues, name)) {
        // console.log('import', name)
        var value = flatValues[name];

        if (Object(utils_factory["b" /* isFactory */])(value)) {
          // we ignore name here and enforce the name of the factory
          // maybe at some point we do want to allow overriding it
          // in that case we can implement an option overrideFactoryNames: true
          _importFactory(value, options);
        } else if (isSupportedType(value)) {
          _import(name, value, options);
        } else {
          if (!options.silent) {
            throw new TypeError('Factory, Object, or Array expected');
          }
        }
      }
    }
  }
  /**
   * Add a property to the math namespace
   * @param {string} name
   * @param {*} value
   * @param {Object} options  See import for a description of the options
   * @private
   */


  function _import(name, value, options) {
    // TODO: refactor this function, it's to complicated and contains duplicate code
    if (options.wrap && typeof value === 'function') {
      // create a wrapper around the function
      value = _wrap(value);
    } // turn a plain function with a typed-function signature into a typed-function


    if (hasTypedFunctionSignature(value)) {
      value = typed(name, _defineProperty({}, value.signature, value));
    }

    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
      if (options.override) {
        // give the typed function the right name
        value = typed(name, value.signatures);
      } else {
        // merge the existing and typed function
        value = typed(math[name], value);
      }

      math[name] = value;
      delete importedFactories[name];

      _importTransform(name, value);

      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }

    if (math[name] === undefined || options.override) {
      math[name] = value;
      delete importedFactories[name];

      _importTransform(name, value);

      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }

    if (!options.silent) {
      throw new Error('Cannot import "' + name + '": already exists');
    }
  }

  function _importTransform(name, value) {
    if (value && typeof value.transform === 'function') {
      math.expression.transform[name] = value.transform;

      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value.transform;
      }
    } else {
      // remove existing transform
      delete math.expression.transform[name];

      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value;
      }
    }
  }

  function _deleteTransform(name) {
    delete math.expression.transform[name];

    if (allowedInExpressions(name)) {
      math.expression.mathWithTransform[name] = math[name];
    } else {
      delete math.expression.mathWithTransform[name];
    }
  }
  /**
   * Create a wrapper a round an function which converts the arguments
   * to their primitive values (like convert a Matrix to Array)
   * @param {Function} fn
   * @return {Function} Returns the wrapped function
   * @private
   */


  function _wrap(fn) {
    var wrapper = function wrapper() {
      var args = [];

      for (var i = 0, len = arguments.length; i < len; i++) {
        var arg = arguments[i];
        args[i] = arg && arg.valueOf();
      }

      return fn.apply(math, args);
    };

    if (fn.transform) {
      wrapper.transform = fn.transform;
    }

    return wrapper;
  }
  /**
   * Import an instance of a factory into math.js
   * @param {{factory: Function, name: string, path: string, math: boolean}} factory
   * @param {Object} options  See import for a description of the options
   * @private
   */
  // TODO: _importLegacyFactory is deprecated since v6.0.0, clean up some day


  function _importLegacyFactory(factory, options) {
    Object(log["a" /* warnOnce */])('Factories of type { name, factory } are deprecated since v6. ' + 'Please create your factory functions using the math.factory function.');

    if (typeof factory.name === 'string') {
      var name = factory.name;
      var existingTransform = name in math.expression.transform;
      var namespace = factory.path ? Object(utils_object["k" /* traverse */])(math, factory.path) : math;
      var existing = Object(utils_object["f" /* hasOwnProperty */])(namespace, name) ? namespace[name] : undefined;

      var resolver = function resolver() {
        var instance = load(factory);

        if (instance && typeof instance.transform === 'function') {
          throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
        }

        if (isTypedFunction(existing) && isTypedFunction(instance)) {
          if (options.override) {// replace the existing typed function (nothing to do)
          } else {
            // merge the existing and new typed function
            instance = typed(existing, instance);
          }

          return instance;
        }

        if (existing === undefined || options.override) {
          return instance;
        }

        if (options.silent) {
          return existing;
        } else {
          throw new Error('Cannot import "' + name + '": already exists');
        }
      };

      if (factory.lazy !== false) {
        Object(utils_object["h" /* lazy */])(namespace, name, resolver);

        if (existingTransform) {
          _deleteTransform(name);
        } else {
          if (factory.path === 'expression.transform' || legacyFactoryAllowedInExpressions(factory)) {
            Object(utils_object["h" /* lazy */])(math.expression.mathWithTransform, name, resolver);
          }
        }
      } else {
        namespace[name] = resolver();

        if (existingTransform) {
          _deleteTransform(name);
        } else {
          if (factory.path === 'expression.transform' || legacyFactoryAllowedInExpressions(factory)) {
            math.expression.mathWithTransform[name] = resolver();
          }
        }
      }

      var key = factory.path ? factory.path + '.' + factory.name : factory.name;
      importedFactories[key] = factory;
      math.emit('import', name, resolver, factory.path);
    } else {
      // unnamed factory.
      // no lazy loading
      load(factory);
    }
  }
  /**
   * Import an instance of a factory into math.js
   * @param {function(scope: object)} factory
   * @param {Object} options  See import for a description of the options
   * @param {string} [name=factory.name] Optional custom name
   * @private
   */


  function _importFactory(factory, options) {
    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : factory.fn;

    if (Object(array["b" /* contains */])(name, '.')) {
      throw new Error('Factory name should not contain a nested path. ' + 'Name: ' + JSON.stringify(name));
    }

    var namespace = isTransformFunctionFactory(factory) ? math.expression.transform : math;
    var existingTransform = name in math.expression.transform;
    var existing = Object(utils_object["f" /* hasOwnProperty */])(namespace, name) ? namespace[name] : undefined;

    var resolver = function resolver() {
      // collect all dependencies, handle finding both functions and classes and other special cases
      var dependencies = {};
      factory.dependencies.map(utils_factory["c" /* stripOptionalNotation */]).forEach(function (dependency) {
        if (Object(array["b" /* contains */])(dependency, '.')) {
          throw new Error('Factory dependency should not contain a nested path. ' + 'Name: ' + JSON.stringify(dependency));
        }

        if (dependency === 'math') {
          dependencies.math = math;
        } else if (dependency === 'mathWithTransform') {
          dependencies.mathWithTransform = math.expression.mathWithTransform;
        } else if (dependency === 'classes') {
          // special case for json reviver
          dependencies.classes = math;
        } else {
          dependencies[dependency] = math[dependency];
        }
      });
      var instance =
      /* #__PURE__ */
      factory(dependencies);

      if (instance && typeof instance.transform === 'function') {
        throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
      }

      if (existing === undefined || options.override) {
        return instance;
      }

      if (isTypedFunction(existing) && isTypedFunction(instance)) {
        // merge the existing and new typed function
        return typed(existing, instance);
      }

      if (options.silent) {
        // keep existing, ignore imported function
        return existing;
      } else {
        throw new Error('Cannot import "' + name + '": already exists');
      }
    }; // TODO: add unit test with non-lazy factory


    if (!factory.meta || factory.meta.lazy !== false) {
      Object(utils_object["h" /* lazy */])(namespace, name, resolver); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)

      if (existing && existingTransform) {
        _deleteTransform(name);
      } else {
        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {
          Object(utils_object["h" /* lazy */])(math.expression.mathWithTransform, name, function () {
            return namespace[name];
          });
        }
      }
    } else {
      namespace[name] = resolver(); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)

      if (existing && existingTransform) {
        _deleteTransform(name);
      } else {
        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {
          Object(utils_object["h" /* lazy */])(math.expression.mathWithTransform, name, function () {
            return namespace[name];
          });
        }
      }
    } // TODO: improve factories, store a list with imports instead which can be re-played


    importedFactories[name] = factory;
    math.emit('import', name, resolver);
  }
  /**
   * Check whether given object is a type which can be imported
   * @param {Function | number | string | boolean | null | Unit | Complex} object
   * @return {boolean}
   * @private
   */


  function isSupportedType(object) {
    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || Object(is["L" /* isUnit */])(object) || Object(is["j" /* isComplex */])(object) || Object(is["e" /* isBigNumber */])(object) || Object(is["o" /* isFraction */])(object) || Object(is["v" /* isMatrix */])(object) || Array.isArray(object);
  }
  /**
   * Test whether a given thing is a typed-function
   * @param {*} fn
   * @return {boolean} Returns true when `fn` is a typed-function
   */


  function isTypedFunction(fn) {
    return typeof fn === 'function' && _typeof(fn.signatures) === 'object';
  }

  function hasTypedFunctionSignature(fn) {
    return typeof fn === 'function' && typeof fn.signature === 'string';
  }

  function allowedInExpressions(name) {
    return !Object(utils_object["f" /* hasOwnProperty */])(unsafe, name);
  }

  function legacyFactoryAllowedInExpressions(factory) {
    return factory.path === undefined && !Object(utils_object["f" /* hasOwnProperty */])(unsafe, factory.name);
  }

  function factoryAllowedInExpressions(factory) {
    return factory.fn.indexOf('.') === -1 && // FIXME: make checking on path redundant, check on meta data instead
    !Object(utils_object["f" /* hasOwnProperty */])(unsafe, factory.fn) && (!factory.meta || !factory.meta.isClass);
  }

  function isTransformFunctionFactory(factory) {
    return factory !== undefined && factory.meta !== undefined && factory.meta.isTransformFunction === true || false;
  } // namespaces and functions not available in the parser for safety reasons


  var unsafe = {
    expression: true,
    type: true,
    docs: true,
    error: true,
    json: true,
    chain: true // chain method not supported. Note that there is a unit chain too.

  };
  return mathImport;
}
// CONCATENATED MODULE: ./src/core/config.js
var DEFAULT_CONFIG = {
  // minimum relative difference between two compared values,
  // used by all comparison functions
  epsilon: 1e-12,
  // type of default matrix output. Choose 'matrix' (default) or 'array'
  matrix: 'Matrix',
  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
  number: 'number',
  // number of significant digits in BigNumbers
  precision: 64,
  // predictable output type of functions. When true, output type depends only
  // on the input types. When false (default), output type can vary depending
  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
  // predictable is false, and returns `NaN` when true.
  predictable: false,
  // random seed for seeded pseudo random number generation
  // null = randomly seed
  randomSeed: null
};
// CONCATENATED MODULE: ./src/core/function/config.js


var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix

var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number

function configFactory(config, emit) {
  /**
   * Set configuration options for math.js, and get current options.
   * Will emit a 'config' event, with arguments (curr, prev, changes).
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *     math.config(config: Object): Object
   *
   * Examples:
   *
   *
   *     import { create, all } from 'mathjs'
   *
   *     // create a mathjs instance
   *     const math = create(all)
   *
   *     math.config().number                // outputs 'number'
   *     math.evaluate('0.4')                // outputs number 0.4
   *     math.config({number: 'Fraction'})
   *     math.evaluate('0.4')                // outputs Fraction 2/5
   *
   * @param {Object} [options] Available options:
   *                            {number} epsilon
   *                              Minimum relative difference between two
   *                              compared values, used by all comparison functions.
   *                            {string} matrix
   *                              A string 'Matrix' (default) or 'Array'.
   *                            {string} number
   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
   *                            {number} precision
   *                              The number of significant digits for BigNumbers.
   *                              Not applicable for Numbers.
   *                            {string} parenthesis
   *                              How to display parentheses in LaTeX and string
   *                              output.
   *                            {string} randomSeed
   *                              Random seed for seeded pseudo random number generator.
   *                              Set to null to randomly seed.
   * @return {Object} Returns the current configuration
   */
  function _config(options) {
    if (options) {
      var prev = Object(utils_object["i" /* mapObject */])(config, utils_object["a" /* clone */]); // validate some of the options

      validateOption(options, 'matrix', MATRIX_OPTIONS);
      validateOption(options, 'number', NUMBER_OPTIONS); // merge options

      Object(utils_object["b" /* deepExtend */])(config, options);
      var curr = Object(utils_object["i" /* mapObject */])(config, utils_object["a" /* clone */]);
      var changes = Object(utils_object["i" /* mapObject */])(options, utils_object["a" /* clone */]); // emit 'config' event

      emit('config', curr, prev, changes);
      return curr;
    } else {
      return Object(utils_object["i" /* mapObject */])(config, utils_object["a" /* clone */]);
    }
  } // attach the valid options to the function so they can be extended


  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;
  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function

  Object.keys(DEFAULT_CONFIG).forEach(function (key) {
    Object.defineProperty(_config, key, {
      get: function get() {
        return config[key];
      },
      enumerable: true,
      configurable: true
    });
  });
  return _config;
}
/**
 * Test whether an Array contains a specific item.
 * @param {Array.<string>} array
 * @param {string} item
 * @return {boolean}
 */

function contains(array, item) {
  return array.indexOf(item) !== -1;
}
/**
 * Find a string in an array. Case insensitive search
 * @param {Array.<string>} array
 * @param {string} item
 * @return {number} Returns the index when found. Returns -1 when not found
 */


function findIndex(array, item) {
  return array.map(function (i) {
    return i.toLowerCase();
  }).indexOf(item.toLowerCase());
}
/**
 * Validate an option
 * @param {Object} options         Object with options
 * @param {string} name            Name of the option to validate
 * @param {Array.<string>} values  Array with valid values for this option
 */


function validateOption(options, name, values) {
  if (options[name] !== undefined && !contains(values, options[name])) {
    var index = findIndex(values, options[name]);

    if (index !== -1) {
      // right value, wrong casing
      // TODO: lower case values are deprecated since v3, remove this warning some day.
      console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');
      options[name] = values[index]; // change the option to the right casing
    } else {
      // unknown value
      console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
    }
  }
}
// EXTERNAL MODULE: ./src/error/DimensionError.js
var DimensionError = __webpack_require__(6);

// EXTERNAL MODULE: ./src/error/IndexError.js
var IndexError = __webpack_require__(10);

// CONCATENATED MODULE: ./src/core/create.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }














/**
 * Create a mathjs instance from given factory functions and optionally config
 *
 * Usage:
 *
 *     const mathjs1 = create({ createAdd, createMultiply, ...})
 *     const config = { number: 'BigNumber' }
 *     const mathjs2 = create(all, config)
 *
 * @param {Object} [factories] An object with factory functions
 *                             The object can contain nested objects,
 *                             all nested objects will be flattened.
 * @param {Object} [config]    Available options:
 *                            {number} epsilon
 *                              Minimum relative difference between two
 *                              compared values, used by all comparison functions.
 *                            {string} matrix
 *                              A string 'Matrix' (default) or 'Array'.
 *                            {string} number
 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
 *                            {number} precision
 *                              The number of significant digits for BigNumbers.
 *                              Not applicable for Numbers.
 *                            {boolean} predictable
 *                              Predictable output type of functions. When true,
 *                              output type depends only on the input types. When
 *                              false (default), output type can vary depending
 *                              on input values. For example `math.sqrt(-4)`
 *                              returns `complex('2i')` when predictable is false, and
 *                              returns `NaN` when true.
 *                            {string} randomSeed
 *                              Random seed for seeded pseudo random number generator.
 *                              Set to null to randomly seed.
 * @returns {Object} Returns a bare-bone math.js instance containing
 *                   functions:
 *                   - `import` to add new functions
 *                   - `config` to change configuration
 *                   - `on`, `off`, `once`, `emit` for events
 */

function create(factories, config) {
  var configInternal = _extends({}, DEFAULT_CONFIG, config); // simple test for ES5 support


  if (typeof Object.create !== 'function') {
    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
  } // create the mathjs instance


  var math = mixin({
    // only here for backward compatibility for legacy factory functions
    isNumber: is["y" /* isNumber */],
    isComplex: is["j" /* isComplex */],
    isBigNumber: is["e" /* isBigNumber */],
    isFraction: is["o" /* isFraction */],
    isUnit: is["L" /* isUnit */],
    isString: is["I" /* isString */],
    isArray: is["b" /* isArray */],
    isMatrix: is["v" /* isMatrix */],
    isCollection: is["i" /* isCollection */],
    isDenseMatrix: is["n" /* isDenseMatrix */],
    isSparseMatrix: is["H" /* isSparseMatrix */],
    isRange: is["D" /* isRange */],
    isIndex: is["t" /* isIndex */],
    isBoolean: is["g" /* isBoolean */],
    isResultSet: is["G" /* isResultSet */],
    isHelp: is["s" /* isHelp */],
    isFunction: is["p" /* isFunction */],
    isDate: is["m" /* isDate */],
    isRegExp: is["F" /* isRegExp */],
    isObject: is["z" /* isObject */],
    isNull: is["x" /* isNull */],
    isUndefined: is["K" /* isUndefined */],
    isAccessorNode: is["a" /* isAccessorNode */],
    isArrayNode: is["c" /* isArrayNode */],
    isAssignmentNode: is["d" /* isAssignmentNode */],
    isBlockNode: is["f" /* isBlockNode */],
    isConditionalNode: is["k" /* isConditionalNode */],
    isConstantNode: is["l" /* isConstantNode */],
    isFunctionAssignmentNode: is["q" /* isFunctionAssignmentNode */],
    isFunctionNode: is["r" /* isFunctionNode */],
    isIndexNode: is["u" /* isIndexNode */],
    isNode: is["w" /* isNode */],
    isObjectNode: is["A" /* isObjectNode */],
    isOperatorNode: is["B" /* isOperatorNode */],
    isParenthesisNode: is["C" /* isParenthesisNode */],
    isRangeNode: is["E" /* isRangeNode */],
    isSymbolNode: is["J" /* isSymbolNode */],
    isChain: is["h" /* isChain */]
  }); // load config function and apply provided config

  math.config = configFactory(configInternal, math.emit);
  math.expression = {
    transform: {},
    mathWithTransform: {
      config: math.config
    }
  }; // cached factories and instances used by function load

  var legacyFactories = [];
  var legacyInstances = [];
  /**
   * Load a function or data type from a factory.
   * If the function or data type already exists, the existing instance is
   * returned.
   * @param {Function} factory
   * @returns {*}
   */

  function load(factory) {
    if (Object(utils_factory["b" /* isFactory */])(factory)) {
      return factory(math);
    }

    var firstProperty = factory[Object.keys(factory)[0]];

    if (Object(utils_factory["b" /* isFactory */])(firstProperty)) {
      return firstProperty(math);
    }

    if (!Object(utils_object["g" /* isLegacyFactory */])(factory)) {
      console.warn('Factory object with properties `type`, `name`, and `factory` expected', factory);
      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
    }

    var index = legacyFactories.indexOf(factory);
    var instance;

    if (index === -1) {
      // doesn't yet exist
      if (factory.math === true) {
        // pass with math namespace
        instance = factory.factory(math.type, configInternal, load, math.typed, math);
      } else {
        instance = factory.factory(math.type, configInternal, load, math.typed);
      } // append to the cache


      legacyFactories.push(factory);
      legacyInstances.push(instance);
    } else {
      // already existing function, return the cached instance
      instance = legacyInstances[index];
    }

    return instance;
  }

  var importedFactories = {}; // load the import function

  function lazyTyped() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return math.typed.apply(math.typed, args);
  }

  var internalImport = importFactory(lazyTyped, load, math, importedFactories);
  math["import"] = internalImport; // listen for changes in config, import all functions again when changed
  // TODO: move this listener into the import function?

  math.on('config', function () {
    Object(utils_object["l" /* values */])(importedFactories).forEach(function (factory) {
      if (factory && factory.meta && factory.meta.recreateOnConfigChange) {
        // FIXME: only re-create when the current instance is the same as was initially created
        // FIXME: delete the functions/constants before importing them again?
        internalImport(factory, {
          override: true
        });
      }
    });
  }); // the create function exposed on the mathjs instance is bound to
  // the factory functions passed before

  math.create = create.bind(null, factories); // export factory function

  math.factory = utils_factory["a" /* factory */]; // import the factory functions like createAdd as an array instead of object,
  // else they will get a different naming (`createAdd` instead of `add`).

  math["import"](Object(utils_object["l" /* values */])(Object(utils_object["c" /* deepFlatten */])(factories))); // TODO: deprecated since v6.0.0. Clean up some day

  var movedNames = ['type.isNumber', 'type.isComplex', 'type.isBigNumber', 'type.isFraction', 'type.isUnit', 'type.isString', 'type.isArray', 'type.isMatrix', 'type.isDenseMatrix', 'type.isSparseMatrix', 'type.isCollection', 'type.isRange', 'type.isIndex', 'type.isBoolean', 'type.isResultSet', 'type.isHelp', 'type.isFunction', 'type.isDate', 'type.isRegExp', 'type.isObject', 'type.isNull', 'type.isUndefined', 'type.isAccessorNode', 'type.isArrayNode', 'type.isAssignmentNode', 'type.isBlockNode', 'type.isConditionalNode', 'type.isConstantNode', 'type.isFunctionAssignmentNode', 'type.isFunctionNode', 'type.isIndexNode', 'type.isNode', 'type.isObjectNode', 'type.isOperatorNode', 'type.isParenthesisNode', 'type.isRangeNode', 'type.isSymbolNode', 'type.isChain', 'type.BigNumber', 'type.Chain', 'type.Complex', 'type.Fraction', 'type.Matrix', 'type.DenseMatrix', 'type.SparseMatrix', 'type.Spa', 'type.FibonacciHeap', 'type.ImmutableDenseMatrix', 'type.Index', 'type.Range', 'type.ResultSet', 'type.Unit', 'type.Help', 'type.Parser', 'expression.parse', 'expression.Parser', 'expression.node.AccessorNode', 'expression.node.ArrayNode', 'expression.node.AssignmentNode', 'expression.node.BlockNode', 'expression.node.ConditionalNode', 'expression.node.ConstantNode', 'expression.node.IndexNode', 'expression.node.FunctionAssignmentNode', 'expression.node.FunctionNode', 'expression.node.Node', 'expression.node.ObjectNode', 'expression.node.OperatorNode', 'expression.node.ParenthesisNode', 'expression.node.RangeNode', 'expression.node.RelationalNode', 'expression.node.SymbolNode', 'json.reviver', 'error.ArgumentsError', 'error.DimensionError', 'error.IndexError'];
  movedNames.forEach(function (fullName) {
    var parts = fullName.split('.');
    var path = Object(array["j" /* initial */])(parts);
    var name = Object(array["l" /* last */])(parts);
    var obj = Object(utils_object["k" /* traverse */])(math, path);
    Object(utils_object["h" /* lazy */])(obj, name, function () {
      Object(log["a" /* warnOnce */])("math.".concat(fullName, " is moved to math.").concat(name, " in v6.0.0. ") + 'Please use the new location instead.');
      return math[name];
    });
  });
  Object(utils_object["h" /* lazy */])(math.expression, 'docs', function () {
    throw new Error('math.expression.docs has been moved. ' + 'Please import via "import { docs } from \'mathjs\'"');
  });
  math.ArgumentsError = ArgumentsError["a" /* ArgumentsError */];
  math.DimensionError = DimensionError["a" /* DimensionError */];
  math.IndexError = IndexError["a" /* IndexError */];
  return math;
}

/***/ })
/******/ ]);
});;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.Number = function (element) {

    UF.UI.Number.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    
    if (typeof (math) == "object") {
        math.config({
            number: 'BigNumber'
        });
    }
    this._textbox;
    this._hidden;
    this._numberic;
    this._numbericInit;
    this._cultureName;

    this._currencySymbol = "";
    this._hiddenSymbolControl;
    this.sc = "&";

    this._allowIntegerLength; //输入整数的最大长度
    this._sourceMaxLength; //原始最大长度

    // Handler
    this._changeHandler;
    this._keypressHandler;
    this._keydownHandler;
    this._focusHandler;
    this._blurHandler;
    this._selectstartHandler;
    this._pasteHandler;
    this._showInvalidMessage = null; //【是否显示】超出赋值范围信息提示
    this._isShowedInvalidMessage = null; //【是否已经显示】超出赋值范围信息提示
    this._isAltKeyEnabled = true; //Add 4 Alt键延时  

    this._isOnChangedFired = false; //用来标识是不是onchange。如果是onchange，则在OnValueChanged和onchange中选择一个时机晚的地方触发OnValueChanged4P即可。

    this.mschangeFired = false;
}

UF.UI.Number.prototype = {

    initialize: function () {
        UF.UI.Number.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        this._textbox = this._element.children[0];
        //this._hidden = $get(this.get_id() + "_H");//gct:优化后去掉

        for (var i = this._element.children.length; i > 0; i--) {
            if (this._element.children[i - 1].id == (this.get_id() + "_HV")) {
                this._hidden = this._element.children[i - 1];
                break;
            }
        }

        this.tbClassName = this._element.getAttribute("TBClassName");
        if (this.tbClassName == null)
            this.tbClassName = NumberTemplate.TBClassName;

        // Create delegates Attach events
        this._changeHandler = Function.createDelegate(this, this.changePD);
        $addHandler(this._textbox, "change", this._changeHandler);

        this._keypressHandler = Function.createDelegate(this, this.input_onkeypress);
        $addHandler(this._textbox, "keypress", this._keypressHandler);

        this._keydownHandler = Function.createDelegate(this, this.input_onkeydown);
        $addHandler(this._textbox, "keydown", this._keydownHandler);

        this._blurHandler = Function.createDelegate(this, this.input_onblur);
        $addHandler(this._textbox, "blur", this._blurHandler);

        this._pasteHandler = Function.createDelegate(this, this.input_onpaste);
        $addHandler(this._textbox, "paste", this._pasteHandler);

        this.initControl();
        var isDisplay = this._element.cusAttr("R") == "y" ? true : false;
        this.DisplayRequiredFlag(isDisplay);
        this.set_IsInitComlete(true); //gct20080917:设置初始化完成标志，用于脏数据保存提示
    },
    dispose: function () {
        // TODO: add your cleanup code here
        if (this._changeHandler) {
            $removeHandler(this._textbox, "change", this._changeHandler);
            this._changeHandler = null;
        }
        if (this._keypressHandler) {
            $removeHandler(this._textbox, "keypress", this._keypressHandler);
            this._keypressHandler = null;
        }
        if (this._keydownHandler) {
            $removeHandler(this._textbox, "keydown", this._keydownHandler);
            this._keydownHandler = null;
        }
        if (this._focusHandler) {
            $removeHandler(this._textbox, "focus", this._focusHandler);
            this._focusHandler = null;
        }
        if (this._blurHandler) {
            $removeHandler(this._textbox, "blur", this._blurHandler);
            this._blurHandler = null;
        }
        if (this._selectstartHandler) {
            $removeHandler(this._textbox, "selectstart", this._selectstartHandler);
            this._selectstartHandler = null;
        }
        if (this._pasteHandler) {
            $removeHandler(this._textbox, "paste", this._pasteHandler);
            this._pasteHandler = null;
        }
        if (this.curHandler != null)
            this.curHandler = null; //gct20091126：一定要释放，否则导致IE内存泄漏
        this._textbox = null;
        this._hidden = null;
        this._numberic = null;
        this._hiddenSymbolControl = null;
        this._showInvalidMessage = null;
        this._isAltKeyEnabled = null;

        UF.UI.Number.callBaseMethod(this, 'dispose');
    },

    initControl: function () {
        //this._textbox.style.imeMode="disabled";
        this._showInvalidMessage = this._element.cusAttr('ShowInvalidMessage');
        if (this._showInvalidMessage == null)
            this._showInvalidMessage = NumberTemplate.ShowInvalidMessage;

        this.get_numberic();
        //this.setTextBoxValue();
        $(this._textbox).attr('maxLength', 999999999);
        this._sourceMaxLength = $(this._textbox).attr('maxLength');
        //this._allowIntegerLength = $(this._textbox).attr('maxLength') - parseInt(this.get_Scale(), 10);
        this._allowIntegerLength = 999999999;
        //如果只读状态双击不能再选定textbox内容
        //原因:如果程序员自己计算的值赋给了控件,控件在只读的情况下双击会把没有格式化后的值显示出来
        var readOnly = this._element.cusAttr('ReadOnly');
        if (!readOnly) {
            readOnly = NumberTemplate.ReadOnly == "true";
        }
        if (readOnly) {
            $(this._textbox).attr('readOnly', true);
            this._selectstartHandler = Function.createDelegate(this, this.selectStart);
            $addHandler(this._textbox, "selectstart", this._selectstartHandler);
        }
        this._focusHandler = Function.createDelegate(this, this.input_onfocus);
        $addHandler(this._textbox, "focus", this._focusHandler);
        if ($(this._textbox).attr("onchange")) {
            $(this._textbox).bind("change", function () {
                window._TextBoxFirePostBack = true;
            });
        }
    },
    //event text changed   
    add_onchange: function (handler) {
        this.get_events().addHandler("onchange", handler);
    },
    remove_onchange: function (handler) {
        this.get_events().removeHandler("onchange", handler);
    },
    raiseonchange: function (args) {
        var eh = this.get_events().getHandler("onchange");
        if (eh) {
            eh(this, args);
        }
    },
    //event value changed
    add_OnValueChanged: function (handler) {
        this.get_events().addHandler("OnValueChanged", handler);
    },
    remove_OnValueChanged: function (handler) {
        this.get_events().removeHandler("OnValueChanged", handler);
    },
    raiseOnValueChanged: function (args) {
        var eh = this.get_events().getHandler("OnValueChanged");
        if (eh) {
            eh(this, args);
        }
        //暂时放在OnValueChange的最后，提供一个个性化处理时机。onchange暂时没有这样的时机，也不需要，因为onchange触发，则OnValueChange一定会触发
        this.AfterRaiseOnValueChanged4Personal();
    },
    //event value changed
    add_OnValueChanged4P: function (handler) {
        this.get_events().addHandler("OnValueChanged4P", handler);
    },
    remove_OnValueChanged4P: function (handler) {
        this.get_events().removeHandler("OnValueChanged4P", handler);
    },
    raiseOnValueChanged4P: function (args) {
        var eh = this.get_events().getHandler("OnValueChanged4P");
        if (eh) {
            this.curHandler = eh; //记录eh到sender中，以便在BasicInfor的CanEvalPersonalJS()中使用curHandler获取对eh的引用。this在运行时不是eh
            eh(this, args);
        }
        //暂时放在OnValueChange的最后，提供一个个性化处理时机。onchange暂时没有这样的时机，也不需要，因为onchange触发，则OnValueChange一定会触发
        this.AfterRaiseOnValueChanged4Personal();
    },
    add_onkeypress: function (handler) {
        this.get_events().addHandler("onkeypress", handler);
    },
    remove_onkeypress: function (handler) {
        this.get_events().removeHandler("onkeypress", handler);
    },
    raiseonkeypress: function (handler) {
        var eh = this.get_events().getHandler("onkeypress");
        if (eh) {
            eh(this.args);
        }
    },
    // TODO: (Step 2) Add your property accessors here
    selectStart: function () {
        event.cancelBubble = false;
        $Event(event).preventDefault();
    },
    GetHiddenControl: function () {
        if (this._hiddenSymbolControl == null) {
            //this._hiddenSymbolControl = this.get_element().document.all(this.get_element().HiddenName);//gct:优化后去掉
            for (var i = this._element.children.length; i > 0; i--) {
                if (this._element.children[i - 1].id == (this.get_id() + "_HF")) {
                    this._hiddenSymbolControl = this._element.children[i - 1];
                    break;
                }
            }
        }
        return this._hiddenSymbolControl;
    },
    ReSetHiddenSymbolValue: function () {
        //this.GetHiddenControl().value=this.get_CurrencySymbol()+this.sc + this.get_RoundValue() + this.sc + this.get_RoundValue() + this.sc + this.get_Scale();
        this.GetHiddenControl().value = this.get_CurrencySymbol() + this.sc + this.get_RoundType() + this.sc + this.get_RoundValue() + this.sc + this.get_Scale();
    },

    get_Type: function () {
        return ControlType.Numberic;
    },
    get_numberic: function () {
        if (this._numbericInit)
            return this._numberic;
        var val = this._element.cusAttr("V");
        if (!val || val == "") {
            //this._numberic=null;
            this._numberic = "";
        } else {
            this._numberic = Number.parseEx(val, this.getDecimalSeparator()); //Number.parseEx()的返回值可能有三种情况。返回值1：""；返回值2：NaN；返回值3：标准数字。
            if (isNaN(this._numberic)) {
                //this._numberic=null;
                this._numberic = "";
            }
        }

        this._numbericInit = true;
        return this._numberic;
    },
    get_ReadOnly: function () {
        return this._element.cusAttr("readOnly");
    },

    set_ReadOnly: function (isReadOnly) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false") //权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false") //权限不可编辑
            return;
        if (!this.get_Enabled()) //由于客户端区分ReadOnly和Enabled状态，所以在设置ReadOnly的时候，要优先考虑Enabled属性
            return;
        isReadOnly = ToBoolean(isReadOnly);
        this._element.cusAttr('readOnly', isReadOnly);
        //this._textbox.readOnly = ToBoolean(isReadOnly);
        $(this._textbox).attr('ReadOnly', isReadOnly); //失去焦点时被用到
        // var ele = this.get_element();
        if (isReadOnly) {
            if (!this._selectstartHandler) {
                this._selectstartHandler = Function.createDelegate(this, this.selectStart);
                $addHandler(this._textbox, "selectstart", this._selectstartHandler);
            }
            if (this._focusHandler) {
                $removeHandler(this._textbox, "focus", this._focusHandler);
                this._focusHandler = null;
            }
            this._textbox.className = this.tbClassName_R;
            this._element.className = UIControlClass.UFTextBox.ReadOnlyCssClass;
        } else {
            if (this._selectstartHandler) {
                $removeHandler(this._textbox, "selectstart", this._selectstartHandler);
                this._selectstartHandler = null;
            }
            if (!this._focusHandler) {
                this._focusHandler = Function.createDelegate(this, this.input_onfocus);
                $addHandler(this._textbox, "focus", this._focusHandler);
            }
            this._textbox.className = this.tbClassName;
            this._element.className = UIControlClass.UFTextBox.CssClass;
        }
        this.set_HDValue("ReadOnly", isReadOnly.toString().toLowerCase());
        //gct20081203:提供一个设置只读后的个性化处理时机。
        this.AfterSetReadOnly4Personal();
    },

    set_Width: function (width) {
        this._element.style.width = width + 'px';
        this._textbox.style.width = (width - 2) + 'px';
    },

    FireChange: function () {
        this.input_onblur();
    },

    SetFocus: function () {
        this._textbox.focus();
        Basic.SetFocus(this._textbox);

    },

    get_CurrencySymbol: function () {
        if (this._element.cusAttr("CS"))
            return this._element.cusAttr("CS");
        return "";
    },

    //参数isInit的作用，如果只是初始化控件，并不是导致数据的重新计算，可以使用isInit参数。
    set_CurrencySymbol: function (val, isInit) {
        if (this._element.cusAttr('CS') == val) {
            return;
        }
        this._element.cusAttr('CS', val);
        if (!isInit) {
            this.setTextBoxValue();
            this.ReSetHiddenSymbolValue();
        }
    },

    get_Scale: function () {
        var scale = 2;
        var formatStr = this.get_FormatString();
        if (formatStr != null && formatStr.length > 1) {
            scale = formatStr.slice(1);
        }
        return scale;
    },

    //参数isInit的作用，如果只是初始化控件，并不是导致数据的重新计算，可以使用isInit参数。
    set_Scale: function (val, isInit) {
        var scale = parseInt(val, 10);
        if (isNaN(scale)) scale = 2;
        var formatStr = this.get_FormatString();
        if (formatStr.length == 0) {
            formatStr = "D";
        } else {
            if (formatStr.slice(0, 1).toLowerCase() == "p")
                scale = scale - 2;
            formatStr = formatStr.slice(0, 1) + scale.toString();
        }
        if (!isInit) {
            //精度变化会来了业务数据的变化(两种方式处理:1.清空 2.精度变大当数据已经达到最大允许长度移动小数点)
            //两种方法都会有问题;        
            var dispersion = this.JudgeOutOfMaxLength(scale);
            if (dispersion > 0)
                this.MoveDot(dispersion);
        }

        this.set_FormatString(formatStr, isInit);
        //在set_FormatString中，已经有了setTextBoxValue，就不处理下面的
        //       if(!isInit)
        //        {
        //            this.setTextBoxValue();
        //            this.ReSetHiddenSymbolValue(); 
        //        }
        this._allowIntegerLength = this._sourceMaxLength - parseInt(val, 10);
    },
    //判断精度变化时返回超出位数
    JudgeOutOfMaxLength: function (newScale) {
        var oldScale = parseInt(this.get_Scale());
        var intPart = this._numberic.split(".")[0];
        var dotDispersion = 0;

        if (intPart.indexOf("-") > -1)
            dotDispersion = (intPart.length + (newScale - oldScale)) - this._allowIntegerLength - 1;
        else
            dotDispersion = (intPart.length + (newScale - oldScale)) - this._allowIntegerLength;
        return dotDispersion;
    },
    //超出允许输入范围时移动小数点位置
    MoveDot: function (dispersion) {
        if (this._numberic.indexOf(".") > -1) {
            //如果是实数
            var dotLocal = this._numberic.indexOf(".");
            var intPart = this._numberic.substr(0, this._numberic.indexOf('.'));
            var realPart = this._numberic.substr(this._numberic.indexOf('.') + 1);
            var movedIntPart = intPart.substr(0, intPart.length - dispersion) + "." + intPart.substr(intPart.length - dispersion, intPart.length);
            this._numberic = movedIntPart + realPart;
        } else {
            //整数时
            var intPart = this._numberic.substr(0, this._numberic.length - dispersion);
            var realPart = this._numberic.substr(this._numberic.length - dispersion, this._numberic.length);
            this._numberic = intPart + "." + realPart;
        }
    },
    get_RoundValue: function () {
        //如果为空默认4舍5入
        //if(!this.get_element().getAttribute('RV'))        
        //this.get_element().getAttribute('RV')有可能正好为0，所以if(!this.get_element().getAttribute('RV'))会认为是true        
        //javascript中0==""为true,isNaN("")=false
        //if((this.get_element().getAttribute('RV')!=0) && (this.get_element().getAttribute('RV')==null||this.get_element().getAttribute('RV')==""||isNaN(this.get_element().getAttribute('RV'))))
        if (this._element.cusAttr('RV') == null) {
            //此处判断与ReSetHiddenSymbolValue方法有关系
            roundValue = 5; //默认4舍5入
            this._element.cusAttr('RV', roundValue);
        }
        //else if(this.get_element().getAttribute('RV')=="" || isNaN(this.get_element().getAttribute('RV')))//javascript中0==""，所以当RV为0的时候，会被置成4，这是不对的
        else if (isNaN(this._element.cusAttr('RV'))) {
            //此处判断与ReSetHiddenSymbolValue方法有关系
            roundValue = 5; //默认4舍5入
            this._element.cusAttr('RV', roundValue);
        }
        return this._element.cusAttr('RV');
    },
    //参数isInit的作用，如果只是初始化控件，并不是导致数据的重新计算，可以使用isInit参数。
    set_RoundValue: function (val, isInit) {
        var roundValue = parseInt(val, 10);
        if (isNaN(roundValue)) roundValue = 5; //默认4舍5入
        if (this._element.cusAttr('RV') == roundValue)
            return;
        this._element.cusAttr('RV', roundValue)
        if (!isInit) {
            this.setTextBoxValue();
            this.ReSetHiddenSymbolValue();
        }
    },

    get_RoundType: function () {
        //ssfxcore.debug.js中已经对默认值做了处理
        return this._element.cusAttr('RT');
    },

    //参数isInit的作用，如果只是初始化控件，并不是导致数据的重新计算，可以使用isInit参数。
    set_RoundType: function (val, isInit) {
        var roundType = parseInt(val, 10);
        if (isNaN(roundType)) {
            roundType = this.get_RoundType(); //默认按值舍入          
        }
        if (this._element.cusAttr('RT') == roundType)
            return;
        this._element.cusAttr('RT', roundType);
        if (!isInit) {
            this.ReSetHiddenSymbolValue();
            this.setTextBoxValue();
        }
    },

    get_Value: function () {
        return this._hidden.value;
    },

    set_Value: function (val) {
        if (val.trim)
            val = val.trim();
        var tmpNum = Number.parseEx(val, this.getDecimalSeparator()); //Number.parseEx()的返回值可能有三种情况。返回值1：""；返回值2：NaN；返回值3：标准数字。
        if (!isNaN(tmpNum)) {
            if (this.validInputValue(tmpNum)) //是有效数字或者""(可空情况下""也是有效数字)。
            {
                this._numberic = tmpNum;
                this._numbericInit = true;
                //RemoveErrorMsgElment(GetTopPanel().id,GetTopPanel());//GetTopPanel()没有id
                //RemoveErrorMsgElment(this.get_element().id,this.get_element());
                if (this._isShowedInvalidMessage == true) //如果已经显示过了，这时又赋值正确就去掉错误状态
                {
                    //window.status = "";
                    RemoveErrorMsgElment(this.get_id(), this._element);
                    this._isShowedInvalidMessage = false;
                }
            } else //超出赋值的范围走这里
            {
                //showErrorMsg("超出范围！"+(new Date()).toString("yyyy-MM-dd HH:mm:ss"));
                /* val !== "" ，如果数值控件是参照返回的字段情况下，当参照删除时，
                 *直接赋空串，提示用问题，所以平台所有赋空串的异常提示
                 * add by lzhm 20100824 */
                if (this._showInvalidMessage != null && this._showInvalidMessage.toLowerCase() == "true" && val !== "") {
                    //CreateErrorMsgElment(this.get_element().id,"该值不在规定数值范围内，恢复上次合法的值！");
                    var now = new Date();
                    var m = now.getMonth() + 1;
                    //var datetime=now.getYear()+"-"+m.toString()+"-"+now.getDate()+" "+now.getHours()+":"+now.getMinutes()+":"+now.getSeconds();
                    var time = now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds();
                    //===by zzq 继续读取属性值兼容修改
                    var errInfo = Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_NumberOverFlow.replace(/\$Time\$/g, time);
                    //var errInfo = Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_NumberOverFlow.replace(/\$Time\$/g,"");//去掉时间，节省window.status长度
                    if (this._element.cusAttr('LC') == null || this._element.cusAttr('LC') == "" || $ID(this._element.cusAttr('LC')) == null) {
                        errInfo = errInfo.replace(/\$Title\$/g, "");
                    } else {
                        errInfo = errInfo.replace(/\$Title\$/g, $ID(this._element.cusAttr('LC')).title);
                    }
                    errInfo = errInfo.replace(/\$ID\$/g, this.get_id());
                    errInfo = errInfo.replace(/\$MaxValue\$/g, this.get_MaxValue().toString());
                    errInfo = errInfo.replace(/\$MinValue\$/g, this.get_MinValue().toString());
                    //window.status = Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_NumberOverFlow.replace(/\$Time\$/g,datetime);
                    //window.status = errInfo;
                    this.ShowWarnMsg(errInfo);
                    //window.status = "您于"+datetime +" 输入的数值不在规定数值范围内，已恢复上次合法的数值！";
                    this._isShowedInvalidMessage = true;
                }
            }
        }

        var ret = this.setTextBoxValue(); //由当前的this._numberic设置带格式的显示值和this._hidden.value。
        if (ret == true) {
            return true;
        }
    },

    get_Text: function () {
        if (this._numberic == null || this._numberic.toString() == "") return "&";
        //if(this._numberic==0) return "0&0";
        if (this._element.cusAttr('TP') == "FixedPoint") {
            //处理FixedPoint类型下的负数情况和grid中取得一致
            //在ssforge中负数返回的是负数表示形式和正值
            if (parseFloat(this._numberic) < 0)
                return this._numberic.toString() + "&" + this._numberic.toString().substr(1);
            else
                return this._numberic.toString() + "&" + this._numberic.toString();
        } else {
            var resultText = Number$toFormattedStringEx(this._numberic, this.get_CurrencySymbol(), this.get_FormatString(), this.get_Culture().toLowerCase(), this.get_RoundType(), this.get_RoundValue());
            return resultText;
        }
    },

    ShowWarnMsg: function (msg) {
        if (this._element.parentNode.className.split(" ")[0] == "tbc") {
            showStatus(msg);
        } else {
            CreateWarnMsg(msg, this._element);
        }
    }, //end ShowWarnMsg

    GetTextBoxValue: function () {
        return this._textbox.value;
    },

    set_Text: function (val) {
        this.set_Value(val);
    },

    get_FormatString: function () {
        return this._element.cusAttr('FS');
    },
    set_FormatString: function (val, isInit) {
        if (this._element.cusAttr('FS') == val)
            return;
        this._element.cusAttr('FS', val);
        if (!isInit) {
            this.setTextBoxValue();
            this.ReSetHiddenSymbolValue();
        }
    },
    get_Culture: function () {
        // if (this._cultureName == null) {
        //     this._cultureName = getCultureName() || "zh-CN";
        // }
        // return this._cultureName;
        return getCultureName();
    },
    //mahx 这方法查了一下，根本没用，害人不浅
    set_Culture: function (val) {
        this._cultureName = val;
    },
    get_NumberFormat: function () {
        return Sys.CultureInfo[this.get_Culture().toLowerCase()].NumberFormat;
    },
    get_MaxValue: function () {
        var maxValue = this._element.cusAttr('MaxV');

        if (maxValue == null) //取模板中的默认值
        {
            var dt = this._element.cusAttr('DT');
            if (dt) {
                if (dt.toString() == "8") //decimal
                {
                    maxValue = DATATYPE_DECIMAL_Template.MaxV; //"0"
                } else if (dt.toString() == "9") //Int16
                {
                    minValue = DATATYPE_INT16_Template.MaxV; //"32767"
                } else if (dt.toString() == "2") //Int
                {
                    minValue = DATATYPE_INT_Template.MaxV; //"2147483647"
                } else if (dt.toString() == "7") //Int64
                {
                    minValue = DATATYPE_INT64_Template.MaxV; //"9999999999999998"
                }
            }
        }

        if (isNaN(parseFloat(maxValue)))
            return Number.MAX_VALUE; //default max value
        else
            return maxValue;
    },
    set_MaxValue: function (maxValue) {
        if (!isNaN(parseFloat(maxValue)))
            this._element.cusAttr('MaxV', maxValue);
    },
    get_MinValue: function () {
        var minValue = this._element.cusAttr('MinV');

        if (minValue == null) //取模板中的默认值
        {
            var dt = this._element.cusAttr('DT');
            if (dt) {
                if (dt.toString() == "8") //decimal
                {
                    minValue = DATATYPE_DECIMAL_Template.MinV; //"0"
                } else if (dt.toString() == "9") //Int16
                {
                    minValue = DATATYPE_INT16_Template.MinV; //"-32768"
                } else if (dt.toString() == "2") //Int
                {
                    minValue = DATATYPE_INT_Template.MinV; //"-2147483648"
                } else if (dt.toString() == "7") //Int64
                {
                    minValue = DATATYPE_INT64_Template.MinV; //"-9999999999999998"
                }
            }
        }
        //Number是javascript提供的对象
        //Number.MIN_VALUE 为正，最接近2的数 5e-324
        //Number.MAX_VALUE 为正最大
        //-Number.MAX_VALUE 为负最小

        if (isNaN(parseFloat(minValue)))
            return -Number.MAX_VALUE; //default min value
        else
            return minValue;
    },
    set_MinValue: function (minValue) {
        if (!isNaN(parseInt(minValue, 10)))
            this._element.cusAttr('MinV', minValue);
    },
    setTextBoxValue: function () {
        var old_value = $(this._hidden).val();
        //setTextBoxValue()方法返回格式化后的字符串和舍入后的值
        //将实际值赋给_numberic以备get_Text()返回格式化后的字符串("$123.124")和
        //转换后的实际值("123.123000") setTextBoxValue()方法返回格式化后的字符串和舍入后的值
        //this._numberic必须在get_Text()之前赋值(setValue方法中已经被赋值)
        var numberValues = this.get_Text().split("&");
        //==by zzq 兼容性设值
        //  this._textbox.value = (this._numberic == 0 && this.get_element().getAttribute('ZN') == "true") ? "" : numberValues[0];
        $(this._textbox).val((this._numberic == 0 && this._element.cusAttr('ZN') == "true") ? "" : numberValues[0]);
        if (this._numberic != null && parseFloat(this._numberic.toString()) < 0) //初始化的时候this._numberic可能为null
        {
            this._numberic = "-" + numberValues[1];
            //this._hidden.value = ;
            $(this._hidden).val(this._numberic);
        } else {
            //当返回的numberValue[1]为null时设置控件的value(this._hidden)为空串;
            //否则数据收集的值时0
            if (numberValues[1]) {
                this._numberic = numberValues[1];
                //this._hidden.value = this._numberic;
                $(this._hidden).val(this._numberic);
            } else {
                this._numberic = "";
                //this._hidden.value = "";
                $(this._hidden).val(this._numberic);
            }
        }
        if ($(this._hidden).val() != old_value) {
            this.fireValueChangeEvent();
            if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //数字控件在初始化的时候就调用了setTextBoxValue()，设置脏数据标识应该在控件初始化完成才有效。
                this.set_IsValueChanged(true);
            if (this._isOnChangedFired != true) //如果不是onchange，那么就需要触发fireValueChange4PEvent，如果是onchange，这里不触发，在onchange中会触发的。（这样才能保证最后再触发个性化的事件）
                this.fireValueChange4PEvent();
            return true; //有返回值true，表示确实发生了赋值操作（前后值不同）并触发ValueChange事件
        } else {
            if (this.get_IsRaiseEvent()) {
                this.AfterRaiseOnValueChanged4Personal(); //yangkuna_20100613_设置值后，即使没有发生变化也触发个性化同步事件
            }
        }
    },
    formatTextBoxValue: function () {
        var old_value = this._hidden.value;
        //setTextBoxValue()方法返回格式化后的字符串和舍入后的值
        //将实际值赋给_numberic以备get_Text()返回格式化后的字符串("$123.124")和
        //转换后的实际值("123.123000") setTextBoxValue()方法返回格式化后的字符串和舍入后的值
        //this._numberic必须在get_Text()之前赋值(setValue方法中已经被赋值)
        var numberValues = this.get_Text().split("&");
        this._textbox.value = (this._numberic == 0 && this._element.cusAttr('ZN') == "true") ? "" : numberValues[0];

        if (this._numberic != null && parseFloat(this._numberic.toString()) < 0) //初始化的时候this._numberic可能为null
        {
            this._numberic = "-" + numberValues[1];
            this._hidden.value = this._numberic;
        } else {
            //当返回的numberValue[1]为null时设置控件的value(this._hidden)为空串;
            //否则数据收集的值时0
            if (numberValues[1]) {
                this._numberic = numberValues[1];
                this._hidden.value = this._numberic;
            } else {
                this._numberic = "";
                this._hidden.value = "";
            }
        }
    },

    fireChangeEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        //args.value = this._textbox.value;
        args.value = $(this._textbox).val();
        this.raiseonchange(args);
    },
    fireValueChangeEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = $(this._hidden).val();//this._hidden.value;
        this.raiseOnValueChanged(args);
    },
    fireValueChange4PEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = $(this._hidden).val();//this._hidden.value;
        this.raiseOnValueChanged4P(args);
    },
    changeGroupSeparatorToSpace: function (value) {
        if (!value) {
            return value;
        }
        var groupS = this.getGroupSeparator();
        var decimalSeparator = this.getDecimalSeparator();
        var valStr = value;
        if (groupS) {
            var pattern = new RegExp("\\" + groupS, "g");
            valStr = value.replace(pattern, "");
        }
        // valStr = value.replace(decimalSeparator, ".")
        return valStr;
    },
    get_control_type: function () {
        return this._element.cusAttr("tp");
    },
    getDecimalSeparator: function () {
        var type = this._element.cusAttr("tp");
        var culture = this.get_Culture().toLowerCase()
        return type == "Currency" ? Sys.CultureInfo[culture].NumberFormat.CurrencyDecimalSeparator : Sys.CultureInfo[culture].NumberFormat.NumberDecimalSeparator;
    },
    getGroupSeparator: function () {
        var type = this._element.cusAttr("tp");
        var culture = this.get_Culture().toLowerCase()
        return type == "Currency" ? Sys.CultureInfo[culture].NumberFormat.CurrencyGroupSeparator : Sys.CultureInfo[culture].NumberFormat.NumberGroupSeparator;
    },
    changePD: function () {
        this._isOnChangedFired = true;

        //此时一定是编辑态的value
        //this._textbox.value是当前的编辑值，this._numberic是原先的编辑值
        //yangkuna_数字值没发生变化则不用触发onchange事件_新值和旧值有一个为空且不都为空时也应该触发change事件
        //去掉数值前的币种符号￥/$等...
        var valStr = $(this._textbox).val().replace(this.get_CurrencySymbol(), "");
        //去掉千分符，比如345,000转换成 345000
        valStr = this.changeGroupSeparatorToSpace(valStr)
        //去掉组分隔符
        var patternCurrencyGroupSeparator = this.getGroupSeparator();
        valStr = valStr.replace(patternCurrencyGroupSeparator, "");
        //数值类型，增加表达式计算功能，当小数点为非"."号时，比如说是",",eval()时会解析成0，所以小数点分隔符需要强制转换成"."
        if(this.getDecimalSeparator() != '.'){
            var point = new RegExp(this.getDecimalSeparator(), "g");
            valStr = valStr.replace(point, ".");
        }
        //zhaolian_2019_使可解析表达式 比如input框的值为 (3+2)*4
        var reg = new RegExp("^[0-9]*$");
        reg.test(valStr) ? valStr = parseInt(valStr) : valStr;
        try {
            var resultText = Number$toFormattedStringEx(this._numberic, this.get_CurrencySymbol(), this.get_FormatString(), this.get_Culture().toLowerCase(), this.get_RoundType(), this.get_RoundValue());
            var numberValues = resultText.split('&');
            if (valStr == numberValues[0] || valStr == numberValues[1]) {
                valStr = valStr;
            } else {
                if (typeof (math) == "object") {
                    valStr = math.evaluate(valStr).toString();
                }else{
                    valStr = eval(valStr);
                }
                if (isNaN(valStr)) {
                    valStr = '';
                }
            }
        } catch (err) {
            valStr = this._numberic;
        }
        $(this._textbox).val(valStr);
        var isChanged = (this._textbox.value != this._numberic) && (Number.parseEx(valStr, this.getDecimalSeparator()) * 1 != this._numberic * 1);
        if ((this._textbox.value == "" || this._numberic == "") && this._textbox.value != this._numberic) { isChanged = true; }
        if (isChanged) {
            var rChange = this.set_Value(valStr);
            if (window._NotFirePostBackControl) { window._NotFirePostBackControl = null; }
            if (rChange) {
                //this.FireChange();         //已经有blur事件了，为什么还要在change事件中去触发blur事件，暂时去掉
                this.fireChangeEvent(); //12编辑成12.0也算change，但是不触发valuechange，因为对this._numberic和this._hidden.value来没有变化(都认为是12)。
                this.fireValueChange4PEvent(); //个性化的事件应该在最后执行
                if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                    this.set_IsChanged(true);
            } else {
                var changeEv = this._textbox.getAttribute("onchange");
                if (changeEv && changeEv.toString().indexOf("__doPostBack") >= 0) {
                    window._NotFirePostBackControl = this._textbox.id.replace(/_/g, "$");
                }
            }
        }

        this._isOnChangedFired = false;
        this.mschangeFired = true;
    },

    fireEvent: function () {
        var args = new UF.UI.ChangeEventArgs();
        args.keyCode = event.keyCode;
        this.raiseonkeypress(args);
    }, //end fireEvent

    input_onkeydown: function () {

        if (this._element.cusAttr('ReadOnly')) //防止只读状态下，鼠标点击控件后，响应keydown事件
        {
            $Event(event).preventDefault();
            return;
        }
        var k = event.keyCode;
        //k==18验证用户是否要按ALT+N进行连续新增;
        //if(k==KeyCode.down||k==KeyCode.up||event.altKey||k==KeyCode.tab) this.input_onblur(); 
        if (event.altKey) {
            /*Add 4 Alt键延时 2007-12-29 ============================================= start*/
            if (this._isAltKeyEnabled) {

                this._isAltKeyEnabled = false;
                window.setTimeout(function () {
                    this._isAltKeyEnabled = true;
                }, 3000); //延时3秒，
            } else {
                if (k != 74 && k !== 187) { //放出 alt + J , alt= 给Grid
                    $Event(event).stopPropagation();
                    $Event(event).preventDefault();
                }
                return;
            }
            /*Add 4 Alt键延时 2007-12-29 ================================================ end*/
            var valStr = this.changeGroupSeparatorToSpace($(this._textbox).val())
            if (this._numberic != Number.parseEx(valStr, this.getDecimalSeparator())) {//this._textbox.value) {
                var ret = this.set_Value(valStr);//===by zzq//mahx 去掉this.set_Value(eval($(this._textbox).val()));eval会把逗号当做分词，会被截断，很危险。
                //下面触发onchange事件是针对Alt+S做的处理
                if (ret == true) {
                    //如果Alt被按下的时候，textbox上有onchange事件，那么要先触发onchange事件
                    this.fireChangeEvent();
                    if (this._textbox.onchange != null)
                        this._textbox.fireEvent("onchange");
                }
            }
            this.input_onblur();
        }
    },

    input_onkeypress: function () {
        if (this._element.cusAttr('ReadOnly')) //防止只读状态下，鼠标点击控件后，响应keydown事件
        {
            $Event(event).preventDefault();
            return;
        }
        this.fireEvent();
        var k = event.keyCode;
        var nf = this.get_NumberFormat();
        var decimalSeparator = ",";
        var negativeSign = "-";
        if (nf) {
            decimalSeparator = nf.NumberDecimalSeparator;
            negativeSign = nf.NegativeSign;
        }
        var dataType = this._element.cusAttr('DT');
        //zhaolian
        //检查是否允许输入的范围0-9 （(40) )(41) *(42) +(43) -(45) .(46) /(47) 
        if (!((k >= 40 && k <= 57) || (k == 37))) {
            //不再允许输入的范围内，直接返回
            $Event(event).preventDefault();
            return;
        }
        //检查是否允许输入负号"-"
        if (dataType && (dataType == DataType.INT || dataType == DataType.Int16 || dataType == DataType.Int64) && this._textbox.selectionStart == 0) //整数类型
        {
            if (!((k > 47 && k < 58) || k == 45 || k == 37)) //即k=45负号
            {
                $Event(event).preventDefault();
                return;
            }
        }

        /**********************************************************************************************/

        //每次按键的时候都做一次检查，生成当前的maxLength
        this.getRuntimeMaxLength();

        if (event.keyCode == 45 || event.keyCode == 46 || event.keyCode == 37) {
            this.ChangeMaxLength(dataType, event.keyCode); //可能改变也可能不改变
        }



        //判断是否允许输入（包括是否超长，是否是数字+小数点+负号）
        if (!this.IsAllowInput(this._textbox)) {
            $Event(event).preventDefault();
        }
    },

    //改变运行时maxLength
    ChangeMaxLength: function (dataType, keyCode) {
        /*$(this._textbox).attr('maxLength', this._sourceMaxLength); //先恢复预知的maxLength  
        if ($(this._textbox).val().indexOf(".") > -1)//===by zzq
            //this._textbox.maxLength++;
            $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
        if ($(this._textbox).val().indexOf("-") > -1) //此时的负号可能是ctl+V进来的，不可能是键盘输入进来的//===by zzq
        {
            if (!(dataType && (dataType == DataType.INT || dataType == DataType.Int16 || dataType == DataType.Int64))) //整数类型
                //this._textbox.maxLength++;
                $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
        }
        if ($(this._textbox).val().indexOf("%") > -1) //此时的百分号可能是ctl+V进来的，不可能是键盘输入进来的//===by zzq
        {
            if (!(dataType && (dataType == DataType.INT || dataType == DataType.Int16 || dataType == DataType.Int64))) //整数类型
                //this._textbox.maxLength++;
                $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
        }

        //"-"
        if (keyCode == 45) {
            if ($(this._textbox).val().indexOf("-") == -1) //此时还没有"-"//===by zzq
                //this._textbox.maxLength = this._textbox.maxLength + 1;
                $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
        }
        //"."
        if (keyCode == 46) {
            if ($(this._textbox).val().indexOf(".") == -1)//===by zzq
                //this._textbox.maxLength = this._textbox.maxLength + 1;
                $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
        }
        if (keyCode == 37) { //debugger;
            if ($(this._textbox).val().indexOf("%") == -1)//===by zzq
                //this._textbox.maxLength = this._textbox.maxLength + 1;
                $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
        }*/

        //zhaolian_2019,由于要输入表达式，所以取消了输入字符长度的限制

    },
    //恢复原始的maxLength
    RrevertMaxLength: function () {
        //this._textbox.maxLength = this._sourceMaxLength;
        $(this._textbox).attr('maxLength', this._sourceMaxLength);
    },
    //得到光标位置
    GetCursorPosition: function (objC) {
        var CaretPos = 0;
        if (!objC) return;

        if (document.selection) { // IE Support 
            objC.focus();
            //===by zzq  修改之前错误的代码  当前文字选择获取的TextRange对象
            //var Sel = window.getSelection().toString();
            var Sel = document.selection.createRange();
            Sel.moveStart('character', -objC.value.length);
            CaretPos = Sel.text.length;
        } else if (objC.selectionStart || objC.selectionStart == '0') { // Firefox support 
            CaretPos = objC.selectionEnd - objC.selectionStart;//===by zzq
        }
        return (CaretPos);
    },
    IsAllowInput: function (inputObj) {
        var cursorPosition = this.GetCursorPosition(inputObj);
        var dataType = this._element.cusAttr('DT');
        var k = event.keyCode;
        //zhaolian
        if ((k >= 40 && k <= 57) || k == 37) //only 0到9 +-*/.()
        {
            //整数类型时输入小数点
            if (dataType && (dataType == DataType.INT || dataType == DataType.Int16 || dataType == DataType.Int64) && k == 46) {
                $Event(event).preventDefault();
                return false;
            }
            //正数时输入负号
            if (this.GetMinValue() >= 0 && k == 45 && this._textbox.selectionStart == 0) {
                $Event(event).preventDefault();
                return false;
            }
            return true;
        } else {
            return false;
        }

    },
    input_onpaste: function () {
        //每次paste的时候都做一次检查，生成当前的maxLength
        this.getRuntimeMaxLength();
        if (this._element.cusAttr('ReadOnly')) //防止只读状态下，鼠标点击控件后，响应keydown事件
        {
            $Event(event).preventDefault();
            return;
        }
        var textBox = event.srcElement;
        var maskChars = textBox.cusAttr('maskChars');
        // var text = window.clipboardData.getData("text");
        var text = '';
        if (window.clipboardData) {   //跨浏览器兼容--weiyina -- 20171205
            text = window.clipboardData.getData("text");
        } else {
            text = event.clipboardData.getData('text/plain');
        }

        if (isMasks(text, maskChars)) {
            $Event(event).preventDefault();
        }

        /**************************************************************************/
        var selectedText = window.getSelection().toString();
        /*if ($(this._textbox).val() == selectedText) {
            this.RrevertMaxLength();
            if (text.indexOf(".") > 0)
                //this._textbox.maxLength++;
                $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
            if (text.indexOf("-") > 0)
                //this._textbox.maxLength++;
                $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
        } else {
            if (selectedText.indexOf(".") > 0) {
                if (text.indexOf(".") > 0) { }
                    //this._textbox.maxLength = this._textbox.maxLength;
                    //$(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
                else
                    //this._textbox.maxLength--;
                    $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') - 1);
            }

            if (selectedText.indexOf("-") > 0) {
                if (text.indexOf("-") > 0) { }
                    //this._textbox.maxLength = this._textbox.maxLength;
                else
                    //this._textbox.maxLength--;
                    $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') - 1);
            }

            if (selectedText.indexOf("%") > 0) {
                if (text.indexOf("%") > 0 && text.indexOf("%") == text.length - 1) { }
                    //this._textbox.maxLength = this._textbox.maxLength;
                else
                    //this._textbox.maxLength--;
                    $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') - 1);
            }
        }*/

        //检查text中的输入内容，过滤调非数字的信息，只保留第一个小数点
        var dst = "";
        if (text == null || text.length == 0) {
            return;
        }

        var charCode0 = "0".charCodeAt(0);
        var charCode9 = "9".charCodeAt(0);
        var isInputPos = false;

        for (var i = 0, ilen = text.length; i < ilen; i++) {
            var ch = text.charAt(i);
            var chCode = text.charCodeAt(i);

            //允许输入0-9
            if ((chCode >= charCode0) && (chCode <= charCode9)) {
                dst += ch;
                continue;
            }
            //允许粘贴1个小数点
            if (ch == "+" || ch == "-" || ch == "*" || ch == "/" || ch == "." || ch == "%") {
                dst += ch;
                continue;
            }
            //过滤其它粘贴的内容
        }

        //将输入的值放到控件,并跳过默认的粘贴的逻辑。
        //this.set_Text(dst);
        //wangl:将 过滤后数据 复制到 输入框中,不影响 change事件触发.
        //this._textbox.value=dst;
        //$Event(event).preventDefault();
        if (dst === "") {
            $Event(event).preventDefault();
        } else {
            // window.clipboardData.setData("text", dst);   //这句先注释起来，此时剪贴板中的内容已经有了再执行赋值操作则会影响最终展示的值
            return true;
            //return dst;
        }
    },
    GetMinValue: function () {
        var minValue = this._element.cusAttr('MinV');
        if (minValue == null) minValue = this.get_MinValue(); //优化后可能不输出'MinV'

        var value = parseFloat(minValue);
        if (isNaN(value)) return -1;
        return value;
    },

    input_onfocus: function () {
        this.ControlFocus();
        var type = this._element.cusAttr("tp");
        //debugger;
        if (this.get_ReadOnly() || !this.get_Enabled()) return;
        var tempnumberic = this.get_numberic();
        if (tempnumberic != null) {
            $(this._textbox).val(Number.toLocaleString(tempnumberic, this.get_Culture(), type));
        }

        try {
            this._textbox.select();
        } catch (ex) { }
    },

    input_onblur: function () {
        if (this.mschangeFired == true) //默认情况
            this.mschangeFired = false; //恢复默认状态
        else //如果没有触发change，就需要触发之。换言之，change和blur应该成对出现。微软IE并不保证二者事件一定成对出现。
        {
            if (this.get_ReadOnly() != true) //不是只读的情况
            {
                this.changePD();
            }
        }
        this.ControlBlur();
        if (this._element.cusAttr('ReadOnly')) return;
        if (!this.IsInGrid()) {
            this.setTextBoxValue();
        } else {
            this.formatTextBoxValue();
        }

        //恢复初始输入限制    
        //this.RrevertMaxLength(); 
        //this._textbox.maxLength = this._sourceMaxLength;
        //$(this._textbox).attr('maxLength', this._sourceMaxLength);
    },

    validInputValue: function (inputValue) {
        if (isNaN(inputValue)) //为了解决Grid中输入"--",即两个负号,按enter后, if(!inputValue)会为true的情况
            return false;

        //判断是否在整数的允许输入范围内(如:用户将12.34小数点去掉变成1234) fanfree at 0917
        var dataType = this._element.cusAttr('DT');
        if (dataType != DataType.INT && dataType != DataType.Int16 && dataType != DataType.Int64) {
            if (inputValue) {
                var intPart = inputValue.toString().split(".")[0];
                if (this.filtrateChars(intPart, "-").length > this._allowIntegerLength) //除去符号("-")后的长度不能大于this._allowIntegerLength
                {
                    return false;
                }
            }
        }
        //不是必输项时值为空是不做校验
        if (this._element.cusAttr('R')) {
            if (this._element.cusAttr('R') == "n") {
                if (!inputValue)
                    return true;

            }
        }

        //gct20080310:如果设置了ZN属性（ZeroIsNull），即使0不在最大最小值范围之内，也当作合法值处理。只是显示为空，数字控件的值还是0。
        if (inputValue.toString() == "0" && this._element.cusAttr('ZN') == "true")
            return true;

        var maxValue = this._element.cusAttr('MaxV');
        if (maxValue == null) maxValue = this.get_MaxValue(); //优化后可能不输出'MaxV'

        var minValue = this._element.cusAttr('MinV');
        if (minValue == null) minValue = this.get_MinValue(); //优化后可能不输出'MinV'

        return handleMaxMinValue(9999, minValue, inputValue);
    },
    //Add 4 zjx
    setAttribute: function (exAttName, exAttValue) {
        if (this._element)
            this._element.setAttribute(exAttName, exAttValue);
    },
    filtrateChars: function (objString, removedChars) {
        var resultString = "";
        for (var i = 0, len1 = objString.length; i < len1; i++) {
            if (removedChars.indexOf(objString.substr(i, 1)) == -1)
                resultString += objString.substr(i, 1);
        }
        return resultString;
    },
    getRuntimeMaxLength: function () {
        //RuntimeMaxLength最多是maxLength+2
        //this._textbox.maxLength = this._sourceMaxLength; //先恢复maxLength          
        /*$(this._textbox).attr('maxLength', this._sourceMaxLength);

        if ($(this._textbox).val().indexOf("-") > -1)
            $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
        //this._textbox.maxLength++;
        if ($(this._textbox).val().indexOf(".") > -1)
            //this._textbox.maxLength++;
            $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);
        if ($(this._textbox).val().indexOf("%") > -1)
            //this._textbox.maxLength++;
            $(this._textbox).attr('maxLength', $(this._textbox).attr('maxLength') + 1);*/
        return;
    }
}

UF.UI.Number.registerClass('UF.UI.Number', UF.UI.InputControl);

function NumberTemplate() { }
NumberTemplate.Enabled = InputControlTemplate.Enabled;
NumberTemplate.ReadOnly = InputControlTemplate.ReadOnly;
NumberTemplate.TBClassName = InputControlTemplate.TBClassName + " number";
NumberTemplate.TBClassName_R = InputControlTemplate.TBClassName_R;
NumberTemplate.TBClassName_D = InputControlTemplate.TBClassName_D;
NumberTemplate.ShowInvalidMessage = "true";


//DATATYPE_DECIMAL = 8
function DATATYPE_DECIMAL_Template() { }
DATATYPE_DECIMAL_Template.MinV = "0";
DATATYPE_DECIMAL_Template.MaxV = "999999999999999";

//DATATYPE_INT16 = 9
function DATATYPE_INT16_Template() { }
DATATYPE_INT16_Template.MinV = "-32768";
DATATYPE_INT16_Template.MaxV = "32767";

//DATATYPE_INT = 2
function DATATYPE_INT_Template() { }
DATATYPE_INT_Template.MinV = "-2147483648";
DATATYPE_INT_Template.MaxV = "2147483647";

//DATATYPE_INT64 = 7
function DATATYPE_INT64_Template() { }
DATATYPE_INT64_Template.MinV = "-9999999999999998";
DATATYPE_INT64_Template.MaxV = "9999999999999998";



//function NumAttriTemplate(){}
//NumAttriTemplate.MinV               = "-9999999999999998";
//NumAttriTemplate.MaxV               = "999999999999999";
//NumAttriTemplate.Scale              = "0";
//NumAttriTemplate.HiddenName         = "true";
//NumAttriTemplate.id                 = "true";
//NumAttriTemplate.title              = "true";
//NumAttriTemplate.class1              = "true";
//NumAttriTemplate.R                  = "true";
//NumAttriTemplate.Enabled            = "true";
//NumAttriTemplate.ReadOnly           = "true";
//NumAttriTemplate.TBClassName        = "true";
//NumAttriTemplate.TBClassName_R      = "true";
//NumAttriTemplate.TBClassName_D      = "true";
//NumAttriTemplate.Masked             = "true";
//NumAttriTemplate.SelectText         = "true";
//NumAttriTemplate.CaseSensitive      = "true";
//NumAttriTemplate.V                  = "0";
//NumAttriTemplate.FS                 = "true";
//NumAttriTemplate.Culture            = "true";
//NumAttriTemplate.DT                 = "true";
//NumAttriTemplate.RT                 = "true";
//NumAttriTemplate.RV                 = "true";
//NumAttriTemplate.TP                 = "true";
//NumAttriTemplate.ZN                 = "true";
//NumAttriTemplate.CS                 = "true";
//NumAttriTemplate.ShowInvalidMessage = "true";
//NumAttriTemplate.style = "true";

//function CurrencyTemplate(){}
//CurrencyTemplate.MaxV               = "999999999999999";//15位
//CurrencyTemplate.MinV               = "0";//
//CurrencyTemplate.Scale              = "0";//
//CurrencyTemplate.HiddenName         = "";
//CurrencyTemplate.id                 = "true";
//CurrencyTemplate.title              = "true";
//CurrencyTemplate.class1              = "true";
//CurrencyTemplate.R                  = "true";
//CurrencyTemplate.Enabled            = "true";//
//CurrencyTemplate.ReadOnly           = "false";//?
//CurrencyTemplate.TBClassName        = "textbox";
//CurrencyTemplate.TBClassName_R      = "textbox TBDisabled";
//CurrencyTemplate.TBClassName_D      = "textbox TBReadOnly";
//CurrencyTemplate.Masked             = "True";//
//CurrencyTemplate.SelectText         = "True";//
//CurrencyTemplate.CaseSensitive      = "True";//
//CurrencyTemplate.V                  = "0";//
//CurrencyTemplate.FS                 = "c0";//
//CurrencyTemplate.Culture            = "zh-CN";//
//CurrencyTemplate.DT                 = "0";
//CurrencyTemplate.RT                 = "0";//
//CurrencyTemplate.RV                 = "0";
//CurrencyTemplate.TP                 = "Currency";
//CurrencyTemplate.ZN                 = "false";//zero is null
//CurrencyTemplate.CS                 = "true";
//CurrencyTemplate.ShowInvalidMessage = "true";//
//CurrencyTemplate.style = "BORDER-RIGHT: 1px solid; BORDER-TOP: 1px solid; DISPLAY: inline-block; BORDER-LEFT: 1px solid; WIDTH: 120px; BORDER-BOTTOM: 1px solid";

//function NumbericTemplate(){}
//function PercentTemplate(){}
//function PermillageTemplate(){}
//function FixedPointTemplate(){}
;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.DropDownList = function (element) {

    UF.UI.DropDownList.initializeBase(this, [element]);

    var _this = this;
    this.$element;
    //var __isShow = 0;
    this.__isShow = 0;
    // TODO : (Step 1) Add your property variables here
    this._textbox;
    this._button;
    this._hidden;
    this._dataSource = new Array();
    this._popup;
    this._select1;
    this._selectedIndex;//????没有赋初值，也没有地方用？
    this._Popup_Rows = 5;//允许有多少选项
    this._readOnly = false;
    this._RefResults = null;
    this.newItem = "";
    this._allItem = [];
    this._IsReloadItems = false;
    this._IsShow = false;
    this._splitter1;
    this._splitter2;
    this._HideRequiredFlag = false;
    this._itemsHidden;
    this._xmlReturnHidden;
    this._datas;
    this._code = "";
    this._codeHash;
    this._hasCode = false;

    this._itemValueIsntNumber = false;
    this._isFiltering = false;
    this.filterKeyDownTimeOut;

    // Handler
    this._elementkeydownHandler;
    this._buttonclickHandler;
    this._btnmouseoverHandler;
    this._btnmouseoutHandler;
    this._btnmousedownHandler;

    this._textboxfocusHandler;
    this._textboxblurHandler;
    this._textboxonchangeHandler;
    this._textboxkeydownHandler;
    this._textboxkeyupHandler;
    this._textboxpasteHandler;
    this._textboxdragHandler;

    this._popupfocusoutHandler;
    this._popupkeydownHandler;
    this._selectchangeHandler;
    this._popupmousedownHandler;
    this._selectclickHandler;
    this._girdScrollHandler;
    this._resizeHandler;

    this._autoComplete = false;
    this._autoCompleteArray = new Array();
    this._curactb;

    this._isCustomerEnumType = false;
    this._isShowWithRefForm = false;    //是否开窗参照方式
    this._hasAllItems = false;  //参照显示时是否包含所有项目
    this.isGettingAllItems = false;
    this._isCustItems = false;
    this._CancelShowForm = false;
    this._IsDialogOpenning = false;
    this._IsShowForm = true;
    this._inputValue;
    this._disableEvent = false;

    this._xmlhttpRequest;
    this.CallbackComplete = function () {
        if (_this._xmlhttpRequest)
            if (_this._xmlhttpRequest.readyState == 4) {
                //返回数据包含在responseText内容的<ReferenceReturns>和</ReferenceReturns>之间
                //如果数据有多行，则不返回数据，只返回关键字__MultiRows，弹出参照页面
                var result = _this._xmlhttpRequest.responseText;
                result = unescapeHTML(result);
                var index0 = result.indexOf("<ReferenceReturns>");
                var index1 = result.indexOf("</ReferenceReturns>") + "</ReferenceReturns>".length;
                if (index0 != -1 && index1 != -1) {
                    result = result.substring(index0, index1);
                } else {
                    return;
                }
                if (typeof (JavaScriptDebugTool) != "undefined" && JavaScriptDebugTool.LogReferenceReturnValue) {
                    $alert("Return:" + result);
                }
                if (result == "<ReferenceReturns>__MultiRows</ReferenceReturns>" || result == "<ReferenceReturns></ReferenceReturns>") {
                    //if( result == "<ReferenceReturns></ReferenceReturns>"){ 
                    // if(!_this._isNeedValidate && _this._oldValue != _this._code){ //不需要校验的校验失败后，判断是否value变更，变更则触发postback事件
                    // _this.PostBack();
                    // return;
                    // }
                    //}
                    _this._IsShowForm = true;
                    _this.ShowRefForm(_this._inputValue);
                    return;
                }
                if (result == "<ReferenceReturns>true</ReferenceReturns>") {
                    return;
                }
                if (result == "<ReferenceReturns>false</ReferenceReturns>") {
                    //20100303 wangxiaoliang
                    //增加跨组织分配模板后，模拟录入失败时的错误提示。
                    //--begin--
                    if ((_this.get_SetControlValue()) && (_this.get_SetControlValue().IsSetControlValue == true)) {
                        _this.ShowSetControlValueErrorMsg();
                    }
                    //--end--

                    _this.OnContentChanged(null);
                    return;
                }
                _this.OnContentChanged(result);
                _this._CancelShowForm = true;
                _this._disableEvent = false;
            }
    }
    // 粘贴事件处理xml数据
    this.CallbackCompleteForPaste = function (CacheReturn) {
        window.referenceData = []
        if (CacheReturn || _this._xmlhttpRequest)
            if (CacheReturn && CacheReturn.srcElement && CacheReturn.srcElement.responseText || _this._xmlhttpRequest.readyState == 4) {
                //返回数据包含在responseText内容的<ReferenceReturns>和</ReferenceReturns>之间
                //如果数据有多行，则不返回数据，只返回关键字__MultiRows，弹出参照页面
                var result = JSON.parse(CacheReturn.srcElement.responseText);
                window.referenceData = result.length > 0 ? result : []
                return
            }
    }
    this.CallbackComplete4GetItems = function () {
        var _this = this;
        if (_this._xmlhttpRequest)
            if (_this._xmlhttpRequest.readyState == 4) {
                var result = _this._xmlhttpRequest.responseText;
                result = unescapeHTML(result);
                var index0 = result.indexOf("<ReferenceReturns>");
                var index1 = result.indexOf("</ReferenceReturns>") + "</ReferenceReturns>".length;
                if (index0 != -1 && index1 != -1) {
                    result = result.substring(index0, index1);
                } else {
                    return;
                }
                if (JavaScriptDebugTool.LogReferenceReturnValue) {
                    $alert("Return:" + result);
                }
                _this.LoadItems(result);
                if (_this.isGettingAllItems) { _this._hasAllItems = true; }
                _this.isGettingAllItems = false;
            }
    }
}

UF.UI.DropDownList.prototype = {

    initialize: function () {
        UF.UI.DropDownList.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        //this._splitter1 = this.get_element().splitter1;//Item项之间的分隔符，相当于分号
        //this._splitter2 = this.get_element().splitter2;//一个Item中，各个数据之间的分隔符，相当于逗号
        this.$element = $(this._element);
        this._splitter1 = this._element.cusAttr("splitter1"); //Item项之间的分隔符，相当于分号        
        this._splitter2 = this._element.cusAttr("splitter2"); //一个Item中，各个数据之间的分隔符，相当于逗号
        this._textbox = this._element.childNodes[0];
        this._button = this._element.childNodes[1];

        this.btnmouseOverClass = DropDownListTemplate.BtnClassName_MouseOver;//先写死，要用设置皮肤方式做
        this.btnmouseOutClass = this._button.className;

        //this._hidden = $get(this.get_element().name);//this.get_name();
        //this._hidden = $get(this.get_id() + "_Hidden");//将隐藏域输出到控件的内部
        var len = this._element.children.length;
        this._hidden = $get(this.get_id() + "_Hidden"); //this.get_element().children[2];//将隐藏域输出到控件的内部
        this._itemsHidden = $get(this.get_id() + "_ItemsHidden");
        this._xmlReturnHidden = $get(this.get_id() + "_ReturnHidden");
        var innerElement = this._element;
        var dorpDownItems = innerElement.cusAttr("Items");
        this.set_Items(dorpDownItems);
        var startItem = innerElement.cusAttr("StartI");
        var endItem = innerElement.cusAttr("EndI");
        if ((startItem != null && startItem != "") || (endItem != null && endItem != "")) { this.ResetItemByInterval(startItem, endItem); }
        if (innerElement.cusAttr('HINs')) {
            this.ResetItem(true, innerElement.cusAttr('HINs'));
            this._hidden.value = this.get_Value();
        }
        if (innerElement.cusAttr('SINs')) {
            this.ClearItems();
            this.ResetItem(false, innerElement.cusAttr('SINs'));
            this._hidden.value = this.get_Value();
        }

        var isRefShow = innerElement.cusAttr("IsRef");
        if (isRefShow && isRefShow == "y") { this._isShowWithRefForm = true; }
        //        this.btnmouseOverClass = this._isShowWithRefForm ? DropDownListTemplate.BtnClassName_Ref_MouseOver : DropDownListTemplate.BtnClassName_MouseOver;
        if (this.btnClassName == null)
            this.btnClassName = this._isShowWithRefForm ? DropDownListTemplate.BtnClassName_Ref : DropDownListTemplate.BtnClassName;
        if (this.btnClassName_Dis == null)
            this.btnClassName_Dis = this._isShowWithRefForm ? DropDownListTemplate.BtnClassName_Ref_Dis : DropDownListTemplate.BtnClassName_Dis;
        var isCusItems = innerElement.cusAttr("IsCustItems");
        if (isCusItems && isCusItems == "y") { this._isCustItems = true; }

        if (innerElement.cusAttr('AutoComplete') == "true")//默认this._autoComplete为false
            this._autoComplete = true;
        this._autoComplete = false;     //yangkuna20100705:禁用自动完成 
        //不启用自动完成功能时，应该关闭输入法。
        if (this.get_AutoComplete() == false) {
            //this._textbox.style.imeMode="disabled";
        }

        if (innerElement.cusAttr('HideRequiredFlag') && innerElement.cusAttr('HideRequiredFlag') == "y") {
            this._HideRequiredFlag = true;
        }

        // set required flag "*" display  应该在基类里
        //this.DisplayRequiredFlag(!this.get_element().disabled && !this._HideRequiredFlag);  
        this.DisplayRequiredFlag(!this._HideRequiredFlag);

        var cusEnumAttr = innerElement.cusAttr("IsCustomerEnum");
        if (cusEnumAttr && cusEnumAttr == "true") { this._isCustomerEnumType = true; }
        else { this._isCustomerEnumType = false; }

        this.initControl();

        // Create delegates Attach events
        this._buttonclickHandler = Function.createDelegate(this, this.button_click);
        $addHandler(this._button, "click", this._buttonclickHandler);

        this._elementkeydownHandler = Function.createDelegate(this, this.onkeyDown);
        $addHandler(this.get_element(), "keydown", this._elementkeydownHandler);

        this._textboxonchangeHandler = Function.createDelegate(this, this.textboxChange);
        $addHandler(this._textbox, "change", this._textboxonchangeHandler);
        this._textboxkeydownHandler = Function.createDelegate(this, this.textboxKeydown);
        $addHandler(this._textbox, "keydown", this._textboxkeydownHandler);
        this._textboxkeyupHandler = Function.createDelegate(this, this.textboxKeyup);
        $addHandler(this._textbox, "keyup", this._textboxkeyupHandler);
        this._textboxpasteHandler = Function.createDelegate(this, this.textboxPaste);
        $addHandler(this._textbox, "paste", this._textboxpasteHandler);
        this._textboxdragHandler = Function.createDelegate(this, this.textboxDrag);
        $addHandler(this._textbox, "drag", this._textboxdragHandler);

        this._textboxfocusHandler = Function.createDelegate(this, this.textboxFocus);
        $addHandler(this._textbox, "focus", this._textboxfocusHandler);
        this._textboxblurHandler = Function.createDelegate(this, this.textboxBlur);
        $addHandler(this._textbox, "blur", this._textboxblurHandler);

        this._btnmouseoverHandler = Function.createDelegate(this, this.BtnMouseOver);
        $addHandler(this._button, "mouseover", this._btnmouseoverHandler);
        this._btnmouseoutHandler = Function.createDelegate(this, this.BtnMouseOut);
        $addHandler(this._button, "mouseout", this._btnmouseoutHandler);
        this._btnmousedownHandler = Function.createDelegate(this, this.BtnMouseDown);
        $addHandler(this._button, "mousedown", this._btnmousedownHandler);

        //this._textbox.oncontextmenu = function(){return false;}
        this._textbox.oncontextmenu = this._textboxoncontextmenu; //gct20091126：消除闭包函数

        if (innerElement.cusAttr('ReadOnly')) {
            isReadOnly = true;
        }
        else//优化后的逻辑
        {
            isReadOnly = DropDownListTemplate.ReadOnly == "true" ? true : false;
        }
        this._readOnly = isReadOnly;
        if (isReadOnly) {
            $(this._textbox).attr("readOnly", isReadOnly);
            $(this._button).attr("disabled", isReadOnly);
            //this._element.className = UIControlClass.getReadOnlyCss(this._element);
        }
        //如果不启用自动完成功能时，必输项不允许获得输入光标        
        if (this.get_AutoComplete() == false) {
            if (innerElement.cusAttr('R') == "y") {  //如果必输项，则不允许剪切 add by lzhm 2007-8-13
                //this._textbox.readOnly = true;
                //this.get_element().attachEvent("oncut",function(){return false;});
            }
        }
        this.set_IsInitComlete(true);//gct20080917:设置初始化完成标志，用于脏数据保存提示
    },
    _textboxoncontextmenu: function () {
        if (this.parentElement.cusAttr("IsRef") != 'y') {
            return false;
        }
    },
    dispose: function () {
        // TODO: add your cleanup code here
        if (this.filterKeyDownTimeOut) { window.clearTimeout(this.filterKeyDownTimeOut); }
        if (this._elementkeydownHandler) {
            $removeHandler(this._element, "keydown", this._elementkeydownHandler);
            this._elementkeydownHandler = null;
        }

        if (this._buttonclickHandler) {
            $removeHandler(this._button, "click", this._buttonclickHandler);
            this._buttonclickHandler = null;
        }
        if (this._btnmouseoverHandler) {
            $removeHandler(this._button, "mouseover", this._btnmouseoverHandler);
            this._btnmouseoverHandler = null;
        }
        if (this._btnmouseoutHandler) {
            $removeHandler(this._button, "mouseout", this._btnmouseoutHandler);
            this._btnmouseoutHandler = null;
        }
        if (this.btnmousedownHandler) {
            $removeHandler(this._button, "mousedown", this.btnmousedownHandler);
            this.btnmousedownHandler = null;
        }

        if (this._textboxfocusHandler) {
            $removeHandler(this._textbox, "focus", this._textboxfocusHandler);
            this._textboxfocusHandler = null;
        }
        if (this._textboxblurHandler) {
            $removeHandler(this._textbox, "blur", this._textboxblurHandler);
            this._textboxblurHandler = null;
        }
        if (this._textboxonchangeHandler) {
            $removeHandler(this._textbox, "change", this._textboxonchangeHandler);
            this._textboxonchangeHandler = null;
        }
        if (this._textboxkeydownHandler) {
            $removeHandler(this._textbox, "keydown", this._textboxkeydownHandler);
            this._textboxkeydownHandler = null;
        }
        if (this._textboxkeyupHandler) {
            $removeHandler(this._textbox, "keyup", this._textboxkeyupHandler);
            this._textboxkeyupHandler = null;
        }

        if (this._textboxpasteHandler) {
            $removeHandler(this._textbox, "paste", this._textboxpasteHandler);
            this._textboxpasteHandler = null;
        }

        if (this._textboxdragHandler) {
            $removeHandler(this._textbox, "drag", this._textboxdragHandler);
            this._textboxdragHandler = null;
        }

        if (this._textboxdragHandler) {
            $removeHandler(this._textbox, "drag", this._textboxdragHandler);
            this._textboxdragHandler = null;
        }

        this._button = null;
        this._hidden = null;
        this._itemsHidden = null;
        this._xmlReturnHidden = null;
        if (this._dataSource) {
            Array.clear(this._dataSource);
            this._dataSource = null;
        }
        this.clear_Popup();
        this._select1 = null;
        if (this._RefResults) {
            Array.clear(this._RefResults);
            this._RefResults = null;
        }
        this.newItem = null;
        if (this._allItem) {
            Array.clear(this._allItem);
            this._allItem = null;
        }
        if (this._curactb) {
            this._curactb.dispose();
            this._curactb = null;
        }
        if (this._autoCompleteArray) {
            Array.clear(this._autoCompleteArray);
            this._autoCompleteArray = null;
        }
        if (this.curHandler != null)
            this.curHandler = null;//gct20091126：一定要释放，否则导致IE内存泄漏
        if (this._textboxoncontextmenu != null)
            this._textboxoncontextmenu = null;//gct20091126：一定要释放，否则导致IE内存泄漏                        
        if (this._textbox.oncontextmenu != null)
            this._textbox.oncontextmenu = null;//gct20091126：一定要释放，否则导致IE内存泄漏

        this._autoComplete = null;
        this._textbox = null;
        UF.UI.DropDownList.callBaseMethod(this, 'dispose');
    },

    initControl: function () {
        if (this._isShowWithRefForm) {
            this._textbox.cusAttr("autocomplete", "off");
            this._datas = new ReferenceData();
            var datas = this._element.cusAttr("RefValue");
            var aryDatas = this.StringToList(datas, this._splitter1);
            if (aryDatas.length == 3) {
                //this._key=aryDatas[0];
                this._code = aryDatas[1];
                //this._text=aryDatas[2];          
                var refInfo = this.getRefInfo();
                var row = new Array();
                row[refInfo.KeyField] = aryDatas[0];
                row[refInfo.ValueField] = aryDatas[1];
                row[refInfo.TextField] = aryDatas[2];
                this._datas.Rows[0] = row;
            }
        }
        //Build Code Hash
        this._codeHash = {};
        var codes = this._element.cusAttr("Codes");
        if (codes) {
            var arrCodes = this.StringToList(codes, this._splitter1);
            if (arrCodes.length > 0) {
                for (var i = 0; i < arrCodes.length; i++) {
                    var arrCd = this.StringToList(arrCodes[i], this._splitter2);
                    if (arrCd.length == 2) {
                        this._codeHash[arrCd[0]] = arrCd[1];
                        this._hasCode = true;
                    }
                }
            }
        }
    },

    //event    
    add_onchange: function (handler) {
        this.get_events().addHandler("onchange", handler);
    },
    remove_onchange: function (handler) {
        this.get_events().removeHandler("onchange", handler);
    },
    raiseonchange: function (args) {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent
        if (this._element.cusAttr("AutoPostbackForNew")) {
            __doPostBack(this._element.id, "");
        }
        ///===by zzq 解决eval没有postback问题
        else if (this.$element.attr("onchange")) {
            eval(this.$element.attr("onchange"));
        }
        var eh = this.get_events().getHandler("onchange");
        if (eh) {
            eh(this, args);
        }
    },

    add_SelectedIndexChanged: function (handler) {
        this.get_events().addHandler("SelectedIndexChanged", handler);
    },
    remove_SelectedIndexChanged: function (handler) {
        this.get_events().removeHandler("SelectedIndexChanged", handler);
    },
    raiseSelectedIndexChanged: function (args) {
        if (this.$element.attr("SelectedIndexChanged")) {
            eval(this.$element.attr('SelectedIndexChanged'));
        }
        var eh = this.get_events().getHandler("SelectedIndexChanged");
        if (eh) {
            eh(this, args);
        }
    },

    add_OnValueChanged: function (handler) {
        this.get_events().addHandler("OnValueChanged", handler);
    },
    remove_OnValueChanged: function (handler) {
        this.get_events().removeHandler("OnValueChanged", handler);
    },
    raiseOnValueChanged: function (args) {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        if (this.$element.attr('OnValueChanged')) {
            eval(this.$element.attr('OnValueChanged'));
        }
        var eh = this.get_events().getHandler("OnValueChanged");
        if (eh) {
            eh(this, args);
        }

        //暂时放在OnValueChange的最后，提供一个个性化处理时机。onchange暂时没有这样的时机，也不需要，因为onchange触发，则OnValueChange一定会触发
        this.AfterRaiseOnValueChanged4Personal();
    },
    //event OnValueChanged4P
    add_OnValueChanged4P: function (handler) {
        this.get_events().addHandler("OnValueChanged4P", handler);
    },
    remove_OnValueChanged4P: function (handler) {
        this.get_events().removeHandler("OnValueChanged4P", handler);
    },
    raiseOnValueChanged4P: function (args) {
        var eh = this.get_events().getHandler("OnValueChanged4P");
        if (eh) {
            this.curHandler = eh;//记录eh到sender中，以便在BasicInfor的CanEvalPersonalJS()中使用curHandler获取对eh的引用。this在运行时不是eh
            eh(this, args);
        }
        //暂时放在OnValueChange的最后，提供一个个性化处理时机。onchange暂时没有这样的时机，也不需要，因为onchange触发，则OnValueChange一定会触发
        this.AfterRaiseOnValueChanged4Personal();
    },

    // TODO: (Step 2) Add your property accessors here
    get_Type: function () {
        return ControlType.DropDownList;
    },

    //Properties getter and setter
    set_DataSource: function (value) {
        this._RefResults = value;
        this.ReloadDataSource();
    },
    get_DataSource: function () {
        return this._RefResults;
    },

    getReturnXml: function () {
        try {
            //return PopupFormHelper.TranslateInfor(this._datas);
            return this._datas;
        }
        catch (e) { }
        return null;
    },
    ResetHiddenValue: function () {
        if (this._hidden.value) {
            if (this.newItem) {
                var newItems = this.newItem.split(this.get_Splitter4Item());
                var itemString;
                for (var i = 0, len = newItems.length; i < len; i++) {
                    itemString = this.get_Splitter4Item() + newItems[i];
                    if (this._hidden.value.indexOf(itemString) < 0) {
                        this._hidden.value += itemString;
                    }
                }
                this._hidden.value = this._hidden.value.replace(this.get_Splitter4Item() + this.get_Splitter4Item(), this.get_Splitter4Item());
            }
        } else {
            this._hidden.value += this.newItem;
        }
    },

    ReloadDataSource: function () {
        this.ClearItems();
        this.clear_Popup();
        //
        var code = this._RefResults[0];
        var name = this._RefResults[1];
        var dt = this._RefResults[2];
        if (dt) {
            var rows = dt.Rows;

            this._codeHash = {};
            this._hasCode = false;
            for (var i = 0; i < rows.length; i++) {
                var sel = false;
                if (rows[i].Selected) {
                    sel = true;
                }
                if (rows[i][name] == "") {
                    rows[i][name] = " ";
                }
                this.AddItem(rows[i][code], rows[i][name], sel);
                this.newItem += this._splitter1 + rows[i][code] + this._splitter2 + rows[i][name];
                this._codeHash[rows[i][code]] = rows[i]["RealityCode"];
                this._hasCode = true;
            }
            this.ResetHiddenValue();
            this.ResetSelectedItem();
        }
    },

    ResetSelectedItem: function () {
        for (var i = 0, len = this._dataSource.length; i < len; i++) {
            if (this._dataSource[i].Selected) {
                this.set_SelectedValue(this._dataSource[i].Value);
                break;
            }
        }
    },

    AddItem: function (strValue, strText, sel) {
        var bHas = false;
        var nIndex = -1;
        for (var i = 0; i < this._dataSource.length; i++) {
            if (this._dataSource[i].Value == strValue) {
                bHas = true;
                nIndex = i;
                break;
            }
        }
        if (bHas) {
            var itemT = new ListItem(strText, strValue, false);
            this._dataSource[nIndex] = itemT;
            this._dataSource[nIndex].Selected = sel;
        } else {
            var itemT = new ListItem(strText, strValue, false);
            this._dataSource[this._dataSource.length] = itemT;
            this._dataSource[this._dataSource.length - 1].Selected = sel;
        }
        //yangkuna20100713:客户端操作过Items则以Items为准
        this._isCustItems = true;
    },

    CloneItems: function (items) {
        for (var i = 0; i < items.length; i++) {
            this._allItem[i] = items[i];
        }
        return this._allItem;
    },

    Sort: function () {
        var T = [];
        var n = 0;
        for (var j = 0; j < this._allItem.length; j++) {
            var v = null;
            for (var i = 0; i < this._dataSource.length; i++) {
                if (this._allItem[j].Value == this._dataSource[i].Value) {
                    v = this._dataSource[i];
                    break;
                }
            }
            if (v) {
                T[n] = v;
                n++;
            }
        }
        this._dataSource = T;
    },
    DisplayAllItems: function () {
        this._dataSource = this._allItem;
    },

    //isRemove为true：直接去除this._dataSource中的itemIndexs
    //isRemove为false：直接向this._dataSource中加入itemIndexs
    //通过_allItem重新构建_dataSource，_allItems存储的是客户端所有Item的信息，_dataSource是当前显示的Item的集合
    AddRemoveItem: function (isRemove, itemIndexs) {
        if (this._allItem.length == 0) {
            for (var i = 0; i < this._dataSource.length; i++) {
                this._allItem[i] = this._dataSource[i];
            }
        }

        var v;
        if (itemIndexs.indexOf(this._splitter1) > -1)//表明是平台定义的分隔符
            v = itemIndexs.split(this._splitter1);
        else//由于原先很多开发人员用的是分号（,）来做分隔符，所以加上else，用来解析早先的代码
            v = itemIndexs.split(",");

        if (!isRemove)//Add
        {
            for (var i = 0, len = this._allItem.length; i < len; i++) {
                var bAdd = false;
                for (var j = 0; j < v.length; j++) {
                    if (this._allItem[i].Value == v[j]) {
                        bAdd = true;
                        break;
                    }
                }
                if (bAdd) {
                    this._dataSource[this._dataSource.length] = this._allItem[i];
                    if (this._allItem[i].Selected)//需要判断_dataSource中有没有Selected=true的item，如果有_dataSource中已经有Selected=true的Item，则新加入_dataSource的item不能再为true
                    {
                        for (var k = 0, oldlen = this._dataSource.length - 1; k < oldlen; k++)//只遍历未新加入item之前的即可
                        {
                            if (this._dataSource[k].Selected == true) {
                                this._dataSource[this._dataSource.length - 1].Selected = false;//刚加入的item的Selected置false
                                break;
                            }
                        }
                    }
                }
            }
            this.Sort();
        }
        else {
            var nCount = 0;
            var newItems = [];
            for (var i = 0, len = this._dataSource.length; i < len; i++) {
                var bAdd = true;
                for (var j = 0; j < v.length; j++) {
                    if (this._dataSource[i].Value == v[j]) {
                        bAdd = false;
                        break;
                    }
                }
                if (bAdd) {
                    newItems[nCount] = this._dataSource[i];
                    nCount++;
                }
            }
            this._dataSource = newItems;
        }
        this._textbox.value = this.get_Text();
        this._textbox.cusAttr("Evalue", this.get_SelectedValue());
        //yangkuna20100713:客户端操作过Items则以Items为准
        this._isCustItems = true;
    },

    //hidden为true：剔除this._dataSource中itemIndexs
    //hidden为false：先清空this._dataSource，再加入itemIndexs
    //通过_allItem重新构建_dataSource，_allItems存储的是客户端所有Item的信息，_dataSource是当前显示的Item的集合
    ResetItem: function (hidden, itemIndexs) {
        if (this._allItem.length == 0) {
            for (var i = 0; i < this._dataSource.length; i++) {
                this._allItem[i] = this._dataSource[i];
            }
        }

        var v;
        if (itemIndexs.indexOf(this._splitter1) > -1)//表明是平台定义的分隔符
            v = itemIndexs.split(this._splitter1);
        else//由于原先很多开发人员用的是分号（,）来做分隔符，所以加上else，用来解析早先的代码
            v = itemIndexs.split(",");

        if (!hidden)//Add
        {
            //添加的时候，无论this._dataSource是否有值都应该先将this._dataSource清空，后再向this._dataSource添加
            this.ClearItems();
            for (var i = 0, len = this._allItem.length; i < len; i++) {
                var bAdd = false;
                for (var j = 0; j < v.length; j++) {
                    if (this._allItem[i].Value == v[j]) {
                        bAdd = true;
                        break;
                    }
                }
                if (bAdd) {
                    this._dataSource[this._dataSource.length] = this._allItem[i];
                    if (this._allItem[i].Selected)//需要判断_dataSource中有没有Selected=true的item，如果有_dataSource中已经有Selected=true的Item，则新加入_dataSource的item不能再为true
                    {
                        for (var k = 0, oldlen = this._dataSource.length - 1; k < oldlen; k++)//只遍历未新加入item之前的即可
                        {
                            if (this._dataSource[k].Selected == true) {
                                this._dataSource[this._dataSource.length - 1].Selected = false; //刚加入的item的Selected置false
                                break;
                            }
                        }
                    }
                }
            }
            this.Sort();
        }
        else {
            var nCount = 0;
            var newItems = [];
            for (var i = 0, len = this._dataSource.length; i < len; i++) {
                var bAdd = true;
                for (var j = 0; j < v.length; j++) {
                    if (this._dataSource[i].Value == v[j]) {
                        bAdd = false;
                        break;
                    }
                }
                if (bAdd) {
                    newItems[nCount] = this._dataSource[i];
                    nCount++;
                }
            }
            this._dataSource = newItems;
        }
        this._textbox.value = this.get_Text();
        this._textbox.cusAttr("Evalue", this.get_SelectedValue());
    },

    ResetItemByInterval: function (start, end) {
        this.Sort();
        if (start == null) { start = ""; }
        if (end == null) { end = ""; }
        var items = [];
        for (var i = 0, len = this._dataSource.length; i < len; i++) {
            var iValue = this._dataSource[i].Value * 1;
            if ((start == "" || iValue >= start * 1) && (end == "" || iValue <= end * 1)) {
                items.push(this._dataSource[i]);
            }
        }
        this._dataSource = items;
    },

    get_SelectControl: function () {
        return this._popup.children[0];
    },
    get_IsReloadItems: function () {
        return this._IsReloadItems;
    },

    //通知DropDownList的PopupDiv是否需要在下次点击Buttond时候，需要重新构建PopupDiv，因为PopupDiv在构建一次后会缓存
    set_IsReloadItems: function (v) {
        this._IsReloadItems = v;
        if (this._IsReloadItems) {
            this.clear_Popup();
            this._IsReloadItems = false;
        }
    },

    set_Enabled: function (isEnabled) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        isEnabled = ToBoolean(isEnabled);
        this._element.cusAttr("disabled", !isEnabled);

        //gct20080612:控件Enabled改变后，MouseOut样式也需要改变
        //        if (isEnabled == true)
        //            this.btnmouseOutClass = this.btnClassName;
        //        else
        //            this.btnmouseOutClass = this.btnClassName_Dis;
        for (var i = 0, len = this.get_element().children.length; i < len; i++) {
            $(this._element.childNodes[i]).attr("disabled", !isEnabled);

            if (this._element.children[i].type == "text") {
                if (isEnabled) {
                    this._element.children[i].className = this.tbClassName;
                    this._element.className = UIControlClass.UFTextBox.CssClass;
                }
                else {
                    this._element.children[i].className = this.tbClassName_D;
                    this._element.className = UIControlClass.UFTextBox.ReadOnlyCssClass;
                }
            }
            if (this._element.children[i].type == "button") {
                if (isEnabled) {
                    this._element.children[i].className = this.btnClassName;
                }
                else {
                    this._element.children[i].className = this.btnClassName_Dis;
                }
            }
        }

        //运行态下设置必输项符合是否显示
        this.DisplayRequiredFlag(isEnabled && !this._HideRequiredFlag);
    },

    // 控件的ReadOnly属性
    get_ReadOnly: function () {
        return this._readOnly;
    },

    set_ReadOnly: function (isReadOnly) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        if (!this.get_Enabled())//由于客户端区分ReadOnly和Enabled状态，所以在设置ReadOnly的时候，要优先考虑Enabled属性
            return;
        isReadOnly = ToBoolean(isReadOnly);
        //this.get_element().setAttribute('ReadOnly', isReadOnly);
        this._element.cusAttr('ReadOnly', isReadOnly);
        $(this._textbox).attr('ReadOnly', isReadOnly);

        //if(this.get_AutoComplete() == true) { this._textbox.readOnly=isReadOnly; }
        //this._textbox.readOnly = isReadOnly;
        if (this.get_id().indexOf("Login") > -1) {
            $(this._button).attr('disabled', false);
        }
        else {
            $(this._button).attr('disabled', isReadOnly);
            //this._button.className = "btn DDLBtn" + ((isReadOnly) ? "1" : "");
            //            this.btnmouseOutClass = this._button.className;
        }
        this._readOnly = isReadOnly;
        if (isReadOnly) {
            //            this._textbox.className = this.tbClassName_R;
            this._button.className = this.btnClassName_Dis;
            //            this.btnmouseOutClass = this.btnClassName_Dis;
            this._element.className = UIControlClass.getReadOnlyCss(this._element);
        }
        else {
            this._textbox.className = this.tbClassName;
            this._button.className = this.btnClassName;
            //            this.btnmouseOutClass = this.btnClassName;
            this._element.className = UIControlClass.getNotReadOnlyCss(this._element);
        }
        this.set_HDValue("ReadOnly", isReadOnly.toString().toLowerCase());
        //gct20081203:提供一个设置只读后的个性化处理时机。
        this.AfterSetReadOnly4Personal();
    },

    set_Width: function (width) {
        this._element.style.width = width + 'px';
        this._textbox.style.width = width - 18 + 'px';
    },

    SetFocus: function () {
        Basic.SetFocus(this._textbox);
    },

    getTextByValue: function (value) {
        for (var i = 0, len = this._dataSource.length; i < len; i++) {
            if (this._dataSource[i].Value == value) {
                return this._dataSource[i].Text;
            }
        }
        if (typeof (value) != "undefined" && value != null && value != "" && value != "-1" && this.getIsShowWithRefForm() && !this._hasAllItems) {
            var refInfo = this.getRefInfo();
            var extEnumType = this._element.cusAttr("EntityFullName");
            var url = this.GetUrl(refInfo.RefType, "ModalRef", false, true) + "&CommandType=getitems";
            url += "&UBF_CustomFilter=" + encodeURI("EValue=" + value);
            url = AppendPopupUrl(url);
            if (!this._xmlhttpRequest) {
                // this._xmlhttpRequest = this.getXHR();
                this.GetXmlHttpRequest();
            }
            if (this._xmlhttpRequest) {
                this.isGettingAllItems = false;
                this.ProcessRequest(url, new Function("$find('" + this.get_id() + "').CallbackComplete4GetItems();"));
                for (var i = 0, len = this._dataSource.length; i < len; i++) {
                    if (this._dataSource[i].Value == value) { return this._dataSource[i].Text; }
                }
            }
        }
        return "";
    },

    getSelectedValueByValue: function (value) {
        for (var i = 0, len = this._dataSource.length; i < len; i++) {
            if (this._dataSource[i].Value == value) {
                return this._dataSource[i].Value;
            }
        }
        return "";
    },

    //返回客户端数据源_dataSource
    get_Items: function () {
        if (this.getIsShowWithRefForm() && !this._hasAllItems) {
            var refInfo = this.getRefInfo();

            var extEnumType = this._element.cusAttr("EntityFullName");
            var url = this.GetUrl(refInfo.RefType, "ModalRef", false, true) + "&CommandType=getitems";

            url = AppendPopupUrl(url);
            if (!this._xmlhttpRequest) {
                //  this._xmlhttpRequest = this.getXHR();
                this.GetXmlHttpRequest();
            }
            if (this._xmlhttpRequest) {
                this.isGettingAllItems = true;
                this.ProcessRequest(url, new Function("$find('" + this.get_id() + "').CallbackComplete4GetItems();"));
            }
        }
        return this._dataSource;
    },
    LoadItems: function (ret) {
        var referenceData = PopupFormHelper.TranslateInfor(ret);
        if (referenceData == null) {
            referenceData = new ReferenceData();
        }
        var refInfo = this.getRefInfo();
        var oldValue = this.get_Value();
        this.ClearItems();
        this._codeHash = {};
        if (referenceData.Rows && referenceData.Rows.length > 0) {
            for (var i = 0; i < referenceData.Rows.length; i++) {
                var r = referenceData.Rows[i];
                this.AddItem(r[refInfo.KeyField], r[refInfo.TextField], false);
                this._codeHash[r[refInfo.KeyField]] = r[refInfo.ValueField];
                this._hasCode = true;
            }
        }
        this.set_SelectedValue(oldValue);
    },

    set_Items: function (val) {
        if (!val)
            return;
        var itemssrc = val.split(this._splitter1);
        var items = new Array(itemssrc.length - 1);
        var valueTextAllEqual = true;    //Value值和Text全部相同，则不显示Value
        for (var i = 0; i < itemssrc.length - 1; i++) {
            var item = itemssrc[i].split(this._splitter2);
            items[i] = new ListItem(item[0], item[1], item[2] == "true" ? true : false);
            this._allItem[i] = items[i];
            if (this._itemValueIsntNumber == false) {
                if (isNaN(item[1])) { this._itemValueIsntNumber = true; } // || (item[1]*1 > 100000)
            }
            if (this._itemValueIsntNumber == false && valueTextAllEqual == true) {
                if (item[0] != item[1]) { valueTextAllEqual = false; }
            }
        }
        if (valueTextAllEqual == true && itemssrc.length > 0) { this._itemValueIsntNumber = true; }
        this._dataSource = items;
        this.clear_Popup();
    },

    get_Value: function () {
        return this.get_SelectedValue();
    },

    set_Value: function (val) {
        //这里的val最好是string类型，int类型也可以，因为this._dataSource[i].Value是string类型的。js比较==的时候会自动转成int类型
        var oldSelectedValue = this.get_SelectedValue();
        if (this.getIsShowWithRefForm()) {
            var item = this.FindByValue(val);
            if (!item && val != null && val != "" && val * 1 >= 0) {
                this.CallXmlHttp(val.toString(), true);
                return;
            }
        }
        this.set_SelectedValue(val);
        val = this.get_SelectedValue();
        if (val != null && oldSelectedValue != val.toString())//js中""等于0，实际上在这里""表示没有选中任何项，而0表示选中第一项，所以要区别二者
        {
            this.raiseOnValueChanged(Sys.EventArgs.Empty);
            if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                this.set_IsValueChanged(true);
            this.raiseOnValueChanged4P(Sys.EventArgs.Empty);
        }
    },

    get_Text: function () {
        var idx = this.get_SelectedIndex();
        if (idx >= 0) {
            return this._dataSource[idx].Text;
        }
        return "";
    },

    set_Text: function (val) {
        this._isFiltering = false;
        if (this._dataSource.length != 0) {
            this.ClearSelection();
            if ((val == null) || (val.Length == 0)) {
                return;
            }
            var item = this.FindByText(val);
            if (item != null) {
                item.Selected = true;
            }
        }
        this._hidden.value = this.get_Value();
        this.ResetHiddenValue();
        this._textbox.value = this.get_Text();
        this._textbox.cusAttr("Evalue", this.get_SelectedValue());
    },

    get_SelectedIndex: function () {
        if (this._dataSource && this._dataSource.length) {
            for (var i = 0, len = this._dataSource.length; i < len; i++) {
                if (this._dataSource[i].Selected) {
                    return i;
                }
            }
        }
        return -1;
    },

    set_SelectedIndex: function (index) {
        this.ClearSelection();
        if ((index >= 0) && (index < this._dataSource.length)) {
            this._dataSource[index].Selected = true;
        }
        this._textbox.value = this.get_Text();
        this._textbox.cusAttr("Evalue", this.get_SelectedValue());
    },

    get_SelectedValue: function () {
        var idx = this.get_SelectedIndex();
        if (idx >= 0) {
            return this._dataSource[idx].Value;
        }
        return "";
    },

    set_SelectedValue: function (val) {
        this._isFiltering = false;
        this.setFilterText("");
        var item = this.FindByValue(val);
        if (this.getIsShowWithRefForm() && !item && val != null && val != "" && val * 1 >= 0) {
            this._disableEvent = true;
            this.CallXmlHttp(val, true);
            return;
        }
        if (this._dataSource.length != 0) {
            this.ClearSelection();
            if ((val == null) || (val.Length == 0)) {
                return;
            }
            var item = this.FindByValue(val);
            if (item != null) {
                item.Selected = true;
            }
        }
        this._hidden.value = val;
        this.ResetHiddenValue();
        this._textbox.value = this.get_Text();
        this._textbox.cusAttr("Evalue", this.get_SelectedValue());

        if (this._allItem.length == 0) {

            this._allItem = this.CloneItems(this._dataSource);
        }
        this._code = this.get_Code();
    },

    get_SelectedText: function () {
        var idx = this.get_SelectedIndex();
        if (idx >= 0) {
            return this._dataSource[idx].Text;
        }
        return "";
    },
    set_SelectedText: function (txt) {
        this.set_Text(txt);
    },

    /* property selectedItem getter */
    get_SelectedItem: function () {
        var idx = this.get_SelectedIndex();
        if (idx >= 0) {
            return this._dataSource[idx];
        }
        return null;
    },

    get_Code: function () {
        if (this._hasCode) {
            var val = this.get_SelectedValue();
            if (val != "") {
                var tmpCode = this._codeHash[val];
                if (typeof (tmpCode) == "undefined" || tmpCode == null) { tmpCode = ""; }
                return tmpCode;
            }
        }
        return "";
    },

    //实际上是清除客户端数据源_dataSource
    ClearItems: function () {
        var length = this._dataSource.length;
        for (var i = 0, len = length; i < len; i++) {
            this._dataSource.pop();
        }
        this.set_Value("");
        this.set_Text("");
        //yangkuna20100713:客户端操作过Items则以Items为准
        this._isCustItems = true;
    },

    get_popup: function () {
        if (this._popup == null) {
            var __this = this;
            var buf = new Array();
            var length = this._dataSource.length;
            this._Popup_Rows = length;
            this._Popup_Rows = this.calcPopupRows(length);
            //if(length < 2)
            //  this._Popup_Rows = 2;
            //if(length > 5)
            //  this._Popup_Rows = 5;
            //
            buf.push("<select size='");
            buf.push(this._Popup_Rows);
            buf.push("' id='select1' class='popupSelect' style='width:100%;height:100%;'>");
            for (var i = 0; i < length; i++) {
                //TODO Use CSS
                var iText = this.formatItemText(this._dataSource[i]);
                buf.push("<option class='popupSelectOption' value='");
                buf.push(this._dataSource[i].Value);
                buf.push("'");
                if (this._dataSource[i].Selected) {
                    buf.push(" selected='selected'");
                }
                buf.push("title='" + iText.trimStart() + "'");
                buf.push(">");
                buf.push(iText.replace(/\s/g, "&nbsp;"));
                buf.push("</option>");
            }
            buf.push("</select>");
            this._popup = document.createElement("div");
            //==========增加动态调用focus事件的能力==========
            this._popup.setAttribute("tabIndex", "-1");
            this._popup.id = this.get_id() + "_Popup";
            window.document.body.appendChild(this._popup);
            this._popup.innerHTML = buf.join("");
            this._select1 = this._popup.children[0];

            this._popupfocusoutHandler = Function.createDelegate(this, this.PopupFocusOut);
            this._popupkeydownHandler = Function.createDelegate(this, this.doKeypress);
            this._selectchangeHandler = Function.createDelegate(this, this.popup_onchange);
            this._popupmousedownHandler = Function.createDelegate(this, this.popup_onmousedown);
            this._selectclickHandler = Function.createDelegate(this, this.CloseMenu);
            this._girdScrollHandler = Function.createDelegate(this, this.CloseMenuForScroll);
            this._resizeHandler = Function.createDelegate(this, this.CloseMenuForScroll);
            //================添加 兼容性写法===========
            $addHandler(this._popup, "focusout", this._popupfocusoutHandler);
            $(this._popup).on("mouseover", function () {
                __this.__isShow = 1;
            }).on("mouseout", function () {
                __this.__isShow = 0;
            });
            $addHandler(this._popup, "keydown", this._popupkeydownHandler);
            $addHandler(this._select1, "change", this._selectchangeHandler);
            if(window.navigator.userAgent.indexOf("Linux") < 0) { // 安卓平板下不做绑定点击事件
                $addHandler(this._select1, "click", this._selectclickHandler);
            }
            $addHandler(this._popup, "mousedown", this._popupmousedownHandler);
            //滚动时，下拉框隐藏
            $(".dataGridMainBody").on("scroll", this._girdScrollHandler);
            //f11全屏下拉框隐藏处理
            $(window).resize(function () {
                __this._resizeHandler();
            });
        }
        return this._popup;
    },
    CloseMenuForScroll: function () {
        //有下拉框且不是隐藏的，则隐藏处理
        if (this._popup != null && this._popup.style.display != "none") {
            this.hide_Popup();
        }
    },

    calcPopupRows: function (itemCount) {
        if (itemCount == undefined) { itemCount = this._dataSource.length; }
        var rows = itemCount;
        if (itemCount < 2) { rows = 2; }
        if (itemCount > 20) { rows = 20; }
        //根据控件位置调整PopupRows
        var h = 36 + 24;
        h += 15 * (rows - 2) + 2;
        var oRect = this.getBoundingClientRect();
        var element = this.get_element();
        var intClientHeight = document.body.clientHeight;
        var flagHeight = intClientHeight - (oRect.top + element.clientHeight + h);
        if (flagHeight <= 0) {
            var fHeight = oRect.top - h + document.body.scrollTop - document.body.clientTop;
            if (fHeight < 10) {
                if (flagHeight > (fHeight - 10)) {
                    //向下
                    rows = Math.round((intClientHeight - oRect.top - element.clientHeight - 30) / 15) - 1;
                }
                else {
                    rows = Math.round((oRect.top + document.body.scrollTop - document.body.clientTop - 40) / 15) - 1;
                }
            }
        }
        return rows;
    },
    formatItemText: function (item, length) {
        if (this._dataSource.length == 0) { return; }
        if (!length) {
            var lastCode = this._codeHash[this._dataSource[this._dataSource.length - 1].Value];
            if (typeof (lastCode) != "undefined") { length = lastCode.length; }
        }
        if (this._itemValueIsntNumber == false && length > 0 && this._hasCode) {
            var vText = this._codeHash[item.Value];
            if (typeof (vText) == "undefined" || vText == null) { vText = ""; }
            var pl = length - vText.length;
            var i = 0;
            //while(i++<pl) { vText=vText + "\t"; }
            return vText + "    " + item.Text;
        }
        else { return item.Text; }
    },

    removePopupSelectElement: function () {
        if (this._select1) {
            $removeHandler(this._select1, "change", this._selectchangeHandler);
            if(window.navigator.userAgent.indexOf("Linux") < 0) { // 安卓平板下不做绑定点击事件
                $removeHandler(this._select1, "click", this._selectclickHandler);
            }
            this.get_popup().removeChild(this._select1);
            this._select1 = null;
        }
    },

    resetPopupListItems: function () {
        if (this._select1) {
            //this.clearPopupSelectOptions();
            var rNode = this._select1.nextSibling;
            this.removePopupSelectElement();
            this._select1 = document.createElement("select");
            this._select1.setAttribute("id", "select1");
            this._select1.setAttribute("className", "popupSelect");
            this._select1.style.cssText = "width:100%;height:100%;";
            var length = this._dataSource.length;
            for (var i = 0; i < length; i++) {
                //TODO Use CSS
                var opNode = document.createElement("option");
                opNode.className = "popupSelectOption";
                opNode.value = this._dataSource[i].Value;
                if (this._dataSource[i].Selected) { opNode.selected = "selected"; }
                var fText = this.formatItemText(this._dataSource[i]);
                opNode.title = fText.trimStart();
                opNode.innerText = fText;
                this._select1.appendChild(opNode);
            }
            this._select1.setAttribute("size", this._Popup_Rows);
            if (rNode) { this.get_popup().insertBefore(this._select1, rNode); }
            else { this.get_popup().appendChild(this._select1); }
            $addHandler(this._select1, "change", this._selectchangeHandler);
            if(window.navigator.userAgent.indexOf("Linux") < 0) { // 安卓平板下不做绑定点击事件
                $addHandler(this._select1, "click", this._selectclickHandler);
            }
        }
    },

    //清除下拉弹出的选项的DIV，以便下次点击下拉button的时候重新构建弹出的选项卡DIV
    clear_Popup: function () {
        if (this._popup) {
            if (this._popupfocusoutHandler) {
                $removeHandler(this._popup, "focusout", this._popupfocusoutHandler);
                this._popupfocusoutHandler = null;
            }
            if (this._popupmousedownHandler) {
                $removeHandler(this._popup, "mousedown", this._popupmousedownHandler);
                this._popupmousedownHandler = null;
            }
            if (this._popupkeydownHandler) {
                $removeHandler(this._popup, "keydown", this._popupkeydownHandler);
                this._popupkeydownHandler = null;
            }
            if (this._select1) {
                if (this._selectchangeHandler) {
                    $removeHandler(this._select1, "change", this._selectchangeHandler);
                    this._selectchangeHandler = null;
                }
                if (this._selectclickHandler) {
                    if(window.navigator.userAgent.indexOf("Linux") < 0) { // 安卓平板下不做绑定点击事件
                        $removeHandler(this._select1, "click", this._selectclickHandler);
                    }
                    this._selectclickHandler = null;
                }
            }
            window.document.body.removeChild(this._popup);
            this._popup = null;
        }
        this._IsShow = false;
    },
    show_Popup: function () {
        if (!this._IsShow) {
            var oldFText = this.getFilterText();
            this.setFilterText("");
            if (oldFText != null && oldFText != "" && !(oldFText == this._textbox.value.toLowerCase())) {
                this.resetPopupListItems();
                this._Popup_Rows = this.calcPopupRows(this._dataSource.length);
            }
        }
        if (this._popup == null) { this._Popup_Rows = this.calcPopupRows(this._dataSource.length); }
        var oRect = this.getBoundingClientRect();
        // var intClientWidth=this.get_element().parentElement.document.body.clientWidth;
        // var intClientHeight=this.get_element().parentElement.document.body.clientHeight;
        var intClientWidth = document.body.clientWidth;
        var intClientHeight = document.body.clientHeight;
        var w = oRect.right - oRect.left;
        var minWidth = (this._hasCode ? DropDownListTemplate.PopupMinWidth2 : DropDownListTemplate.PopupMinWidth);
        if (w < minWidth) { w = minWidth; }
        var h = 40;
        h += 12 * (this._Popup_Rows - 2) + 2;
        /*switch(this._Popup_Rows)
        {
            case 3:
              h=51;
              break;
            case 4:
              h=66;
              break;
            case 5:
              h=81;
              break;
        }*/
        if (this._select1) {
            this._select1.value = this.get_SelectedValue();
        }
        //var body = this.get_element().document.body;
        var body = document.body;
        //========激活div的focus事件======
        var divStyle = this.get_popup().style;
        divStyle.backgroundColor = "#e6e6e6";//"blue";
        divStyle.position = "absolute";
        divStyle.zIndex = 9999; //weiyin增大层级值防止被其他元素遮挡
        divStyle.border = "1px solid #909090";
        //divStyle.top = oRect.bottom + body.scrollTop - body.clientTop;
        //如果下边超出body的高度，为了避免出现滚动条，下拉列表将向上弹出。向上弹出节点：销售与分销>>补货销售>>交货页签>>供应类型
        var flagHeight = intClientHeight - (oRect.top + this.get_element().clientHeight + h);
        if (flagHeight > 0) { divStyle.top = oRect.bottom + body.scrollTop - body.clientTop + 'px'; }
        else {
            var fHeight = oRect.top - h + body.scrollTop - body.clientTop;
            if (fHeight < 10) { fHeight = 10; }
            divStyle.top = fHeight + 'px';
        }

        //如果右边超出body的宽度，为了避免出现滚动条，下拉列表将向左弹出
        var flagWidth = intClientWidth - (oRect.left + this.get_element().clientWidth + w);
        if (flagWidth > 0) { divStyle.left = oRect.left + body.scrollLeft - body.clientLeft + 'px'; }
        else { divStyle.left = oRect.left + body.scrollLeft - body.clientLeft - w + this.get_element().clientWidth + 2 + 'px'; }
        divStyle.width = w + 'px';   //weiyin -- 2016.06.12因跨浏览器兼容添加px单位，js文件中有多处计算容器宽高、位置需要统一加上单位，不然解析的时候没法获取到正确的渲染显示位置
        divStyle.height = h + 'px';
        if(window.navigator.userAgent.indexOf("Linux") > 0) { // 安卓平板高度固定为20px
            divStyle.height = '20px';
        }
        divStyle.display = "";
        //this.get_popup().focus(); 
        //this._select1.focus();   //这句代码会导致--福利保险类别--中textbox框中值改变，select中标签内容导致界面错乱，先给注释起来 -- weiyin -- 2016.11.25
        this._IsShow = true;
    },
    PopupFocusOut: function () {
        //if (this.__isShow) {//===by zzq 更换为select表单元素获取焦点
        //    return false;
        //}
        var aE = window.event.target
        this.hide_Popup();
        if (!this._popup.contains(aE) && !this.get_element().contains(aE)) {
            this.popup_onchange();
        }
    },
    hide_Popup: function () {
        this.get_popup().style.display = "none";
        this._IsShow = false;
    },

    CloseMenu: function () {
        //if(!this.clickInRect())
        //{                      
        this.popup_onchange();  //显示调用change
        this.BtnMouseOut();
        this.hide_Popup();
        if (!this._textbox.cusAttr("isDisabled")) {
            try {
                this._textbox.focus();
                this._textbox.select();
            } catch (ee) { }
        }
        window.$Event(event).stopPropagation();
        //}	
        //else
        //{
        //    this.BtnMouseOut();
        //  this.hide_Popup();            
        //}	    
    },

    getFilterText: function () {
        var text = this._element.cusAttr("FilterText");
        if (typeof (text) == "undefined" || text == null) { text = ""; }
        return text.toLowerCase();
    },
    setFilterText: function (text) {
        this._element.cusAttr("FilterText", text);
    },

    clearPopupSelectOptions: function () {
        if (this._select1) {
            var oWidth = this._select1.offsetWidth;
            var oHeight = this._select1.offsetHeight;
            while (this._select1.lastChild) { this._select1.removeChild(this._select1.lastChild); }
            this._select1.style.width = oWidth + 'px';
            this._select1.style.height = oHeight + 'px';
            this._select1.style.width = "100%";
            this._select1.style.height = "100%";
        }
    },

    doFilter: function () {
        if (this.filterKeyDownTimeOut) { window.clearTimeout(this.filterKeyDownTimeOut); }
        this.popupStartFilter(encodeURI(this._textbox.value));
    },

    popupStartFilter: function (iText) {
        //
        if (!this._IsShow) {
            this.show_Popup();
            //===by zzq 如果未定义就不执行
            if (this._textbox.setActive)
                this._textbox.setActive();
        }
        this._isFiltering = true;
        iText = decodeURI(iText);
        var oldFText = this.getFilterText();
        if (iText != oldFText) {
            var oldPopRows = this._Popup_Rows;
            var hasSelectedItem = false;
            var rCount = 0;
            if (iText == null || iText == "") {
                //this.resetPopupListItems(); 
                //this._Popup_Rows=this.calcPopupRows(this._dataSource.length);
                //hasSelectedItem=true;
                this.clear_Popup();
                this.get_popup();
                this.show_Popup();
                oldPopRows = this._Popup_Rows;
                rCount = this._dataSource.length;
            }
            else {
                //过滤
                var leftMatches = new Array();
                var oMatches = new Array();
                var length = this._dataSource.length;
                var maxValueLength = 0;
                iText = iText.toLowerCase();
                for (var i = 0; i < length; i++) {
                    //TODO Use CSS
                    var val = this._dataSource[i].Value;
                    var tmpCode = this._codeHash[val];
                    if (typeof (tmpCode) == "undefined" || tmpCode == null) { tmpCode = ""; }
                    var text = tmpCode;
                    text = text.toLowerCase();
                    var mIndex = text.indexOf(iText);
                    var match = false;
                    if (mIndex == 0) { leftMatches.push(this._dataSource[i]); match = true; }
                    else if (mIndex > 0) { oMatches.push(this._dataSource[i]); match = true; }
                    else {
                        text = this._dataSource[i].Text;
                        text = text.toLowerCase();
                        mIndex = text.indexOf(iText);
                        if (mIndex == 0) { leftMatches.push(this._dataSource[i]); match = true; }
                        else if (mIndex > 0) { oMatches.push(this._dataSource[i]); match = true; }
                    }
                    if (match == true) { maxValueLength = this._dataSource[i].Value.toString().length; }
                }
                //this.clearPopupSelectOptions();
                var rNode = this._select1.nextSibling;
                this.removePopupSelectElement();
                this._select1 = document.createElement("select");
                this._select1.setAttribute("id", "select1");
                this._select1.setAttribute("className", "popupSelect");
                this._select1.style.cssText = "width:100%;height:100%;";
                var leftLength = leftMatches.length;
                var fText;
                for (var i = 0; i < leftLength; i++) {
                    var opNode = document.createElement("option");
                    opNode.className = "popupSelectOption";
                    opNode.value = leftMatches[i].Value;
                    if (leftMatches[i].Selected) { opNode.selected = "selected"; hasSelectedItem = true; }
                    fText = this.formatItemText(leftMatches[i], maxValueLength);
                    opNode.title = fText.trimStart();
                    opNode.innerText = fText;
                    this._select1.appendChild(opNode);
                }
                var oLength = oMatches.length;
                for (var i = 0; i < oLength; i++) {
                    var opNode = document.createElement("option");
                    opNode.className = "popupSelectOption";
                    opNode.value = oMatches[i].Value;
                    if (oMatches[i].Selected) { opNode.selected = "selected"; hasSelectedItem = true; }
                    fText = this.formatItemText(oMatches[i], maxValueLength);
                    opNode.title = fText.trimStart();
                    opNode.innerText = fText;
                    this._select1.appendChild(opNode);
                }
                this._Popup_Rows = this.calcPopupRows(leftLength + oLength);
                this._select1.setAttribute("size", this._Popup_Rows);
                if (rNode) { this.get_popup().insertBefore(this._select1, rNode); }
                else { this.get_popup().appendChild(this._select1); }
                $addHandler(this._select1, "change", this._selectchangeHandler);
                if(window.navigator.userAgent.indexOf("Linux") < 0) { // 安卓平板下不做绑定点击事件
                    $addHandler(this._select1, "click", this._selectclickHandler);
                }
                rCount = leftLength + oLength;
            }
            //this.get_popup().focus();
            if (oldPopRows != this._Popup_Rows) { this.show_Popup(); }
            if (hasSelectedItem == false) { this._select1.selectedIndex = (this._select1.childNodes.length > 0 ? 0 : -1); }
        }
        this.setFilterText(iText);
        if (this._textbox.setActive)
            this._textbox.setActive();
        //this._textbox.setActive();
    },

    isCustomerEnumType: function () {
        return this._isCustomerEnumType;
    },
    getIsShowWithRefForm: function () {
        return this._isShowWithRefForm;
    },

    StringToList: function (textFields, split) {
        var temp = new Array();
        if (textFields == null || textFields == "") return temp;
        temp = textFields.split(split);
        return temp;
    },

    getRefInfo: function () {
        var info = { "RefType": "983c20c1-a1f4-44ee-8ee2-52ecffa10707", "RefTitle": "", "RefWidth": "580", "RefHeight": "408" };
        info.KeyField = "EValue";
        info.ValueField = "Code";
        info.TextField = "Name";
        return info;
    },

    GetUrl: function (partID, showType, postbackBeforeShowRefForm, noFilter) {
        var cusURI = this._element.cusAttr('CustomURI');
        if (cusURI) { return cusURI; }
        var linkString = this.GetQueryString(partID, showType, postbackBeforeShowRefForm, noFilter);
        var url = "simple.aspx";
        if (url.indexOf("?") == -1) {
            url += "?" + linkString;
        }
        else if (url[url.length - 1] == "?" || url[url.length - 1] == "&") {
            url += linkString;
        }
        else {
            url += "&" + linkString;
        }
        return url;
    },

    GetQueryString: function (partID, showType, postbackBeforeShowRefForm, noFilter) {
        var linkString = "lnk=" + partID + "&CtrlId=" + this._element.cusAttr('CtrlId') + "&chromeType=4&ShowType=" + showType;
        var pre = "&";
        if (postbackBeforeShowRefForm != true)//大多数正常的逻辑
        {
            var extEnumType = this._element.cusAttr("EntityFullName");
            if (extEnumType != null && extEnumType != "") {
                linkString += "&ExtEnumTypeCode=" + encodeURI(extEnumType);
            }
            if (!noFilter) {
                //对URL中的参数不应该是if...else...的处理，而应该是if... if... if...的处理
                var customInParams = "";
                //var isCustItem = this._isCustItems;
                //if(isCustItem || $(this.get_element()).attr('SINs'))

                //此时this.getIsShowWithRefForm一定为true，故此处没必要判断
                //if(this.getIsShowWithRefForm==true)

                //1、首先处理完SINs 接着处理HINs
                if (this._element.cusAttr('SINs')) {
                    var customInParams_SINs = this._element.cusAttr('SINs');
                    if (customInParams_SINs.indexOf(this._splitter1) > -1) {
                        var re = new RegExp(this._splitter1, "g");
                        customInParams_SINs = customInParams_SINs.replace(re, ",");
                    }
                    /*
                    for (var i = 0, len = this._dataSource.length; i < len; i++)
                    {
                        if(G_Trim(this._dataSource[i].Value).length>0) {
                            if(customInParams.length>0) { customInParams += ","; }
                            customInParams += this._dataSource[i].Value;
                        }
                    }
                    */
                    if (customInParams_SINs.length > 0) {
                        if (customInParams_SINs.indexOf(",") > 0) {
                            //多个显示项的情况
                            if (customInParams) customInParams += " and ";
                            customInParams += "EValue in (" + customInParams_SINs + ")";
                        }
                        else {
                            //单个显示项的情况
                            if (customInParams) customInParams += " and ";
                            customInParams += "EValue=" + customInParams_SINs;
                        }
                    }
                }

                //2、处理完SINs 接着处理HINs
                if (this._element.cusAttr('HINs')) {
                    var customInParams_HINs = this._element.cusAttr('HINs');
                    if (customInParams_HINs.indexOf(this._splitter1) > -1) {
                        var re = new RegExp(this._splitter1, "g");
                        customInParams_HINs = customInParams_HINs.replace(re, ",");
                    }
                    if (customInParams_HINs.length > 0) {
                        if (customInParams_HINs.indexOf(",") > 0) {//多个隐藏项之间以,分割
                            if (customInParams) customInParams += " and ";
                            customInParams += "EValue not in (" + customInParams_HINs + ")";
                        }
                        else {
                            if (customInParams) customInParams += " and ";
                            customInParams += "EValue!=" + customInParams_HINs;
                        }
                    }
                }

                //3、接着处理StartI和EndI
                if (this._element.cusAttr("StartI") && this._element.cusAttr("EndI")) {
                    var innerElement = this.get_element();
                    var startItem = innerElement.cusAttr("StartI");
                    var endItem = innerElement.cusAttr("EndI");
                    if (startItem != null && startItem != "") {
                        if (customInParams) customInParams += " and ";
                        customInParams += "EValue>=" + startItem;
                    }
                    if (endItem != null && endItem != "") {
                        if (customInParams.length > 0) { customInParams += " and "; }
                        customInParams += "EValue<=" + endItem;
                    }
                }
                if (customInParams.length > 0) {
                    linkString += "&UBF_CustomFilter=" + encodeURI(customInParams);
                }
                var IsMulTiRefTag = this.get_element().cusAttr("IsMulTiRefTag");
                if (IsMulTiRefTag) {
                    linkString += '&IsMultiRefTag=true'
                }
            }
        }
        return linkString.replace(/#/g, "%23");
    },

    ShowRefForm: function (inputCode) {
        if (this._CancelShowForm) {
            this._CancelShowForm = false;
            return;
        }
        if (!this._IsShowForm) { return; }
        if (!this.getIsShowWithRefForm()) { return; }
        if (_ClientPostBackManager.Runing) { return; } //PostBack进行中取消操作
        var refInfo = this.getRefInfo();
        var url;
        url = this.GetUrl(refInfo.RefType, "ModalRef", false, false);

        if (inputCode && inputCode != "") url += "&QueryNameField=" + refInfo.TextField + "&QueryField=" + refInfo.ValueField + "&" + refInfo.ValueField + "=" + encodeURIComponent(inputCode);
        if (!(inputCode && inputCode != ""))
            inputCode = this._textbox.value;
        if (inputCode && inputCode != "")
            url += "&ValueByClick=" + encodeURIComponent(inputCode);

        var title = refInfo.RefTitle;
        if (!title) title = "";
        var width = refInfo.RefWidth;
        var height = refInfo.RefHeight;
        var isStandard = navigator.userAgent.indexOf('WebKit') > -1 || navigator.userAgent.indexOf('Firefox') > -1;
        var isIE = navigator.userAgent.indexOf('MSIE') > -1
        if ((url.length > 8000 && isStandard) || (isIE && url.length > 2000)) {
            var tmpUrl = "simple.aspx?lnk=" + refInfo.RefType + "&CtrlId=" + this._element.cusAttr('CtrlId') + "&chromeType=4&ShowType=ModalRef";
            var params = url.substring(tmpUrl.length, url.length);
            url = tmpUrl + "&OverLength=1";
            window.Ref_Params = params;
        }

        //如果已经弹出窗口，就不再弹出。避免在输入框输入值后按F2，弹出2此窗口问题。
        if (this._IsDialogOpenning == true)
            return;
        this._IsDialogOpenning = true;
        //===by zzq 弹窗修改
        var __this = this;
        ShowModalDialogForAll(url, title, height, width, false, false, function (ret) {

            __this._IsDialogOpenning = false;

            if (ret != null && typeof (ret) != "boolean")//这里的showRefForm可能是通过FormProcess中的show方法引发的，此时ret为true或false时，这时应该特殊处理
            {
                if (__this._xmlReturnHidden) {
                    __this._xmlReturnHidden.value = ret;
                }

                //Global_RefNotNeedCallback4P = true;//DataGrid.js中3614行再次修改为false，这个不得随意更改

                //gct20090615:如果该参照是个性化跨页签移动到Grid中的情况，且在Grid页签的时候，需要设置个性化标记，因为下面的OnContentChanged要触发ValueChanged
                __this._element = __this._element ? __this._element : Sys.Application.findComponent(__this.$element[0].id);
                var gridID4P = __this._element.cusAttr('GridCltID4P');
                var colID4P = __this._element.cusAttr('ColFldID4P');
                if (gridID4P != null && colID4P != null && $find(gridID4P) != null) {
                    //debugger;
                    //this.set_IsRaiseEvent(false);//----------------------------------------个性化-不抛事件
                    var oldIsPP = __this.get_IsPersonalProcess();
                    __this.set_OldIsPersonalProcess(oldIsPP);//记下原来的标识，以便在处理完后恢复
                    __this.set_IsPersonalProcess(true);//--------------------------------------个性化-同步 ValueChanged的时候需要将控件的值同步到Grid的Cell的值上
                }
                //===by zzq  __this.get_element().name如果为undefinedIE会报错，chrome中不报错，直接跳过if
                if (__this.get_element().name) {
                    if ($E(__this.get_element()).document.children[__this.get_element().name]) {
                        $E(__this.get_element()).document.children[__this.get_element().name].value = ret;
                    }
                }

                __this.OnContentChanged(ret);
            }
            else { __this.set_SelectedValue(__this.get_SelectedValue()); }
            try {
                __this._textbox.focus();
            } catch (e) { }
        })
    },

    //参照返回结果
    OnContentChanged: function (ret) {
        var referenceData = PopupFormHelper.TranslateInfor(ret);
        if (referenceData == null) {
            referenceData = new ReferenceData();
        }
        this.DoContentChanged(referenceData);
    },
    DoContentChanged: function (referenceData) {
        var refInfo = this.getRefInfo();
        var oldValue = this.get_Value();
        var newValue = referenceData.GetValue(refInfo.KeyField);
        if (newValue != oldValue) {
            var len = this._dataSource.length;
            var hasSelectedValue = false;
            for (var i = 0; i < len; i++) {
                if (this._dataSource[i].Value == newValue) {
                    hasSelectedValue = true;
                    break;
                }
            }
            var isCustItem = this._isCustItems;
            var isChanged = false;
            if (newValue != "" || hasSelectedValue) {
                if (!hasSelectedValue) {
                    this.AddItem(newValue, referenceData.GetValue(refInfo.TextField), false);
                    var itemStr = this._itemsHidden.value;
                    if (!itemStr) { itemStr = ""; }
                    if (itemStr.length > 0) { itemStr += this._splitter1; }
                    itemStr += referenceData.GetValue(refInfo.TextField);
                    itemStr += this._splitter2;
                    itemStr += newValue;
                    this._itemsHidden.value = itemStr;
                    this._codeHash[newValue] = referenceData.GetValue(refInfo.ValueField);
                }
                this._codeHash[newValue] = referenceData.GetValue(refInfo.ValueField);
                this._hasCode = true;
                this.set_SelectedValue(newValue);
                isChanged = true;
            } else {
                if (this._HideRequiredFlag) {
                    this.set_SelectedText("");
                    isChanged = true;
                } else { this.set_SelectedValue(this.get_SelectedValue()); }
            }

            this._isCustItems = isCustItem;
            if (isChanged && !this._disableEvent) {
                this._datas = referenceData;
                this._code = referenceData.GetValue(refInfo.ValueField);
                this.raiseonchange(this.createChnageEventArgs(this._datas));
                this.raiseOnValueChanged(Sys.EventArgs.Empty);
                if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                {
                    this.set_IsChanged(true);
                    this.set_IsValueChanged(true);
                }
                this.raiseOnValueChanged4P(Sys.EventArgs.Empty);
            }
        } else if (newValue != "") {
            this._codeHash[newValue] = referenceData.GetValue(refInfo.ValueField);
            this.set_SelectedValue(this.get_SelectedValue());
        }
    },
    createChnageEventArgs: function (data) {
        if (data == undefined) {
            return Sys.EventArgs.Empty;
        }
        //抛出参照数据改变事件，关联控件订阅该事件给相关控件付值
        var args = new UF.UI.ChangeEventArgs();
        args.result = data;
        return args
    },
    AddDynamicItem: function (value, text) {
        if (this.isCustomerEnumType()) {
            this.AddItem(value, text, false);
            var itemStr = this._itemsHidden.value;
            if (!itemStr) { itemStr = ""; }
            if (itemStr.length > 0) { itemStr += this._splitter1; }
            itemStr += text;
            itemStr += this._splitter2;
            itemStr += value;
            this._itemsHidden.value = itemStr;
        }
    },

    onInputReturn: function () {
        this._CancelShowForm = false;//加这一句的原因：U9V2000285434和U9V2000285436
        //输入空值后回车清空参照
        if (this._textbox.value == "") {
            this.OnContentChanged(null);
            return;
        }
        var inputValue = this._textbox.value;
        //CallWebService();
        this.CallXmlHttp(inputValue);
    },

    GetXmlHttpRequest: function () {
        if (!this._xmlhttpRequest) {
            this._xmlhttpRequest = RequestHelper.getXHR();//===by zzq
            //if (this.get_element().document.all)
            //    this._xmlhttpRequest = new ActiveXObject("Msxml2.XMLHTTP");
            //else if (XMLHttpRequest)
            //    this._xmlhttpRequest = new XMLHttpRequest();
        }
    },
    getXHR: function () {
        return RequestHelper.getXHR();
    },

    CallXmlHttp: function (inputValue, isKey) {
        var refInfo = this.getRefInfo();
        var QureyField = (isKey ? refInfo.KeyField : refInfo.ValueField);

        this._inputValue = G_Trim(inputValue);
        var url;

        url = this.GetUrl(refInfo.RefType, "ModalRef", false, false) + "&CommandType=callback&QueryField=" + QureyField + "&QueryNameField=" + refInfo.TextField + "&" + QureyField + "=" + encodeURIComponent(inputValue);

        url = AppendPopupUrl(url);
        if (!this._xmlhttpRequest) {
            //this._xmlhttpRequest = this.getXHR();
            this.GetXmlHttpRequest();
        }
        if (this._xmlhttpRequest) {
            this.ProcessRequest(url, this.CallbackComplete);
        }
    },
    // 手动触发请求参照xml数据
    CallXmlHttpForPaste: function (inputValue, isKey) {
        var refInfo = this.getRefInfo();
        var QureyField = (isKey ? refInfo.KeyField : refInfo.ValueField);

        this._inputValue = G_Trim(inputValue);
        var url;

        url = this.GetUrl(refInfo.RefType, "ModalRef", false, false) + "&CommandType=callback&QueryField=" + QureyField + "&QueryNameField=" + refInfo.TextField + "&" + QureyField + "=" + encodeURIComponent(inputValue);
        url += "&MatchType=5";
        url = AppendPopupUrl(url);
        if (!this._xmlhttpRequest) {
            this.GetXmlHttpRequest();
        }
        if (this._xmlhttpRequest) {
            this.ProcessRequest(url, this.CallbackCompleteForPaste);
        }
    },
    ProcessRequest: function (url, reqReadyFunction) {
        var isStandard = navigator.userAgent.indexOf('WebKit') > -1 || navigator.userAgent.indexOf('Firefox') > -1;
        var isIE = navigator.userAgent.indexOf('MSIE') > -1;
        if (url.indexOf("MatchType=5") > -1) {
            var refInfo = this.getRefInfo();
            var QureyField = refInfo.ValueField;

            //debugger;
            url = url.replace("simple.aspx?", "../mvc/main/BatchReference?");

            var codeFirstIndex = url.indexOf("&" + QureyField);
            var codeLastIndex = url.indexOf("&MatchType");
            var pUrl = url.substring(codeFirstIndex + 1, codeLastIndex);
            var baseUrl = url.substring(0, codeFirstIndex) + url.substring(codeLastIndex) + "&__ipt=true&ContentType=json"
            // var pUrl = this.GetPostUrl(baseUrl, url);
            this._xmlhttpRequest.open("POST", baseUrl, false);
            this._xmlhttpRequest.onreadystatechange = reqReadyFunction;
            this._xmlhttpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            this._xmlhttpRequest.send(pUrl);
            return
        }
        if ((url.length > 8000 && isStandard) || (isIE && url.length > 2000)) {
            alert(Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_ReferenceUrlOverLength);
            try {
                this._textbox.focus();
                this._textbox.select();
            } catch (e) { }
            return;
            /* 由于修改为Postback需要修改PDHelper等，影响面较大，无法估量风险，暂时处理为屏蔽操作
            *  下一版本可以放开此处理逻辑，并修改PDHelper的处理，使PostBack也可以处理校验逻辑
            */
            var baseUrl = window.location.href;
            var pUrl = this.GetPostUrl(baseUrl, url);
            this._xmlhttpRequest.open("POST", baseUrl, false);
            this._xmlhttpRequest.onreadystatechange = this.CallbackComplete;
            this._xmlhttpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            this._xmlhttpRequest.send(pUrl);
        } else {
            this._xmlhttpRequest.open("GET", url, false);
            this._xmlhttpRequest.onreadystatechange = reqReadyFunction;
            this._xmlhttpRequest.send("");
        }
    },
    GetPostUrl: function (baseUrl, url) {
        var bList = this.GetUrlAttributeList(baseUrl);
        var pList = this.GetUrlAttributeList(url);
        for (var i = 0; i < bList.length; i++) {
            for (var j = 0; j < pList.length; j++) {
                if (bList[i].key == pList[j].key) {
                    pList[j].del = true;
                    break;
                }
            }
        }
        var pUrl = "";
        for (var k = 0; k < pList.length; k++) {
            if (!pList[k].del) {
                if (pUrl != "")
                    pUrl += "&";
                pUrl += pList[k].key + "=" + pList[k].value;
            }
        }
        return pUrl;
    },
    GetUrlAttributeList: function (url) {
        var list = [];
        var ps = url.split("?");
        var p;
        if (ps.length == 2)
            p = ps[1];
        if (!p)
            return list;
        pl = p.split("&");
        for (var i = 0; i < pl.length; i++) {
            list[i] = new Object();
            list[i].key = pl[i].split("=")[0];
            list[i].value = pl[i].substring(pl[i].split("=")[0].length + 1);
        }
        return list;
    },

    clickInRect: function () {
        var startCalendarY = this.get_popup().offsetTop + 2;
        var endCalendarY = this.get_popup().offsetTop + this.get_popup().offsetHeight - 2;
        var startCalendarX = this.get_popup().offsetLeft + 5;
        var endCalendarX = this.get_popup().offsetLeft + this.get_popup().offsetWidth - 5;
        if (event.clientX > startCalendarX && event.clientX < endCalendarX) {
            if (event.clientY > startCalendarY && event.clientY < endCalendarY) {
                return true;
            }
        }
        return false;
    },

    doKeypress: function () {
        switch (event.keyCode) {
            case 13:
                var isReturn = true;
                if (this._IsShow) {
                    isReturn = false;
                    if (this._select1.selectedIndex >= 0) {
                        isReturn = true;
                        this.popup_onchange();
                        this.hide_Popup();
                    }
                    else if (this._select1.childNodes.length > 0) {
                        this._select1.selectedIndex = 0;
                    }
                }
                if (isReturn) {
                    this._textbox.focus();
                    this._textbox.select();
                }
                window.$Event(event).stopPropagation();
                $Event(event).preventDefault();
                break;
            case 40:
                if (event.altKey)
                    return;
                if (this.get_SelectControl().selectedIndex < (this.get_SelectControl().options.length - 1)) {
                    var selectControl = this.get_SelectControl();
                    selectControl.selectedIndex++;
                    this._textbox.value = this.getTextByValue(selectControl.value);
                    this._textbox.cusAttr("Evalue", this.getSelectedValueByValue(selectControl.value));

                    this.setTextboxSelectedText();
                    this._popup.focus();
                }
                $Event(event).stopPropagation();
                $Event(event).preventDefault();
                break;
            case 38:
                if (event.altKey)
                    return;
                if (this.get_SelectControl().selectedIndex > 0) {
                    var selectControl = this.get_SelectControl();
                    selectControl.selectedIndex--;
                    this._textbox.value = this.getTextByValue(selectControl.value);
                    this._textbox.cusAttr("Evalue", this.getSelectedValueByValue(selectControl.value));

                    this.setTextboxSelectedText();
                    this._popup.focus();
                }
                //popup_onchange();
                $Event(event).stopPropagation();
                $Event(event).preventDefault();
                break;
            default:
                if (!event.shiftKey) {
                    this._textbox.focus();
                    if (event.keyCode == KeyCode.tab) {
                        $Event(event).preventDefault();
                        $Event(event).preventDefault();
                    }
                }
                break;
        }
    },

    setTextboxSelectedText: function () {
        var filterText = this.getFilterText();
        var fullText = this._textbox.value;
        if (fullText != null && fullText.length > 0) {
            if (filterText != null && filterText.length > 0) {
                if (fullText.indexOf(filterText) == 0) { this._textbox.select(filterText.length, fullText.length - filterText.length); }
                else { this._textbox.select(); }
            }
            else { this._textbox.select(); }
        }
    },

    //Public Methods
    getIndexByValue: function (val) {
        for (var idx = 0, len = this._dataSource.length; idx < len; idx++) {
            if (this._dataSource[idx].Value == val) {
                return idx;
            }
        }
        return -1;
    },

    FindByValue: function (val) {
        for (var idx = 0, len = this._dataSource.length; idx < len; idx++) {
            if (this._dataSource[idx].Value == val) {
                return this._dataSource[idx];
            }
        }
        return null;
    },

    FindByText: function (val) {
        var firstIndex = -1;
        var valold = val;
        val = val.replace(/ /g, " ");//&nbsp;会被解析为一个类似空格，但是又不和空格相等的内容，这里对这种类似空格转为真正的空格
        for (var idx = 0, len = this._dataSource.length; idx < len; idx++) {
            //chenchb,20190429，这里进行或判断，存在一种相等则进入内部逻辑
            if (this._dataSource[idx].Text == val || this._dataSource[idx].Text == valold) {
                if (firstIndex == -1)
                    firstIndex = idx;

                if (this._textbox.cusAttr("Evalue") == this._dataSource[idx].Value)//同时比较Evalue是否匹配
                    return this._dataSource[idx];
            }
        }
        if (firstIndex != -1)
            return this._dataSource[firstIndex];
        else
            return null;
    },

    ClearSelection: function () {
        for (var i = 0, len = this._dataSource.length; i < len; i++) {
            this._dataSource[i].Selected = false;
        }
    },

    button_click: function () {
        this._CancelShowForm = false;
        var isRef = this.getIsShowWithRefForm();
        if (isRef) {
            this.ShowRefForm();
        }
        else {
            if (this._isFiltering && this._IsShow) { return; }
            if (this.get_popup()) {
                if (this._IsShow) {
                    this.CloseMenu();
                }
                else {
                    this.show_Popup();
                    this._select1.focus(); //weiyin
                    //this._popup.focus();
                }
            }
        }
    },

    textboxKeydown: function () {
        if (this.getIsShowWithRefForm()) { return; }
        var editable = (this.get_ReadOnly() == false && this.get_Enabled() == true);
        if (window.event.keyCode == 9 || window.event.keyCode == KeyCode.left || window.event.keyCode == KeyCode.right) { }
        else if (window.event.keyCode == KeyCode.enter) {
            if (editable) {
                var oldFText = this.getFilterText();
                var iText = this._textbox.value;
                if ((oldFText == null || oldFText == "")) {
                    if (iText == this.get_Text() || iText == "") { return; }
                    else if (this._hasCode && iText == this.get_Code()) { return; }
                }
                if (!(oldFText == iText.toLowerCase())) {
                    this.doFilter();
                }
                else {
                    if (this.filterKeyDownTimeOut) { window.clearTimeout(this.filterKeyDownTimeOut); }
                    if (this._IsShow) { this.doKeypress(); }
                    else { return; }
                }
                window.$Event(event).stopPropagation();
                $Event(event).preventDefault();
                return false;
            }
        }
        else if (window.event.keyCode == KeyCode.ESC) {
            if (editable) {
                //关闭popup，并恢复旧值
                this.clear_Popup();
                this.set_SelectedValue(this.get_SelectedValue());
                window.$Event(event).stopPropagation();
                $Event(event).preventDefault();
                return false;
            }
        }
        else if (window.event.keyCode == KeyCode.down || window.event.keyCode == KeyCode.up) {
            if (editable) {
                //mahx 20230616 这个方法有很大问题，如果客户输入内容，向下进入到下拉框，那个focus一定会触发输入框的失去焦点，这样导致输入框触发onchange，刷新页面，值也选不中。
                //功能属于废了，到了6.0之后再也没好用过，如果后面想用，再想办法。
                // if (!this._isFiltering) { return; }
                // if (!this._IsShow) { this.show_Popup(); }
                // this._select1.focus();
                // $Event(event).stopPropagation();
                // $Event(event).preventDefault();
                return false;
            }
        }
        else {
            if (window.event.altKey) { }
            else if (window.event.keyCode == KeyCode.F2) { }   //放出F2
            else if (window.event.keyCode == 118) { }   //放出F7,焦点在下拉控件时F7应可弹出帮助
            else if (window.event.ctrlKey || window.event.keyCode == 123) {
                if (event.keyCode == KeyCode.space) {
                    window.$Event(event).stopPropagation();
                    $Event(event).preventDefault();
                }
            }
            else if (this.get_AutoComplete() == false) {
                if (window.event.keyCode != KeyCode.left && window.event.keyCode != KeyCode.right) {
                    if (this.filterKeyDownTimeOut) { window.clearTimeout(this.filterKeyDownTimeOut); }
                }
                // if(window.event.keyCode==KeyCode.backspace||window.event.keyCode==KeyCode.del||window.event.keyCode==KeyCode.left||window.event.keyCode==KeyCode.right)
                // {
                // if($(this.get_element()).attr('R') == "y")
                // {
                // event.cancelBubble=true;	
                // event.returnValue=false; 
                // }
                // else if(window.event.keyCode==KeyCode.backspace||window.event.keyCode==KeyCode.del)                
                // {
                // if(!this._readOnly)
                // {                        
                // var workRange=document.selection.createRange();
                // workRange.select();
                // this._textbox.value="";
                // } 
                // }
                // }
                // else//收入正常输入字符的情况
                {
                    if (editable) { this._isFiltering = true; }
                    window.$Event(event).stopPropagation();
                    //event.returnValue=false;    
                    //return false;
                }
            }
        }
    },
    textboxKeyup: function () {
        if (this.get_ReadOnly() == false && this.get_Enabled() == true) {
            if (this.getIsShowWithRefForm()) { return; }
            if (!this._isFiltering) { return; }
            if (window.event.ctrlKey || window.event.keyCode == KeyCode.ESC || window.event.keyCode == KeyCode.up || window.event.keyCode == KeyCode.down) { return; }
            if (window.event.keyCode != KeyCode.enter) {
                var oldFilterText = this.getFilterText();
                if (oldFilterText == null) { oldFilterText = ""; }
                var iText = this._textbox.value;
                if (iText == null) { iText = ""; }
                var vText = this.get_Text();
                if (!(oldFilterText == iText.toLowerCase()) || ((iText == null || iText == "") && !this._HideRequiredFlag)) {
                    if (this.filterKeyDownTimeOut) { window.clearTimeout(this.filterKeyDownTimeOut); }
                    this.filterKeyDownTimeOut = window.setTimeout(new Function("$find('" + this.get_id() + "').popupStartFilter(\"" + encodeURI(this._textbox.value) + "\");"), 200);
                }
            }
        }
    },

    onkeyDown: function () {
        if (this._button.disabled)
            return;
        switch (window.event.keyCode) {
            case KeyCode.F2:
                this.button_click();
                window.$Event(event).stopPropagation();
                break;
            case KeyCode.down:
                if (this.getIsShowWithRefForm()) {
                    var iText = (this._hasCode ? this.get_Code() : this.get_Text());
                    if (iText != this._textbox.value) {
                        this.onInputReturn();
                        window.$Event(event).stopPropagation();
                    }
                }
                else if (window.event.ctrlKey) {
                    this.button_click();
                    window.$Event(event).stopPropagation();
                }
                break;
            case KeyCode.tab:
            case 13:
                if (this.getIsShowWithRefForm()) {
                    var iText = this._textbox.value;
                    if (iText != this._code) {
                        this.onInputReturn();
                        window.$Event(event).stopPropagation();
                        $Event(event).preventDefault();
                    }
                }
                else if (!(this._curactb && this._curactb.actb_display)) {
                    this.textboxChange();
                }
                break;
            case KeyCode.up:
            case KeyCode.down:
                if (this.getIsShowWithRefForm()) {
                    var iText = (this._hasCode ? this.get_Code() : this.get_Text());
                    if (iText != this._textbox.value) {
                        this.onInputReturn();
                        window.$Event(event).stopPropagation();
                    }
                }
                break;
        }
    },

    textboxChange: function () {
        var aE = null;
        var _this = this;
        setTimeout(function () {  // 跨浏览器兼容，此处activeElement得到的元素chrome中获取的永远是body，而IE中接收到的是当前鼠标点击的元素，导致分支判断逻辑不一致出现问题，所以放到setTimeout中待加载完毕后再获取当前元素 -- weiyin -- 2016.12.16
            if (_this._element.ownerDocument) {
                aE = _this._element.ownerDocument.activeElement;
            } else {
                aE = _this._element.document.activeElement;
            }
            if (_this._element.contains(aE) && aE.tagName != "BUTTON" || (_this._select1 && _this._select1.contains(aE))) {
                if (_this._textbox.setActive)
                    _this._textbox.setActive();
                // _this._textbox.focus();
                return;
            }
            if (_this._curactb && _this._curactb.actb_display) {
                try {
                    _this._textbox.focus();
                }
                catch (e) { }
                return;
            }
            var oldSelectedValue = _this.get_SelectedValue();
            if (_this._select1 && _this._IsShow) {
                if (_this._select1.childNodes.length > 0 || _this._HideRequiredFlag) { _this.set_SelectedValue(_this._select1.value); }
                else { _this.set_SelectedValue(oldSelectedValue); }
                _this.clear_Popup();
            }
            else {
                var textBoxValue = _this._textbox.value;
                if (textBoxValue != "" || _this._HideRequiredFlag) { _this.set_SelectedText(textBoxValue); }
                else {
                    _this.set_SelectedValue(_this.get_SelectedValue());
                }
            }
            /*if(_this.get_SelectedValue()=="")
            { 
              _this.set_SelectedText(textBoxValue);
            }
            */
            if (oldSelectedValue != _this.get_SelectedValue()) {
                _this.raiseonchange(Sys.EventArgs.Empty);
                _this.raiseOnValueChanged(Sys.EventArgs.Empty);
                if (_this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                {
                    _this.set_IsChanged(true);
                    _this.set_IsValueChanged(true);
                }
                _this.raiseOnValueChanged4P(Sys.EventArgs.Empty);
            }
        }, 0);
    },

    textboxFocus: function () {
        var _this = this;
        this.ControlFocus();

        if (this.get_AutoComplete() == true) {
            if (!this._curactb && this.get_ReadOnly() == false && this.get_Enabled() == true) {
                Array.clear(this._autoCompleteArray);
                for (var i = 0, len = this._dataSource.length; i < len; i++) {
                    this._autoCompleteArray[i] = this._dataSource[i].Text;
                }
                this._curactb = new actb(this._textbox.id, this._autoCompleteArray);
                //window.status+="已经启用自动完成功能";
            }
        }
        if (this.getIsShowWithRefForm()) {
            if (typeof (this._code) == "undefined" || this._code == null) { this._code = ""; }
            this._textbox.value = this._code;
        }
        if (!this._isFiltering) {
            this._textbox.select();
            // window.setTimeout(function(){_this._textbox.select();},0);  //解决chrome44版本及以下的焦点进入没法全新文本的问题 -- 20170425 -- weiyina
        }
    },

    textboxBlur: function () {
        var aE = window.event.relatedTarget;
        // if (this._element.ownerDocument) {
        //     aE = this._element.ownerDocument.activeElement;
        // } else {
        //     aE = this._element.document.activeElement;
        // }
        var hasFocus = false;
        if (this._element.contains(aE) && aE.tagName != "BUTTON" || (this._select1 && this._select1.contains(aE))) {
            hasFocus = true;
        }
        if (this.getIsShowWithRefForm()) {
            if (this._code != this._textbox.value) {
                if (!hasFocus) { this.onInputReturn(); }
            }
            else {
                this.ControlBlur();
                this._textbox.value = this.get_Text();
                this._textbox.cusAttr("Evalue", this.get_SelectedValue());
            }
            return;
        }
        if (hasFocus) {
            return;
        }
        if (this._curactb && this._curactb.actb_display) {
            try {
                this._textbox.focus();
            }
            catch (e) { }
            return;
        }
        this.ControlBlur();
        this.textboxChange();
    },

    textboxPaste: function () {
        if (this.getIsShowWithRefForm()) { return; }
        //$Event(event).preventDefault();
        var oldFilterText = this.getFilterText();
        var iText = "";//this._textbox.value;
        if (window.clipboardData) { iText = window.clipboardData.getData("Text"); }
        if (!(oldFilterText == iText.toLowerCase()) || ((iText == null || iText == "") && !this._HideRequiredFlag)) {
            if (this.filterKeyDownTimeOut) { window.clearTimeout(this.filterKeyDownTimeOut); }
            this.filterKeyDownTimeOut = window.setTimeout(new Function("$find('" + this.get_id() + "').popupStartFilter(\"" + encodeURI(iText) + "\");"), 200);
            event.cancelBubble = false;
        }
        //$Event(event).preventDefault();
    },

    textboxDrag: function () {
        event.cancelBubble = false;
        $Event(event).preventDefault();
    },

    popup_onchange: function () {
        if (this._isFiltering) { this.clear_Popup(); }
        var oldValue = this.get_SelectedValue();
        this.set_SelectedValue(this._select1.value);
        if (this.get_SelectedValue() != oldValue) {
            this.raiseonchange(Sys.EventArgs.Empty);
            this.raiseOnValueChanged(Sys.EventArgs.Empty);
            if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
            {
                this.set_IsChanged(true);
                this.set_IsValueChanged(true);
            }
            this.raiseOnValueChanged4P(Sys.EventArgs.Empty);
        }
    },

    popup_onmousedown: function () {
        var aE = window.document.activeElement;
        //mahx 取消冒泡為了阻止input失去焦点触发后面的postback，在这里进行拦借，但是还不能阻止select被选中
        if (this._element.contains(aE)) {
            this._select1.value = window.event.target.value
            $Event(event).stopPropagation();
            $Event(event).preventDefault();
        }
    },

    getBoundingClientRect: function () {
        return this.get_element().getBoundingClientRect()
    },

    BtnMouseOver: function (button) {
        //        this._button.className = this.btnmouseOverClass;
    },

    BtnMouseOut: function () {
        //        this._button.className = this.btnmouseOutClass;
    },

    BtnMouseDown: function () {
        var aE = window.document.activeElement;
        //mahx 取消冒泡為了阻止input失去焦点触发后面的postback，在这里进行拦借，但是还不能阻止select被选中
        if (this._element.contains(aE)) {
            $Event(event).stopPropagation();
            $Event(event).preventDefault();
        }
    },

    get_Splitter4Item: function () {
        return this._splitter1;//Item项之间的分隔符，相当于分号
    },

    get_Splitter4ItemData: function () {
        return this._splitter2;//一个Item中，各个数据之间的分隔符，相当于逗号
    },

    get_AutoComplete: function () {
        return this._autoComplete;
    },

    set_AutoComplete: function (isAC) {
        if (isAC != null && isAC.toString().toLowerCase() == "true")
            this._autoComplete = true;
        else
            this._autoComplete = false;
    },

    SetControlAttribute: function (attrArray) {
        UF.UI.DropDownList.callBaseMethod(this, 'SetControlAttribute');
        if (attrArray && attrArray.length > 2) {
            this.set_IsReloadItems(true);
            var e = this.get_element();
            e.Items = attrArray[2];
            e.HINs = attrArray[3];
            e.SINs = attrArray[4];
            e.StartI = attrArray[5];
            e.EndI = attrArray[6];
            this.set_Items(e.Items);
            if (e.StartI.length > 0 || e.EndI.length > 0) { this.ResetItemByInterval(e.StartI, e.EndI); }
            if (e.HINs) {
                this.ResetItem(true, e.HINs);
                this._hidden.value = this.get_Value();
            }
            if (e.SINs) {
                this.ClearItems();
                this.ResetItem(false, e.SINs);
                this._hidden.value = this.get_Value();
            }
            this.clear_Popup();
        }
    }
}

UF.UI.DropDownList.registerClass('UF.UI.DropDownList', UF.UI.InputControl);

function DropDownListTemplate() { }
DropDownListTemplate.Enabled = InputControlTemplate.Enabled;
DropDownListTemplate.ReadOnly = InputControlTemplate.ReadOnly;
DropDownListTemplate.TBClassName = InputControlTemplate.TBClassName;
DropDownListTemplate.TBClassName_R = InputControlTemplate.TBClassName_R;
DropDownListTemplate.TBClassName_D = InputControlTemplate.TBClassName_D;
DropDownListTemplate.BtnClassName = "btn DDLBtn";
DropDownListTemplate.BtnClassName_Dis = "btn DDLBtn_Dis";
DropDownListTemplate.BtnClassName_Ref = "btn RefBtn";
DropDownListTemplate.BtnClassName_Ref_Dis = "btn RefBtn_Dis";
DropDownListTemplate.BtnClassName_MouseOver = "btn DDLBtnMO";
DropDownListTemplate.BtnClassName_Ref_MouseOver = "btn RefBtnMO";
DropDownListTemplate.PopupMinWidth = 150;
DropDownListTemplate.PopupMinWidth2 = 240;;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.Label = function(element) {

    UF.UI.Label.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    var _this = this;
    this._datas;
    this._selectIndex = -1;
    this._assoControl = null;
    this._readOnly = false;
    this._enabledEx = true;
    this._showLabelFormAfterCallBack = "false";
    this._isMultiOrg;
    this._assControlKeyField;
    this._dataGetter;
    this._NeedConvIDs;
    this._entityFullName;
    this.EntityFullNameFlag = "EntityFullName";
    this.SrcOrgFlag = "SrcOrg";
    this._isCustomerMultiOrg = false;
    // Handler
    this._onclickHandler;
    this._title = ""; //默认title
}

UF.UI.Label.prototype = {

    initialize: function() {
        this.$element = $(this._element);
        this._title = this.$element.attr('title');
        if (this._element.parentNode) {
            this._element.className += " textEclipsis";
            this.setMultiLangToolTip();
        }
        if (this._element.cusAttr('PartID') === null) {
            return;
        }
        UF.UI.Label.callBaseMethod(this, 'initialize');

        // TODO: add your initalization code here
        this._isMultiOrg = this._element.cusAttr("ISMultiOrg");
        this.initControl();
        // Create delegates Attach events
        this.RemoveMouseHandler();
        this.setMultiLangToolTip();
         //超出父级，省略号
        // this.textEclipsis(); 

    },
    //超出父级，省略号
    textEclipsis:function(){
        if(this.$element.css("display")=="none")return;
        //lable字符长度
           var $elementLength=this.$element.html().length;
           //大于4个字符，效率考虑，粗滤过滤，不分中英文
           if ($elementLength>4){
               //父级宽度
               var itemParentWidth=this.$element.parent().width();
               //如果lable宽度大于父级宽度
                if(this.$element.width() > itemParentWidth){
                     //display:block显示，配合.textEclipsis省略号显示
                     this.$element.css("display","block");
                     this.$element.css("overflow","hidden");
                }
            }
    },
    //设置多语言 tooltip
    setMultiLangToolTip: function() {
        if (this._title === "") {
            this.$element.attr('title', this.get_element().innerText);
        } else {
            this.$element.attr('title', this._title);
        }
    },
    dispose: function() {
        // TODO: add your cleanup code here
        this.cleanupEvent();

        if (this._datas) {
            this._datas.dispose();
            this._datas = null;
        }
        this._assoControl = null;
        this._enabledEx = null;

        UF.UI.Label.callBaseMethod(this, 'dispose');
    },
    cleanupEvent: function() {
        if (this._onclickHandler) {
            $removeHandler(this._element, "click", this._onclickHandler);
            this._onclickHandler = null;
        }
    },

    // TODO: (Step 2) Add your property accessors here
    get_Type: function() {
        return ControlType.Label;
    },
    getAllData: function(code, name) {
        var allData = [];
        allData[0] = code;
        allData[1] = name;
        allData[2] = this._datas;
        return allData;
    },
    get_ReadOnly: function() {
        return this._readOnly;
    },

    set_ReadOnly: function(isReadOnly) {
        if (!this.get_Enabled()) //由于客户端区分ReadOnly和Enabled状态，所以在设置ReadOnly的时候，要优先考虑Enabled属性
            return;
        this._readOnly = isReadOnly;
        this.ResetReadOnly();
    },

    //    lbClick : function (){
    //        debugger;
    //        event.cancelBubble=true;
    //        event.returnValue=false;
    //        return false;
    //    },
    ResetReadOnly: function(isInit) {
        if (this.get_EnabledEx() == false) //如果是MS控件的不可用状态，则设置只读失效
            return;
        this.cleanupEvent();
        if (isInit != true) {
            if (this._readOnly) {
                //this.get_element().style.color="#808080";
            } else {
                this._element.style.color = "#000000";
            }
        }
        this._onclickHandler = Function.createDelegate(this, this.onMouseUp);
        $addHandler(this._element, "click", this._onclickHandler);
    },

    getData: function (strField) {
        return this._datas.GetValue(strField);
    },

    get_Datas: function () {
        return this._datas;
    },
    initControl: function () {
        if (this._isMultiOrg == "true") {
            this._assoControl = document.getElementById(this._element.cusAttr("AssControl"));
            this._entityFullName = this.getAssoControl().cusAttr(this.EntityFullNameFlag);
            this._dataGetter = new DataGetter();
            this._MultiOrg = this.getAssoControl().cusAttr(this.SrcOrgFlag);
            this._NeedConvIDs = this.getAssoControl().cusAttr("NeedConvIDs");
            this._assControlKeyField = this.getAssoControl().cusAttr("KeyField");
            this._isCustomerMultiOrg = this.getAssoControl().cusAttr("CustomerMulti");
        }
        this._readOnly = this._element.cusAttr('R');
        this._enabledEx = this._element.cusAttr("EnabledEx");
        if (this._readOnly == "Y") {
            this._readOnly = true;
        } else {
            this._readOnly = false;
        }
        this.ResetReadOnly(true);
        if (this._element.cusAttr('ShowLabelFormAfterCallBack') != null)
            this._showLabelFormAfterCallBack = this._element.cusAttr('ShowLabelFormAfterCallBack').toString().toLowerCase();


    },

    set_PartID: function (pID) {
        this._element.cusAttr('PartID', pID);
    },

    onMouseUp: function() {
        if (_ClientCallBackManager && _ClientCallBackManager.Runing) //如果在Callback期间，不处理
            return false;
        if ($(this._element).attr('disabled') == "disabled")
            return false;
        var strOnclick = this._element.getAttribute('onclick');
        var pID = this._element.cusAttr('PartID');
        if (!strOnclick && pID) {
            this.raiseBeforeLoadData(Sys.EventArgs.Empty);
            if (this._showLabelFormAfterCallBack != "true")
                this.ShowLabelForm();
        }
    },
    DoContentChanged: function(referenceData) {
        _this._datas = referenceData;
        var args = new UF.UI.ChangeEventArgs();
        args.result = _this._datas;
        _this.raiseContentChanged(args);
    },
    OnAfterWindowClose: function(ret) {
        /*by zhangzhang，V2SP1早期修改 删除多组织相关逻辑，不判断多组织*/

        ret = HtmlHelper.HtmlDecode(ret);
        if (!this._readOnly && !this.isLableDisabled()) {
            var referenceData = null;
            if (ret) {
                referenceData = this.TranslateInfor(ret);
                if (referenceData == null) {
                    referenceData = new ReferenceData();
                } else {
                    var keyField = "ID";
                    var keyValue = referenceData.GetValue(keyField);
                    if (keyValue) {
                        var para = {};
                        para.key = keyField;
                        para.value = keyValue;
                        var parameters = [];
                        parameters.push(para);
                        $Cache$RemoveByQueryPara(parameters);
                    }
                }
                _this = this;
                this.DoContentChanged(referenceData);
            }
        }
    },

    isLableDisabled: function() {
        var t = this.get_element();
        if (t == null)
            return true;
        for (t; t.parentElement; t = t.parentElement) {
            if (t.parentElement.disabled)
                return true;
        }
        return false;
    },

    ShowLabelForm: function() {
        var url = this.GetUrl(this._element.cusAttr('PartID'), "TitleLink");
        //
        if (this._isMultiOrg == "true" && this.getAssoControl().control.get_Key() != -1) {
            this._entityFullName = this.getAssoControl().cusAttr(this.EntityFullNameFlag);
            url += "&EntityFullName=" + this._entityFullName;

            var dataorgCID = this.getAssoControl().cusAttr("DataOrgControl");
            if (dataorgCID) {
                var c = $find(dataorgCID);
                if (c) {
                    if (c.get_Key() != -1) {
                        url += "&DataOrg=" + c._DataOrg;
                    }
                }
            }
        }
        //
        var title = this._element.cusAttr('WinTitle');
        var titleT = this._element.innerText;
        if (title == null || title == "") //如果没有指定WinTitle属性，则取innerText为弹出Form的标题
        {
            title = titleT;
        }
        if (!title) title = "";
        var width = this._element.cusAttr('WinWidth');
        var height = this._element.cusAttr('WinHeight');
        var HideStatusBar = false;
        if (this._element.cusAttr('HideStatusBar') && this._element.cusAttr('HideStatusBar') == "Y")
            HideStatusBar = true;

        //如果是多组织
        if (this._MultiOrg) {
            var urlEx = this.getAssoControl().control.get_SrcOrg();
            url += "&MultiOrgID=" + urlEx;
        }
        //
        var ret = ShowModalDialogForAll(url, title, height, width, HideStatusBar, false, this);

    },
    showDialogCallback: function(ret) {
        this.OnAfterWindowClose(ret);
    },
    get_Enabled: function() {
        return !this._readOnly;
    },

    set_Enabled: function(isEnabled) {
        this._readOnly = !isEnabled;
        this.ResetReadOnly();
    },

    get_EnabledEx: function() {
        return this._enabledEx;
    },

    set_EnabledEx: function(isEnabled) {
        if (isEnabled != null && isEnabled.toString().toLowerCase() == "false")
            this._enabledEx = false;
        else
            this._enabledEx = true;
        this.ResetEnabledEx();
    },

    ResetEnabledEx: function() {
        this.cleanupEvent();
        if (this._enabledEx) {
            this._element.style.color = "#000000";
            this._onclickHandler = Function.createDelegate(this, this.onMouseUp);
            $addHandler(this._element, "click", this._onclickHandler);
        } else {
            this._element.style.color = "#808080";
        }
    },

    getAssoControl: function() {
        if (!this._assoControl) {
            this.SearchAssoFieldControls();
        }
        return this._assoControl;
    },
    SearchAssoFieldControls: function() {
        ///有性能问题????
        //var fieldCtrls=this.get_element().document.getElementsByTagName("span");
        var fieldCtrls = window.document.getElementsByTagName("span");
        for (var i = 0, len = fieldCtrls.length; i < len; i++) {
            var fieldCtrl = fieldCtrls[i];
            if (!fieldCtrl.control || !UF.UI.Control.isInstanceOfType(fieldCtrl.control) || !fieldCtrl.control.get_Type() || !(fieldCtrl.control.get_Type() == ControlType.DropDownList || fieldCtrl.control.get_Type() == ControlType.Reference))
                continue;
            if (fieldCtrl.control.get_Visible()) {
                var l = fieldCtrl.cusAttr("L");
                if (l) {
                    if (this.get_id().indexOf(l) >= 0) {
                        this._assoControl = fieldCtrl;
                        break;
                    }
                }
            }
        }
        return this._assoControl;
    },
    setSelectValueToControl: function(results) {
        var ass = this.getAssoControl();
        if (ass) {
            ass.control.SetFocus();
            if (this._selectIndex >= 0) {
                ass.control.set_Value(results.Rows[this._selectIndex]["Code"]);
            }
        }
    },
    ReplaceResult: function(ret, keyField, needConvIDs) {
        this.referenceData = ret;
        if (this._isCustomerMultiOrg == "true") {
            _this = this;
            this.DoContentChanged(ret);
            return;
        }

        var params = this.InitMultiOrgParams(ret, keyField, needConvIDs, this._entityFullName);
        this._dataGetter.Do(params, this.GetResult, this);
    },
    GetResult: function(paraResult, userContext) {
        _this = userContext;

        if ((paraResult != null) && (paraResult.trim() != "")) {
            var result = Sys.Serialization.JavaScriptSerializer.deserialize(paraResult);
            var ids = result.AllDatas;
            for (var i = 0; i < ids.length; i++) {
                if (ids[i]) {
                    var v = ids[i].split(":");
                    if (v.length == 2) {
                        /*var vs = v[1].split(",");                        
                        for(var j=0;j<_this.referenceData.Rows.length;j++){                        
                            eval("_this.referenceData.Rows[j]"+"."+v[0]+"='"+vs[j]+"'");
                        } */
                        _this.referenceData.SetValue(v[0], v[1]);
                    }
                }
            }
            _this.DoContentChanged(_this.referenceData);
        }
    },
    TranslateInfor: function (refInfoXml) {//by zzq 获取xml数据，并且有选中的标记IsSelected="Y" 通过this._selectIndex进行选中 
        var results = new ReferenceData();
        if (refInfoXml == null || refInfoXml == "") return results;
        var dom = PopupFormHelper.StringToXMLDom(refInfoXml);
        var returnNodes = dom.getElementsByTagName("ReferenceReturn");
        for (var i = 0; i < returnNodes.length; i++) {
            var result = new Array();
            var curRow = returnNodes[i];
            var selectTag = curRow.getAttribute("IsSelected");
            if (selectTag) {
                if (selectTag == "Y") {
                    this._selectIndex = i;
                }
            }
            var fieldNodes = curRow.getElementsByTagName("ReturnField");
            for (var j = 0; j < fieldNodes.length; j++) {
                var item = fieldNodes[j];
                result[item.getAttribute("name")] = item.getAttribute("value");
            }
            results.Rows[i] = result;
            if (selectTag) {
                if (selectTag == "Y") {
                    results.Rows[i].Selected = true;
                }
            }
        }
        //

        //
        this.setSelectValueToControl(results);
        return results;
    },
    set_ReadOnlyEx: function(isReadOnly) {
        this._readOnly = isReadOnly;
    },
    set_EventLabel: function (isEventLabel) {
        if (isEventLabel != null && isEventLabel.toLowerCase() == "true")
            this._element.className = "ELbl";
        else
            this._element.className = "normalLabel";
    },
    get_EventLabel: function () {
        if (this._element.className != null && this._element.className == "ELbl")
            return true;
        else
            return false;
    },
    set_Value: function (val) {
        this._element.innerText = val;
    },
    get_Value: function () {
        return this._element.innerText;
    },
    set_Text: function (html) {
        this._element.innerHTML = html;
    },
    get_Text: function () {
        return this._element.innerHTML;
    }
}

UF.UI.Label.registerClass('UF.UI.Label', UF.UI.PopupForm);;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

//var Global_RefNotNeedCallback4P = false;//用来标识参照是按钮选择还是直接录入编码，默认值为false
UF.UI.Reference = function (element) {
    UF.UI.Reference.initializeBase(this, [element]);
    //region  Init
    var _this = this;
    //===Extends
    //this._cVal = 0;
    //this._valIsEmpty = true;
    //this._textInputHandler

    this.AlwaysFirechangeEvent = false;//增加值改变事件
    // TODO : (Step 1) Add your property variables here
    this.AlwaysFirechangeEvent = false;
    this.$element;
    this._oldKey;
    this._oldValue; //用于不需要校验时的判断数据变更
    this._oldText; //批量修改不成功时需要恢复
    this._textbox;
    this._button;
    this._hidden;
    this._hiddenReturn; //wanglei: 用于返回 参照的 返回xml 数据
    this._tagHidden;
    this._datas;
    this._key4Simulator = "";
    this._key = "";
    this._value = "";
    this._text = "";
    this._eventCounter = 0;
    this._keyChanged = false;
    this._IsShowForm = true;
    this._IsLoadDefaultParams = true;
    this._CustomInParams;
    this._xmlhttpRequest;
    this._dataGetter;
    this._IsPostBack = false;
    this._inputValue;
    // Handler
    this._elementkeydownHandler;
    this._textboxfocusHandler;
    this._textboxblurHandler;
    this._textboxkeypressHandler;
    this._textboxpasteHandler;

    this._buttonclickHandler;
    this._btnmouseoverHandler;
    this._btnmouseoutHandler;
    this._isNeedValidate = true; //gct20111116 【参照约定】：_isNeedValidate为false，按正常的逻辑应该是表明不再需要发起CallBack取值和CallBack校验，录入的是什么值就是什么值，不管这个值是不是有效的参照值。
    //gct20111129但是目前_isNeedValidate为false，仍然走callback校验逻辑，在callback校验后，再处理，这不是一个很好的方案，但是开发部有些已经在这个不好的方案上做了自己的逻辑处理，修改不了了。

    this._isValidating = false;
    this._isPressEnterKey = false;
    this._MultiOrg;
    this._isMultiOrg = false;
    this._MultiOrgHiddenID;
    this._NeedConvIDs;
    this.SrcOrgFlag = "SrcOrg";
    this._autoCompleteArray = new Array();
    this._focusEventSource = "";
    this._autoComplete = false;
    this._CancelShowForm = false; //用于callback设置参数后，主动调弹出窗口问题
    this._entityFullName;
    this._isForceFireContentChange = false;
    this.EntityFullNameFlag = "EntityFullName";
    this._isCustomerMultiOrg = false;
    this.postbackBeforeShowRefForm = false; //gct20081010:区别ShowRefForm是不是postbackBeforeShowRefForm
    this.referenceData;
    this._ChildToParentOrg = null; //多组织参照时使用
    this._DataOrgControl = null;
    this._DataOrg = null;
    this._IsDialogOpenning = false;
    this._IsShowFormWhenNoMatchValue = true;
    this._autoCompleteOpath = "";
    this._textBoxIsValueNotText = false;
    this.dealXmlArray = []

    this.searchAdapter = null; //自动 搜索 完成类.
    this.searchKey = "$$AutoCompleteKey$$"; //自动完成context Key
    this._IsReferenceClick=false; //记录参照被点击
    //region  method
    this.CallbackComplete = function (CacheReturn) {
        if (CacheReturn || _this._xmlhttpRequest)
            if (CacheReturn || _this._xmlhttpRequest.readyState == 4) {
                //返回数据包含在responseText内容的<ReferenceReturns>和</ReferenceReturns>之间
                //如果数据有多行，则不返回数据，只返回关键字__MultiRows，弹出参照页面
                var usedCache = false;
                var result = "";
                var oldresult = "";
                //IE 中CacheReturn 返回 undefined ,chrome中返回 Event对象
                if (CacheReturn && typeof CacheReturn == 'string') {
                    result = CacheReturn;
                } else {
                    result = _this._xmlhttpRequest.responseText;
                    result = unescapeHTML(result);
                    if (_this.isAllowCache() && result != "") {
                        $Cache(_this.url, result);
                        usedCache = true;
                    }
                }
                oldresult = result;
                var index0 = result.indexOf("<ReferenceReturns>");
                var index1 = result.indexOf("</ReferenceReturns>") + "</ReferenceReturns>".length;
                if (index0 != -1 && index1 != -1) {
                    result = result.substring(index0, index1);
                } else {
                    return;
                }
                if (JavaScriptDebugTool.LogReferenceReturnValue) {
                    $alert("Return:" + result);
                }
                if (result == "<ReferenceReturns>__MultiRows</ReferenceReturns>" || result == "<ReferenceReturns></ReferenceReturns>") {
                    //if( result == "<ReferenceReturns></ReferenceReturns>"){
                    if (_this._isForceFireContentChange && _this._oldValue != _this._value) {
                        var r = _this.get_IsRaiseEvent();
                        _this.set_IsRaiseEvent(false);
                        _this.set_Key(_this._oldKey);
                        _this.set_Value(_this._oldValue);
                        _this.set_Text(_this._oldText);
                        _this.set_IsRaiseEvent(r);
                        //模拟录入时，当匹配多条记录时，允许弹出窗口； --lzhm 20110104
                        if (result == "<ReferenceReturns>__MultiRows</ReferenceReturns>") {
                            _this.set_IsShowForm(true);
                            var oldGs = UF.UI.Reference.DisableShowForm;
                            UF.UI.Reference.DisableShowForm = false;
                            _this.ShowRefForm(_this._inputValue);
                            UF.UI.Reference.DisableShowForm = oldGs;
                        }
                        return;
                    }
                    if (!_this._isNeedValidate && _this._oldValue != _this._value) { //不需要校验的校验失败后，判断是否value变更，变更则触发postback事件
                        _this.set_Key(_this._oldKey);
                        _this.PostBack();
                        return;
                    }
                    //}
                    _this.set_IsShowForm(true);
                    if (_this._IsShowFormWhenNoMatchValue == true) {
                        _this.ShowRefForm(_this._inputValue);
                    } else {
                        _this._textbox.style.borderBottomStyle = "dotted";
                        _this._textbox.style.borderBottomColor = "red";
                        _this._textbox.style.borderBottomWidth = 2;

                        _this._textbox.focus();
                        if (window.event) {
                            $Event(window.event).stopPropagation();
                            $Event(window.event).preventDefault();
                        }
                    }
                    return;
                }
                if (result == "<ReferenceReturns>true</ReferenceReturns>") {
                    return;
                }
                if (result == "<ReferenceReturns>false</ReferenceReturns>") {
                    //20100303 wangxiaoliang
                    //增加跨组织分配模板后，模拟录入失败时的错误提示。
                    //--begin--
                    if ((_this.get_SetControlValue()) && (_this.get_SetControlValue().IsSetControlValue == true)) {
                        _this.ShowSetControlValueErrorMsg();
                    }
                    //--end--

                    _this.OnContentChanged(null);
                    return;
                }
                //wanglei:将 xml 字符串 保存 隐藏域中
                _this.saveReturnXml(oldresult);
                _this.OnContentChanged(result);
                _this._CancelShowForm = true;
                if (usedCache && !_this.isAllowCache() && (_ClientPostBackManager.Runing || Get_Global_WillDoPostBack() || _ClientCallBackManager.Runing)) {
                    var eId = _this.get_id();
                    var resetCache = "if($find('" + eId + "') && !$find('" + eId + "').isAllowCache()) { $Cache$Remove(\"" + _this.url.replace(/\"/g, "\\\"") + "\"); }";
                    _ClientJSExecQueueManager.Push(resetCache);
                }
            }
    }
    // 粘贴事件处理xml数据
    this.CallbackCompleteForPaste = function (CacheReturn) {
        window.referenceData = []
        if (CacheReturn || _this._xmlhttpRequest)
            if (CacheReturn && CacheReturn.srcElement && CacheReturn.srcElement.responseText || _this._xmlhttpRequest.readyState == 4) {
                //返回数据包含在responseText内容的<ReferenceReturns>和</ReferenceReturns>之间
                //如果数据有多行，则不返回数据，只返回关键字__MultiRows，弹出参照页面
                var result = JSON.parse(CacheReturn.srcElement.responseText);
                window.referenceData = result.length > 0 ? result : []
                return
            }
    }
    this.transformXml = function (refInfoXml) {
        var Dealresults = [];
        if (refInfoXml == null || refInfoXml == "") return Dealresults;
        var dom = PopupFormHelper.StringToXMLDom(refInfoXml);
        var returnParentNodes = dom.getElementsByTagName("ReferenceReturns");
        for(var k =0 ; k< returnParentNodes.length; k++) {
            var result = {};
            var returnNodes = returnParentNodes[k].getElementsByTagName("ReferenceReturn");
            for (var i = 0; i < returnNodes.length; i++) {
                var curRow = returnNodes[i];
                var selectTag = curRow.getAttribute("IsSelected");
                if (selectTag) {
                    if (selectTag == "Y") {
                        this._selectIndex = i;
                    }
                }
                var fieldNodes = curRow.getElementsByTagName("ReturnField");
                for (var j = 0; j < fieldNodes.length; j++) {
                    var item = fieldNodes[j];
                    result[item.getAttribute("name")] = item.getAttribute("value");
                }
            }
            Dealresults.push(result);
        }
        return Dealresults;
    }
}

//region Prototype
UF.UI.Reference.prototype = {

    //region  Init

    //region   initialize
    initialize: function () {
        UF.UI.Reference.callBaseMethod(this, 'initialize');
        this.$element = $(this._element);
        var code = this._element.cusAttr('ValueField');
        var name = this._element.cusAttr('TextField');
        if (code == "") {
            this._element.cusAttr('ValueField', "Code");
        }
        if (name == "") {
            this._element.cusAttr('TextField', "Name");
        }
        this._textbox = this._element.children[0];
        for (var i = this._element.children.length - 1; i > 0; i--) {
            if (this._element.children[i].id == this.get_element().id + "_button") {
                this._button = this._element.children[i];
            }
        }

        //this._hidden = this.get_element().lastChild;//中间有可能有关联控件
        for (var i = this.get_element().children.length; i > 0; i--) {
            if (this._element.children[i - 1].id == (this.get_id() + "_Hidden")) {
                this._hidden = this._element.children[i - 1];
                break;
            }
        }
        this._tagHidden = $get(this.get_id() + "_TagHidden");

        //wanglei:返回xml hidden
        this._hiddenReturn = $get(this.get_id() + ReferenceTemplate.hiddenReturn);

        if (this.btnClassName == null)
            this.btnClassName = ReferenceTemplate.BtnClassName;
        if (this.btnClassName_Dis == null)
            this.btnClassName_Dis = ReferenceTemplate.BtnClassName_Dis;

        this.visibleAuthority = this._element.cusAttr("VisibleAuthority");
        this.enableAuthority = this._element.cusAttr("EnableAuthority");
        this._isMultiOrg = this._element.cusAttr("ISMultiOrg");
        this._autoCompleteOpath = this._element.cusAttr("AutoCompleteOpath");
        this.initControl();

        //        this.btnmouseOverClass = "btn RefBtnMO"; //先写死，要用设置皮肤方式做
        //        this.btnmouseOutClass = this._button.className;

        // Create delegates Attach events

        //===by zzq Extends
        //this._textInputHandler = Function.createDelegate(this, this.onTextInput);
        //if ('onpropertychange' in document.documentElement) {
        //    $addHandler(this.get_element(), "onpropertychange", this._textInputHandler);
        //} else {
        //    $addHandler(this.get_element(), "input", this._textInputHandler);
        //}

        //===

        this._elementkeydownHandler = Function.createDelegate(this, this.onkeyDown);
        $addHandler(this.get_element(), "keydown", this._elementkeydownHandler);

        this._textboxfocusHandler = Function.createDelegate(this, this.onInputFocus);
        //$addHandler(this._textbox, "focus", this._textboxfocusHandler);
        //===by zzq    focus事件使用click事件代替
        $addHandler(this._textbox, "focus", this._textboxfocusHandler);

        this._textboxblurHandler = Function.createDelegate(this, this.onInputBlur); //原onInputBlurOnly
        $addHandler(this._textbox, "blur", this._textboxblurHandler);

        if (this.hasSearchDispaly()) { //是否启动 自动完成
            this.searchBlurHandler = Function.createDelegate(this, this.onSearchBlur);
            $addHandler(this._textbox, "blur", this.searchBlurHandler);

            this.searPressHandler = Function.createDelegate(this, this.onSearchPress);
            $addHandler(this._textbox, "keyup", this.searPressHandler);
        }

        this._textboxkeypressHandler = Function.createDelegate(this, this.CheckMarkChar);
        $addHandler(this._textbox, "keypress", this._textboxkeypressHandler);

        this._textboxpasteHandler = Function.createDelegate(this, this.CheckMarkChars);
        $addHandler(this._textbox, "paste", this._textboxpasteHandler);

        this._buttonclickHandler = Function.createDelegate(this, this.onButtonClicked);
        $addHandler(this._button, "click", this._buttonclickHandler);
        //        this._btnmouseoverHandler = Function.createDelegate(this, this.BtnMouseOver);
        //        $addHandler(this._button, "mouseover", this._btnmouseoverHandler);
        //        this._btnmouseoutHandler = Function.createDelegate(this, this.BtnMouseOut);
        //        $addHandler(this._button, "mouseout", this._btnmouseoutHandler);

        if (this._element.cusAttr('ReadOnly')) {
            isReadOnly = true;

        }
        else {//优化后的逻辑
            isReadOnly = ReferenceTemplate.ReadOnly == "true" ? true : false;
        }
        this._readOnly = isReadOnly;
        if (isReadOnly) {
            $(this._textbox).attr("readOnly", isReadOnly);
            $(this._button).attr("disabled", isReadOnly);
        }
        if (this._element.cusAttr('AlwaysFireChangeEvent') == "true") {
            this.AlwaysFirechangeEvent = true;
        }
        if (this._element.cusAttr('TextBoxReadOnly') != null) {
            //gct20091126 + lzhm：消除闭包函数，性能优化，否则IE内存泄漏
            this._textbox.onkeydown = this._textboxReadonlyOnKeyDown;
            this._textbox.onkeypress = this._textboxReadonlyOnKeyPress;
        }

        if (this._element.cusAttr('AutoComplete') == "true") //默认this._autoComplete为false
            this._autoComplete = true;
        this.set_IsInitComlete(true); //gct20080917:设置初始化完成标志，用于脏数据保存提示


        //===by zzq $UF$buildHistorySearchContext最后一个附件参数， 给ubfuimvc提供 SearchSelect点击事件的特殊处理
        //_uf$buildHistorySearchContext_ItemClick = this.onSearchBlur;
    }, //endregion

    //region   初始化控件
    initControl: function () {
        if (this._isMultiOrg == "true") {
            this._dataGetter = new DataGetter();
            this._MultiOrg = this._element.cusAttr(this.SrcOrgFlag);
            this._NeedConvIDs = this._element.cusAttr("NeedConvIDs");
            this._entityFullName = this._element.cusAttr(this.EntityFullNameFlag);
            this._MultiOrgHiddenID = this._element.cusAttr("SrcOrgHidden");
            this._isCustomerMultiOrg = this._element.cusAttr("CustomerMulti");
        }
        var isDisplay = this._element.cusAttr('R') == "y" ? true : false;
        this.DisplayRequiredFlag(isDisplay);

        if (this._element.cusAttr('ReadOnly')) {
            isReadOnly = this._element.cusAttr('ReadOnly');
            if (isReadOnly) {
                this._textbox.readOnly = isReadOnly;
                this._button.disabled = isReadOnly;
            }
            this._readOnly = isReadOnly;
        }

        if (this._element.cusAttr('IsNeedValidate') != undefined) {
            this._isNeedValidate = ToBoolean(this._element.cusAttr('IsNeedValidate'));
        } else {
            this._isNeedValidate = ToBoolean(ReferenceTemplate.IsNeedValidate);
        }

        if (this._element.cusAttr("RefType") == "") { //如果RefType为空，放大镜不可点击（用于查询条件）
            this._button.disabled = true;
        }
        //默认值为true，当服务器端显式指定为false时，为false
        if (this._element.cusAttr("IsShowFormWhenNoMatchValue") == "false") {
            this._IsShowFormWhenNoMatchValue = false;
        }

        this._datas = new ReferenceData();
        var ele = this.get_element();
        var datas = this._hidden.value;
        var aryDatas = this.StringToList(datas, ReferenceTemplate.SplitString1);
        if (aryDatas.length == 3) {
            this._key = aryDatas[0];
            this._value = aryDatas[1];
            this._text = aryDatas[2];
            var keys = this.StringToList(aryDatas[0], ReferenceTemplate.SplitString2);
            var values = this.StringToList(aryDatas[1], ReferenceTemplate.SplitString2);
            var texts = this.StringToList(aryDatas[2], ReferenceTemplate.SplitString2);
            for (var i = 0; i < keys.length; i++) {
                var row = new Array();
               //modify by kxl
                row[ele.cusAttr("KeyField")] = keys[i];
                row[ele.cusAttr("ValueField")] = values[i];
                row[ele.cusAttr("TextField")] = texts[i];

                this._datas.Rows[i] = row;
            }
        }
        this._oldKey = this._key;
        if (this._element.cusAttr('IsShow') && ToBoolean(this._element.cusAttr('IsShow'))) {
            this.postbackBeforeShowRefForm = true; //gct20081010:认为是postbackBeforeShowRefForm
            Global_JSQueueEvalAfterPageLoadedManager.Add("var ref2 = $find('" + this.get_id() + "');if(ref2){ref2.get_element().cusAttr('IsShow','true');ref2.set_IsShowForm(true);ref2.onButtonClicked();}");
            //this.onButtonClicked();
        }
    }, //endregion

    //endregion

    //region  Dispose
    dispose: function () {
        // TODO: add your cleanup code here
        if (this._elementkeydownHandler) {
            $removeHandler(this._element, "keydown", this._elementkeydownHandler);
            this._elementkeydownHandler = null;
        }


        if (this._textboxfocusHandler) {
            //$removeHandler(this._textbox, "focus", this._textboxfocusHandler);
            //===by zzq focus事件使用click事件代替
            $removeHandler(this._textbox, "focus", this._textboxfocusHandler);
            this._textboxfocusHandler = null;
        }
        //===
        if (this._textboxblurHandler) {
            $removeHandler(this._textbox, "blur", this._textboxblurHandler);
            this._textboxblurHandler = null;
        }
        if (this._textboxkeypressHandler) {
            $removeHandler(this._textbox, "keypress", this._textboxkeypressHandler);
            this._textboxkeypressHandler = null;
        }

        if (this.searPressHandler) {
            $removeHandler(this._textbox, "keyup", this.searPressHandler);
            this.searPressHandler = null;
        }

        if (this._textboxpasteHandler) {
            $removeHandler(this._textbox, "paste", this._textboxpasteHandler);
            this._textboxpasteHandler = null;
        }

        if(this.searchBlurHandler) {
            $removeHandler(this._textbox, "blur", this.searchBlurHandler);
            this.searchBlurHandler = null;
        }

        if (this._buttonclickHandler) {
            $removeHandler(this._button, "click", this._buttonclickHandler);
            this._buttonclickHandler = null;
        }
        // 内存泄漏问题-zjh 2022/10/26
        if(this.searchAdapter && this.searchAdapter._callback) {
            this.searchAdapter._callback._input = null;
            this.searchAdapter._callback = null;
            this.searchAdapter._autoCompleteUI._listener = null;

        }

        this.searchAdapter = null;
        this.$element=null;

        //        if (this._btnmouseoverHandler) {
        //            $removeHandler(this._button, "mouseover", this._btnmouseoverHandler);
        //            this._btnmouseoverHandler = null;
        //        }
        //        if (this._btnmouseoutHandler) {
        //            $removeHandler(this._button, "mouseout", this._btnmouseoutHandler);
        //            this._btnmouseoutHandler = null;
        //        }

        this._textboxReadonlyOnKeyDown = null;
        this._textboxReadonlyOnKeyPress = null;

        this._button = null;
        this._hidden = null;
        this._hiddenReturn = null;
        this._tagHidden = null;
        if (this._datas) {
            this._datas.dispose();
            this._datas = null;
        }
        if (this._xmlhttpRequest) {
            this._xmlhttpRequest = null;
        }
        if (this._curactb) {
            this._curactb.dispose();
            this._curactb = null;
        }
        if (this.curHandler != null)
            this.curHandler = null; //gct20091126：一定要释放，否则导致IE内存泄漏
        this._autoComplete = null;
        this._textbox = null;
        this.visibleAuthority = null;
        this.enableAuthority = null;
        UF.UI.Reference.callBaseMethod(this, 'dispose');
    }, //endregion

    //region  自动搜索完成功能

    //region      是否启用自动完成功能

    hasSearchDispaly: function () {
        //如果只读关闭自动完成.
        if (this.get_ReadOnly() === true)
            return false;
        //如果 允许多选 关闭自动完成
        if (this.IfAllowMultiSelection() === true)
            return false;
        //如果 IsAuto=false 也关闭自动完成
        if (this._element.cusAttr('IsAuto') === "false")
            return false;
        //新的 mvc 框架没有迁移过来,关闭自动完成
        if (UF.UI.JControl === undefined)
            return false;
        return true;
    },
    //endregion

    //region      更新历史选中记录数据
    updateHistroy: function (id, code, name) {
        try {
            var data = [id, code, name];
            this.getSearchAdapter().updateReturnValue(data);
        } catch (e) { }
    },
    //endregion

    //region      获取是否 显示 查询下拉
    isSearchDispaly: function () {
        //设置 显示位置.

        return this.getSearchAdapter().isVisible();
    },
    //endregion

    //region      获取搜索 adapter

    getSearchAdapter: function () {
        if (this.searchAdapter === null) {
            //===by zzq 增加参数
            var callback = new RefInputCallback(this._textbox);
            var pos = this.getInputPos();
            var demoSC = $UF$buildHistorySearchContext(this.get_UserInfo(), this.get_CurOrgID(), this.getUrlPara("lnk"), this._element.id + this.getCtxValue());
            var adapter = new UF.UI.JControl.AutoComplete.AutoCompleteAdapter(pos, demoSC, callback, {
                refID: this.get_id(),
                searchAllData: this._element.cusAttr("IsSearchAll") == undefined ? false : true,
                allDataCount: this._element.cusAttr("MaxLine") == undefined ? 10 : parseInt(this._element.cusAttr("MaxLine")),
                allMinLength: this._element.cusAttr("MinLength") == undefined ? 10 : parseInt(this._element.cusAttr("MinLength")),
                filter: this._element.cusAttr("Filter") == undefined ? '' : this._element.cusAttr("Filter"),
                orderby: this._element.cusAttr("OrderBy") == undefined ? '' : this._element.cusAttr("OrderBy"),
                searchHistory: true,
                KeyField: this._element.cusAttr("KeyField"),
                ValueField: this._element.cusAttr("ValueField"),
                TextField: this._element.cusAttr("TextField"),
                EntityFullName: this._element.cusAttr("EntityFullName"),
                Lan_History: this._element.cusAttr("HistoryData"),
                Lan_AllData: this._element.cusAttr("AllData"),
                IsLeftMatch: this._element.cusAttr("LeftMatch"),
                ExtSearchFields: this._element.cusAttr("ExtSearchFields")
            });
            adapter.setPos(pos);



            this.searchAdapter = adapter;
        } else if (this.isCtxChanged() === true) {
            var demoSC = $UF$buildHistorySearchContext(this.get_UserInfo(), this.get_CurOrgID(), this.getUrlPara("lnk"), this.$element.attr('id') + this.getCtxValue());
            this.searchAdapter.setSearchContext(demoSC);
        }
        return this.searchAdapter;
    },

    get_UserInfo: function () {
        var result = "";

        try {
            result = UF.UI.Portal.Context.getCurrent().get_userID();
        } catch (e) { }
        return result;
    },
    get_CurOrgID: function () {
        var result = "";
        try {
            result = UF.UI.Portal.Context.getCurrent().get_orgID();
        } catch (e) { }
        return result;
    },
    getUrlPara: function getQueryStringRegExp(name) {
        var reg = new RegExp("(^|\\?|&)" + name + "=([^&]*)(\\s|&|$)", "i");
        if (reg.test(location.href))
            return unescape(RegExp.$2.replace(/\+/g, " "));
        return "";
    },

    //endregion

    //region  获取 输入框 的位置

    getInputPos: function () {
        var offset = $(this._textbox).offset();
        var pos = {
            x: offset.left - 1,
            y: offset.top + this._textbox.clientHeight + 1,
            w: this._element.style.width
        };

        return pos;
    },

    //endregion


    //region      相应 OnFocus 事件 方法
    onFocusOnSearch: function () {
        this.getSearchAdapter().setPos(this.getInputPos());
        this.getSearchAdapter().active();

        //if (this._textbox.value == '') {
        //    this.getSearchAdapter().inputChanged(this._textbox.value);
        //}
    },
    //endregion
    //region      自动完成上下文参数是否改变


    isCtxChanged: function () {
        if (this.curCtx === undefined) {
            this.curCtx = "";
        }
        if (this.getCtxValue() !== this.curCtx) {
            this.curCtx = this.getCtxValue();
            return true;
        }
        return false;
    },

    getCtxValue: function () {
        var ctxValue = "";
        if ($UF$getRM().get_data(this.searchKey) === undefined)
            return ctxValue;
        var collection = $UF$getRM().get_data(this.searchKey);
        for (var pro in collection) {
            ctxValue += String.format("{0}:{1};", pro, collection[pro]);
        }
        return ctxValue;
    },
    //endregion

    //endregion

    //region  注册事件

    //region   readonly注册事件
    _textboxReadonlyOnKeyDown: function () {
        if (window.event.keyCode != KeyCode.F2 && window.event.keyCode != KeyCode.backspace && window.event.keyCode != KeyCode.del)
            return false;
    },

    _textboxReadonlyOnKeyPress: function () {
        if (window.event.keyCode != KeyCode.enter && window.event.keyCode != KeyCode.tab)
            return false;
    }, //endregion

    //region   按回车键，回调取数据
    onInputReturn: function () {

        this._textbox.style.borderBottomWidth = 0;

        this._CancelShowForm = false; //加这一句的原因：U9V2000285434和U9V2000285436
        if (this.IfAllowMultiSelection()) {
            //perf:
            //var values=this.Values;
            var values = this.get_Values();
            var oldvalues = this.StringToList(this._textbox.value, ReferenceTemplate.SplitString2);
            if (this.CompareList(values, oldvalues)) {
                return;
            }
        }
        //下面这段代码的意思是，如果输入框里的内容和code或者name相等，则认为无修改
        //如果name不为空，并且输入框里为空，则认为要清除，不会走到下面的分支
        //因为name为空，但是焦点进入输入框里肯定不为空，因为会显示code，所以这段代码最后的this.get_Text() != ""只是为了区分是否清空操作。
        else if (this._textbox.value == this.get_Value() || (this._textbox.value == this.get_Text() && this.get_Text() != "")//可能因为刷新页面导致textbox的值为Text
            || (this._textbox.value == this.get_Text() && this.get_Text() == "" && this._textBoxIsValueNotText == false))
        //最后一个条件是为了区分，当前是刷新导致textbox为Text，并且当前Text就是空字符串，如果这时由于代码导致失去焦点，
        //在原有的条件下，就不会进入这个分支，走到下面的分支，导致被认为是清空参照，会把值清空
        //这里增加一个_textBoxIsValueNotText属性，用来标记，当为空并且_textBoxIsValueNotText为false，也就是textbox里的值是text而非value，也就是当前输入框并不是鼠标进入焦点导致
        //那么认为这个情况是页面刷新导致失去焦点，并非人为强制进行清空。就需要进行return。
        //为了减少杀伤力，最大限度保留原有功能，在这里只对输入框为空，并且原有Text就是为空的情况进行过滤。
        //PMP 201812240246
        {
            if (this._isForceFireContentChange) { } else {
                return;
            }
        }
        //输入空值后回车清空参照
        if (this._textbox.value == "") {
            this.OnContentChanged(null);
            return;
        }
        var inputValue = this._textbox.value;
        if (!this._isNeedValidate && !this._isForceFireContentChange) {
            //如果设置为不需要校验
            this._oldValue = this._value;
            this._value = inputValue;
            this._text = inputValue;
            this._key = -1;
            this._hidden.value = this._key + ReferenceTemplate.SplitString1 + this._value + ReferenceTemplate.SplitString1 + this._text;

            //gct20111116为什么return，因为设置了_isNeedValidate为false，就表明不再需要发起CallBack取值和CallBack校验，录入的是什么值就是什么值，不管这个值是不是有效的参照值
            //gct20111129但是目前_isNeedValidate为false，仍然走callback校验逻辑，在callback校验后，再处理，这不是一个很好的方案，但是开发部有些已经在这个不好的方案上做了自己的逻辑处理，修改不了了。
            //return;
        }
        var bCallBackRun = _ClientCallBackManager.Runing;
        this.raiseBeforeLoadData(Sys.EventArgs.Empty);
        //yangkuna20100715:如果CallBack在跑，则排队。Postback不管，不建议BeforeLoadData的事件用postback
        //added  wanglei  为 个性化 移动 到表格控件中，批量修改时，
        //及时获取 参照回带数据， 负责 表格当前行的上下文 （焦点行）会丢失。
        if (!bCallBackRun && _ClientCallBackManager.Runing == true) {
            _ClientJSExecQueueManager.Unshift("$find('" + this.get_id() + "').CallXmlHttp(\"" + inputValue + "\");");
        } else {
            //CallWebService();
            this.CallXmlHttp(inputValue);
        }
    }, //endregion

    //region   响应键盘事件。
    onkeyDown: function () {
        if (this.get_ReadOnly()) return;

        if (this.hasSearchDispaly() === false) {//没有自动完成
            this._oldKeyDown();
        }
        else if (this.hasSearchDispaly() === true &&
        this.isSearchDispaly() === false) {//有自动完成,但没有显示下拉
            this._oldKeyDown();
        }
        else {//有自动完成,有显示下拉
            if (event.keyCode == 13
                    || event.keyCode == 38
                    || event.keyCode == 40
              ) {
                $Event(event).stopPropagation();
                $Event(event).preventDefault();
            }
        }
    },
    _oldKeyDown: function () {
        //region  不显示查询 状态
        switch (window.event.keyCode) {
            case KeyCode.F2:
                this._textbox.value = this.get_Value();
                this._textBoxIsValueNotText = true;
                this.onButtonClicked();
                /*************************************
                //特殊处理，针对Grid中
                CreateReferenceControl : function(columnIndex)
                {
                if(this.MainCols[columnIndex].Post=="1"){
                reference.control.set_IsShowForm(false);
                reference.control._button.onclick=this.DoFirePostBack;
                */
                if (!this._IsShowForm) {
                    if (this._button.onclick) {
                        this._button.fireEvent("onclick");
                    }
                }
                /************************************/

                $Event(event).stopPropagation();
                break;
            // 把 this.onInputReturn(); 放在了 onblur事件中，则这些可不使用了
            case 123:   //F12   如果 值变更了，则认为按了enter键，走oninputReturn，不处理弹出form引用
                if (this._textbox.value != "" && this._textbox.value != this._value && this._textbox.value != this._text) {
                    event.keyCode = KeyCode.enter;
                }
                //没有加break，直接执行下面的处理
            case KeyCode.down:
            case KeyCode.up:
            case KeyCode.tab:
            case KeyCode.enter:
            case KeyCode.left:
            case KeyCode.right:
                if (this._curactb && this._curactb.actb_display)//this._curactb为null，表示不开启AutoComplete功能
                    return;
                this._isPressEnterKey = true;
                if (event.keyCode == KeyCode.enter && this._element.cusAttr("ChangeEnterToTab")) {
                    event.keyCode = KeyCode.tab;
                }
                this.onInputReturn();

                //解决多组织参照，变换组织直接手动输入并回车，直接关闭窗口返回首条数据的问题。lzhm 2009-11-5
                if (_ClientPostBackManager && _ClientPostBackManager.Runing || window.AfterZlayerJsQueue) {
                    if (event && event.keyCode == 13) {
                        $Event(event).stopPropagation();
                        $Event(event).preventDefault();
                    }
                }
                break;
        } //endregion
    },




    //endregion

    //region   焦点进入和离开，给TextBox付Code和Name

    //===只是单纯的离开焦点
    onInputBlurOnly: function () {
        this.ControlBlur();
        if (this.IfAllowMultiSelection()) {
            this._textbox.value = this.ListToString(this._datas.GetValues(this._element.cusAttr('TextField')), ReferenceTemplate.SplitString2);
        } else {
            if (this.IsCodeChange()) {
                if (this._isPressEnterKey) { } else {
                    this.onInputReturn();
                }
            } else {
                this._textbox.value = this._text;
            }
        }
        this._textBoxIsValueNotText = false;
    },

    onInputBlur: function () {
        if (this._curactb && this._curactb.actb_display) //如果this._curactb为null，表示不开启AutoComplete功能
        {
            try {
                this._textbox.focus();
            } catch (e) { }
            return;
        }
        this.ControlBlur();
        if (this.IfAllowMultiSelection()) {
            this._textbox.value = this.ListToString(this._datas.GetValues(this._element.cusAttr('TextField')), ReferenceTemplate.SplitString2);
        } else {
            if (this.IsCodeChange()) {
                if (this._isPressEnterKey) { } else {
                    this.onInputReturn();
                }
            } else {
                this._textbox.value = this._text;
            }
        }
        this._textBoxIsValueNotText = false;//标记当前Box显示的是Text，非Value，给离开焦点时判断有关系

    },

    onInputFocus: function () {
        var _this = this;
        this._isPressEnterKey = false;
        this.ControlFocus();
        if (this.IfAllowMultiSelection()) {
            this._textbox.value = this.ListToString(this._datas.GetValues(this._element.cusAttr('ValueField')), ReferenceTemplate.SplitString2);
        } else {
            this._textbox.value = this._value;
            if (this.hasSearchDispaly()) { //触发 search功能.
                this.onFocusOnSearch();
            }
        }
        this._textBoxIsValueNotText = true;//标记当前Box显示的是Value，非Text，给离开焦点时判断有关系
        try {
            this._textbox.select();
            // window.setTimeout(function(){_this._textbox.select();},0);  //解决chrome44版本及以下的焦点进入没法全新文本的问题 -- 20170425 -- weiyina
        } catch (e) { }
    }, //endregion

    //region   点击参照按钮,弹出参照页面
    onButtonClicked: function () {

        // layer.alert(layer.v + ' - 贤心出品 sentsin.com');




        //wangl:如果正在异步弹出则 返回.
        if (this.isAsynShowModal === true)
            return;
        this._textbox.style.borderBottomWidth = 0;
        this._CancelShowForm = false;
        if (_ClientCallBackManager && _ClientCallBackManager.Runing) //如果在Callback期间，不处理
        { //wangl: 触发异步相应.
            this.isAsynShowModal = true;
            var func = "$find('" + this.get_id() + "').isAsynShowModal=false;";
            func += "$find('" + this.get_id() + "').onButtonClicked();";
            _ClientJSExecQueueManager.Push(func);
            return false;
        }

        if (this._button.cusAttr("PostBackHandle") && (!this._element.cusAttr('IsShow') || !ToBoolean(this._element.cusAttr('IsShow')))) {
            if (window.event)
                $Event(window.event).stopPropagation();
            eval(this._button.cusAttr("PostBackHandle"));
            this._button.cusAttr("PostBackHandle", null);
            return;
        }
        this._element.cusAttr('IsShow', 'False');
        var bCallBackRun = _ClientCallBackManager.Runing;
        this.raiseBeforeLoadData(Sys.EventArgs.Empty);
        //yangkuna20100823:如果CallBack在跑，则排队。Postback不管，不建议BeforeLoadData的事件用postback.Click时也一样处理
        if (!bCallBackRun && _ClientCallBackManager.Runing == true && this._IsPostBack != true) {
            if (this._IsShowForm) {
                var inputValue = this._textbox.value;
                if (inputValue == this._value || inputValue == this._text) {
                    inputValue = null;
                }
            }
            var iValue = (inputValue != null ? "\"" + inputValue.replace(/"/g, "\\\"") + "\"" : "null");
            var func = "$find('" + this.get_id() + "').ShowRefForm(" + iValue + ");";
            _ClientJSExecQueueManager.Push(func);
        } else {
            if (this._IsShowForm) {
                //20100721 按照hgx新要求修改 邮件
                /*
                1.在控件中输入值后回车，按设定的匹配方式过滤参照记录；
                若只有一条记录符合，则直接将对应记录作为当前值，且不需要弹出参照画面；
                若没有满足条件的记录，则弹出空白参照画面；
                若满足条件的记录大于1条，则弹出参照画面，并显示满足条件的记录；

                2.在控件中点击放大镜或者快捷键F2：
                若控件中没有任何输入内容，则显示所有允许选择的记录；
                若控件中已经存在合法的返回值，则显示所有允许选择的记录；
                若控件中不是一个合法的返回值，则根据控件输入的内容按设定的匹配方式过滤参照记录
                */
                var inputValue = this._textbox.value;
                if (inputValue == this._value || inputValue == this._text) {
                    inputValue = null;
                }
                this.ShowRefForm(inputValue);
            }
            //????
            if (this._IsPostBack == true) {
                this.FirePostBack();
            }
        }

    },
    //endregion



    //endregion

    //region  用户事件
    //region    OnAutoComplete事件

    //region       相应 onKeydown 事件 方法
    onSearchPress: function () {
        if (this.isSearchDispaly() === false) {
            //正文输入，检查输入的文本长度
            var inputText = $(this._textbox).val();
            this.autoCompleteForSearchAdapter(inputText);
        } else {
            if (event.keyCode == '13') {
                //TODO: 回车，确认
                this.getSearchAdapter().confirm();
                $Event(event).stopPropagation();
                $Event(event).preventDefault();
            } else
                if (event.keyCode == '27') {
                    //TODO: ESC,强制关闭自动完成窗口
                    this.getSearchAdapter().hide();
                } else if (event.keyCode == '38') {
                    //TODO: UP，向上移动，设置输入框为当前的code
                    this.getSearchAdapter().prevoius();
                } else if (event.keyCode == '40') {
                    //TODO:DOWN，向下移动
                    this.getSearchAdapter().next();
                } else {
                    //正文输入，检查输入的文本长度
                    var inputText = $(this._textbox).val();
                    this.autoCompleteForSearchAdapter(inputText);
                }
        }
    },
    autoCompleteForSearchAdapter: function (inputText) {
        var adapter = this.getSearchAdapter();
        if (this._autoCompleteOpath) {
            adapter.refInfo["filter"] = this._autoCompleteOpath;
        }
        adapter.inputChanged(inputText);

    },
    //endregion
    //===
    //onTextInput: function () {
    //    if ($(this).val() != "") {
    //        this._valIsEmpty = false;
    //    }
    //},


    //onSearchBlur: function () {
    //    if ($(_this.get_element()).val() == "") {
    //        return false;
    //    }
    //    if (this._cVal) {
    //        clearInterval(this._cVal);
    //    }
    //    this._cVal = setInterval(function () {
    //        if ($(_this.get_element()).val() != "") {
    //            this._valIsEmpty = false;
    //            _onSearchBlur();
    //        }
    //        console.log(1);
    //    }, 500);
    //},
    onSearchBlur: function () {
        this.getSearchAdapter().hide();
    },
    add_OnAutoComplete: function (handler) {
        this.get_events().addHandler("OnAutoComplete", handler);
    },
    remove_OnAutoComplete: function (handler) {
        this.get_events().removeHandler("OnAutoComplete", handler);
    },
    raiseOnAutoComplete: function (args) {
        var eh = this.get_events().getHandler("OnAutoComplete");
        if (eh) {
            eh(this, args);
        }
    }, //endregion
    set_AutoCompleteOpath: function (opath) {
        this._autoCompleteOpath = opath;
    }, //endregion

    //region    数据变更事件
    DoContentChanged: function (referenceData) {
        var keyField, valueField, textField;
        keyField = _this._element.cusAttr('KeyField');
        valueField = _this._element.cusAttr('ValueField');
        textField = _this._element.cusAttr('TextField');

        if (!_this.IfAllowMultiSelection()) {
            if (referenceData["Rows"] &&
                referenceData["Rows"].length > 1) { //如果返回行数 大于 1,则触发变化事件.
            } else if (referenceData.GetValue(keyField) == _this._datas.GetValue(keyField)) {
                var tmpV = referenceData.GetValue(valueField);
                var tmpT = referenceData.GetValue(textField);
                if (_this._value != tmpV || _this._text != tmpT) {
                    _this._value = tmpV;
                    _this._text = tmpT;
                    _this._hidden.value = _this._key + ReferenceTemplate.SplitString1 + _this._value + ReferenceTemplate.SplitString1 + _this._text;
                    _this._textbox.value = _this._text;
                    _this._textBoxIsValueNotText = false;
                }
                if (_this.hf == "1") {//处于焦点时，显示Code
                    _this._textbox.value = _this._value;
                    _this._textBoxIsValueNotText = true;
                }
                else {
                    _this._textbox.value = _this._text;
                    _this._textBoxIsValueNotText = false;
                }
                if (_this._isForceFireContentChange) {
                    _this._isForceFireContentChange = false;
                } else if (!referenceData.getIsForceChange()) {
                    return false;
                }
            }

            _this._key = referenceData.GetValue(keyField);
            _this._value = referenceData.GetValue(valueField);
            _this._text = referenceData.GetValue(textField);
            _this._hidden.value = _this._key + ReferenceTemplate.SplitString1 + _this._value + ReferenceTemplate.SplitString1 + _this._text;
            if (this.hf == '1') //当前如果是获得焦点状态的，应该赋code
            {
                _this._textbox.value = _this._value;
                _this._textBoxIsValueNotText = true;
            } else //当前如果是选中状态的，应该赋name
            {
                _this._textbox.value = _this._text;
                _this._textBoxIsValueNotText = false
            }

            //wanglei:添加 更新历史选中数据功能.(自动完成)
            if (_this.hasSearchDispaly()) {
                _this.updateHistroy(_this._key, _this._value, _this._text);
            }
        } else {
            //perf:
            //var oldkeys=_this.Keys;
            var oldkeys = _this.get_Keys();
            var keys = referenceData.GetValues(keyField);
            if (_this.CompareList(oldkeys, keys)) return false;
            var values = referenceData.GetValues(valueField);
            var texts = referenceData.GetValues(textField);
            _this._hidden.value = _this.ListToString(keys, ReferenceTemplate.SplitString2) + ReferenceTemplate.SplitString1 + _this.ListToString(values, ReferenceTemplate.SplitString2) + ReferenceTemplate.SplitString1 + _this.ListToString(texts, ReferenceTemplate.SplitString2);
            _this._textbox.value = _this.ListToString(texts, ReferenceTemplate.SplitString2);
            _this._textBoxIsValueNotText = false;
            if (keys.length > 0) {
                _this._key = keys[0];
            } else {
                _this._key = "";
            }
            if (values.length > 0) {
                _this._value = values[0];
            } else {
                _this._value = "";
            }
            if (values.length > 0) {
                _this._text = texts[0];
            } else {
                _this._text = "";
            }
        }
        _this._datas = referenceData;
        _this.fireContentChangedEvent(_this._datas);
        //lzhm：20090423 针对_this会变的特殊处理，问题重现源头15SP200275772
        if (this && this._element && this.get_Type() == ControlType.Reference) {
            _this = this;
        }
        _this.fireonchangeEvent(_this._datas);
        //lzhm：20090423 针对_this会变的特殊处理，问题重现源头15SP200275772
        if (this && this._element && this.get_Type() == ControlType.Reference) {
            _this = this;
        }
        if (_this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
            _this.set_IsChanged(true); //设置IsChanged标识，为脏数据保存提示所用
        _this.fireOnValueChangedEvent(_this._datas);
        if (_this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
            _this.set_IsValueChanged(true); //设置IsValueChanged标识，为脏数据保存提示所用
        //        if (_ClientPostBackManager.Runing || Get_Global_WillDoPostBack() || _ClientCallBackManager.Runing) {
        //
        //        }
        //        else
        //        var resetCache = "$find('" + _this.get_element().id + "').PostBack()";
        //        _ClientJSExecQueueManager.Push(resetCache);

        // 修改chenchb20190801，由于postback的异步请求机制，所以个性化的修改应放到postback之前。
        this.fireContentChanged4PEvent(_this._datas);
        this.fireOnValueChanged4PEvent(_this._datas);

        this.PostBack();

        this.fireContentChanged4PEvent(_this._datas);
        this.fireOnValueChanged4PEvent(_this._datas);

    },
    //参照返回结果
    OnContentChanged: function (ret) {
        var referenceData = PopupFormHelper.TranslateInfor(ret);
        if (referenceData == null) {
            referenceData = new ReferenceData();
        } else {
            if (this._isMultiOrg && (this._isCustomerMultiOrg != "true") && (referenceData.GetValue(this._element.cusAttr('KeyField')).trim().length > 0)) {
                if (this._element.parentElement &&
                    this._element.parentElement.className.match(/\btbc\b/) != null) {
                    if (window.event) {
                        try {
                            $Event(window.event).stopPropagation();
                            $Event(window.event).preventDefault();
                        } catch (e) { } //暂时这样处理
                    }
                }
                //this.ReplaceResult(referenceData);
                //u9zhangzhang20091019，按照彭总的新规则，取消控件的ID转换。
                _this = this;
                this.DoContentChanged(referenceData);
                return;
            } else {
                _this = this;
            }
        }
        this.DoContentChanged(referenceData);
    }, //endregion

    //region    其他事件

    add_onchange: function (handler) {
        this.get_events().addHandler("onchange", handler);
    },
    remove_onchange: function (handler) {
        this.get_events().removeHandler("onchange", handler);
    },
    raiseonchange: function (args) {
        if (this._element != null && this.$element.attr("onchange")) {
            eval($(this.get_element()).attr("onchange"));
        }
        var eh = this.get_events().getHandler("onchange");
        if (eh) {
            eh(this, args);
        }
    },
    add_OnValueChanged: function (handler) {
        this.get_events().addHandler("OnValueChanged", handler);
    },
    remove_OnValueChanged: function (handler) {
        this.get_events().removeHandler("OnValueChanged", handler);
    },
    raiseOnValueChanged: function (args) {
        this.BeforeRaiseOnValueChanged4Personal(); //gct2001101：如果是个性化扩展列，同步到单元格的逻辑放在这里
        var eh = this.get_events().getHandler("OnValueChanged");
        if (eh) {
            if (window.event) {
                if (window.event.keyCode == KeyCode.enter || window.event.keyCode == KeyCode.tab || window.event.keyCode == KeyCode.up || window.event.keyCode == KeyCode.down) { } else {
                    $Event(window.event).stopPropagation();
                }
            }
            eh(this, args);
        }

        //暂时放在OnValueChange的最后，提供一个个性化处理时机。onchange暂时没有这样的时机，也不需要，因为onchange触发，则OnValueChange一定会触发
        //gct20091029：放在raiseOnValueChanged4P中，所以注释掉下面一句
        //this.AfterRaiseOnValueChanged4Personal();
        //处理二次加载
        if (this._element.cusAttr('SndLoad')) {
            var pClass = this.get_element().className.split(" ")[0];
            if (pClass == "GridInput") return;
            if (this._element && this._element.cusAttr('AutoPostBack') != "True") {
                if (_ClientPostBackManager.Runing == true || _ClientCallBackManager.Runing == true) {
                    _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').SecondLoadAjaxCall()");
                } else {
                    this.SecondLoadAjaxCall();
                }
            }
        }
    },
    add_OnValueChanged4P: function (handler) {
        this.get_events().addHandler("OnValueChanged4P", handler);
    },
    remove_OnValueChanged4P: function (handler) {
        this.get_events().removeHandler("OnValueChanged4P", handler);
    },
    raiseOnValueChanged4P: function (args) {
        var eh = this.get_events().getHandler("OnValueChanged4P");
        if (eh) {
            if (window.event) {
                if (window.event.keyCode == KeyCode.enter || window.event.keyCode == KeyCode.tab || window.event.keyCode == KeyCode.up || window.event.keyCode == KeyCode.down) { } else {
                    $Event(window.event).stopPropagation();
                }
            }
            this.curHandler = eh; //记录eh到sender中，以便在BasicInfor的CanEvalPersonalJS()中使用curHandler获取对eh的引用。this在运行时不是eh
            eh(this, args);
        }

        //暂时放在OnValueChange的最后，提供一个个性化处理时机。onchange暂时没有这样的时机，也不需要，因为onchange触发，则OnValueChange一定会触发
        //this.AfterRaiseOnValueChanged4Personal();
    },


    //endregion

    //region    内容变更事件
    fireContentChangedEvent: function (data) {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        //抛出参照数据改变事件，关联控件订阅该事件给相关控件付值
        var args = new UF.UI.ChangeEventArgs();
        args.result = data;
        this.raiseContentChanged(args);
    },

    //个性化定义的参照携带
    fireContentChanged4PEvent: function (data) {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        //抛出参照数据改变事件，关联控件订阅该事件给相关控件付值
        var args = new UF.UI.ChangeEventArgs();
        args.result = data;
        this.raiseContentChanged4P(args);
    },

    //on value changed
    fireOnValueChangedEvent: function (data) {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        if ((this._key == "" || this._key == "-1") && !this.get_IsFireOnValueChangedEvent()) {
            return;
        }

        //抛出参照数据改变事件，关联控件订阅该事件给相关控件付值
        var args = new UF.UI.ChangeEventArgs();
        args.result = data;
        this.raiseOnValueChanged(args);
    },
    //OnValueChanged4P
    fireOnValueChanged4PEvent: function (data) {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        if ((this._key == "" || this._key == "-1") && !this.get_IsFireOnValueChangedEvent()) {
            return;
        }

        //抛出参照数据改变事件，关联控件订阅该事件给相关控件付值
        var args = new UF.UI.ChangeEventArgs();
        args.result = data;
        this.raiseOnValueChanged4P(args);
    },

    //for lxd
    fireonchangeEvent: function (data) {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        //抛出参照数据改变事件，关联控件订阅该事件给相关控件付值
        var args = new UF.UI.ChangeEventArgs();
        args.result = data;
        this.raiseonchange(args);
    }, //endregion


    //endregion

    //region  公开属性方法

    //region    设置使能
    set_Enabled: function (isEnabled) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false") //权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false") //权限不可编辑
            return;
        isEnabled = ToBoolean(isEnabled);

        if (isEnabled == true)
            this.btnmouseOutClass = this.btnClassName; //"btn RefBtn"
        else
            this.btnmouseOutClass = this.btnClassName_Dis; //"btn RefBtn_Dis"
        this._element.cusAttr("disabled", !isEnabled);
        if (this._textbox)
            $(this._textbox).attr("readOnly", !isEnabled);
        for (var i = 0, len = this._element.children.length; i < len; i++) {
            $(this._element.children[i]).attr("disabled", !isEnabled);
            if (this._element.children[i].type == "text") {
                if (isEnabled) {
                    //this.get_element().children[i].className = this.tbClassName;
                    this._element.className = UIControlClass.UFTextBox.CssClass;
                    this._element.children[i].className = ReferenceTemplate.TBClassName_R;   //跨浏览器兼容 -- weiyina -- 20170503
                } else {
                    // this._element.children[i].className = this.tbClassName_D;
                    this._element.children[i].className = ReferenceTemplate.TBClassName_D;  //weiyina -- 跨浏览器兼容 -- 20170503
                    //ele.className = UIControlClass.UFTextBox.ReadOnlyCssClass;
                }
            }
            if (this.get_element().children[i].type == "button") {
                //这段代码为啥之前被注释了？在此放开 -- weiyina -- 20170503
                if (isEnabled) {
                    this.get_element().children[i].className = this.btnClassName;
                } else {
                    this.get_element().children[i].className = this.btnClassName_Dis;
                }
            }
        }
        //运行态下设置必输项符合是否显示
        //this.DisplayRequiredFlag(isEnabled);
    }, //endregion

    //region    控件的ReadOnly属性
    get_ReadOnly: function () {
        return this._element.cusAttr("ReadOnly"); /*weiyin*/
    },
    set_ReadOnly: function (isReadOnly) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false") //权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false") //权限不可编辑
            return;
        if (!this.get_Enabled()) //由于客户端区分ReadOnly和Enabled状态，所以在设置ReadOnly的时候，要优先考虑Enabled属性
            return;
        isReadOnly = ToBoolean(isReadOnly);
        $(this._textbox).attr("readOnly", isReadOnly);
        if (isReadOnly) {
            $(this._button).attr("disabled", true);
        } else {
            if (this.get_Enabled()) {
                $(this._button).attr("disabled", false);
            }
        }

        if (isReadOnly) {
            this._textbox.className = this.tbClassName_R;
            this._button.className = this.btnClassName_Dis;
            this.btnmouseOutClass = this.btnClassName_Dis; //"btn RefBtn_Dis"
            this._element.className = UIControlClass.UFTextBox.ReadOnlyCssClass;
        } else {
            this._textbox.className = this.tbClassName;
            this._button.className = this.btnClassName;
            this.btnmouseOutClass = this.btnClassName; //"btn RefBtn"
            this._element.className = UIControlClass.UFTextBox.CssClass
        }
        this._element.cusAttr("ReadOnly", isReadOnly);
        this.set_HDValue("ReadOnly", isReadOnly.toString().toLowerCase());

        //gct20081203:提供一个设置只读后的个性化处理时机。
        this.AfterSetReadOnly4Personal();
    }, //endregion

    //region    设置 参照参数 和 用户 参数
    set_CustomInParams: function (v) {
        this._CustomInParams = v;
        this._element.cusAttr("CustomInParams", v);
    },
    get_CustomInParams: function () {
        return this._element.cusAttr("CustomInParams");
    },
    set_AddParams: function (v) {
        this._element.cusAttr("AddParams", v);
    },
    get_AddParams: function () {
        return this._element.cusAttr("AddParams");
    },
    get_IsFireOnValueChangedEvent: function () {
        if (this._element.cusAttr("FireVC")&&this._element.cusAttr("FireVC").toLowerCase() == "f")
            return false;
        return true;
    },

    //endregion

    //region    设置 和 读取 参照的 值

    //region   获取 key,value,Text
    get_Key: function () {
        if (this._key == "") {
            this._key = -1;
        }
        return this._key;
    },
    get_Value: function () {
        return this._value;
    },
    get_Text: function () {
        return this._text;
    }, //endregion

    //region   设置 key,value,text

    set_Key: function (key) {
        if (key == "") key = -1; //add by lzhm "" 与 -1 等价
        this._eventCounter++;
        if (key == this._key && (!this.AlwaysFirechangeEvent)) {
            if (this._eventCounter == 3) {
                this.CallXmlHttpValidate(this._key);
                this._eventCounter = 0;
            }
            return;
        }
        this._keyChanged = true;
        this._datas.SetValue(this._element.cusAttr('KeyField'), key);
        this._key = key;
        this._hidden.value = this._key + ReferenceTemplate.SplitString1 + this._value + ReferenceTemplate.SplitString1 + this._text;
        if (this._eventCounter == 3) {
            this._keyChanged = false;
            this._eventCounter = 0;
            this.fireonchangeEvent(this._datas);
            if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                this.set_IsChanged(true); //设置IsChanged标识，为脏数据保存提示所用
            //
            this.fireOnValueChangedEvent(this._datas);
            if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                this.set_IsValueChanged(true); //设置IsValueChanged标识，为脏数据保存提示所用
            this.CallXmlHttpValidate(this._key);
            this.PostBack();
            this.fireOnValueChanged4PEvent(this._datas);
        }
    },
    set_Value: function (value) {
        this._datas.SetValue(this._element.cusAttr('ValueField'), value);
        this._value = value;
        //gct20090910：没有获取焦点的情况下才能是输入框显示参照的name。如果没有下面这句话，多组织参照（没有name的参照）情况下就会有bugU9V2000308382 和 U9V2000308386
        if (this.hf == "0") {
            this._textbox.value = this._text;
            this._textBoxIsValueNotText = false;
        }
        else if (this.hf == "1") {
            this._textbox.value = this._value;
            this._textBoxIsValueNotText = true;
        }
        this._hidden.value = this._key + ReferenceTemplate.SplitString1 + this._value + ReferenceTemplate.SplitString1 + this._text;
        this._eventCounter++;
        if (this._eventCounter == 3) {
            if (this._keyChanged) {
                this.fireonchangeEvent(this._datas);
                if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                    this.set_IsChanged(true); //设置IsChanged标识，为脏数据保存提示所用
                //
                this.fireOnValueChangedEvent(this._datas);
                if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                    this.set_IsValueChanged(true); //设置IsValueChanged标识，为脏数据保存提示所用
                this.CallXmlHttpValidate(this._key);
                this.PostBack();
                this.fireOnValueChanged4PEvent(this._datas);
            } else {
                this.CallXmlHttpValidate(this._key);
            }
            this._keyChanged = false;
            this._eventCounter = 0;
        }
    },
    set_Text: function (text) {
        this._datas.SetValue(this._element.cusAttr('TextField'), text);
        this._text = text;

        //gct20090910：没有获取焦点的情况下才能是输入框显示参照的name。如果没有下面这句话，多组织参照（没有name的参照）情况下就会有bugU9V2000308382 和 U9V2000308386
        if (this.hf == "0") {
        this._textbox.value = text;
            this._textBoxIsValueNotText = false;
        }
        else if (this.hf == "1") {
            this._textbox.value = this._value;
            this._textBoxIsValueNotText = true;
        }
        this._hidden.value = this._key + ReferenceTemplate.SplitString1 + this._value + ReferenceTemplate.SplitString1 + this._text;
        this._eventCounter++;
        if (this._eventCounter == 3) {
            if (this._keyChanged) {
                //
                this.fireOnValueChangedEvent(this._datas);
                if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                    this.set_IsValueChanged(true); //设置IsValueChanged标识，为脏数据保存提示所用
                this.fireonchangeEvent(this._datas);
                if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                    this.set_IsChanged(true); //设置IsChanged标识，为脏数据保存提示所用
                this.CallXmlHttpValidate(this._key);

                //                var resetCache = "$find('" + _this.get_element().id + "').PostBack()";
                //                _ClientJSExecQueueManager.Push(resetCache);
                //                this.PostBack();
                this.PostBack();
                this.fireOnValueChanged4PEvent(this._datas);
            } else {
                this.CallXmlHttpValidate(this._key);
            }
            this._keyChanged = false;
            this._eventCounter = 0;
        }
    },

    //设置参照值，不触发事件
    SetDataValues: function (key, value, text) {
        if (!this.IfAllowMultiSelection()) {
            if (key == this._key)
                return;
        } else if (this.CompareList(this._datas.GetValues(this._element.cusAttr('KeyField')), key)) {
            return;
        }
        this.set_IsRaiseEvent(false);
        this._datas = new ReferenceData();
        if (!this.IfAllowMultiSelection()) {
            if (key == "") {
                key = -1;
            }
            this._datas.SetValue(this._element.cusAttr('KeyField'), key);
            this._key = key;
            this._datas.SetValue(this._element.cusAttr('ValueField'), value);
            this._value = value;
            this._datas.SetValue(this._element.cusAttr('TextField'), text);
            this._text = text;
            if (this.hf == "0") {
                this._textbox.value = text;
                this._textBoxIsValueNotText = false;
            } else if (this.hf == "1") {
                this._textbox.value = this._value;
                this._textBoxIsValueNotText = true;
            }
            this._hidden.value = this._key + ReferenceTemplate.SplitString1 + this._value + ReferenceTemplate.SplitString1 + this._text;
        } else {
            this.set_Keys(key);
            this.set_Values(value);
            this.set_Texts(text);
        }
        this.set_IsRaiseEvent(true);
    },

    SetValues: function (key, value, text) {
        if (!this.IfAllowMultiSelection()) {
            if (key == this._key)
                return;
        } else if (this.CompareList(this._datas.GetValues(this._element.cusAttr('KeyField')), key)) {
            return;
        }
        this._datas = new ReferenceData();
        if (!this.IfAllowMultiSelection()) {
            this.set_Key(key);
            this.set_Value(value);
            this.set_Text(text);
        } else {
            this.set_Keys(key);
            this.set_Values(value);
            this.set_Texts(text);
        }
    },


    //endregion

    //region   设置 keys,values,texts
    set_Keys: function (keys) {
        if (typeof (keys) == "object") {
            this._eventCounter++;
            if (this.CompareList(this._datas.GetValues(this._element.cusAttr('KeyField')), keys)) {
                if (this._eventCounter == 3)
                    this._eventCounter = 0;
                return;
            }
            this._keyChanged = true;
            this._datas.SetValues(this._element.cusAttr('KeyField'), keys);
            this._key = this.ListToString(keys, ReferenceTemplate.SplitString2);
            this._hidden.value = this._key + ReferenceTemplate.SplitString1 + this.ListToString(this.get_Values(), ReferenceTemplate.SplitString2) + ReferenceTemplate.SplitString1 + this.ListToString(this.get_Texts(), ReferenceTemplate.SplitString2);
            this._key = keys.length > 0 ? keys[0] : "";
            if (this._eventCounter == 3) {
                this._keyChanged = false
                this._eventCounter = 0;
                this.fireonchangeEvent(this._datas);
                if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                    this.set_IsChanged(true); //设置IsChanged标识，为脏数据保存提示所用
                this.fireOnValueChangedEvent(this._datas);
                if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                    this.set_IsValueChanged(true); //设置IsValueChanged标识，为脏数据保存提示所用
                this.PostBack();
                this.fireOnValueChanged4PEvent(this._datas);
            }
        }
    },
    set_Values: function (values) {
        if (typeof (values) == "object") {
            this._datas.SetValues(this._element.cusAttr('ValueField'), values);
            this._value = this.ListToString(values, ReferenceTemplate.SplitString2);
            this._hidden.value = this.ListToString(this.get_Keys(), ReferenceTemplate.SplitString2) + ReferenceTemplate.SplitString1 + this._value + ReferenceTemplate.SplitString1 + this.ListToString(this.get_Texts(), ReferenceTemplate.SplitString2);
            this._value = values.length > 0 ? values[0] : "";
            this._eventCounter++;
            if (this._eventCounter == 3) {
                if (this._keyChanged) {
                    this.fireonchangeEvent(this._datas);
                    if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                        this.set_IsChanged(true); //设置IsChanged标识，为脏数据保存提示所用
                    this.PostBack();
                }
                this._keyChanged = false;
                this._eventCounter = 0;
            }
        }
    },
    set_Texts: function (texts) {
        if (typeof (texts) == "object") {
            this._datas.SetValues(this._element.cusAttr('TextField'), texts);
            this._text = this.ListToString(texts, ReferenceTemplate.SplitString2);
            this._hidden.value = this.ListToString(this.get_Keys(), ReferenceTemplate.SplitString2) + ReferenceTemplate.SplitString1 + this.ListToString(this.get_Values(), ReferenceTemplate.SplitString2) + ReferenceTemplate.SplitString1 + this._text;
            this._textbox.value = this._text;
            this._textBoxIsValueNotText = false;
            this._text = texts.length > 0 ? texts[0] : "";
            this._eventCounter++;
            if (this._eventCounter == 3) {
                if (this._keyChanged) {
                    this.fireonchangeEvent(this._datas);
                    if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true) //设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                        this.set_IsChanged(true); //设置IsChanged标识，为脏数据保存提示所用
                    this.PostBack();
                }
                this._keyChanged = false;
                this._eventCounter = 0;
            }
        }
    },

    get_Datas: function () {
        return this._datas;
    },
    //endregion

    //region   读取 keys,values,texts
    get_Keys: function () {
        return this._datas.GetValues(this._element.cusAttr('KeyField'));
    },
    get_Values: function () {
        return this._datas.GetValues(this._element.cusAttr('ValueField'));
    },
    get_Texts: function () {
        return this._datas.GetValues(this._element.cusAttr('TextField'));
    },
    set_Data: function (fieldName, fieldData) {
        this._datas.SetValue(fieldName, fieldData);
    },
    //endregion

    //endregion

    //region    检查屏蔽字符集合
    //检查屏蔽字符集合
    CheckMarkChars: function () {
        var textinput = event.srcElement;
        //没有考虑屏蔽字符为空的情况 By Fanfree at 2007-04-20
        try {
            if (textinputmaskChars) {
                var maskChars = textinputmaskChars;
                if (maskChars) {
                    // var text = window.clipboardData.getData("text");
                    var text;
                    if(event){
                        text = event.clipboardData.getData("text/plain");
                    }else{
                        text = window.clipboardData.getData("text");
                    }
                    if (isMasks(text, maskChars)) {
                        $Event(event).preventDefault();
                    }
                }
            }
        } catch (e) { }
    },

    //检查屏蔽字符
    CheckMarkChar: function () {
        var textinput = event.srcElement;
        var maskChars = textinput.maskChars;
        if (maskChars != "") {
            if (isMask(event.keyCode, maskChars)) {
                $Event(event).preventDefault();
            }
        }
    }, //endregion

    //region    参照 自动 携带数据

    //region       获取 xmlhttp 对象
    GetXmlHttpRequest: function () {
        // if (!this._xmlhttpRequest) {
        //     if (this.get_element().document.all)
        //         this._xmlhttpRequest = new ActiveXObject("Msxml2.XMLHTTP");
        //     else if (XMLHttpRequest)
        //         this._xmlhttpRequest = new XMLHttpRequest();
        // }

        if (!this._xmlhttpRequest) {
            //if (window.XMLHttpRequest)
            //    this._xmlhttpRequest = new XMLHttpRequest();
            //else if (this.get_element().document.all)
            //    this._xmlhttpRequest = new ActiveXObject("Msxml2.XMLHTTP");
            this._xmlhttpRequest = RequestHelper.getXHR();//===by zzq
        }

    }, //endregion

    //region       CallXmlHttpValidate
    CallXmlHttpValidate: function (inputValue) {
        if (!this._isNeedValidate || (inputValue == -1)) {
            return;
        }
        //if(inputValue==-1){return;}
        this._isValidating = true;
        this.raiseBeforeLoadData(Sys.EventArgs.Empty);
        if (inputValue == "")
            return;
        this._inputValue = inputValue;
        var url;
        if (this.postbackBeforeShowRefForm != true) {
            url = this.GetUrl(this._element.cusAttr("RefType"), "ModalRef") + "&CommandType=validate&QueryField=" + this._element.cusAttr('KeyField') + "&" + this._element.cusAttr('KeyField') + "=" + encodeURIComponent(inputValue);
        } else //gct20081010:认为是this.postbackBeforeShowRefForm为true 的特殊处理
        {
            url = this.GetUrl(this._element.cusAttr("RefType"), "ModalRef", this.postbackBeforeShowRefForm) + "&CommandType=validate&QueryField=" + this._element.cusAttr('KeyField') + "&" + this._element.cusAttr('KeyField') + "=" + encodeURIComponent(inputValue);
            this.postbackBeforeShowRefForm = false;
        }
        if (this._isMultiOrg && (this._ChildToParentOrg != null)) {
            url += "&ChildToParentOrg=" + this._ChildToParentOrg;
            this._ChildToParentOrg = null;
        } else {
            if (this._isMultiOrg) {
                var urlEx;
                if (url.indexOf("MultiOrgID") < 0) //lkc: 个性化多组织 参照的支持
                {
                    urlEx = this.get_SrcOrg();
                    url += "&MultiOrgID=" + urlEx;
                }
                if (this._entityFullName) {
                    url += "&EntityFullName=" + this._entityFullName;
                }
            }
        }

        url = AppendPopupUrl(url);
        if (!this._xmlhttpRequest) {
            this.GetXmlHttpRequest();
        }
        if (this._xmlhttpRequest) {
            this.ProcessRequest(url, this.CallbackComplete);
        }
    }, //endregion

    //region       ProcessRequest
    ProcessRequest: function (url, reqReadyFunction) {
        var isStandard = navigator.userAgent.indexOf('WebKit') > -1 || navigator.userAgent.indexOf('Firefox') > -1;
        var isIE = navigator.userAgent.indexOf('MSIE') > -1
        if(url.indexOf("MatchType=5")>-1) {

			//debugger;
            url = url.replace("simple.aspx?", "../mvc/main/BatchReference?");

            var codeFirstIndex = url.indexOf("&"+ this._element.cusAttr('ValueField'));
            var codeLastIndex = url.indexOf("&MatchType");
            var pUrl = url.substring(codeFirstIndex + 1,codeLastIndex);
            var baseUrl = url.substring(0, codeFirstIndex) + url.substring(codeLastIndex) +"&__ipt=true&ContentType=json"
            // var pUrl = this.GetPostUrl(baseUrl, url);
            this._xmlhttpRequest.open("POST", baseUrl, false);
            this._xmlhttpRequest.onreadystatechange = reqReadyFunction;
            this._xmlhttpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            this._xmlhttpRequest.send(pUrl);
            return
        }
        if((url.length > 8000 && isStandard) || (isIE && url.length > 2000)) {
            alert(Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_ReferenceUrlOverLength);
            try {
                this._textbox.focus();
                this._textbox.select();
            } catch (e) { }
            return;
            /* 由于修改为Postback需要修改PDHelper等，影响面较大，无法估量风险，暂时处理为屏蔽操作
            *  下一版本可以放开此处理逻辑，并修改PDHelper的处理，使PostBack也可以处理校验逻辑
            */
            var baseUrl = window.location.href;
            var pUrl = this.GetPostUrl(baseUrl, url);
            this._xmlhttpRequest.open("POST", baseUrl, false);
            this._xmlhttpRequest.onreadystatechange = this.CallbackComplete;
            this._xmlhttpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            this._xmlhttpRequest.send(pUrl);
        } else {
            this.url = url;
            if (this.isAllowCache() && $Cache(url) != null) {
                reqReadyFunction($Cache(url));
                return;
            }
            this._xmlhttpRequest.open("GET", url, false);
            this._xmlhttpRequest.onreadystatechange = reqReadyFunction;
            this._xmlhttpRequest.send("");
        }
    }, //endregion

    //region       CallXmlHttp
    CallXmlHttp: function (inputValue) {

        var QureyField = this._element.cusAttr('ValueField');
        if (this._isForceFireContentChange) { //如果是模拟录入，则使用ID检索 Add By Lzhm 20091211 Bug V2SP100337611
            if (!this.get_IsUseCodeMatch()) {
                if (this._key4Simulator != "" && this._key4Simulator > 0) {
                    QureyField = this._element.cusAttr('KeyField');
                    inputValue = this._key4Simulator;
                    this._key4Simulator = "";
                }
            }
        }

        this._inputValue = G_Trim(inputValue);
        var url;

        if (this.postbackBeforeShowRefForm != true) {
            url = this.GetUrl(this._element.cusAttr("RefType"), "ModalRef") + "&CommandType=callback&QueryField=" + QureyField + "&QueryNameField=" + this._element.cusAttr('TextField') + "&" + QureyField + "=" + encodeURIComponent(inputValue);
        } else //gct20081010:认为是this.postbackBeforeShowRefForm为true 的特殊处理
        {
            url = this.GetUrl(this._element.cusAttr("RefType"), "ModalRef", true) + "&CommandType=callback&QueryField=" + QureyField + "&QueryNameField=" + this._element.cusAttr('TextField') + "&" + QureyField + "=" + encodeURIComponent(inputValue);
            this.postbackBeforeShowRefForm = false;
        }
        if (this._isForceFireContentChange) {
            if (this.get_IsUseCodeMatch()) {
                url += "&MatchType=28"; //u9lkc 20110907 在PDHelper中约定 28为模拟录入时使用的 只做唯一精确匹配！
            }
        }

        if (this._isMultiOrg) {
            var urlEx;

            if (url.indexOf("MultiOrgID") < 0) //lkc: 个性化多组织 参照的支持
            {
                urlEx = this.get_SrcOrg();
                url += "&MultiOrgID=" + urlEx;
            }
            if (this._entityFullName) {
                url += "&EntityFullName=" + this._entityFullName;
            }
        }

        url = AppendPopupUrl(url);
        if (!this._xmlhttpRequest) {
            this.GetXmlHttpRequest();
        }
        if (this._xmlhttpRequest) {
            this.ProcessRequest(url, this.CallbackComplete);
        }
    }, //endregion
    // 手动触发请求参照xml数据
    CallXmlHttpForPaste: function (inputValue,pasteValue) {
        if(this._dynamicParams){
            this._dynamicParams.ItemMaster ? this._dynamicParams.ItemMaster = "" : null;
            this._dynamicParams.ItemMaster_Code ? this._dynamicParams.ItemMaster_Code = "" : null;
        }
        var QureyField = this._element.cusAttr('ValueField');
        if (this._isForceFireContentChange) { //如果是模拟录入，则使用ID检索 Add By Lzhm 20091211 Bug V2SP100337611
            if (!this.get_IsUseCodeMatch()) {
                if (this._key4Simulator != "" && this._key4Simulator > 0) {
                    QureyField = this._element.cusAttr('KeyField');
                    inputValue = this._key4Simulator;
                    this._key4Simulator = "";
                }
            }
        }

        this._inputValue = G_Trim(inputValue);
        var url;

        if (this.postbackBeforeShowRefForm != true) {
            url = this.GetUrl(this._element.cusAttr("RefType"), "ModalRef") + "&CommandType=callback&QueryField=" + QureyField + "&QueryNameField=" + this._element.cusAttr('TextField') + "&" + QureyField + "=" + encodeURIComponent(inputValue) + "&BatchPasteCustWhere=" +  (pasteValue ? encodeURIComponent(pasteValue) : "");
        } else //gct20081010:认为是this.postbackBeforeShowRefForm为true 的特殊处理
        {
            url = this.GetUrl(this._element.cusAttr("RefType"), "ModalRef", true) + "&CommandType=callback&QueryField=" + QureyField + "&QueryNameField=" + this._element.cusAttr('TextField') + "&" + QureyField + "=" + encodeURIComponent(inputValue) + "&BatchPasteCustWhere=" +  (pasteValue ? encodeURIComponent(pasteValue) : "");
            this.postbackBeforeShowRefForm = false;
        }
        url += "&MatchType=5"; //u9lkc 20110907 在PDHelper中约定 28为模拟录入时使用的 只做唯一精确匹配！

        if (this._isMultiOrg) {
            var urlEx;

            if (url.indexOf("MultiOrgID") < 0) //lkc: 个性化多组织 参照的支持
            {
                urlEx = this.get_SrcOrg();
                url += "&MultiOrgID=" + urlEx;
            }
            if (this._entityFullName) {
                url += "&EntityFullName=" + this._entityFullName;
            }
        }

        url = AppendPopupUrl(url);
        if (!this._xmlhttpRequest) {
            this.GetXmlHttpRequest();
        }
        if (this._xmlhttpRequest) {
            this.ProcessRequest(url, this.CallbackCompleteForPaste);
        }
    },
    //region       CallXmlHttp_AutoComplete
    CallXmlHttp_AutoComplete: function (inputValue) {
        this._inputValue = G_Trim(inputValue);
        //AutoComplete的时候，查询字段为参照的Name字段，而不是参照的Code，因为对于AutoComplete，自动完成Name才有意义
        var url;
        if (this.postbackBeforeShowRefForm != true) {
            url = this.GetUrl(this._element.cusAttr("RefType"), "ModalRef") + "&CommandType=auotcomplete&QueryField=" + this._element.cusAttr('TextField') + "&" + this._element.cusAttr('TextField') + "=" + encodeURIComponent(inputValue);
        } else //gct20081010:认为是this.postbackBeforeShowRefForm为true 的特殊处理
        {
            url = this.GetUrl(this._element.cusAttr("RefType"), "ModalRef", true) + "&CommandType=auotcomplete&QueryField=" + this._element.cusAttr('TextField') + "&" + this._element.cusAttr('TextField') + "=" + encodeURIComponent(inputValue);
            this.postbackBeforeShowRefForm = false;
        }
        url = AppendPopupUrl(url);
        if (!this._xmlhttpRequest) {
            this.GetXmlHttpRequest();
        }
        if (this._xmlhttpRequest) {
            this._xmlhttpRequest.open("GET", url, false);
            this._xmlhttpRequest.onreadystatechange = this.CallbackComplete_AutoComplete;
            this._xmlhttpRequest.send("");
        }
    }, //endregion

    //endregion

    //region    弹出 参照对话框
    ShowRefForm: function (inputCode) {
        if (UF.UI.Reference.DisableShowForm == true)
            return;
        if (this._CancelShowForm) {
            this._CancelShowForm = false;
            return;
        }
        if (!this._IsShowForm) {
            return;
        }
        if (_ClientPostBackManager.Runing) {
            return;
        } //PostBack进行中取消操作
        var url
        if (this.postbackBeforeShowRefForm != true) {
            url = this.GetUrl(this._element.cusAttr("RefType"), "ModalRef");
        } else //gct20081010:认为是this.postbackBeforeShowRefForm为true 的特殊处理
        {
            url = this.GetUrl(this._element.cusAttr("RefType"), "ModalRef", true);
            this.postbackBeforeShowRefForm = false;
        }

        if (inputCode && inputCode != "") url += "&QueryNameField=" + this._element.cusAttr('TextField') + "&QueryField=" + this._element.cusAttr('ValueField') + "&" + this._element.cusAttr('ValueField') + "=" + encodeURIComponent(inputCode);

        //Add by zhangzhang...20091224
        if (!(inputCode && inputCode != ""))
            inputCode = this._textbox.value;
        if (inputCode && inputCode != "") {
            var tempUrl = url + "&ValueByClick=" + encodeURIComponent(inputCode);
            if (tempUrl.length < 2000)
                url = tempUrl;
        }
        //Add end....

        var title = this._element.cusAttr('RefTitle');
        if (!title) title = "";
        var width = this._element.cusAttr('RefWidth');
        var height = this._element.cusAttr('RefHeight');
        var isStandard = navigator.userAgent.indexOf('WebKit') > -1 || navigator.userAgent.indexOf('Firefox') > -1;
        var isIE = navigator.userAgent.indexOf('MSIE') > -1
        if((url.length > 8000 && isStandard) || (isIE && url.length > 2000)) {
            var ctrlID = this._element.cusAttr("CtrlId");
            if (ctrlID == null)
                ctrlID = "";
            var tmpUrl = "simple.aspx?lnk=" + this._element.cusAttr("RefType") + "&CtrlId=" + ctrlID + "&chromeType=4&ShowType=ModalRef";
            var params = url.substring(tmpUrl.length, url.length);
            url = tmpUrl + "&OverLength=1";
            window.Ref_Params = params;
        }

        //如果是多组织
        if (this._isMultiOrg) {
            var urlEx;
            //如果动态参数没有传入此属性，此处须要补上 20091103 张璋
            if (url.indexOf("MultiOrgID") != -1) { } else {
                urlEx = this.get_SrcOrg();
                url += "&MultiOrgID=" + urlEx;
            }
            if (this._entityFullName) {
                url += "&EntityFullName=" + this._entityFullName;
            }
        }
        //如果已经弹出窗口，就不再弹出。避免在输入框输入值后按F2，弹出2此窗口问题。
        if (this._IsDialogOpenning == true)
            return;
        this._IsDialogOpenning = true;
        this._IsReferenceClick = true;
        //var ret = ShowModalDialog(url, title, height, width, true);
        //url = BeforeShowModalDialog(url, title, height, width);
        var ret = null;
        if (!width) width = 600;
        if (!height) height = 400;
        width = parseInt(width) + 10;
        /*height = parseInt(height) + 60;*/
        //this.showDialogCallback.me=this;
        //ShowModalDialogForAll(url, title, height, width, true,false, this.showDialogCallback,this);
        if (window.location.href.indexOf("version=next") > -1 && url.indexOf("version=next") == -1) {
            if (url.indexOf("?") != -1) {
                url += "&";
            }
            else {
                url += "?";
            }
            url += "version=next";
        }
        ShowModalDialogForAll(url, title, height, width, true, false, this);
    }, //endregion

    showDialogCallback: function (ret) {

        // if (retv && typeof(retv) == "string" && !(window.Escaped == "true"))
        //     retv = unescapeHTML(retv);
        // window.Escaped = null;
        //===by zzq 返回值若为空则不去解码
        //if (ret)
        //    ret = HtmlHelper.HtmlDecode(ret);

        this._IsDialogOpenning = false;

        if (ret != null && typeof (ret) != "boolean") //这里的showRefForm可能是通过FormProcess中的show方法引发的，此时ret为true或false时，这时应该特殊处理
        {
            //Global_RefNotNeedCallback4P = true;//DataGrid.js中3614行再次修改为false，这个不得随意更改

            //gct20090615:如果该参照是个性化跨页签移动到Grid中的情况，且在Grid页签的时候，需要设置个性化标记，因为下面的OnContentChanged要触发ValueChanged
            var gridID4P = this._element.cusAttr('GridCltID4P');
            var colID4P = this._element.cusAttr('ColFldID4P');
            if (gridID4P != null && colID4P != null && $find(gridID4P) != null) {
                //debugger;
                //this.set_IsRaiseEvent(false);//----------------------------------------个性化-不抛事件
                var oldIsPP = this.get_IsPersonalProcess();
                this.set_OldIsPersonalProcess(oldIsPP); //记下原来的标识，以便在处理完后恢复
                this.set_IsPersonalProcess(true); //--------------------------------------个性化-同步 ValueChanged的时候需要将控件的值同步到Grid的Cell的值上
            }
            //$(this.get_element()).attr('name') IE中返回了undefined ,HtmlHelper.getElementDocument(this.get_element()).children($(this.get_element()).attr('name'))
            //返回了整个html ，看不懂先注释
            // if (HtmlHelper.getElementDocument(this.get_element()).children($(this.get_element()).attr('name'))) {
            //     HtmlHelper.getElementDocument(this.get_element()).children($(this.get_element()).attr('name')).value = ret;
            // }
            //wanglei:将 xml 字符串 保存 隐藏域中
            this.saveReturnXml(ret);
            this.OnContentChanged(ret);
        } else { //add by lzhm 如果弹出窗口返回值为空，取消回车事件。
            if (window.event && window.event.keyCode == KeyCode.enter) {
                $Event(window.event).stopPropagation();
                $Event(window.event).preventDefault();
            }
            if (this._isForceFireContentChange == true) {
                if (this._key == "" || this._key == -1 || this._key == "-1") {
                    this._key = "-1";
                    this._value = "";
                    this._text = "";
                    this._textbox.value = "";
                }
            }
        }
        try {
            this._textbox.focus();
        } catch (e) { }
    },
    //region    PostBack 方法
    PostBack: function () { //回调
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        if (this._element && this._element.cusAttr('AutoPostBack') == "True") {
            if (typeof (__doPostBack) != "undefined") {
                if (window.event) {
                    $Event(window.event).stopPropagation();
                    $Event(window.event).preventDefault();
                }
                //yangkuna20100906:BeforePostBack
                if (!this.isMustPostBack && this.OnBeforePostBack()) {
                    this.SetClientIsAbortPostBack(true);
                    return;
                }
                if (this._isNeedValidate && (this._key == this._oldKey || (((this._key == "") || (this._key == "-1")) && ((this._oldKey == "") || (this._oldKey == "-1"))))) {
                    if (this._isForceFireContentChange) { } else {
                        return;
                    }
                }
                this.RecordFocus();
                window._TextBoxFirePostBack = true;
                __doPostBack(this._element.id, "");
            }
        }
    },
    FirePostBack: function () {
        if (typeof (__doPostBack) != "undefined") {
            if (window.event)
                $Event(window.event).stopPropagation();
            this.RecordFocus();
            window._TextBoxFirePostBack = true;
            __doPostBack(this.get_id(), "");
        }
    }, //endregion

    //endregion

    //region  the other
    get_Type: function () {
        return ControlType.Reference;
    },
    set_IsShowForm: function (v) {
        var isS = ToBoolean(v);
        this._IsShowForm = isS;
    },
    get_IsShowForm: function () {
        return this._IsShowForm;
    },
    get_IsValidating: function () {
        return this._isValidating;
    },
    set_IsValidating: function (value) {
        var isV = ToBoolean(value);
        this._isValidating = isV;
    },
    set_IsLoadDefaultParams: function (v) {
        this._IsLoadDefaultParams = v;
    },
    get_IsLoadDefaultParams: function () {
        return this._IsLoadDefaultParams;
    },
    set_Width: function (width) {
        this._element.style.width = width + 'px';
        this._textbox.style.width = width - 18 + 'px'
    },
    isAllowCache: function () {
        var t = this._element.cusAttr('AllowClientCache');
        return ((typeof (t) != "undefined") && (t == "y"));
    },


    //gct20090323:个性关联设计中，允许只赋一个编码的情况
    set_SingleCode: function (code) {
        this._textbox.value = code;
        this._textBoxIsValueNotText = true;
        this.onInputReturn();
    },
    set_AutoPostBack: function (bF) {
        _IsPostBack = bF;
    },
    get_AutoPostBack: function () {
        return _IsPostBack;
    },

    ValidateInput: function () {
        return this.onInputReturn();
    },
    InputXmlHttpValidate: function () {
        this.CallXmlHttpValidate(this._key);
    },


    SetFocus: function () {
        Basic.GridEditSetFocus(this._textbox);
    },

    IfAllowMultiSelection: function () {
        if (typeof (this._element.cusAttr('AllowMultiSelection')) == "undefined" || this._element.cusAttr('AllowMultiSelection') == "False") {
            return false;
        } else {
            return true;
        }
    },
    get_NeedValidate: function () {
        return this._isNeedValidate;
    },
    set_NeedValidate: function (bV) {
        this._isNeedValidate = bV;
    },
    set_RefType: function (strPartID) {
        this._element.cusAttr("RefType", strPartID);
    },
    get_RefType: function () {
        return this._element.cusAttr("RefType");
    },

    set_RefWidth: function (w) {
        this._element.cusAttr('RefWidth', w);
    },

    set_RefHeight: function (h) {
        return this._element.cusAttr('RefHeight', h);
    },

    GetPostUrl: function (baseUrl, url) {
        var bList = this.GetUrlAttributeList(baseUrl);
        var pList = this.GetUrlAttributeList(url);
        for (var i = 0; i < bList.length; i++) {
            for (var j = 0; j < pList.length; j++) {
                if (bList[i].key == pList[j].key) {
                    pList[j].del = true;
                    break;
                }
            }
        }
        var pUrl = "";
        for (var k = 0; k < pList.length; k++) {
            if (!pList[k].del) {
                if (pUrl != "")
                    pUrl += "&";
                pUrl += pList[k].key + "=" + pList[k].value;
            }
        }
        return pUrl;
    },
    GetUrlAttributeList: function (url) {
        var list = [];
        var ps = url.split("?");
        var p;
        if (ps.length == 2)
            p = ps[1];
        if (!p)
            return list;
        pl = p.split("&");
        for (var i = 0; i < pl.length; i++) {
            list[i] = new Object();
            list[i].key = pl[i].split("=")[0];
            list[i].value = pl[i].substring(pl[i].split("=")[0].length + 1);
        }
        return list;
    },
    get_IsUseCodeMatch: function () {
        return true;
    },
    //wanglei: 保存 返回 xml 数据
    saveReturnXml: function (returnValues) {
        this._hiddenReturn.value = encodeURIComponent(returnValues);
        this.rowDatas = returnValues;
    },

    getReturnXml: function () {
        try {
            return PopupFormHelper.TranslateInfor(this.rowDatas);
        } catch (e) { }
        return null;
    },

    get_SrcOrg: function () {
        var org = this._MultiOrg;
        if (this._MultiOrgHiddenID) {
            var c = document.getElementById(this._MultiOrgHiddenID);
            if (c) {
                if (c.control) {
                    org = c.control.get_Key();
                } else {
                    org = c.value;
                }
            }
        }
        return org;
    },
    set_SrcOrg: function (value) {
        this._MultiOrg = value;
        this.get_element().cusAttr(this.SrcOrgFlag, value);
    },
    ReplaceResult: function (ret) {
        this.keyCode = event;
        this.referenceData = ret;
        var params = this.InitMultiOrgParams(ret, this._element.cusAttr('KeyField'), this._NeedConvIDs, this._entityFullName);
        this._dataGetter.Do(params, this.GetResult, this);
    },
    GetResult: function (paraResult, userContext) {
        _this = userContext;

        if ((paraResult != null) && (paraResult.trim() != "")) {
            var result = Sys.Serialization.JavaScriptSerializer.deserialize(paraResult);
            var ids = result.AllDatas;
            for (var i = 0; i < ids.length; i++) {
                if (ids[i]) {
                    var v = ids[i].split(":");
                    if (v.length == 2) {
                        _this.referenceData.SetValue(v[0], v[1]);
                    }
                }
            }
            _this.DoContentChanged(_this.referenceData);
        }
    },
    postBackCheck: function () {
        if (_PostBack == "2") {
            Post();
        }
    },

    SetClientIsAbortPostBack: function (isAbort) {
        if (this._tagHidden) {
            this._tagHidden.value = (isAbort === true ? "1" : "");
        }
    },

    OnBeforePostBack: function () {
        var args = new UF.UI.ChangeEventArgs();
        args.result = this._datas;
        args.arg = {};
        args.arg.CancelAction = false;
        this.raiseEvent("BeforePostBack", args);
        return args.arg.CancelAction;
    },
    IsCodeChange: function () {
        return this._textbox.value != this._value;
    },
    ListToString: function (list, split) {
        if (list == null) return "";
        var textFields = "";
        var pre = "";
        for (var i = 0; i < list.length; i++) {
            textFields += pre + list[i];
            pre = split;
        }
        return textFields;
    },
    StringToList: function (textFields, split) {
        var temp = new Array();
        if (textFields == null || textFields == "") return temp;
        temp = textFields.split(split);
        return temp;
    },
    CompareList: function (source, target) {
        if (source != null && target != null && source.length == target.length) {
            for (var i = 0; i < source.length; i++) {
                if (source[i] != target[i]) {
                    return false;
                }
            }
            return true;
        }
        return false;
    },
    BtnMouseOver: function (button) {
        this._button.className = this.btnmouseOverClass;
    },
    BtnMouseOut: function () {
        this._button.className = this.btnmouseOutClass;
    },
    /*add by lzhm 2007-7-23 16:34 ,Postback时记录焦点控件 用于Panel.js，处理恢复焦点状态*/
    RecordFocus: function () {
        var hc = window.document.getElementById("HiddenCurrentControl");
        if (hc) {
            if (!hc.value.split("|", 2)[1] || hc.value.split("|", 2)[1] == "")
                hc.value = this._textbox.id + "|false";
            else
                hc.value = this._textbox.id + "|" + hc.value.split("|", 2)[1];

            if (window.event && window.event.type == "click" || this._IsReferenceClick) { 
                // 如果是通过鼠标点击参照按钮，则焦点停留在该控件上，不跳到下一控件
                // U9ZNZZ-88305在非IE浏览器需记录下参照下是否被点击过
                hc.value = this._textbox.id + "|stay";
            }
            this._IsReferenceClick=false;
        }

    },

    get_AutoComplete: function () {
        return this._autoComplete;
    },

    set_AutoComplete: function (isAC) {
        if (isAC != null && isAC.toString().toLowerCase() == "true")
            this._autoComplete = true;
        else
            this._autoComplete = false;
    },

    ForceFireContentChange: function () {
        this._isForceFireContentChange = true;
        this.onInputFocus();
        this.onInputReturn();
    },
    //发起二次加载的AJAX操作
    SecondLoadAjaxCall: function () {
        $alert("{------二次加载AJAX-开始------}");
        var url;
        var h = $("input[name*='TASKID_HIDDENFIELD']");
        var key = this.get_Key();
        url = "SecondLoad.aspx?SourceID=" + this.get_id() + "&SourceKey=" + key + "&TaskID=" + h.val();
        url = AppendPopupUrl(url);
        $alert("URL:" + url);

        if (!this._xmlhttpRequest) {
            this.GetXmlHttpRequest();
        }
        if (this._xmlhttpRequest) {
            this.ProcessRequest(url, new Function("$find('" + this.get_id() + "').SecondLoadCallBack();"));
        }
    },
    SetControlAttribute: function (attrArray) {
        UF.UI.Reference.callBaseMethod(this, 'SetControlAttribute');
        if (attrArray && attrArray.length > 2) {
            this.set_RefType(attrArray[2]);
            this.set_RefWidth(attrArray[3]);
            this.set_RefHeight(attrArray[4]);
            var e = this.get_element();
            e.KeyField = attrArray[5];
            e.ValueField = attrArray[6];
            e.TextField = attrArray[7];
            this.ClearAllParams();
            this.set_CustomInParams(attrArray[8]);
            this.set_AddParams('');
            e.setAttribute('CustomInParamsSer', attrArray[9]);
            e.setAttribute('AddParams', attrArray[10]);
            e.setAttribute('CustomInParamsControl', attrArray[11]);
        }
    },
    //二次加载的回调函数
    SecondLoadCallBack: function () {
        _this = this;
        if ((_this._xmlhttpRequest) && (_this._xmlhttpRequest.readyState == 4)) {
            var result = _this._xmlhttpRequest.responseText;
            result = unescapeHTML(result);
            $alert("Result:" + result);
            var datas = $.parseJSON(result);
            var rlt = $SetSndLoadControlValue(datas);
            $alert("{------二次加载AJAX-结束------}");
        }
    } //endregion

}
//endregion

UF.UI.Reference.registerClass('UF.UI.Reference', UF.UI.PopupForm);
if (UF.UI.Reference.DisableShowForm === undefined)
    UF.UI.Reference.DisableShowForm = false;

//region Template
function ReferenceTemplate() { }
ReferenceTemplate.Enabled = InputControlTemplate.Enabled;
ReferenceTemplate.ReadOnly = InputControlTemplate.ReadOnly;
ReferenceTemplate.TBClassName = InputControlTemplate.TBClassName;
ReferenceTemplate.TBClassName_R = InputControlTemplate.TBClassName_R;
ReferenceTemplate.TBClassName_D = InputControlTemplate.TBClassName_D;
ReferenceTemplate.BtnClassName = "btn RefBtn";
ReferenceTemplate.BtnClassName_Dis = "btn RefBtn_Dis";
ReferenceTemplate.SplitString1 = "__&URS1&_"; //永不会变的
ReferenceTemplate.SplitString2 = "__&URS2&_"; //永不会变的
ReferenceTemplate.IsNeedValidate = "True";
ReferenceTemplate.hiddenReturn = "_ReturnHidden"; //返回 的 隐藏域
//endregion

//region   参照自动搜索完成 辅助类

//region       RefInputCallback 类
//implement callback


function RefInputCallback(input, obj) {
    this._input = input;
}

//返回true继续显示，否则不显示
function RefInputCallback$onDisplay(displayData) {
    return true;
}

function RefInputCallback$onDisconnect() { }

//通知选择的code
function RefInputCallback$onSelectItem(selectCode) {
    //将当前输入框的文本设置为选择的文本
    $(this._input).val(selectCode);
}

//通知确认的code
function RefInputCallback$onConfirmItem(itemData) {
    if (itemData) {
        $(this._input).val(itemData.Code);
    }
}

RefInputCallback.prototype = {
    _input: null,
    onDisplay: RefInputCallback$onDisplay,
    onDisconnect: RefInputCallback$onDisconnect,
    onSelectItem: RefInputCallback$onSelectItem,
    onConfirmItem: RefInputCallback$onConfirmItem
};
if (UF.UI.JControl !== undefined) {
    RefInputCallback.registerClass('RefInputCallback', null, UF.UI.JControl.AutoComplete.IAutoCompleteCallback);
}

//endregion

//endregion

var displayData = {
    columns: ["ID", "Code", "Name"],
    data: []
};
;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.TabControl = function (element) {

    UF.UI.TabControl.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    this.tabGroup = new Tabs();
    this.treeGroup;
    this.heads;
    this.pages;
    this.control;
    this.Mode;
    this.SelectedIndex;
    //this.SelectedId;
    this._fireEventTabIndex = -1;

    // Handler
    this._elementkeydownHandler;
    this.m_CustomFilterToolbarDiv = null;
}

UF.UI.TabControl.prototype = {

    initialize: function () {
        UF.UI.TabControl.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        this.initControl();

        // Create delegates Attach events
        this._elementkeydownHandler = Function.createDelegate(this, this.onkeyDown);
        //女侠为跨浏览器而修改
        var _this = this;
        $(this._element).bind("keydown", function () {
            _this.onkeyDown();
        });
        //$addHandler(this.get_element(), "keydown", this._elementkeydownHandler);
    },

    dispose: function () {
        // TODO: add your cleanup code here
        if (this._elementkeydownHandler) {
            //女侠为跨浏览器而修改
            //$removeHandler(this.get_element(), "keydown", this._elementkeydownHandler);
            $(this._element).unbind("keydown");
            this._elementkeydownHandler = null;
        }
        if (this.tabGroup) {
            this.tabGroup.dispose();
            this.tabGroup = null;
        }
        this.control = null;
        this.heads = null;
        this.pages = null;

        UF.UI.TabControl.callBaseMethod(this, 'dispose');
    },
    initControl: function () {
        this.SelectedIndex = this._element.cusAttr('SelectedIndex');
        this.Mode = this._element.cusAttr('DisplayModel');
        this.heads = this._element.children[0].children[0];
        this.pages = this._element.children[1];
        for (var i = 0, len = this.heads.children.length - 1; i < len; i++) {
            this.tabGroup.AddTab(this.heads.children[i], this.pages.children[i], i, this);
        }
        this.m_CustomFilterToolbarDiv = this.GetCustomFilterToolbar();
        if (this.m_CustomFilterToolbarDiv != null) {
            this.m_CustomFilterManagerInstance = GridCustomFilterToolbarManager.GetInstance(this.m_CustomFilterToolbarDiv, this, "Tab");
            this.m_CustomFilterManagerInstance.Initialize();
        }
    },
    GetCustomFilterToolbar: function () {
        if (this.pages.children.length > 0) {
            var index = this.pages.children.length - 1;
            var div = this.pages.children[index];
            if (div.id == "TabFilter") {
                div.cusAttr("ParentTabID", this._element.id);
                //初始化最后位置
                if (top.CustomFilterLocation) {
                    var item = top.CustomFilterLocation.getLocationItem(this._element.id);
                    if (item) {
                        div.style.left = item.Left + 'px';  //添加px单位 -- weiyin
                        div.style.bottom = item.Bottom + 'px';

                        //$alert(item.Left +"," + item.Bottom);
                        //$alert(div.style.left);
                        //$alert(div.style.bottom);
                    }
                }
                div.style.display = "block";
                return div;
            }
            else {
                return null;
            }
        }
        else {
            return null;
        }
    },
    //快速定位的导航功能
    OnCustomFilterClick: function (action) {
        if (_ClientCallBackManager && _ClientCallBackManager.Runing)   //如果在Callback期间，不处理
            return false;
        this.SetCustomerFilterHiddenInfo(action);
        if (this.get_CallPostBack() != null) {
            eval(this.get_CallPostBack());
        }
    },
    //event    
    add_onTabClick: function (handler) {
        this.get_events().addHandler("onTabClick", handler);
    },
    remove_onTabClick: function (handler) {
        this.get_events().removeHandler("onTabClick", handler);
    },
    raiseonTabClick: function (args) {
        var eh = this.get_events().getHandler("onTabClick");
        if (eh) {
            eh(this, args);
        }
    },

    // TODO: (Step 2) Add your property accessors here
    get_Type: function () {
        return ControlType.TabControl;
    },
    //???? extend
    set_ReadOnly: function (bReadonly) {
        this.SetReadOnly(this.get_TabIndex(), bReadonly);
    },
    SetReadOnly: function (nIndex, bReadOnly) {
        if (this.heads) {
            var r = this.heads.children[nIndex];

            //var className = $(r).attr("class");
            //            var centerClass = "TabPageTitle_Center";
            //            var rightClass = "TabPageTitle_Right";
            if (!bReadOnly) {
                $(r).removeClass("disabled")
            } else {
                $(r).addClass("disabled")
                //                leftClass = "TabPageTitleDisable_Left";
                //                centerClass = "TabPageTitleDisable_Center";
                //                rightClass = "TabPageTitleDisable_Right";
            }
        }
    },
    // extend
    set_Enabled: function (bEnabled) {
        this.SetEnabled(this.get_TabIndex(), bReadonly);
    },
    SetEnabled: function (nIndex, bEnabled) {
        if (this.heads) {
            var r = this.heads.children[nIndex];
            //            var leftClass = "TabPageTitle_Left";
            //            var centerClass = "TabPageTitle_Center";
            //            var rightClass = "TabPageTitle_Right";
            if (bEnabled) {
                $(r).removeClass("disabled")
            } else {
                $(r).addClass("disabled")
                //                leftClass = "TabPageTitleDisable_Left";
                //                centerClass = "TabPageTitleDisable_Center";
                //                rightClass = "TabPageTitleDisable_Right";
            }
            //            r.cells[0].className = leftClass;
            //            r.cells[1].className = centerClass;
            //            r.cells[2].className = rightClass;
        }
        if (this.pages && this.pages.children[nIndex]) {
            this.pages.children[nIndex].cusAttr("disabled", !bEnabled);
        }
    },
    SetTabIndex: function (vIndex, direction) {     //2007-9-24 添加 direction参数，为Panel.js使用
        if (vIndex == this.SelectedIndex) //如果是同一页签，不处理
            return;
        if (_ClientCallBackManager && _ClientCallBackManager.Runing)   //如果在Callback期间，不处理
            return false;
        //this.SelectedIndex = vIndex;
        //$(this.get_element()).attr('SelectedIndex') = vIndex + "";
        this.SetSelected(vIndex);
        $(this.heads.children[vIndex]).click(); //mahx20160711 修改click触发事件
        //        var args = new UF.UI.ChangeEventArgs();
        //        args.TabIndex=vIndex;
        //        this.raiseonTabClick(args);
        //    	//setFocusControl(this.tabGroup.TabCollection[vIndex].Page);	
        //        if(this.get_CallPostBack()!=null) {
        //            top.NextCurrentContainer = this.tabGroup.TabCollection[vIndex].Page;    //设置当前焦点控件
        //            if(direction != null)
        //                top.NextCurrentContainerDirection = direction;    //设置当前焦点控件方向
        //            else
        //                top.NextCurrentContainerDirection = false;
        //            SetNextCurrentContainerValue();
        //            eval(this.get_CallPostBack());
        //        }else{
        //            this.SetFocus(this.tabGroup.TabCollection[vIndex].Page);
        //        }
    },

    SetTabByPageID: function (pageId) {
        var index = -1;
        for (var i = 0, len = this.pages.children.length; i < len; i++) {
            if (pageId == this.pages.children[i].id) {
                index = i;
                break;
            }
        }
        if (index != -1) {
            this.SetTabIndex(index);
        }
    },

    set_TabIndex: function (vIndex) {
        this.SetTabIndex(vIndex);
    },
    get_TabIndex: function () {
        return this.SelectedIndex;
    },

    FireEventTabIndex: function (value) {
        this._fireEventTabIndex = value;
    },
    SetFocus: function () {
        var panelPage = $find(this.tabGroup.TabCollection[this.SelectedIndex].Page.id);
        if (panelPage) {  //引用了panel.js中的事件处理 setContainerControlFocus
            return panelPage.setContainerControlFocus(this.tabGroup.TabCollection[this.SelectedIndex].Page, false)
            //return panelPage.setContainerControlFocus(this.tabGroup.TabCollection[this.SelectedIndex].Page,((window.event != null) && window.event.keyCode == KeyCode.left))
        }
        return false;
        /*
        GetInputElements(this.tabGroup.TabCollection[this.SelectedIndex].Page);
        if(Controls.length>0)  {      
        var ct = getMinControl(Controls);  		
        if(ct.className=="main_Span"){    		
        ct.CurrentRowIndex = 0;
        ct.CurrentColumnIndex = 0;
        }else{
        ct.focus();
        }
        event.cancelBubble=true;
        event.returnValue=false;
        return true;
        }
        return false;
        */
    },

    getTab: function () {
        return this.tabGroup; 
    },

    onkeyDown: function () {
        if (window.document.readyState != "complete") return;
        if (!window.event.ctrlKey && !(window.event.altKey && (window.event.keyCode == KeyCode.pup || window.event.keyCode == KeyCode.pdn))) return;
        switch (window.event.keyCode) {
            case KeyCode.left:
                var nextIndex = this.getNextIndex(this.SelectedIndex, this.heads.children.length, true);
                this.SetTabIndex(nextIndex);
                //this.heads.children[nextIndex].fireEvent("onclick",null);
                //this.SetFocus(this.tabGroup.TabCollection[nextIndex].Page);      
                break;
            case KeyCode.right:
                var nextIndex = this.getNextIndex(this.SelectedIndex, this.heads.children.length, false);
                this.SetTabIndex(nextIndex);
                //this.heads.children[nextIndex].fireEvent("onclick",null);
                //this.SetFocus(this.tabGroup.TabCollection[nextIndex].Page);   
                break;
            case KeyCode.pup:
                if (window.event.altKey) {
                    var t = this.tabGroup.TabCollection[this.get_TabIndex()];
                    if (t && t.NavButton && t.NavButton.PreButton) {
                        t.NavButton.PreButton.fireEvent("onclick");
                    }
                }
                break;
            case KeyCode.pdn:
                if (window.event.altKey) {
                    var t = this.tabGroup.TabCollection[this.get_TabIndex()];
                    if (t && t.NavButton && t.NavButton.NextButton) {
                        t.NavButton.NextButton.fireEvent("onclick");
                    }
                }
                break;
            case 84: //T
                var nextT = this.getNextTabControl();
                if (nextT != null && nextT.control != null) {
                    nextT.control.SetFocus(nextT.control.tabGroup.TabCollection[nextT.control.get_TabIndex()].Page);
                }
                $Event(window.event).stopPropagation();
                $Event(window.event).preventDefault();
                break;
            default:
                var keyCode = window.event.keyCode;
                var nextIndex = -1;
                if (keyCode > 48 && keyCode < 58) {
                    nextIndex = keyCode - 49;
                } else if (keyCode > 96 && keyCode < 106) {
                    nextIndex = keyCode - 97;
                }
                if (nextIndex != -1) {
                    nextIndex = this.getViewedIndex(nextIndex);
                    this.SetTabIndex(nextIndex);
                }
                break;
        }
    },
    getNextTabControl: function () {
        var divs = document.getElementsByTagName("DIV");
        var ts = [];
        for (var i = 0; i < divs.length; i++) {
            if (divs[i].className && divs[i].className.containsCssClass("TC tPn")) {
                ts[ts.length] = divs[i];
            }
        }
        divs = null;
        if (ts.length <= 1)
            return null;
        var isover = false;
        for (var i = 0; i < ts.length; i++) {
            if (isover == true)
                return ts[i];
            if (ts[i].id == this.get_id()) {
                isover = true;
            }
            if (i == ts.length - 1) { i = -1 };
        }
    },

    getViewedIndex: function (index) {
        var tmp = -1;
        for (var i = 0; i < this.tabGroup.TabCollection.length; i++) {
            if (!this.IsTabPageDisabled(i) && !this.IsTabPageHidden(i)) {
                tmp++;
                if (tmp == index)
                    return i;
                if (i == this.tabGroup.TabCollection.length - 1)
                    return i;
            }
        }
    },

    getNextIndex: function (curIndex, pagesCount, forward) {
        if (forward) {
            if (curIndex > 0) {
                var nIndex = parseInt(curIndex) - 1;
                if (!this.IsTabPageDisabled(nIndex) && !this.IsTabPageHidden(nIndex)) {
                    return nIndex;
                } else {
                    return this.getNextIndex(nIndex, pagesCount, forward);
                }
            } else {  // == 0
                for (var i = this.heads.children.length - 2; i > 0; i--) {
                    if (this.heads.children[i].className == "nav-item" && this.heads.children[i].style.display != 'none')
                        return i;
                }
            }
        }
        else {
            if (curIndex < pagesCount - 2) { //exclude switch control 
                var nIndex = parseInt(curIndex) + 1;
                if (!this.IsTabPageDisabled(nIndex) && !this.IsTabPageHidden(nIndex)) {
                    return nIndex;
                } else {
                    return this.getNextIndex(nIndex, pagesCount, forward);
                }
            }
        }
        return 0;
    },

    SetSelected: function (input) {
        this.get_element().cusAttr('SelectedIndex', input + "");
        this.SelectedIndex = input;
        this.SetHiddenInfo();
    },
    SetHiddenInfo: function () {
        $get(this.get_id() + "_Infor").value = this.Mode + "|" + this.SelectedIndex;
    },
    SetHiddenInfo: function (NavButtonType) {
        $get(this.get_id() + "_Infor").value = this.Mode + "|" + this.SelectedIndex + "|" + NavButtonType;
    },
    SetCustomerFilterHiddenInfo: function (action) {
        //为了不影响NavButtonType原来的服务端代码，这里多加了一个|
        $get(this.get_id() + "_Infor").value = this.Mode + "|" + this.SelectedIndex + "||" + action;
    },
    get_CallPostBack: function () {
        return this._element.cusAttr('CallPostBack');
    },

    IsTabPageDisabled: function (curIndex) {
        if (this.heads.children[curIndex]
            && this.heads.children[curIndex].className.indexOf("disabled") > -1
           )
            return true;
        else
            return false;
    },

    IsTabPageHidden: function (curIndex) {
        if (this.heads.children[curIndex] && this.heads.children[curIndex].style.display == "none")
            return true;
        else
            return false;
    },
    to_Help: function (index, func) {
        var ss = this.heads;
        var _this = this;
        // for (var i = 0; i < this.tabGroup.TabCollection.length; i++) {
        //     $(this.tabGroup.TabCollection[i].Head).after("<div class='controlBg1' forid='" + this.tabGroup.TabCollection[i].Head.id + "' z-index='" + index + "'></div>");
            
        //     // if (func)

        //     //     $("[forid='" + this.tabGroup.TabCollection[i].Head.id + "']").click(function (e) {
        //     //         var s = function (head) {
        //     //             func($(head).text());
        //     //             e.preventDefault();
        //     //             e.stopPropagation();         
        //     //         }(_this.tabGroup.TabCollection[i].Head);
        //     //     });
        // }
        $(this.heads).after("<div class='controlBg1' forid='" + this._element.id + "' z-index='" + index + "'></div>")

    },
    to_Translate: function (index, func) {
        var _this = this;
        var ss = $(this.heads).find(".nav-item");
        var prev_id = $(this.heads).parents(".webpart_div").attr("id");
        var s = function (_this) {
             $.each(ss, function (i, item) { //页签支持翻译
                var id = $(item).attr('id');
                $(item).append("<div class='translateBg' forid='" + id + "' z-index='" + index + "'></div>");
                if (func){
                    $("[forid='" + id + "']").click(function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        var firstIndex = prev_id.length+1;
                        var lastIndex = id.lastIndexOf("_");
                        var sub_id = id.substring(firstIndex,lastIndex);
                        func(id,sub_id);
                    });
                } 
            });
        }(this);
    },
    set_translateName:function(dom,currentName){
        dom.find(".nav-link").text(currentName);
    },
    to_Defualt: function () {
        if($(this.heads).next(".controlBg1").length > 0 ){
            $(this.heads).next(".controlBg1").remove();
        }
        if($(this.heads).find(".translateBg").length > 0 ){
            $(this.heads).find(".translateBg").unbind("click").remove();
        }
        for (var i = 0; i < this.tabGroup.TabCollection.length; i++) {
            $("[forid='" + this.tabGroup.TabCollection[i].Head.id + "']").unbind("click");
            $("[forid='" + this.tabGroup.TabCollection[i].Head.id + "']").remove();
        }
    }

}
UF.UI.TabControl.registerClass('UF.UI.TabControl', UF.UI.Control);

Tabs = function () {
    this.TabCollection = new Array();
}
Tabs.prototype.dispose = function () {
    for (var i = 0; i < this.TabCollection.length; i++) {
        this.TabCollection[i].dispose();
    }
    Array.clear(this.TabCollection);
    this.TabCollection = null;
}
Tabs.prototype.AddTab = function (inputHead, inputPage, elmIndex, tabControl) {
    this.TabCollection.push(new Tab(inputHead, inputPage, this, elmIndex, tabControl));
}

Tabs.prototype.TabsHidden = function (CallPostBack) {
    var tc = this.TabCollection;
    for (var i = 0, len = tc.length; i < len; i++) {
        tc[i].Hidden(CallPostBack);
    }
}
Tabs.prototype.TabsDisplay = function (CallPostBack) {
    var tc = this.TabCollection;
    for (var i = 0, len = tc.length; i < len; i++) {
        tc[i].Display(CallPostBack);
    }
}
Tabs.prototype.SetSelectedIndex = function (inputItem) {
    this.TabCollection[parseInt(inputItem)].Onclick();
}

Tab = function (inputHead, inputPage, parent, elmIndex, tabControl) {

    this.Head = inputHead;
    this.Page = inputPage;
    this.Parent = parent;
    this.Index = elmIndex;
    this._tabControl = tabControl;
    //    inputHead.onmouseover=Tab_OnMouseOver; 
    //    inputHead.onmouseout=Tab_OnMouseOut;
    inputHead.clickSender = this;
    inputHead.onclick = inputHeadOnClick;
    this.NavButton = new NavButton(inputHead, this);
}
Tab.prototype.dispose = function () {
    this.Head = null;
    this.Page = null;
    this.Parent = null;
    this._tabControl = null;
    this.NavButton = null;
}
Tab.prototype.Hidden = function (CallPostBack) {
    //this.Head.className = "nav-item";
    //女侠为跨浏览器而修改
    if ($(this.Head).attr("class").indexOf("disabled") == -1) {
        $(this.Head).attr("class", "nav-item");
    }
    //    var r = this.Head.children[0].rows[0];
    //    if (r.cells[1].className != "TabPageTitleDisable_Center") {
    //        r.cells[0].className = "TabPageTitle_Left";
    //        r.cells[1].className = "TabPageTitle_Center";
    //        r.cells[2].className = "TabPageTitle_Right";
    //    }
    //yxq add if Statement 2006/08/30
    if (this.Page && !CallPostBack) {
        this.Page.style.display = "none";
    }
}
Tab.prototype.Display = function (CallPostBack) {
    //女侠为跨浏览器而修改

    $(this.Head).attr("class", "nav-item selected");
//        var r = this.Head.children[0].rows[0];  
//        if(this.Head.ShowNavButton)
//        {
//          r.cells[0].className="TabPageActiveTitle_Left";
//          r.cells[1].className="TabPageActiveTitle_Center";
//          r.cells[2].className="TabPageActiveTitle_Center";
//          r.cells[3].className="TabPageActiveTitle_Center";
//          r.cells[4].className="TabPageActiveTitle_Right";
//        }
//        else
//        {
//          r.cells[0].className="TabPageActiveTitle_Left";
//          r.cells[1].className="TabPageActiveTitle_Center";
//          r.cells[2].className="TabPageActiveTitle_Right";
//        }

    //yxq add if Statement 2006/08/30
    if (this.Page && !CallPostBack) {
        this.Page.style.display = "block";
        $(window).resize(); //问题号201812260060
    }
}
Tab.prototype.GetIndex = function () {
    return this.Index;
}
Tab.prototype.Onclick = function () {
    //
    /*????
    if(this._tabControl.get_CallPostBack())
    { 
    var curE = pages.childNodes[SelectedIndex];
    if(curE)
    if(!curE.TopPanelNoEmptyVerify()){
    //return true;
    }
    }
    */
    //disabled
    if (_ClientCallBackManager && _ClientCallBackManager.Runing)   //如果在Callback期间，不处理
        return false;

    var r = this.Head;
    if ($(this.Head).attr("class").indexOf("disabled") > -1) {
        return false;
    }
    //Active
    if ($(this.Head).attr("class").indexOf("selected") > -1) {
        return false;
    }
    if (this._tabControl.get_CallPostBack()) {  //如果是Server提交方式，不直接修改页签头状态
    } else {
        this.Parent.TabsHidden(this._tabControl.get_CallPostBack());
        this.Display(this._tabControl.get_CallPostBack());
    }
    //设置当前选择的tab页签
    this._tabControl.SetSelected(this.Index);
    //zjx
    var args = new UF.UI.ChangeEventArgs();
    args.TabIndex = this.GetIndex();
    this._tabControl.raiseonTabClick(args);
    //this.Parent.SetTabIndex(this.GetIndex());
    if (this._tabControl.get_CallPostBack() != null) { //postback
        // add for postback之后重新获得焦点
        BaseTop.NextCurrentContainer = this.Page;    //设置当前焦点控件
        BaseTop.NextCurrentContainerDirection = false;    //设置当前焦点控件方向
        SetNextCurrentContainerValue();
        //add end
        eval(this._tabControl.get_CallPostBack());
        var PageId=$(this.Page).attr("id");
        $("body").attr("tabOnclickID",PageId);//TdSetHeightHelper.GetInstance().init()用 ,basicInfor.js
        _ClientJSExecQueueManager.Push('$("body").attr("tabOnclickID","")');//执行完eval,执行
    } else {//非postback
        var PageId=$(this.Page).attr("id");
        this._tabControl.SetFocus(this); 
        this.DomProcess(PageId); //非postback 未处理，需要处理
    }
   
    
}

Tab.prototype.DomProcess = function (PageId) {
     //高度
    TdSetHeightHelper.GetInstance($("#"+PageId).closest("td"),"yesTab").init();
    //冻结
    var layoutContainer=$("#"+PageId).find(".dataGridMainBody");
    if(layoutContainer.length >0){
         var table=layoutContainer.find("table");
         var thead=layoutContainer.find("thead");
         var fixedLength=thead.find(".FixedColumnTitleCell").length;
         var frozenScrollLeft=layoutContainer[0].scrollLeft;
         var frozenScrollTop=layoutContainer[0].scrollTop;
         GridFrozenColumnsHelper.GetInstance(layoutContainer,table,thead,fixedLength,frozenScrollLeft,frozenScrollTop).init();
    }
}
Tab.prototype.OnNavButtonClick = function (buttonType) {
    if (_ClientCallBackManager && _ClientCallBackManager.Runing)   //如果在Callback期间，不处理
        return false;
    this._tabControl.SetHiddenInfo(buttonType);
    if (this._tabControl.get_CallPostBack() != null) {
        eval(this._tabControl.get_CallPostBack());
    }
}

NavButton = function (head, tab) {
    if (head.className.indexOf("selected") > -1 && head.cusAttr("ShowNavButton")) {
        //var r = head.children[0].rows[0];
        this.PreButton = head.children[0];
        this.NextButton = head.children[2];
        //        this.PreButton.onmouseover = PreButton_OnMouseOver;
        //        this.PreButton.onmouseout = PreButton_OnMouseOut;
        this.Tab = tab;
        var _this = this;
        this.PreButton.clickSender = this;
        $(this.PreButton).on("click", function () {
            if (this.className.indexOf("disabled") < 0 && $(this).parent().attr("class").indexOf("disabled") < 0) {
                PreButton_OnClick.call(_this.NextButton);
            }
        });
        //        this.PreButton.onclick = PreButton_OnClick;
        //        this.NextButton.onmouseover = NextButton_OnMouseOver;
        //        this.NextButton.onmouseout = NextButton_OnMouseOut;
        this.NextButton.clickSender = this;
        $(this.NextButton).on("click", function () {
            if (this.className.indexOf("disabled") < 0 && $(this).parent().attr("class").indexOf("disabled") < 0) {
                NextButton_OnClick.call(_this.NextButton);
            }
        });
    }
}



//function TabMode(){}
//TabMode.Tree="Tree";
//TabMode.Tab="Tab";

function PreButton_OnClick() {
    this.clickSender.Tab.OnNavButtonClick(0);
}
function NextButton_OnClick() {
    this.clickSender.Tab.OnNavButtonClick(1);
}

function PreButton_OnMouseOver() {
    this.className = "TabPageNavButton_Previous_Hover";
}

function PreButton_OnMouseOut() {
    this.className = "TabPageNavButton_Previous_Normal";
}

function NextButton_OnMouseOver() {
    this.className = "TabPageNavButton_Next_Hover";
}

function NextButton_OnMouseOut() {
    this.className = "TabPageNavButton_Next_Normal";
}

//用于调整
function Tab_OnMouseOver() {
//    if (this.className != "tab hover selected") {
//        this.className = " TabHover";
//    }
}
function Tab_OnMouseOut() {
//    if (this.className != "tab hover selected") {
//        this.className = "tab";
//    }
}
function inputHeadOnClick() {
    
    this.clickSender.Onclick();
    //yxq add 2006/08/25
    /*
    if(element.CallPostBack!=null){
    eval(element.CallPostBack);
    }
    */
}

function SetNextCurrentContainerValue() {
    if (BaseTop.NextCurrentContainer && BaseTop.NextCurrentContainer.id) {
        var hc = window.document.getElementById("NextCurrentContainer");
        if (hc)
            hc.value = BaseTop.NextCurrentContainer.id + "|" + BaseTop.NextCurrentContainerDirection;
    }
}
;
var ParmaArr = [];

Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.GlobalInput = function (element) {

    UF.UI.GlobalInput.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    this._langCollection;
    this._textbox;
    this._button;
    this._hidden;
    this._dropDownDiv;
    this._curTable;
    this._maxLength;
    this._excludeTxtboxWidth = 56;

    // Handler
    this._textboxchangeHandler;
    this._textboxkeypressHandler;
    this._textboxpasteHandler;
    this._textboxfocusHandler;
    this._textboxblurHandler;
    this._textboxKeyupHandler;
    //    this._textboxpropertychangeHandler;

    this._buttonclickHandler;
    this._btnmouseoverHandler;
    this._btnmouseoutHandler;
    this._dropDownDivfocusoutHandler;
    this._dropDownDivkeydownHandler;

    this._divtextboxkeypressHandler;
    this._divtextboxpasteHandler;

    this._elementkeydownHandler;
    this._mouseElement;
}

UF.UI.GlobalInput.prototype = {

    initialize: function () {
        UF.UI.GlobalInput.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        this._textbox = this._element.children[0];
        for (var i = this._element.children.length - 1; i > 0; i--) {
            if (this._element.children[i].id == this._element.id + "_button") {
                this._button = this._element.children[i];
            }
        }
        //this._hidden = $get(this.get_id() + "_Hidden");
        //this._button = $get(this.get_id() + "_button");
        //this._button.style.cursor = "hand";   

        for (var i = this._element.children.length; i > 0; i--) {
            //if(this.get_element().children[i-1].id == this.get_element().getAttribute("HiddenName"))
            if (this._element.children[i - 1].id == this.get_id() + "_Hidden") {
                this._hidden = this._element.children[i - 1];
                break;
            }
        }

        if (this.btnClassName == null)
            this.btnClassName = GlobalInputTemplate.BtnClassName;
        if (this.btnClassName_Dis == null)
            this.btnClassName_Dis = GlobalInputTemplate.BtnClassName_Dis;

        //this._textbox.maxLength = this._textbox.cusAttr("MaxLength");

        //BUG FIX for IE 10:
        //  修正IE 10下GlobalInput和备注文本丢失的问题。
        //  原因：
        //  IE10下，输出的MaxLength和内置的maxLength属性冲突，无法正确的解析。经测试，可以按如下的方法获取：
        //  this._textbox.getAttributeNode("MaxLength").value
        //>>>>>>>>>>>>>>>>
        //this._textbox.maxLength = this._textbox.getAttribute("MaxLength");
        var maxLength = this._textbox.cusAttr("MaxLength");

        if (!maxLength) {
            var node = this._textbox.getAttributeNode("MaxLength");
            if (node && node.value) {
                maxLength = Number(node.value);
            }
        }
        this._maxLength = maxLength;
        //<<<<<<<<<<<<<<<


        //        this.btnmouseOverClass = "btn GlobalBtnMO"; //先写死，要用设置皮肤方式做????
        //        this.btnmouseOutClass = this._button.className;

        this._dropDownDiv = $get(this.get_id() + "_DropDown");

        this._element.removeChild(this._dropDownDiv);
        window.document.body.appendChild(this._dropDownDiv);
        this.initControl();

        // Create delegates Attach events
        //if (!this.get_element().disabled)
        {
            this._elementkeydownHandler = Function.createDelegate(this, this.OnKeyDown);
            $addHandler(this._element, "keydown", this._elementkeydownHandler);

            this._dropDownDivfocusoutHandler = Function.createDelegate(this, this.DivFocusOut);
            $addHandler(this._dropDownDiv, "focusout", this._dropDownDivfocusoutHandler);
            this._dropDownDivkeydownHandler = Function.createDelegate(this, this.OnDivKeyDown);
            $addHandler(this._dropDownDiv, "keydown", this._dropDownDivkeydownHandler);

            this._textboxchangeHandler = Function.createDelegate(this, this.InputChange);
            $addHandler(this._textbox, "change", this._textboxchangeHandler);
            this._textboxkeypressHandler = Function.createDelegate(this, this.CheckMarkChar);
            $addHandler(this._textbox, "keypress", this._textboxkeypressHandler);
            this._textboxpasteHandler = Function.createDelegate(this, this.CheckMarkChars);
            $addHandler(this._textbox, "paste", this._textboxpasteHandler);
            //            this._textboxpropertychangeHandler = Function.createDelegate(this, this.PropertyChange);
            //            $addHandler(this._textbox, "propertychange", this._textboxpropertychangeHandler);
            this._textboxfocusHandler = Function.createDelegate(this, this.selectValues);
            $addHandler(this._textbox, "focus", this._textboxfocusHandler);
            this._textboxblurHandler = Function.createDelegate(this, this.InputBlur);
            $addHandler(this._textbox, "blur", this._textboxblurHandler);
            this._textboxKeyupHandler = Function.createDelegate(this, this.OnKeyUp);
            $addHandler(this._textbox, "keyup", this._textboxKeyupHandler);

            this._buttonclickHandler = Function.createDelegate(this, this.displayDiv);
            $addHandler(this._button, "click", this._buttonclickHandler);
            //            this._btnmouseoverHandler = Function.createDelegate(this, this.BtnMouseOver);
            //            $addHandler(this._button, "mouseover", this._btnmouseoverHandler);
            //            this._btnmouseoutHandler = Function.createDelegate(this, this.BtnMouseOut);
            //            $addHandler(this._button, "mouseout", this._btnmouseoutHandler);

            if (this._element.cusAttr('Mask')) {
                this._textbox.cusAttr("maskChars", MaskChar.Default + this._element.cusAttr('Mask'));
            }
            else {
                this._textbox.cusAttr("maskChars", MaskChar.Default);
            }
            //解决页面未显现出来之前，快速键盘输入'(屏蔽字符)，仍可以降'输入到Textbox中的问题            
            if (isMasks(this._textbox.value, this._textbox.cusAttr('maskChars')))//重新检查this._textbox.value中是否含有屏蔽字符,如果有屏蔽字符,则置SourceValue（SourceValue是Value在服务器段的一个备份）
                this._textbox.value = this._textbox.cusAttr('SourceValue');
        }
        //this._langCollection = new ItemCollection();
        //if(this._curTable) window.setTimeout(this.InitialData,0);   
        //if(this._curTable) this.InitialData();   
        this.set_IsInitComlete(true);//gct20080917:设置初始化完成标志，用于脏数据保存提示
    },

    dispose: function () {
        // TODO: add your cleanup code here
        if (this._elementkeydownHandler) {
            $removeHandler(this._element, "keydown", this._elementkeydownHandler);
            this._elementkeydownHandler = null;
        }

        //        if (this._elementmouseHandler) {
        //            $removeHandler(this._element, "mousedown", this._elementmouseHandler);
        //            this._elementmouseHandler = null;
        //        }
        if (this._textboxchangeHandler) {
            $removeHandler(this._textbox, "change", this._textboxchangeHandler);
            this._textboxchangeHandler = null;
        }
        if (this._textboxkeypressHandler) {
            $removeHandler(this._textbox, "keypress", this._textboxkeypressHandler);
            this._textboxkeypressHandler = null;
        }
        //        if (this._textboxpropertychangeHandler) 
        //        {
        //            $removeHandler(this._textbox, "propertychange", this._textboxpropertychangeHandler);
        //            this._textboxpropertychangeHandler = null;
        //        }
        if (this._textboxpasteHandler) {
            $removeHandler(this._textbox, "paste", this._textboxpasteHandler);
            this._textboxpasteHandler = null;
        }
        if (this._textboxfocusHandler) {
            $removeHandler(this._textbox, "focus", this._textboxfocusHandler);
            this._textboxfocusHandler = null;
        }
        if (this._textboxblurHandler) {
            $removeHandler(this._textbox, "blur", this._textboxblurHandler);
            this._textboxblurHandler = null;
        }
        if (this._textboxKeyupHandler) {
            $removeHandler(this._textbox, "keyup", this._textboxKeyupHandler);
            this._textboxKeyupHandler = null;
        }

        if (this._buttonclickHandler) {
            $removeHandler(this._button, "click", this._buttonclickHandler);
            this._buttonclickHandler = null;
        }
        if (this._btnmouseoverHandler) {
            $removeHandler(this._button, "mouseover", this._btnmouseoverHandler);
            this._btnmouseoverHandler = null;
        }
        if (this._btnmouseoutHandler) {
            $removeHandler(this._button, "mouseout", this._btnmouseoutHandler);
            this._btnmouseoutHandler = null;
        }

        if (this._dropDownDivfocusoutHandler) {
            $removeHandler(this._dropDownDiv, "focusout", this._dropDownDivfocusoutHandler);
            this._dropDownDivfocusoutHandler = null;
        }
        if (this._dropDownDivkeydownHandler) {
            $removeHandler(this._dropDownDiv, "keydown", this._dropDownDivkeydownHandler);
            this._dropDownDivkeydownHandler = null;
        }
        for (var i = 0, len = this._langCollection.Items.length; i < len; i++) {
            if (this._divtextboxkeypressHandler) {
                $removeHandler(this._langCollection.Items[i].TextBox, "keypress", this._divtextboxkeypressHandler);
            }
            if (this._divtextboxpasteHandler) {
                $removeHandler(this._langCollection.Items[i].TextBox, "paste", this._divtextboxpasteHandler);
            }
        }
        if (this.curHandler != null)
            this.curHandler = null;//gct20091126：一定要释放，否则导致IE内存泄漏
        this._divtextboxkeypressHandler = null;
        this._divtextboxpasteHandler = null;

        if (this._langCollection) {
            this._langCollection.dispose();
            this._langCollection = null;
        }
        this._textbox = null;
        this._button = null;
        this._hidden = null;
        window.document.body.removeChild(this._dropDownDiv);
        this._dropDownDiv = null;
        this._curTable = null;

        UF.UI.GlobalInput.callBaseMethod(this, 'dispose');
    },

    //event    
    add_onchange: function (handler) {
        this.get_events().addHandler("onchange", handler);
    },
    remove_onchange: function (handler) {
        this.get_events().removeHandler("onchange", handler);
    },
    raiseonchange: function (args) {
        var eh = this.get_events().getHandler("onchange");
        if (eh) {
            eh(this, args);
        }
    },

    // TODO: (Step 2) Add your property accessors here

    add_OnValueChanged: function (handler) {
        this.get_events().addHandler("OnValueChanged", handler);
    },
    remove_OnValueChanged: function (handler) {
        this.get_events().removeHandler("OnValueChanged", handler);
    },
    raiseOnValueChanged: function (args) {
        if (this._element.getAttribute("OnValueChanged")) {
            eval(this._element.getAttribute("OnValueChanged"));
        }
        var eh = this.get_events().getHandler("OnValueChanged");
        if (eh) {
            eh(this, args);
        }

        //暂时放在OnValueChange的最后，提供一个个性化处理时机。onchange暂时没有这样的时机，也不需要，因为onchange触发，则OnValueChange一定会触发
        //this.AfterRaiseOnValueChanged4Personal();
    },

    fireValueChangeEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return;//个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._textbox.value;
        this.raiseOnValueChanged(args);
    },

    add_OnValueChanged4P: function (handler) {
        this.get_events().addHandler("OnValueChanged4P", handler);
    },
    remove_OnValueChanged4P: function (handler) {
        this.get_events().removeHandler("OnValueChanged4P", handler);
    },
    raiseOnValueChanged4P: function (args) {
        var eh = this.get_events().getHandler("OnValueChanged4P");
        if (eh) {
            this.curHandler = eh;//记录eh到sender中，以便在BasicInfor的CanEvalPersonalJS()中使用curHandler获取对eh的引用。this在运行时不是eh
            eh(this, args);
        }

        //暂时放在OnValueChange的最后，提供一个个性化处理时机。onchange暂时没有这样的时机，也不需要，因为onchange触发，则OnValueChange一定会触发
        this.AfterRaiseOnValueChanged4Personal();
    },
    fireValueChange4PEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return;//个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._textbox.value;
        this.raiseOnValueChanged4P(args);
    },

    initControl: function () {
        this._curTable = this._dropDownDiv.children[0];
        if (!this._element.cusAttr("disabled")) {
            if (this._element.cusAttr('Mask')) {
                this._textbox.cusAttr("maskChars", MaskChar.Default + this._element.cusAttr('Mask'));
            }
            else {
                this._textbox.cusAttr("maskChars", MaskChar.Default);
            }
        }
        this._langCollection = new ItemCollection();
        if (this._curTable) this.InitialData();
    },

    selectValues: function () {
        var _this = this;
        this.ControlFocus();
        try {
            this._textbox.select();
            // window.setTimeout(function(){_this._textbox.select();},0);  //解决chrome44版本及以下的焦点进入没法全新文本的问题 -- 20170425 -- weiyina
        } catch (e) { }
    },
    InputBlur: function () {
        this.ControlBlur();
        //天津优瑞纳斯200909070150： 录入完成后，直接点击任务栏的其他窗口后，微软不触发onchange只触发onblur事件，下次再回到原空口form的时候才走onchange
        //所以注释掉下面一句话
        //this._textbox.value = this._textbox.value;
    },

    //检查屏蔽字符集合
    CheckMarkChars: function () {
        var textBox = event.srcElement;
        var maskChars = textBox.cusAttr('maskChars');
        // var text = window.clipboardData.getData("text");
        var text;
        if(event){
            text = event.clipboardData.getData("text/plain");
        }else{
            text = window.clipboardData.getData("text");
        }
        if (isMasks(text, maskChars)) {
            $Event(event).preventDefault();
        }
    },

    //检查屏蔽字符
    CheckMarkChar: function () {
        var textBox = event.srcElement;
        var maskChars = textBox.cusAttr('maskChars');
        if (maskChars != "") {
            if (isMask(event.keyCode, maskChars)) {
                $Event(event).preventDefault();
            }
        }
    },

    keyPress: function () {
        if (isMask(event.keyCode, this._element.cusAttr('Mask'))) {
            $Event(window.event).preventDefault();
        }
    },

    //    PropertyChange: function()
    //    {
    //        if(event.propertyName=="value")
    //        {
    //            if(this._textbox.value.length>this._textbox.maxLength)            
    //            {   
    //                this._textbox.value=this._textbox.value.substr(0,this._textbox.maxLength);                
    //            }
    //        }        
    //    },

    CheckMaxLength: function () {
        if (this._textbox.value.length > this._maxLength) {
            this._textbox.value = this._textbox.value.substr(0, this._maxLength);
        }
    },

    // 控件的ReadOnly属性
    get_ReadOnly: function () {
        return this._element.cusAttr('readOnly');
    },
    set_ReadOnly: function (isReadOnly) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        if (!this.get_Enabled())//由于客户端区分ReadOnly和Enabled状态，所以在设置ReadOnly的时候，要优先考虑Enabled属性
            return;
        isReadOnly = ToBoolean(isReadOnly);
        $(this._textbox).attr("readOnly", isReadOnly);
        //var ele = this.get_element();
        if (isReadOnly) {
            this._textbox.className = this.tbClassName_R;
            this._button.className = this.btnClassName_Dis;
            this._element.className = UIControlClass.getReadOnlyCss(this._element);
        }
        else {
            this._textbox.className = this.tbClassName;
            this._button.className = this.btnClassName;
            this._element.className = UIControlClass.getNotReadOnlyCss(this._element);
        }
        this._element.cusAttr('ReadOnly', isReadOnly);
        this.set_HDValue("ReadOnly", isReadOnly.toString().toLowerCase());
        //gct20081203:提供一个设置只读后的个性化处理时机。
        this.AfterSetReadOnly4Personal();
    },

    get_Type: function () {
        return ControlType.GlobalInput;
    },

    set_Width: function (width) {
        this._element.style.width = width + "px"; //mahx20160706 为跨浏览器增加单位
        this._textbox.style.width = (width - 18)+"px";
    },

    SetFocus: function () {
        Basic.GridEditSetFocus(this._textbox);
    },

    set_Value: function (inputValue) {
        if (isMasks(inputValue, this._textbox.cusAttr('maskChars'))) {
            return;
        }
        var curItem = this._langCollection.GetSelectedItem();
        if (curItem != null) {
            curItem.TextBox.value = inputValue;
        }
        else {
            if (this._langCollection.Items.length > 0) {
                this._langCollection.Items[0].TextBox.value = inputValue;
            }
        }
        this._textbox.value = inputValue;
        this.CheckMaxLength();
        this.SetHiddenFieldValue();
        this.fireValueChangeEvent();
        if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
            this.set_IsValueChanged(true);//设置IsValueChanged标识，为脏数据保存提示所用
        this.fireValueChange4PEvent();
    },
    SetHiddenFieldValue: function () {
        this._hidden.value = encodeURIComponent(this._langCollection.GetDatas());//解决加号和在中文输入法下输入@符号的问题
    },

    get_Value: function () {
        return G_SplitLongString(G_Trim(this._textbox.value), this._maxLength);
    },

    AdjustPosition: function () {
        var curPos = this._textbox.getBoundingClientRect();
        var body = $E(this._element).document.body;
        var divStyle = this._dropDownDiv.style;
        divStyle.display = ""; //必须放在前面，使得this._dropDownDiv显示出来，否则this._dropDownDiv.getBoundingClientRect().right等得到的都是0

        var oRect = this._element.getBoundingClientRect();
        var intClientWidth = $E(this._element.parentElement).document.body.clientWidth; //整个当前Form的宽度
        var intClientHeight = $E(this._element.parentElement).document.body.clientHeight; //整个当前Form的高度

        var dropDownDivWidth = this._dropDownDiv.getBoundingClientRect().right - this._dropDownDiv.getBoundingClientRect().left;
        var dropDownDivHeight = this._dropDownDiv.getBoundingClientRect().bottom - this._dropDownDiv.getBoundingClientRect().top;

        var flagWidth = intClientWidth + document.body.scrollLeft - (oRect.left + dropDownDivWidth); //判断左对齐时，是否会出现横向滚动条
        //oRect.top+this.get_element().clientHeight一定等于oRect.bottom
        var flagHeight = intClientHeight + document.body.scrollTop - (oRect.bottom + dropDownDivHeight); //判断向下弹出时，是否会出现纵向滚动条

        if (flagWidth >= 0)//左对齐
        {
            divStyle.left = oRect.left - 2 + 'px';
            if (flagHeight >= 0)//下方弹出
            {
                divStyle.top = oRect.bottom + document.body.scrollTop + 'px';
            }
            else//上方弹出
            {
                var dtop = oRect.top + document.body.scrollTop - 2 - dropDownDivHeight;
                divStyle.top = dtop > 0 ? dtop + 'px' : 0;
            }

        }
        else// flagWidth<0  右对齐
        {
            var dleft = oRect.right - dropDownDivWidth;
            divStyle.left = dleft > 0 ? dleft + 'px' : 0;//为0的情况属于控件太小，必须出现横向滚动条，无法右对齐
            if (flagHeight >= 0)//正下弹出，肯定不会出想纵向滚动条的情况
            {
                divStyle.top = oRect.bottom + document.body.scrollTop + 'px';//===by zzq 增加单位;//oRect.bottom也等于oRect.top+this.get_element().clientHeight                
            }
            else//向上弹
            {
                var dtop = oRect.top - dropDownDivHeight;
                divStyle.top = dtop > 0 ? dtop + 'px' : 0;
            }
        }

        this._dropDownDiv.focus();//一定要放在最后，即放在弹出的DIV确定好显示坐标的后面，不然会影响前面代码中影响document.body.scrollTop的值，从而影响计算弹出位置
    },

    displayDiv: function () {
        if (this._langCollection.Items.length == 1)
            return;
        // 定位显示多选显示位置。
        //this._dropDownDiv.style.width = this.get_element().clientWidth+2;
        //this._dropDownDiv.style.width = this.get_element().clientWidth+2 > 142 ? this.get_element().clientWidth+2 : 142;

        // 跨浏览器兼容性，关于多语弹层的修正 -- weiyin 2016.05.27
        if (ParmaArr.length > 0) {  //每次进来先清空可能之前点击打开的多语框并清空缓存的ID
            document.getElementById(ParmaArr[0] + "_DropDown").style.display = "none";
            ParmaArr = [];
        }

        ParmaArr.push(this.get_id()); //缓存当前点击的按钮ID
        // weiyin添加 End
        this._dropDownDiv.style.width = 200 + 'px';
        this._dropDownDiv.style.zIndex = 999;   //之前99层级太低，没能遮挡下面的定位元素，所以增大 -- weiyin
        this.AdjustPosition();
        var curItem = this._langCollection.GetSelectedItem();
        if (this.get_ReadOnly()) {
            for (var i = 0, len = this._langCollection.Items.length; i < len; i++) {
                //this._langCollection.Items[i].Radio.disabled=true;
                this._langCollection.Items[i].TextBox.readOnly = true;
            }
        }
        else {
            for (var i = 0, len = this._langCollection.Items.length; i < len; i++) {
                //this._langCollection.Items[i].Radio.disabled=true;
                this._langCollection.Items[i].TextBox.readOnly = false;
            }
        }
        /*
    	for(var i=0,len=this._langCollection.Items.length;i<len;i++)
    	{
    	    //this._langCollection.Items[i].TextBox.parentElement.style.width=this.get_element().clientWidth-this._excludeTxtboxWidth;
    	    this._langCollection.Items[i].TextBox.style.width=this.get_element().clientWidth-this._excludeTxtboxWidth;
    	}
    	*/
        if (curItem != null) {
            curItem.TextBox.focus();
            curItem.TextBox.select();
        }
        else {
            if (this._langCollection.Items.length > 0) {
                this._langCollection.Items[0].TextBox.focus();
                this._langCollection.Items[0].TextBox.select();
            }
        }
    },
    eventHandler: function (obj) {    //2016.05.27 跨浏览器兼容问题Start -- weiyin
        $(document).click(function (e) {
            var $tar = $(e.target);
            //弹层ID
            var dropDownDivId = "#" + ParmaArr[0] + "_DropDown";

            //ab按钮ID
            var abId = "#" + ParmaArr[0] + "_button";

            if (!$tar.is("" + dropDownDivId + "," + dropDownDivId + " tr," + dropDownDivId + " td," + dropDownDivId + " input," + dropDownDivId + " textarea," + abId + "")) {
                // obj.HiddenDiv();
                if (ParmaArr[0]) {
                    document.getElementById(ParmaArr[0] + "_DropDown").style.display = "none";
                }
                ParmaArr.splice(0);  //清空数值中的ID
                $(document).unbind('click');
                var curItem = obj._langCollection.GetSelectedItem();
                if (curItem != null) {
                    obj._textbox.value = curItem.TextBox.value;
                }
                obj.SetHiddenFieldValue();
            }
            e.stopPropagation();  //阻止事件冒泡
        })   //2016.05.27 跨浏览器兼容问题End -- weiyin
    },
    DivFocusOut: function () {
        var aE = null;
        var _this = this;
        setTimeout(function () {
            if (!_this._dropDownDiv.contains(document.activeElement)) {
                _this.HiddenDiv();
                var curItem = _this._langCollection.GetSelectedItem();
                if (curItem != null) {
                    _this._textbox.value = curItem.TextBox.value;
                }
                _this.SetHiddenFieldValue();
            }
        }, 0);
    },

    HiddenDiv: function () {
        this._dropDownDiv.style.display = "none";
    },

    InitialData: function () {
        this._divtextboxkeypressHandler = Function.createDelegate(this, this.CheckMarkChar);
        this._divtextboxpasteHandler = Function.createDelegate(this, this.CheckMarkChars);
        for (var i = 0, len = this._curTable.rows.length; i < len; i++) {
            var curItem = new Item(this);
            var row = this._curTable.rows[i];
            //curItem.ID = row.cells[1].innerText;
            curItem.ID = row.cells[0].children[0].value; //curItem.ID应该是zh-CN或者en-US,从RadioButton的value而来
            curItem.TextBox = row.cells[2].children[0];
            //curItem.TextBox=row.cells[2].children[0].children[0];
            curItem.TextBox.setAttribute("Index", i);
            //curItem.TextBox.setAttribute("maxLength", this._textbox.maxLength);
            $addHandler(curItem.TextBox, "keypress", this._divtextboxkeypressHandler);
            $addHandler(curItem.TextBox, "paste", this._divtextboxpasteHandler);
            if (this._element.cusAttr('Mask')) {
                curItem.maskChars = MaskChar.Default + this._element.cusAttr('Mask');
            }
            else {
                curItem.maskChars = MaskChar.Default;
            }

            curItem.Radio = row.cells[0].children[0];
            //if (typeof(this.get_element().ChangeLang) != "undefined")
            {
                curItem.Radio.disabled = true;
            }
            this._langCollection.Items.push(curItem);
        }
        this.SetHiddenFieldValue();
    },
    //zjx
    changeFire: function () {
        if (this.get_IsRaiseEvent() == false)
            return;//个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._textbox.value;
        this.raiseonchange(args);
    },
    InputChange: function () {
        var old_textboxvalue;
        //mahx20160707 修改textBox的获取值的方式
        var __textBox = $(this._textbox);
        var curItem = this._langCollection.GetSelectedItem();
        if (curItem != null) {
            __textBox.val(this.RemoveMarkChars(__textBox.val(), this._textbox.cusAttr('maskChars')));
            this.CheckMaxLength();
            old_textboxvalue = curItem.TextBox.value; //先存下来老的值，以便下面比较是不是真的发生的值改变
            $(curItem.TextBox).val( __textBox.val()) ;
            this.SetHiddenFieldValue();
        }

        //由于InputChange在enter和tab键的事件中被强制调用，所以这里就需要判断多语控件是不是真的被改变了
        if (old_textboxvalue == __textBox.val()) {
            //认为值没有发生改变，直接返回
            return;
        }
        //zjx
        this.changeFire();
        if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
            this.set_IsChanged(true);//设置IsChanged标识，为脏数据保存提示所用
        this.fireValueChangeEvent();
        if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
            this.set_IsValueChanged(true);//设置IsValueChanged标识，为脏数据保存提示所用
        this.fireValueChange4PEvent();
    },

    OnKeyDown: function () {
        switch (window.event.keyCode) {
            case KeyCode.F2:
                this.displayDiv();
                $Event(event).preventDefault();
                $Event(event).stopPropagation();
                break;
            case KeyCode.down:
                if (window.event.ctrlKey) {
                    this.displayDiv();
                    $Event(event).preventDefault();
                    $Event(event).stopPropagation();
                }
                break;
            case KeyCode.tab:
                /*case KeyCode.enter:*/
                this.InputChange();
                break;
        }
    },
    OnKeyUp: function () {
    },

    OnDivKeyDown: function () {
        if ((event.srcElement.tagName == "INPUT" && event.srcElement.type == "text") || (event.srcElement.tagName == "TEXTAREA" && event.srcElement.type == "textarea")) {
            var curItem = event.srcElement;
            var curIndex = parseInt(curItem.Index);
            switch (window.event.keyCode) {
                case KeyCode.down:
                    if (!window.event.ctrlKey)
                        break;
                    if (curIndex == this._langCollection.Items.length - 1) {
                        curIndex = 0;
                    }
                    else {
                        curIndex++;
                    }
                    this._langCollection.Items[curIndex].TextBox.focus();
                    this._langCollection.Items[curIndex].TextBox.select();
                    $Event(event).preventDefault();
                    $Event(event).stopPropagation();
                    break;
                case KeyCode.up:
                    if (!window.event.ctrlKey) break;
                    if (curIndex == 0) {
                        curIndex = this._langCollection.Items.length - 1;
                    }
                    else {
                        curIndex--;
                    }
                    this._langCollection.Items[curIndex].TextBox.focus();
                    this._langCollection.Items[curIndex].TextBox.select();
                    $Event(event).preventDefault();
                    $Event(event).stopPropagation();
                    break;
            } //end switch 1
        } //end if   

        switch (window.event.keyCode) {
            case KeyCode.tab:
            case KeyCode.enter:
                {
                    this._textbox.focus();
                    $Event(window.event).stopPropagation();
                    $Event(window.event).preventDefault();
                    break;
                }
        } //end switch 2 
    },

    ClearData: function () {
        this._langCollection.ClearData();
        $(this._textbox).val("");
    },

    LoadXml: function (inputXml) {
        this._langCollection.LoadXml(inputXml);
        var curItem = this._langCollection.GetSelectedItem();
        if (curItem != null) {
            $(this._textbox).val(curItem.TextBox.value);
        }
    },

    //设置多语言数据
    SetMultiinputData: function (inputXml) {
        this.ClearData(); //初始化系统内容
        this._langCollection.LoadXml(inputXml);
        var curItem = this._langCollection.GetSelectedItem();
        if (curItem != null) {
            this._textbox.value = curItem.TextBox.value;
        }
    },

    //取得多语言数据  
    GetMultiinputData: function () {
        return this._langCollection.GetDatas();
    },

    BtnMouseOver: function (button) {
        this._button.className = this.btnmouseOverClass;
    },

    BtnMouseOut: function () {
        this._button.className = this.btnmouseOutClass;
    }
    /*
    //TO be resolve the question of the sroll's scrolling，overwrite 4 function of BaseControl.js
    MouseOver : function()
    {
        //this.get_element().className=this.mouseOverClass;
        //this.get_element().style.border="1px solid black";
        //this.get_element().style="border-top: 1px solid #7E7E7E;border-right: 1px solid #7E7E7E;border-bottom: 1px solid #A9A89C;border-left: 1px solid #7E7E7E;cursor:hand;padding: 0px 0px 0px 0px;height:20px;";
        this.get_element().style.borderTop="1px solid #7E7E7E";
        this.get_element().style.borderRight="1px solid #7E7E7E";
        this.get_element().style.borderBottom="1px solid #A9A89C";
        this.get_element().style.borderLeft="1px solid #7E7E7E";
        this.get_element().style.cursor="hand";
        this.get_element().style.padding="0px 0px 0px 0px";
        this.get_element().style.height="20px";
        //this.get_element().style="border-top: 1px solid #7E7E7E;border-right: 1px solid #7E7E7E;border-bottom: 1px solid #A9A89C;border-left: 1px solid #7E7E7E;cursor:hand;padding: 0px 0px 0px 0px;height:20px;";
    },
    MouseOut : function()
    {
        if(this.hf=='0') 
        {
        //this.get_element().className=this.mouseOutClass;
        
            this.get_element().style.borderTop="1px solid #A9A89C";
            this.get_element().style.borderRight="1px solid #D2D1CB";
            this.get_element().style.borderBottom="1px solid #D2D1CB";
            this.get_element().style.borderLeft="1px solid #A9A89C";
            this.get_element().style.cursor="hand";
            this.get_element().style.padding="0px 0px 0px 0px";
            this.get_element().style.height="20px";
        }
    },
    ControlFocus : function()
    {
        //this.get_element().className=this.mouseOverClass;
        this.get_element().style.borderTop="1px solid #7E7E7E";
        this.get_element().style.borderRight="1px solid #7E7E7E";
        this.get_element().style.borderBottom="1px solid #A9A89C";
        this.get_element().style.borderLeft="1px solid #7E7E7E";
        this.get_element().style.cursor="hand";
        this.get_element().style.padding="0px 0px 0px 0px";
        this.get_element().style.height="20px";
        this.hf='1';
    },
    ControlBlur : function()
    {
        //this.get_element().className=this.mouseOutClass;
        this.get_element().style.borderTop="1px solid #A9A89C";
        this.get_element().style.borderRight="1px solid #D2D1CB";
        this.get_element().style.borderBottom="1px solid #D2D1CB";
        this.get_element().style.borderLeft="1px solid #A9A89C";
        this.get_element().style.cursor="hand";
        this.get_element().style.padding="0px 0px 0px 0px";
        this.get_element().style.height="20px";
        this.hf='0';
    }
    */
}

UF.UI.GlobalInput.registerClass('UF.UI.GlobalInput', UF.UI.InputControl);

Item = function (owner) {
    this.ID;
    this.TextBox;
    this.Radio;
    this._owner = owner;
}
Item.prototype.dispose = function () {
    this.TextBox = null;
    this.Radio = null;
    this._owner = null;
}
Item.prototype.GetData = function (dataDom) {
    /*    var data = "<Item ";
        if (this.Radio.checked == true)
        {
            data += "Checked='True'";
        }
        data += " Text='" + this.TextBox.value;
        data += "' ID='" + this.ID + "'/>";
        return data;
        */

    var el = dataDom.createElement("Item");
    if (this.Radio.checked == true) {
        el.setAttribute("Checked", "True");
    }
    //el.setAttribute("Text", this.TextBox.value);
    el.setAttribute("Text", encodeURIComponent(this.TextBox.value));//对textbox中值编码，在服务器端再反编码处理
    el.setAttribute("ID", this.ID);
    el.setAttribute("Name", this._owner.get_id());

    return el;
}

ItemCollection = function () {
    this.Items = new Array();
    this.DataDom;
}

ItemCollection.prototype.dispose = function () {
    for (var i = 0, len = this.Items.length; i < len; i++) {
        this.Items[i].dispose();
    }
    Array.clear(this.Items);
    this.Items = null;
    this.DataDom = null;
}

ItemCollection.prototype.GetDatas = function () {
    /*    var datas = "<Items>"; 
        for (var i = 0, len = this.Items.length; i < len; i++)
        {
            datas += this.Items[i].GetData();
        }
        datas += "</Items>"; 
        return datas;
        */

    if (!this.DataDom) {
        this.DataDom = Basic.GetXmlDom();
    }

    var el = this.DataDom.createElement("Items");
    for (var i = 0, len = this.Items.length; i < len; i++) {
        el.appendChild(this.Items[i].GetData(this.DataDom));
    }

    this.DataDom.documentElement = el;
    //if (this.DataDom.xml) {
    //    return this.DataDom.xml;
    //}
    //else if (el.outerHTML) {
    //    return el.outerHTML;
    //} else {
    //    //===by zzq 兼容edge和safari
    //    return HtmlHelper._innerXML(el);
    //}
    //mahx20170410
    return XMLHelper.serializeXMLNodeToString(el);
}

ItemCollection.prototype.GetSelectedItem = function () {
    for (var i = 0, len = this.Items.length; i < len; i++) {
        if (this.Items[i].Radio.checked) {
            return this.Items[i];
        }
    }
    return null;
}

ItemCollection.prototype.ClearData = function () {
    for (var i = 0, len = this.Items.length; i < len; i++) {
        $(this.Items[i].TextBox).val("");
    }
}

ItemCollection.prototype.LoadXml = function (inputXml) {
    //mahx20160720 解决问题：datagrid里的多语控件，新建行内的多语信息总是上一次打开的多语值，原因在于，当新建控件时，传入的inputXml为空
    //所以this.DataDom是整个Document的dom，在这里查找this.DataDom.getElementsByTagName("Item")的时候，上个cell的一个属性的string值<item>也会被标记为控件，到下面循环的时候就把上个cell的结果赋给当前控件了（IE下没这问题）
    //导致每次多语都是上一行的多语信息，增加return如果是空xml的时候不解析。
    if (!inputXml || inputXml == '')
        return;
    //===by zzq 兼容方式加载XML
    this.DataDom = XMLHelper.createXMLDocument(inputXml);
    var itemList = this.DataDom.getElementsByTagName("Item");
    for (var i = 0; i < itemList.length; i++) {
        var item = itemList[i];
        var curID = item.getAttribute("ID");
        var curValue = item.getAttribute("Text");
        for (var j = 0; j < this.Items.length; j++) {
            if (this.Items[j].ID == curID) {
                //encode 和 decode 要对称!!
                $(this.Items[j].TextBox).val(decodeURIComponent(curValue));
                break;
            }
        }
    }
}

function GlobalInputTemplate() { }
GlobalInputTemplate.Enabled = InputControlTemplate.Enabled;
GlobalInputTemplate.ReadOnly = InputControlTemplate.ReadOnly;
GlobalInputTemplate.TBClassName = InputControlTemplate.TBClassName;
GlobalInputTemplate.TBClassName_R = InputControlTemplate.TBClassName_R;
GlobalInputTemplate.TBClassName_D = InputControlTemplate.TBClassName_D;
GlobalInputTemplate.BtnClassName = "btn GlobalBtn";
GlobalInputTemplate.BtnClassName_Dis = "btn GlobalBtn_Dis";;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.CheckBox = function(element) {

    UF.UI.CheckBox.initializeBase(this, [element]);
    this._checkbox;
    this._checked;
    this._ReadOnly = false;
    this._enabledEx = true;//真正的Disabled
    
    // Handler
    this._clickHandler;
    this._ckClickHandler;
    this.clickHandlerAtServer=null;
    this._chkboxfocusHandler=null;
    this._chkboxblurHandler=null;
}

UF.UI.CheckBox.prototype = {

    initialize: function () {
        // TODO: add your initalization code here
        UF.UI.CheckBox.callBaseMethod(this, 'initialize');
        this._checkbox = this._element.childNodes[0];
        if (this._element.cusAttr('ReadOnly') != null)
            this._ReadOnly = ToBoolean(this._element.cusAttr('ReadOnly'));
        else
            this._ReadOnly = ToBoolean(CheckBoxTemplate.ReadOnly);

        if (this._element.cusAttr("EnabledEx") != undefined)
            this._enabledEx = ToBoolean(this._element.cusAttr("EnabledEx"));
        else
            this._enabledEx = ToBoolean(CheckBoxTemplate.EnabledEx);

        this._checked = this.get_Checked();

        this.clickHandlerAtServer = this._checkbox.onclick; //客户端暂存引起postback的服务器端click事件。

        // Create delegates Attach events
        //this.RemoveMouseHandler();
        this._chkboxfocusHandler = Function.createDelegate(this, this.ControlFocus);
        $addHandler(this._checkbox, "focus", this._chkboxfocusHandler);
        this._chkboxblurHandler = Function.createDelegate(this, this.ControlBlur);
        $addHandler(this._checkbox, "blur", this._chkboxblurHandler);

        this.ResetReadOnly();
        this.ResetEnabledEx();
        this.set_IsInitComlete(true); //gct20080917:设置初始化完成标志，用于脏数据保存提示
    },

    dispose: function () {
        // TODO: add your cleanup code here     
        this.cleanupEvent();
        if (this.curHandler != null)
            this.curHandler = null; //gct20091126：一定要释放，否则导致IE内存泄漏
        this._checkbox = null;
        this.clickHandlerAtServer = null;
        this._enabledEx = null;

        UF.UI.CheckBox.callBaseMethod(this, 'dispose');
    },
    cleanupEvent: function () {
        if (this._ckClickHandler) {
            $removeHandler(this._checkbox, "click", this._ckClickHandler);
        }
        if (this._clickHandler) {
            $removeHandler(this._checkbox, "click", this._clickHandler);
        }
        if (this._chkboxfocusHandler) {
            $removeHandler(this._checkbox, "focus", this._chkboxfocusHandler);
        }
        if (this._chkboxblurHandler) {
            $removeHandler(this._checkbox, "blur", this._chkboxblurHandler);
        }
        this._chkboxblurHandler = null;
        this._chkboxfocusHandler = null;
        this._clickHandler = null;
        this._ckClickHandler = null;
    },
    cleanupServerEvent: function () {
        this._checkbox.onclick = null;
    },
    resumeServerEvent: function () {
        this._checkbox.onclick = this.clickHandlerAtServer; //客户端暂存postback的click事件还原。
    },
    /*****************************event***************************************/
    //onchange 对于CheckBox而言，onchange就相当于别的控件的OnValueChanged
    add_onchange: function (handler) {
        this.get_events().addHandler("onchange", handler);
    },
    remove_onchange: function (handler) {
        this.get_events().removeHandler("onchange", handler);
    },
    raiseonchange: function (args) {
        var eh = this.get_events().getHandler("onchange");
        if (eh) {
            eh(this, args);
        }

        //gct20081203:暂时放在OnChange的最后，提供一个个性化处理时机。对于CheckBox而言没有OnValueChange,而要调用baseControls中的OnValueChange
        //this.AfterRaiseOnChanged4Personal();
        //this.AfterRaiseOnValueChanged4Personal();
    },
    fireonchangedEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._checkbox.checked;
        this.raiseonchange(args);
    },

    add_OnValueChanged4P: function (handler) {
        this.get_events().addHandler("OnValueChanged4P", handler);
    },
    remove_OnValueChanged4P: function (handler) {
        this.get_events().removeHandler("OnValueChanged4P", handler);
    },
    raiseOnValueChanged4P: function (args) {
        var eh = this.get_events().getHandler("OnValueChanged4P");
        if (eh) {
            this.curHandler = eh; //记录eh到sender中，以便在BasicInfor的CanEvalPersonalJS()中使用curHandler获取对eh的引用。this在运行时不是eh
            eh(this, args);
        }

        //gct20081203:暂时放在OnChange的最后，提供一个个性化处理时机。对于CheckBox而言没有OnValueChange,而要调用baseControls中的OnValueChange
        //this.AfterRaiseOnChanged4Personal();
        this.AfterRaiseOnValueChanged4Personal();
    },
    fireValueChange4PEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._checkbox.checked;
        this.raiseOnValueChanged4P(args);
    },
    //onclick    
    add_onclick: function (handler) {
        this.get_events().addHandler("onclick", handler);
    },
    remove_onclick: function (handler) {
        this.get_events().removeHandler("onclick", handler);
    },
    raiseonclick: function (args) {
        var eh = this.get_events().getHandler("onclick");
        if (eh) {
            eh(this, args);
        }
    },

    get_Type: function () {
        return ControlType.CheckBox;
    },
    get_Value: function () {
        return this.get_Checked();
    },
    set_Value: function (checked) {
        this.set_Checked(checked);
    },
    get_Checked: function () {
        return this._checkbox.checked;
    },
    set_Checked: function (checked) {
        if (typeof (checked) == "string") {
            checked = checked.toString().toLowerCase();
            checked = ToBoolean(checked);
        }
        if (this._checked != checked) {
            this._checkbox.checked = checked;
            this.fireonchangedEvent();
            this.fireValueChange4PEvent();
            if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                this.set_IsChanged(true); //设置IsChanged标识，为脏数据保存提示所用
            this._checked = checked;
        }
    },
    set_Enabled: function (isEnabled) {
        isEnabled = ToBoolean(isEnabled);
        this.set_ReadOnly(!isEnabled);
        //        if(this.visibleAuthority!=null && this.visibleAuthority.toString().toLowerCase()=="false")//È¨ÏÞ²»¿É¼û
        //            return;
        //        if(this.enableAuthority!=null && this.enableAuthority.toString().toLowerCase()=="false")//È¨ÏÞ²»¿É±à¼­
        //            return;
        //        isEnabled=ToBoolean(isEnabled);
        //        this.get_element().disabled = !isEnabled;
        //        for (var i = 0, len = this.get_element().all.length; i < len; i++)
        //        {
        //            this.get_element().all[i].disabled = !isEnabled;
        //        }
        //        this._ReadOnly = !isEnabled;  
        //        this.ResetReadOnly();
    },
    get_EnabledEx: function () {
        return this._enabledEx;
    },
    set_EnabledEx: function (isEnabled) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//È¨ÏÞ²»¿É¼û
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//È¨ÏÞ²»¿É±à¼­
            return;

        isEnabled = ToBoolean(isEnabled);
        this._enabledEx = isEnabled;
        this.ResetEnabledEx();
    },
    ResetEnabledEx: function () {
        var disenabled = !this.get_EnabledEx();
        this._element.cusAttr("disabled", disenabled);
        //非标准属性在IE quick模式中可以直接取到属性，在标准浏览器中需要使用 this.get_element().getAttribute("all")
        // var all =this.get_element().getAttribute("all");
        var all = this._element.childNodes;
        if (all) {
            for (var i = 0, len = all.length; i < len; i++) {
                $(all[i]).attr("disabled", disenabled);
            }
        }
    },
    get_ReadOnly: function () {
        return this._ReadOnly;
    },
    set_ReadOnly: function (isReadOnly) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//È¨ÏÞ²»¿É¼û
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        isReadOnly = ToBoolean(isReadOnly);
        this._ReadOnly = isReadOnly;
        var css = UIControlClass.getReadOnlyCss(this._element);
        if (!isReadOnly) {
            css = UIControlClass.getNotReadOnlyCss(this._element);
        }
        this._element.className = css;
        this.ResetReadOnly();
        this.set_HDValue("ReadOnly", isReadOnly.toString().toLowerCase());
        //gct20081203:提供一个设置只读后的个性化处理时机。
        this.AfterSetReadOnly4Personal();
    },
    ResetReadOnly: function () {
        if (this._clickHandler) {
            $removeHandler(this._checkbox, "click", this._clickHandler);
            //mahx20160706 这里有问题，要删除handler，不仅要删除control上的事件，也要把控件的对应的属性也删除掉，不然下面判断有问题
            this._clickHandler = null;
        }
        if (this._ckClickHandler) {
            $removeHandler(this._checkbox, "click", this._ckClickHandler);
            //mahx20160706 这里有问题，要删除handler，不仅要删除control上的事件，也要把控件的对应的属性也删除掉，不然下面判断有问题
            this._ckClickHandler = null;
        }
        if (this._ReadOnly) {
            this._ckClickHandler = Function.createDelegate(this, this.ckClick);
            $addHandler(this._checkbox, "click", this._ckClickHandler);
            this.cleanupServerEvent();
        }
        else {
            this._clickHandler = Function.createDelegate(this, this.changePD);
            $addHandler(this._checkbox, "click", this._clickHandler);
            this.resumeServerEvent();
        }
    },

    ckClick: function () {
        //modify by kxl 取消冒泡和取消浏览器的默认行为，需要把下面的语句都写上 20160719
        var _event = $Event(event);
        _event.stopPropagation();

        _event.preventDefault(); //标准写法
        return false;
    },

    changePD: function () {
        this.fireonchangedEvent();
        if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
            this.set_IsChanged(true); //设置IsChanged标识，为脏数据保存提示所用
        this._checked = this._checkbox.checked;

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._checkbox.checked;
        this.raiseonclick(args);
        //this.fireValueChange4PEvent();//个性化事件触发应该在所有固有事件都被触发之后
        window.setTimeout("$find('" + this.get_element().id + "').fireValueChange4PEvent()", 0); //个性化事件触发应该在所有固有事件都被触发之后
    },
    ControlFocus: function () {
        //this._checkbox.className = this.mouseOverClass;
        this.hf = '1';
    },
    ControlBlur: function () {
        //this._checkbox.className = this.mouseOutClass;
        this.hf = '0';
    },
    MouseOver: function () {
        //this._checkbox.className = this.mouseOverClass;
    },
    MouseOut: function () {
        //if (this.hf == '0') this._checkbox.className = this.mouseOutClass;
    }
}

UF.UI.CheckBox.registerClass('UF.UI.CheckBox', UF.UI.InputControl);

function CheckBoxTemplate(){}
CheckBoxTemplate.Enabled            = InputControlTemplate.Enabled;
CheckBoxTemplate.ReadOnly           = InputControlTemplate.ReadOnly;
CheckBoxTemplate.EnabledEx          = "true";;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.DateTimePicker = function(element) {

    UF.UI.DateTimePicker.initializeBase(this, [element]);
    
    this.initDateTime = new Date();
    var _this=this;
    // TODO : (Step 1) Add your property variables here
    this._textbox;    
    this._button;
    this._popup;
    this._show = false;
    this.calID;
    this.isInit = true;

    this._date;
    this._formatString;
    this._cultureName;
   
    this.const_CalendarWidth=220;//从Script中Calendar.js中获取
    this.const_Calendarheight=170;
    // Handler    
    this._buttonclickHandler
    this._btnmouseoverHandler;
    this._btnmouseoutHandler;
    
    this._textboxchangeHandler;
    this._textboxfocusHandler;
    this._textboxblurHandler;
    
    this._elementkeyDownHandler;
    
    this._isAM;
    this._isPM;
    this._timeSeparator;
    
    this._isCustomDateTimeFormat="false";//是否自定义DateTime格式(即是否多交期)
    this._customDateTimeFormat="...";//自定义DateTime格式
    this.serverDateTime;
    this._isShowedInvalidMessage=null;//【是否已经显示】赋值不合法的信息提示
    this._hiddenValue=null;  //隐藏的真正值

    this.onSelect = function(cal) 
    {
        var oldDate=_this._date;
        var update = cal.dateClicked;
        if (update) 
        {   
            if(_this.get_FormatString()=="F"||_this.get_FormatString()=="G"||_this.get_FormatString()=="g")
            {
                var nowDateTime=new Date();
                //_this._date=new Date(cal._calendarDate.year, cal._calendarDate.month, cal._calendarDate.day);        
                //解决Grid中的日期时间控件焦点离开后，时间清空的问题，此时inputDateTime已经是带时间了
                //_this._date=new Date(cal._calendarDate.year, cal._calendarDate.month, cal._calendarDate.day, nowDateTime.getHours(), nowDateTime.getMinutes(), nowDateTime.getSeconds());  	            

                //V2.1增加设置时间部分by wangxiaoliang
                //--begin--
                //这句是新注释的，原来的做法是默认取当前时间
                //var inputDateTime = new Date(cal._calendarDate.year, cal._calendarDate.month, cal._calendarDate.day, nowDateTime.getHours(), nowDateTime.getMinutes(), nowDateTime.getSeconds());
                //现在修改成从日期控件传递回来
                //var inputDateTime = new Date(cal._calendarDate.year, cal._calendarDate.month, cal._calendarDate.day, cal._calendarDate.hour, cal._calendarDate.minute, cal._calendarDate.second);  	            

                //                //if(_this.validInputDate(_this._date))
                //                if(_this.validInputDate(inputDateTime))
                //                    //_this._textbox.value=Date$toFormattedStringEx_currentTime(_this.get_ValueIns(), _this.get_FormatString(),_this.get_CultureName().toLowerCase());  	            
                //                    _this.set_Value(inputDateTime);

                //最终的处理方式：在弹出框里不校验时间，统一返回到主控件上校验
                //这种方式录入时间跟在主控件上直接编辑文本应该没有区别，所有走的逻辑应该一样。
                var tmpDate = new Date(cal._calendarDate.year, cal._calendarDate.month, cal._calendarDate.day);
                var tmpDateFix = Date$toFormattedStringEx(tmpDate,"d", _this.get_CultureName().toLowerCase());//如果不这么折腾一下，月份总是少一个月？！
                _this._textbox.value = tmpDateFix +" "+ cal._calendarDate.time;
                _this.inputChange();                
                //--end-- 
            }
            else
            {
                var inputDate=new Date(cal._calendarDate.year, cal._calendarDate.month, cal._calendarDate.day);
                if(_this.validInputDate(inputDate)) 
                _this.set_Value(inputDate);  	        

                if((oldDate==null && _this._date!=null)||(oldDate!=null && _this._date==null))
                {                
                    _this.fireChangeEvent();        
                    if(_this.get_IsInitComlete()==true && Get_Global_IsPageLoadComplete()==true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                        _this.set_IsChanged(true);
                }
                else if(oldDate&&_this._date&&(oldDate.toString()!=_this._date.toString()))
                {            
                    _this.fireChangeEvent();
                    if(_this.get_IsInitComlete()==true && Get_Global_IsPageLoadComplete()==true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                        _this.set_IsChanged(true);
                }
            }
            cal.callCloseHandler();  	    
            //if(oldDate!=this._date)//不能直接比较"=="，通过日历选择相同的日期，直接用"=="比较也会认为oldDate!=this._date为true  	            
            if(!_this._button)return ;
            _this._button.className="btn DateBtn";  
        }
        Basic.SetFocus(_this._textbox);  
    }
    this.onClose = function(cal)
    {
        cal.hide();    
        _this._popup=null;
        Basic.SetFocus(_this._textbox);
    }
}

UF.UI.DateTimePicker.prototype = {

    initialize: function () {
        UF.UI.DateTimePicker.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        var strDate = this._element.cusAttr('Value');
        if (strDate && parseInt(strDate.split("-")[0], 10) >= 100)//js中小于0100-1-1 0:00:00处理成1901
        {
            re = /-/g;
            intDate = strDate.replace(re, "/");
            this._date = new Date(intDate);
        }
        this._textbox = this._element.children[0];
        for (var i = this._element.children.length - 1; i > 0; i--) {
            if (this._element.children[i].id == this._element.id + "_button") {
                this._button = this._element.children[i];
            }
        }

        for (var i = this._element.children.length - 1; i > 0; i--) {
            if (this._element.children[i].id == this._element.id + "_HTV") {
                this._hiddenValue = this.get_element().children[i];
            }
        }

        if (this.btnClassName == null)
            this.btnClassName = DateTimePickerTemplate.BtnClassName;
        if (this.btnClassName_Dis == null)
            this.btnClassName_Dis = DateTimePickerTemplate.BtnClassName_Dis;

        //        this.btnmouseOverClass = "btn DateBtnMO"; //先写死，要用设置皮肤方式做
        //        this.btnmouseOutClass = this._button.className;
        this.isInit = false;
        this.calID = this.get_id();
        this._formatString = this._element.cusAttr("FormatString");

        this._isCustomDateTimeFormat = this._element.cusAttr("IsCustomDateTimeFormat");
        this._customDateTimeFormat = this._element.cusAttr("CustomDateTimeFormat");
        if (this._isCustomDateTimeFormat && this._isCustomDateTimeFormat.toLowerCase() == "true") {
            this._textbox.value = this._customDateTimeFormat;
            this._date = null;
        }

        var newDate = new Date();
        newDate = Date$parseEx(newDate, newDate.toString(), this.get_FormatString(), this.get_CultureName().toLowerCase());
        //尽量放在服务器端做
        if (this._ShowControlBindingInfoTitle) {  //此属性在 BaseControls.js
            this._textbox.title = newDate.getDateTimePattern(this.get_FormatString(), this.get_CultureName().toLowerCase());
        }

        if (this.get_FormatString() == "T") this._button.style.visibility = "hidden";

        this._timeSeparator = this.get_TimeSeparator(this.get_CultureName().toLowerCase()); //gct20071122:当前时间分隔符。

        this._elementkeyDownHandler = Function.createDelegate(this, this.onkeyDown);
        $addHandler(this._element, "keydown", this._elementkeyDownHandler);

        this._buttonclickHandler = Function.createDelegate(this, this.button_click);
        $addHandler(this._button, "click", this._buttonclickHandler);
        //        this._btnmouseoverHandler = Function.createDelegate(this, this.BtnMouseOver);
        //        $addHandler(this._button, "mouseover", this._btnmouseoverHandler);
        //        this._btnmouseoutHandler = Function.createDelegate(this, this.BtnMouseOut);
        //        $addHandler(this._button, "mouseout", this._btnmouseoutHandler);

        this._textboxchangeHandler = Function.createDelegate(this, this.inputChange);
        $addHandler(this._textbox, "change", this._textboxchangeHandler);
        this._textboxfocusHandler = Function.createDelegate(this, this.TextBoxFocus);
        $addHandler(this._textbox, "focus", this._textboxfocusHandler);
        this._textboxblurHandler = Function.createDelegate(this, this.TextBoxBlur);
        $addHandler(this._textbox, "blur", this._textboxblurHandler);

        if (this._element.cusAttr('ReadOnly')) {
            isReadOnly = true;
        }
        else//优化后的逻辑
        {
            isReadOnly = ToBoolean(DateTimePickerTemplate.ReadOnly);
        }
        if (isReadOnly) {
            this._element.children[0].readOnly = isReadOnly; //input置readOnly，不能根据isReadOnly置input的disabled，因为set_ReadOnly()只置readOnly
            for (var i = 1, len = this._element.children.length; i < len; i++) {
                this._element.children[i].disabled = isReadOnly;
            }
        }

        var isDisplay = this._element.cusAttr("R").toLowerCase() == "y" ? true : false;
        this.DisplayRequiredFlag(isDisplay);
        this.set_IsInitComlete(true); //gct20080917:设置初始化完成标志，用于脏数据保存提示
        this._hiddenValue.disabled = false;
    },

    ConvertToDate: function (str) {
        var value = null;
        var format = this.get_FormatString();
        var culture = this.get_CultureName().toLowerCase();
        value = Date$parseEx(new Date(), str, format, culture);
        return value;
    },
    ConvertToString: function (date) {
        var str = "";
        var format = this.get_FormatString();
        var culture = this.get_CultureName().toLowerCase();
        str = Date$toFormattedStringEx(date, format, culture);
        return str;
    },

    dispose: function () {
        // TODO: add your cleanup code here        
        if (this._elementkeyDownHandler) {
            $removeHandler(this.get_element(), "keydown", this._elementkeyDownHandler);
            this._elementkeyDownHandler = null;
        }

        if (this._buttonclickHandler) {
            $removeHandler(this._button, "click", this._buttonclickHandler);
            this._buttonclickHandler = null;
        }
        if (this._btnmouseoverHandler) {
            $removeHandler(this._button, "mouseover", this._btnmouseoverHandler);
            this._btnmouseoverHandler = null;
        }
        if (this._btnmouseoutHandler) {
            $removeHandler(this._button, "mouseout", this._btnmouseoutHandler);
            this._btnmouseoutHandler = null;
        }

        if (this._textboxchangeHandler) {
            $removeHandler(this._textbox, "change", this._textboxchangeHandler);
            this._textboxchangeHandler = null;
        }
        if (this._textboxfocusHandler) {
            $removeHandler(this._textbox, "focus", this._textboxfocusHandler);
            this._textboxfocusHandler = null;
        }
        if (this._textboxblurHandler) {
            $removeHandler(this._textbox, "blur", this._textboxblurHandler);
            this._textboxblurHandler = null;
        }
        if (this.curHandler != null)
            this.curHandler = null; //gct20091126：一定要释放，否则导致IE内存泄漏
        this._textbox = null;
        this._button = null;
        this._popup = null;
        this._date = null;
        this._isAM = null;
        this._isPM = null;
        this._timeSeparator = null;
        this._isCustomDateTimeFormat = null;
        this._customDateTimeFormat = null;
        this.initDateTime = null;
        this.serverDateTime = null;

        UF.UI.DateTimePicker.callBaseMethod(this, 'dispose');
    },

    //event    
    add_onchange: function (handler) {
        this.get_events().addHandler("onchange", handler);
    },
    remove_onchange: function (handler) {
        this.get_events().removeHandler("onchange", handler);
    },
    raiseonchange: function (args) {
        if (this._element.getAttribute("onchange")) {
            eval(this._element.getAttribute("onchange"));
        }
        var eh = this.get_events().getHandler("onchange");
        if (eh) {
            eh(this, args);
        }


    },
    fireChangeEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._textbox.value;
        this.raiseonchange(args);
        //手动修改时也要引发ValueChanged事件
        this.fireValueChangeEvent();
        this.fireValueChange4PEvent();
    },

    add_OnValueChanged: function (handler) {
        this.get_events().addHandler("OnValueChanged", handler);
    },
    remove_OnValueChanged: function (handler) {
        this.get_events().removeHandler("OnValueChanged", handler);
    },
    raiseOnValueChanged: function (args) {
        var eh = this.get_events().getHandler("OnValueChanged");
        if (eh) {
            eh(this, args);
        }

        //开放ValueChanged，对应的bug15SP300281747    CallBack代码中有set_Value()源控件的，需要同步更新值到Grid列上，所以ValueChanged做同步。    
        //暂时放在OnValueChange的最后，提供一个个性化处理时机。对于DateTimePicker而言没有OnValueChange,而要调用baseControls中的OnValueChange
        this.AfterRaiseOnValueChanged4Personal();
    },
    fireValueChangeEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._textbox.value;
        this.raiseOnValueChanged(args);
    },
    add_OnValueChanged4P: function (handler) {
        this.get_events().addHandler("OnValueChanged4P", handler);
    },
    remove_OnValueChanged4P: function (handler) {
        this.get_events().removeHandler("OnValueChanged4P", handler);
    },
    raiseOnValueChanged4P: function (args) {
        var eh = this.get_events().getHandler("OnValueChanged4P");
        if (eh) {
            this.curHandler = eh; //记录eh到sender中，以便在BasicInfor的CanEvalPersonalJS()中使用curHandler获取对eh的引用。this在运行时不是eh
            eh(this, args);
        }

        //开放ValueChanged，对应的bug15SP300281747    CallBack代码中有set_Value()源控件的，需要同步更新值到Grid列上，所以ValueChanged做同步。    
        //暂时放在OnValueChange的最后，提供一个个性化处理时机。对于DateTimePicker而言没有OnValueChange,而要调用baseControls中的OnValueChange
        this.AfterRaiseOnValueChanged4Personal();
    },
    fireValueChange4PEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._textbox.value;
        this.raiseOnValueChanged4P(args);
    },
    // TODO: (Step 2) Add your property accessors here   
    get_ReadOnly: function () {
        return this._element.cusAttr("ReadOnly");
    },

    set_ReadOnly: function (isReadOnly) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        if (!this.get_Enabled())//由于客户端区分ReadOnly和Enabled状态，所以在设置ReadOnly的时候，要优先考虑Enabled属性
            return;
        isReadOnly = ToBoolean(isReadOnly);
        if (this._textbox) $(this._textbox).attr("readOnly", isReadOnly);
        if (this._button) $(this._button).attr("readOnly", isReadOnly);

        if (isReadOnly) {
            this._textbox.className = this.tbClassName_R;
            this._button.className = this.btnClassName_Dis;
            this._button.disabled=true;
            this._element.className = UIControlClass.UFTextBox.ReadOnlyCssClass;
        }
        else {
            this._textbox.className = this.tbClassName;
            this._button.className = this.btnClassName;
            this._button.disabled=false;
            this._element.className = UIControlClass.UFTextBox.CssClass;
        }
        this._element.cusAttr("ReadOnly", isReadOnly);
        this.btnmouseOutClass = this._button.className; //gct20091210：状态改变后，需要重新设置btnmouseOutClass，否者参见bugV2SP100334944
        this.set_HDValue("ReadOnly", isReadOnly.toString().toLowerCase());
        //gct20081203:增加一个设置只读后的个性化处理时机。无论有没有个性化都会调用此函数
        this.AfterSetReadOnly4Personal();
    },

    get_Type: function () {
        return ControlType.DateTime;
    },

    set_Width: function (width) {
        this._element.style.width = width + "px"; //mahx
        this._textbox.style.width = (width - 18)+"px";
    },

    SetFocus: function () {
        Basic.GridEditSetFocus(this._textbox);
    },

    get_Value: function () {
        if (this.get_IsCustomDateTimeFormat() == "true")//多交期是value是null
            return null;
        return this.getDateYmdHms();
    },

    set_Value: function (val) {
        if (this.get_IsCustomDateTimeFormat() == "true")//多交期时,不允许设置value
            return;
        if (val == this._date) {
            return;
        }
        var oldDate = this._date;
        if (typeof (val) == "string") {
            if (val == "" || isNaN(new Date(this.fromymd2mdy(val))))//加isNaN(new Date(this.fromymd2mdy(val)))是为了解决因为UBF设计期给日期控件置空，必须输入一个空格，产生的代码为codeBlock.TargetControls.addControl(this.DefinedTime,"Value"," ");
            {
                this._date = null;
                this._hiddenValue.value = "";
            }
            else {
                val = this.fromymd2mdy(val);
                this._date = new Date(val);
                this.set_HiddenValue();
                if (this._date.getFullYear() == 1753 && this._date.getMonth() == 0 && this._date.getDate() == 1)//如果为1753-1-1，则加1天
                {
                    this._date.setDate(this._date.getDate() + 1);
                    this.set_HiddenValue();
                }
            }
        }
        else {
            if (val != null && (this.get_FormatString() == "D" || this.get_FormatString() == "d"))//日期时间型，时间部分置零
                val.setHours(0, 0, 0);
            this._date = val;
            if (this._date) {
                if (this._date.getFullYear() == 1753 && this._date.getMonth() == 0 && this._date.getDate() == 1)//如果为1753-1-1，则加1天
                {
                    this._date.setDate(this._date.getDate() + 1);
                }
                this.set_HiddenValue();
            }
            else {
                this._hiddenValue.value = "";
            }
        }
        if (this.isInit) {
            this._textbox.value = this.get_Text();
            return;
        }
        this._textbox.value = this.get_Text();
        if (this._isShowedInvalidMessage) {
            RemoveErrorMsgElment(this.get_id(), this.get_element());
            this._isShowedInvalidMessage = false;
        }
        this.fireValueChangeEvent();
        this.fireValueChange4PEvent();
    },

    set_HiddenValue: function () {
        //如果含有时间部分则不更新
        var strTime = "";
        if (this.get_FormatString() == "D" || this.get_FormatString() == "d") {
            if (this._hiddenValue.value != "") {
                var oldDatetime = new Date(this.fromymd2mdy(this._hiddenValue.value));
                strTime = " " + oldDatetime.getHours() + ":" + oldDatetime.getMinutes() + ":" + oldDatetime.getSeconds();
            }
        }
        else {
            strTime = String.format(" {0}:{1}:{2}", this.get_ValueIns().getHours(), this.get_ValueIns().getMinutes(), this.get_ValueIns().getSeconds());
        }
        this._hiddenValue.value = this.get_ValueIns().getFullYear() + "-" + (this.get_ValueIns().getMonth() + 1) + "-" + this.get_ValueIns().getDate() + strTime;
    },

    get_Text: function () {
        if (this.get_IsCustomDateTimeFormat() == "true")//多交期时返回Text
            return this.get_CustomDateTimeFormat();
        if (this.get_ValueIns()) {
            return Date$toFormattedStringEx(this.get_ValueIns(), this.get_FormatString(), this.get_CultureName().toLowerCase());
        }
        return "";
    },

    set_Text: function (val) {
        if (this.get_IsCustomDateTimeFormat() == "true")//多交期时,不允许设置Text
            return;
        this._textbox.value = val;
    },

    get_FormatString: function () {
        return this._formatString;
    },

    set_FormatString: function (val) {
        this._formatString = val;
    },

    get_CultureName: function () {
        /*
        if (this._cultureName == null)
        {
        this._cultureName="zh-CN";
        //this._cultureName=this.get_element().document.getElementById("CultureName").value;
        }
        return this._cultureName;
        */
        return getCultureName();
    },

    set_CultureName: function (val) {
        this._cultureName = val;
    },

    get_TimeSeparator: function (lang) {
        var dtf;
        var ts;
        try {
            lang = lang.toLowerCase();
            dtf = Sys.CultureInfo[lang].DateTimeFormat;
            ts = dtf.TimeSeparator;
        }
        catch (e)
        { }
        return ts;
    },

    showIllegalInputWarningMsg: function () {
        if (this._isShowedInvalidMessage) {
            RemoveErrorMsgElment(this.get_id(), this._element);
            this._isShowedInvalidMessage = false;
        }
        var now = new Date();
        var time = now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds();
        var warningMsg = Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_DateTimeIllegal;
        warningMsg = warningMsg.replace(/\$time\$/g, time);
        var lblNodeId = this.get_element().getAttribute("LC");
        if (lblNodeId == null || lblNodeId == "" || $get(lblNodeId) == null) {
            if (this._element.parentNode.className.split(" ")[0] == "tbc") {
                var gridEle = GetParentGrid(this.get_id());
                var titleText = "";
                if (gridEle) {
                    var grid = gridEle.control;
                    titleText = grid.getColumnHeadCell(grid.m_currentColumnIndex, grid.MainCols[grid.m_currentColumnIndex].FieldID).outerText;
                }
                warningMsg = warningMsg.replace(/\$title\$/g, titleText);
            } else { warningMsg = warningMsg.replace(/\$title\$/g, ""); }
        }
        else { warningMsg = warningMsg.replace(/\$title\$/g, $get(lblNodeId).title); }
        warningMsg = warningMsg.replace(/\$value\$/g, "'" + this._textbox.value + "'");
        this.ShowWarnMsg(warningMsg);
        this._isShowedInvalidMessage = true;
    },
    ShowWarnMsg: function (msg) {
        if (this._element.parentNode.className.split(" ")[0] == "tbc") {
            showStatus(msg); //mahx20160705 修改状态栏提示
        } else { CreateWarnMsg(msg, this._element); }
    },  //end ShowWarnMsg

    reviseInputText: function (text) {
        var format = this.get_FormatString();
        if (!(format == "d" || format == "D" || format == "F" || format == "G" || format == "s" || format == "g"))
            return text;
        if (text.length > 2)
            return text;
        var curDate = new Date();
        var year = curDate.getFullYear();
        var month = curDate.getMonth() + 1;
        return String.format("{0} {1} {2}", year, month, text);
    },
    inputChange: function () {
        var oldDate = this._date;
        //mahx20160707 修改textBox的获取值的方式
        var __textBox = $(this._textbox);
        if (__textBox.val() == "") {
            this.set_Value(null);
            if (oldDate != this._date) {
                this.fireChangeEvent();
                if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                {
                    this.set_IsChanged(true);
                }
            }
            return;
        }
        var curDate = this.get_ValueIns();
        if (!this.get_ValueIns()) curDate = new Date();
        var dateValue = this.wideChars2NarrowChars(__textBox.val()); //这里会过滤掉非数字，比如字母
        if (this.get_FormatString() === "G" &&
            typeof (dateValue) === "string" &&
            (dateValue.length === 8 || dateValue.length === 7 || dateValue.length === 6) &&
            dateValue.indexOf(" ") === -1
        ) {//修正 用户 输入 20121212 数据时, 秒数自动带 0的问题.

            var tempY = dateValue.substring(0, 4);
            var tempM = dateValue.substring(4, 6);
            var tempD ='';
            if(tempM>12){
                tempM = dateValue.substring(4, 5);
                tempD = dateValue.substring(5, 8);
            }else{
                tempD = dateValue.substring(6, 8);
            }
            dateValue = String.format("{0} {1} {2}", tempY, tempM, tempD);
        }

        dateValue = this.reviseInputText(dateValue);
        dateValue = this.validateInputDate(dateValue, this.get_FormatString());

        //wanglei: 对日期控件 格式 为 T 时,省略秒的录入 ,秒数补零.
        if (this.get_FormatString() === "T") {
            dateValue = dateValue.replace(":", " ");
            if (dateValue.split(" ").length === 2 ||
	        dateValue.split(" ").length === 3 &&
	        dateValue.split(" ")[2] === "") {
                dateValue += " 0";
            }
        }

        if (dateValue == "") {
            this.showIllegalInputWarningMsg();
            __textBox.val(this.get_Text());
            var changeEv = this._textbox.getAttribute("onchange");
            if (changeEv && changeEv.toString().indexOf("__doPostBack") >= 0) {
                window._NotFirePostBackControl = __textBox.attr("id").replace(/_/g, "$");
            }
        }
        else {
            if (this._isShowedInvalidMessage) {
                RemoveErrorMsgElment(this.get_id(), this.get_element());
                this._isShowedInvalidMessage = false;
            }
            //getFullDateTime
            if (this.get_FormatString() == "F" || this.get_FormatString() == "G" || this.get_FormatString() == "g")//日期时间型
            {
                var changedValues = dateValue.split(" ");
                var changedDate = changedValues[0];
                var changedTime = changedValues[1];
                //var curTimes=changedTime.split(":");//此时changedTime含有代码写死的:，所以现在将:改为当前时间分隔符
                var curTimes = changedTime.split(this._timeSeparator); //gct20071122
                var changedHours = parseInt(curTimes[0], 10);
                var changedMinutes = parseInt(curTimes[1], 10);

                var changedSeconds = 0;
                if (this.get_FormatString() !== "g") {
                    changedSeconds = parseInt(curTimes[2], 10);
                }

                //Date$parseEx只解析日期(并且日期分隔符还是代码写死的-)，时间部分取当前时间，真正的时间在下面再赋上
                var newDate = Date$parseEx(curDate, changedDate, this.get_FormatString(), this.get_CultureName().toLowerCase());
                if (curDate != null && newDate == null)//说明输入有日期，解析后为null（即输入的日期不在范围内)，故什么都不做，返回原值
                {
                    __textBox.val(this.get_Text()); //resume previous value
                    return;
                }
                //	            if(changedHours<=24)
                //	            {
                //	                newDate.setHours(changedHours);
                //	            }
                //	            if(changedMinutes<=60)
                //	            {
                //	                newDate.setMinutes(changedMinutes);
                //	            }
                //	            if(changedSeconds<=60)
                //	            {
                //	                newDate.setSeconds(changedSeconds);
                //	            }

                //added by u9lkc 20100324
                //判断时间是否有效 如果无效则使用当前时间
                //gct20071122:此时newDate的时间应该是客户端当前的时间，所以应当赋上真正的时间
                if (!isNaN(changedHours)) {
                    newDate.setHours(0);
                    newDate.setHours(changedHours);
                }
                if (!isNaN(changedMinutes)) {
                    newDate.setMinutes(0);
                    newDate.setMinutes(changedMinutes);
                }
                if (!isNaN(changedSeconds)) {
                    newDate.setSeconds(0);
                    newDate.setSeconds(changedSeconds);
                }
                if (!isNaN(changedSeconds && this.get_FormatString() != "g")) {
                    newDate.setSeconds(0);
                    newDate.setSeconds(changedSeconds);
                }

                //验证输入值是否在用户定义的取值范围内
                if (!this.validInputDate(newDate)) {
                    __textBox.val(this.get_Text()); //resume previous value
                    return;
                }
                this._date = newDate;
                this._hiddenValue.value = this._date.format("yyyy-MM-dd HH:mm:ss");
                __textBox.val(this.get_Text());
            }
            else {
                var newDate = Date$parseEx(curDate, dateValue, this.get_FormatString(), this.get_CultureName().toLowerCase());
                //	            if(newDate && (this.get_FormatString()=="D"||this.get_FormatString()=="d"))//日期时间型，时间部分置零
                //	                newDate.setHours(0,0,0);	             	               
                //验证输入值是否在用户定义的取值范围内
                if (this.get_FormatString() != "T") {
                    if (!this.validInputDate(newDate)) {
                        __textBox.val(this.get_Text()); //resume previous value
                        return;
                    }
                }

                if (newDate) {
                    this.set_Value(newDate);
                }
                else {
                    __textBox.val(this.get_Text());
                }
            }
        }
        //if(oldDate!=this._date)//不能直接比较"=="，通过日历选择相同的日期，直接用"=="比较也会认为oldDate!=this._date为true  	            
        if ((oldDate == null && this._date != null) || (oldDate != null && this._date == null)) {
            this.fireChangeEvent();
            if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                this.set_IsChanged(true);
        }
        else if (oldDate && this._date && (oldDate.toString() != this._date.toString())) {
            this.fireChangeEvent();
            if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                this.set_IsChanged(true);
        }
    }, //end inputChange
    //from year-month-day to month-day-year
    fromymd2mdy: function (val) {
        if (!val) return;
        if (val.charAt(4) == '-') {
            var year = val.substr(0, 4);
            var otherDate = val.substr(5);
            var blankIndex = otherDate.indexOf(" ");
            if (blankIndex > 0) {
                var monthday = otherDate.substring(0, blankIndex);
                val = monthday + "-" + year + otherDate.substr(blankIndex);
            }
            else {
                val = otherDate + "-" + year;
            }
        }
        return val.replace(/\-/g, "/");
    },
    validateInputDate: function (dateValue, format) {
        if (format == "d" || format == "D" || format == "F" || format == "G" || format == "s" || format == "g") {
            var result = this.AnalysisInputDate(dateValue);
            if (!result.ok) return "";
            dateValue = this.ConvertToString(result.date);
            /*
            if(result.year =="" || result.month=="" || result.day=="") return "";
            if(isNaN(result.year)) return "";
            if(result.year.length>4) return ""; 
            var tryDate=new Date();
            tryDate.setFullYear(result.year,result.month-1,result.day);
            if((tryDate.getFullYear()!=result.year*1) || (tryDate.getMonth()!=result.month*1-1) || (tryDate.getDate()!=result.day*1)) { return ""; }
            if(result.time) 
            {
            var timeSegs=result.time.split(this._timeSeparator);
            if(timeSegs.length<3) { return ""; }
            tryDate.setHours(timeSegs[0]*1);
            if(timeSegs[0]=="" || tryDate.getHours()!=timeSegs[0]*1) { return ""; }
            tryDate.setMinutes(timeSegs[1]*1);
            if(timeSegs[1]=="" || tryDate.getMinutes()!=timeSegs[1]*1) { return ""; }
            tryDate.setSeconds(timeSegs[2]*1);
            if(timeSegs[2]=="" || tryDate.getSeconds()!=timeSegs[2]*1) { return ""; }
            }
            if(format=="F" || format=="G")
            {   
            return result.year + "-" + result.month + "-" + result.day+" "+result.time;
            }
            else
            {
            return result.year + "-" + result.month + "-" + result.day;            
            }
            */
        }
        return dateValue;
    },

    AnalysisInputDate: function (value) {
        //TODO:各种格式的转换(如:yyyymmdd格式下输入mmddyyyy)
        var result = new Object();
        result.ok = true;
        result.year = "";
        result.month = "";
        result.day = "";
        try {
            //下面的代码，如果value是"2017 04 28    11:07:18"，那么会生成一个数组包含：2017,04,28,11:07:18
            //但是在谷歌下会生成:2017,04,28,"","",""11:07:18
            //所以要多做一遍处理
            var dates = value.split(/[-* *]/);
            dates.removeAll("");
            if (dates.length == 1) {   //没有分割字符的情况  
                if (value.length < 6) {   //最小六位
                    result.ok = false;
                }
                else {
                    result.year = value.substring(0, 4);
                    if (value.length == 8) {
                        result.month = value.substring(4, 6);
                        result.day = value.substring(6, 8);
                    }
                    else if (value.length == 6) {
                        result.month = value.substring(4, 5);
                        result.day = value.substring(5, 6);
                    }
                    else if (value.length == 7) {
                        result.month = value.substring(4, 5);
                        result.day = value.substring(5, 7);
                    }
                    else {
                        result.ok = false;
                    } //end 8/6/7/>8
                }
                result.date = new Date(result.month + "-" + result.day + "-" + result.year);
            }
            else {
                if (dates.length == 3 || dates.length == 4) {
                    var val = this.ConvertToDate(value);
                    if (val != null) {
                        result.year = val.getFullYear().toString();
                        result.month = val.getMonth().toString();
                        result.day = val.getDate().toString();
                        result.date = val;
                    }
                    else {
                        result.ok = false;
                    }

                } else {
                    result.ok = false;
                }
                /*
                if(dates.length==3)
                {
                result.year =dates[0];
                result.month  =dates[1];
                result.day =dates[2];
                } else if(dates.length==4)
                {
                result.year =dates[0];
                result.month  =dates[1];
                result.day =dates[2];
                result.time=dates[3];
                }
                else 
                {
                result.ok  =false;
                }
                */
            }

            if (result.time != null && result.time.length > 0) {
                var resultTimes = result.time.split(this._timeSeparator); //按当前的时间分隔符分割

                if (this._isPM) {
                    var temp = parseInt(resultTimes[0], 10) + 12;
                    resultTimes[0] = temp.toString();
                }
                result.time = "";
                for (var i = 0, len = resultTimes.length; i < len; i++) {
                    result.time += resultTimes[i];
                    if (i < len - 1)
                    //result.time+=":";//不在代码中写死成:
                        result.time += this._timeSeparator;
                }
            }
        }
        catch (e) {
            result.ok = false;
        }
        return result;

    }, //end AnalysisInputDate

    wideChars2NarrowChars: function (wideChars) {
        this.setFlag4AMPM(wideChars);
        var tempWideChars = "";
        for (var i = 0; i < wideChars.length; i++) {
            tempWideChars += this.wideChar2NarrowChar(wideChars.substr(i, 1));
        }
        return tempWideChars;
    },

    setFlag4AMPM: function (wideChars) {
        if (wideChars.indexOf("上午") > -1) {
            this._isAM = true;
            this._isPM = false;
        }
        if (wideChars.indexOf("下午") > -1) {
            this._isAM = false;
            this._isPM = true;
        }
        if (wideChars.indexOf("AM") > -1) {
            this._isAM = true;
            this._isPM = false;
        }
        if (wideChars.indexOf("PM") > -1) {
            this._isAM = false;
            this._isPM = true;
        }
    },

    wideChar2NarrowChar: function (wideChar) {
        var tempWideChar = escape(wideChar);
        var tempNarrowChar;
        switch (tempWideChar) {
            case "0":
                tempNarrowChar = "0";
                break;
            case "1":
                tempNarrowChar = "1";
                break;
            case "2":
                tempNarrowChar = "2";
                break;
            case "3":
                tempNarrowChar = "3";
                break;
            case "4":
                tempNarrowChar = "4";
                break;
            case "5":
                tempNarrowChar = "5";
                break;
            case "6":
                tempNarrowChar = "6";
                break;
            case "7":
                tempNarrowChar = "7";
                break;
            case "8":
                tempNarrowChar = "8";
                break;
            case "9":
                tempNarrowChar = "9";
                break;
            case "%3A":
                tempNarrowChar = ":";
                break;

            case "%uFF10":
                tempNarrowChar = "0";
                break;
            case "%uFF11":
                tempNarrowChar = "1";
                break;
            case "%uFF12":
                tempNarrowChar = "2";
                break;
            case "%uFF13":
                tempNarrowChar = "3";
                break;
            case "%uFF14":
                tempNarrowChar = "4";
                break;
            case "%uFF15":
                tempNarrowChar = "5";
                break;
            case "%uFF16":
                tempNarrowChar = "6";
                break;
            case "%uFF17":
                tempNarrowChar = "7";
                break;
            case "%uFF18":
                tempNarrowChar = "8";
                break;
            case "%uFF19":
                tempNarrowChar = "9";
                break;
            case "%u3000":
                tempNarrowChar = " ";
                break;
            case "%uFF0D":
                tempNarrowChar = "_";
                break;
            case "%uFF1A":
                tempNarrowChar = ":";
                break;
            case escape(this._timeSeparator):
                tempNarrowChar = this._timeSeparator;
                break;
            default:
                //将2007年01月01日中的"年月日"转换为空格       
                tempNarrowChar = " ";
        }
        return tempNarrowChar;
    },

    //    onInputBlur : function()
    //    {
    //        var newDT=Date.parse(this._textbox.value);
    //        if(!isNaN(newDT)) this.set_Value(new Date(newDT));
    //        this._textbox.value=this.get_Text();
    //    },   

    //    onInputFocus : function()
    //    {  
    //        this._textbox.value=this.getDateMdyHms();
    //    },

    //    getDateMdyHms :function()
    //    {
    //        if(!this.get_ValueIns()) set_value(new Date());
    //        var strDT=(this.get_ValueIns().getMonth()+1)+"/"+this.get_ValueIns().getDate()+"/"+this.get_ValueIns().getYear();
    //        if(this.get_FormatString()!="D")
    //        {
    //            strDT+=" "+this.get_ValueIns().getHours()+":"+this.get_ValueIns().getMinutes()+":"+this.get_ValueIns().getSeconds();    
    //        }
    //        return strDT;
    //    },

    getDateYmdHms: function () {
        if (!this.get_ValueIns()) return "";
        var strDT = this.get_ValueIns().getFullYear() + "-" + (this.get_ValueIns().getMonth() + 1) + "-" + this.get_ValueIns().getDate();
        if (this.get_FormatString() != "D") {
            strDT += " " + this.get_ValueIns().getHours() + ":" + this.get_ValueIns().getMinutes() + ":" + this.get_ValueIns().getSeconds();
        }
        return strDT;
    },

    get_elemPopup: function () {
        //由于在鼠标移出区域时不能调用function onClose(cal)方法,故此在此加以判断;
        if (window._dynarch_popupCalendar == null) {
            this._popup = null;
        }
        if (this._popup == null) {
            //在new Calendar的时候才在客户端计算取得服务器render控件的时间
            if (!this.serverDateTime) {
                var dt = this._element.cusAttr("ServerDateTime"); //取得服务器当前时间标识
                var dts = dt.split("-");
                dts[1] = dts[1] - 1; //month need subtract 1
                this.serverDateTime = new Date(dts[0], dts[1], dts[2], dts[3], dts[4], dts[5]);
            }
            this._popup = new Calendar(this.get_ValueIns(), this.get_CultureName().toLowerCase(), this.onSelect, this.onClose, this.calID, this);
        }
        return this._popup;
    },

    get_ValueIns: function () {
        return this._date;
    },
    get_ValueInsWithoutMS: function () {
        if (this._date == null)
            return null;
        var dt = new Date(this._date.getFullYear(), this._date.getMonth(), this._date.getDate(), this._date.getHours(), this._date.getMinutes(), this._date.getSeconds(), 0);
        return dt;
    },
    get_ValueNumberWithoutMS: function () {
        var i = this.get_ValueInsWithoutMS() - 0;
        return i;
    },
    TextBoxFocus: function () {
        var _this = this;
        this.ControlFocus();
        if (this._textbox) {
            this._textbox.select();
            // window.setTimeout(function(){_this._textbox.select();},0);  //解决chrome44版本及以下的焦点进入没法全新文本的问题 -- 20170425
        }
    },
    TextBoxBlur: function () {
        this.ControlBlur();
        this._textbox.value = this._textbox.value; //加这一句话是为了解决Alt+0问题：日期控件在已经失去焦点的情况下，其中的字符仍处于选中状态
    },
    BtnMouseOver: function (button) {
        this._button.className = this.btnmouseOverClass;
    },
    BtnMouseOut: function () {
        this._button.className = this.btnmouseOutClass;
    },

    button_click: function () {
        if (this.get_elemPopup().show) {
            this.get_elemPopup().callCloseHandler();
        }
        else {
            var oRect = this.getBoundingClientRect();
            var intClientWidth = document.body.clientWidth;
            var intClientHeight = document.body.clientHeight;
            var flagWidth = intClientWidth - (oRect.left + this.const_CalendarWidth);
            var flagHeight = intClientHeight - (oRect.top + this._element.clientHeight + this.const_Calendarheight);
            if ((flagWidth >= 0) && (flagHeight >= 0))//左对齐，正下方
            {
                this.get_elemPopup().showAt(oRect.left - 2, oRect.top + document.body.scrollTop + this._element.clientHeight);
            }
            else if ((flagWidth >= 0) && (flagHeight < 0))//左对齐
            {
                if (oRect.top > this.const_Calendarheight)//左对齐，正上方
                    this.get_elemPopup().showAt(oRect.left - 2, oRect.top + document.body.scrollTop - 2 - this.const_Calendarheight);
                else//左对齐，上方
                    this.get_elemPopup().showAt(oRect.left - 2, 0);
            }
            else if ((flagWidth < 0) && (flagHeight >= 0)) {
                if (oRect.right >= this.const_CalendarWidth)
                    this.get_elemPopup().showAt(oRect.right - this.const_CalendarWidth, oRect.top + this._element.clientHeight);
                else
                    this.get_elemPopup().showAt(0, oRect.top + this._element.clientHeight);
            }
            else if ((flagWidth < 0) && (flagHeight < 0)) {
                if (oRect.right >= this.const_CalendarWidth) {
                    if (oRect.top > this.const_Calendarheight)
                        this.get_elemPopup().showAt(oRect.right - this.const_CalendarWidth, oRect.top - this.const_Calendarheight);
                    else
                        this.get_elemPopup().showAt(oRect.right - this.const_CalendarWidth, 0);

                }
                else {
                    if (oRect.top > this.const_Calendarheight)
                        this.get_elemPopup().showAt(0, oRect.top - this.const_Calendarheight);
                    else
                        this.get_elemPopup().showAt(0, 0);
                }
            }
        }
    },

    onkeyDown: function () {
        if (this.get_ReadOnly()) return;
        switch (window.event.keyCode) {
            case KeyCode.F2:
                this.button_click();
                window.$Event(event).stopPropagation();
                break;
            case KeyCode.down:
                if (window.event.ctrlKey) {
                    this.button_click();
                    window.$Event(event).stopPropagation();
                }
                break;
            case KeyCode.tab:
            case KeyCode.enter:
                this.inputChange();
                break;
        }
    },

    getBoundingClientRect: function () {
        return this.get_element().getBoundingClientRect()
    },

    //验证输入值是否在用户定义的取值范围内
    validInputDate: function (inputDateValue) {
        if (!this._element) return false;
        var strMaxDate = this._element.cusAttr('MaxDate');
        var strMinDate = this._element.cusAttr('MinDate');
        if (!strMaxDate) strMaxDate = "9999-12-31 23:59:59";
        if (!strMinDate) strMinDate = "1753-1-2";
        var newDateValue = new Date(inputDateValue);
        if (isNaN(newDateValue)) {
            return false;
        }
        var maxDate = new Date(this.fromymd2mdy(strMaxDate));
        if ((maxDate != null) && (newDateValue > maxDate)) {
            return false;
        }
        var minDate = new Date(this.fromymd2mdy(strMinDate));
        if ((minDate != null) && (newDateValue < minDate)) {
            return false;
        }
        return true;
    },

    get_TextFromInput: function () {
        return this._textbox.value;
    },
    set_IsCustomDateTimeFormat: function (strIsCustomDateTimeFormat) {
        if (strIsCustomDateTimeFormat != null && strIsCustomDateTimeFormat.toLowerCase() == "true")//只有小写为"true"的时候才是多交期
            this._isCustomDateTimeFormat = "true";
        else
            this._isCustomDateTimeFormat = "false";
    },
    get_IsCustomDateTimeFormat: function () {
        return this._isCustomDateTimeFormat;
    },
    set_CustomDateTimeFormat: function (strCustomDateTimeFormat) {
        if (strCustomDateTimeFormat != null)
            this._customDateTimeFormat = strCustomDateTimeFormat.toString();
        else
            this._customDateTimeFormat = ""; //如果参数为null
    },
    get_CustomDateTimeFormat: function () {
        return this._customDateTimeFormat;
    }
}
UF.UI.DateTimePicker.registerClass('UF.UI.DateTimePicker', UF.UI.InputControl);

function DateTimePickerTemplate(){}
DateTimePickerTemplate.Enabled          = InputControlTemplate.Enabled;
DateTimePickerTemplate.ReadOnly         = InputControlTemplate.ReadOnly;
DateTimePickerTemplate.TBClassName      = InputControlTemplate.TBClassName;
DateTimePickerTemplate.TBClassName_R    = InputControlTemplate.TBClassName_R;
DateTimePickerTemplate.TBClassName_D    = InputControlTemplate.TBClassName_D;
DateTimePickerTemplate.BtnClassName     = "btn DateBtn";
DateTimePickerTemplate.BtnClassName_Dis = "btn DateBtn_Dis";;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.TextBox = function(element) {

    UF.UI.TextBox.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    this._textbox;
    this.$element;
    this._$textbox;
    this._CaseSensitive = false;
    this._IsSelectText = true;
    // Handler    
    this._textboxblurHandler;
    this._textboxchangeHandler;
    this._textboxkeypressHandler;
    this._textboxpasteHandler;
    this._textboxfocusHandler;
    this._textboxkeypress4CaseSensitiveHandler;
    this._masked = false;
    
    this._isOnChangedFired = false;//用来标识是不是onchange。如果是onchange，则在OnValueChanged和onchange中选择一个时机晚的地方触发OnValueChanged4P即可。
}

UF.UI.TextBox.prototype = {

    initialize: function () {
        UF.UI.TextBox.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        this._textbox = this.get_element().childNodes[0];
        this._$textbox = $(this._textbox);
        this.$element = $(this._element);
        //this.DisplayRequiredFlag(!this.get_element().disabled);
        //this.DisplayRequiredFlag(true);
        var isDisplay = this._element.cusAttr("r") == "y" ? true : false;
        this.DisplayRequiredFlag(isDisplay);
        // Create delegates Attach events  
        this._textboxchangeHandler = Function.createDelegate(this, this.changePD);
        $addHandler(this._textbox, "change", this._textboxchangeHandler);

        this._textboxblurHandler = Function.createDelegate(this, this.blurPD);
        $addHandler(this._textbox, "blur", this._textboxblurHandler);

        this._textboxfocusHandler = Function.createDelegate(this, this.selectValues);
        $addHandler(this._textbox, "focus", this._textboxfocusHandler);

        if (this._element.cusAttr("masked"))
            this._masked = ToBoolean(this._element.cusAttr("masked"));
        else
            this._masked = ToBoolean(TextBoxTemplate.Masked);

        if (this._element.cusAttr("selecttext"))
            this._IsSelectText = ToBoolean(this._element.cusAttr("selecttext"));
        else
            this._IsSelectText = ToBoolean(TextBoxTemplate.SelectText);

        if (this._element.cusAttr("casesensitive"))
            this._CaseSensitive = ToBoolean(this._element.cusAttr("casesensitive"));
        else
            this._CaseSensitive = ToBoolean(TextBoxTemplate.CaseSensitive);

        if (!this._CaseSensitive) {
            this._textboxkeypress4CaseSensitiveHandler = Function.createDelegate(this, this.keyPressCaseSensitive);
            $addHandler(this._textbox, "keypress", this._textboxkeypress4CaseSensitiveHandler);
        }

        if (this._masked) {
            this._textboxkeypressHandler = Function.createDelegate(this, this.CheckMarkChar);
            $addHandler(this._textbox, "keypress", this._textboxkeypressHandler);

            this._textboxpasteHandler = Function.createDelegate(this, this.CheckMarkChars);
            $addHandler(this._textbox, "paste", this._textboxpasteHandler);

            if (this._element.cusAttr("mask")) {
                //mask赋值到textbox
                // this._textbox.maskChars = this.get_element().Mask + MaskChar.Default;
                this._textbox.cusAttr("maskChars", this._element.cusAttr("mask") + MaskChar.Default);
            }
            else {
                // this._textbox.maskChars = MaskChar.Default;
                this._textbox.cusAttr("maskChars", MaskChar.Default);
            }

            //解决页面未显现出来之前，快速键盘输入'(屏蔽字符)，仍可以降'输入到Textbox中的问题            
            if (isMasks(this._textbox.value, this._textbox.cusAttr("maskChars")))//重新检查this._textbox.value中是否含有屏蔽字符,如果有屏蔽字符,则置SourceValue（SourceValue是Value在服务器段的一个备份）
                this._textbox.value = this._textbox.cusAttr("SourceValue");
        }
        if (this._textbox.getAttribute("onchange")) {
            //this._textbox.attachEvent("onchange",function(){window._TextBoxFirePostBack = true;});
            //this._textbox.attachEvent("onblur", function () { window._TextBoxFirePostBack = true; window.setTimeout('window._TextBoxFirePostBack = false;', 200); });

            $(this._textbox).bind("blur", function () { window._TextBoxFirePostBack = true; window.setTimeout('window._TextBoxFirePostBack = false;', 200); });
        }
        this.set_IsInitComlete(true); //gct20080917:设置初始化完成标志，用于脏数据保存提示
    },

    dispose: function () {
        // TODO: add your cleanup code here
        if (this._textboxblurHandler) {
            $removeHandler(this._textbox, "blur", this._textboxblurHandler);
            this._textboxblurHandler = null;
        }
        if (this._textboxchangeHandler) {
            $removeHandler(this._textbox, "change", this._textboxchangeHandler);
            this._textboxchangeHandler = null;
        }
        if (this._textboxkeypressHandler) {
            $removeHandler(this._textbox, "keypress", this._textboxkeypressHandler);
            this._textboxkeypressHandler = null;
        }
        if (this._textboxkeypress4CaseSensitiveHandler) {
            $removeHandler(this._textbox, "keypress", this._textboxkeypress4CaseSensitiveHandler);
            this._textboxkeypress4CaseSensitiveHandler = null;
        }
        if (this._textboxpasteHandler) {
            $removeHandler(this._textbox, "paste", this._textboxpasteHandler);
            this._textboxpasteHandler = null;
        }
        if (this._textboxfocusHandler) {
            $removeHandler(this._textbox, "focus", this._textboxfocusHandler);
            this._textboxfocusHandler = null;
        }
        if (this.curHandler != null)
            this.curHandler = null; //gct20091126：一定要释放，否则导致IE内存泄漏
        this._textbox = null;
        UF.UI.TextBox.callBaseMethod(this, 'dispose');
    },

    //event    
    add_onchange: function (handler) {
        this.get_events().addHandler("onchange", handler);
    },
    remove_onchange: function (handler) {
        this.get_events().removeHandler("onchange", handler);
    },
    raiseonchange: function (args) {
        var eh = this.get_events().getHandler("onchange");
        if (eh) {
            eh(this, args);
        }
    },

    add_OnValueChanged: function (handler) {
        this.get_events().addHandler("OnValueChanged", handler);
    },
    remove_OnValueChanged: function (handler) {
        this.get_events().removeHandler("OnValueChanged", handler);
    },
    raiseOnValueChanged: function (args) {
        if (this.get_element().getAttribute("OnValueChanged")) {
            eval(this.get_element().getAttribute("OnValueChanged"));
        }
        var eh = this.get_events().getHandler("OnValueChanged");
        if (eh) {
            eh(this, args);
        }

        //暂时放在OnValueChange的最后，提供一个个性化处理时机。onchange暂时没有这样的时机，也不需要，因为onchange触发，则OnValueChange一定会触发
        //this.AfterRaiseOnValueChanged4Personal();
    },
    add_OnValueChanged4P: function (handler) {
        this.get_events().addHandler("OnValueChanged4P", handler);
    },
    remove_OnValueChanged4P: function (handler) {
        this.get_events().removeHandler("OnValueChanged4P", handler);
    },
    raiseOnValueChanged4P: function (args) {
        var eh = this.get_events().getHandler("OnValueChanged4P");
        if (eh) {
            this.curHandler = eh; //记录eh到sender中，以便在BasicInfor的CanEvalPersonalJS()中使用curHandler获取对eh的引用。this在运行时不是eh
            eh(this, args);
        }

        //暂时放在OnValueChange的最后，提供一个个性化处理时机。onchange暂时没有这样的时机，也不需要，因为onchange触发，则OnValueChange一定会触发
        this.AfterRaiseOnValueChanged4Personal();
    },

    add_onblur: function (handler) {
        this.get_events().addHandler("onblur", handler);
    },
    remove_onblur: function (handler) {
        this.get_events().removeHandler("onblur", handler);
    },
    raiseonblur: function (args) {
        var eh = this.get_events().getHandler("onblur");
        if (eh) {
            eh(this, args);
        }
    },

    add_onkeypress: function (handler) {
        this.get_events().addHandler("onkeypress", handler);
    },
    remove_onkeypress: function (handler) {
        this.get_events().removeHandler("onkeypress", handler);
    },
    raiseonkeypress: function (args) {
        var eh = this.get_events().getHandler("onkeypress");
        if (eh) {
            eh(this, args);
        }
    },

    // TODO: (Step 2) Add your property accessors here 
    get_Type: function () {
        return ControlType.TextBox;
    },

    set_Enabled: function (isEnabled) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        isEnabled = ToBoolean(isEnabled);
        this._element.cusAttr("disabled", !isEnabled);
        for (var i = 0, len = this.get_element().children.length; i < len; i++) {
            $(this._element.children[i]).attr("disabled", !isEnabled);
            if (isEnabled) {
                this._element.className = UIControlClass.UFTextBox.CssClass;
            }
            else {
                this._element.className = UIControlClass.UFTextBox.ReadOnlyCssClass;
            }
        }
        //运行态下设置必输项符合是否显示
        //this.DisplayRequiredFlag(isEnabled);
    },

    get_ReadOnly: function () {
        return this._element.cusAttr("readOnly")
    },

    set_ReadOnly: function (isReadOnly) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        if (!this.get_Enabled())//由于客户端区分ReadOnly和Enabled状态，所以在设置ReadOnly的时候，要优先考虑Enabled属性
            return;

        isReadOnly = ToBoolean(isReadOnly);
        this._element.cusAttr("readOnly", isReadOnly);

        if (isReadOnly) {
            // this._textbox.className = this.tbClassName_R;
            this._textbox.className = InputControlTemplate.TBClassName_R;
            this._element.className = UIControlClass.UFTextBox.ReadOnlyCssClass;
             $(this._textbox).attr("readOnly","readOnly"); //工程变更
        }
        else {
            // this._textbox.className = this.tbClassName;
            this._textbox.className = InputControlTemplate.TBClassName;
            this._element.className = UIControlClass.UFTextBox.CssClass;
            $(this._textbox).removeAttr("readOnly");   //编辑状态下，需remove掉对应的readOnly属性 -- 跨浏览器兼容20170301 -- weiyin
        }
        this.set_HDValue("ReadOnly", isReadOnly.toString().toLowerCase());
        //gct20081203:增加一个设置只读后的个性化处理时机。无论有没有个性化都会调用此函数
        this.AfterSetReadOnly4Personal();
    },

    get_Value: function () {
        return G_Trim(this._textbox.value);
    },

    set_Value: function (val) {
        if (isMasks(val, this._textbox.cusAttr("maskChars"))) {
            return;
        }
        var oldvalue = this._textbox.value;
        this._textbox.value = val;
        if (this._textbox.value != oldvalue) {
            this.fireValueChangeEvent();
            if (this._isOnChangedFired != true)//如果不是onchange，那么就需要触发fireValueChange4PEvent，如果是onchange，这里不触发，在onchange中会触发的。（这样才能保证最后再触发个性化的事件）
                this.fireValueChange4PEvent();
            if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
                this.set_IsValueChanged(true);
        }
    },

    get_Text: function () {
        return this._textbox.value;
    },

    set_Text: function (val)//对TextBox而言，set_Text()等价于set_Value()
    {
        this.set_Value(val);
    },

    //检查屏蔽字符集合
    CheckMarkChars: function () {
        var textBox = event.srcElement;
        var maskChars = textBox.cusAttr("maskChars");
        // var text = window.clipboardData.getData("text");
        var text;
        if(event){
            text = event.clipboardData.getData("text/plain");
        }else{
            text = window.clipboardData.getData("text");
        }
        if (isMasks(text, maskChars)) {
            $Event(event).preventDefault();
        }
    },

    //检查屏蔽字符
    CheckMarkChar: function () {
        this.raiseonkeypress(Sys.EventArgs.Empty);
        var textBox = event.srcElement;
        var maskChars = textBox.cusAttr("maskChars");
        if (maskChars != "") {
            if (isMask(event.keyCode, maskChars)) {
                $Event(event).preventDefault();
            }
        }
    },

    keyPressCaseSensitive: function () {
        if (!this._CaseSensitive) {  //处理大小写不敏感的情况，自动转变为大写字母
            if (event.keyCode > 96 && event.keyCode < 123) {  // a(97)--z(122)  A(65) -- Z(90)
                event.keyCode -= 32;
            }
        }
    },
    //    fireEvent : function()
    //    {        
    //        var args = new UF.UI.ChangeEventArgs(); 
    //        this.raiseonkeypress(Sys.EventArgs.Empty); 
    //    },

    firechangeEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._textbox.value;
        this.raiseonchange(args);
    },

    fireValueChangeEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._textbox.value;
        this.raiseOnValueChanged(args);
    },
    fireValueChange4PEvent: function () {
        if (this.get_IsRaiseEvent() == false)
            return; //个性化特殊处理：通常在Grid列编辑控件初始化的时候，不应该RaiseEvent

        var args = new UF.UI.ChangeEventArgs();
        args.value = this._textbox.value;
        this.raiseOnValueChanged4P(args);
    },

    changePD: function () {
        this._isOnChangedFired = true;

        this.firechangeEvent();
        this.fireValueChangeEvent();
        this.fireValueChange4PEvent();
        if (Get_Global_IsPageLoadComplete() == true) {
            this.set_IsChanged(true); //设置IsChanged标识，为脏数据保存提示所用
            this.set_IsValueChanged(true); //设置IsValueChanged标识，为脏数据保存提示所用
        }

        this._isOnChangedFired = false;
    },

    blurPD: function () {
        if (this._masked) {
            this._textbox.value = filtrateMaskChar(this._textbox.value, this._textbox.cusAttr("maskChars"))
        }
        this.ControlBlur();
        this._textbox.value = this._textbox.value;
        var args = new UF.UI.ChangeEventArgs();
        this.raiseonblur(args);
    },

    selectValues: function () {
        var _this = this;
        this.ControlFocus();
        if (this._IsSelectText) {
            try {
                if (document.activeElement != this._textbox) {
                    window.setTimeout("try{$ID('" + this._textbox.id + "').focus();}catch(e){}", 10);
                }
                this._textbox.select();
                // window.setTimeout(function(){_this._textbox.select();},0);  //解决chrome44版本及以下的焦点进入没法全新文本的问题 -- 20170425 -- weiyina
            } catch (e) { }
        }
    }
}

UF.UI.TextBox.registerClass('UF.UI.TextBox', UF.UI.InputControl);

function TextBoxTemplate(){}
TextBoxTemplate.Enabled            = InputControlTemplate.Enabled;
TextBoxTemplate.ReadOnly           = InputControlTemplate.ReadOnly;
TextBoxTemplate.TBClassName        = InputControlTemplate.TBClassName;
TextBoxTemplate.TBClassName_R      = InputControlTemplate.TBClassName_R;
TextBoxTemplate.TBClassName_D      = InputControlTemplate.TBClassName_D;
TextBoxTemplate.Masked             = "True";
TextBoxTemplate.SelectText         = "True";
TextBoxTemplate.CaseSensitive      = "True";
;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

var _isEnterOverTime = true; //Add 4 Enter键延时

UF.UI.Panel = function (element) {

    UF.UI.Panel.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    var _this;
    this._focusContainer = null;
    this._topPanel = null;
    this._ToolBar = null;
    this._ExtraToolbar = null;
    this._ExtraToolbarButtons = null;
    this._OldControl = null;
    this._OldControl2DDRMenu = null;

    // Handler
    //this._focusoutHandler;
    this._keydownHandler;
    this._focusinHandler;
    this._clickHandler;

    this._hcc; //HiddenCurrentControl
    this._ncc; //NextCurrentContainer
    this._hcp; //HiddenCurrentContainer
}

UF.UI.Panel.prototype = {

    initialize: function () {
        UF.UI.Panel.callBaseMethod(this, 'initialize');
        this.initControl();
        this._focusinHandler = Function.createDelegate(this, this.onMouseDown);
        $addHandler(this._element, "focusin", this._focusinHandler);
        this._clickHandler = Function.createDelegate(this, this.onMouseDown);
        $addHandler(this._element, "click", this._clickHandler);
        this._keydownHandler = Function.createDelegate(this, this.onkeyDown);
        $addHandler(this._element, "keydown", this._keydownHandler);
    },

    dispose: function () {
        if (this._focusinHandler) {
            $removeHandler(this._element, "focusin", this._focusinHandler);
            this._focusinHandler = null;
        }
        if (this._clickHandler) {
            $removeHandler(this._element, "click", this._clickHandler);
            this._clickHandler = null;
        }
        if (this._keydownHandler) {
            $removeHandler(this._element, "keydown", this._keydownHandler);
            this._keydownHandler = null;
        }
        this._focusContainer = null;
        this._ToolBar = null;
        this._ExtraToolbar = null;
        this._ExtraToolbarButtons = null;
        this._OldControl = null;
        this._OldControl2DDRMenu = null;
        this._hcc = null;
        this._ncc = null;

        UF.UI.Panel.callBaseMethod(this, 'dispose');
    },

    get_Type: function () {
        return ControlType.Panel;
    },

    get_ReadOnly: function () {
        return this._element.cusAttr('readOnly');
    },
    set_ReadOnly: function (bisReadOnly) {
        var isReadOnly = ToBoolean(bisReadOnly);
        for (var i = 0, len = this._element.children.length; i < len; i++) {
            var findC = $find(this._element.children[i].id);
            if (findC) {
                if (findC.set_ReadOnly) {
                    findC.set_ReadOnly(isReadOnly);
                }
                else
                    findC.cusAttr('readOnly', isReadOnly);
            } else {
                $(this._element.children[i]).attr("readOnly", isReadOnly);
            }
        }
        this._element.cusAttr('readOnly', isReadOnly);
    },
    get_Enabled: function () {
        return !this._element.cusAttr('disabled');

    },
    set_Enabled: function (isEnabled) {
        isEnabled = ToBoolean(isEnabled);
        this._element.cusAttr("disabled", !isEnabled);
        for (var i = 0, len = this._element.children.length; i < len; i++) {
            var findC = $find(this._element.children[i].id);
            if (findC) {
                if (findC.set_Enabled) {
                    findC.set_Enabled(isEnabled);
                }
                else
                    findC.cusAttr('disabled', !isEnabled);
            } else {
                $(this._element.children[i]).attr("disabled", !isEnabled);
            }
        }
    },
    initControl: function () {
        _this = this;
        /*if(typeof(this.get_element().HasBorder)!="undefined"){
        this.get_element().className="PanelBorder";
        }*/
        if (this._element.className.containsCssClass(ControlClass.TopPanel)) {
            this._hcc = window.document.getElementById("HiddenCurrentControl");
            this._ncc = window.document.getElementById("NextCurrentContainer");
            this._hcp = window.document.getElementById("HiddenCurrentContainer");
        }
        /*
        处理Ref控件的oncontentChanged进行postback时的焦点恢复。
        对于隐藏控件 HiddenCurrentControl，数据分为两部分，以 “|”分割
        左边是控件名称，右边为切换焦点时的方向
        */

        // 页面局部刷新，很可能不会触发TopPanel的init事件
        var hcc = this._hcc;
        if (hcc && hcc.value && hcc.value.split("|", 2)[0] != "") {
            var curC = window.document.getElementById(hcc.value.split("|", 2)[0]);
            if (curC && curC.tagName == "INPUT" && curC.type == "text") {
                try {
                    curC.focus();
                    if (hcc.value.split("|", 2)[1] != "stay") {
                        //top.__UFCurrentFocusControl = null;
                        this.Jump2Control(null, curC, ToBoolean(hcc.value.split("|", 2)[1]));
                    } else {
                        curC.select();
                    }
                    hcc.value = "";
                } catch (e) { hcc.value = ""; }
            }
        }

        var NextCurrentContainer;
        if (BaseTop.NextCurrentContainer && this._element.id == BaseTop.NextCurrentContainer.id) {
            NextCurrentContainer = this._element;
            if (NextCurrentContainer.style.display != "none") {
                //this.setContainerControlFocus(NextCurrentContainer,top.NextCurrentContainerDirection);
                BaseTop.__UFCurrentFocusControl = NextCurrentContainer.id;
            }
        } else {
            var ncc = this._ncc;
            if (ncc && ncc.value && ncc.value.split("|", 2)[0] == this._element.id) {
                NextCurrentContainer = this._element;
                if (NextCurrentContainer.style.display != "none") {
                    //this.setContainerControlFocus(NextCurrentContainer,ncc.value.split("|",2)[1] == "true");
                    BaseTop.__UFCurrentFocusControl = NextCurrentContainer.id;
                }
            }
        }
        //perf: preload this._fieldControls and this._Containers
        //window.setTimeout(this.GetFieldControls, 0);
        //window.setTimeout(this.GetContainers, 0);
    },

    onMouseDown: function () {
        var tag = event.srcElement.tagName;
        var ele = event.srcElement;
        if (tag == "INPUT" && (ele.className == "DDBO" || ele.className == "TBI")) {
            //Toolbar按钮  modify by kxl grid全选的复选框的样式是 thc，单行上的是tcc，导致全选后，翻页会导致tabcontrol的selected为0
        } else if (tag == "TD" && event.srcElement.className == "tcc" || (tag == "INPUT" && (event.srcElement.parentElement.className == "tcc" || event.srcElement.parentElement.className == "thc"))) {
            var tmpGrid = this.getParentContainer(ele.parentElement.parentElement);
            if (tmpGrid != null && tmpGrid.id != null) {
                BaseTop.__UFCurrentFocusControl = tmpGrid.id;
            }
        } else if (tag == "INPUT" && ele.parentElement && ele.parentElement && ele.parentElement.parentElement.tagName == "TD" && ele.parentElement.parentElement.className.split(" ")[0] == "tbc") {
            var tmpGrid = this.getParentContainer(ele.parentElement.parentElement);
            if (tmpGrid != null && tmpGrid.id != null) {
                BaseTop.__UFCurrentFocusControl = tmpGrid.id;
            } else {
                BaseTop.__UFCurrentFocusControl = "Grid";
            }
        } else if (tag == "INPUT" || tag == "TEXTAREA") {
            var atmp = event.srcElement.offsetParent;
            if (atmp&&(atmp.id == "gg"
			|| (atmp.tagName == "TD" && atmp.className.split(" ")[0] == "tbc")
			|| (atmp.offsetParent && (atmp.offsetParent.tagName == "TD" && atmp.offsetParent.className.split(" ")[0] == "tbc")))) {
            } else {
                BaseTop.__UFCurrentFocusControl = event.srcElement.id;
            }
        }

        var _old_focusContainer = this._focusContainer; //焦点从Grid中跳出之后需要处理 Grid的状态 2007-9-11

        //程序员使用 HiddenCurrentContainer
        if (window.event.srcElement //&& window.event.srcElement.id 
            && window.event.srcElement.tagName != "BUTTON" && window.event.srcElement.tagName != "IMG" || window.event.srcElement.className == "btn DateBtnMO") {
            var isContainer = false;
            if (window.event.srcElement.className) {
                for (var i = 0, len = ContainerAsControlTag.length; i < len; i++) {
                    //if(ContainerAsControlTag[i] == window.event.srcElement.className){
                    if (window.event.srcElement.className.containsCssClass(ContainerAsControlTag[i])) {
                        this._focusContainer = window.event.srcElement;
                        isContainer = true;
                    }
                }
            }
            if (!isContainer)
                this._focusContainer = this.getParentContainer(event.srcElement);
        }
        if (this._focusContainer) {
            if (this._focusContainer.className == ControlClass.ToolBar || this._focusContainer.cusAttr('FunctionBar') == "FunctionBar")
                return;
            var hcc = this._hcp;
            if (hcc)
                hcc.value = this._focusContainer.id;
        }
        //程序员使用 HiddenCurrentContainer

        //begin ------
        //{用于焦点切换容器时，触发事件}
        if (this._element.className.containsCssClass(ControlClass.TopPanel)) {
            if ((_old_focusContainer && this._focusContainer && _old_focusContainer.id != this._focusContainer.id)    // 容器切换
                || !_old_focusContainer) {
                var args = new UF.UI.ChangeEventArgs();
                args.sourceElement = _old_focusContainer;
                args.aimElement = this._focusContainer;
                this.raiseOnContainerChanged(args);
                //如果从Grid里来，则强制Grid失去焦点
                if (_old_focusContainer && $(_old_focusContainer).hasClass(ControlClass.Grid)) {
                    if (_old_focusContainer.control)
                        _old_focusContainer.control.EndEdit();
                }
            }
        }
        //end ----
    },

    //begin ------
    //{用于焦点切换容器时，触发事件}
    add_OnContainerChanged: function (handler) {
        this.get_events().addHandler("OnContainerChanged", handler);
    },
    remove_OnContainerChanged: function (handler) {
        this.get_events().removeHandler("OnContainerChanged", handler);
    },
    raiseOnContainerChanged: function (args) {
        var eh = this.get_events().getHandler("OnContainerChanged");
        if (eh) {
            eh(this, args);
        }
    },
    //end ----

    SetNextCurrentContainerValue: function () {
        if (BaseTop.NextCurrentContainer && BaseTop.NextCurrentContainer.id) {
            var hc = this._ncc;
            if (hc)
                hc.value = BaseTop.NextCurrentContainer.id + "|" + BaseTop.NextCurrentContainerDirection;
        }
    },
    SetCurrentControlDirection: function (direction) {
        var hc = this._hcc;
        if (hc) {
            if (!hc.value || !hc.value.split("|", 2)[0]) {
                hc.value = "|" + direction;
            } else {
                hc.value = hc.value.split("|", 2)[0] + "|" + direction;
            }
        }
    },
    SetFocus: function () {
        return this.setContainerControlFocus(this._element, false);
    },

    subIframeOnkeyDown: function (curEvent, partId) {
        switch (curEvent.keyCode) {
            case KeyCode.enter:
            case KeyCode.tab:
                if (curEvent.ctrlKey)
                    return;
                if (curEvent.shiftKey) {
                    //                    if($ID( partId + "_Filter0_filterCtrl_rdoBasic")){
                    //                        $ID( partId + "_Filter0_filterCtrl_rdoBasic").parentElement.fireEvent("onclick");
                    //                        $ID( partId + "_Filter0_filterCtrl_rdoBasic").focus();
                    //                    }
                } else {
                    this.setContainerControlFocus($ID(partId + "_TabPage10"), false);
                }
                break;
            case KeyCode.G_B:
            case KeyCode.g_s:
                if (!curEvent.ctrlKey)
                    return;
                if (curEvent.shiftKey) {
                    if ($ID(partId + "_TreeControl1")) {
                        $ID(partId + "_TreeControl1").focus();
                    }
                } else {
                    this.setContainerControlFocus($ID(partId + "_TabPage10"), false);
                }
                break;
            case KeyCode.right:
            case KeyCode.left:
                if (!curEvent.ctrlKey)
                    return;
                if (curEvent.keyCode == KeyCode.left) {
                    if ($ID(partId + "_TabPage11")) {
                        this.setContainerControlFocus($ID(partId + "_TabPage11"), false);
                    }
                } else {
                    if ($ID(partId + "_TabPage10")) {
                        this.setContainerControlFocus($ID(partId + "_TabPage10"), false);
                    }
                }
                break;
            case KeyCode.Zero:
            case 96:
                if (curEvent.ctrlKey) {
                    this.ReDo2DDRMenu(curEvent);
                    //                    if($ID( partId + "_Filter0_filterCtrl_rdoBasic")){
                    //                        this._OldControl2DDRMenu = $ID( partId + "_Filter0_filterCtrl_rdoBasic");
                    //                    }
                }
                break;
        }
    },

    onkeyDown: function () {
        // if ($E(this.get_element()).document.readyState!="complete") return;  
        if (document.readyState != "complete") return;
        //任何情况下，强制使Grid失去焦点
        GridIsInFocus = false;
        switch (window.event.keyCode) {
            case 123:       //F12   
                var refence = event.srcElement.parentElement;
                var label = refence.cusAttr("L");
                if (!label) {
                    $Event(window.event).stopPropagation();
                    $Event(window.event).preventDefault();
                    return false;
                }
                var labels = this._element.getElementsByTagName("label");
                var l = null;
                for (var i = 0; i < labels.length; i++) {
                    if (labels[i].id.length <= label.length)
                        continue;
                    if ("_" + label == labels[i].id.substring(labels[i].id.length - label.length - 1, labels[i].id.length)) {
                        l = labels[i];
                        break;
                    }
                }

                if (l && l.className == "ELbl") {
                    if (l.attributes("onclick")) {
                        eval(l.attributes["onclick"].value);
                    } else {
                        if (l.control) {
                            l.control.raiseBeforeLoadData(Sys.EventArgs.Empty);
                            l.control.ShowLabelForm();
                        }
                    }
                }
                $Event(window.event).stopPropagation();
                    $Event(window.event).preventDefault();
                break;
            case KeyCode.enter:
            case KeyCode.tab:
                if (window.event.ctrlKey)
                    return;
                if (event.srcElement.type == ControlClass.TextArea && event.keyCode == 13)
                    return;
                if (event.srcElement.type == "button" || event.srcElement.type == "submit" || event.srcElement.type == "reset" || event.srcElement.tagName == "BUTTON")   //如果是按钮，不处理
                    return;
                //Add 4 Enter键延时 2007-09-06 =============== start
                if (!_isEnterOverTime) {
                    $Event(window.event).stopPropagation();
                    $Event(window.event).preventDefault();
                    return;
                } else {
                    _isEnterOverTime = false;
                    window.setTimeout(function () { _isEnterOverTime = true; }, 200);
                }
                //Add 4 Enter键延时 2007-09-06 =============== end
                if (event.srcElement.className == ControlClass.TableCell) {
                } else {
                    this.SetCurrentControlDirection(window.event.shiftKey); //add at 2007-7-23 16:25 ,记录控件Tab跳转方向
                    if (event.srcElement.type == "radio") {
                        if (event.srcElement.offsetParent && event.srcElement.offsetParent.offsetParent
                        && event.srcElement.offsetParent.offsetParent.tagName == "TABLE"
                        && event.srcElement.offsetParent.offsetParent.className == ControlClass.RadioList) {
                            this.Jump2Control(event, event.srcElement.offsetParent.offsetParent, window.event.shiftKey);
                        } else {
                            $Event(window.event).stopPropagation();
                    $Event(window.event).preventDefault();
                        }
                    } else {
                        this.Jump2Control(event, event.srcElement, window.event.shiftKey);
                    }
                }
                break;
            case KeyCode.GridTab:
            case KeyCode.G_B:
            case KeyCode.g_s:
                if (window.event.keyCode != KeyCode.GridTab) {
                    if (!this._element.className.containsCssClass("toppanel") || !window.event.ctrlKey)
                        return;
                }
                var curCtnr = this.getParentContainer(window.event.srcElement);
                if (curCtnr == null)
                    return;
                if ((this.getExtraToolbar() && curCtnr.id == this.getExtraToolbar().id) || (this.getToolbar() && curCtnr.id == this.getToolbar().id)) {    //焦点在Toolbar或扩展 Toolbar 不能Ctrl+G跳转
                    return;
                }
                this.Jump2Container(event, window.event.shiftKey);
                if (window.event.keyCode == KeyCode.GridTab) {
                    $Event(window.event).stopPropagation();
                    $Event(window.event).preventDefault();
                }
                break;
            case 84: // Ctrl + T
                if (!this._element.className.containsCssClass("toppanel") || !window.event.ctrlKey)
                    return;
                var nextT = this.getFirstTabControl();
                if (nextT != null && nextT.control != null) {
                    nextT.control.SetFocus(nextT.control.tabGroup.TabCollection[nextT.control.get_TabIndex()].Page);
                }
                $Event(window.event).stopPropagation();
                $Event(window.event).preventDefault();
                break;
            case KeyCode.Zero:
            case 96:
                if (!this._element.className.containsCssClass("toppanel"))
                    return;
                if (window.event.altKey) {
                    this.ReDo2Toolbar(event);
                }
                if (window.event.ctrlKey) {
                    this.ReDo2DDRMenu(event);
                }
                break;
            case KeyCode.left:
            case KeyCode.right:
                if (window.event.altKey || window.event.ctrlKey) {
                    return;
                }
                if (!this.ExtraToolbar)
                    this.ExtraToolbar = this.getExtraToolbar();
                if (!this.ExtraToolbar)
                    return;
                if (this._element.id == this.ExtraToolbar.id) {
                    this.Jump2NextExtraButton(event, window.event.keyCode == KeyCode.left)
                }
                break;
        }

    },
    ReDo2Toolbar: function (event) {
        if (this.isInToolbar(event.srcElement)) {
            if (this._OldControl && !this.isInExtraToolbar(this._OldControl)) {
                try {
                    this._OldControl.focus();
                } catch (e) { }
                this._OldControl = null;
            } else {
                this.setContainerControlFocus(this.getTopPanel(this._element));
            }
        } else {
            this._OldControl = event.srcElement;
            this.Jump2Toolbar(event);
        }
    },
    ReDo2DDRMenu: function (event) {
        if (this.isInExtraToolbar(event.srcElement)) {
            if (this._OldControl2DDRMenu && !this.isInToolbar(this._OldControl2DDRMenu)) {
                try {
                    this._OldControl2DDRMenu.focus();
                } catch (ee) { }
                this._OldControl2DDRMenu = null;
            } else {
                this.setContainerControlFocus(this.getTopPanel(this._element));
            }
        } else {
            this._OldControl2DDRMenu = event.srcElement;
            this.Jump2ExtraToolbar(event);
        }
    },

    Jump2Control: function (curEvent, subElement, direction) {
        // var parentContainer = this.getParentContainer(subElement);
        // 为解决tab键失效的bug，重新写了一个方法
        // 目的：getParentContainer在很多地方都有用到，为了不影响其他代码，将其耦合性打破
        var parentContainer = this.getParentContainer2(subElement);
        if (!parentContainer) {
            if (subElement.className.containsCssClass(ControlClass.TopPanel))
                this.setContainerControlFocus(subElement, direction);
            else
                return;
        }
        if (window.event && window.event.keyCode == KeyCode.tab && parentContainer && parentContainer.className == ControlClass.Tree) {
            window.event.keyCode = KeyCode.GridTab;
            this.onkeyDown();
            return;
        }

        var subControls = this.getSubControls(parentContainer);
        var curControl = null;
        if (subControls.length > 0) {
            curControl = this.getNextControl(subElement, subControls, direction);
            if (curControl) { //找到下一个元素
                if (curControl.tagName == "DIV" || curControl.tagName == "FIELDSET") {    //容器，则为容器设置焦点
                    try {
                        this.getTopPanel(this._element).focus();
                    } catch (e) { }
                    if (!this.setContainerControlFocus(curControl, direction)) {  //如果设置焦点失败，则跳到下一元素
                        this.Jump2Control(curEvent, curControl, direction);
                    }
                } else {
                    if (curControl.tagName == "TABLE" && curControl.className == ControlClass.RadioList) {    //RadioList 控件
                        this.setRadioListControlFocus(curControl);
                    } else {
                        try {
                            curControl.focus();
                            curControl.select();
                        } catch (e) { }
                    }
                }
                if (curEvent) {
                    $Event(curEvent).stopPropagation();
                    $Event(curEvent).preventDefault();
                }
            } else {     //未在本级找到下一个元素
                this.Jump2Control(curEvent, parentContainer, direction);
            }
        }
    },

    //direction ,true back, false forward

    //取得tab跳转的下一控件
    getNextControl: function (subElement, subControls, direction) {
        var curControl;
        var _CurrentIndex = -1;
        var subETi = subElement.cusAttr('TI');
        if (subETi) {
            _CurrentIndex = parseInt(subETi);
        }

        if (direction) {
            if (subETi == this.getMinControl(subControls).cusAttr('TI')) {
                return null;
            } else {
                curControl = this.getCurrentPrevControlByIndex(_CurrentIndex, subControls);
            }
        } else {
            if (subETi == this.getMaxControl(subControls).cusAttr('TI')) {
                return null;
            } else {
                curControl = this.getCurrentNextControlByIndex(_CurrentIndex, subControls);
            }
        }
        return curControl;
    },
    //取得控件列表中，TI最大的控件
    getMaxControl: function (subControls) {
        var t = subControls[0];
        for (var i = 0, len = subControls.length; i < len; i++) {
            if (parseInt(t.cusAttr('TI')) < parseInt(subControls[i].cusAttr('TI'))) {
                t = subControls[i];
            }
        }
        return t;
    },
    //取得控件列表中，TI最小的控件
    getMinControl: function (subControls) {
        var t = subControls[0];
        for (var i = 0, len = subControls.length; i < len; i++) {
            if (parseInt(t.cusAttr('TI')) > parseInt(subControls[i].cusAttr('TI'))) {
                t = subControls[i];
            }
        }
        return t;
    },

    //在列表中取得控件的 prev控件 
    getCurrentPrevControlByIndex: function (index, subControls) {
        var _C = null;
        var _MinIndex = index;
        var _dec = -1;
        var flag = 0;
        for (var i = 0, len = subControls.length; i < len; i++) {
            var tmp = parseInt(_MinIndex) - parseInt(subControls[i].cusAttr('TI'));
            if (tmp > 0) {
                if (flag == 0) {
                    _dec = tmp;
                    _C = subControls[i];
                    flag++;
                }
                if (_dec > tmp) {
                    _dec = tmp;
                    _C = subControls[i];
                }
            }
        }
        if (!_C) {
            _C = this.getMaxControl(subControls);
        }
        return _C;
    },

    //在列表中取得控件的 next控件 
    getCurrentNextControlByIndex: function (index, subControls) {
        var _C = null;
        var _MinIndex = index;
        var _dec = -1;
        var flag = 0;
        for (var i = 0, len = subControls.length; i < len; i++) {
            var tmp = parseInt(subControls[i].cusAttr('TI')) - parseInt(_MinIndex);
            if (tmp > 0) {
                if (flag == 0) {
                    _dec = tmp;
                    _C = subControls[i];
                    flag++;
                }
                if (_dec >= tmp) {
                    _dec = tmp;
                    _C = subControls[i];
                }
            }
        }

        if (!_C) {
            _C = this.getMinControl(subControls);
        }
        return _C;
    },

    //找到指定容器的所有子控件,录入控件必须是可用状态（不包括孙子及重孙控件）
    getSubControls: function (parentContainer) {
        var Controls = new Array();
        var inputs = new Array(); ;
        var inputsTmp = new Array(); ;

        if (!parentContainer)
            return Controls;

        //条件控件tab顺序特殊处理 2008-12-29
        if (parentContainer.cusAttr('IsFilterControl') && parentContainer.cusAttr('IsFilterControl') == "true")
            return this.getFilterSubControls(parentContainer);

        if (parentContainer) {
            inputs = parentContainer.getElementsByTagName("input");
            if (inputs.length == 0) {
                inputs = parentContainer.getElementsByTagName("TEXTAREA");
            } else {
                var eleTmp = parentContainer.getElementsByTagName("TEXTAREA");
                if (eleTmp.length > 0) {
                    for (var i = 0; i < inputs.length; i++) {
                        inputsTmp[i] = inputs[i];
                    }
                    for (var i = 0; i < eleTmp.length; i++) {
                        inputsTmp.push(eleTmp[i]);
                    }
                }
            }
        }
        if (inputsTmp.length > 0) {
            inputs = inputsTmp;
        }
        if (inputs.length > 0) {
            var tagE = parentContainer;
            if (tagE.className == ControlClass.Wizard) {
                var curWizard = null;
                for (var i = 0; i < tagE.children.length; i++) {
                    if (tagE.children[i].style.display != "none")
                        curWizard = tagE.children[i];
                }
                if (curWizard) {
                    tagE = curWizard;
                } else {
                    return Controls;
                }
            }
            for (var i = 0, len = inputs.length; i < len; i++) {
                var input = inputs[i];
                if (input.type == "image") {
                    continue;
                }
                try {
                    if ((input.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement != tagE) || (!input.cusAttr('TI'))) {
                        if (input.type == "radio") {
                            if (input.offsetParent && input.offsetParent.offsetParent
                                && input.offsetParent.offsetParent.tagName == "TABLE"
                                && input.offsetParent.offsetParent.className == ControlClass.RadioList) { //如果是radiolist 跳过
                                continue;
                            }
                            if (this.getParentContainer(input).id != parentContainer.id) {    //如果radio控件不是其子控件，跳过
                                continue;
                            }
                        } else {
                            continue;
                        }
                    }
                } catch (e) {
                    continue;
                }

                if (input.style.display != "none" && input.type != "hidden" && input.type != "button" && (!(input.disabled))) {
                    //chorme 只有inline元素才支持 getClientRects
                    // var retcs=input.getClientRects();
                    // if (retcs.length>0 &&　retcs[0].left != retcs[0].right) {
                    //     Controls.push(input);
                    // }
                    Controls.push(input);
                }
            }
        }

        var tabs = parentContainer.getElementsByTagName("table");
        for (var i = 0, len = tabs.length; i < len; i++) {
            var tab = tabs[i];
            if (tab.cusAttr('TI') && tab.className && tab.className == ControlClass.RadioList) {
                var tmpContainer1 = this.getParentContainer(tab);
                if (tmpContainer1 && tmpContainer1.id && tmpContainer1.id == parentContainer.id) {
                    Controls.push(tab);
                }
            }
        }
        var childrenContainers = this.getChildrenContainersAsControl(parentContainer);
        if (childrenContainers) {
            for (var i = 0, len = childrenContainers.length; i < len; i++) {
                Controls.push(childrenContainers[i]);
            }
        }

        return Controls;
    },

    //找到条件控件容器中的所有子控件
    getFilterSubControls: function (parentContainer) {
        var Controls = new Array();
        var inputs = new Array(); ;
        var inputsTmp = new Array(); ;

        if (!parentContainer)
            return Controls;

        if (parentContainer) {
            inputs = parentContainer.getElementsByTagName("input");
            if (inputs.length == 0) {
                inputs = parentContainer.getElementsByTagName("TEXTAREA");
            } else {
                var eleTmp = parentContainer.getElementsByTagName("TEXTAREA");
                if (eleTmp.length > 0) {
                    for (var i = 0; i < inputs.length; i++) {
                        inputsTmp[i] = inputs[i];
                    }
                    for (var i = 0; i < eleTmp.length; i++) {
                        inputsTmp.push(eleTmp[i]);
                    }
                }
            }
        }
        if (inputsTmp.length > 0) {
            inputs = inputsTmp;
        }

        if (inputs.length > 0) {
            var tagE = parentContainer;

            for (var i = 0, len = inputs.length; i < len; i++) {
                var input = inputs[i];
                if (input.type == "image") {
                    continue;
                }
                if (!input.cusAttr('TI')) continue;

                if (input.style.display != "none" && input.type != "hidden" && input.type != "button" && (!(input.disabled))) {
                    //if(input.getClientRects()[0].left != input.getClientRects()[0].right){
                    Controls.push(input);
                    //}
                }
            }
        }

        var tabs = parentContainer.getElementsByTagName("table");
        for (var i = 0, len = tabs.length; i < len; i++) {
            var tab = tabs[i];
            if (tab.cusAttr('TI') && tab.className && tab.className == ControlClass.RadioList) {
                var tmpContainer1 = this.getParentContainer(tab);
                if (tmpContainer1 && tmpContainer1.id && tmpContainer1.id == parentContainer.id) {
                    Controls.push(tab);
                }
            }
        }
        var childrenContainers = this.getChildrenContainersAsControl(parentContainer);
        if (childrenContainers) {
            for (var i = 0, len = childrenContainers.length; i < len; i++) {
                Controls.push(childrenContainers[i]);
            }
        }

        return Controls;
    },

    setRadioListControlFocus: function (control) {
        if (control.tagName == "TABLE" && control.className == ControlClass.RadioList) {
            if (control.disabled)
                return false;
            for (var i = 0; i < control.rows.length; i++) {
                if (i == 0) {
                    control.rows[i].cells[0].children[0].focus();
                } else {
                    if (control.rows[i].cells[0].children[0].checked) {
                        control.rows[i].cells[0].children[0].focus();
                    }
                }
            }
            // 横向
            if (control.rows.length == 1) {
                for (var i = 0; i < control.rows[0].cells.length; i++) {
                    if (control.rows[0].cells[i].children[0].checked) {
                        control.rows[0].cells[i].children[0].focus();
                    }
                }
            }

            return true;
        }
    },

    GetGridFirstViewColumn: function (grid) {
        var resultIndex = 1;
        while (resultIndex < grid.m_columns) {
            if (!grid.MainCols[resultIndex]) { break; }
            if (grid.MainCols[resultIndex].style.display == "none") {
                resultIndex = resultIndex + 1;
            }
            else {
                break;
            }
        }
        if (resultIndex == grid.m_columns) resultIndex = startIndex - 1;
        return resultIndex;
    },

    setGridControlFocus: function (control) {
        if (control.cusAttr('GridReadyState') == "complete") {
            try {
                BaseTop.__UFCurrentFocusControl = "Grid";
                control.focus();
                if (control.control.m_currentRowIndex == 0 && control.control.m_currentColumnIndex == 0) {
                    control.control.m_currentColumnIndex = this.GetGridFirstViewColumn(control.control);
                }
                control.control.Focus(true);
            } catch (e) { }
        } else {
            window.setTimeout(function () { _this.setGridControlFocus(control); }, 200);
        }
    },

    //设置当前容器的焦点，设置成功返回true,设置失败 返回 false
    setContainerControlFocus: function (curControl, direction) {
        BaseTop.NextCurrentContainer = null;
        BaseTop.NextCurrentContainerDirection = null;
        //==============
        var hcc = this._ncc;
        if (hcc && hcc.value)
            hcc.value = "";
        //==============
        if (!curControl)
            return false;
        if (curControl.isDisabled)
            return false;
        var className = curControl.className;
        if (typeof className != "string")
            return false;

        if (className.indexOf(ControlClass.Tree) > -1) {
            if (!window.document.getElementById(curControl.id.substring(0, curControl.id.length - 1))) {
                return false;
            } else {
                window.document.getElementById(curControl.id.substring(0, curControl.id.length - 1)).focus();
                return true;
            }
        }
        else if (className.indexOf(ControlClass.Grid) > -1) {
            control = curControl;
            try {
                control.focus();
            } catch (e) { }
            this.setGridControlFocus(control);
            if (event) {
                $Event(event).stopPropagation();
                    $Event(event).preventDefault();
            }
            return true;
        }

        else if (
        className.indexOf(ControlClass.TabPage) > -1 ||
        className.indexOf(ControlClass.Wizard) > -1 ||
        className.indexOf(ControlClass.Panel) > -1 ||
        className.indexOf(ControlClass.TopPanel) > -1 ||
        className == ""
              ) {



            //            case ControlClass.TabPage:    
            //            case ControlClass.Wizard:                                
            //            case ControlClass.Panel:
            //            case ControlClass.TopPanel:
            //            case ""
            if (curControl.className == "" && curControl.tagName != "FIELDSET")
                return;
            if (curControl.className.containsCssClass(ControlClass.TabPage)) {
                BaseTop.__UFCurrentFocusControl = curControl.id;
                if (_ClientCallBackManager && _ClientCallBackManager.Runing)   //如果在Callback期间，不处理
                    return false;
                var control;
                var nTabIndex = -1;
                if (curControl.parentElement == null) {
                    control = document.getElementById(curControl.id).parentElement.parentElement;
                } else {
                    control = curControl.parentElement.parentElement;
                }
                var curIndex = 0;
                control = control.control;
                if (!control)
                    return false;
                nTabIndex = control.get_TabIndex();
                for (var i = 0; i < control.getTab().TabCollection.length; i++) {
                    if (control.getTab().TabCollection[i].Page.id == curControl.id) {
                        curIndex = i;
                        break;
                    }
                }
                //如果该页签隐藏或不可用，则不进行跳转
                if (control.IsTabPageHidden(curIndex) || control.IsTabPageDisabled(curIndex))
                    return false;
                if (nTabIndex != curIndex) {
                    BaseTop.NextCurrentContainer = curControl;    //设置当前焦点控件
                    BaseTop.NextCurrentContainerDirection = direction;    //设置当前焦点控件方向
                    this.SetNextCurrentContainerValue();
                    control.SetTabIndex(curIndex, direction);
                    if (control.get_CallPostBack() && control.get_CallPostBack().length > 0) {
                        return true;
                    }
                }
            }

            if (curControl.className == ControlClass.Wizard) {
                var curWizard = null;
                for (var i = 0; i < curControl.children.length; i++) {
                    if (curControl.children[i].style.display != "none")
                        curWizard = curControl.children[i];
                }
                if (curWizard) {
                    curControl = curWizard;
                } else {
                    return false;
                }
            }
            try {
                if (!curControl.className.containsCssClass("toppanel")) {
                    curControl.focus();
                    curControl.select();
                }
            } catch (e) { }
            var Controls = this.getSubControls(curControl);
            if (Controls.length > 0) {
                var ct;
                if (direction) {
                    ct = this.getMaxControl(Controls);
                } else {
                    ct = this.getMinControl(Controls);
                }
                if (ct.tagName == "DIV" || ct.tagName == "FIELDSET") {     //如果是容器，继续
                    return this.setContainerControlFocus(ct, direction);
                } else if (ct.tagName == "TABLE" && ct.className == ControlClass.RadioList) {    //RadioList 控件
                    return this.setRadioListControlFocus(ct);
                } else {
                    window.setTimeout(function () { try { ct.focus(); ct.select(); } catch (e) { } }, 50);
                    if (event) {
                        $Event(event).stopPropagation();
                        $Event(event).preventDefault();
                    }
                    return true;
                }
            } else {
                return false;
            }
        }

        else {
            try {
                curControl.children[0].focus();
                curControl.children[0].SetFocus();
                //top.__UFCurrentFocusControl = curControl.children[0].id;
                var atmp = curControl;
                if (atmp.id == "gg"
			        || (atmp.tagName == "TD" && atmp.className.split(" ")[0] == "tbc")
			        || (atmp.offsetParent.tagName == "TD" && atmp.offsetParent.className.split(" ")[0] == "tbc")) {
                } else {
                    BaseTop.__UFCurrentFocusControl = curControl.children[0].id;
                }

                BaseTop.NextCurrentContainer = curControl;    //设置当前焦点控件
                BaseTop.NextCurrentContainerDirection = direction;    //设置当前焦点控件
                this.SetNextCurrentContainerValue();
                return true;
            }
            catch (ee) {
                return false;
            }
        }

    },

    //取得当前控件的父容器
    getParentContainer: function (curElement) {
        if (curElement.parentContainer)
            return curElement.parentContainer;

        if (curElement.tagName == "INPUT" || curElement.className == ControlClass.TextArea)
            curElement = curElement.parentElement;
        if (!curElement) return null;

        var curParentElement = curElement.parentElement;
        if (curParentElement) {
            //add for FIELDSET as Container ______start
            if (curParentElement.tagName == "FIELDSET") {
                curElement.parentContainer = curParentElement;
                return curParentElement;
            }
            //add for FIELDSET as Container ______end
            if (curParentElement.className) {
                for (var i = 0, len = ContainerAsControlTag.length; i < len; i++) {
                    //if(ContainerAsControlTag[i] == curParentElement.className){
                    if (curParentElement.className.containsCssClass(ContainerAsControlTag[i])) {
                        curElement.parentContainer = curParentElement;
                        return curParentElement;
                    }
                }
            }
            return this.getParentContainer(curParentElement);
        } else {
            return null;
        }
    },

    //抓取当前容器下的容器控件
    getChildrenContainersAsControl: function (parentContainer) {
        var Controls = new Array();
        if (!parentContainer)
            return null;

        var divs = parentContainer.getElementsByTagName("div");

        for (var i = 0, len = divs.length; i < len; i++) {
            var divElement = divs[i];
            if (!divElement || !divElement.cusAttr('TI') || divElement.isDisabled) {
                continue;
            }
            var curCssName = divElement.className;
            if (curCssName) {
                for (var j = 0, jlen = ContainerAsControlTag.length; j < jlen; j++) {
                    //if(ContainerAsControlTag[j]==curCssName){  
                    if (curCssName.containsCssClass(ContainerAsControlTag[j])) {
                        if ((curCssName == ControlClass.Tree || $(divElement).hasClass(ControlClass.Grid)) && divElement.cusAttr('TI') && this.isChildControl(divElement, parentContainer)) {    //Grid和Tree算录入控件，直接入围Controls列表
                            Controls.push(divElement);
                            continue;
                        }
                        if ((!divElement.cusAttr('TI'))        //无排序
                           || !this.isChildControl(divElement, parentContainer)  //不是孩子节点
                           || (divElement.style.display == 'none' && !divElement.className.containsCssClass(ControlClass.TabPage))   //不可见且不是TabPage
                           || (!this.hasChildControls(divElement) && !divElement.className.containsCssClass(ControlClass.TabPage))  //没有子控件 且不是TabPage
                           || divElement.disabled           //add at 2007-9-25 ,disabled的容器，排除
                           )
                            continue;
                        Controls.push(divElement);
                        break;
                    }
                }
            }
        }
        //add for FIELDSET as Container ______start
        var fieldSets = parentContainer.getElementsByTagName("FIELDSET");
        for (var j = 0; j < fieldSets.length; j++) {
            if (fieldSets[j].cusAttr('TI') && this.hasChildControls(fieldSets[j]) && this.isChildControl(fieldSets[j], parentContainer))
                Controls.push(fieldSets[j]);
        }
        //add for FIELDSET as Container _____end
        return Controls;
    },

      //取得当前控件的父容器2
      getParentContainer2: function (curElement) {
        // 解决部分单据类型的页面tab键失效问题
        // 原因：table标签的curElement.parentContainer属性为undefined，导致dom继续往上走了一层，相当于把节点的筛选区域扩大了，导致后续算法出错
        // 解决：出现这种情况，判断一下curElement是否是table的上一级节点，如果是直接返回curElement，而不是curElement.parentContainer，这样返回的父级元素仍然是table的上一级
        // （后续逻辑getParentContainer方法一样）目的：getParentContainer在很多地方都有用到，为了不影响其他代码，将其耦合性打破
        if (curElement.parentContainer && curElement.parentContainer.getAttribute("name") == "u$M$p0$WizardControl1")
        {
            var cRes;
            curElement.childNodes.forEach(function(element) {
                if (element.nodeName == 'TABLE') {
                    cRes = element;
                }
            })
            if (cRes) return curElement;
        }
        // 21.07.26之前的逻辑
        if (curElement.parentContainer)
            return curElement.parentContainer;

        if (curElement.tagName == "INPUT" || curElement.className == ControlClass.TextArea)
            curElement = curElement.parentElement;
        if (!curElement) return null;

        var curParentElement = curElement.parentElement;
        if (curParentElement) {
            //add for FIELDSET as Container ______start
            if (curParentElement.tagName == "FIELDSET") {
                curElement.parentContainer = curParentElement;
                return curParentElement;
            }
            //add for FIELDSET as Container ______end
            if (curParentElement.className) {
                for (var i = 0, len = ContainerAsControlTag.length; i < len; i++) {
                    //if(ContainerAsControlTag[i] == curParentElement.className){
                    if (curParentElement.className.containsCssClass(ContainerAsControlTag[i])) {
                        curElement.parentContainer = curParentElement;
                        return curParentElement;
                    }
                }
            }
            return this.getParentContainer2(curParentElement);
        } else {
            return null;
        }
    },

    //是否孩子控件，subControl是否是Container的孩子控件
    isChildControl: function (subControl, Container) {
        var p = this.getParentContainer(subControl);

        if (p.className == ControlClass.Wizard) {
            var curWizard = null;
            for (var i = 0; i < p.children.length; i++) {
                if (p.children[i].style.display != "none")
                    curWizard = p.children[i];
            }
        }

        if (p && p.id) {
            if (p.id == Container.id || ((p.className == ControlClass.Wizard) && curWizard && curWizard.id == Container.id)) {
                return true;
            }
        }
        return false;
    },

    //控件是否存在子控件
    hasChildControls: function (Container) {
        var c = this.getSubControls(Container);
        if (c && c.length > 0)
            return true;
        else
            return false;
    },

    //=======================================================================
    // 控件tab切换 结束
    //-----------------------------------------------------------------------
    // 容器 Ctrl + G 切换处理 开始
    //=======================================================================

    //direction ,true back, false forward
    Jump2Container: function (curEvent, direction) {
        var Containers = this.getContainers();
        if (!Containers || Containers.length == 0) return;
        var curContainer = this.getCurContainer(curEvent.srcElement, Containers);
        if (!curContainer) {
            if (direction)
                this.setContainerControlFocus(Containers[Containers.length - 1], false);
            else
                this.setContainerControlFocus(Containers[0], direction);
            return;
        }

        var _ContainerIndex = parseInt(curContainer.cusAttr('TI'));
        var subControls = Containers;
        var nextContainer = null;
        if (direction) {
            nextContainer = this.getCurrentPrevControlByIndex(_ContainerIndex, subControls);
            if (!nextContainer)
                nextContainer = Containers[Containers.length - 1];
        } else {
            nextContainer = this.getCurrentNextControlByIndex(_ContainerIndex, subControls);
            if (!nextContainer)
                nextContainer = Containers[0];
        }
        if (!nextContainer) return;
        this.setContainerControlFocus(nextContainer, false);
    },

    getCurContainer: function (curEle, Containers) {
        if (!curEle) return;
        for (var i = 0, len = Containers.length; i < len; i++) {
            if (curEle.id == Containers[i].id) {
                return curEle;
            }
        }
        return this.getCurContainer(this.getParentContainer(curEle), Containers);
    },

    isAContainsB: function (ContainerA, ContainerB) {
        if (!ContainerA || !ContainerB)
            return false;
        var divs = ContainerA.getElementsByTagName("div");
        for (var i = 0, len = divs.length; i < len; i++) {
            if (ContainerB.id == divs[i].id) {
                return true;
            }
        }
        return false;
    },

    //取得当前触发源的父TabPage控件，如果不是在TabPage中，返回null
    getCurrentTabPage: function () {
        if (window.event && window.event.srcElement) {    //有触发源
            var ele = window.event.srcElement;
            var p = ele;
            for (; ; ) {
                if (p.className && p.className.containsCssClass(ControlClass.TabPage)) {
                    return p;
                }
                if (p.className && p.className.containsCssClass(ControlClass.TopPanel)) {
                    return null;
                }
                if (p.parentElement) {
                    p = p.parentElement;
                } else {
                    return null;
                }
            }
        }
    },
    getContainers: function (outerContainer) {
        var topPanel = (outerContainer) ? outerContainer : this.getTopPanel(this._element);
        if (!topPanel) return;
        var Containers = new Array();
        var ReturnList = new Array();
        var divs = topPanel.getElementsByTagName("div");
        for (var i = 0; i < divs.length; i++) {
            if (divs[i].cusAttr('TI') && (divs[i].className.containsCssClass(ControlClass.Panel) || divs[i].className.containsCssClass(ControlClass.TabPage) || $(divs[i]).hasClass(ControlClass.Grid) || divs[i].className == ControlClass.Tree)) {
                if (divs[i].disabled)    //如果控件是disabled状态
                    continue;
                if (divs[i].className == ControlClass.Tree && window.tlrkTreeViews[divs[i].id.substring(0, divs[i].id.length - 1)].Nodes.length == 0) //如果树控件没有节点
                    continue;
                if ($(divs[i]).hasClass(ControlClass.Grid) && divs[i].control && divs[i].control.m_rows != null && divs[i].control.m_rows == 0)  //如果Grid控件没有行
                    continue;
                if (($(divs[i]).hasClass(ControlClass.Grid) || divs[i].className == ControlClass.Tree) && !this.isControlInView(divs[i])) //树控件或Grid 如果其外面的容器如果 display 为none 则跳过
                    continue;
                Containers.push(divs[i]);
            }
        }
        divs = Containers;
        Containers = null;

        //去除之前可能留下来的IsRemove标记 2008-1-22
        for (var i = 0; i < divs.length; i++) {
            divs[i].IsRemove = null;
        }
        //删除有包含关系的被包含容器，不删除TabPage
        for (var j = 0; j < divs.length; j++) {
            for (var k = j + 1; k < divs.length; k++) {
                if (this.isAContainsB(divs[j], divs[k])) {
                    //如果是网格控件或树控件，且不在TabPage中，且他的父容器不止他一个元素，则应认为是容器
                    if (($(divs[k]).hasClass(ControlClass.Grid) || divs[k].className == ControlClass.Tree) && !this.isInTabPage(divs[k]) && !this.isChildrenIsOneControl(this.getParentContainer(divs[k]))) {
                        if (divs[k].IsRemove) {
                            divs[k].IsRemove = null;
                        }
                        continue;
                    }
                    if (divs[k].className.containsCssClass(ControlClass.TabPage)) {
                        //continue;
                        if (this.getParentContainer(divs[k]).id == divs[j].id) {
                            if (this.IsChildrenAllTabPage(divs[j])) {
                                divs[j].IsRemove = "1";
                            } else {
                                continue;
                            }
                        } else {
                            continue;
                        }
                    } else {
                        divs[k].IsRemove = "1";
                    }
                }
                else if (this.isAContainsB(divs[k], divs[j])) {
                    //如果是网格控件或树控件，且不在TabPage中，且他的父容器不止他一个元素，则应认为是容器
                    if (($(divs[j]).hasClass(ControlClass.Grid) || divs[j].className == ControlClass.Tree) && !this.isInTabPage(divs[j]) && !this.isChildrenIsOneControl(this.getParentContainer(divs[j]))) {
                        if (divs[j].IsRemove) {
                            divs[j].IsRemove = null;
                        }
                        continue;
                    }
                    if (divs[j].className.containsCssClass(ControlClass.TabPage)) {
                        if (this.getParentContainer(divs[j]).id == divs[k].id) {
                            if (this.IsChildrenAllTabPage(divs[k])) {
                                divs[k].IsRemove = "1";
                            } else {
                                continue;
                            }
                        } else {
                            continue;
                        }
                    } else {
                        divs[j].IsRemove = "1";
                    }
                }
            }
        }
        //删除没有子控件的容器,不删除TabPage,Grid和Tree
        for (var v = 0; v < divs.length; v++) {
            if (divs[v].className.containsCssClass(ControlClass.TabPage) || $(divs[v]).hasClass(ControlClass.Grid) || divs[v].className == ControlClass.Tree) {
                continue;
            }
            var controls = this.getSubControls(divs[v]);
            if (!controls || controls.length == 0) {
                divs[v].IsRemove = "1";
            }

        }
        //主要解决“查询方案”的焦点逆转问题。
        //对于TabPage中含有子控件（即是容器又是控件的Grid，Tree）时，反向切换时，如果当前容器是子容器，
        //则不把TabPage放入容器列表。保证容器能够正常反向循环。
        if (window.event && window.event.shiftKey) {
            for (var v = 0; v < divs.length; v++) {
                if (divs[v].className.containsCssClass(ControlClass.TabPage) && divs[v].style.display != "none"
                    && divs[v].parentElement.firstChild.id != divs[v].id && this.getCurrentTabPage()
                    && divs[v].id == this.getCurrentTabPage().id && divs[v].id != this.getParentContainer(window.event.srcElement).id
                    && !this.getParentContainer(window.event.srcElement).className.containsCssClass(ControlClass.Panel)
                   ) {
                    divs[v].IsRemove = "1";
                }
            }
        }
        for (var w = 0; w < divs.length; w++) {
            if (!divs[w].IsRemove)
                ReturnList.push(divs[w]);
        }
        divs.splice(0, divs.length);
        if (ReturnList.length == 1 && (!$(ReturnList[0]).hasClass(ControlClass.Grid) && ReturnList[0].className != ControlClass.Tree))
            return this.getContainers(ReturnList[0]);
        return ReturnList;
    },

    IsChildrenAllTabPage: function (Container) {
        var controls = this.getSubControls(Container);
        for (var i = 0; i < controls.length; i++) {
            if (!controls[i].className.containsCssClass(ControlClass.TabPage)) {
                return false;
            }
        }
        return true;
    },

    getTopPanel: function (ele) {

        if (this._topPanel != null)
            return this._topPanel;
        else {
            if (!ele)
                return null;
            if (ele.className.containsCssClass(ControlClass.TopPanel)) {
                this._topPanel = ele;
                return ele;
            } else {
                return this.getTopPanel(this.getParentContainer(ele));
            }
        }
    },

    isInTabPage: function (ele) {
        if (!ele) return false;
        if (ele.className.containsCssClass(ControlClass.TopPanel)) {
            return false;
        }
        var parEle = this.getParentContainer(ele);
        if (!parEle) {
            if (parEle.className.containsCssClass(ControlClass.TabPage)) {
                return true;
            } else {
                return this.isInTabPage(parEle);
            }
        } else {
            return false;
        }
    },

    isChildrenIsOneControl: function (Container) {
        var controls = this.getSubControls(Container);
        if (controls.length > 1) {
            return false;
        } else {
            return true;
        }
    },

    isControlInView: function (control) {
        var isInView = true;
        if (!control.className.containsCssClass(ControlClass.TopPanel))
            var parentEle = control.parentElement;

        for (; parentEle && !parentEle.className.containsCssClass(ControlClass.TopPanel); ) {
            if (parentEle.style.display == "none" || parentEle.style.visibility == "hidden") {
                isInView = false;
                break;
            }
            parentEle = parentEle.parentElement;
        }
        return isInView;
    },
    //=======================================================================
    // 容器 Ctrl + G 切换处理 结束
    //=======================================================================
    //跳到扩展工具条

    Jump2ExtraToolbar: function (event) {
        if (!this.ExtraToolbar)
            this.ExtraToolbar = this.getExtraToolbar();
        if (!this.ExtraToolbar)
            return;
        var Controls = this.getButtonsFromExtraToolbar(this.ExtraToolbar);
        if (!Controls || Controls.length == 0) {
            return;
        } else {
            var curControl = this.getMinControl(Controls);
            if (curControl) {
                try {
                    curControl.focus();
                } catch (e) { }
            }
        }
    },

    Jump2NextExtraButton: function (curEvent, direction) {
        var Controls = this.getButtonsFromExtraToolbar(this.ExtraToolbar);
        if (!Controls || Controls.length == 0)
            return;
        var curControl = null;
        if (!curEvent.srcElement.cusAttr('TI')) {
            if (direction) {
                curControl = this.getMaxControl(Controls);
            } else {
                curControl = this.getMinControl(Controls);
            }
        }
        else {
            curControl = this.getNextControl(curEvent.srcElement, Controls, direction);
            if (!curControl) {
                if (direction) {
                    curControl = this.getMaxControl(Controls);
                } else {
                    curControl = this.getMinControl(Controls);
                }
            }
        }
        try {
            curControl.focus();
        } catch (e) { }
    },

    //取得扩展工具条的panel， topPanel的最后一个子panel

    getExtraToolbar: function () {
        var topPanel = this.getTopPanel(this._element);
        if (!topPanel)
            return null;
        if (topPanel.control && topPanel.control._ExtraToolbar) {
            return topPanel.control._ExtraToolbar;
        }
        var ufExtraToolbar = null;
        var divs = topPanel.getElementsByTagName("div");

        for (var i = divs.length - 1; i >= 0; i--) {
            var divElement = divs[i];
            if (divElement.cusAttr('FunctionBar') && divElement.cusAttr('FunctionBar') == "FunctionBar") {
                ufExtraToolbar = divElement;
                break;
            }
        }
        if (topPanel.control) {
            topPanel.control._ExtraToolbar = ufExtraToolbar;
        }
        return ufExtraToolbar;
    },

    getButtonsFromExtraToolbar: function (ufExtraToolbar) {
        var ReturnButtons = new Array();
        if (!ufExtraToolbar)
            return ReturnButtons;
        var btns = ufExtraToolbar.getElementsByTagName("BUTTON");
        var inputs = ufExtraToolbar.getElementsByTagName("INPUT");
        for (var i = 0; i < btns.length; i++) {
            if (!btns[i] || !btns[i].cusAttr('TI') || btns[i].style.display == "none" || btns[i].disabled || btns[i].cusAttr('disabled') || btns[i].isDisabled) {
                continue;
            } else {
                ReturnButtons.push(btns[i]);
            }
        }
        for (var i = 0; i < inputs.length; i++) {
            if (!inputs[i] || !inputs[i].cusAttr('TI') || inputs[i].style.display == "none" || inputs[i].disabled || inputs[i].cusAttr('disabled') || inputs[i].isDisabled || inputs[i].parentElement.tagName != "TD" || inputs[i].parentElement.className != "DropDownBtn_Center") {
                if (inputs[i] && inputs[i].cusAttr('TI') && inputs[i].className == "textbox") {  //用于特殊处理查询方案DropDownList
                    ReturnButtons.push(inputs[i]);
                }
                continue;
            } else {
                ReturnButtons.push(inputs[i]);
            }
        }
        return ReturnButtons;
    },

    isInExtraToolbar: function (curEle) {
        var tmpExtraToolbar = this.getExtraToolbar();
        var tmpParC = this.getParentContainer(curEle);
        if (tmpExtraToolbar && tmpParC && tmpExtraToolbar.id == tmpParC.id) {
            return true;
        } else {
            return false;
        }
    },

    Jump2Toolbar: function (curEvent) {
        var tbElement = this.getToolbar(curEvent);
        if (tbElement && tbElement.control) {
            for (var i = 0; i < tbElement.control.controls.length; i++) {
                if (!tbElement.control.controls[i].isDisabled && tbElement.control.controls[i].style.display != "none") {
                    tbElement.control.controls[i].focus();
                    break;
                }
            }
            $Event(curEvent).stopPropagation()
            $Event(curEvent).preventDefault();
        }
    },

    getToolbar: function () {
        var topPanel = this.getTopPanel(this._element);
        if (!topPanel)
            return null;
        if (topPanel.control && topPanel.control._Toolbar) {
            return topPanel.control._Toolbar;
        }
        var tbElement;
        var divs = this._element.getElementsByTagName("div");
        for (var i = 0, len = divs.length; i < len; i++) {
            var divElement = divs[i];
            if (divElement.className == ControlClass.ToolBar && divElement.style.display != "none") {
                tbElement = divElement;
                break;
            }
        }
        if (topPanel.control) {
            topPanel.control._Toolbar = tbElement;
        }
        return tbElement;
    },

    isInToolbar: function (curEle) {
        var isIn = false;
        if (!curEle) {
            return isIn;
        }
        for (; curEle && curEle.parentElement; ) {
            if (curEle.className && curEle.className == ControlClass.ToolBar) {
                isIn = true;
                break;
            }
            if (curEle.className && curEle.className.containsCssClass(ControlClass.TopPanel)) {
                break;
            }
            curEle = curEle.parentElement;
        }
        return isIn;
    },
    getFirstTabControl: function () {
        var divs = document.getElementsByTagName("DIV");
        var ts = [];
        for (var i = 0; i < divs.length; i++) {
            if (divs[i].className && divs[i].className.containsCssClass("TC tPn")) {
                return divs[i];
            }
        }
    }

}

UF.UI.Panel.registerClass('UF.UI.Panel', UF.UI.Control);

function ControlClass() { }
ControlClass.TextArea = "textarea";
ControlClass.TableCell = "tbc";
ControlClass.TabControl = "TC tPn";
ControlClass.TabPage = "TP";
ControlClass.Grid = "main_Span";
ControlClass.Panel = "ufpanel";
ControlClass.TopPanel = "toppanel";
ControlClass.ToolBar = "TB";
ControlClass.Wizard = "Wizard";
ControlClass.Tree = "TreeBorder";
ControlClass.RadioList = "ufRadioBoxList";
var ContainerTag = new Array(ControlClass.ToolBar, ControlClass.Panel, ControlClass.TabPage);
var ContainerAsControlTag = new Array(ControlClass.Grid, ControlClass.ToolBar,
                                       ControlClass.Panel, ControlClass.TopPanel,
                                       ControlClass.TabPage, ControlClass.Wizard, ControlClass.Tree);
;
// JScript source code
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');


// 弹性域 分 描述性弹性域 和 关键项弹性域
// 描述性弹性域 放在卡片的右下 ，不可以录入
// 关键性弹性域 同 普通控件，可以录入
UF.UI.FlexField = function (element) {

    UF.UI.FlexField.initializeBase(this, [element]);

    var _this = this;
    // TODO : (Step 1) Add your property variables here
    this._textbox;
    this._button;
    this._value;
    this._name;
    this._isKey = false;
    this._datas;
    this._xmlhttpRequest;
    this._inputValue;

    // Handler    
    this._textboxkeypressHandler;
    this._textboxkeydownHandler;
    this._textboxpasteHandler;
    this._textboxfocusHandler;
    this._textboxblurHandler;
    this._textboxchangeHandler;

    this._buttonclickHandler;
    this._btnmouseoverHandler;
    this._btnmouseoutHandler;

    //数据校验
    this.CallbackComplete = function () {
        if (_this._xmlhttpRequest)
            if (_this._xmlhttpRequest.readyState == 4) {

                //返回数据包含在responseText内容的<ReferenceReturns>和</ReferenceReturns>之间
                //如果数据有多行，则不返回数据，只返回关键字__MultiRows，弹出参照页面
                var result = "";
                var resText = _this._xmlhttpRequest.responseText;
                resText = unescapeHTML(resText);
                var index0 = resText.indexOf("<ReferenceReturns>");
                var index1 = resText.indexOf("</ReferenceReturns>") + "</ReferenceReturns>".length;
                if (index0 != -1 && index1 != -1) {
                    result = resText.substring(index0, index1);
                } else {
                    return;
                }

                if (result == "<ReferenceReturns>__MultiRows</ReferenceReturns>" || result == "<ReferenceReturns></ReferenceReturns>"
                || result == "<ReferenceReturns>false</ReferenceReturns>") {    //false 数据范围等校验失败
                    _this.ShowRefForm(_this._textbox.value);
                    return;
                }
                _this.OnContentChanged(result);
            }
    }

    //验证控件类型
    //1>多控件：	不处理，需要像原来那样弹出弹性域录入画面
    //2>单个参照：	返回给你参照的RefType，然后你弹出那个参照
    //3>单个字符串:	用户直接录入，点按钮不弹出任何画面
    //4>单个数字:	返回最小值和最大值给你，让用户只能录入最小值和最大值直接的整数，点按钮不弹出任何画面。

    this.CallbackComplete4GetControlType = function () {
        if (_this._xmlhttpRequest)
            if (_this._xmlhttpRequest.readyState == 4) {

                //返回数据包含在responseText内容的<ReferenceReturns>和</ReferenceReturns>之间
                //如果数据有多行，则不返回数据，只返回关键字__MultiRows，弹出参照页面
                var result = "";
                var resText = _this._xmlhttpRequest.responseText;
                resText = unescapeHTML(resText);
                var index0 = resText.indexOf("<ReferenceReturns>");
                var index1 = resText.indexOf("</ReferenceReturns>") + "</ReferenceReturns>".length;
                if (index0 != -1 && index1 != -1) {
                    result = resText.substring(index0, index1);
                    if (result == "<ReferenceReturns>__MultiRows</ReferenceReturns>")
                        _this.ShowRefForm(_this._textbox.value);
                    else
                        _this.CheckControlType(result);
                } else {
                    _this.ShowRefForm(_this._textbox.value);
                }
            }
    }
}

UF.UI.FlexField.prototype = {

    initialize: function () {
        // TODO: add your initalization code here
        UF.UI.FlexField.callBaseMethod(this, 'initialize');
        this._textbox = this._element.children[0];
        for (var i = this._element.children.length - 1; i > 0; i--) {
            if (this._element.children[i].id == this._element.id + "_button") {
                this._button = this._element.children[i];
            }
        }
        //this.btnmouseOverClass = "btn FlexBtnMO 4BorderMO";   //先写死，要用设置皮肤方式做
        //        this.btnmouseOutClass = this._button.className;

        if (this.btnClassName == null)
            this.btnClassName = FlexFieldTemplate.BtnClassName;
        if (this.btnClassName_Dis == null)
            this.btnClassName_Dis = FlexFieldTemplate.BtnClassName_Dis;

        this.InitControl();
        this.set_IsInitComlete(true); //gct20080917:设置初始化完成标志，用于脏数据保存提示
    },


    dispose: function () {
        // TODO: add your cleanup code here     
        if (this._textboxkeypressHandler) {
            $removeHandler(this._textbox, "keypress", this._textboxkeypressHandler);
            this._textboxkeypressHandler = null;
        }
        if (this._textboxkeydownHandler) {
            $removeHandler(this._textbox, "keydown", this._textboxkeydownHandler);
            this._textboxkeydownHandler = null;
        }
        if (this._textboxpasteHandler) {
            $removeHandler(this._textbox, "paste", this._textboxpasteHandler);
            this._textboxpasteHandler = null;
        }
        if (this._textboxfocusHandler) {
            $removeHandler(this._textbox, "focus", this._textboxfocusHandler);
            this._textboxfocusHandler = null;
        }
        if (this._textboxblurHandler) {
            $removeHandler(this._textbox, "blur", this._textboxblurHandler);
            this._textboxblurHandler = null;
        }
        if (this._textboxchangeHandler) {
            $removeHandler(this._textbox, "change", this._textboxchangeHandler);
            this._textboxchangeHandler = null;
        }

        if (this._buttonclickHandler) {
            $removeHandler(this._button, "click", this._buttonclickHandler);
            this._buttonclickHandler = null;
        }
        //        if (this._btnmouseoverHandler) {
        //            $removeHandler(this._button, "mouseover", this._btnmouseoverHandler);
        //            this._btnmouseoverHandler = null;
        //        }
        //        if (this._btnmouseoutHandler) {
        //            $removeHandler(this._button, "mouseout", this._btnmouseoutHandler);
        //            this._btnmouseoutHandler = null;
        //        }

        this._textbox = null;
        this._button = null;
        if (this._datas) {
            this._datas.dispose();
            this._datas = null;
        }
        this._xmlhttpRequest = null;

        UF.UI.FlexField.callBaseMethod(this, 'dispose');
    },
    InitControl: function () {
        // set required flag "*" display

        this.DisplayRequiredFlag(!this._element.cusAttr("disabled"));

        var isKeyFlex = this._element.cusAttr('IsKey');
        if (isKeyFlex) {
            if (isKeyFlex.toLowerCase() == "y") {  // 关键性弹性域
                this._textboxkeypressHandler = Function.createDelegate(this, this.CheckMarkChar);
                $addHandler(this._textbox, "keypress", this._textboxkeypressHandler);

                this._textboxkeydownHandler = Function.createDelegate(this, this.onKeyFlexKeyDown);
                $addHandler(this._textbox, "keydown", this._textboxkeydownHandler);

                this._textboxpasteHandler = Function.createDelegate(this, this.CheckMarkChars);
                $addHandler(this._textbox, "paste", this._textboxpasteHandler);

                this._textboxfocusHandler = Function.createDelegate(this, this.textboxFocus);
                $addHandler(this._textbox, "focus", this._textboxfocusHandler);
                this._textboxblurHandler = Function.createDelegate(this, this.textboxBlur);
                $addHandler(this._textbox, "blur", this._textboxblurHandler);

                this._textboxchangeHandler = Function.createDelegate(this, this.textboxOnchange);
                $addHandler(this._textbox, "change", this._textboxchangeHandler);

                if (this._element.cusAttr('Mask')) {
                    this._textbox.cusAttr('maskChars', MaskChar.Default + this._element.cusAttr('Mask'));
                } else {
                    this._textbox.cusAttr('maskChars', MaskChar.Default);
                }

                if (!this._element.cusAttr('Enabled'))//如果Enabled设置为false
                {
                    this._textbox.disabled = true;
                    this._button.disabled = true;
                    this._textbox.className = this.tbClassName_D;
                    this._button.className = this.btnClassName_Dis;
                    this._element.className = UIControlClass.getReadOnlyCss(this._element);
                    this._element.cusAttr('disabled', true);
                } else {
                    this._buttonclickHandler = Function.createDelegate(this, this.onButtonClicked);
                    $addHandler(this._button, "click", this._buttonclickHandler);
                }
                this._isKey = true;
                this.btnmouseOverClass = "btn FlexBtnMO"; //先写死，要用设置皮肤方式做
            } else {  // 描述性弹性域
                if (this._textbox) {
                    this._textbox.style.width = "1px";
                    this._element.style.width = "19px";
                }
                this.btnmouseOverClass = "btn FlexBtnMO 4BorderMO";   //先写死，要用设置皮肤方式做

                this._textboxfocusHandler = Function.createDelegate(this, this.textboxFocus);
                $addHandler(this._textbox, "focus", this._textboxfocusHandler);
                this._textboxblurHandler = Function.createDelegate(this, this.textboxBlur);
                $addHandler(this._textbox, "blur", this._textboxblurHandler);

                if (!this._element.cusAttr('Enabled'))//如果Enabled设置为false
                {
                    this._textbox.disabled = true;
                    this._button.disabled = true;
                    this._textbox.className = this.tbClassName_D;
                    this._button.className = this.btnClassName_Dis;
                    //                    this._element.className = UIControlClass.getReadOnlyCss(this._element);
                    this._element.cusAttr('disabled', true);
                }
                else {
                    this._buttonclickHandler = Function.createDelegate(this, this.onButtonClicked);
                    $addHandler(this._button, "click", this._buttonclickHandler);

                    this._textboxkeydownHandler = Function.createDelegate(this, this.onDescriptionFlexKeyDown);
                    $addHandler(this._textbox, "keydown", this._textboxkeydownHandler);
                    this._textbox.disabled = false;
                }
            }
        }

        if (this._element.cusAttr('ReadOnly')) {
            this.set_ReadOnly(true);
        }
        this._btnmouseoverHandler = Function.createDelegate(this, this.BtnMouseOver);
        $addHandler(this._button, "mouseover", this._btnmouseoverHandler);

        this._btnmouseoutHandler = Function.createDelegate(this, this.BtnMouseOut);
        $addHandler(this._button, "mouseout", this._btnmouseoutHandler);
    },

    /******************************************************* Property Code******************************************************/
    // TODO: (Step 2) Add your property accessors here   
    set_Enabled: function (isEnabled) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        isEnabled = ToBoolean(isEnabled);
        $(this._button).attr("disabled", !isEnabled);
        $(this._textbox).attr("disabled", !isEnabled);

        if (isEnabled) {
            //this._button.className='btn FlexBtn';
            this._textbox.className = this.tbClassName;
            this._button.className = this.btnClassName;
            //            this.btnmouseOutClass = this.btnClassName;
            if (!this._buttonclickHandler) {
                this._buttonclickHandler = Function.createDelegate(this, this.onButtonClicked);
                $addHandler(this._button, "click", this._buttonclickHandler);
            }
            if (!this._textboxkeydownHandler) {
                var isKeyFlex = this._element.cusAttr('IsKey');
                if (isKeyFlex && isKeyFlex.toLowerCase() == "y") { // 关键性弹性域
                    this._textboxkeydownHandler = Function.createDelegate(this, this.onKeyFlexKeyDown);
                    $addHandler(this._textbox, "keydown", this._textboxkeydownHandler);
                } else {
                    this._textboxkeydownHandler = Function.createDelegate(this, this.onDescriptionFlexKeyDown);
                    $addHandler(this._textbox, "keydown", this._textboxkeydownHandler);
                }
            }
            this._element.className = UIControlClass.getNotReadOnlyCss(this._element);
        } else {
            //this._button.className="FlexBtnDisable"; 
            this._textbox.className = this.tbClassName_D;
            this._button.className = this.btnClassName_Dis;
            //            this.btnmouseOutClass = this.btnClassName_Dis;
            if (this._buttonclickHandler) {
                $removeHandler(this._button, "click", this._buttonclickHandler);
                this._buttonclickHandler = null;
            }
            if (this._textboxkeydownHandler) {
                $removeHandler(this._textbox, "keydown", this._textboxkeydownHandler);
                this._textboxkeydownHandler = null;
            }
            this._element.className = UIControlClass.getReadOnlyCss(this._element);
        }
        //运行态下设置必输项符合是否显示
        this.DisplayRequiredFlag(isEnabled);
    },

    get_ReadOnly: function () {
        return this._element.cusAttr("readOnly");
    },

    set_ReadOnly: function (isReadOnly) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        if (!this.get_Enabled())//由于客户端区分ReadOnly和Enabled状态，所以在设置ReadOnly的时候，要优先考虑Enabled属性
            return;
        isReadOnly = ToBoolean(isReadOnly);
        this._element.cusAttr("readOnly", isReadOnly)

        if (!isReadOnly) {
            //this._button.className='btn FlexBtn';
            this._textbox.className = this.tbClassName;
            this._button.className = this.btnClassName;
            //            this.btnmouseOutClass = this.btnClassName;
            if (!this._buttonclickHandler) {
                this._buttonclickHandler = Function.createDelegate(this, this.onButtonClicked);
                $addHandler(this._button, "click", this._buttonclickHandler);
            }
            if (!this._textboxkeydownHandler) {
                var isKeyFlex = this._element.cusAttr('IsKey');
                if (isKeyFlex && isKeyFlex.toLowerCase() == "y") { // 关键性弹性域
                    this._textboxkeydownHandler = Function.createDelegate(this, this.onKeyFlexKeyDown);
                    $addHandler(this._textbox, "keydown", this._textboxkeydownHandler);
                } else {
                    this._textboxkeydownHandler = Function.createDelegate(this, this.onDescriptionFlexKeyDown);
                    $addHandler(this._textbox, "keydown", this._textboxkeydownHandler);
                }
            }
            this._element.className = UIControlClass.getNotReadOnlyCss(this._element);
        } else {
            //this._button.className="FlexBtnDisable";
            this._textbox.className = this.tbClassName_R;
            this._button.className = this.btnClassName_Dis;
            //            this.btnmouseOutClass = this.btnClassName_Dis;
            //this._button.className = this.btnClassName_Dis; 
            if (this._buttonclickHandler) {
                $removeHandler(this._button, "click", this._buttonclickHandler);
                this._buttonclickHandler = null;
            }
            if (this._textboxkeydownHandler) {
                $removeHandler(this._textbox, "keydown", this._textboxkeydownHandler);
                this._textboxkeydownHandler = null;
            }
            this._element.className = UIControlClass.getReadOnlyCss(this._element);
        }
        $(this._textbox).attr("readOnly", isReadOnly);
        $(this._button).attr("disabled", isReadOnly);
        this.set_HDValue("ReadOnly", isReadOnly.toString().toLowerCase());
    },
    // 控件的visible属性
    get_Visible: function () {
        return (this._element.style.visibility != "hidden");
    },

    set_Visible: function (isVisible) {
        this._element.style.visibility = isVisible ? "visible" : "hidden";
    },
    get_Type: function () {
        return ControlType.FlexField;
    },

    set_PartID: function (PartID) {
        this._element.cusAttr('PartID', PartID);
    },

    set_H: function (h) {
        this._element.cusAttr('H', h);
    },

    set_W: function (w) {
        this._element.cusAttr('W', w);
    },
    get_CustomInParams: function () {
        return this._element.cusAttr("CustomInParams")
    },

    set_CustomInParams: function (name, value) {
        var s;
        var params = this._element.cusAttr("CustomInParams") + "&";
        var re = new RegExp(name + "=.*?\&", "g"); // 创建正则表达式模式。
        var s = params.replace(re, name + "=" + value + "&");   // 交换单词。
        s = s.substr(0, s.length - 1);
        this._element.cusAttr('CustomInParams', s);
    },



    set_Value: function (value) {
        if (isMasks(value, this._textbox.cusAttr("maskChars"))) {
            return;
        }
        this._textbox.value = value;
        this._value = value;
    },
    get_Value: function () {
        return this._value;
    },

    set_Code: function (value) {
        if (isMasks(value, this._textbox.cusAttr("maskChars"))) {
            return;
        }
        this._textbox.value = value;
        this._value = value;
    },

    get_Code: function () {
        return this._value;
    },

    //    set_Name: function (value) {
    //        this._name = value;
    //    },
    get_Name: function () {
        return this._name;
    },

    //关键性弹性域 事件处理
    onKeyFlexKeyDown: function () {
        //if(ReadOnly) return;    
        switch (window.event.keyCode) {
            case KeyCode.F2:
                this.onButtonClicked();
                $Event(window.event).stopPropagation();
                break;
            case KeyCode.tab:       //for panel.js 取消屏蔽tab键
            case KeyCode.enter:
                //this.onInputReturn();
                //event.cancelBubble=true;
                break;
        }
    },

    //检查屏蔽字符集合
    CheckMarkChars: function () {
        var textBox = event.srcElement;
        var maskChars = textBox.cusAttr("maskChars");
        // var text = window.clipboardData.getData("text");
        var text;
        if(event){
            text = event.clipboardData.getData("text/plain");
        }else{
            text = window.clipboardData.getData("text");
        }
        if (isMasks(text, maskChars)) {
            $Event(window.event).preventDefault();
        }
    },

    //检查屏蔽字符
    CheckMarkChar: function () {
        var textBox = event.srcElement;
        var maskChars = textBox.cusAttr("maskChars");
        if (maskChars != "") {
            if (isMask(event.keyCode, maskChars)) {
                $Event(window.event).preventDefault();
            }
        }
    },

    //描述性弹性域 keydown 事件处理
    onDescriptionFlexKeyDown: function () {
        //if(ReadOnly) return;    
        switch (window.event.keyCode) {
            case KeyCode.F2:
                this.onButtonClicked();
                $Event(window.event).stopPropagation();
                break;
            case KeyCode.tab:
            case KeyCode.enter:
                this.onInputReturn();
                //event.cancelBubble=true;
                break;
            case KeyCode.G_B:       //for panel.js 取消对Ctrl + G的屏蔽
            case KeyCode.g_s:
            case KeyCode.left:      //for panel.js 取消对Ctrl + left,right 切换页签的屏蔽
            case KeyCode.right:
                if (window.event.ctrlKey) {
                    break;
                } else {
                    $Event(window.event).stopPropagation();
                    $Event(window.event).preventDefault();
                }
            case KeyCode.Zero:      //for panel.js 取消对 Ctrl + 0,alt + 0 的屏蔽
            case 96:
                if (window.event.altKey || window.event.ctrlKey) {
                    break;
                } else {
                    $Event(window.event).stopPropagation();
                    $Event(window.event).preventDefault();
                }
            default:
                $Event(window.event).stopPropagation();
                $Event(window.event).preventDefault();
        }
    },

    //按回车键，回调取数据
    onInputReturn: function () {
        if (this._textbox.value == this.Value) {
            return;
        }
        //输入空值后回车清空参照
        if (this._textbox.value == "") {
            this.OnContentChanged(null);
            return;
        }
        var inputValue = this._textbox.value;
        this.raiseBeforeLoadData(Sys.EventArgs.Empty);
        //CallWebService();
        this.CallXmlHttp(inputValue);
    },

    getXHR: function () {
        if (window.XMLHttpRequest) {
            return new XMLHttpRequest();
        } else {
            var names = ["Msxml", "Msxml2", "Msxml3", "Microsoft"];
            for (var i = 0; i < names.length; i++) {
                try {
                    var name = names[i] + ".XMLHTTP";
                    return new ActiveXObject(name);
                } catch (e) {
                }
            }
        }
        return null;
    },

    CallXmlHttp4GetControlType: function () {
        var url = this.GetUrl(this._element.cusAttr('PartID')) + "&CommandType=GetControlType";
        url = AppendPopupUrl(url);
        //if (!this._xmlhttpRequest) {
        //    if ($E(this.get_element()).document.children)
        //        this._xmlhttpRequest = new ActiveXObject("Msxml2.XMLHTTP");
        //    else if (XMLHttpRequest)
        //        this._xmlhttpRequest = new XMLHttpRequest();
        //}
        if (!this._xmlhttpRequest) {
            this._xmlhttpRequest = this.getXHR();
        }
        if (this._xmlhttpRequest) {
            this._xmlhttpRequest.open("GET", url, false);
            this._xmlhttpRequest.onreadystatechange = this.CallbackComplete4GetControlType;
            this._xmlhttpRequest.send("");
        }
    },



    CallXmlHttp: function (inputValue) {
        this._inputValue = inputValue;
        var url = this.GetUrl(this._element.cusAttr('PartID')) + "&CommandType=callback&InputCode=" + encodeURIComponent(inputValue);
        url = AppendPopupUrl(url);
        //if (!this._xmlhttpRequest) {
        //    if ($E(this.get_element()).document.children)
        //        this._xmlhttpRequest = new ActiveXObject("Msxml2.XMLHTTP");
        //    else if (XMLHttpRequest)
        //        this._xmlhttpRequest = new XMLHttpRequest();
        //}
        if (!this._xmlhttpRequest) {
            this._xmlhttpRequest = this.getXHR();
        }

        if (this._xmlhttpRequest) {
            this._xmlhttpRequest.open("GET", url, false);
            this._xmlhttpRequest.onreadystatechange = this.CallbackComplete;
            this._xmlhttpRequest.send("");
        }
    },

    //点击参照按钮,弹出参照页面
    onButtonClicked: function () {
        if (_ClientCallBackManager && _ClientCallBackManager.Runing)   //如果在Callback期间，不处理
            return false;

        this.raiseBeforeLoadData(Sys.EventArgs.Empty);
        var inputValue = null;
        if (this._isKey) {
            inputValue = this._textbox.value;
        }
        this.CallXmlHttp4GetControlType();
        //this.ShowRefForm(inputValue);

    },
    textboxOnchange: function () {
        this.onInputReturn();
    },
    textboxFocus: function () {
        this.ControlFocus();
        if (this._isKey != true) {
            this._button.className = this.btnmouseOverClass;
        }
        try {
            this._textbox.select();
        } catch (e) { }
    },

    textboxBlur: function () {

        //20100524 by wangxiaoliang
        //同TextBox处理方式一样，再焦点离开时最后判断是否有需要屏蔽的字符，如果有就过滤掉。
        var maskChars = this._textbox.cusAttr("maskChars");
        if (maskChars && (maskChars.length > 0)) {
            this._textbox.value = filtrateMaskChar(this._textbox.value, maskChars)
        }

        this.ControlBlur();
        this._button.className = "btn FlexBtn";
    },

    BtnMouseOver: function (button) {
        //        this._button.className = this.btnmouseOverClass;
    },

    BtnMouseOut: function () {
        //        this._button.className = this.btnmouseOutClass;
    },

    GetQueryString: function (partID) {
        var linkString = "lnk=" + partID;
        if (this._isKey) {
            var cStruct = $find(this._element.cusAttr("StructID"));
            if (cStruct) {
                var v = null;
                if (typeof (cStruct.get_Key) != "undefined") {
                    v = cStruct.get_Key();
                }
                if (!v) {
                    v = cStruct.get_Value();
                }
                linkString += "&StructID=" + v;
            }
        } else {
            if (this._element.cusAttr("ContextValueID")) {
                var cContextValue = $find(this._element.cusAttr("ContextValueID"));
                if (cContextValue) {
                    var v = null;
                    //delete by pc 2008-3-12
                    //if(typeof(cContextValue.get_Key)!="undefined"){
                    //	v = cContextValue.get_Key();
                    //}
                    //if(!v){
                    v = cContextValue.get_Value();
                    //}
                    linkString += "&ContextValueID=" + v;
                }
            }
        }
        var pre = "&";
        if (this._dynamicParams != null) {
            for (key in this._dynamicParams) {
                linkString += pre + key + "=" + this._dynamicParams[key];
            }
        }
        var customInParams = this._element.cusAttr("CustomInParams");
        if (customInParams != null && customInParams != "") {
            if (customInParams[0] == '&')
                linkString += customInParams;
            else
                linkString += "&" + customInParams;
        }
        return linkString;
    },

    //参照返回结果
    ShowRefForm: function (inputCode) {
        var url = this.GetUrl(this._element.cusAttr('PartID'));
        if (inputCode && inputCode != "") url += "&InputCode=" + encodeURIComponent(inputCode);
        url = AppendPopupUrl(url);
        var title = this.get_element().getAttribute('Title');
        if (!title) title = "";
        title = "";
        var width = this._element.cusAttr('W');
        var height = this._element.cusAttr('H');
        //var ret = ShowModalDialog(url, title, height, width, true);
        var self = this;
        zlayer.open({
            title: title,
            area: [width + "px", height + "px"],
            argument: window,
            content: url,
            endHandle: function (ret) {
                if (ret != null && typeof (ret) != "boolean")//这里的showRefForm可能是通过FormProcess中的show方法引发的，此时ret为true或false时，这时应该特殊处理
                {
                    self.OnContentChanged(ret);
                }
                try {
                    self._textbox.focus();
                } catch (e) { }

            }
        });
        //        if (ret != null && typeof (ret) != "boolean")//这里的showRefForm可能是通过FormProcess中的show方法引发的，此时ret为true或false时，这时应该特殊处理
        //        {
        //            this.OnContentChanged(ret);
        //        }
        //        try {
        //            this._textbox.focus();
        //        } catch (e) { }
    },

    ShowRefForm4Reference: function (refType, refWidth, refHeight, CustomInParams) {
        var _this = this;
        var url = this.GetUrl(refType) + "&" + CustomInParams;
        url = AppendPopupUrl(url);
        ShowModalDialogForAll(url, "", refHeight, refWidth, true, false, function (ret) {
            if (ret != null) {
                _this.OnContentChanged(ret);
            }
            try {
                _this._textbox.focus();
            } catch (e) { }

        });
    },

    OnContentChanged: function (ret) {
        var referenceData = PopupFormHelper.TranslateInfor(ret);
        if (referenceData == null) {
            referenceData = new ReferenceData();
        }

        var keys = referenceData.GetValues(this._element.cusAttr('CodeField'));
        var names = referenceData.GetValues(this._element.cusAttr('NameField'));
        if (keys.length > 0) {
            this._textbox.value = keys[0];
            this._value = keys[0];
            this._name = names[0];
        } else {
            this._textbox.value = "";
            this._value = "";
            this._name = "";
        }
        var assoControl = $find(this._element.cusAttr('AssoControl'));
        if (assoControl) {
            if (names.length > 0) {
                assoControl.set_Value(names[0]);
            } else {
                assoControl.set_Value("");
            }
        }

        this._datas = referenceData;
        this.fireContentChangedEvent(this._datas);
        if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
            this.set_IsValueChanged(true);
    },

    CheckControlType: function (ret) {
        var refData = PopupFormHelper.TranslateInfor(ret);
        if (refData == null) {
            refData = new ReferenceData();
        }
        if (refData.Rows.length == 1) {//只处理参照控件，其他控件不弹出画面，不用继续处理
            if (refData.Rows[0].ControlType == ControlType.RefControl) { //ControlType.RefControl = "REF";
                this.ShowRefForm4Reference(refData.Rows[0].RefType, refData.Rows[0].RefWidth, refData.Rows[0].RefHeight, refData.Rows[0].CustomInParams);
                return;
            }
        }

        try {
            this._textbox.focus();
        } catch (e) { }
    },

    fireContentChangedEvent: function (data) {
        //抛出参照数据改变事件，关联控件订阅该事件给相关控件付值
        var args = new UF.UI.ChangeEventArgs();
        args.result = data;
        args.sender = this._element;
        this.raiseContentChanged(args);
    }

}

UF.UI.FlexField.registerClass('UF.UI.FlexField', UF.UI.PopupForm);

function FlexFieldTemplate() { }
FlexFieldTemplate.Enabled = InputControlTemplate.Enabled;
FlexFieldTemplate.ReadOnly = InputControlTemplate.ReadOnly;
FlexFieldTemplate.TBClassName = InputControlTemplate.TBClassName;
FlexFieldTemplate.TBClassName_R = InputControlTemplate.TBClassName_R;
FlexFieldTemplate.TBClassName_D = InputControlTemplate.TBClassName_D;
FlexFieldTemplate.BtnClassName = "btn FlexBtn";
FlexFieldTemplate.BtnClassName_Dis = "btn FlexBtnDisable";;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.Menu = function (element) {

    UF.UI.Menu.initializeBase(this, [element]);
    this.isKeyBoardEvent = false;
    var _this = this;
    // TODO : (Step 1) Add your property variables here
    //V2.1修改菜单的布局 by wangxiaoliang
    //--begin--
    this._isMutliGroup = false;
    this.maxItemCount = 25;
    //--end--
    this._deleteFlag = true;
    this.popMenu;
    this.eventSource; //gct20080809
    this.menuItems = new Array();
    this.displayImage;
    this.oPopupBody1;
    this.oPopupEvent; // event object fromf oPopup


    this._datas;
    this._dynamicParams //gct20070809 用作测试？？

    this.TextStyle = this.get_element().className; //"TextStyle";//"font:12px;cursor: hand;color:black;"
    //以下是定义为类级还是实例级?????

    //gct:ItemStyle是MemuItem为disabled的时候所显示的样式
    this.itemStyle = "height: 18px;"; //menu菜单项的高度    
    //gct:disItemStyle是MemuItem为disabled的时候所显示的样式
    this.disItemStyle = "height: 18px;cursor:default;color:#A2A2A2 !important";

    // this.sepStyle = "height:3px;";
    this.sepStyle = "height:2px;";  //weiyin添加修改
    this.sepColor = "#DADAC5";
    this.imageStyle = "width: 16px; height: 18px;";
    //this.tableStyle="border:0px;border-width:0px;border-collapse:collapse;";    
    this.tableStyle = "border:0px;border-width:0px;";

    this.columstyle = [];
    this.columstyle[0] = "width:17px;vertical-align:middle;text-align:center;";
    this.columstyle[1] = "padding-top:3px;font-size:12px;cursor: hand;";
    //原来是width:20px，修改成width:30px by wangxiaoliang，单列的时候，为了让背景框充满行
    this.columstyle[2] = "width:30px;vertical-align:middle;text-align:center;cursor: hand;";

    this.imageSrc = "";
    this.arrowHead = "ArrowR.gif";
    this.selectedColor = "#FFE9A6";

    //selectedBorderStyle和unselectedBorderStyle为Item的边框样式
    this.selectedBorderStyle = "1px #C8C8C8 solid";
    this.unselectedBorderStyle = "1px #FFFFFF solid";


    this._hidden;
    //this.layer=0;
    //this.selectedItem=null;
    //this.timer = null;
    //this.pops = new Array(); // 用来存储Popup窗口家族的数组
    this.popsIndex = new Array(); // 用来存储Popup窗口家族的数组
    this.popsSelected = new Array(); // 用来存储Popup窗口家族的数组
    this.attachDisplayControl;
    this.attachEventControl;
    this.popsDirection = [];
    this.Pops = new Array();
    //yxq add 2006/08/08
    //菜单项左边被选标识
    this.selectedImageSrc = "selected.gif";

    this.isInit = false;
    this.Menu_nIndex = -1;

    // Handler
    this._customHandler;
    this._keydownHandler;

    this._isCancelMenuItemClick = false;

    //this.PopMenuType = 1;//个性化入口区PopMenuType=0,功能区的PopMenuType=1；默认是功能区的PopMenu

    //添加弹出窗体的事件
    //this.oPopup_keydown = function()
    //{ 
    //}
    this.oPopup_oncontextmenu = function () {
        if (_this.oPopupEvent == null) return;
        if (_this.oPopupEvent.ctrlKey == true) {
            var c = _this.oPopupEvent.srcElement;
            if (c.tagName == "NOBR") {
                var text = c.innerText + "  " + c.parentElement.parentElement.title;
                var oldText = window.clipboardData.getData("Text");
                //window.clipboardData.setData("Text", oldText + "\r\n" + text);
                Clipboard.setData(oldText + "\r\n" + text);
                showStatus(text); //mahx20160705 修改状态栏提示
            }
            _this.oPopupEvent.cancelBubble = true;
            _this.oPopupEvent.returnValue = false;
        }
    }

    this.oPopup_onclick = function (isResume) {
        if (_this.oPopupEvent == null) return;
        if (isResume || _this.oPopupEvent.srcElement != null && (_this.oPopupEvent.srcElement.tagName == "TD" || _this.oPopupEvent.srcElement.tagName == "NOBR")) {

            //var eventSource;
            if (_this.oPopupEvent.srcElement.tagName == "NOBR") {
                _this.eventSource = _this.oPopupEvent.srcElement.parentElement.parentElement; //eventSource存的是TR
            } else {
                if (_this.oPopupEvent.srcElement.parentElement.tagName == "TD")
                    _this.eventSource = _this.oPopupEvent.srcElement.parentElement.parentElement;
                else //_this.oPopupEvent.srcElement.parentElement.tagName == "TR"
                    _this.eventSource = _this.oPopupEvent.srcElement.parentElement; //eventSource存的是TR                
            }
            if (!_this.eventSource.cusAttr('Enabled')) {
                return;
            }

            // Pops[0].hide(); //Pops[0]存的是什么？？？
            $(_this.Pops[0]).css("visibility", "hidden");
            //debugger;
            if (_this.eventSource.cusAttr('AutoPostBack') != undefined && _this.eventSource.cusAttr('AutoPostBack').toString().toLowerCase() == "false") {
                //个性化处理，如果存在SBTN，则是转换过来的MenuItem，就直接调用源的Click
                var SBTN = _this.eventSource.cusAttr('SBTN');
                if (SBTN) {
                    $find(SBTN).fireClick();
                    return;
                }

                //个性化处理，如果存在SDDB，则是移动过来的MenuItem，就直接调用源的Click
                var SDDB = _this.eventSource.cusAttr('SDDB');
                if (SDDB) {
                    var SMI = _this.eventSource.cusAttr('SMI');
                    $find(SDDB).fireItemClick(SMI);
                    return;
                }

                var pID = _this.eventSource.cusAttr('PartID');
                if (pID) {
                    if (_this.get_IsCancelMenuItemClick() == false) //通常都走这里
                    {
                        _this.OnBeforeLoadData(_this.eventSource);
                        if (_this.get_IsCancelMenuItemClick() == true)
                            return;
                    }
                    _this.ShowMenuForm(_this.eventSource);
                    if (_this.get_IsCancelMenuItemClick() == true) //如果是撤销ButtonClick的，需要恢复一下状态
                        _this.set_IsCancelButtonClick(false); //恢复状态          
                } else {
                    //'CC' Client Click Script
                    var cc = _this.eventSource.cusAttr('CC');
                    if (cc) {
                        eval(cc);
                    } else {
                        _this._hidden.oldvalue = _this._hidden.value;
                        _this._hidden.value = _this.eventSource.cusAttr('index');
                        _this.fireMenuItemClick(_this.eventSource);
                    }
                }
                return;
            }
            _this._hidden.oldvalue = _this._hidden.value;
            _this._hidden.value = _this.eventSource.cusAttr("index") + "," + _this.eventSource.cusAttr("itemID"); //eventSource.index从何而来
            
            if (!_this._deleteFlag) //_this._deleteFlag默认为true
            {
                _ClientJSExecQueueManager.Push("$find(\"" + _this._element.id + "\").set_DeleteFlag(\"true\");");

            }
            else {
                if (_this._element.cusAttr('onfirequeuedevents') != null) {
                    if (_this.eventSource.cusAttr('VerifyNotNull') && _this.eventSource.cusAttr('VerifyNotNull') == "True" && _this.eventSource.cusAttr('TopPanelClientID') && _this.eventSource.cusAttr('TopPanelClientID') != "") {
                        if (!$ID(_this.eventSource.cusAttr('TopPanelClientID')).TopPanelNoEmptyVerify()) {
                            _this.fireMenuItemClick(_this.eventSource);
                            return;
                        }
                    }
                    _ClientJSExecQueueManager.Push(" __doPostBack(\"" + _this._element.id + "\", \"\");$find(\"" + _this._element.id + "\")._hidden.value = \"\"");

                } else {

                    _ClientJSExecQueueManager.Push("$find(\"" + _this._element.id + "\")._hidden.value = \"\"");
                }
            }
            _this.fireMenuItemClick(_this.eventSource);
            //如果存在AfterZlayerJsQueue，则代表弹出框了，在弹框结束后会自动启动ClientJSExecQueueManager.Start()方法,所以这里不处理；
            //不存在AfterZlayerJsQueue则代表没有弹出框，那么立即执行_ClientJSExecQueueManager.Start();
            //Start方法里会自动判断出是否是在有请求在跑，如果在跑则会等请求跑完再次执行_ClientJSExecQueueManager.Start；如果请求没有跑则会立即执行队列里的函数。
            //所以上面必须执行的方法一定会执行
            if (!window.AfterZlayerJsQueue) {
                _ClientJSExecQueueManager.Start();
            }
        }
    }
    //this.oPopup_mouseout = function()
    //{}
    this.oPopup_mouseover = function () {
        if (_this.isKeyBoardEvent) {
            _this.isKeyBoardEvent = false;
            return;
        }
        try {
            if (_this.oPopupEvent == null) return;

            if (_this.oPopupEvent.srcElement != null && (_this.oPopupEvent.srcElement.tagName == "TD" || _this.oPopupEvent.srcElement.tagName == "NOBR")) {
                //var eventSource;//存放TR，即MenuItem，菜单中的一行

                if (_this.oPopupEvent.srcElement.tagName == "NOBR") {
                    _this.eventSource = _this.oPopupEvent.srcElement.parentElement.parentElement;
                } else {
                    _this.eventSource = _this.oPopupEvent.srcElement.parentElement;
                }
                if (!_this.eventSource.cusAttr('Enabled')) {
                    return;
                }

                var indexInt = _this.eventSource.cusAttr('index')
                if (indexInt && _this.menuItems[indexInt] != null) {
                    _this.DisplayPopUp(_this.menuItems[indexInt], _this.eventSource);
                } else {
                    _this.HiddenPopUp(_this.eventSource);
                }

                var layer = _this.eventSource.cusAttr('index').split('.').length - 1;

                var oldeventSource = _this.popsSelected[layer]; //为了要改变_this.popsSelected[layer]下的孩子节点的属性，通过oldeventSource来改变

                if (_this.popsSelected[layer] != null) {
                    //全部放在在了oldeventSource          
                    //                    _this.popsSelected[layer].style.background="";
                    //                    _this.popsSelected[layer].style.color="";

                    //为什么不能改变 _this.popsSelected[layer]下的孩子孩子节点
                    //                    _this.popsSelected[layer].childNodes[0].style.border="0px #FCFCEA solid";  
                    //                    _this.popsSelected[layer].childNodes[0].style.borderLeft="1px #FCFCEA solid";  
                    //                    _this.popsSelected[layer].childNodes[0].style.borderTop="1px #FCFCEA solid";                       
                    //                    _this.popsSelected[layer].childNodes[0].style.borderBottom="1px #FCFCEA solid";                                         
                    //                                 
                    //                    _this.popsSelected[layer].childNodes[1].style.border="0px #FCFCEA solid";  
                    //                    _this.popsSelected[layer].childNodes[1].style.borderTop="1px #FCFCEA solid";                       
                    //                    _this.popsSelected[layer].childNodes[1].style.borderBottom="1px #FCFCEA solid";                                   
                    //                    
                    //                    _this.popsSelected[layer].childNodes[2].style.border="0px #FCFCEA solid";  
                    //                    _this.popsSelected[layer].childNodes[2].style.borderTop="1px #FCFCEA solid";                       
                    //                    _this.popsSelected[layer].childNodes[2].style.borderBottom="1px #FCFCEA solid";                    
                    //                    _this.popsSelected[layer].childNodes[2].style.borderRight="1px #FCFCEA solid";                    
                }
                //debugger;
                if (oldeventSource != null) { //debugger;
                    oldeventSource.style.background = "";
                    oldeventSource.style.color = "";
                    if (oldeventSource.children.length > 0) {
                        for (var i = 0, len = oldeventSource.children.length; i < len; i++) {
                            oldeventSource.childNodes[i].style.background = "";
                            oldeventSource.childNodes[i].style.color = "";
                        }
                        oldeventSource.childNodes[0].style.borderLeft = _this.unselectedBorderStyle;
                        oldeventSource.childNodes[0].style.borderTop = _this.unselectedBorderStyle;
                        oldeventSource.childNodes[0].style.borderBottom = _this.unselectedBorderStyle;

                        //oldeventSource.childNodes[1].style.border="0px #FCFCEA solid";  
                        oldeventSource.childNodes[1].style.borderTop = _this.unselectedBorderStyle;
                        oldeventSource.childNodes[1].style.borderBottom = _this.unselectedBorderStyle;

                        //oldeventSource.childNodes[2].style.border="0px #FCFCEA solid";  
                        oldeventSource.childNodes[2].style.borderTop = _this.unselectedBorderStyle;
                        oldeventSource.childNodes[2].style.borderBottom = _this.unselectedBorderStyle;
                        oldeventSource.childNodes[2].style.borderRight = _this.unselectedBorderStyle;
                    }
                }

                if (_this.eventSource != null) {
                    //if use mouse but keyboard at first, the value of _this.Menu_nIndex is 0xfffffff, soneed to inspect the value is valid or not. if not, _this.menuItems[0].displayBody.childNodes[_this.Menu_nIndex] will result in exception.
                    var displayBody = _this.eventSource.parentElement;
//                    //说明是多列情况，之前只考虑到了单列情况，导致多列的菜单上下键不能用。
//                    if ($(_this.menuItems[0].displayBody).find("table").length > 0) {
//                        displayBody = $(_this.menuItems[0].displayBody).find("table")[0];
//                    }
                    var nL = displayBody.childNodes.length;
                    if (_this.Menu_nIndex >= nL)
                        _this.Menu_nIndex = 1;
                    else if (_this.Menu_nIndex <= 0)
                        _this.Menu_nIndex = nL - 1;

                    var keySelectedTR = null;
                    for (var i = 0, len = _this.eventSource.parentElement.children.length; i < len; i++) {
                        if (_this.eventSource.parentElement.children[i].id == displayBody.childNodes[_this.Menu_nIndex].id)
                            keySelectedTR = _this.eventSource.parentElement.children[i];
                    }
                    if (keySelectedTR.cusAttr('Enabled')) {
                        keySelectedTR.style.background = "";
                        keySelectedTR.style.color = "";
                        keySelectedTR.childNodes[0].style.borderLeft = _this.unselectedBorderStyle;
                        keySelectedTR.childNodes[0].style.borderTop = _this.unselectedBorderStyle;
                        keySelectedTR.childNodes[0].style.borderBottom = _this.unselectedBorderStyle;

                        keySelectedTR.childNodes[1].style.borderTop = _this.unselectedBorderStyle;
                        keySelectedTR.childNodes[1].style.borderBottom = _this.unselectedBorderStyle;

                        keySelectedTR.childNodes[2].style.borderTop = _this.unselectedBorderStyle;
                        keySelectedTR.childNodes[2].style.borderBottom = _this.unselectedBorderStyle;
                        keySelectedTR.childNodes[2].style.borderRight = _this.unselectedBorderStyle;
                    }

                    // 2016.05.11新增跨浏览器兼容处理,遍历当前下拉菜单所有行，并去掉高亮样式 Start -- weiyin
                    var _trs = _this.eventSource.parentElement.children;
                    var trLen = _trs.length;
                    for (var i = 0 ; i < trLen ; i++) {
                        _trs[i].style.background = '';

                        _trs[i].childNodes[0].style.borderLeft = _this.unselectedBorderStyle;
                        _trs[i].childNodes[0].style.borderTop = _this.unselectedBorderStyle;
                        _trs[i].childNodes[0].style.borderBottom = _this.unselectedBorderStyle;

                        _trs[i].childNodes[1].style.borderTop = _this.unselectedBorderStyle;
                        _trs[i].childNodes[1].style.borderBottom = _this.unselectedBorderStyle;

                        _trs[i].childNodes[2].style.borderTop = _this.unselectedBorderStyle;
                        _trs[i].childNodes[2].style.borderBottom = _this.unselectedBorderStyle;
                        _trs[i].childNodes[2].style.borderRight = _this.unselectedBorderStyle;

                    }
                    // 2016.05.11新增跨浏览器兼容处理End -- weiyin

                    _this.popsSelected[layer] = _this.eventSource;
                    _this.eventSource.style.backgroundColor = _this.selectedColor;   //当前选中行重新添加高亮样式
                    _this.eventSource.style.cursor = "pointer";   //鼠标滑过添加手型交互 -- weiyin
                    //eventSource.style.color="white";
                    //eventSource.style.border="3px";
                    if (_this.eventSource.children.length > 0) {
                        _this.eventSource.childNodes[0].style.borderLeft = _this.selectedBorderStyle;
                        _this.eventSource.childNodes[0].style.borderTop = _this.selectedBorderStyle;
                        _this.eventSource.childNodes[0].style.borderBottom = _this.selectedBorderStyle;

                        _this.eventSource.childNodes[1].style.borderTop = _this.selectedBorderStyle;
                        _this.eventSource.childNodes[1].style.borderBottom = _this.selectedBorderStyle;

                        _this.eventSource.childNodes[2].style.borderTop = _this.selectedBorderStyle;
                        _this.eventSource.childNodes[2].style.borderBottom = _this.selectedBorderStyle;
                        _this.eventSource.childNodes[2].style.borderRight = _this.selectedBorderStyle;
                    }

                    for (var i = 0, len = displayBody.childNodes.length; i < len; i++) {
                        //if(_this.eventSource.parentElement.children[i].innerText== _this.eventSource.innerText)
                        if (displayBody.childNodes[i].innerText == _this.eventSource.innerText) {
                            _this.Menu_nIndex = i;
                            break;
                        }
                    }

                    //eventSource.style.borderWidth="1px";
                    //eventSource.style.borderColor="red";
                    //eventSource.style.borderStyle ="solid";
                }
            }
        } catch (e) {
            //alert(e.message);
        }
    }
    this.oPopup_saveEventObject = function (e) {
        // 仅处理针对 DIV、IMG 的鼠标、键盘操作事件 
        _this.oPopupEvent = e;
    }






}

UF.UI.Menu.prototype = {

    initialize: function () {
        UF.UI.Menu.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        this._hidden = $get(this._element.cusAttr('HelpId'));
        this.InitControl();
        this.document = HtmlHelper.getElementDocument(this._element);
        this.attachEventPopBody();
        // Create delegates Attach events
    },
    dispose: function () {
        // TODO: add your cleanup code here
        if (this._customHandler) {
            $removeHandler(this.attachEventControl, this._element.cusAttr('AttachEventStyle').substr(2), this._customHandler);
            this._customHandler = null;
        }
        if (this._keydownHandler) {
            $removeHandler(this.attachEventControl, "keydown", this._keydownHandler);
            this._keydownHandler = null;
        }

        this.popMenu = null;
        if (this.menuItems) {
            Array.clear(this.menuItems);
            this.menuItems = null;
        }
        this.displayImage = null;
        this.detachEventPopBody();
        this.oPopupEvent = null;
        /*
        this.TextStyle=null;
        this.itemStyle=null;
        this.disItemStyle=null;
        this.sepStyle=null;
        this.sepColor=null;
        this.imageStyle=null;
        this.tableStyle=null;
        */
        if (this.columstyle) {
            Array.clear(this.columstyle);
            this.columstyle = null;
        }
        /*
        this.imageSrc=null;
        this.arrowHead=null;
        this.selectedColor=null;
        */
        this._hidden = null;
        
        if (this.Pops)
        {
            for (var i = 0; i < this.Pops.length; i++) {
                document.body.removeChild(this.Pops[i]);
            }
            this.Pops = null;
        }
        
        if (this.popsIndex) {
            Array.clear(this.popsIndex);
            this.popsIndex = null;
        }
        if (this.popsSelected) {
            Array.clear(this.popsSelected);
            this.popsSelected = null;
        }
        this.attachDisplayControl = null;
        this.attachEventControl = null;
        if (this.popsDirection) {
            Array.clear(this.popsDirection);
            this.popsDirection = null;
        }
        //this.selectedImageSrc=null;
        this.isKeyBoardEvent = null;
        if (this.runtimeMenuItemState) {
            Array.clear(this.runtimeMenuItemState);
            this.runtimeMenuItemState = null;
        }
        if (this.runtimeMenuItemVisibleList) {
            Array.clear(this.runtimeMenuItemVisibleList);
            this.runtimeMenuItemVisibleList = null;
        }
        UF.UI.Menu.callBaseMethod(this, 'dispose');
    },
    detachEventPopBody: function () {
        // 内存泄漏修改-zjh 2022/10/26
        $(window.document).off("mousedown", "#root" + this._element.id, function () {
            $Event(event).preventDefault();
            $Event(event).stopPropagation();

        })
        $(window.document).off("click", "#root" + this._element.id, this.oPopup_onclick);
        $(window.document).off("contextmenu", "#root" + this._element.id, this.oPopup_oncontextmenu);
        $(window.document).off("mouseover", "#root" + this._element.id, this.oPopup_mouseover);
        if (this.oPopupBody1) {
            //this.oPopupBody1.detachEvent('onkeydown', this.oPopup_keydown);
            $(this.oPopupBody1).unbind('click', this.oPopup_onclick);
            $(this.oPopupBody1).unbind('contextmenu', this.oPopup_oncontextmenu);
            $(this.oPopupBody1).unbind('mouseover', this.oPopup_mouseover);
            //this.oPopupBody1.detachEvent('onmouseout', this.oPopup_mouseout);
            this.oPopupBody1 = null;
        }
    },
    attachEventPopBody: function () {
        //不让当前div获得焦点，这样button也就不会失去焦点，所以div不会马上隐藏。
        $(window.document).on("mousedown", "#root" + this._element.id, function () {
            $Event(event).preventDefault();
            $Event(event).stopPropagation();

        })
        $(window.document).on("click", "#root" + this._element.id, this.oPopup_onclick);
        $(window.document).on("contextmenu", "#root" + this._element.id, this.oPopup_oncontextmenu);
        $(window.document).on("mouseover", "#root" + this._element.id, this.oPopup_mouseover);
        //if (this.oPopupBody1) {
        //    //this.oPopupBody1.attachEvent('onkeydown', this.oPopup_keydown);
        //    $(this.oPopupBody1).bind('click', this.oPopup_onclick);
        //    $(this.oPopupBody1).bind('contextmenu', this.oPopup_oncontextmenu);
        //    $(this.oPopupBody1).bind('mouseover', this.oPopup_mouseover);
        //    //this.oPopupBody1.attachEvent('onmouseout', this.oPopup_mouseout);
        //}
    },

    //event    
    add_BeforeMenuItemClick: function (handler) {
        this.get_events().addHandler("BeforeMenuItemClick", handler);
    },
    remove_BeforeMenuItemClick: function (handler) {
        this.get_events().removeHandler("BeforeMenuItemClick", handler);
    },
    raiseBeforeMenuItemClick: function (args) {
        var eh = this.get_events().getHandler("BeforeMenuItemClick");
        if (eh) {
            eh(this, args);
        }
        return this._deleteFlag;
    },

    add_MenuItemClick: function (handler) {
        this.get_events().addHandler("MenuItemClick", handler);
    },
    remove_MenuItemClick: function (handler) {
        this.get_events().removeHandler("MenuItemClick", handler);
    },
    raiseMenuItemClick: function (args) {
        if (this.attachEventControl != null) {
            var control = $find(this.attachEventControl.id);
            if (control && control.raiseMenuItemclick) {
                control.raiseMenuItemclick(args);
            }
        }
        var eh = this.get_events().getHandler("MenuItemClick");
        if (eh) {
            eh(this, args);
        }
    },

    //gct20080809
    add_BeforeLoadData: function (handler) {
        this.get_events().addHandler("BeforeLoadData", handler);
    },
    remove_BeforeLoadData: function (handler) {
        this.get_events().removeHandler("BeforeLoadData", handler);
    },
    raiseBeforeLoadData: function (args) {
        var eh = this.get_events().getHandler("BeforeLoadData");
        if (eh) {
            this._dynamicParams == null;
            eh(this, args);
        }
    },
    add_ContentChanged: function (handler) {
        this.get_events().addHandler("ContentChanged", handler);
    },
    remove_ContentChanged: function (handler) {
        this.get_events().removeHandler("ContentChanged", handler);
    },
    raiseContentChanged: function (args) {
        var eh = this.get_events().getHandler("ContentChanged");
        if (eh) {
            eh(this, args);
        }
    },


    //添加客户端click事件触发
    fireMenuItemClick: function (eventSource) {
        var args = new UF.UI.ChangeEventArgs();
        args.ClientEventSource = eventSource;
        args.Text = eventSource.cusAttr("Text");
        args.Value = eventSource.cusAttr("Value");
        if (eventSource.cusAttr("index") && eventSource.cusAttr("index").split('.').length > 1)
            args.Index = eventSource.cusAttr("index").split('.')[1];
        else
            args.Index = eventSource.cusAttr("index");
        if (this.get_IsCancelMenuItemClick() == false) {
            this.raiseBeforeMenuItemClick(args);
            if (this.get_IsCancelMenuItemClick() == true)
                return; //不继续执行后面的MenuItemClick事件
        }
        if (this.get_DeleteFlag() == true) //如果删除确认标记为true，说明要删除，需要继续执行
        {
            this.raiseMenuItemClick(args);
        }
        if (this.get_IsCancelMenuItemClick() == true) //如果是撤销ButtonClick的，需要恢复一下状态
            this.set_IsCancelMenuItemClick(false); //恢复状态
    },
    //
    fireBeforeLoadData: function (eventSource) {
        var args = new UF.UI.ChangeEventArgs();
        args.Text = eventSource.Text;
        args.Value = eventSource.Value;
        if (eventSource.index && eventSource.index.split('.').length > 1)
            args.Index = eventSource.index.split('.')[1];
        else
            args.Index = eventSource.index;

        this.raiseBeforeLoadData(args);
        if (this.attachEventControl.control instanceof UF.UI.DropDownButton) {
            this.attachEventControl.control.raiseBeforeLoadData(args);
        }
    },
    //
    fireContentChanged: function (eventSource) {
        var args = new UF.UI.ChangeEventArgs();
        args.Text = eventSource.Text;
        args.Value = eventSource.Value;
        if (eventSource.index && eventSource.index.split('.').length > 1)
            args.Index = eventSource.index.split('.')[1];
        else
            args.Index = eventSource.index;

        this.raiseContentChanged(args);
        if (this.attachEventControl.control instanceof UF.UI.DropDownButton) {
            this.attachEventControl.control.raiseContentChanged(args);
        }
    },



    // TODO: (Step 2) Add your property accessors here
    set_DeleteFlag: function (val) {
        if (val == null || val.toString().toLowerCase() != "false")
            this._deleteFlag = true;
        else {
            this._deleteFlag = false;
            this._hidden.value = "";
        }
    },
    get_DeleteFlag: function () {
        return this._deleteFlag;
    },
    get_Type: function () {
        return ControlType.Menu;
    },
    InitControl: function () {
        //?????
        //var oHtml = this.document.createElement("HTML");
        //oHtml.appendChild(this.CreateMainDisplay());
        //defaults.viewLink = oHtml.document;

        //perf: move some contents to InitPopupMenu
        this.AttachControls();
        //this.popupInit();
    },
    AttachControls: function () {
        if (this._element.cusAttr('AttachEventControl') != "") {
            //this.attachEventControl=$get($(this.get_element()).attr('AttachEventControl'));
            this.attachEventControl = this._element.parentElement;
        } else {
            this.attachEventControl = this._element;
        }
        if (this._element.cusAttr('AttachDisplayControl') != "") {
            //this.attachDisplayControl=$get($(this.get_element()).attr('AttachDisplayControl'));
            //女侠为跨浏览器而修改
            this.attachDisplayControl = this._element.parentElement.children[0];
        } else {
            this.attachDisplayControl = this._element;
        }

        //this._customHandler = Function.createDelegate(this, this.DropDown);
        //$addHandler(this.attachEventControl, $(this.get_element()).attr('AttachEventStyle').substr(2), this._customHandler); 
        this._keydownHandler = Function.createDelegate(this, this.oattcontrol_keydown);

        $addHandler(this.attachEventControl, "keydown", this._keydownHandler);
        if (this.attachEventControl.control instanceof UF.UI.DropDownButton) {
            this.attachEventControl.control.set_Menu(this);
        }
    },

    DropDown: function (alreadyCheckedDropDownButton, menuType) //该方法在Skin-SettingTools.ascx中调用此方法时出入第二个参数，以说明是个性个入口区的PopMenu
    {
        //this.PopMenuType = menuType;
        if (alreadyCheckedDropDownButton != true) {
            if ($find(this.attachEventControl.id).get_MenuItemStateList) {
                this.runtimeMenuItemState = $find(this.attachEventControl.id).get_MenuItemStateList();
            }
            if ($find(this.attachEventControl.id).get_MenuItemVisibleList) {
                this.runtimeMenuItemVisibleList = $find(this.attachEventControl.id).get_MenuItemVisibleList();
            }
            if ((this.runtimeMenuItemState && this.runtimeMenuItemState.length > 0) || this.runtimeMenuItemVisibleList) {
                this.isInit = false;
            }
        }
        //判断是否菜单项为空,如果为空不显示菜单
        //var judgePopMenu = this.document.createElement("PopMenu");
        var judgePopMenu = this.document.createElement("PopMenu");
        judgePopMenu.innerHTML = this._element.innerHTML;
        //var judgeMenus = judgePopMenu.children[0].children.tags("Item");
        // var judgeMenus = HtmlHelper.getElementTags(judgePopMenu.children[0].children, "Item");
        var judgeMenus = judgePopMenu.children[0].children;

        if (judgeMenus.length > 0) {
            //perf: add to init popMenu and menuItems
            this.InitPopupMenu();
            //perf: rremove next line
            //AttachControls();
            this.DisplayPopUp(this.menuItems[0], this.attachDisplayControl);

            //20100511 by wangxiaoliang
            //增加下拉默认初始选择第一项的控制。
            //这里的控制跟oattcontrol_keydown方法里的控制类似。
            //--begin--
            if (!this._isMutliGroup) {
                //todo:如果扩展功能区的菜单项超过maxItemCount，可能有问题
                if (alreadyCheckedDropDownButton != true) {
                    if (!this.menuItems[0])
                        return;
                    var displayBody = this.menuItems[0].displayBody;
                    //说明是多列情况，之前只考虑到了单列情况，导致多列的菜单上下键不能用。
                    if ($(this.menuItems[0].displayBody).find("table").length > 0) {
                        displayBody = $(this.menuItems[0].displayBody).find("table")[0];
                    }
                    if (this.Menu_nIndex == -1)
                        this.Menu_nIndex = displayBody.childNodes.length - 1;
                    this.isKeyBoardEvent = true;
                    if (this.getNextItemIndex((this.Menu_nIndex + 1), false) != this.Menu_nIndex || this.isOnlyOneMenuItemEnabled()) {
                        this.Menu_nIndex = this.getNextItemIndex((this.Menu_nIndex + 1), false);
                        this.moveSelectItem();
                    }
                }
            }
            //--end--
        }
        //重排逻辑
        // try{
        //     if($('#ss04').length>0){
        //         $('#ss04').bind('click', function (e){
        //             e.stopPropagation();
        //             GridSortMenu_Click('OnSortLine','u_M_p0_DataGrid4_SortMenu') 
        //         });
        //     }
        // }catch(e){

        // }
       
    },
    /*
    popupInit : function()
    {
    CreatePopup(1);
    },
    */
    HiddenPopUp: function (displayBody) {
        var layer = null;
        if (displayBody.index) {
            layer = displayBody.index.split('.').length - 1;
        }
        else {
            //说明是多列情况，之前只考虑到了单列情况，导致多列的菜单上下键不能用。
            if ($(displayBody).find("table").length > 0) {
                displayBody = $(displayBody).find("table")[0];
            }
            layer = displayBody.cusAttr("index").split('.').length - 1;
        }
        if (this.Pops[layer] == null) {
            this.CreatePopup(layer);
        }
        //this.Pops[layer].hide();
        $(this.Pops[layer]).css("visibility", "hidden");
    },

    DisplayPopUp: function (displayBody, aroseEvent) { //debugger;
        //判断有没有菜单项，如果没有就不要再Popup        
        if (displayBody.displayBody.innerText == "" || displayBody.displayBody.innerText.length <= 0)
            return;

        var layer = displayBody.index.split('.').length - 1;
        if (this.Pops[layer] == null) {
            this.CreatePopup(layer);
        }
        var popBody = this.Pops[layer];

        if (popBody.isOpen == true) {
            if (this.popsIndex[layer] == displayBody.index) {
                return;
            }
        }
        //this.detachEventPopBody();
        //if (curPopMenu)
        //    curPopMenu.detachEventPopBody();
        curPopMenu = this;
        //var oPopupBody1 = popBody.document.body;
        //debugger;
        //popBody.document.bgColor = "";
        HtmlHelper.getElementDocument(popBody).bgColor = "";
        //this.oPopupBody1 = popBody.document.body;
        this.oPopupBody1 = popBody;
        //this.oPopupBody1.style.border="0";

        //this.oPopupBody1.style="FILTER:Alpha(opacity:0)";
        //this.oPopupBody1.style.filters["Alpha"].opacity=0;

        //this.oPopupBody1.innerHTML = "<DIV id='root' style='border:1px solid #959494;background-color: #FCFCEA;font-size:12px;width:98%;FILTER: progid:DXImageTransform.Microsoft.Shadow(direction=135,color=#959494,strength=3);' onkeydown='f(event);'onmouseover='f(event);return false;' onmousemove='return false;'>" +displayBody.displayBody.outerHTML+ "</DIV>";
        this.oPopupBody1.innerHTML = "<DIV id='root"+this._element.id+"' class='root' style='padding:1px;border:1px solid #959494;background-color:#FFFFFF;font-size:12px;width:98%;FILTER: progid:DXImageTransform.Microsoft.Shadow(direction=135,color=#959494,strength=5),progid:DXImageTransform.Microsoft.Alpha(opacity=100);' onkeydown='f(event);' onmouseover='f(event);return false;' onmousemove='return false;'>" + displayBody.displayBody.outerHTML + "</DIV>";

        //this.oPopupBody1.style.filter="progid:DXImageTransform.Microsoft.Alpha(opacity=100)";
        //this.oPopupBody1.style.border="3px red solid";
        //this.oPopupBody1.parentElement.filters["DXImageTransform.Microsoft.Alpha"].opacity=100;

        //popBody.document.f = this.oPopup_saveEventObject;
        HtmlHelper.getElementDocument(popBody).f = this.oPopup_saveEventObject;
        //this.attachEventPopBody();
        this.oPopupBody1.style.overflow = "hidden";
        $(popBody).css("visibility", "hidden");
        //重排逻辑
        try{
            var colIndex = $(aroseEvent).index()
            var columnCol = $(aroseEvent).parent().parent().parent().find("colgroup").children().eq(colIndex)[0]
            if(columnCol.cusAttr('FieldID') != "ID" && columnCol.cusAttr('IsSequence') == 'true'){
                $('#ss04').css('display','');
            }
        }catch(e){

        }
        //这里动态计算菜单的高度和宽度
        var popSize = this.GetDimention(popBody);

        $(popBody).css({
            "width": popSize.width,
            "height": popSize.height,
            "z-index": 10000
        });

        if (layer != 0) {
            if (this.popsDirection[layer] == null) {
                this.popsDirection[layer] = this.popsDirection[layer - 1];
            }
            if (this.JudageDisplayPosition(this.Pops[layer - 1], popSize, this.popsDirection[layer]) == false) {
                if (this.popsDirection[layer] == "left") {
                    this.popsDirection[layer] = "right";
                } else {
                    this.popsDirection[layer] = "left";
                }

            }

            if (this.popsDirection[layer] == "right") {
                //popBody.show(0 + parseInt(aroseEvent.document.body.scrollWidth), 0, popSize.width, popSize.height, aroseEvent);
            } else {
                //popBody.show(0 - popSize.width, 0, popSize.width, popSize.height, aroseEvent);
            }
            $(popBody).css("visibility", "");



        } else {
            this.popsDirection = null;
            this.popsDirection = [];
            this.popsDirection[0] = "right";

            //V2.1修改菜单的布局 by wangxiaoliang
            //--begin--
            //根据屏幕的宽度、菜单本身的宽度和先对控件(aroseEvent)的位置，计算iX的值。
            $(popBody).css("visibility", "");
            //计算显示X轴的位置
            var iX = this.JudageDisplayLRPosition(aroseEvent, popSize);
            //计算Y轴的位置

            var xxx = aroseEvent.getBoundingClientRect().top;
            //母件结构查询-汇总式  向下弹出会被隐藏，所以改为一律向上弹出
            //if (this.JudageDisplayUpDownPosition(aroseEvent, popSize)) {
                //popBody.show(iX, 0 + aroseEvent.offsetHeight, popSize.width, popSize.height, aroseEvent);
                /*$(popBody).css({
                    "left": iX,
                    "position": "absolute",
                    // "top": aroseEvent.offsetHeight + aroseEvent.offsetTop
                    "top": aroseEvent.offsetHeight + $(aroseEvent).offset().top
                });*/
            //} else {
                //popBody.show(iX, 0 - popSize.height, popSize.width, popSize.height, aroseEvent);
                $(popBody).css({
                    "left": iX,
                    "position": "absolute",
                    "top": aroseEvent.className.indexOf("thc") !== -1 ? Math.floor(xxx+aroseEvent.clientHeight) + "px": xxx - popSize.height + "px"
                });
           // }


            //--end--
        }
        this.popsIndex[layer] = displayBody.index;
        if(this._element.id.indexOf('_SortMenu') > -1){  //针对于排序的弹层单独设置点击其他区域隐藏 -- weiyin -- 跨浏览器兼容
            var sortMenuDiv = $("#root"+this._element.id).parent('div');
            sortMenuDiv.attr('tabindex','-1');
            sortMenuDiv.focus();
            sortMenuDiv.blur(function(){
                // $(".root").hide();  //隐藏当前排序div层
                window.setTimeout(function(){
                    $(".root").hide();
                    $(popBody).css({
                        height:0
                    });
                },0)
            })
        }
    },

    InitPopupMenu: function () {
        if (this.isInit) return;
        this.isInit = true;
        //debugger;
        this.popMenu = this.document.createElement("PopMenu");
        this.popMenu.innerHTML = this._element.innerHTML;

        //V2.1修改菜单的布局 by wangxiaoliang
        //--begin--
        //原来的方式，这里直接返回一个Table的dom结构
        //this.menuItems[0]=this.CreatePopDiv(this.popMenu.children[0],"0");
        //新方案：
        //按配置的最大个数将菜单项分组，每组是一个Table的dom结构。       
        var tmpItems = this.popMenu.children[0];
        if (tmpItems != null) {
            // var itemList = HtmlHelper.getElementTags(tmpItems.children, "Item");
            // var itemList = $E(tmpItems.children).getElementTags("Item");
            var itemLength = tmpItems.children.length;  //2016.06.08跨浏览器兼容 -- weiyin

            if (itemLength < this.maxItemCount + 1) {
                this._isMutliGroup = false;
                this.menuItems[0] = this.CreatePopDiv(tmpItems, "0");
            } else {
                this._isMutliGroup = true;
                //这里要先分组，再通过CreatePopDiv创建Table，最后分别放在最外层控制布局的Table里。               
                var tmpParts = new Array();

                for (var i = 0; i < itemLength; i = i + this.maxItemCount) {
                    var part = new Object();
                    part.from = i;
                    part.to = i + this.maxItemCount - 1;
                    if (part.to > itemLength - 1) {
                        var modNum = itemLength % this.maxItemCount;
                        part.to = part.from + modNum - 1;
                    }

                    tmpParts.push(part);
                    //$alert(part.from +" , "+part.to);
                }

                //因为需要给V2.0SP2打补丁，所以不能用jQuery   
                var tab = $E(this.document).createElement("table");
                var tr = $E(this.document).createElement("tr");

                for (var i = 0, leng = tmpParts.length; i < leng; i++) {
                    var tmpPart = tmpParts[i];
                    var tmpObj = this.CreatePopDiv(tmpItems, "0", tmpPart);
                    //var td = this.document.createElement('<td valign="top">');
                    var td = HtmlHelper.createElement('td', {
                        'valign': 'top'
                    });
                    td.appendChild(tmpObj.displayBody);
                    tr.appendChild(td);
                }

                tab.appendChild(tr);

                var tmp = new Object();
                tmp.displayBody = tab;
                tmp.index = "0";
                this.menuItems[0] = tmp;
            }
        }
        //--end--

    },
    CreatePopDiv: function (items, inheritIndex, part) {
        //V2.1修改菜单的布局 by wangxiaoliang
        //part是用来控制取得的菜单项集合的子集
        //part是一个object，内部有两个数字属性，part.from和part.to

        var menuItem = new Object();
        var attributeObj = {
            "cellspacing": "0",
            "cellpadding": "0",
            "style": this.tableStyle
        }
        //menuItem.displayBody = this.document.createElement("<table cellspacing='0' cellpadding='0'  style='" + this.tableStyle + "'>");
        menuItem.displayBody = HtmlHelper.createElement('table', attributeObj);
        menuItem.displayBody.appendChild(this.CreateColumns());
        //zjx
        menuItem.displayBody.focus();
        menuItem.index = inheritIndex;
        // var itemList = $E(items.children).getElementTags("Item");
        var itemLen = items.children.length;  //2016.06.08跨浏览器兼容 -- weiyin
        if (!part) {
            for (var i = 0; i < itemLen; i++) {
                //=========by zzq
                this.CreateMenuItem(items.children[i], menuItem, i, items.children[i].cusAttr('itemID'));
            }
        } else {
            for (var i = part.from; i < part.to + 1; i++) {
                this.CreateMenuItem(items.children[i], menuItem, i, items.children[i].cusAttr('itemID'));
            }
        }
        return menuItem;
    },
    CreateMenuItem: function (input, items, index, itemID) {
        var initIndex = index;
        if (input.cusAttr('Index') != null)
            initIndex = parseInt(input.cusAttr('Index'), 10);
        // if (typeof (input.Type) != "undefined" && input.Type == "MenuSeperator") {
        if (typeof (input.cusAttr('Type')) != "undefined" && input.cusAttr('Type') == "MenuSeperator") {  //2016.05.10跨浏览器兼容处理 -- weiyin
            //var item = this.document.createElement("<tr style='" + this.sepStyle + "'>");
            var item = HtmlHelper.createElement('tr', {
                'style': this.sepStyle
            });
            var tdcount = 3;
            for (var i = 0; i < tdcount; i++) {
                var tempTd = this.document.createElement("td");

                if (i >= 1) //最左边
                {
                    tempTd.style.borderLeft = this.unselectedBorderStyle;
                    tempTd.style.borderTop = this.unselectedBorderStyle;
                    tempTd.style.borderBottom = this.unselectedBorderStyle;

                } else if (i == tdcount - 1) //最右边
                {
                    tempTd.style.borderTop = this.unselectedBorderStyle;
                    tempTd.style.borderBottom = this.unselectedBorderStyle;
                } else //中间的列
                {
                    tempTd.style.borderRight = this.unselectedBorderStyle;
                    tempTd.style.borderTop = this.unselectedBorderStyle;
                    tempTd.style.borderBottom = this.unselectedBorderStyle;
                }

                item.appendChild(tempTd);
                if (i >= 1)
                    tempTd.style.background = this.sepColor;
            }
            items.displayBody.appendChild(item);
            if (!input.cusAttr('Visible')) {
                item.style.display = "none";
            }
        } else {
            var itemValue = input.cusAttr("Value");
            //var itemText = input.Text;
            // var parseXml = new DOMParser();
            // var xmlDom = parseXml.parseFromString(input.outerHTML, "text/xml");
            // var itemText = HtmlHelper.getXmlNodeValue(input);
            var itemText = input.cusAttr("text");
            if (itemText == "") itemText = "&nbsp;&nbsp;&nbsp;&nbsp;";
            var item;
            if (input.cusAttr('Enabled')) {   //2016.05.11跨浏览器兼容修改 -- weiyin
                if (this.runtimeMenuItemState != null && this.runtimeMenuItemState[itemID] != null) {
                    if (this.runtimeMenuItemState[itemID].toString().toLowerCase() == "false") {
                        //item = this.document.createElement("<tr style='" + this.disItemStyle + "'>");
                        item = HtmlHelper.createElement('tr', {
                            'style': this.disItemStyle
                        });
                        // item.Enabled = false;
                        item.cusAttr('Enabled', false);
                    } else {
                        //item = this.document.createElement("<tr style='" + this.itemStyle + "'>");
                        item = HtmlHelper.createElement('tr', {
                            'style': this.itemStyle
                        });
                        // item.Enabled = true;
                        item.cusAttr('Enabled', true);
                    }
                } else {
                    //item = this.document.createElement("<tr style='" + this.itemStyle + "'>");
                    item = HtmlHelper.createElement('tr', {
                        'style': this.itemStyle
                    });
                    // item.Enabled = true;
                    item.cusAttr('Enabled', true);
                }
            } else {
                if (this.runtimeMenuItemState != null && this.runtimeMenuItemState[itemID] != null) {
                    // if (input.EnableAuthority == null && this.runtimeMenuItemState[itemID].toString().toLowerCase() == "true") {
                    if (input.cusAttr('EnableAuthority') == null && this.runtimeMenuItemState[itemID].toString().toLowerCase() == "true") {  //2016.05.10跨浏览器兼容处理 -- weiyin
                        //item = this.document.createElement("<tr style='" + this.itemStyle + "'>");
                        item = HtmlHelper.createElement('tr', {
                            'style': this.itemStyle
                        });
                        // item.Enabled = true;
                        item.cusAttr('Enabled', true);
                    } else {
                        //item = this.document.createElement("<tr style='" + this.disItemStyle + "'>");
                        item = HtmlHelper.createElement('tr', {
                            'style': this.disItemStyle
                        });
                        // item.Enabled = false;
                        item.cusAttr('Enabled', false);
                    }
                } else {
                    //item = this.document.createElement("<tr style='" + this.disItemStyle + "'>");
                    item = HtmlHelper.createElement('tr', {
                        'style': this.disItemStyle
                    });
                    // item.Enabled = false;
                    item.cusAttr('Enabled', false);
                }
            }
            //=======by zzq兼容=====
            //item.title = input.getAttribute("title");
            $(item).attr("title", input.getAttribute("title"));

            //非空校验
            // item.TopPanelClientID = input.TPnlID;
            // item.VerifyNotNull = input.VNull;

            //2016.05.10跨浏览器兼容性处理Start -- weiyin
            item.cusAttr('TopPanelClientID', input.cusAttr("TPnlID"));
            item.cusAttr('VerifyNotNull', input.cusAttr("VNull"));
            //2016.05.10跨浏览器兼容性处理End -- weiyin

            //如果是Menu的visible控制列表中有隐藏控制，需要隐藏的将之隐藏
            if (this.runtimeMenuItemVisibleList && (this.runtimeMenuItemVisibleList[itemID] === false)) {
                item.style.display = "none";
            }
            //yxq add 2006/08/21 对菜单项Visible的处理
            if (!input.cusAttr('Visible')) {
                item.style.display = "none";
                //如果是Menu的visible控制列表中有隐藏控制，需要显示的将之显示
                if (this.runtimeMenuItemVisibleList && (this.runtimeMenuItemVisibleList[itemID] === true)) {
                    item.style.display = "";
                }
            }
            // item.index = initIndex;
            item.cusAttr('index', initIndex);
            //debugger;
            var imageTD = this.document.createElement("td");
            //            imageTD.style.width= "20px";
            //            imageTD.style.height="20px";
            imageTD.style.borderLeft = this.unselectedBorderStyle;
            imageTD.style.borderTop = this.unselectedBorderStyle;
            imageTD.style.borderBottom = this.unselectedBorderStyle;

            //yxq update 2006/08/08
            //    if(input.ImageUrl!=null)
            //    {
            //    var imageUrl=input.ImageUrl; 
            //    var images=this.document.createElement("<image style:'"+this.imageStyle+"'>");
            //    images.src=imageUrl;
            //    imageTD.appendChild(images);
            //    }
            if (input.cusAttr('ImageUrl') != null && input.cusAttr('Selected') == undefined) {
                var imageUrl = input.cusAttr('ImageUrl');
                //var images = this.document.createElement("<image style:'" + this.imageStyle + "'>");

                // var images = HtmlHelper.createElement('image', {
                //     'style': this.imageStyle
                // });
                var images = $E(document).createElement("image", {
                    "style": this.imageStyle
                });

                images.src = imageUrl;
                imageTD.appendChild(images);
            }
            if (input.cusAttr('Selected') && input.cusAttr('Selected').toString().toLowerCase() == 'true') {
                //var images = this.document.createElement("<image style:'" + this.imageStyle + "'>");
                var images = $E(document).createElement('image', {
                    'style': this.imageStyle
                });
                images.src = this._element.cusAttr('ImagePath') + this.selectedImageSrc;
                imageTD.appendChild(images);
            } else //gct20070714:没有图片的时候，为了占据空间，加了一个Div
            {
                //var divTD = this.document.createElement("<div style=\"" + this.imageStyle + "\">");
                // var divTD = HtmlHelper.createElement('div', {
                //     'style': this.imageStyle
                // });
                var divTD = $E(document).createElement('div', {
                    'style': this.imageStyle
                });
                imageTD.appendChild(divTD);
            }

            var textTD = this.document.createElement("td");
            textTD.style.borderTop = this.unselectedBorderStyle;
            textTD.style.borderBottom = this.unselectedBorderStyle;

            var extendTD = this.document.createElement("td");
            //            extendTD.style.width="20px";
            //            extendTD.style.height="20px";
            extendTD.style.borderRight = this.unselectedBorderStyle;
            extendTD.style.borderTop = this.unselectedBorderStyle;
            extendTD.style.borderBottom = this.unselectedBorderStyle;

            //gct20070714:对于第三列，为了占据空间，也加了一个Div
            //var extendDivTD = this.document.createElement("<div style=\"" + this.imageStyle + "\">");
            var extendDivTD = $E(document).createElement('div', {
                'style': this.imageStyle
            });
            extendTD.appendChild(extendDivTD);


            var noBr = this.document.createElement("NOBR");
            noBr.innerHTML = itemText;
            textTD.appendChild(noBr);
            //======by zzq兼容性属性赋值====
            //item.Value = itemValue;
            //item.Text = itemText;
            //item.index = items.index + "." + initIndex;
            //item.itemID = input.itemID;

            item.cusAttr('Value', itemValue);
            item.cusAttr('Text', itemText);
            item.id = "ss" + items.index + initIndex;
            item.cusAttr('index', items.index + "." + initIndex);
            item.cusAttr('itemID', input.cusAttr("itemid"));

            //form引用属性赋值:
            //备忘录：
            //1.需要needPostBack属性判断是否需要post
            //2.需要多维数组容纳各MenuItem的Datas
            //input.AutoPostBack="False";
            if (input.cusAttr('AutoPostBack') && input.cusAttr('AutoPostBack').toString().toLowerCase() == "false") {
                // item.AutoPostBack = false;
                item.cusAttr('AutoPostBack', false); //2016.05.10 -- weiyin修改
                if (input.cusAttr('WinTitle'))
                // item.WinTite = input.WinTitle;
                    item.cusAttr('WinTite', input.cusAttr('WinTitle'));
                if (input.cusAttr('WinWidth'))
                // item.WinWidth = input.WinWidth;
                    item.cusAttr('WinWidth', input.cusAttr('WinWidth'));
                if (input.cusAttr('WinHeight'))
                // item.WinHeight = input.WinHeight;
                    item.cusAttr('WinHeight', input.cusAttr('WinHeight'));
                if (input.cusAttr('PartID'))
                // item.PartID = input.PartID;
                    item.cusAttr('PartID', input.cusAttr('PartID'));
                if (input.cusAttr('CustomInParams'))
                // item.CustomInParams = input.CustomInParams;
                    item.cusAttr('CustomInParams', input.cusAttr('CustomInParams'));
                if (input.cusAttr('HideStatusBar'))
                // item.HideStatusBar = input.HideStatusBar;
                    item.cusAttr('HideStatusBar', input.cusAttr('HideStatusBar'));
                if (input.cusAttr('CC'))
                // item.CC = input.CC;
                    item.cusAttr('CC', input.cusAttr('CC'));
                if (input.cusAttr('SDDB'))
                // item.SDDB = input.SDDB;
                    item.cusAttr('SDDB', input.cusAttr('SDDB'));
                if (input.cusAttr('SMI'))
                // item.SMI = input.SMI;
                    item.cusAttr('SMI', input.cusAttr('SMI'));
                if (input.cusAttr('SBTN'))
                // item.SBTN = input.SBTN;
                    item.cusAttr('SBTN', input.cusAttr('SBTN'));
            }

            item.appendChild(imageTD);
            item.appendChild(textTD);
            item.appendChild(extendTD);

            items.displayBody.appendChild(item);
            // if (HtmlHelper.getElementTags(input.children, "Items").length != 0) {
            if ($E(input.children).getElementTags("Items").length != 0) {
                var images = this.document.createElement("image");
                images.src = this._element.cusAttr('ImagePath') + this.arrowHead;
                extendTD.appendChild(images);
                this.menuItems[items.index + "." + initIndex] = this.CreatePopDiv(HtmlHelper.getElementTags(input.children, "Items")[0], items.index + "." + initIndex, initIndex);
            }
        }
    },

    moveSelectItem: function () {
        if (this.menuItems.length <= 0) {
            return;
        }
        var displayBody = this.menuItems[0].displayBody;
        if ($(displayBody).find("table").length > 0) {
            displayBody = $(displayBody).find("table")[0];
        }
        nL = displayBody.childNodes.length;
        if (this.Menu_nIndex >= nL) {
            this.Menu_nIndex = 1;
        } else if (this.Menu_nIndex <= 0) {
            this.Menu_nIndex = nL - 1;
        }
        //debugger;
        var sel = displayBody.childNodes[this.Menu_nIndex];
        if (sel.cusAttr("index") && this.menuItems[sel.cusAttr("index")] != null) {
            this.DisplayPopUp(this.menuItems[parseInt(sel.cusAttr("index"))], sel);
        } else {
            if (sel.cusAttr("index") != null)
                this.HiddenPopUp(sel);
        }

        //gct20070731
        var layer = 0;
        if (sel.cusAttr("index") != null)
            var layer = sel.cusAttr("index").split('.').length - 1;
        if (this.popsSelected[layer] != null) {
            //debugger;
            if (this.popsSelected[layer].cusAttr('Enabled'))
            //if(this.popMenu.children[0].children[this.Menu_nIndex-1].Enabled=="True")
            {
                //this.popsSelected[layer]现在是菜单项"TR"                
                var oldsel = this.popsSelected[layer];
                oldsel.style.background = "";
                oldsel.style.color = "";
                if (oldsel.children.length == 3) {
                    oldsel.childNodes[0].style.borderLeft = this.unselectedBorderStyle;
                    oldsel.childNodes[0].style.borderTop = this.unselectedBorderStyle;
                    oldsel.childNodes[0].style.borderBottom = this.unselectedBorderStyle;

                    oldsel.childNodes[1].style.borderTop = this.unselectedBorderStyle;
                    oldsel.childNodes[1].style.borderBottom = this.unselectedBorderStyle;

                    oldsel.childNodes[2].style.borderRight = this.unselectedBorderStyle;
                    oldsel.childNodes[2].style.borderTop = this.unselectedBorderStyle;
                    oldsel.childNodes[2].style.borderBottom = this.unselectedBorderStyle;
                }
            } else {
                //debugger;
            }


            //            
            //            if(oldsel.children.length==3)
            //            {
            //            oldsel.childNodes[0].style.borderLeft=this.unselectedBorderStyle;
            //            oldsel.childNodes[0].style.borderTop=this.unselectedBorderStyle;
            //            oldsel.childNodes[0].style.borderBottom=this.unselectedBorderStyle;
            //                    
            //            oldsel.childNodes[1].style.borderTop=this.unselectedBorderStyle;
            //            oldsel.childNodes[1].style.borderBottom=this.unselectedBorderStyle;
            //            
            //            oldsel.childNodes[2].style.borderRight=this.unselectedBorderStyle;
            //            oldsel.childNodes[2].style.borderTop=this.unselectedBorderStyle;
            //            oldsel.childNodes[2].style.borderBottom=this.unselectedBorderStyle;
            //            }
        }
        //debugger;
        this.popsSelected[layer] = sel;

        //if(this.popMenu.children[0].children[this.Menu_nIndex-1].Enabled=="True")
        if (this.popsSelected[layer].cusAttr('Enabled')) {
            //sel.style.border="1px";

            //sel.childNodes[0].style.border="1px";
            if (sel.children.length == 3) {
                sel.style.background = this.selectedColor;
                sel.childNodes[0].style.borderLeft = this.selectedBorderStyle;
                sel.childNodes[0].style.borderTop = this.selectedBorderStyle;
                sel.childNodes[0].style.borderBottom = this.selectedBorderStyle;

                sel.childNodes[1].style.borderTop = this.selectedBorderStyle;
                sel.childNodes[1].style.borderBottom = this.selectedBorderStyle;

                sel.childNodes[2].style.borderRight = this.selectedBorderStyle;
                sel.childNodes[2].style.borderTop = this.selectedBorderStyle;
                sel.childNodes[2].style.borderBottom = this.selectedBorderStyle;
            }
            //
        }

        //sel.style.borderWidth="1px";
        //sel.style.borderColor="darkblue";
        //sel.style.borderStyle ="solid";
        // this.Pops[0].hide();
        $(this.Pops[0]).css("visibility", "hidden");
        this.DropDown(true); //此时已经创建了弹出的Menu，所以不需要再在DropDown()中检查DrowDownButton对Menu项的Enabled控制，所以传参数true
    },
    oPopup_onEnter: function () {
        if (this.Menu_nIndex <= 0) return;
        var sel = this.menuItems[0].displayBody.childNodes[this.Menu_nIndex];
        if (sel != null) {
            //var eventSource = sel;
            this.eventSource = sel;
            if (!sel.cusAttr('Enabled')) {
                return;
            }
            // this.Pops[0].hide();
            $(this.Pops[0]).css("visibility", "hidden");
            if (this.eventSource.cusAttr('AutoPostBack') != undefined && this.eventSource.cusAttr('AutoPostBack').toString().toLowerCase() == "false") {
                //个性化处理，如果存在SBTN，则是转换过来的MenuItem，就直接调用源的Click
                var SBTN = this.eventSource.cusAttr('SBTN');
                if (SBTN) {
                    $find(SBTN).fireClick();
                    return;
                }
                //个性化处理，如果存在SDDB，则是移动过来的MenuItem，就直接调用源的Click
                var SDDB = this.eventSource.cusAttr('SDDB');
                if (SDDB) {
                    var SMI = this.eventSource.cusAttr('SMI');
                    $find(SDDB).fireItemClick(SMI);
                    return;
                }

                var pID = this.eventSource.cusAttr('PartID');
                if (pID) {
                    this.OnBeforeLoadData(this.eventSource);
                    this.ShowMenuForm(this.eventSource);
                } else {
                    var cc = this.eventSource.cusAttr('CC');
                    if (cc) {
                        eval(cc);
                    } else {
                        this._hidden.oldvalue = this._hidden.value;
                        this._hidden.value = this.eventSource.cusAttr('index');
                        this.fireMenuItemClick(this.eventSource);
                    }
                }
                return;
            }
            this._hidden.oldvalue = this._hidden.value;
            this._hidden.value = this.eventSource.cusAttr('index') + "," + this.eventSource.cusAttr('itemID');

            var _this = this;
            
            if (_this._element.cusAttr('onfirequeuedevents') != null) {
                //eval($(this.get_element()).attr('onfirequeuedevents'));

                if (_this.eventSource.cusAttr('VerifyNotNull') && _this.eventSource.cusAttr('VerifyNotNull').toString().toLowerCase() == "true" && _this.eventSource.cusAttr('TopPanelClientID') && _this.eventSource.cusAttr('TopPanelClientID') != "") {
                    if (!$ID(_this.eventSource.cusAttr('TopPanelClientID')).TopPanelNoEmptyVerify()) {
                        this.fireMenuItemClick(this.eventSource);
                        return;
                    }
                }

                //必须执行的方法
                _ClientJSExecQueueManager.Push(" __doPostBack(\"" + _this._element.id + "\", \"\");$find(\"" + _this._element.id + "\")._hidden.value = \"\"");
            }
            else {
                _ClientJSExecQueueManager.Push("$find(\"" + _this._element.id + "\")._hidden.value = \"\"");
            }
            this.fireMenuItemClick(this.eventSource);
            //如果存在AfterZlayerJsQueue，则代表弹出框了，在弹框结束后会自动启动ClientJSExecQueueManager.Start()方法,所以这里不处理；
            //不存在AfterZlayerJsQueue则代表没有弹出框，那么立即执行_ClientJSExecQueueManager.Start();
            //Start方法里会自动判断出是否是在有请求在跑，如果在跑则会等请求跑完再次执行_ClientJSExecQueueManager.Start；如果请求没有跑则会立即执行队列里的函数。
            //所以上面必须执行的方法一定会执行
            if (!window.AfterZlayerJsQueue) {
                _ClientJSExecQueueManager.Start();
            }
        }
    },
    oattcontrol_keydown: function () {
        //debugger;
        switch (event.keyCode) {
            case EventCodeDef.Enter:
                this.oPopup_onEnter();

                $Event(event).stopPropagation();
                $Event(event).preventDefault();
                break;
            case EventCodeDef.ArrowUp:
                //debugger;     
                if (!this.menuItems[0])
                    return;
                if (this.Menu_nIndex == -1)
                    this.Menu_nIndex = 1;
                this.isKeyBoardEvent = true;
                if (this.getNextItemIndex((this.Menu_nIndex - 1), true) != this.Menu_nIndex || this.isOnlyOneMenuItemEnabled()) {
                    this.Menu_nIndex = this.getNextItemIndex((this.Menu_nIndex - 1), true);
                    this.moveSelectItem();
                }
                break;
            case EventCodeDef.ArrowDown:
                if (!this.menuItems[0])
                    return;
                var displayBody = this.menuItems[0].displayBody;
                if ($(this.menuItems[0].displayBody).find("table").length > 0) {
                    displayBody = $(this.menuItems[0].displayBody).find("table")[0];
                }
                if (this.Menu_nIndex == -1)
                    this.Menu_nIndex = displayBody.childNodes.length - 1;
                this.isKeyBoardEvent = true;
                if (this.getNextItemIndex((this.Menu_nIndex + 1), false) != this.Menu_nIndex || this.isOnlyOneMenuItemEnabled()) {
                    this.Menu_nIndex = this.getNextItemIndex((this.Menu_nIndex + 1), false);
                    this.moveSelectItem();
                }
                break;
            case 39: //ArrowRight           
                //event.keyCode=9;
                //gct20070904: To capture the ArrowRight Key. The PopupMenu is automatically hidden, when ArrowRight keydown.           
                if (this.menuItems[0]) //有可能左右移动后，移到一个button，此时this.menuItems[0]为undefined，所以要判断一下
                    this.HiddenPopUp(this.menuItems[0]);
                this.getNext(true);
                break;
            case 37: //ArrowLeft
                if (this.menuItems[0])
                    this.HiddenPopUp(this.menuItems[0]);
                this.getNext(false);
                break;
        }
    },

    /*
    direction(shiftKey) :  向上:true, 向下:false;      
    */
    getNextItemIndex: function (curIndex, direction) {
        if (curIndex == this.Menu_nIndex)
            return curIndex;

        if (direction) { //向上
            var displayBody = this.menuItems[0].displayBody;
            //说明是多列情况，之前只考虑到了单列情况，导致多列的菜单上下键不能用。
            if ($(this.menuItems[0].displayBody).find("table").length > 0) {
                displayBody = $(this.menuItems[0].displayBody).find("table")[0];
            }
            if (curIndex == 0 || curIndex == -2)
                curIndex = displayBody.childNodes.length - 1;
            if (curIndex == this.Menu_nIndex)
                return curIndex;
            if (displayBody.childNodes[curIndex] && displayBody.childNodes[curIndex].cusAttr('Enabled'))
                return curIndex;
            else
                return this.getNextItemIndex(--curIndex, direction);
        } else {
            var displayBody = this.menuItems[0].displayBody;
            //说明是多列情况，之前只考虑到了单列情况，导致多列的菜单上下键不能用。
            if ($(this.menuItems[0].displayBody).find("table").length > 0) {
                displayBody = $(this.menuItems[0].displayBody).find("table")[0];
            }
            if (curIndex > displayBody.childNodes.length - 1)
                curIndex = 1;
            if (curIndex == this.Menu_nIndex)
                return curIndex;
            //考虑到内容太多的列table mahx
            if (displayBody.childNodes[curIndex] && displayBody.childNodes[curIndex].cusAttr('Enabled'))
                return curIndex;
            else
                return this.getNextItemIndex(++curIndex, direction);
        }
    },

    isOnlyOneMenuItemEnabled: function () {
        var isOnlyOneEnabled = true;
        var count = 0;
        //默认this.menuItems[0].displayBody.childNodes[0].Enabled
        //this.menuItems[0].displayBody.childNodes[0].Enabled==undefined

        var displayBody = this.menuItems[0].displayBody;
        //说明是多列情况，之前只考虑到了单列情况，导致多列的菜单上下键不能用。
        if ($(this.menuItems[0].displayBody).find("table").length > 0) {
            displayBody = $(this.menuItems[0].displayBody).find("table")[0];
        }
        for (var i = 1; i < displayBody.childNodes.length; i++) {
            // if (this.menuItems[0].displayBody.childNodes[i].Enabled)
            if (displayBody.childNodes[i].cusAttr('Enabled'))   //跨浏览器兼容修改 2016.05.10 -- weiyin
                count++;
            if (count > 1) {
                isOnlyOneEnabled = false;
                break;
            }
        }
        return isOnlyOneEnabled;
    },

    getNext: function (bR) {
        var nIndex = 0;
        var eles = this.findDDRs();

        if (eles.length > 0) {
            var curentElement = this.attachEventControl.getElementsByTagName("Button")[0];
            for (var i = 0; i < eles.length; i++) {
                if (curentElement == eles[i]) {
                    nIndex = i;
                    break;
                }
            }
            if (bR) {
                nIndex++;
            } else {
                nIndex--;
            }
            if (nIndex >= eles.length) {
                nIndex = 0;
            }
            if (nIndex < 0) {
                nIndex = eles.length - 1;
            }

            var input = eles[nIndex];
            var bGet = true;
            while (bGet) {
                try {
                    input = eles[nIndex];
                    input.focus();
                    bGet = false;
                } catch (ee) {
                    if (bR) {
                        nIndex++;
                    } else {
                        nIndex--;
                    }
                    if (nIndex >= eles.length) {
                        nIndex = 0;
                    }
                    if (nIndex < 0) {
                        nIndex = eles.length - 1;
                    }
                }
            }

        }
    },

    findDDRs: function () {
        var tbElement = [];
        var card = this.get_element().parentElement;
        while (!card.className.containsCssClass("ufpanel")) {
            card = card.parentElement;
        }
        var divs = card.getElementsByTagName("button");
        for (var i = 0, len = divs.length; i < len; i++) {
            var divElement = divs[i];
            if (divElement.parentElement.cusAttr("tag") == "dropdownbutton" && divElement.style.display != "none") {
                tbElement[i] = divElement;
            }
        }
        return tbElement;
        /*if(tbElement)
        {
        tbElement.focus();    
        $Event(event).stopPropagation();
        $Event(event).preventDefault();
        }*/
    },
    //创建列的集合
    CreateColumns: function (check) {
        var column;
        if (typeof (check) == "undefined") { }
        var columns = this.document.createElement("colgroup");
        for (var i = 0; i < 3; i++) {
            //var column = this.document.createElement("<col style='" + this.columstyle[i] + ">");
            column = HtmlHelper.createElement('col', {
                "style": this.columstyle[i]
            })
            columns.appendChild(column);
        }
        return columns;
    },
    //判断弹出窗口的弹出位置
    JudageDisplayPosition: function (parentLay, position, direction) {
        var displayWidth = position.width;
        var displayHeight = position.height;
        var offLeft = window.screenLeft;
        var offTop = window.screenTop;
        var winWidth = window.screen.width;
        var winHeitht = window.screen.height;
        // var parentLeft = parentLay.document.parentWindow.screenLeft;
        // var parentTop = parentLay.document.parentWindow.screenTop;
        // var parentWidth = parentLay.document.body.offsetWidth;
        // var parentHeight = parentLay.document.body.offsetHeight;
        var parentLeft = $E(parentLay).document.parentWindow.screenLeft;
        var parentTop = $E(parentLay).document.parentWindow.screenTop;
        var parentWidth = $E(parentLay).document.body.offsetWidth;
        var parentHeight = $E(parentLay).document.body.offsetHeight;
        if (direction == "right") {
            if (parseInt(winWidth) - parseInt(parentLeft) - parseInt(parentWidth) - parseInt(displayWidth) < 0) {
                return false;
            }
            return true;
        } else {
            if (parseInt(parentLeft) - parseInt(displayWidth) < 0) {
                return false;
            }
            return true;
        }
    },
    JudageDisplayLRPosition: function (parentLay, position) {
        var iX = 0;

        var displayWidth = position.width;
        var winWidth = window.screen.width;
        var parentLeft = 0;
        // if (event)
        // parentLeft = event.screenX;
        parentLeft = $(parentLay).offset().left;
        iX = parentLeft;
        if ((winWidth - parentLeft) < displayWidth) {
            iX = (winWidth - parentLeft) - displayWidth;
        }
        return iX;
    },
    JudageDisplayUpDownPosition: function (parentLay, position) {
        //        if(this.PopMenuType == 0)//个性化区域的PopMenu 一定向下弹出
        //            return true;
        //        else//功能区的PopMenu需要计算是否可以向下弹出
        {
            // //新方案
            // var displayHeight = position.height; //弹出的PopMenu的高
            // var body_clientHeight = window.document.body.clientHeight; //可视区域Height，不包括滚动条
            // var body_scrollHeight = window.document.body.scrollTop; //滚动条距离最上边可视区域的偏移量        
            // var ddb_height = parentLay.clientHeight; //DropDownButton的高度

            var rect_top = parentLay.getBoundingClientRect().top; //这个结果应该== this.getSigmaOffSetTop(parentLay) - body_scrollHeight

            // if (body_clientHeight - (this.getSigmaOffSetTop(parentLay) - body_scrollHeight) - ddb_height > displayHeight)
            //     return true; //可以向下弹出PopMenu
            // else
            //     return false; //不可以向下弹出PopMenu

            var tempHeight = document.body.clientHeight - rect_top - parentLay.offsetHeight;
            if (tempHeight > position.height) {
                return true;
            }
            return false;
        }
    },
    getSigmaOffSetTop: function (element) {
        var curElement = element;
        var curTop = curElement.offsetTop;
        while (curElement.offsetParent != null) {
            curElement = curElement.offsetParent;
            curTop = curTop + curElement.offsetTop;
        }
        return curTop;
    },
    //动态获取显示body的宽度
    GetDimention: function (popBody) {
        var width;
        var height;
        var curTable = $(popBody).find("table").eq(0);
        // document.body.appendChild(popBody);
        //var cols = popBody.document.body.getElementsByTagName("table")[0].getElementsByTagName("col");
        // var curCol = popBody.document.body.getElementsByTagName("table")[0].getElementsByTagName("col")[1];
        var curCol = curTable.find("col").eq(1);
        if (curCol.width() == "") {
            //debugger;
            //popBody.show(0, 0, 1, 1, this.get_element());
            //curCol.style.width = curCol.scrollWidth;
            //curTable.style.cssText += ";tablelayout:fixed;";
            //curCol.width(curCol.scrollWidth);
            curTable.css("tablelayout", "fixed");
            //popBody.hide();
        }

        //V2.1修改菜单的布局 by wangxiaoliang
        //--begin--
        //width = parseInt(curCol.style.width)+parseInt(cols[0].style.width)+parseInt(cols[2].style.width)+2;
        //width = popBody.document.body.getElementsByTagName("table")[0].clientWidth + 17;
        //---by zzq
        width = (curTable.width() || curTable[0].clientWidth) + 10;
        //--end--
        //height = popBody.document.body.scrollHeight;
	//---by zzq
        height = (curTable.height() || curTable[0].clientHeight) + 10;
        return new Dimention(parseInt(width), parseInt(height));
    },



    OnAfterWindowClose: function (ret) {
        var referenceData = null;
        if (ret) {
            //referenceData = TranslateInfor(ret);
            referenceData = PopupFormHelper.TranslateInfor(ret)
            _datas = referenceData;
            //var oEvent = createEventObject();
            var oEvent = new UF.UI.ChangeEventArgs();
            oEvent.result = _datas;
            oEvent.sender = this.get_element();
            //popupMenuAfterWindowClosedEvent.fire(oEvent);
            this.fireContentChanged(oEvent);
            //Test 接收数据
            //TestResult(_datas);
        }
    }, //end OnAfterWindwodClose

    OnBeforeLoadData: function (eventSource) {
        //var oEvent = createEventObject();        
        var oEvent = new UF.UI.ChangeEventArgs();
        oEvent.sender = eventSource;
        this.fireBeforeLoadData(oEvent)
    },

    ShowMenuForm: function (eventSource) {
        //TestAddParam();
        var url = this.GetUrl(eventSource);
        var title = eventSource.cusAttr('WinTitle');
        if (!title) title = "";
        var width = eventSource.cusAttr('WinWidth');
        var height = eventSource.cusAttr('WinHeight');
        var hideStatusBar = eventSource.cusAttr('HideStatusBar');
        if (hideStatusBar && hideStatusBar == "Y") {
            hideStatusBar = true;
        } else {
            hideStatusBar = false;
        }

        var ret = ShowModalDialog(url, title, height, width, hideStatusBar);
        this.OnAfterWindowClose(ret);

    }, //end ShowLabelForm
    AddParam: function (key, value, itemIndex) {
        if (this._dynamicParams == null) {
            this._dynamicParams = new Array();
        }
        if (itemIndex == undefined) {
            this._dynamicParams[key] = value;
        } else {
            var id = itemIndex + "__&_" + key; //将ItemIndex和Key组合，这样this._dynamicParams的键值就不会相同了
            this._dynamicParams[id] = value;
        }
    },
    GetUrl: function (eventSource) {
        var linkString = this.GetQueryString(eventSource);
        var url = "simple.aspx";
        if (url.indexOf("?") == -1) {
            url += "?" + linkString;
        } else if (url[url.length - 1] == "?" || url[url.length - 1] == "&") {
            url += linkString;
        } else {
            url += "&" + linkString;
        }
        return url;
    },

    GetQueryString: function (eventSource) {
        //var linkString = "lnk=" + eventSource.PartID + "&chromeType=4&ShowType=TitleLink";
        var linkString = "lnk=" + eventSource.cusAttr("PartID"); +"&chromeType=4&ShowType=TitleLink"; //===by zzq
        var pre = "&";
        if (this._dynamicParams != null) {
            for (id in this._dynamicParams) {
                //过滤insetAt()和removeAt()
                if (typeof (this._dynamicParams[id]) == "object" || typeof (this._dynamicParams[id]) == "function") {
                    continue;
                }
                var key = null;
                if (id.indexOf("__&_") < 0) {
                    key = id;
                } else {
                    var keys = id.split("__&_");
                    var itemIndex = keys[0];
                    if (itemIndex == this.eventSource.cusAttr('index').split('.')[1]) //是这个ItemIndex的参数才起作用
                    {
                        key = keys[1];
                    }
                }

                if (key != null)
                    linkString += pre + key + "=" + this._dynamicParams[id];
            }
        }
        var customInParams = eventSource.cusAttr("CustomInParams");
        if (customInParams != null && customInParams != "") {
            if (customInParams[0] == '&')
                linkString += customInParams;
            else
                linkString += "&" + customInParams;
        }
        return linkString;
    },
    get_IsCancelMenuItemClick: function () {
        return this._isCancelMenuItemClick;
    },
    set_IsCancelMenuItemClick: function (val) //一定是bool类型
    {
        if (val != null && val.toString().toLowerCase() == "true") {
            this._isCancelMenuItemClick = true;
        } else {
            this._isCancelMenuItemClick = false;
        }
    },
    CreatePopup: function (degree) {//新方法，先不用文档最下面那个
        if (degree < 0) // 层数不能小于0
            return null;
        if (this.Pops[degree] != null) //如果已经存在则不需创建
            return this.Pops[degree];

        if (degree == 0)
            //this.Pops[0] = window.createPopup(); //创建最顶层Popup窗口
            this.Pops[0] = window.document.createElement("div");
        else {
            if (this.Pops[degree - 1] == null)
                this.Pops[degree - 1] = this.CreatePopup(degree - 1) //递归回溯从第一层开始创建
            //this.Pops[degree] = this.Pops[degree - 1].document.parentWindow.createPopup(); //从父Popup窗口创建子Popup窗口
            this.Pops[degree] = window.document.createElement("div");
        }
        //要放到table的后面，不然样式有冲突，而且没有放到最外面的原因是，这些弹层div要随着postback消失，
        //放到最外面，body的根目录下，局部刷新，div没有销毁，会出现一系列的问题
        //$(this._element).parents("table.GLT").last().after(this.Pops[degree]);
        document.body.appendChild(this.Pops[degree]);

        //this.Pops[degree].document.body.setAttribute("degree", degree);
        this.Pops[degree].setAttribute("degree", degree);
    }
}

UF.UI.Menu.registerClass('UF.UI.Menu', UF.UI.Control);

Dimention = function (inputW, inputH) {
    //重排逻辑
    try{
        if($('.thc')[1] && $('.thc')[1].dataset&& JSON.parse($('.thc')[1].dataset.ca).fieldid == "DocLineNo" ){
            $($('.thc')[1]).on('mousedown',function(e){
                $('#ss04').css('display','');
            })
        }
    }catch(e){

    }
    
    this.width = inputW;
    this.height = inputH;
}

function EventCodeDef() { }
EventCodeDef.Enter = 13;
EventCodeDef.ArrowUp = 38;
EventCodeDef.ArrowDown = 40;

var Pops = new Array();

function CreatePopup(degree) {
    if (degree < 0) // 层数不能小于0
        return null;
    if (Pops[degree] != null) //如果已经存在则不需创建
        return Pops[degree];

    if (degree == 0)
        //Pops[0] = window.createPopup(); //创建最顶层Popup窗口
        Pops[0] = window.document.createElement("div");
    else {
        if (Pops[degree - 1] == null)
            Pops[degree - 1] = CreatePopup(degree - 1) //递归回溯从第一层开始创建
        //Pops[degree] = Pops[degree - 1].document.parentWindow.createPopup(); //从父Popup窗口创建子Popup窗口
        Pops[degree] = window.document.createElement("div");
    }
    document.body.appendChild(Pops[degree]);

    //Pops[degree].document.body.setAttribute("degree", degree);
    Pops[degree].setAttribute("degree", degree);
};;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.Listbox = function(element) {

    UF.UI.Listbox.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    this.imageCell = 0 ;
    this.captionCell = 1 ;
    this.valueCell = 2 ;
    this.tagCell = 3 ;
    this.selectedArray=new ListItemCollection();
    this.currentItem=null;
    this.optionsElement = null ;
    this.selectedClass="2k3ListboxItemSelected";
    this.normalClass="2k3ListboxItem";
    this.moveClass="2k3ListboxItemOver";
    // Handler    
       
}

UF.UI.Listbox.prototype = {

    initialize : function() {
        UF.UI.Listbox.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here      
        this.optionsElement = this.get_element().children[0] ;
	    with (this.optionsElement) 
	    {
		    for (var i = 0; i < rows.length; i++) 
		    {
		        if(typeof(rows[i].selected)!="undefined" && rows[i].selected=="True")
		        {
		            this.selectedArray.push(rows[i]);
		          //element.selectedIndex
		        }
			    with (rows[i].children[this.imageCell]) 
			    {
				    if (children.length == 0) 
				    {
				        rows[i].children[this.imageCell].innerText=" ";
				    }
				    else 
				    {
					    this.children[0].hideFocus = true ;
				    }
			    }
		    }
	    }
	    this.get_element().scrollTop=this.get_element().Top;
	    this.get_element().scrollLeft=this.get_element().Left;
	    this.get_element().selectedIndex =this.selectedArray.GetSeletedIndex();
        if(this.get_element().children[0].rows[this.get_element().selectedIndex]!=null)
            this.get_element().children[0].rows[this.get_element().selectedIndex].scrollIntoView(false);
	    this.setPostValue(); 
       
    },

    dispose : function() {
        // TODO: add your cleanup code here             
        
        
        this.imageCell = null ;
        this.captionCell = null ;
        this.valueCell = null ;
        this.tagCell = null ;
        
        this.selectedArray = null;
        this.currentItem = null;
        this.optionsElement = null ;
        
        this.selectedClass = null;
        this.normalClass = null;
        this.moveClass = null;
        
        UF.UI.Listbox.callBaseMethod(this, 'dispose');
    },

    //event    
    add_onchange : function(handler) {
        this.get_events().addHandler("onchange", handler);
    },
    remove_onchange : function(handler) {
        this.get_events().removeHandler("onchange", handler);
    },
    raiseonchange : function(args) {    	
      var eh = this.get_events().getHandler("onchange");
      if (eh) {
        eh(this, args);
      }
    },
    
    add_ondoubleclick : function(handler) {
        this.get_events().addHandler("ondoubleclick", handler);
    },
    remove_ondoubleclick : function(handler) {
        this.get_events().removeHandler("ondoubleclick", handler);
    },
    raiseonondoubleclick : function(args) {    	
      var eh = this.get_events().getHandler("ondoubleclick");
      if (eh) {
        eh(this, args);
      }
    },
    
    add_onrowclick : function(handler) {
        this.get_events().addHandler("onrowclick", handler);
    },
    remove_onrowclick : function(handler) {
        this.get_events().removeHandler("onrowclick", handler);
    },
    raiseonrowclick : function(args) {    	
      var eh = this.get_events().getHandler("onrowclick");
      if (eh) {
        eh(this, args);
      }
    },
    
    // TODO: (Step 2) Add your property accessors here      
    elementOnMouseOver : function() 
    {
	    var el = getRealItem(window.event.srcElement) ;
	    if (el.tagName == "TR") 
	    {
		    el.className = this.moveClass ;
	    }
	    el = null ;
    },

    elementOnMouseOut : function() 
    {
	    var el = getRealItem(window.event.srcElement) ;
	    if (el.tagName == "TR") 
	    {
		    if (typeof(el.selected)!="undefined" && el.selected=="True") 
		    {
			    el.className = this.selectedClass ;
		    }
		    else 
		    {
			    el.className = this.normalClass ;
		    }
	    }
	    el = null ;
    },

    elementOnClick : function() 
    {
	    var el = this.getRealItemClick(window.event.srcElement)
	    if (el.tagName == "TR") 
	    {
	       if(this.get_element().SelectType=="Multi")
	       {
    	     
	         if(this.currentItem==null||(event.ctrlKey==false&&event.shiftKey==false))
	         {
	           this.selectedArray.Clear();
	           this.currentItem=el;
	           this.selectedArray.push(el);
	         }
	         else
	         {
	           if(event.ctrlKey==true)
	           {
	             if(el.selected=="True")
	             {
	               this.selectedArray.pop(el);
	             }
	             else
	             {
	              this.selectedArray.push(el);
	             }
	           }
	           if(event.shiftKey==true)
	           {
	             this.selectedArray.Clear();
	             var begin;var end;
	             if(this.currentItem.rowIndex>=el.rowIndex)
	             {
	               begin=el.rowIndex;
	               end=this.currentItem.rowIndex;
	             }
	             else
	             {
	               end=el.rowIndex;
	               begin=this.currentItem.rowIndex;
	             }
	             for(var i=begin;i<=end;i++)
	             {
	               this.selectedArray.push(el.parentElement.rows[i]);
	             }
	           }
    	       
	         }
	          this.get_element().selectedIndex =this.selectedArray.GetSeletedIndex();
		      this.get_element().text ="";
	       }
	       else
	       {
		    if (this.get_element().selectedIndex != -1 && (this.get_element().selectedIndex!="" || (typeof(this.get_element().selectedIndex)=="number" && this.get_element().selectedIndex==0)))
		    {
    		   
			    el.parentElement.children[this.get_element().selectedIndex].className = this.normalClass ;
			    el.parentElement.children[this.get_element().selectedIndex].selected ="False" ;
    			
		    }
		    el.className = this.selectedClass ;
		    el.selected = "True";
		    this.get_element().selectedIndex = el.rowIndex ;
		    this.get_element().text = el.children[this.captionCell].innerText ;
		    this.get_element().value = el.children[this.valueCell].innerText ;
	       }
		    //onchange.fire() ;
		    //onrowclick.fire() ;
		    
           var args = new UF.UI.ChangeEventArgs();        
           this.raiseonchange(args); 
           
           args = new UF.UI.ChangeEventArgs();        
           this.raiseonrowclick(args); 
	    }
    	
	    el = null ;
	    this.setPostValue()
    },
    setPostValue : function()
    { 
      //perf: ???
      /*
      if(typeof(document.all(element.HelpId))!="undefined")
      {
        element.parentElement.document.all(element.HelpId).value=element.selectedIndex+"|"+parseInt(element.scrollTop)+","+parseInt(element.scrollLeft);
      }
      */
      if(typeof(this.get_element().document.all(this.get_element().HelpId))!="undefined")
      {
        this.get_element().document.all(this.get_element().HelpId).value=this.get_element().selectedIndex+"|"+parseInt(this.get_element().scrollTop)+","+parseInt(this.get_element().scrollLeft);
      }
      if(typeof(this.get_element().PostBackHandle)!="undefined")
      {
         eval(this.get_element().PostBackHandle);
      }
    },

    elementOnDoubleClick : function() 
    {
	    with (window.event) 
	    {
		    var el = getRealItemClick(srcElement) ;
		    cancelBubble = true ;
		    returnValue = false ;
	    }
	    if (el.tagName == "TR") {
		    ondoubleclick.fire() ;
	    }
	    el = null ;
	    return false ;
    },

    elementOnSelect : function() 
    {
	    with (window.event) {
		    cancelBubble = true ;
		    returnValue = false ;
	    }
	    return false ;
    },

    itemCount : function() 
    {
	    return this.optionsElement.rows.length ;
    },

    sort : function() 
    {
	    var bReverse = (sortType == "Descending") ;
	    for (var i = 0; i < this.optionsElement.rows.length; i++) {
     	    var strRowInsert = (this.optionsElement.rows[i].children[this.captionCell].innerText).toLowerCase() ;
            for (var s = 0; s <= i; s++) {
			    var strRowCurrent = (this.optionsElement.rows[s].children[this.captionCell].innerText).toLowerCase() ;
			    if (((!bReverse && strRowInsert < strRowCurrent) || (bReverse && strRowInsert > strRowCurrent)) && (i != s)) {
				    with (this.optionsElement.insertRow(this.optionsElement.rows[s].rowIndex)) {
					    className = this.normalClass ;
					    for (var c = 0; c <= 3; c++) { insertCell(c) }
					    with (children[this.imageCell]) {
						    className = "2k3ListboxImage" ;
						    innerHTML = this.optionsElement.rows[i + 1].children[this.imageCell].innerHTML ;
					    }
					    with (children[this.captionCell]) {
						    className = "2k3ListboxCaption" ;
						    innerHTML = this.optionsElement.rows[i + 1].children[this.captionCell].innerHTML ;
					    }
					    with (children[this.valueCell]) {
						    className = "2k3ListboxValue" ;
						    innerText = this.optionsElement.rows[i + 1].children[this.valueCell].innerText ;
					    }
					    with (children[this.tagCell]) {
						    className = "2k3ListboxTag" ;
						    innerText = this.optionsElement.rows[i + 1].children[this.tagCell].innerText ;
					    }
				    }
                    this.optionsElement.deleteRow(this.optionsElement.rows[i + 1].rowIndex) ;
                    break ;
                }
            }
	    }
	    setSelectedItem(getItemIndex(this.get_element().text)) ;
    },

    addItem : function(itmType, text, value, itemIndex, exData, tagData) 
    {
	    var objNewRow = this.optionsElement.insertRow(itemIndex) ;
	    with (objNewRow) {
		    className = this.normalClass ;
		    for (var c = 0; c <= 3; c++) { insertCell(c) }
		    with (children[this.imageCell]) {
			    className = "2k3ListboxImage" ;
			    switch ((itmType).toLowerCase()) {
				    case "n":
					    innerHTML = "<img src='" + this.get_element().currentStyle.noImageUrl + "'>" ;
					    break ;
				    case "i":
					    if (exData == "") {
						    exData = this.get_element().currentStyle.noImageUrl ;
					    }
					    innerHTML = "<img src='" + exData + "'>" ;
					    break ;
				    case "c":
					    if (exData == "" || (exData).toLowerCase() == "false" || !exData) {
						    innerHTML = "<input type='checkbox' hidefocus style='height: 15px; overflow: hidden;'>" ;
					    }
					    else {
						    innerHTML = "<input type='checkbox' hidefocus checked style='height: 15px; overflow: hidden;'>" ;
					    }
					    break ;
			    }
		    }
		    with (children[this.captionCell]) {
			    className = "2k3ListboxCaption" ;
			    innerHTML = text ;
		    }
		    with (children[this.valueCell]) {
			    className = "2k3ListboxValue" ;
			    innerText = value ;
		    }
		    with (children[this.tagCell]) {
			    className = "2k3ListboxTag" ;
			    innerText = tagData ;
		    }
	    }
	    //setSelectedItem(getItemIndex(element.text)) ;
	    setSelectedItem(getItemIndex(text)) ;//yxq
    },

    removeItem : function(itemIndex) 
    {
	    this.optionsElement.deleteRow(itemIndex) ;
	    if (this.get_element().selectedIndex == itemIndex) {
		    this.get_element().selectedIndex = -1 ;
		    this.get_element().text = "" ;
		    this.get_element().value = "" ;
		    onchange.fire() ;
	    }
    },

    showItem : function(itemIndex) 
    {
	    this.optionsElement.rows[itemIndex].style.display = "" ;
    },

    hideItem : function(itemIndex) 
    {
	    this.optionsElement.rows[itemIndex].style.display = "none" ;
	    if (selectedIndex == itemIndex) {
		    this.get_element().selectedIndex = -1 ;
		    this.get_element().text = "" ;
		    this.get_element().value = "" ;
		    onchange.fire() ;
	    }
    },

    getItemIndex : function(itemText) 
    {
	    with (this.optionsElement) {
		    for (var i = 0; i < rows.length; i++) {
			    with (rows[i].children[this.captionCell]) {
				    if (innerText == itemText) {
					    return rows[i].rowIndex ;
				    }
			    }
		    }
	    }
	    return -1 ;
    },

    getItemText : function(itemIndex) 
    {
	    return this.optionsElement.rows[itemIndex].children[this.captionCell].innerText ;
    },

    setItemText : function(itemIndex,value) 
    {
	    this.optionsElement.rows[itemIndex].children[this.captionCell].innerText =value;
    },

    getItemValue : function(itemIndex) 
    {
	    return this.optionsElement.rows[itemIndex].children[this.valueCell].innerText ;
    },

    getItemHTML : function(itemIndex) 
    {
	    return this.optionsElement.rows[itemIndex].children[this.captionCell].innerHTML ;
    },

    getItemTag : function(itemIndex) 
    {
	    return this.optionsElement.rows[itemIndex].children[this.tagCell].innerText ;
    },

    getItemChecked : function(itemIndex) 
    {
	    with (this.optionsElement.rows[itemIndex].children[this.imageCell]) {
		    if (children[0].tagName != "INPUT") {
			    return false ;
		    }
		    else {
			    return children[0].checked ;
		    }
	    }
    },

    setSelectedItem : function(itemIndex) 
    {
	    if (itemIndex == -1) {
		    if (this.get_element().selectedIndex != -1) {
			    if (this.get_element().selectedIndex > this.optionsElement.rows.length - 1) {
				    this.get_element().selectedIndex = -1 ;
				    this.get_element().text = "" ;
				    this.get_element().value = "" ;
				    return ;
			    }
			    this.optionsElement.rows[this.get_element().selectedIndex].className = this.normalClass ;
			    this.get_element().selectedIndex = -1 ;
			    this.get_element().text = "" ;
			    this.get_element().value = "" ;
			    onchange.fire() ;
		    }
	    }
	    else {
		    if (this.get_element().selectedIndex > this.optionsElement.rows.length - 1) {
			    this.get_element().selectedIndex = -1 ;
			    this.get_element().text = "" ;
			    this.get_element().value = "" ;
			    return ;
		    }
		    if (this.get_element().selectedIndex != -1) {
			    this.optionsElement.rows[this.get_element().selectedIndex].className = this.normalClass ;
		    }
		    with (this.optionsElement.rows[itemIndex]) {
			    className = this.selectedClass ;
			    this.get_element().selectedIndex = rowIndex ;
			    this.get_element().text = children[this.captionCell].innerText ;
			    this.get_element().value = children[this.valueCell].innerText ;
		    }
		    
		    //onchange.fire() ;
		    
		    var args = new UF.UI.ChangeEventArgs();                    
            this.raiseonchange(args);   
	    }
    },

    getRealItem : function(el) 
    {
	    if (el != null) {
		    if (el.tagName == "IMG") { el = el.parentElement ; }
		    if (el.tagName == "INPUT") { el = el.parentElement ; }
		    if (el.tagName == "LI") { el = el.parentElement ; }
		    switch (el.className) {
			    case "2k3ListboxImage":
				    return el.parentElement ;
				    break ;
			    case "2k3ListboxCaption":
				    return el.parentElement ;
				    break ;
			    default:
				    return el ;
				    break ;
		    }
	    }
	    else {
		    return el ;
	    }
    },

    getRealItemClick : function(el) 
    {
	    if (el != null) {
		    if (el.tagName == "IMG") { el = el.parentElement ; }
		    if (el.tagName == "LI") { el = el.parentElement ; }
		    switch (el.className) {
			    case "2k3ListboxImage":
				    return el.parentElement ;
				    break ;
			    case "2k3ListboxCaption":
				    return el.parentElement ;
				    break ;
			    default:
				    return el ;
				    break ;
		    }
	    }
	    else 
	    {
		    return el ;
	    }
    }   
}
UF.UI.Listbox.registerClass('UF.UI.Listbox', UF.UI.Control);

ListItemCollection = function()
{
    this.selectedClass="2k3ListboxItemSelected";
    this.normalClass="2k3ListboxItem";
    this.moveClass="2k3ListboxItemOver";
    this.Item=[];
}
ListItemCollection.prototype={
    dispose : function()
    {
        Array.clear(this.Item);
        this.Item = null;
    },
    Clear : function()
    {
        for(var i=0;i<this.Item.length;i++)
        {
            this.Item[i].selected="False";
            this.Item[i].className=this.normalClass;
        }
        this.Item=[];
    },
    push : function(Item)
    {
        Item.className=this.selectedClass;
        Item.selected="True";
        this.Item.push(Item);
    },
    pop : function(Item)
    {
        Item.selected="False";
        Item.className=this.normalClass;
    },
    GetSeletedIndex : function()
    {
        var result="";
        for(var i=0;i<this.Item.length;i++)
        {
            if(this.Item[i].selected=="True")
            {
                result+=this.Item[i].rowIndex+",";
            }
        }
        if(result.length>=1)
        {
            result=result.substring(0,result.length-1);
        }
        else
            result=-1;
        return result;
    },
    GetItemByIndex : function()
    {
        for(var i=0;i<this.Item.length;i++)
        {
            if(this.Item[i].selected=="True")
            {
                result+=this.Item[i].rowIndex+",";
            }
        }
        if(result.length>=1)
        {
            result=result.substring(0,result.length-1);
        }
    }
}
;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.Wizard = function (element) {

    UF.UI.Wizard.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    this._hidden;
    this._readOnly = false;

    // Handler    


}

UF.UI.Wizard.prototype = {

    initialize: function () {
        UF.UI.Wizard.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here

        // Create delegates Attach events        


    },

    dispose: function () {
        // TODO: add your cleanup code here
        this._hidden = null;
        UF.UI.Wizard.callBaseMethod(this, 'dispose');
    },

    //event    
    add_onchange: function (handler) {
        this.get_events().addHandler("onchange", handler);
    },
    remove_onchange: function (handler) {
        this.get_events().removeHandler("onchange", handler);
    },
    raiseonchange: function (args) {
        var eh = this.get_events().getHandler("onchange");
        if (eh) {
            eh(this, args);
        }
    },

    // TODO: (Step 2) Add your property accessors here   
    /********************************************************** Property *********************************************************/
    // 控件的ReadOnly属性
    get_ReadOnly: function () {
        return this._readOnly;
    },
    set_ReadOnly: function (isReadOnly) {
        isReadOnly = ToBoolean(isReadOnly);
        for (var i = 0, len = this._element.children.length; i < len; i++) {
            $(this._element.children[i]).attr("readOnly", isReadOnly);
        }
        this._readOnly = isReadOnly;
    },
    get_Enabled: function () {
        return !this.get_ReadOnly();
    },

    set_Enabled: function (isEnabled) {
        this.set_ReadOnly(!isEnabled);
    },

    // 控件的visible属性
    get_Visible: function () {
        return (this._element.style.visibility != "hidden");
    },

    set_Visible: function (isVisible) {
        this._element.style.visibility = isVisible ? "visible" : "hidden";
    },
    get_Type: function () {
        return ControlType.Wizad;
    },
    get_CurrentPageIndex: function () {
        //gct20070622
        return this.get_hiddenField().value;
    },

    set_CurrentPageIndex: function (index) {
        this.get_hiddenField().value = index;
        this.page_onchange();
    },

    /************************************************************* Method ************************************************************/

    get_hiddenField: function () {
        if (this._hidden == null) {
            //===ownerDocument
            //this._hidden = this.get_element().document.getElementById(this.get_element().name);
            this._hidden = window.document.getElementById($(this._element).attr('name'));
        }
        return this._hidden;
    },

    SetFocus: function () {

    },

    CurrentPage: function () {
        //
        for (var i = 0; i < this._element.children.length; i++) {
            var elePage = this._element.children[i];
            if (elePage.style.display == 'none') {
                continue;
            }
            return elePage;
        }
        //
        this.fireOnChangeEvent();
    },

    Clear: function () {
        //
        for (var i = 0; i < this._element.children.length; i++) {
            var elePage = this._element.children[i];
            if (elePage) {
                this.ClearControls(elePage);
            }
            return elePage;
        }
        //
    },
    ClearControls: function (elePage) {
        var ele = [];
        var nCount = 0;
        var fieldCtrls = elePage.getElementsByTagName("span");
        for (var i = 0, len = fieldCtrls.length; i < len; i++) {
            if (fieldCtrls[i].className == "border4Box UFTextBox") {
                ele[nCount] = fieldCtrls[i];
                ele[nCount].Value = "";
                nCount++;
            }
            else if (fieldCtrls[i].className == "4BorderMO Reference") {
                ele[nCount] = fieldCtrls[i];
                ele[nCount].Key = "-1";
                ele[nCount].Value = "";
                ele[nCount].Text = "";
                nCount++;
            } else if (fieldCtrls[i].className == "4BorderMO DropDownList") {
                ele[nCount] = fieldCtrls[i];
                ele[nCount].Value = "-1";
                nCount++;
            }
        }
        return ele;
    },
    page_onchange: function () {
        if (this._element.cusAttr("Server") && this._element.cusAttr("Server").toString().toLowerCase() == "true") {
            __doPostBack(this._element.id, '');
            return;
        }
        //
        for (var i = 0; i < this._element.children.length; i++) {
            var elePage = this._element.children[i];
            if (this.get_hiddenField().value.indexOf("$ID") >= 0) {
                this.get_hiddenField().value = eval(this.get_hiddenField().value);
            }
            if (this.get_hiddenField().value == i) {
                elePage.style.visibility = 'visible';
                elePage.style.display = '';
                //算高度
              TdSetHeightHelper.GetInstance($(elePage),"yesWizard").init();
            } else {
                elePage.style.visibility = 'hidden';
                elePage.style.display = 'none';
            }
        }
        //
        this.fireOnChangeEvent();
    },

    fireOnChangeEvent: function () {
        //      var evt = createEventObject();
        //      evt.SelectIndex = this.get_hiddenField().value;
        //	    evt.srcElement = element;
        //	    this.onchangeevent.fire(evt);

        var args = new UF.UI.ChangeEventArgs();
        args.value = this.get_hiddenField().value;
        args.srcElement = this._element;
        this.raiseonchange(args);
    }
}

UF.UI.Wizard.registerClass('UF.UI.Wizard', UF.UI.Control);
;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

/*
说明：
    ReadOnly 属性与!Enabled属性相同
    如果ReadOnly，则设置 disabled

    如果只需要设置TextBox不可输入，而可点按钮，
    则设置 TextBoxReadOnly = true,ReadOnly = false;

数据返回格式
<ReferenceReturns>
 <ReferenceReturn>
   <ReturnField name=\"Code\" value=\"Value Content\" />
   <ReturnField name=\"Name\" value=\"Text Content\" />
 </ReferenceReturn>
</ReferenceReturns>

*/
UF.UI.Expression = function (element) {

    UF.UI.Expression.initializeBase(this, [element]);
    var _initGo;
    // TODO : (Step 1) Add your property variables here
    this._textbox;
    this._button;
    this._text;
    this._value;
    this._hidden;
    this._IsShow = false;
    this._ReadOnly = false;
    this._TextReadOnly = false;
    this.dataDom = null;
    // Handler
    this._keydownHandler;
    this._clickHandler;
}
UF.UI.Expression.prototype = {
    initialize: function () {
        _initGo = function initGo(_this) {
            _this._clickHandler = Function.createDelegate(_this, _this.onButtonClicked);
            $addHandler(_this._button, "click", _this._clickHandler);
            _this._keydownHandler = Function.createDelegate(_this, _this.onkeyDown);
            $addHandler(_this._textbox, "keydown", _this._keydownHandler);

            _this._textboxfocusHandler = Function.createDelegate(_this, _this.onInputFocus);
            $addHandler(_this._textbox, "focus", _this._textboxfocusHandler);
            _this._textboxblurHandler = Function.createDelegate(_this, _this.onInputBlur);
            $addHandler(_this._textbox, "blur", _this._textboxblurHandler);

            _this.set_IsInitComlete(true); //gct20080917:设置初始化完成标志，用于脏数据保存提示
        }
        UF.UI.Expression.callBaseMethod(this, 'initialize');
        this._textbox = this._element.children[0];

        for (var i = this._element.children.length - 1; i > 0; i--) {
            if (this._element.children[i].id == this._element.id + "_button") {
                this._button = this._element.children[i];
            }
        }
        this._IsShow = ToBoolean(this._element.cusAttr('IsShow'));
        this._ReadOnly = this._element.cusAttr("ReadOnly");
        if (!this._ReadOnly)
            this._ReadOnly = ToBoolean(ExpressionTemplate.ReadOnly);

        if (this._element.hasCusAttr('TextReadOnly'))
            this._TextReadOnly = ToBoolean(this._element.cusAttr("TextReadOnly"));
        else
            this._TextReadOnly = ToBoolean(ExpressionTemplate.TextReadOnly);

        if (this.btnClassName == null)
            this.btnClassName = ExpressionTemplate.BtnClassName;
        if (this.btnClassName_Dis == null)
            this.btnClassName_Dis = ExpressionTemplate.BtnClassName_Dis;

        if (this._element.hasCusAttr("Value"))
            this._value = this._element.cusAttr("Value");
        if (this._element.hasCusAttr("Text"))
            this._text = this._element.cusAttr("Text");
        // TODO: add your initalization code here
        this._hidden = window.document.getElementById(this._element.cusAttr('HelpId'));

        var ret = this.initControl();
        if (ret)
            _initGo(this);
        // Create delegates Attach events
        //this._clickHandler = Function.createDelegate(this, this.onButtonClicked);
        //$addHandler(this._button, "click", this._clickHandler);
        //this._keydownHandler = Function.createDelegate(this, this.onkeyDown);
        //$addHandler(this._textbox, "keydown", this._keydownHandler);

        //this._textboxfocusHandler = Function.createDelegate(this, this.onInputFocus);
        //$addHandler(this._textbox, "focus", this._textboxfocusHandler);
        //this._textboxblurHandler = Function.createDelegate(this, this.onInputBlur);
        //$addHandler(this._textbox, "blur", this._textboxblurHandler);

        //this.set_IsInitComlete(true); //gct20080917:设置初始化完成标志，用于脏数据保存提示
    },

    dispose: function () {
        // TODO: add your cleanup code here
        if (this._clickHandler) {
            $removeHandler(this._button, "click", this._clickHandler);
            this._clickHandler = null;
        }
        if (this._keydownHandler) {
            $removeHandler(this._textbox, "keydown", this._keydownHandler);
            this._keydownHandler = null;
        }
        this._textbox = null;
        this._button = null;
        this._IsShow = null;

        UF.UI.Expression.callBaseMethod(this, 'dispose');
    },

    initControl: function () {
        if (this._ReadOnly) {
            $(this._button).attr("disabled", true);
        }
        // if(this._TextReadOnly){
        this._textbox.readOnly = true;
        // }

        this._hidden.value = escape(this.getXMLValue(this._value, this._text, this._IsShow.toString()));

        if (this._IsShow) {
            this._IsShow = false;
            this._element.cusAttr('IsShow', "false");
            this._hidden.value = escape(this.getXMLValue(this._value, this._text, this._IsShow.toString()));
            return this.ShowRefForm();
        }
        return 1;
    },

    getXMLValue: function (V, T, S) {
        if (this.dataDom == null) {
            //===by zzq 兼容的创建xml文档对象
            this.dataDom = Basic.GetXmlDom();   //new ActiveXObject("MSXML.DOMDocument");
            //tmpEl = this.dataDom.createElement("D");
            //this.dataDom.documentElement = tmpEl;
        }
        //var el = this.dataDom.childNodes[0];
        var el = this.dataDom.createElement("D");
        el.setAttribute("V", V);
        el.setAttribute("T", T);
        el.setAttribute("S", S);
        var strXml = 0;
        //if (el.xml)
        //    strXml = el.xml;
        //else if (el.outerHTML)
        //    strXml = el.outerHTML;
        strXml = XMLHelper.serializeXMLNodeToString(el)
        var re = /\+/g;
        strXml = strXml.replace(re, "^^");
        return strXml;
    },

    get_Type: function () {
        return ControlType.Expression;
    },
    get_InputParameter: function () {
        return this._element.cusAttr('InputParameter');
    },
    set_InputParameter: function (value) {
        this._element.cusAttr('InputParameter', value);
    },

    get_Value: function () {
        return this._value;
    },
    set_Value: function (value) {
        this._textbox.value = value;
        this._value = value;
        this._text = value;
        this._hidden.value = escape(this.getXMLValue(this._value, this._text, this._IsShow.toString()));
    },

    get_Text: function () {
        return this._text;
    },
    set_Text: function (text) {
        this._text = text;
        this._element.cusAttr("Text", text);
        this._hidden.value = escape(this.getXMLValue(this._value, this._text, this._IsShow.toString()));
    },

    // 控件的disabled属性
    get_Enabled: function () {
        return !this._element.cusAttr("disabled")
    },

    set_Enabled: function (isEnabled) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        var isEnabled = ToBoolean(isEnabled);
        this._element.cusAttr("disabled", !isEnabled);
        for (var i = 0, len = this.get_element().children.length; i < len; i++) {
            $(this._element.children[i]).attr("disabled", !isEnabled);
        }
        if (!isEnabled) {
            this._textbox.className = this.tbClassName_D;
            this._button.className = this.btnClassName_Dis;
            this.btnmouseOutClass = this.btnClassName_Dis;
            this._element.className = UIControlClass.getReadOnlyCss(this._element);
        }
        else {
            this._textbox.className = this.tbClassName;
            this._button.className = this.btnClassName;
            this.btnmouseOutClass = this.btnClassName;
            this._element.className = UIControlClass.getNotReadOnlyCss(this._element);
        }
    },
    // 控件的ReadOnly属性
    get_ReadOnly: function () {
        return this._ReadOnly;
    },
    set_ReadOnly: function (isReadOnly) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;
        if (!this.get_Enabled())//由于客户端区分ReadOnly和Enabled状态，所以在设置ReadOnly的时候，要优先考虑Enabled属性
            return;
        isReadOnly = ToBoolean(isReadOnly);
        this._ReadOnly = isReadOnly;
        if (this._textbox)
            $(this._textbox).attr("readOnly", true); //gct20080819:表达式控件的文本框永不可录入
        if (this._button) {
            if (isReadOnly) {
                $(this._button).attr("disabled", true);
            }
            else {
                if (this.get_Enabled()) {
                    $(this._button).attr("disabled", false);
                }
            }
        }
        if (isReadOnly) {
            this._textbox.className = this.tbClassName_R;
            this._button.className = this.btnClassName_Dis;
            this.btnmouseOutClass = this.btnClassName_Dis;
            this._element.className = UIControlClass.getReadOnlyCss(this._element);
        }
        else {
            this._textbox.className = this.tbClassName;
            this._button.className = this.btnClassName;
            this.btnmouseOutClass = this.btnClassName;
            this._element.className = UIControlClass.getNotReadOnlyCss(this._element);;
        }
        this._element.cusAttr("ReadOnly", isReadOnly);
    },
    // 控件的visible属性
    get_Visible: function () {
        return (this._element.style.visibility != "hidden");
    },

    set_Visible: function (isVisible) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        this._element.style.visibility = isVisible ? "visible" : "hidden";
    },

    //响应键盘事件。
    onkeyDown: function () {
        //if(ReadOnly) return;    
        switch (window.event.keyCode) {
            case KeyCode.down:
                if (window.event.altKey) {
                    this.onButtonClicked();
                    $Event(event).stopPropagation();
                }
                break;
            case KeyCode.F2:
                this.onButtonClicked();
                $Event(event).stopPropagation();
                break;
                //case KeyCode.enter: 
                //    this.onInputReturn(); 
                //event.cancelBubble=true; 
                break;
        }
    }, //end onkeyDow
    //按回车键
    onInputReturn: function () {
        if (this._textbox.value == this.Value) {
            return;
        }
        //输入空值后回车清空参照
        this.OnContentChanged(this._textbox.value);
    },
    //点击参照按钮,弹出参照页面
    onButtonClicked: function () {
        if (this.get_ReadOnly() == true)
            return;
        this.SetIsShowForm("true");
    },

    GetUrl: function () {
        var linkString = this.GetQueryString();
        // var url='';
        // $.ajaxSettings.async = false;
        // $.ajax({
        //     url: "../mvc/Expression/IsNewEnable",
        //     type: "get",
        //     cache: false,
        //     async: false,//使用同步加载
        //     success: function (data) {
        //         // data.Data=false;
        //         if (data.Data) {
        //             // 新版公式编辑器
        //             url = "mvc/Expression/ExpressionEditor?formType=dataGrid";
        //         } else {
        //             // 旧版公式编辑器
        //             url = "Simple.aspx?lnk=6b14cbe3-39b3-44db-9d20-e86dfe39f5d3";
        //         }

        //         if (url.indexOf("?") == -1) {
        //             url += "?" + linkString;
        //         }
        //         else if (url[url.length - 1] == "?" || url[url.length - 1] == "&") {
        //             url += linkString;
        //         } else {
        //             url += "&" + linkString;
        //         }
        //     }
        // });
        // $.ajaxSettings.async = true;
        var url = "Simple.aspx?lnk=6b14cbe3-39b3-44db-9d20-e86dfe39f5d3";
        //var url=this.get_element().PageUrl;
        if (url.indexOf("?") == -1) {
            url += "?" + linkString;
        }
        else if (url[url.length - 1] == "?" || url[url.length - 1] == "&") {
            url += linkString;
        } else {
            url += "&" + linkString;
        }
        return url;
        //var url=this.get_element().PageUrl;
    }, //end GetUrl

    GetQueryString: function () {
        var linkString = "ExpressionType=" + this._element.cusAttr('ExpressionType') + "&FunCategory=" + this._element.cusAttr('FunCategory') + "&InputParameter=" + this._element.cusAttr('InputParameter') + "&EleId=" + this.get_element().id;
        return linkString;
    }, //end GetQueryString
    //参照返回结果
    ShowRefForm: function (inputCode) {
        var url = this.GetUrl();
        var title = this._element.cusAttr('RefTitle');
        if (!title) title = "";
        var width = this._element.cusAttr('W');
        var height = this._element.cusAttr('H');

        //        var ret=showModalDialog(url,this._textbox,title,height,width);
        var self = this;
        ShowModalDialogForAll(url, title, 650, 1000, false, false, function (returnValue) {
            if (returnValue != null && returnValue != undefined) {
                //ret = unescapeHTML(ret);
                // self._textbox.value = returnValue;
                self.OnContentChanged(returnValue);
            }
            try {
                // self._textbox.focus();
                self._textbox.select();
            } catch (e) { }
            _initGo(self);
        });

        return 0;
        /*
        if (ret != null && ret != undefined) {
            //ret = unescapeHTML(ret);
            this.OnContentChanged(ret);
        }
        try {
            this._textbox.focus();
            this._textbox.select();
        } catch (e) { }
        //*/
    }, //end sho

    //===by zzq 处理参照返回回调
    //showDialogCallback: function (ret) {
    //    if (ret != null && ret != undefined) {
    //        //ret = unescapeHTML(ret);
    //        this.OnContentChanged(ret);
    //    }
    //    try {
    //        this._textbox.focus();
    //        this._textbox.select();
    //    } catch (e) { }
    //    _initGo(self);
    //},

    OnContentChanged: function (ret) {
        if (typeof ret === "object") {
            referenceData = new ReferenceData();
            referenceData.Rows = []
            referenceData.Rows[0] = []
            referenceData.Rows[0].Name = ret.Name
            referenceData.Rows[0].Code = ret.Code
            referenceData.Rows[0].Id = ""
        } else {
            var referenceData = PopupFormHelper.TranslateInfor(ret);
        }
        if (referenceData == null) {
            referenceData = new ReferenceData();
        }
        if (this._value == referenceData.GetValue("Code"))   //如果Value没有变更，不做处理
            return;
        this._value = referenceData.GetValue("Code");
        this._text = referenceData.GetValue("Name");
        this._hidden.value = escape(this.getXMLValue(this._value, this._text, this._IsShow.toString()));
        this._textbox.value = this._text;

        this.fireContentChangedEvent(referenceData);
        if (this.get_IsInitComlete() == true && Get_Global_IsPageLoadComplete() == true)//设置控件变化（脏数据标识之一）应该在控件初始化完成才有效。
            this.set_IsValueChanged(true);
    }, //end  OnContentChanged

    fireContentChangedEvent: function (data) {
        //抛出参照数据改变事件，关联控件订阅该事件给相关控件付值
        var args = new UF.UI.ChangeEventArgs();
        args.result = data;
        this.raiseContentChanged(args);
        //referenceContentChangeEvent.fire(oEvent);
    },    //end fireContentChangeEvent  

    add_ContentChanged: function (handler) {
        this.get_events().addHandler("ContentChanged", handler);
    },
    remove_ContentChanged: function (handler) {
        this.get_events().removeHandler("ContentChanged", handler);
    },
    raiseContentChanged: function (args) {
        if (this.get_element().onchange) {
            //如果控件的AutoPost为true，则onchange就有值
            //这里就会触发postback，需要开发自己处理数据收集问题。
            if (typeof (this._element.cusAttr('PostBackHandle')) != "undefined") {
                eval(this._element.cusAttr('PostBackHandle'));
            }
        }

        var eh = this.get_events().getHandler("ContentChanged");
        if (eh) {
            eh(this, args);
        }
    },
    SetIsShowForm: function (data) {

        this._hidden.value = escape(this.getXMLValue(this._value, this._text, data.toString()));
        if (ToBoolean(data)) {
            if (typeof (this._element.cusAttr('PostBackHandle')) != "undefined") {
                eval(this._element.cusAttr('PostBackHandle'));
            }
        }
    },
    //焦点进入和离开，给TextBox付Code和Name
    onInputBlur: function () {
        if (this._textbox) {
            this.ControlBlur();
            this._textbox.value = this._text;
        }

    },

    onInputFocus: function () {
        this.ControlFocus();
        this._textbox.value = this._value;
        try {
            this._textbox.select();
        } catch (e) { }
    }

}
UF.UI.Expression.registerClass('UF.UI.Expression', UF.UI.InputControl);

function ExpressionTemplate() { }
ExpressionTemplate.Enabled = InputControlTemplate.Enabled;
ExpressionTemplate.ReadOnly = InputControlTemplate.ReadOnly;
ExpressionTemplate.TBClassName = InputControlTemplate.TBClassName;
ExpressionTemplate.TBClassName_R = InputControlTemplate.TBClassName_R;
ExpressionTemplate.TBClassName_D = InputControlTemplate.TBClassName_D;
ExpressionTemplate.BtnClassName = "btn ExpBtn";
ExpressionTemplate.BtnClassName_Dis = "btn ExpBtn_Dis";
ExpressionTemplate.TextReadOnly = "False";

;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.DropDownButton = function(element) {

    UF.UI.DropDownButton.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here 
    this._button;  
    this._runtimeMenuItemState;
    this._runtimeMenuItemVisible;
    this._menu;
    this.IsFirstShowMenu = true;
   
    // Handler
    this._focusHandler;
    this._blurHandler;    
    this._clickHandler;
    this._keyDownHandler;
    
    //权限属性，是否可见
    this.visibleAuthority;
    //权限属性，是否可编辑
    this.enableAuthority;
}

UF.UI.DropDownButton.prototype = {

    initialize: function () {
        //女侠为跨浏览器而修改
        UF.UI.DropDownButton.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here        
        this._runtimeMenuItemState = new Array();
        this._runtimeMenuItemVisible = new Array();
        this._button = this.GetTargetBtnfunction();

        this.visibleAuthority = this._element.cusAttr("VisibleAuthority");
        this.enableAuthority = this._element.cusAttr("EnableAuthority");
        // Create delegates Attach events  
        if (this._button) {
            var _this = this;
            this._focusHandler = Function.createDelegate(this, this.buttonFocus);
            $(this._button).bind("focus", function () {
                _this.buttonFocus();
            })

            this._blurHandler = Function.createDelegate(this, this.buttonBlur);
            $(this._button).bind("blur", function () {
                _this.buttonBlur();
                //===========隐藏弹出的Menu=======
                $(".root").hide();
            })
            this._clickHandler = Function.createDelegate(this, this.buttonClick);
            $(this._button).bind("click", function () {
                _this.buttonClick();
            })
            this._keyDownHandler = Function.createDelegate(this, this.onkeyDown);
            $(this._button).bind("keydown", function () {
                _this.onkeyDown();
            })
        }
    },

    dispose: function () {
        //女侠为跨浏览器而修改
        // TODO: add your cleanup code here
        if (this._blurHandler) {
            //$removeHandler(this._button, "blur", this._blurHandler);
            this._blurHandler = null;
            $(this._button).unbind("blur");
        }
        if (this._focusHandler) {
            //$removeHandler(this._button, "focus", this._focusHandler);
            this._focusHandler = null;
            $(this._button).unbind("focus");
        }
        if (this._clickHandler) {
            //$removeHandler(this._button, "click", this._clickHandler);
            this._clickHandler = null;
            $(this._button).unbind("click");
        }
        if (this._keyDownHandler) {
            //$removeHandler(this._button, "keydown", this._keyDownHandler);
            this._keyDownHandler = null;
            $(this._button).unbind("keydown");

        }
        this.IsFirstShowMenu = null;
        this._runtimeMenuItemState = null;
        this._runtimeMenuItemVisible = null;
        UF.UI.DropDownButton.callBaseMethod(this, 'dispose');
    },

    //event onclick  
    add_onclick: function (handler) {
        this.get_events().addHandler("onclick", handler);
    },
    remove_onclick: function (handler) {
        this.get_events().removeHandler("onclick", handler);
    },
    raiseonclick: function (args) {
        var eh = this.get_events().getHandler("onclick");
        if (eh) {
            eh(this, args);
        }
    },

    //event BeforeShowMenu  
    add_BeforeShowMenu: function (handler) {
        this.get_events().addHandler("BeforeShowMenu", handler);
    },
    remove_BeforeShowMenu: function (handler) {
        this.get_events().removeHandler("BeforeShowMenu", handler);
    },
    raiseBeforeShowMenu: function (args) {
        var eh = this.get_events().getHandler("BeforeShowMenu");
        if (eh) {
            eh(this, args);
        } else {
            this.ShowMenu();
        }
    },

    add_MenuItemClick: function (handler) {
        this.get_events().addHandler("MenuItemClick", handler);
    },
    remove_MenuItemClick: function (handler) {
        this.get_events().removeHandler("MenuItemClick", handler);
    },
    raiseMenuItemclick: function (args) {
        var eh = this.get_events().getHandler("MenuItemClick");
        if (eh) {
            eh(this, args);
        }
    },
    add_BeforeLoadData: function (handler) {
        this.get_events().addHandler("BeforeLoadData", handler);
    },
    remove_BeforeLoadData: function (handler) {
        this.get_events().removeHandler("BeforeLoadData", handler);
    },
    raiseBeforeLoadData: function (args) {
        var eh = this.get_events().getHandler("BeforeLoadData");

        if (eh) {
            eh(this, args);
        }
    },
    add_ContentChanged: function (handler) {
        this.get_events().addHandler("ContentChanged", handler);
    },
    remove_ContentChanged: function (handler) {
        this.get_events().removeHandler("ContentChanged", handler);
    },
    raiseContentChanged: function (args) {
        var eh = this.get_events().getHandler("ContentChanged");
        if (eh) {
            eh(this, args);
        }
    },

    // TODO: (Step 2) Add your property accessors here 
    get_Type: function () {
        return ControlType.DropDownButton;
    },

    GetTargetBtnfunction: function () {
        //这里添加一个对象声明，否则该对象没有赋值的话，会导致return时报错，导致控件初始化失败。modify by kxl 
        var targetBtn = null;
        try {
            var element = $(this._element);
            var id = this.get_id();
            if (element.find("#" + id + "_button").length) {
                targetBtn = element.find("#" + id + "_button")[0];
            }
        }
        catch (ee) {
            targetBtn = null;
        }
        return targetBtn;
    },

    SetMenuItemEnable: function (menuItemIndex, enableFlag) {
        var mi = this.get_MenuItemByItemIndex(menuItemIndex);
        if (mi && mi.cusAttr("itemID")) {
            this.SetMenuItemEnableByItemID(mi.cusAttr("itemID"), enableFlag);
        }
    },
    SetMenuItemEnableByItemID: function (itemID, enableFlag) {
        var mi = this.get_MenuItemByItemID(itemID);
        if (mi) {
            this._runtimeMenuItemState[itemID] = enableFlag;
            this._runtimeMenuItemState.length++;
        }
        if (mi && mi.cusAttr("ToDDB")) {
            $find(mi.cusAttr("ToDDB")).SetMenuItemEnableByItemID(mi.cusAttr("ToMI"), enableFlag);
        } else if (mi && mi.cusAttr("ToBTN")) {
            $find(mi.cusAttr("ToBTN")).set_Enabled(enableFlag);
        }
    },
    SetMenuItemVisible: function (menuItemValue, visibleFlag) {
        var mi = this.get_MenuItemByValue(menuItemValue);
        if (mi && mi.cusAttr("itemID")) {
            this.SetMenuItemVisibleByItemID(mi.cusAttr("itemID"), visibleFlag);
        }
    },
    SetMenuItemVisibleByItemID: function (menuItemID, visibleFlag) {
        var mi = this.get_MenuItemByItemID(menuItemID);
        if (mi) {
            this._runtimeMenuItemVisible[menuItemID] = visibleFlag;
            this._runtimeMenuItemVisible.length++;
        }
        if (mi && mi.cusAttr("ToDDB")) {
            $find(mi.cusAttr("ToDDB")).SetMenuItemVisibleByItemID(mi.cusAttr("ToMI"), visibleFlag);
        } else if (mi && mi.cusAttr("ToBTN")) {
            $find(mi.cusAttr("ToBTN")).set_Visible(visibleFlag);
        }
    },

    get_MenuItemStateList: function () {
        return this._runtimeMenuItemState;
    },
    get_MenuItemVisibleList: function () {
        if (this._runtimeMenuItemVisible.length > 0)
            return this._runtimeMenuItemVisible;
        else
            return null;
    },
    get_Menu: function () {
        return this._menu;
    },
    set_Menu: function (menu) {
        this._menu = menu;
    },
    buttonFocus: function () {
        var button = this.GetTargetBtnfunction();
        $(button).css("border", "1px dashed #FFFFFF");
        //this.get_element().children[0].children[0].children[0].children[0].children[1].children[0].style.border = "1px dashed #FFFFFF";
    },

    buttonBlur: function () {
        var button = this.GetTargetBtnfunction();
        $(button).css("border", "");

        // 解决：点击按钮弹出框失去焦点后，其父级没有隐藏，导致遮盖了其他元素--by lxd
        // if ($("#rootu_M_p0_DDBtnOperation_curMenu") !== null) {
        //     $("#rootu_M_p0_DDBtnOperation_curMenu").parent().css("height","");
        // }
        if(this._menu && this._menu.oPopupBody1) {
            this._menu.oPopupBody1.style.height = "";
        }

        //this.get_element().children[0].children[0].children[0].children[0].children[1].children[0].style.border = "";
    },
    buttonClick: function () {
        var args = new UF.UI.ChangeEventArgs();
        this.raiseonclick(args);
        this.raiseBeforeShowMenu(args);
    },
    onkeyDown: function () {
        switch (event.keyCode) {
            case EventCodeDef.ArrowUp:
            case EventCodeDef.ArrowDown:
                if (this.IsFirstShowMenu == true) {
                    this.buttonClick();
                    window.$Event(event).stopPropagation();
                    $Event(event).preventDefault();
                }
                break;
        }
    },
    set_Enabled: function (isEnabled) {
        if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
            return;
        if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
            return;

        isEnabled = ToBoolean(isEnabled);
        var button = this.GetTargetBtnfunction();
        $(button).attr("disabled", !isEnabled);
        this._element.cusAttr("disabled", !isEnabled);
        this.set_HDValue("Enabled", isEnabled.toString().toLowerCase());
    },
    get_Enabled: function () {
        return !this._element.cusAttr("disabled");

    },
    get_SelectedMenuItemText: function () {
        var itemText;
        if (this.get_Menu() != null && this.get_Menu().eventSource != null)
            itemText = this.get_Menu().eventSource.Text;
        return itemText;
    },
    ShowMenu: function () {
        if (!this.get_Enabled()) return;
        if (this._menu) {
            this._menu.DropDown();
            this.IsFirstShowMenu = false;
        }
    },
    HideMenu: function () {
        if (this._menu.Pops[0])
            $(this._menu.Pops[0]).css("visibility", "hidden");
    },

    //4个性化 直接触发指定MenuItem的Click
    fireItemClick: function (ItemID) {
        if (!this._menu)
            return;
        if (!this._menu.oPopupBody1)
            this.buttonClick();
        if (!this._menu.oPopupBody1 || _ClientCallBackManager.Runing == true) {
            _ClientJSExecQueueManager.Clear("DDBClick");
            _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').fireItemClick('" + ItemID + "');", "DDBClick");
            return;
        }
        var _this = this;
        $(this._menu.oPopupBody1).find("tr").each(function (i, item) {
            if (item.cusAttr("ItemID") == ItemID) {
                _this._menu.oPopupEvent = new Object();
                _this._menu.oPopupEvent.srcElement = $(item).find("td").get(1);
                _this._menu.oPopup_onclick();
                _this.HideMenu();
                return false;
            }
        })
    },
    //通过menuItemValue找到menuitem的xml
    get_MenuItemByValue: function (menuItemValue) {
        var menus = this.get_element().children[1].children[0].children;
        for (var i = 0, len = menus.length; i < len; i++) {
            if (menus[i].cusAttr("Value") == menuItemValue) {
                return menus[i];
            }
        }
    },
    //通过menuItemID找到MenuItem的xml
    get_MenuItemByItemID: function (menuItemID) {
        var menus = this._element.children[1].children[0].children;
        for (var i = 0, len = menus.length; i < len; i++) {
            if (menus[i].cusAttr("itemID") == menuItemID) {
                return menus[i];
            }
        }
    },
    //通过menuItemIndex找到MenuItem的xml
    get_MenuItemByItemIndex: function (menuItemIndex) {
        var menus = this._element.children[1].children[0].children;
        var cur = null;
        for (var i = 0, len = menus.length; i < len; i++) {
            if (menus[i].hasCusAttr("Index") && menus[i].cusAttr("Index").toString() == menuItemIndex.toString()) {
                cur = menus[i];
            }
        }
        if (cur == null)
            cur = menus[i];
        return cur;
    }


}

UF.UI.DropDownButton.registerClass('UF.UI.DropDownButton', UF.UI.Control);;
// JScript source code  
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.DataGrid = function (element) {

    UF.UI.DataGrid.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    ///????没有使用
    this.Values = [];
    this.GridIsInFocus = false;
    this.stringEventSrc = "";
    this.SortUPPattem = "sort_up";
    this.SortDownPattem = "sort_down";
    ///不要这么用
    this.UNDEFINED_VALUE; //未定义实例
    ///????一下三个数组定义为枚举
    this.RowAttribute = new Array("Status", "CopyRowArg");
    this.ColAttribute = new Array("ControlType", "FieldID", "Width", "Sorted", "DefaultValue", "HasChecked"); //收取默认值
    this.CellAttribute = new Array("Value", "MultiLang", "R");
    this.MainCols; //表格主体列结构描述
    this.M_Table; //控件布局控制表格
    this.D_Head; //主体表格表头引用
    this.D_Body; //主体表格表体引用
    this.D_Foot; //主体表格表尾引用
    this.S_Body; //主体表格引用
    this.FullScreen = null;//全屏元素
    this.isFullScreen = false;//是否全屏
    this.m_eventProcessLock = false; //表格事件互琐标志
    this.m_gridFocusEventProcessed = false; //判断当前光标事件是否被处理
    this.m_toolbarDiv; //表格分页工具条
    this.m_activeContainer; //主体表格容器对象
    ///????没有使用
    this.MainTableController; //表格行编辑控制对象
    ///????没有使用
    this.currentTable; //当前表格
    this.pages; //用于记录翻页对象
    //????
    this.ParentDocument; //指向控件容器的Document对象的指针
    ///????没有使用
    this.Controls; //行
    this.dataDom; //xml Domdocument对象实例，用于构造从界面收集数据的xml串
    this.eventNode; //记录当前触发的事件类型
    ///????没有使用
    this.calendar; //日历对象定义
    ///????没有使用
    this.cacuCol; //用来自动计算列的函数
    ///????没有使用
    this.testControl = 0; //测试当前
    this.ControlArray = new Object(); //控件列表(用来存储每一列的控件)
    this.m_deletedRows = []; //被删除列集合
    this.m_currentRowIndex = 0; //记录表格中当前行的索引号
    //是否延迟模拟切换页签
    this.m_isRelaySwitchTag = false;

    //added by u9lkc 20111027 个性化模拟切页签时 应用开发注册的callback事件都不响应
    this.m_IsSwitchTabPage = false;

    //wanglei 20110902: 计算组件引用
    this.caculator = null;

    //wanglei 20110913: 合计行标志位
    this.sumRowFlag = "Original";
    this.newSumRowFlag = "New";

    /*if(top.DataGridCurrentRowIndex4PCol == null)//gct20090825：top.DataGridCurrentRowIndex4PCol在客户端缓存m_currentRowIndex4PCol
    {
        top.DataGridCurrentRowIndex4PCol = [];
        top.DataGridCurrentRowIndex4PCol[this.get_id()] = null;
    }//v5 不能随意使用top
    */
    if (top.DataGridCurrentRowIndex4PCol == null) //gct20090825：top.DataGridCurrentRowIndex4PCol在客户端缓存m_currentRowIndex4PCol
    {
        top.DataGridCurrentRowIndex4PCol = [];
        top.DataGridCurrentRowIndex4PCol[this.get_id()] = null;
    }
    this.m_currentRowIndex4PCol = top.DataGridCurrentRowIndex4PCol[this.get_id()]; //gct20090825，恢复m_currentRowIndex4PCol
    //yangkuna20101011:批量修改标志
    this.m_batchModifyManager = null;
    // 暂时注释掉，多页签模式，批量修改挂在top上，如果强制关页签中端修改，之后页签会无法再进行批量修改操作
    if (top.DataGridBatchModifyManagerContainer && top.DataGridBatchModifyManagerContainer[this.get_id()]) {
        this.m_batchModifyManager = top.DataGridBatchModifyManagerContainer[this.get_id()];
    }

    this.m_currentColumnIndex = 1; //记录表格中当前列的索引号,从第一列开始

    //gct20071120:注释掉，采用给相应方法多增加一个参数(rowIndex)的方式解决，目的是采用rowIndex，而不是采用全局的this._owner.m_currentRowIndex
    //this.m_IsCurrentRowIndexChanged = false ; //add 2007-11-7 ,用与回车换行时，记录之前行的RowIndex
    this._insertedRowNoType = InsertedRowNoType.HighAverage; //插入行行号取值方式（默认方式）
    this.m_lastRowIndex = 0; //记录表格中当前行的索引号,从第0行开始
    this.m_columns = 0; //表格中的列数
    this.m_rows = 0; //表格中的行数
    this.m_gridReadOnly = false; //表格并非只读
    this.m_lastSelectedRow = -1; //上一被选择列
    this.m_clientUserControl = new Object(); //客户端用户自定义控件集合
    //this.m_startSelectedRowIndexs =[]; //当前初始被选择行索引集合
    this.m_lastRowBackColor = DefaultSymbol.BodyCellBackgroundcolor; //上次被选择行的背景颜色

    this.m_gridFaciesManager; //外观管理对象实例
    this.m_behaviorManager; //表头通用行为管理类
    this.m_tableDimentionManager; //表格布局管理对象
    this.m_gridBodyEventsHandler; //表体事件分发句柄    
    //一下定义重复????
    //this.m_gridFaciesManager;  //外观管理对象实例
    this.m_pageBreakManagerInstance; //控件分页行为
    this.m_CustomFilterManagerInstance; //客户化筛选工具条
    this.m_editMenuToolbar; //编辑菜单工具条
    this.m_InCellEditing = false;
    this.m_AlwaysCollectData = false;
    this.m_AlreadyBeforeCellEnter = false;
    this.m_MaxRows = -1;
    this.m_CancelEditing = true;
    this.m_ArrNos = [];
    this.m_FireEventByClickRefButton = true;
    this.m_IsStartEdit = false;
    this.m_PageSize = 999999;
    // 多选计数
    this.m_isSelected = false; // 是否发生过选择
    this.m_initCount = 0; // 初始化其他页面选择条数
    this.m_pageCount = 0; // 初始化当前页选择条数
    //该Array存储根据指定条件列的Value进行合计时，被合计列的列名、条件列的列名、条件列的Value三者之间的对应关系
    this.m_aggregateColumnFieldNameValues = new Array();

    this.RefSplitter2 = "__&URS2&_";

    this.m_FrozenControlColumn = false; // = "FrozenCtrlCol"//后台输出是否锁定列属
    //为个性化做特殊处理，存储原有列顺序信息
    this.m_OldColumnIndex = [];

    this.m_PageIndex = 0;
    this.m_PageCount = 1;
    this.m_TotalRows = 0;

    this.m_SumAllData = false; //合计所有数据（DB）
    this.m_SumSelectedData = false; //合计选中行数据
    this.m_isCheckedByClick = true;

    //Grid的脏数据标识
    this.Grid_IsDirtyData = false;
    //Grid的客户端数据发生变化的行Key值集合--判断客户端数据是否与服务器端数据是否一致
    this.Grid_ClientRowDataDirtyDic = {};

    this.ViewDirty = false;
    this.m_Hidden_State = null;
    this.m_ColumnIndexList = [];
    //参与Grid默认值设置的列
    this.m_DefaultValueColumns = [];
    this.m_DefaultValueColumnsOrder = [];
    this.DefaultValueSplitString = "__*Split*_";
    this._columnsInforForEdit = [];

    // Sort Columns List Array,has order,will join with "," when PostBack
    // {"FieldID1","FieldID2"}
    // Default,set Limit Value 3
    this.m_SortColumns = [];
    this.m_SortColumnsLimit = 3;

    this.m_IsSortSelectRecords = false;
    this.m_SortedSelectIDs = [];
    this.m_UnSelectIDs = [];
    this.m_AllowEditSingleRow = true;

    this.$element = $(this.get_element());

    this.Maximized();
    // Handler    
    //更新参照返回值
    var _this = this;
    this.getColumnHeadCell = function (columnIndex, FieldID) {
        var rowIndex = this.D_Head.children.length - 1;
        if (this.D_Head.children[rowIndex].cells[columnIndex] && this.D_Head.children[rowIndex].cells[columnIndex].cusAttr('FieldID') == FieldID) {
            return this.D_Head.children[rowIndex].cells[columnIndex];
        } else {
            for (var i = rowIndex; i >= 0; i--) {
                for (var j = 0; j < this.D_Head.children[i].cells.length; j++) {
                    if (this.D_Head.children[i].cells[j].cusAttr('FieldID') == FieldID) {
                        return this.D_Head.children[i].cells[j];
                    }
                }
            }
        }
        return null;
    }
    this.GetCurrentColumnsInfor = function () {
        var oldColIndex = this.m_currentColumnIndex;
        //var colName = this.MainCols[oldColIndex].FieldID;
        var colName = this.MainCols[oldColIndex].cusAttr('FieldID');

        if (this._element.cusAttr('EditStatus') == DisplayStyle.Browser)
            return;
        if (this.m_currentRowIndex < 0)
            return;

        var ids = this.get_element().id + "_";
        var count = 0;
        var fromColIndex, toColIndex;
        fromColIndex = 0;
        toColIndex = this.MainCols.length;
        //清除数据，重新计算
        this._columnsInforForEdit = [];

        for (var i = fromColIndex; i < toColIndex; i++) {
            var col = this.MainCols[i];
            if (col.cusAttr('visible')) {
                //
                if (col.cusAttr("ColEditCtrlClientID4P") != null) {
                    if (!$find(col.cusAttr("ColEditCtrlClientID4P")))
                        continue;
                }
                // if($(this.MainCols[i]).attr('IsEAll')=="false"){
                if (col.cusAttr('IsEAll') == "false") {
                    continue;
                }
                //
                var name = col.cusAttr('Name');
                if (this.D_Head.children.length > 1) {
                    if (this.getColumnHeadCell(i, col.cusAttr('FieldID'))) {
                        name = this.getColumnHeadCell(i, col.cusAttr('FieldID')).innerText;
                    } else {
                        name = "";
                    }
                }
                if (!name || name.trim() == "") {
                    continue;
                }
                //         
                var c;
                if (col.cusAttr("ColEditCtrlClientID4P")) {
                    var replaceControlID = col.cusAttr("ColEditCtrlClientID4P");
                    if (replaceControlID) {
                        c = $ID(replaceControlID);
                    }
                    if (this.GetColumnType(i) == ControlType.RefControl) {
                        if (c && c.control) {
                            if (c.control.raiseBeforeLoadData) {
                                c.control.raiseBeforeLoadData(Sys.EventArgs.Empty);
                            }
                        }
                    }
                    if (c) {
                        var colInfo = new ColumnEditInfo(col.cusAttr('FieldID'), name);
                        colInfo.Control = c;
                        this._columnsInforForEdit[count] = colInfo;
                        if (i == this.m_currentColumnIndex) {
                            colInfo.Enabled = this.AllowEdit(i);
                            colInfo.IsInit = true;
                            if (colInfo.Enabled) {
                                colInfo.IsDefault = true;
                            }
                        }
                        count++;
                        continue;
                    }
                } else {
                    c = $get(ids + col.cusAttr('FieldID'));
                }

                if (c) {
                    var colInfo = new ColumnEditInfo(col.cusAttr('FieldID'), name);
                    colInfo.Control = c;
                    if (i == this.m_currentColumnIndex) {
                        colInfo.Enabled = this.AllowEdit(i);
                        colInfo.IsInit = true;
                        if (colInfo.Enabled) {
                            colInfo.IsDefault = true;
                        }
                    }
                    this._columnsInforForEdit[count] = colInfo;
                } else {
                    if (col.cusAttr('ControlType') == "NORMAL") {
                        var colInfo = new ColumnEditInfo(col.cusAttr('FieldID'), name);
                        //colInfo.Control = document.createElement("<Input type=\"text\"  class=\"border4Box\" />");

                        colInfo.Control = $E(window.document).createElement('Input', {
                            'type': 'text',
                            'class': 'border4Box'
                        });
                        if (i == this.m_currentColumnIndex) {
                            colInfo.Enabled = this.AllowEdit(i);
                            colInfo.IsInit = true;
                            if (colInfo.Enabled) {
                                colInfo.IsDefault = true;
                            }
                        }
                        this._columnsInforForEdit[count] = colInfo;
                    } else if (col.cusAttr('ControlType') == "CHECKBOX") {
                        var colInfo = new ColumnEditInfo(col.cusAttr('FieldID'), name);
                        //colInfo.Control = document.createElement("<Input type=\"checkbox\"  class=\"border4Box\" />");
                        colInfo.Control = $E(window.document).createElement('Input', {
                            'type': 'checkbox',
                            'class': 'border4Box'
                        });
                        if (i == this.m_currentColumnIndex) {
                            colInfo.Enabled = this.AllowEdit(i);
                            colInfo.IsInit = true;
                            if (colInfo.Enabled) {
                                colInfo.IsDefault = true;
                            }
                        }
                        this._columnsInforForEdit[count] = colInfo;
                    }
                }
                if (this._columnsInforForEdit[count]) {
                    count++;
                }
            }
        }
        this.m_currentColumnIndex = oldColIndex;
    }
    this.InitColumnInfor = function (index, colName) {
        if (_ClientCallBackManager.Runing == true) {
            return;
        }
        var colIndex = this.GetColumnIndex(colName);
        var col = this.MainCols[colIndex];
        var c;
        if (col.cusAttr("ColEditCtrlClientID4P")) {
            var replaceControlID = col.cusAttr("ColEditCtrlClientID4P");
            if (replaceControlID) {
                c = $ID(replaceControlID);
            }
            if (this.GetColumnType(colIndex) == ControlType.RefControl) {
                if (c && c.control) {
                    if (c.control.raiseBeforeLoadData) {
                        c.control.raiseBeforeLoadData(Sys.EventArgs.Empty);
                    }
                }
            }
            if (c) {
                if (this.IsNeedSwitchTabPage(colIndex)) {
                    _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').InitColumnInfor(" + index + ",'" + colName + "');");
                    if (window.retvShowGridEdit) {
                        _ClientJSExecQueueManager.Push("if(window.retvShowGridEdit) { window.retvShowGridEdit.CallMe(); }");
                    }
                    this.m_currentColumnIndex = colIndex;
                    this.ImitateSwitchTabPage(true);
                    return;
                }
                var colInfo = this._columnsInforForEdit[index];
                colInfo.IsInit = true;
                colInfo.Control = c;
                colInfo.Enabled = this.AllowEdit(colIndex);
                this._columnsInforForEdit[index] = colInfo;
                return;
            }
        } else {
            c = $get(this.get_id() + "_" + colName);
        }

        var cell = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(this.m_currentRowIndex, colIndex);
        if (this.m_gridBodyEventsHandler && this.m_gridBodyEventsHandler.GridEditHelper.CellEditActive) {
            this.m_gridBodyEventsHandler.CanEndEdit(false);
        }
        if (cell) {
            if (this.AllowEdit(colIndex)) {
                this.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.StartCellEdit(cell);
                this.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.EndCellEdit(cell);
            } else {
                //yangkuna20100714:参照控件需要设置参照参数
                if (col.cusAttr('ControlType') == "REF") {
                    var reference = this.CreateReferenceControl(colIndex);
                    var refJS = reference.control;
                    this.SetReferenceParameters(refJS, colIndex, this.m_currentRowIndex, reference.cusAttr("RefPara"));
                }
            }
        }

        if (c) {
            var colInfo = this._columnsInforForEdit[index];
            colInfo.Control = c;
            colInfo.Enabled = this.AllowEdit(colIndex);
            colInfo.IsInit = true;
            this._columnsInforForEdit[index] = colInfo;
        } else {
            if (col.cusAttr('ControlType') == "NORMAL") {
                var colInfo = this._columnsInforForEdit[index];
                colInfo.Enabled = this.AllowEdit(colIndex);
                colInfo.IsInit = true;
                this._columnsInforForEdit[index] = colInfo;
            } else if (col.cusAttr('ControlType') == "CHECKBOX") {
                var colInfo = this._columnsInforForEdit[index];
                colInfo.Enabled = this.AllowEdit(colIndex);
                colInfo.IsInit = true;
                this._columnsInforForEdit[index] = colInfo;
            }
        }
        this._columnsInforForEdit[index].IsInit = true;
    }
    this.InitColumnsInfor = function (colName) {
        var oldColIndex = this.m_currentColumnIndex;

        if (this._element.cusAttr('EditStatus') == DisplayStyle.Browser)
            return;
        if (this.m_currentRowIndex < 0)
            return;

        var ids = this._element.id + "_";
        var count = 0;
        var fromColIndex, toColIndex;
        fromColIndex = 0;
        toColIndex = this.MainCols.length;
        if (colName != null) {
            fromColIndex = this.GetColumnIndex(colName);
            toColIndex = fromColIndex + 1;
        }
        //清除数据，重新计算
        this._columnsInforForEdit = [];

        for (var i = fromColIndex; i < toColIndex; i++) {
            var col = this.MainCols[i];
            if (col.cusAttr('visible')) {
                //
                if (col.cusAttr("ColEditCtrlClientID4P") != null) {
                    if (!$find(col.cusAttr("ColEditCtrlClientID4P")))
                        continue;
                    //if($find(this.MainCols[i].getAttribute("ColEditCtrlClientID4P")).get_ReadOnly() == true
                    //    || $find(this.MainCols[i].getAttribute("ColEditCtrlClientID4P")).get_Enabled() == false )
                    //    continue;                
                }
                //else if(!this.AllowEdit(this.GetColumnIndex($(this.MainCols[i]).attr('FieldID'))))
                //{
                //   continue;
                //}
                if (col.cusAttr('IsEAll') == "false") {
                    continue;
                }
                //
                var name = col.cusAttr('Name');
                if (this.D_Head.children.length > 1) {
                    if (this.getColumnHeadCell(i, col.cusAttr('FieldID'))) {
                        name = this.getColumnHeadCell(i, col.cusAttr('FieldID')).outerText;
                    } else {
                        name = "";
                    }
                }
                if (name.trim() == "") {
                    continue;
                }
                //         
                var c;
                if (col.cusAttr("ColEditCtrlClientID4P")) {
                    var replaceControlID = col.cusAttr("ColEditCtrlClientID4P");
                    if (replaceControlID) {
                        c = $ID(replaceControlID);
                    }
                    if (this.GetColumnType(i) == ControlType.RefControl) {
                        if (c) {
                            if (c.control) {
                                if (c.control.raiseBeforeLoadData) {
                                    c.control.raiseBeforeLoadData(Sys.EventArgs.Empty);
                                }
                            }
                        }
                    }
                    if (c) {
                        var colInfo = {};
                        colInfo.DisplayName = name;
                        colInfo.FieldID = col.cusAttr('FieldID');
                        colInfo.Control = c;
                        colInfo.Enabled = this.AllowEdit(this.GetColumnIndex(col.cusAttr('FieldID')));
                        this._columnsInforForEdit[count] = colInfo;
                        count++;
                        continue;
                    }
                } else {
                    c = $get(ids + col.cusAttr('FieldID'));
                }

                var cell = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(this.m_currentRowIndex, i);
                if (this.m_gridBodyEventsHandler && this.m_gridBodyEventsHandler.GridEditHelper.CellEditActive) {
                    this.m_gridBodyEventsHandler.CanEndEdit(false);
                }
                if (cell) {
                    var colIndex = this.GetColumnIndex(col.cusAttr('FieldID'));
                    if (this.AllowEdit(colIndex)) {
                        this.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.StartCellEdit(cell);
                        this.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.EndCellEdit(cell);
                    } else {
                        //yangkuna20100714:参照控件需要设置参照参数
                        if (col.cusAttr('ControlType') == "REF") {
                            var reference = this.CreateReferenceControl(colIndex);
                            var refJS = reference.control;
                            this.SetReferenceParameters(refJS, colIndex, this.m_currentRowIndex, reference.cusAttr("RefPara"));
                        }
                    }
                }

                if (c) {
                    var colInfo = {};
                    colInfo.DisplayName = name;
                    colInfo.FieldID = col.cusAttr('FieldID');
                    colInfo.Control = c;
                    colInfo.Enabled = this.AllowEdit(this.GetColumnIndex(col.cusAttr('FieldID')));
                    this._columnsInforForEdit[count] = colInfo;
                } else {
                    if (col.cusAttr('ControlType') == "NORMAL") {
                        var colInfo = {};
                        colInfo.DisplayName = name;
                        colInfo.FieldID = col.cusAttr('FieldID');
                        // colInfo.Control = document.createElement("<Input type=\"text\"  class=\"border4Box\" />");
                        colInfo.Control = $E(window.document).createElement('input', { 'type': 'text', 'class': 'border4Box' });
                        colInfo.Enabled = this.AllowEdit(this.GetColumnIndex(col.cusAttr('FieldID')));
                        this._columnsInforForEdit[count] = colInfo;
                    } else if (col.cusAttr('ControlType') == "CHECKBOX") {
                        var colInfo = {};
                        colInfo.DisplayName = name;
                        colInfo.FieldID = col.cusAttr('FieldID');
                        // colInfo.Control = document.createElement("<Input type=\"checkbox\"  class=\"border4Box\" />");
                        colInfo.Control = $E(window.document).createElement('input', { 'type': 'checkbox', 'class': 'border4Box' });
                        colInfo.Enabled = this.AllowEdit(this.GetColumnIndex(col.cusAttr('FieldID')));
                        this._columnsInforForEdit[count] = colInfo;
                    }
                }
                count++;
            }
        }
        this.m_currentColumnIndex = oldColIndex;
    }
    this.setFireEventByClickRefButton = function (bFire) {
        _this.m_FireEventByClickRefButton = bFire;
    }
    this.FireCellChange = function (value, currentRowIndex, currentColumnIndex) {
        if (currentRowIndex != null && currentColumnIndex != null) //gct20090601:bug15SP300276224，如果有后两个参数，使用传进来的currentRowIndex和currentColumnIndex
        {
            var cellData = new CellDataContent(value, value);
            var cell = _this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(currentRowIndex, currentColumnIndex);
            _this.m_gridBodyEventsHandler.GridEditHelper.OnRowContentChanged(cellData, cell.parentElement, currentColumnIndex);
            return;
        }
        //
        var cellData = new CellDataContent(value, value);
        var cell = _this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(_this.m_currentRowIndex, _this.m_currentColumnIndex);
        _this.m_gridBodyEventsHandler.GridEditHelper.OnRowContentChanged(cellData, cell.parentElement);
        //
    }
    this.DoFirePostBack = function () {
        _this.StoreState("YY");
        _this.GridIsInFocus = true;
        _this.FirePostBack(_this.MainCols[_this.m_currentColumnIndex].cusAttr('FieldID'), "");
    }
    this.RefBeforeLoadData = function () {
        if (this.m_FireEventByClickRefButton)
            if (!_this.m_AlreadyBeforeCellEnter) {
                var context = new CellDataContent("", "");
                _this.SetCurrentCellInfo(context);
                context.CellEditEnabled = true;
                _this.OnBeforeCellFocusEnter(context);
            }
    }
    //Grid参照携带  
    this.UpdateReferenceResult = function (sender, args) {
        //----------------------------------------------------------------- Begin ------------------------------------------------------------//
        //gct0091104：向可能发生的个性化参照列携带逻辑记录sender和args
        if (window.UpdateReferenceResult4P == null)
            window.UpdateReferenceResult4P = [];
        window.UpdateReferenceResult4P[_this.get_id()] = new Object();
        window.UpdateReferenceResult4P[_this.get_id()].sender = sender;
        window.UpdateReferenceResult4P[_this.get_id()].args = args;

        _this.UpdateReferenceResult4P.sender = sender;
        _this.UpdateReferenceResult4P.args = args;
        var isMultiRow = false;
        if (args != null && args.result != null && args.result.Rows != null) {
            var refData = new ReferenceData();
            if (args.result.Rows.length > 1) isMultiRow = true;

            for (var i = 0, len = args.result.Rows.length; i < len; i++) //深度克隆
            {
                refData.Rows[i] = args.result.Rows[i];
            }
            refData.isForceChange = args.result.isForceChange;
            window.UpdateReferenceResult4P[_this.get_id()].result = refData;
            //要存储数据clone,保证数据不会被外部修改.
            window.UpdateReferenceResult4P[_this.get_id()].args.result = refData;

            _this.UpdateReferenceResult4P.result = refData;
        }
        window.UpdateReferenceResult4P[_this.get_id()].SourceRefOutFieldName = _this.UpdateReferenceResult.SourceRefOutFieldName;
        _this.UpdateReferenceResult4P.SourceRefOutFieldName = _this.UpdateReferenceResult.SourceRefOutFieldName; //每发生一次UpdateReferenceResult，就必须需要发生一次UpdateReferenceResult4P
        if (sender && sender.get_element() && sender.get_element().cusAttr("ColFldID4P")) {
            window.UpdateReferenceResult4P[_this.get_id()].SourceRefOutFieldName = _this.UpdateReferenceResult4P.SourceRefOutFieldName = sender.get_element().cusAttr("ColFldID4P");
        }
        //------------------------------------------------------------------ End -------------------------------------------------------------//

        /*if(args.result.Rows.length<=0)
        {
            return;
        }*/
        /*Add by lzhm 2008-11-10 
         *把列的ColumnIndex信息在绑定事件时记录上控件的Element上
         *待数据返回更新时，就不用受当前ColumnIndex位置的影响
         */
        var ctrl = null;
        var ctrlColumnIndex = null;
        if (sender && sender.get_element())
            ctrl = sender.get_element();
        var dctrl = $(ctrl);
        var _ctrlColumnIndex = ctrl.columnIndex;
        if (_ctrlColumnIndex) {
            ctrlColumnIndex = _ctrlColumnIndex;
            if (_this.m_currentColumnIndex != _ctrlColumnIndex) //特殊处理，项目列变成了下一列
            {
                //gct20090601:bug15SP300276224 中 出现不等的现象，_this.m_currentColumnIndex是下一列的索引
                //_this.m_currentColumnIndex=ctrl.columnIndex;
                ;
            }
        } else {
            var _gridCltID4P = ctrl.cusAttr("GridCltID4P"), _colFldID4P = ctrl.cusAttr("ColFldID4P");
            if (_gridCltID4P && _colFldID4P) {
                //不应该走这里         ctrl.columnIndex在CreateReferenceControl()应该赋过值了 如果走这里就需要检查js代码了
                ctrl.columnIndex = $find(_gridCltID4P + "_" + _colFldID4P).get_element().columnIndex;
                ctrlColumnIndex = ctrl.columnIndex;
            }
        }
        if (!ctrlColumnIndex)
            return;
        /*Add by lzhm 2008-11-10 end*/

        _this.GridIsInFocus = true;
        var oRowStatus = _this.GetRowStatus(_this.m_currentRowIndex);
        _this.ResetRowStates(_this.m_currentRowIndex); //add by lzhm 2007-10-30
        var rowIndex = _this.m_currentRowIndex;
        var columnIndex = ctrlColumnIndex; /*更换 by lzhm 2008-11-10*/
        //var columnIndex = _this.m_currentColumnIndex;
        if (_this.MainCols[columnIndex].cusAttr("ReplaceColumn")) {
            var replaceColumn = _this.MainCols[columnIndex].cusAttr("ReplaceColumn");
            if (replaceColumn !== "") {
                columnIndex = _this.GetColumnIndex(replaceColumn);
            }
        }
        //
        //在赋值之前先记录oldKey
        var oldKeyValue = _this.GetColValue(_this.m_currentRowIndex, ctrl.columnIndex);

        var referenceResult = args.result; //取得参照返回值
        //if(_this.MainCols[_this.m_currentColumnIndex]!=_this.UNDEFINED_VALUE)    //modify by lzhm 2007-11-22
        if (_this.MainCols[columnIndex] != _this.UNDEFINED_VALUE) { //取得当前列关系定义
            //var refRel = _this.MainCols[_this.m_currentColumnIndex].RefRel;   //modify by lzhm 2007-11-22
            var refRel = _this.MainCols[columnIndex].cusAttr('RefRel');
            var refResultKeys = [];
            if (refRel != _this.UNDEFINED_VALUE) {
                var relations = refRel.split(";");
                var fId = _this.MainCols[columnIndex].cusAttr('FieldID');
                for (var i = 0; i < relations.length; i++) { //依次填充列值 
                    if (relations[i].split(",").length > 0 && relations[i].split(",")[0] == fId)
                        continue;
                    _this.UpdateCellValueFromReferenceResult(referenceResult, relations[i]);
                    // mahx 在UpdateCellValueFromReferenceResult方法中，数字列已经完成了合计计算。为了防止下面再从新计算，将已经计算过的列记录下来。
                    var ree = relations[i].split(",");
                    if (ree.length == 4)
                        refResultKeys.push(ree[0]);
                }
                _this.UpdateNumbericPrecision(_this.m_currentRowIndex); //更新数字精度
            }
            /*  if(args.result.Rows.length<=0)
            {
                return;
            }*/
            //zjx add        
            //if(_this.MainCols[_this.m_currentColumnIndex].Post=="2"){//gct20090601:bug15SP300276224
            if (_this.MainCols[ctrlColumnIndex].cusAttr("Post") == "2") {
                _this.FirePostBack(_this.MainCols[ctrlColumnIndex].cusAttr('FieldID'), "");
            }

            //for fill cell value
            var reference = _this.CreateReferenceControl(columnIndex);
            var refJS = reference.control;
            //refJS.set_NeedValidate(false);
            var keyValue = refJS.get_Key();
            var nameValue = refJS.get_Text();
            var codeValue = refJS.get_Value();

            //if(keyValue!=_this.GetColValue(_this.m_currentRowIndex,_this.m_currentColumnIndex))//gct20090601:bug15SP300276224
            //if(oldKeyValue!=_this.GetColValue(_this.m_currentRowIndex,ctrl.columnIndex) || oldKeyValue != keyValue)            
            if (isMultiRow == true || args.result.getIsForceChange() || ((oldKeyValue != _this.GetColValue(_this.m_currentRowIndex, ctrlColumnIndex)) || (oldKeyValue != keyValue))) {
                _this.SetColValue(_this.m_currentRowIndex, ctrlColumnIndex, keyValue);
                //this.SetColText(this.m_currentRowIndex,this.m_currentColumnIndex,nameValue);
                _this.SetColRefAttribute(_this.m_currentRowIndex, ctrlColumnIndex, codeValue + _this.RefSplitter2 + nameValue);
                _this.SetColText(_this.m_currentRowIndex, columnIndex, nameValue);
                reference.IsChange = true;
                //add by lzhm 2008-03-18 解决参照回数据之后不更新动态参数值，导致此时直接点击参照按钮，弹出的弹性域控件不能显示之前的值
                /*if(refJS.get_IsLoadDefaultParams()){// 改到 SetReferenceParameter 处理 lzhm*/
                _this.SetReferenceParameters(refJS, columnIndex, rowIndex, refJS.get_element().cusAttr("RefPara"));
                /*}*/
                //add end
                //////                var tmphavePost = (_ClientPostBackManager.Runing == true || Get_Global_WillDoPostBack() == true);
                _this.FireCellChange(keyValue, _this.m_currentRowIndex, columnIndex); //gct20090601:bug15SP300276224 这个函数中用到了m_currentColumnIndex，而此时的m_currentColumnIndex已经到了下一个列，不能在用了，还应该用当前的参照携带列的Index
                var hasPost = _ClientPostBackManager.Runing || _this.IsThisGirdPosting;
                //当用户修改了一行的记录才触发设置个性化默认值事件 20101109 lzhm
                //yangkuna20101125:如果发生了PostBack，则不走默认值，等返回后再走
                if (oRowStatus == RowStatus.Empty) {
                    //
                    var caculator = _this.getCaculator();
                    if (_this.m_gridBodyEventsHandler &&
                        _this.m_gridBodyEventsHandler.GridEditHelper &&
                        caculator
                    ) {
                        var sumColumnsDataList = _this.m_gridBodyEventsHandler.GridEditHelper.GetSumColumnsDataList();

                        // mahx 如果已经发生过合计列，将值设为null，不再进行合计计算，否则会导致值重复计算。
                        for (var i = 0; i < refResultKeys.length; i++) {
                            var d = refResultKeys[i];
                            sumColumnsDataList[d] = null;
                        }
                        caculator.ResetAggForNewRow(sumColumnsDataList);
                    }

                    var jsC = _this.SetDefaultValue4P(_this.m_currentRowIndex, ctrlColumnIndex);
                    if (hasPost) {
                        _ClientJSExecQueueManager.Push("$find('" + _this.get_id() + "').Focus(true);");
                    }
                }
                if (!hasPost && window.event && window.event.type == "keydown" && window.event.keyCode == KeyCode.enter) {
                    _this.m_gridBodyEventsHandler.DoKeyEvent(window.event.keyCode, window.event);
                    _ClientJSExecQueueManager.Push("UFFocus(true);");
                }
                //////                if (!tmphavePost && _ClientPostBackManager.Runing != true && Get_Global_WillDoPostBack() != true)
                //////                {
                //////                  var refControl = _this.GetColumnControl(columnIndex,rowIndex);
                //////                  if (refControl && refControl.SndLoad){   
                //////                    _this.SecondLoadAjaxCall(rowIndex,columnIndex);
                //////                  }
                //////                }
            }
            //            else{  //注释 by lzhm 20080613 （相同时不再清空）
            //                _this.m_gridFaciesManager.SetReferenceCellValue(_this.m_currentRowIndex,_this.m_currentColumnIndex,"","","");             
            //            }
        }
    }

    //发起二次加载的AJAX操作
    this.SecondLoadAjaxCall = function (rowIndex, columnIndex) {
        $alert("{------二次加载AJAX-开始------}");
        var url;
        this.sndLoadRowIndex = rowIndex;
        var h = $("input[name*='TASKID_HIDDENFIELD']");
        var key = this.GetCellValue(rowIndex, columnIndex).Value;
        url = "SecondLoad.aspx?SourceID=" + this.MainCols[columnIndex].cusAttr('FieldID') + "&SourceKey=" + key + "&TaskID=" + h.val();
        var idColIndex = this.GetColumnIndex("ID");
        if (idColIndex >= 0) {
            url += "&pkey=" + this.GetCellValue(rowIndex, idColIndex).Value;
        } else {
            alert("请添加ID列！");
            return;
        }
        url = AppendPopupUrl(url);
        $alert("URL:" + url);

        if (!this._xmlhttpRequest) {
            this._xmlhttpRequest = GetXmlHttpRequest();
        }
        if (this._xmlhttpRequest) {
            ProcessRequest(this._xmlhttpRequest, url, this.SecondLoadCallBack);
        }
    }

    //二次加载的回调函数
    this.SecondLoadCallBack = function () {
        if ((_this._xmlhttpRequest) && (_this._xmlhttpRequest.readyState == 4)) {
            var result = _this._xmlhttpRequest.responseText;
            //added by u9lkc 20111222
            //json字符串不再编解码
            //result = unescapeHTML(result);
            $alert("Result:" + result);
            var datas = $.parseJSON(result);
            datas.gridID = _this.get_id();
            datas.rowIndex = _this.sndLoadRowIndex;
            var rlt = $SetSndLoadControlValue(datas);
            $alert("{------二次加载AJAX-结束------}");
        }
    }



    //个性化Grid参照携带相应函数 -------------------U9V2新增
    //参数3 cur_m_currentRowIndex：为当个性化参照携带发生的时候的RowIndex（因为可能用户选择参照单元格后直接点击下一行，所以需要记录当时发生事件的行索引）。
    //注意：当有参数三的时候说明，该函数是在前台队列中排队后出代码队列再次调用执行的
    this.UpdateReferenceResult4P = function (sender, args, cur_m_currentRowIndex) {
        //        if(cur_m_currentRowIndex!=null)
        //        debugger;

        //由于UpdateReferenceResult4P每次都要检查发生进来，而UpdateReferenceResult则不一定发生，
        //所以发现_this.UpdateReferenceResult4P.SourceRefOutFieldName没有值，则说明this.UpdateReferenceResult没有触发
        if (_this.UpdateReferenceResult4P.SourceRefOutFieldName == null) {
            if (window.UpdateReferenceResult4P != null && window.UpdateReferenceResult4P[_this.get_id()] != null && window.UpdateReferenceResult4P[_this.get_id()].SourceRefOutFieldName != null) { }
            return; //UpdateReferenceResult没有执行，则这里也不执行
        }

        //如果有Callback或者PostBack需要如相应队列
        if (_ClientPostBackManager.Runing == true || Get_Global_WillDoPostBack() == true) {
            var js = "var _tmp_sender = window.UpdateReferenceResult4P['" + _this.get_id() + "'].sender;";
            js += "var _tmp_args = window.UpdateReferenceResult4P['" + _this.get_id() + "'].args;";
            js += "$find('" + _this.get_id() + "').UpdateReferenceResult4P.sender = _tmp_sender;";
            js += "$find('" + _this.get_id() + "').UpdateReferenceResult4P.args = _tmp_args;";
            js += "$find('" + _this.get_id() + "').UpdateReferenceResult4P.SourceRefOutFieldName = window.UpdateReferenceResult4P['" + _this.get_id() + "'].SourceRefOutFieldName;";
            js += "var _tmp_curRowIndex = " + _this.m_currentRowIndex + ";";
            js += "$find('" + _this.get_id() + "').UpdateReferenceResult4P(_tmp_sender,_tmp_args,_tmp_curRowIndex)";

            Global_JSQueueEvalAfterPageLoadedManager.Add(js, true);
            return;
        } else if (_ClientCallBackManager.Runing == true) {
            var js = "var _tmp_sender = window.UpdateReferenceResult4P['" + _this.get_id() + "'].sender;";
            js += "var _tmp_args = window.UpdateReferenceResult4P['" + _this.get_id() + "'].args;";
            js += "$find('" + _this.get_id() + "').UpdateReferenceResult4P.sender = _tmp_sender;";
            js += "$find('" + _this.get_id() + "').UpdateReferenceResult4P.args = _tmp_args;";
            js += "$find('" + _this.get_id() + "').UpdateReferenceResult4P.SourceRefOutFieldName = window.UpdateReferenceResult4P['" + _this.get_id() + "'].SourceRefOutFieldName;";
            js += "$find('" + _this.get_id() + "').UpdateReferenceResult4P.result = window.UpdateReferenceResult4P['" + _this.get_id() + "'].resutl;";
            js += "var _tmp_curRowIndex = " + _this.m_currentRowIndex + ";";
            js += "$find('" + _this.get_id() + "').UpdateReferenceResult4P(_tmp_sender,_tmp_args,_tmp_curRowIndex)";

            _ClientCallBackManager.Add2PersonalProcessQueue(js);
            return;
        }

        if (args != null && args.arg != null && _this.UpdateReferenceResult4P.SourceRefOutFieldName != args.arg.ColField) {
            //走这里需要分析一下
            //SourceRefOutFieldName不是当前的列            
            //alert("联系平台开发人员");  
            debugger;
            return;
        }

        var oldFieldID = _this.UpdateReferenceResult4P.SourceRefOutFieldName;
        _this.UpdateReferenceResult4P.SourceRefOutFieldName = null; //每次UpdateReferenceResult4P()执行完就设置为空，只有等到下次UpdateReferenceResult发生时候才给UpdateReferenceResult4P.SourceRefOutFieldName赋值


        //恢复现场sender和args
        sender = _this.UpdateReferenceResult4P.sender;
        args = _this.UpdateReferenceResult4P.args;
        if (args == null) {
            debugger;
            args = this.CreateEventArgs();
        }
        args.result = _this.UpdateReferenceResult4P.args.result;


        var ctrl = null;
        var ctrlColumnIndex = null;
        if (sender && sender.get_element()) {
            ctrl = sender.get_element();
        } else {
            ctrl = this.GetColumnControl(this.GetColumnIndex(oldFieldID));
        }
        if (ctrl == null)
            return;
        var dctrl = $(ctrl);
        if (ctrl.columnIndex) {
            ctrlColumnIndex = ctrl.columnIndex;
            if (_this.m_currentColumnIndex != ctrlColumnIndex) //特殊处理，项目列变成了下一列
            {
                //gct20090601:bug15SP300276224 中 出现不等的现象，_this.m_currentColumnIndex是下一列的索引
                //_this.m_currentColumnIndex=ctrl.columnIndex;
                ;
            }
        } else {
            var _gridCltID4P = ctrl.cusAttr("GridCltID4P"), _colFldID4P = ctrl.cusAttr("ColFldID4P");
            if (_gridCltID4P && _colFldID4P) {
                //不应该走这里         ctrl.columnIndex在CreateReferenceControl()应该赋过值了 如果走这里就需要检查js代码了
                ctrl.columnIndex = $find(_gridCltID4P + "_" + _colFldID4P).get_element().columnIndex;
                ctrlColumnIndex = ctrl.columnIndex;
            }
        }
        if (!ctrlColumnIndex)
            return;

        _this.GridIsInFocus = true;

        var columnIndex = ctrlColumnIndex;

        if (_this.MainCols[columnIndex].cusAttr("ReplaceColumn")) {
            var replaceColumn = _this.MainCols[columnIndex].cusAttr("ReplaceColumn");
            if (replaceColumn !== "") {
                columnIndex = _this.GetColumnIndex(replaceColumn);
            }
        }

        var referenceResult = args.result; //取得参照返回值

        if (_this.MainCols[columnIndex] != _this.UNDEFINED_VALUE) {
            //个性化参照携带逻辑
            var refRel4P = _this.MainCols[columnIndex].cusAttr('RefRel4P');
            if (refRel4P != _this.UNDEFINED_VALUE) {
                var relations = refRel4P.split(";");
                var fId = _this.MainCols[columnIndex].cusAttr('FieldID');
                for (var i = 0; i < relations.length; i++) { //依次填充列值 
                    if (relations[i].split(",").length > 0 && relations[i].split(",")[0] == fId)
                        continue;
                    if (cur_m_currentRowIndex == null)
                        _this.UpdateCellValueFromReferenceResult(referenceResult, relations[i]);
                    else
                        _this.UpdateCellValueFromReferenceResult(referenceResult, relations[i], cur_m_currentRowIndex);
                }
                if (cur_m_currentRowIndex == null) {
                    _this.UpdateNumbericPrecision(_this.m_currentRowIndex); //更新数字精度
                } else {
                    _this.UpdateNumbericPrecision(cur_m_currentRowIndex);
                }
            }
        }
    }




}

UF.UI.DataGrid.prototype = {

    initialize: function () {
        UF.UI.DataGrid.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        this.InitControl();
        this.set_SelectedRows();
        // Create delegates Attach events        
    },

    dispose: function () {
        // TODO: add your cleanup code here

        //wanglei 20110902: 计算组件引用
        if (this.caculator) {
            this.caculator.dispose();
            this.caculator = null;
        }
        if (this.m_gridFaciesManager) {
            this.m_gridFaciesManager.dispose();
            this.m_gridFaciesManager = null;
        }
        if (this.m_behaviorManager) {
            this.m_behaviorManager.dispose();
            this.m_behaviorManager = null;
        }
        if (this.m_tableDimentionManager) {
            this.m_tableDimentionManager.dispose();
            this.m_tableDimentionManager = null;
        }
        if (this.m_gridBodyEventsHandler) {
            this.m_gridBodyEventsHandler.dispose();
            this.m_gridBodyEventsHandler = null;
        }
        if (this.m_pageBreakManagerInstance) {
            this.m_pageBreakManagerInstance.dispose();
            this.m_pageBreakManagerInstance = null;
        }
        if (this.m_editMenuToolbar) {
            this.m_editMenuToolbar.dispose();
            this.m_editMenuToolbar = null;
        }


        this.Values = null;
        this.RowAttribute = null;
        this.ColAttribute = null;
        this.CellAttribute = null;

        this.MainCols = null;
        this.M_Table = null;
        this.D_Head = null;
        this.D_Body = null;
        this.D_Foot = null;
        this.S_Body = null;

        this.m_toolbarDiv = null;
        this.m_activeContainer = null;
        this.MainTableController = null;
        this.currentTable = null;
        this.pages = null;
        //????
        this.ParentDocument = null;
        this.dataDom = null;
        this.eventNode = null;
        //????为什么不是数组
        this.ControlArray = null;
        this.m_ColumnIndexList = null;
        if (this.m_deletedRows) {
            Array.clear(this.m_deletedRows);
            this.m_deletedRows = null;
        }
        this.m_clientUserControl = null;

        if (this.m_aggregateColumnFieldNameValues) {
            Array.clear(this.m_aggregateColumnFieldNameValues);
            this.m_aggregateColumnFieldNameValues = null;
        }
        this.Grid_ClientRowDataDirtyDic = null;

        // 内存泄漏问题-lt 2022/11/04
        this.$element = null;
        this.FullScreen = null;
        this.m_CustomFilterToolbarDiv = null;
        if (this.m_formatHelper) {
            this.m_formatHelper.dispose();
            this.m_formatHelper = null;
        }

        //批量修改强制刷新页面时删掉挂载在top上的m_batchModifyManager对象
        // if (top.DataGridBatchModifyManagerContainer && top.DataGridBatchModifyManagerContainer[this.get_id()]) {
        //     delete top.DataGridBatchModifyManagerContainer[this.get_id()];
        // }

        UF.UI.DataGrid.callBaseMethod(this, 'dispose');
    },
    GetCloneHead: function () {
        return $(this.S_Body).find(".thead-tr");
    },
    InitOldCoumnIndex: function () {
        var tmp = this._element.cusAttr('ChangeColumInfo');
        if (tmp.length > 3) {
            var columns = tmp.split(";");
            if (columns.length > 0) {
                for (var i = 0; i < columns.length; i++) {
                    this.m_OldColumnIndex[i] = [];
                    this.m_OldColumnIndex[i] = columns[i].split(",");
                }
            }
        }
    },
    //获取个性化之前的列索引
    GetOldColumnIndex: function (currentColumnIndex) {
        var result = currentColumnIndex;
        if (typeof (this._element.cusAttr('ChangeColumInfo')) != "undefined") {
            if (this.m_OldColumnIndex.length == 0) {
                this.InitOldCoumnIndex();
            }
            var columnName = this.GetColumnFieldID(currentColumnIndex);
            if (columnName != "") {
                for (var i = 0; i < this.m_OldColumnIndex.length; i++) {
                    if (columnName == this.m_OldColumnIndex[i][0]) {
                        result = this.m_OldColumnIndex[i][1];
                        break;
                    }
                }
            }
        }
        return result;
    },
    //通过个性化前的列索引获取列名
    GetColumnNameByOldIndex: function (oldColumnIndex) {
        var result = this.MainCols[oldColumnIndex].cusAttr('FieldID');
        if (typeof (this._element.cusAttr('ChangeColumInfo')) != "undefined") {
            if (this.m_OldColumnIndex.length == 0) {
                this.InitOldCoumnIndex();
            }
            if (this.m_OldColumnIndex.length > 0) {
                for (var i = 0; i < this.m_OldColumnIndex.length; i++) {
                    if (oldColumnIndex == this.m_OldColumnIndex[i][1]) {
                        result = this.m_OldColumnIndex[i][0];
                        break;
                    }
                }
            }
        }
        return result;
    },
    AddAggregateColumnFieldNameValue: function (aggregateColumnName, conditionFieldName, conditionFieldValue) {
        var len = this.m_aggregateColumnFieldNameValues.length;
        //AggregateColumnFieldNameValue类型在ssfxcore.debug.js中定义
        var item = new AggregateColumnFieldNameValue(aggregateColumnName, conditionFieldName, conditionFieldValue);
        this.m_aggregateColumnFieldNameValues[len] = item;
    },
    ClearAggregateColumnFieldNameValues: function () {
        Array.clear(this.m_aggregateColumnFieldNameValues);
    },

    SetMaxRows: function (maxR) {
        this.m_MaxRows = maxR;
    },
    GetMaxRows: function () {
        return this.m_MaxRows;
    },

    //  //取得数值格式化后的结果
    //    GetNumberFormatedValueWithCS : function(value,columnIndex,cs)
    //    {
    //      if($(this.MainCols[columnIndex]).attr('FieldID')=="ID"){return value;}
    //        var control = this.CreateNumbericControl(columnIndex);        
    //        if(control)
    //        {
    //           var controlJS = control.control;   
    //           if(controlJS){
    //              controlJS.set_CurrencySymbol(cs);;
    //              controlJS.set_Value(value);
    //              var text =controlJS.GetTextBoxValue();
    //              return text;
    //           }
    //        }
    //        return value;
    //    },
    ResetCurrencySymbolByColumnName: function (columnName, currencySymbol) {
        var columnIndex = this.GetColumnIndex(columnName);
        //
        for (var i = 0; i < this.D_Body.rows.length; i++) {
            //this.SetCellValue(i,columnIndex,this.GetCellValue(i,columnIndex));
            var cell = this.D_Body.rows[i].cells[columnIndex];
            //this._owner.m_formatHelper.FormatCellNumber(columnIndex,rowIndex,value,oldV)
            //this.setCellListValue(cell,this.GetNumberFormatedValueWithCS(this.GetCellValue(i,columnIndex).Value,columnIndex,currencySymbol));
            this.setCellListValue(cell, this.m_formatHelper.FormatCellNumber(columnIndex, i, this.GetCellValue(i, columnIndex).Value, this.GetCellValue(i, columnIndex).Value).Text);
        }
        //
    },
    HasSwitchColumn: function (columnIndex) {
        var resT = false;
        if (this.MainCols[columnIndex].cusAttr("ReplaceColumn")) {
            resT = true;
        }
        return resT;
    },

    HideMenu: function () { //add by lzhm 2007-10-07
        if (this.m_gridBodyEventsHandler && this.m_gridBodyEventsHandler.GridEditHelper)
            this.m_gridBodyEventsHandler.GridEditHelper.HideMenu();
    },
    //设置行状态
    ResetRowStates: function (rowIndex) {
        if (rowIndex == this.UNDEFINED_VALUE) {
            rowIndex = this.m_currentRowIndex;
        }
        var row = this.D_Body.rows[rowIndex];
        if (row) {
            if (row.cusAttr('Status') == RowStatus.UnChanged) {
                row.cusAttr('Status', RowStatus.Modified);
            } else if (row.cusAttr('Status') == RowStatus.Empty) {
                row.cusAttr('Status', RowStatus.Added);
                this.set_TotalRows(this.m_TotalRows + 1);
            }
        }
    },
    //设置行状态为未修改状态
    ResetRowState2UnChanged: function (rowIndex) {
        if (rowIndex == this.UNDEFINED_VALUE) {
            rowIndex = this.m_currentRowIndex;
        }
        var row = this.D_Body.rows[rowIndex];
        if (row) {
            if (row.cusAttr('Status') != RowStatus.Empty) {
                row.cusAttr('Status', RowStatus.UnChanged);
            }
        }
    }, //end ResetRowState2UnChanged

    ///
    ///DataGrid对外事件
    ///
    SetRefRelByColumnIndex: function (columnIndex, strRefRel) {
        if (this.MainCols[columnIndex] != this.UNDEFINED_VALUE) { //取得当前列关系定义
            //很多jquery兼容性写法，都被用错了
            this.MainCols[columnIndex].cusAttr('RefRel', strRefRel);    //  $(this.MainCols[columnIndex]).attr('RefRel') = strRefRel;
        }
    },
    Set_PartIDByColumnName: function (filedName, strPartID, w, h) {
        var columnIndex = this.GetColumnIndex(filedName);
        if (columnIndex >= 0) {
            if (this.MainCols[columnIndex] != this.UNDEFINED_VALUE) {
                var refT = this.MainCols[columnIndex].cusAttr('FormRef');
                if (refT) {
                    if (refT.indexOf("lnk") >= 0) {
                        var uri = "Simple.aspx?lnk=" + strPartID;
                        var strT = uri + refT.substring(refT.indexOf("&"), refT.length);
                        if (w && h) {
                            var rT = strT.substring(strT.indexOf("#"), strT.length);
                            var segment = strT.split("#")[0]; //分离出段落
                            var subSegment = segment.split(",");
                            var change = false;
                            if (w != "") {
                                subSegment[2] = w;
                                change = true;
                            }
                            if (h != "") {
                                subSegment[3] = h;
                                change = true;
                            }
                            if (change) {
                                var temp = "";
                                for (var i = 0; i < subSegment.length; i++) {
                                    if (i == subSegment.length - 1) {
                                        temp += subSegment[i];
                                    } else {
                                        temp += subSegment[i] + ",";
                                    }
                                }
                                refT = temp + rT;
                            }
                        }
                    }
                    this.MainCols[columnIndex].cusAttr('FormRef', refT);
                    //$(this.MainCols[columnIndex]).attr('FormRef') = refT;
                    this.m_currentFormRef = refT;
                }
            }
        }
    },

    //设置Form引用参数
    Set_FormRefParamByColumnName: function (fieldName, name, bindingName, bindingType, bindingProperty, value) {
        var columnIndex = this.GetColumnIndex(fieldName);
        if (columnIndex < 0)
            return;
        if (this.MainCols[columnIndex] != this.UNDEFINED_VALUE) {
            var refT = this.MainCols[columnIndex].cusAttr('FormRef');
            if (refT) {
                var isOk = false;
                var segment = refT.split("#"); //分离出段落
                if (segment.length == 3) {
                    var params = segment[1].split(";");
                    if (params.length > 0) {
                        for (var i = 0; i < params.length; i++) {
                            if (params[i].split(",")[0] == name) {
                                params[i] = name + "," + bindingName + "," + bindingType + "," + bindingProperty + "," + value;
                                isOk = true;
                                break;
                            }
                        }
                    }
                    if (!isOk) {
                        params.push(name + "," + bindingName + "," + bindingType + "," + bindingProperty + "," + value);
                        isOk = true;
                    }
                }
                if (isOk) {
                    segment[1] = params.join(";");
                    refT = segment.join("#");
                    //$(this.MainCols[columnIndex]).attr('FormRef') = refT;
                    this.MainCols[columnIndex].cusAttr('FormRef', refT);
                    this.m_currentFormRef = refT;
                }
            }
        }
    },
    //移除Form引用参数
    Remove_FormRefParamByColumnName: function (fieldName, name) {
        var columnIndex = this.GetColumnIndex(fieldName);
        if (columnIndex < 0)
            return;
        if (this.MainCols[columnIndex] != this.UNDEFINED_VALUE) {
            var refT = this.MainCols[columnIndex].cusAttr('FormRef');
            if (refT) {
                var isOk = false;
                var segment = refT.split("#"); //分离出段落
                if (segment.length == 3) {
                    var params = segment[1].split(";");
                    if (params.length > 0) {
                        for (var i = 0; i < params.length; i++) {
                            if (params[i].split(",")[0] == name) {
                                params.splice(i, 1);
                                isOk = true;
                                break;
                            }
                        }
                    }
                }
                if (isOk) {
                    segment[1] = params.join(";");
                    refT = segment.join("#");
                    //      $(this.MainCols[columnIndex]).attr('FormRef') = refT;
                    this.MainCols[columnIndex].cusAttr('FormRef', refT);
                    this.m_currentFormRef = refT;
                }
            }
        }
    },
    //移除Form引用参数
    Clear_FormRefParamsByColumnName: function (fieldName) {
        var columnIndex = this.GetColumnIndex(fieldName);
        if (columnIndex < 0)
            return;
        if (this.MainCols[columnIndex] != this.UNDEFINED_VALUE) {
            var refT = this.MainCols[columnIndex].cusAttr('FormRef');
            if (refT) {
                var isOk = false;
                var segment = refT.split("#"); //分离出段落
                if (segment.length == 3) {
                    segment[1] = "";
                    refT = segment.join("#");
                    this.MainCols[columnIndex].cusAttr('FormRef', refT);
                    //$(this.MainCols[columnIndex]).attr('FormRef') = refT;
                    this.m_currentFormRef = refT;
                }
            }
        }
    },

    //yangkuna20101012:是否需隐藏Loading
    IsHiddeLoading: function () {
        var isBatchModify = this.GetIsBatchModifyRunning();
        if (isBatchModify) {
            return true;
        }
        return false;
    },
    //批量修改标志
    GetIsBatchModifyRunning: function () {
        if (this.m_batchModifyManager && this.m_batchModifyManager.isInProcessing) {
            return true;
        } else {
            return false;
        }
    },
    BatchModifyFowardOneUnit: function () {
        if (this.m_batchModifyManager) {
            this.m_batchModifyManager.FowardOneUnit();
        }
    },
    ReadyToStartBatchModifyProcess: function (effectiveRowCount) {
        if (this.GetIsBatchModifyRunning()) {
            return;
        }
        this.m_batchModifyManager = new GridBatchModifyProcessManager(this, effectiveRowCount);
        this.m_batchModifyManager.initialize();
        //把top改为了BaseTop，V5不能随意使用top
        if (!top.DataGridBatchModifyManagerContainer) {
            top.DataGridBatchModifyManagerContainer = {};
        }
        top.DataGridBatchModifyManagerContainer[this.get_id()] = this.m_batchModifyManager;
        this.m_batchModifyManager.ShowProcess();
    },
    CompleteBatchModify: function () {
        if (!this.GetIsBatchModifyRunning()) {
            return;
        }
        var manager = this.m_batchModifyManager;
        manager.isInProcessing = false;
        manager.OnCompleted();
        var rowIndex = manager.rowIndexBefore;
         // 批量修改都是在一列内操作，所以columnIndex不会变，因为批量修改弹窗初始化会重置columnIndex，所以这里直接取修改最后的colunmnIndex
         var columnIndex = this.m_currentColumnIndex;
        // var columnIndex = manager.columnIndexBefore;
        this.m_batchModifyManager.dispose();
        this.m_batchModifyManager = null;
        //把top改为了BaseTop，V5不能随意使用top
        if (top.DataGridBatchModifyManagerContainer && top.DataGridBatchModifyManagerContainer[this.get_id()]) {
            delete top.DataGridBatchModifyManagerContainer[this.get_id()];
        }
        //焦点回到批量修改前的单元格
        var rowWillChanged = (this.m_currentRowIndex != rowIndex);
        this.EndEdit();
        this.m_currentRowIndex = rowIndex;
        this.m_currentColumnIndex = columnIndex;
        this.Focus(true);
        if (rowWillChanged) {
            this.OnRowChanged();
        }
    },

    IsPersonalColumnByMoved: function (colIndex) {
        var ctrl = ((colIndex >= 0 && colIndex < this.MainCols.length) ? this.MainCols[colIndex].cusAttr('ColEditCtrlClientID4P') : null);
        return ctrl != null && ctrl != "";
    },
    IsNeedSwitchTabPage: function (colIndex, rowIndex) {
        if (typeof (colIndex) == "undefined" || colIndex == null || colIndex == "" || colIndex < 0) {
            colIndex = this.m_currentColumnIndex;
        }
        if (typeof (rowIndex) == "undefined" || rowIndex == null || rowIndex == "" || rowIndex < 0) {
            rowIndex = this.m_currentRowIndex;
        }
        var hasCol = (colIndex >= 0 && colIndex < this.MainCols.length);
        var ctrl = (hasCol ? this.MainCols[colIndex].cusAttr('ColEditCtrlClientID4P') : null);
        var isVisible = (hasCol ? this.MainCols[colIndex].style.display != "none" : false);
        return (ctrl != null) && isVisible && ((this.m_currentRowIndex4PCol != this.m_currentRowIndex) || this.GetClientRowDataDirtyTag(rowIndex));
    },
    //模拟切页签
    ImitateSwitchTabPage: function (notExeIfCallBackRunning) {
        if (this.IsNeedSwitchTabPage()) {
            var rStatus = this.GetRowStatus(this.m_currentRowIndex);
            //added by u9lkc 20111027 个性化模拟切页签时 应用开发注册的callback事件都不响应
            this.m_IsSwitchTabPage = true;
            if (rStatus == RowStatus.Empty) {
                var oldColIndex = this.m_currentColumnIndex;
                var rCount = this.AddNewRow();
                this.m_currentColumnIndex = oldColIndex;
                //yangkuna20100723:如果增行发生了Post，则不用在做模拟切换页签
                if (_ClientPostBackManager.Runing == true || Get_Global_WillDoPostBack() == true) {
                    Set_GridCurrentRowIndex4P(this.m_currentRowIndex4PCol);
                    this.m_currentRowIndex4PCol = this.m_currentRowIndex;
                    return true;
                } else if (_ClientCallBackManager.Runing) {
                    if (!notExeIfCallBackRunning) {
                        Global_JSQueueEvalAfterPageLoadedManager.AddLast("$find('" + this.get_id() + "').ImitateSwitchTabPage();");
                    }
                    return true;
                } else {
                    return (rCount >= 0 ? this.ImitateSwitchTabPage() : false);
                }
            }
            this.m_IsSwitchTabPage = false;
            this.eventNode = this.dataDom.createElement("Event");
            this.eventNode.setAttribute("Style", "BeforeCellFocusEnter"); //一定要是BeforeCellFocusEnter，服务器段使用
            this.eventNode.setAttribute("RowIndex", this.m_currentRowIndex);
            //this.eventNode.setAttribute("ColumnIndex",this.m_currentColumnIndex);
            //
            this.StoreState("Y");
            this.GridIsInFocus = true;
            _ClientJSExecQueueManager.AddToFirstQuery("IsGridInImitateSwitchTabPage=false;$find('" + this.get_id() + "').SetClientRowDataDirtyTag($find('" + this.get_id() + "').m_currentRowIndex,false);");
            //
            if (rStatus == RowStatus.Empty || rStatus == RowStatus.Added) {
                var columnIndex = this.GetColumnIndex("ID");
                if (columnIndex >= 0) {
                    var rowKey = this.GetCellValue(this.m_currentRowIndex, columnIndex).Value;
                    //_ClientJSExecQueueManager.AddToFirstQuery("$find('" + this.get_id() + "').RemoveClientRowDataDirtyTagByRowKey('" + rowKey + "');");
                    //modify by kxl 20160530 这个清除标志的代码需要放到普通队列中，否则刚放入就清除了，会导致callback死循环
                    _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').RemoveClientRowDataDirtyTagByRowKey('" + rowKey + "');");

                }
            }
            if (rStatus == RowStatus.Empty) {
                var js = "if($find('" + this.get_id() + "').get_Rows() > " + this.m_currentRowIndex + "){$find('" + this.get_id() + "').m_currentRowIndex=" + this.m_currentRowIndex + ";$find('" + this.get_id() + "').m_gridFaciesManager.SetSelectedRow(" + this.m_currentRowIndex + ");$find('" + this.get_id() + "').Focus();$find('" + this.get_id() + "').StartEdit();}";
                _ClientJSExecQueueManager.AddToFirstQuery(js);
            } else {
                _ClientJSExecQueueManager.AddToFirstQuery("$find('" + this.get_id() + "').Focus(true);");
            }

            //gct20090825:个性化列的行索引一定要和非个性化列的行索引同步。
            Set_GridCurrentRowIndex4P(this.m_currentRowIndex4PCol); //add by lzhm 20100428 同步在BaseControl.SynchUpdateValue4PersonalColumn要使用的行索引
            this.m_currentRowIndex4PCol = this.m_currentRowIndex;

            //top改为BaseTop v5不能随意用top
            top.DataGridCurrentRowIndex4PCol[this.get_id()] = this.m_currentRowIndex4PCol; //在客户端缓存m_currentRowIndex4PCol，防止PostBack造成其丢失

            /*var postAction=this.$element.attr('onfireevents');
            postAction=postAction.replace(/,''/, ",'ImitateSwitchTabPage'");
            eval(postAction);
            //eval(this.$element.attr('onfireevents'));
            if(this.m_gridBodyEventsHandler.GridEditHelper.GetMenuVisible())
            {
                _ClientJSExecQueueManager.Push("$find('"+this.get_id()+"').m_gridBodyEventsHandler.GridEditHelper.ShowMenu($find('"+this.get_id()+"').m_currentRowIndex);");
            }
            _ClientJSExecQueueManager.Push("$find('"+this.get_id()+"').Focus(true);");*/
            //window.setTimeout("eval(\""+this.$element.attr('onfireevents')+"\")",0);
            var evtArgs = this.CreateEventArgs();
            this.InitializeEvent(evtArgs);
            if (!this.IsEmptyRow(this.D_Body.rows[this.m_currentRowIndex])) {
                evtArgs.SrcColIndex = this.GetColumnIndex(evtArgs.EventSrc);
                evtArgs.SrcRowIndex = this.m_currentRowIndex;
            }
            evtArgs.sourceElement = this.get_element();
            //evtArgs.arg=dataContent;
            //$open();
            //$alert("start at");
            //_ClientJSExecQueueManager.Push("$alert('end at');");
            this.raiseEvent(DataGridEvent.OnImitateSwitchTabPage, evtArgs);
            IsGridInImitateSwitchTabPage = true;
            return true;
        }
        return false;
    },
    SetClientRowDataDirtyTag: function (rowIndex, isDiryty) {
        if (rowIndex >= 0 && rowIndex < this.get_Rows()) {
            var rStatus = this.GetRowStatus(rowIndex);
            var columnIndex = this.GetColumnIndex("ID");
            if (columnIndex >= 0) {
                var rowKey = this.GetCellValue(rowIndex, columnIndex).Value.toString();
                rowKey = "g" + rowKey.replace(/-/g, "_");
                this.Grid_ClientRowDataDirtyDic[rowKey] = isDiryty;
            }
        }
    }, //end SetClientRowDataDirtyTag
    RemoveClientRowDataDirtyTagByRowKey: function (rowKey) {
        rowKey = "g" + rowKey.replace(/-/g, "_");
        if (typeof (this.Grid_ClientRowDataDirtyDic[rowKey]) != "undefined") {
            this.Grid_ClientRowDataDirtyDic[rowKey] = null;
            delete this.Grid_ClientRowDataDirtyDic[rowKey];
        }
    }, //end SetClientRowDataDirtyTagByRowKey
    GetClientRowDataDirtyTag: function (rowIndex) {
        if (rowIndex >= 0 && rowIndex < this.get_Rows()) {
            var columnIndex = this.GetColumnIndex("ID");
            if (columnIndex >= 0) {
                var rowKey = this.GetCellValue(rowIndex, columnIndex).Value.toString();
                rowKey = "g" + rowKey.replace(/-/g, "_");
                if (typeof (this.Grid_ClientRowDataDirtyDic[rowKey]) == "undefined" || this.Grid_ClientRowDataDirtyDic[rowKey] == null) {
                    var rStatus = this.GetRowStatus(rowIndex);
                    //if( rStatus == RowStatus.Empty||rStatus == RowStatus.Added) {
                    if (rStatus == RowStatus.Empty) {
                        return true;
                    } else if (rStatus == RowStatus.Deleted) {
                        return false;
                    }
                    return false;
                } else {
                    if (this.Grid_ClientRowDataDirtyDic[rowKey]) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
            return true;
        }
        return false;
    }, //end GetClientRowDataDirtyTag

    GetPersonelColumnIndexById: function (controlId) {
        if (typeof (controlId) == "string" && controlId != "") {
            for (var i = 0; i < this.MainCols.length; i++) {
                if (this.MainCols[i].cusAttr('ColEditCtrlClientID4P') && this.MainCols[i].cusAttr('ColEditCtrlClientID4P') == controlId) {
                    return i;
                }
            }
        }
        return -1;
    },

    MoveToNextPosition: function (keyCode, tmpEvent) {
        var oldRowIndex = this.m_currentRowIndex;
        this.m_lastRowIndex = oldRowIndex;
        if (this.m_gridBodyEventsHandler.CanEndEdit(false)) {
            if (this.m_gridBodyEventsHandler.GetNextCellPosition(keyCode, tmpEvent)) {
                this.m_gridBodyEventsHandler.GridFaciesHelper.SetCurrentCellStyle(this.m_currentRowIndex, this.m_currentColumnIndex);
                if (this.m_currentRowIndex != oldRowIndex) {
                    this.OnRowChanged(); //行位置转换事件
                }
                //setTimeout(new Function("if($find('"+this.get_id()+"')) { $find('"+this.get_id()+"').Focus(false); }"), 30);
            }
        }
    },

    //Postback后触发个性化关联执行(多选参照)
    DoPersonalAssoEventAfterPost: function (pArg) {
        if (window.Global_GridAsso && window.Global_GridAsso[this.get_id()]) {
            var obj = window.Global_GridAsso[this.get_id()];
            var eventColIndex = this.GetColumnIndex(obj.eventColumn);
            var colIndex = this.GetColumnIndex("ID");
            var lastRes1 = "";
            var lastRes2 = "";
            var rowArray = [];
            var lastRowIndex = null;
            var tObj = {};
            var isFirst = true;
            for (var i = 0; i < this.D_Body.rows.length; i++) {
                //added by u9lkc 20110722
                //空行不处理
                if (this.IsEmptyRow(this.D_Body.rows[i]) === true)
                    continue;
                var isSet = true;
                var IdValue = this.D_Body.rows[i].cells[colIndex].cusAttr('Value');
                var eColValue = this.D_Body.rows[i].cells[eventColIndex].cusAttr('Value');
                if (!eColValue || obj.rowIndex == i) {
                    isSet = false;
                }
                if (isSet) {
                    for (var j = 0; j < obj.existsRows.length; j++) {
                        if (obj.existsRows[j] == IdValue) {
                            isSet = false;
                            break;
                        }
                    }
                }
                if (isSet) {
                    var gridId = this.get_id();
                    var result1 = "var tGrid=$find(\"" + gridId + "\");tGrid.EndEdit();if(tGrid.m_currentRowIndex != " + i + "){ tGrid.m_currentRowIndex=" + i + ";tGrid.OnRowChanged(true);}";
                    var result2 = "var p={};p.hasAssoFire=" + (pArg.hasAssoFire ? "true" : "false") + ";p.hasDefault=" + (pArg.hasDefault ? "true" : "false") + ";";
                    result2 += "$find('" + gridId + "').DoCellDataValueChanged4P(" + i + "," + eventColIndex + ",p);";
                    if (i == this.m_currentRowIndex) {
                        lastRes1 = result1;
                        lastRes2 = result2
                        lastRowIndex = i;
                    } else {
                        if (isFirst) {
                            _ClientJSExecQueueManager.Push(result1);
                            _ClientJSExecQueueManager.Push(result2);
                            isFirst = false;
                        } else {
                            tObj = {};
                            tObj.rowIndex = i;
                            tObj.colIndex = eventColIndex;
                            rowArray.push(tObj);
                        }
                    }
                }
            }
            if (lastRowIndex != null) {
                if (isFirst) {
                    _ClientJSExecQueueManager.Push(lastRes1);
                    _ClientJSExecQueueManager.Push(lastRes2);
                } else {
                    tObj = {};
                    tObj.rowIndex = lastRowIndex;
                    tObj.colIndex = eventColIndex;
                    rowArray.push(tObj);
                }
            }
            if (rowArray.length > 0) {
                window.Global_GridAssoRunList = rowArray;
            }
            /*if(lastRes1.length>0) { 
                _ClientJSExecQueueManager.Push(lastRes1)
                _ClientJSExecQueueManager.Push(lastRes2)
            }*/
            window.Global_GridAsso[this.get_id()] = null;
            _ClientJSExecQueueManager.Start();
        }
    },
    DoCellDataValueChanged4P: function (rowIndex, eventColIndex, pArg) {
        var argStr = "var p={};p.hasAssoFire=" + (pArg.hasAssoFire ? "true" : "false") + ";p.hasDefault=" + (pArg.hasDefault ? "true" : "false") + ";";
        if (_ClientPostBackManager.Runing || Get_Global_WillDoPostBack() == true) {
            var doJs = argStr;
            doJs += "$find('" + this.get_id() + "').DoCellDataValueChanged4P(" + rowIndex + "," + eventColIndex + ",p);";
            Global_JSQueueEvalAfterPageLoadedManager.Add(doJs);
            return;
        }
        var cell = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(rowIndex, eventColIndex);
        if (cell) {
            this.m_gridFaciesManager.SetCurrentCellStyle(rowIndex, eventColIndex);
        }
        var cellData = new CellDataContent("", this.GetCellValue(rowIndex, eventColIndex).Value);
        if (pArg.hasDefault) {
            this.SetDefaultValue4P(rowIndex, eventColIndex);
        }
        if (pArg.hasAssoFire) {
            this.OnCellDataValueChanged(cellData, rowIndex, eventColIndex);
        }
        if (window.Global_GridAssoRunList && window.Global_GridAssoRunList.length > 0) {
            var tObj = window.Global_GridAssoRunList.shift();
            var gridId = this.get_id();
            var result1 = "var tGrid=$find(\"" + gridId + "\");tGrid.EndEdit();if(tGrid.m_currentRowIndex != " + tObj.rowIndex + "){ tGrid.m_currentRowIndex=" + tObj.rowIndex + ";tGrid.OnRowChanged(true);}";
            var result2 = argStr;
            result2 += "$find('" + gridId + "').DoCellDataValueChanged4P(" + tObj.rowIndex + "," + tObj.colIndex + ",p);";
            _ClientJSExecQueueManager.Push(result1);
            _ClientJSExecQueueManager.Push(result2);
            _ClientJSExecQueueManager.Start();
        } else {
            _ClientJSExecQueueManager.Push("var g=$find('" + this.get_id() + "');g.Focus(true);");
            _ClientJSExecQueueManager.Start();
        }
    },
    //Postback前个性化关联的准备
    PreparePersonalAssoEvent: function (rowIndex, colIndex, pArg) {
        if (pArg && (pArg.hasAssoFire || pArg.hasDefault)) {
            var obj = {};
            obj.rowIndex = rowIndex;
            obj.eventColumn = this.MainCols[colIndex].cusAttr('FieldID');
            obj.existsRows = [];
            var rowCount = this.D_Body.rows.length;
            for (var i = 0; i < rowCount; i++) {
                var rState = this.GetRowStatus(i);
                if (rState == RowStatus.UnChanged || rState == RowStatus.Modified) {
                    obj.existsRows.push(this.GetCellValueByFieldAndRow("ID", i).Value);
                }
            }
            if (!window.Global_GridAsso) {
                window.Global_GridAsso = {};
            }
            window.Global_GridAsso[this.get_id()] = obj;
            var doJs = "setTimeout(\"var p={};p.hasAssoFire=" + (pArg.hasAssoFire ? "true" : "false") + ";p.hasDefault=" + (pArg.hasDefault ? "true" : "false") + ";";
            doJs += "$find('" + this.get_id() + "').DoPersonalAssoEventAfterPost(p)\",0);";
            Global_JSQueueEvalAfterPageLoadedManager.Add(doJs);
        }
    },

    //排序
    OnSort: function (columnIndex, sortArrow, fieldID) {
        var evtArgs = this.CreateEventArgs(columnIndex, sortArrow);
        evtArgs.sourceElement = this.get_element();
        this.raiseEvent(DataGridEvent.OnSortData, evtArgs);

        this.eventNode = this.dataDom.createElement("Event");
        this.eventNode.setAttribute("Style", "OnSortData");
        this.eventNode.setAttribute("SortArrow", sortArrow);
        if (fieldID == null) {
            fieldID = this.GetColumnFieldID(columnIndex);
        }
        this.eventNode.setAttribute("ColName", fieldID);
        this.GridIsInFocus = true;
        //yangkuna20100823:设置列，排序返回后定位到排序列，避免排序列不可见
        this.m_currentColumnIndex = columnIndex;
        eval(this._element.cusAttr('onfireevents'));

    },
    //单元数据被修改
    OnCellDataValueChanged: function (dataContent, rowIndex, colIndex) {
        this.Grid_IsDirtyData = true; //认为Grid肯定为脏数据

        var isAssoFireCol = this.MainCols[colIndex].cusAttr('AssoFireCol');
        var hasAssoFire = (isAssoFireCol && isAssoFireCol == "true");
        var hasPDefault = this.hasPersonalDefaultValue();
        if ((hasAssoFire || hasPDefault) && (_ClientPostBackManager.Runing == true || Get_Global_WillDoPostBack() == true)) {
            var pArg = {};
            pArg.hasAssoFire = hasAssoFire;
            pArg.hasDefault = hasPDefault;
            this.PreparePersonalAssoEvent(rowIndex, colIndex, pArg);
            //return;
            //处理多行问题时，原有的基本逻辑还是要走，否则当前行的变化就不会触发对应事件 2010.8.20 lzhm
        }
        //获取个性化前的列索引
        var curColIndex = colIndex; //gct20081229:先备份当前的ColIndex
        serverColIndex = this.GetOldColumnIndex(curColIndex); //serverColIndex为服务器端对应的列索引

        //gct20090610以前下面这句话是注释掉的，不明白为什么要注释掉，现在放开
        this.ResetRowStates(rowIndex);

        this.SetCurrentCellInfo(dataContent); //设置当前单元格的基本信息
        var evtArgs = this.CreateEventArgs();
        //this.InitializeEvent(evtArgs);    
        if (this._element.cusAttr('EditStatus') == DisplayStyle.Edit) {
            //var v = this.getCurId();
            var ele = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(rowIndex, curColIndex); //gct20090627:这里应该用当前客户端列索引curColIndex
            if (!ele) {
                return "";
            }
            var sEventSrc = this.getEventSrcs();
            var idSrc = null;
            if (sEventSrc[0] != "") {
                for (var i = 0; i < sEventSrc.length; i++) {
                    if (this.MainCols[ele.cellIndex].cusAttr('FieldID') == sEventSrc[i]) {
                        idSrc = sEventSrc[i];
                        break;
                    }
                }
            }
            var v = idSrc;
            if (null != v) {
                var sEventSrc = this.getEventSrcs();
                evtArgs.EventSrc = v;
            }
        }
        //
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = dataContent;
        evtArgs.SrcColIndex = serverColIndex - 1; //Args中应该存的是服务器端列索引serverColIndex
        evtArgs.SrcRowIndex = rowIndex;
        var tmphavePost = (_ClientPostBackManager.Runing == true || Get_Global_WillDoPostBack() == true);
        this.raiseEvent(DataGridEvent.OnCellDataValueChanged, evtArgs);
        //二次加载-begin--
        if (!tmphavePost && _ClientPostBackManager.Runing != true && Get_Global_WillDoPostBack() != true) {
            //var refControl = this.GetColumnControl(colIndex,rowIndex);
            //if (refControl && refControl.SndLoad){   
            var refColumn = this.MainCols[colIndex];
            if (refColumn && refColumn.cusAttr("SndLoad")) {
                this.SecondLoadAjaxCall(rowIndex, colIndex);
            }
        }
        //二次家长-end--

        return !dataContent.Cancel;
    },
    //个性化参照单元携带事件处理（仿照OnCellDataValueChanged而写）
    OnRowContentChanged4P: function (dataContent, rowIndex, colIndex) {
        this.Grid_IsDirtyData = true; //认为Grid肯定为脏数据

        //获取个性化前的列索引
        var curColIndex = colIndex; //gct20081229:先备份当前的ColIndex
        serverColIndex = this.GetOldColumnIndex(curColIndex); //serverColIndex为服务器端对应的列索引

        //gct20090610以前下面这句话是注释掉的，不明白为什么要注释掉，现在放开
        this.ResetRowStates(rowIndex);

        this.SetCurrentCellInfo(dataContent); //设置当前单元格的基本信息
        var evtArgs = this.CreateEventArgs();
        //this.InitializeEvent(evtArgs);    
        if (this._element.cusAttr('EditStatus') == DisplayStyle.Edit) {
            //var v = this.getCurId();
            var ele = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(rowIndex, curColIndex); //gct20090627:这里应该用当前客户端列索引curColIndex
            if (!ele) {
                return "";
            }
            var sEventSrc = this.getEventSrcs();
            var idSrc = null;
            if (sEventSrc[0] != "") {
                for (var i = 0; i < sEventSrc.length; i++) {
                    if (this.MainCols[ele.cellIndex].cusAttr('FieldID') == sEventSrc[i]) {
                        idSrc = sEventSrc[i];
                        break;
                    }
                }
            }
            var v = idSrc;
            if (null != v) {
                var sEventSrc = this.getEventSrcs();
                evtArgs.EventSrc = v;
            }
        }
        //
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = dataContent;
        evtArgs.SrcColIndex = serverColIndex; //Args中应该存的是服务器端列索引serverColIndex
        evtArgs.SrcRowIndex = rowIndex;
        this.raiseEvent(DataGridEvent.OnRowContentChanged4P, evtArgs); //gct20091104：为了支持个性化参照携带而增加（个性化的参照携带在固有事件逻辑之后）
        return !dataContent.Cancel;
    },
    //单元数据被修改
    OnCellDataChanged: function (dataContent, rowIndex, colIndex) {
        this.Grid_IsDirtyData = true; //认为Grid肯定为脏数据
        Set_Global_IsDirtyData_TheForm(this.Grid_IsDirtyData);
        //yangkuna20100722:设置客户端行数据已脏
        this.SetClientRowDataDirtyTag(rowIndex, true);

        //获取个性化前的列索引
        var curColIndex = colIndex; //gct20081229:先备份当前的ColIndex
        colIndex = this.GetOldColumnIndex(curColIndex);

        this.ResetRowStates(this.m_currentRowIndex);
        this.SetCurrentCellInfo(dataContent); //设置当前单元格的基本信息
        var evtArgs = this.CreateEventArgs();
        evtArgs.SrcColIndex = curColIndex; //gct20081229:用当前的ColIndex去InitializeEvent(evtArgs)
        evtArgs.SrcRowIndex = rowIndex;
        this.InitializeEvent(evtArgs);
        evtArgs.SrcColIndex = colIndex - 1;
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = dataContent;
        this.raiseEvent(DataGridEvent.OnCellDataChanged, evtArgs);
        return !dataContent.Cancel;
    },
    //单元开始编辑之前
    OnBeforeCellFocusEnter: function (dataContent) {
        if (this._element.cusAttr('NoFireEvent') == true) {
            //window.event.cancelBubble=true;
            return false;
        }

        /******************************************************************* Begin *********************************************************/
        /*if(typeof(this.get_element().BeforeCellFocusEnterEvent)!="undefined")
        {
            var colIndex = this.m_currentColumnIndex;
            
            var ctrl = $(this.MainCols[colIndex]).attr('ColEditCtrlClientID4P');
            
            if(ctrl != null)
            {
                if(this.m_currentRowIndex4PCol != this.m_currentRowIndex)
                {
                    this.eventNode=this.dataDom.createElement("Event");
                    this.eventNode.setAttribute("Style","BeforeCellFocusEnter");//一定要是BeforeCellFocusEnter，服务器段使用
                    this.eventNode.setAttribute("RowIndex",this.m_currentRowIndex);
                    //this.eventNode.setAttribute("ColumnIndex",this.m_currentColumnIndex);
                    //
                    this.StoreState("Y");
                    this.GridIsInFocus = true;
                    //
                    if(this.GetRowStatus(this.m_currentRowIndex) == RowStatus.Empty)
                    {
                        var js="if($find('" + this.get_id() + "').get_Rows() > " + this.m_currentRowIndex + "){$find('" + this.get_id() + "').m_currentRowIndex=" + this.m_currentRowIndex + ";$find('" + this.get_id() + "').m_gridFaciesManager.SetSelectedRow(" + this.m_currentRowIndex + ");$find('" + this.get_id() + "').Focus();$find('" + this.get_id() + "').StartEdit();}";
                        Global_JSQueueEvalAfterPageLoadedManager.Add(js);
                    }
                    
                    //gct20090825:个性化列的行索引一定要和非个性化列的行索引同步。
                    this.m_currentRowIndex4PCol = this.m_currentRowIndex;
                    Set_GridCurrentRowIndex4P(this.m_currentRowIndex4PCol); //add by lzhm 20100428 同步在BaseControl.SynchUpdateValue4PersonalColumn要使用的行索引
                    top.DataGridCurrentRowIndex4PCol[this.get_id()] = this.m_currentRowIndex4PCol;//在客户端缓存m_currentRowIndex4PCol，防止PostBack造成其丢失
                    
                    //eval(this.$element.attr('onfireevents'));
                    window.setTimeout("eval(\""+this.$element.attr('onfireevents')+"\")",0);
                    
                }                
                return;//gct20090826：对于个性化列应该直接返回，后面的代码不需要执行了
            }
        }*/
        if (this.IsNeedSwitchTabPage()) {
            //this.ImitateSwitchTabPage(); 
            var switchPost = "$find('" + this.get_id() + "').ImitateSwitchTabPage();";
            var action = "if(_ClientCallBackManager.Runing == true || _ClientPostBackManager.Runing == true || $find('" + this.get_id() + "').IsThisGirdPosting) { _ClientJSExecQueueManager.Push(\"" + switchPost + "\"); } ";
            action += "else { eval(\"" + switchPost + "\"); }";
            window.setTimeout(action, 0);
            return;
        }
        /******************************************************************** End ********************************************************/

        var evtArgs = this.CreateEventArgs();
        this.InitializeEvent(evtArgs);
        if (!this.IsEmptyRow(this.D_Body.rows[this.m_currentRowIndex])) {
            evtArgs.SrcColIndex = this.GetOldColumnIndex(this.GetColumnIndex(evtArgs.EventSrc)) - 1;
            evtArgs.SrcRowIndex = this.m_currentRowIndex;
        }
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = dataContent;
        this.raiseEvent(DataGridEvent.OnBeforeCellFocusEnter, evtArgs);
        return dataContent.CellEditEnabled;
    },

    //对话框打开之前
    OnBeforeOpenDialog: function (dataContent) {
        colIndex = this.GetColumnIndex(dataContent.FieldID);
        colIndex = this.GetOldColumnIndex(colIndex);
        var evtArgs = this.CreateEventArgs();
        this.InitializeEvent(evtArgs);
        evtArgs.SrcColIndex = colIndex - 1;
        evtArgs.SrcRowIndex = this.m_currentRowIndex;
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = dataContent;
        this.raiseEvent(DataGridEvent.OnBeforeOpenDialog, evtArgs);
        return dataContent.CancelDefaultAction;
    },
    OnRowClicked: function () {
        var context = new CellDataContent("", "");
        this.SetCurrentCellInfo(context); //设置当前位置的基本信息
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = context;
        this.raiseEvent(DataGridEvent.OnRowClick, evtArgs);
    },
    OnRowChanged: function (isBatModify, isRemoveRow) {
        //yangkuna_20100628_行切换后重设m_currentRowIndex4PCol
        this.m_currentRowIndex4PCol = -1;
        //top改为BaseTop
        top.DataGridCurrentRowIndex4PCol[this.get_id()] = this.m_currentRowIndex4PCol;

        var context = new CellDataContent("", "");
        this.SetCurrentCellInfo(context); //设置当前位置的基本信息
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = context;
        //added by u9lkc 20111027 个性化模拟切页签时 应用开发注册的callback事件都不响应    
        if (!this.m_IsSwitchTabPage)
            this.raiseEvent(DataGridEvent.OnRowChanged, evtArgs);

        if (typeof (this._element.cusAttr('RowChangedEvent')) != "undefined") {
            this.eventNode = this.dataDom.createElement("Event");
            this.eventNode.setAttribute("Style", "RowChanged");
            this.eventNode.setAttribute("RowIndex", this.m_currentRowIndex);
            //this.eventNode.setAttribute("ColumnIndex",this.m_currentColumnIndex);
            //
            this.StoreState("Y");
            this.GridIsInFocus = true;
            //
            if (this.GetRowStatus(this.m_currentRowIndex) == RowStatus.Empty) {
                var js = "if($find('" + this.get_id() + "').get_Rows() > " + this.m_currentRowIndex + "){$find('" + this.get_id() + "').m_currentRowIndex=" + this.m_currentRowIndex + ";$find('" + this.get_id() + "').m_gridFaciesManager.SetSelectedRow(" + this.m_currentRowIndex + ");$find('" + this.get_id() + "').Focus();$find('" + this.get_id() + "').StartEdit();}";
                Global_JSQueueEvalAfterPageLoadedManager.Add(js);
            }

            //gct20090825:
            //无论是RowChanged还是RowChangedInColumns重新设置一下个性化列专用的RowIndex        
            //为什么这里需要设置this.m_currentRowIndex4PCol，原因是因为我们需要只需要发起一次Post用来模拟切换页签，现在RowChanged既然已经能发起Post了，自然不需要我们再因为个性化列而多余的发起Post了。
            //但是个性化列的行索引一定要和非个性化列的行索引同步。
            this.m_currentRowIndex4PCol = this.m_currentRowIndex;
            top.DataGridCurrentRowIndex4PCol[this.get_id()] = this.m_currentRowIndex4PCol; //在客户端缓存m_currentRowIndex4PCol，防止PostBack造成其丢失

            eval(this._element.cusAttr('onfireevents'));
        } else if (isBatModify == true || typeof (this._element.cusAttr('RowChangedInColumnsEvent')) != "undefined") {
            /*var colIndex = this.m_currentColumnIndex;
            
            var ctrl = $(this.MainCols[colIndex]).attr('ColEditCtrlClientID4P');
            
            if(ctrl != null)
            {
                this.eventNode=this.dataDom.createElement("Event");
                //this.eventNode.setAttribute("Style","RowChangedInColumns");//一定要是RowChangedInColumns，服务器段使用
                this.eventNode.setAttribute("Style","BeforeCellFocusEnter");//一定要是RowChangedInColumns，服务器段使用
                this.eventNode.setAttribute("RowIndex",this.m_currentRowIndex);
                //this.eventNode.setAttribute("ColumnIndex",this.m_currentColumnIndex);
                //
                this.StoreState("Y");
                this.GridIsInFocus = true;
                //
                if(this.GetRowStatus(this.m_currentRowIndex) == RowStatus.Empty)
                {
                    var js="if($find('" + this.get_id() + "').get_Rows() > " + this.m_currentRowIndex + "){$find('" + this.get_id() + "').m_currentRowIndex=" + this.m_currentRowIndex + ";$find('" + this.get_id() + "').m_gridFaciesManager.SetSelectedRow(" + this.m_currentRowIndex + ");$find('" + this.get_id() + "').Focus();$find('" + this.get_id() + "').StartEdit();}";
                    Global_JSQueueEvalAfterPageLoadedManager.Add(js);
                }
                
                //gct20090825:个性化列的行索引一定要和非个性化列的行索引同步。
                this.m_currentRowIndex4PCol = this.m_currentRowIndex;
                top.DataGridCurrentRowIndex4PCol[this.get_id()] = this.m_currentRowIndex4PCol;//在客户端缓存m_currentRowIndex4PCol，防止PostBack造成其丢失
                
                eval(this.$element.attr('onfireevents'));
            }*/
        }

        //yangkuna20100811:新增行超过一屏时，会自动滚动到新行位置，菜单的位置应在之后设置; 20100817:如果有post事件在执行，则不用设置
        if (!this.GetIsBatchModifyRunning()) {
            if (_ClientPostBackManager.Runing != true && Get_Global_WillDoPostBack() != true && isBatModify != true) {
                var func = "if($find('" + this.get_id() + "') && $find('" + this.get_id() + "').m_gridBodyEventsHandler && $find('" + this.get_id() + "').m_gridBodyEventsHandler.GridEditHelper)";
                func += "$find('" + this.get_id() + "').m_gridBodyEventsHandler.GridEditHelper.ShowMenu($find('" + this.get_id() + "').m_currentRowIndex);";
                window.setTimeout(func, 100);
            }
        }
    },

    //对话框打开之后 
    OnAfterOpenDialog: function (dataContent) {
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = dataContent;
        this.raiseEvent(DataGridEvent.OnAfterOpenDialog, evtArgs);
        return dataContent.CancelDefaultAction;
    },
    // 初始化设置底部已选条数
    set_SelectedRows: function () {
        if (this.m_toolbarDiv != null && this.m_toolbarDiv.tagName == "TABLE" && this.m_toolbarDiv.rows[0].cells[0].children.length > 0) {
            try {
                var a1 = $(this.m_toolbarDiv.rows[0].cells[0]).children("#a_sel_count");
                var initCount = Number(JSON.parse(this.m_toolbarDiv.cusAttr("data-ca")).serverselcount);
                var pageselectNum = 0;
                $(this.D_Body).children().each(function (index, item) {
                    if ($(item).children().eq(0).children().eq(0).prop("checked")) {
                        pageselectNum += 1
                    }
                })
                this.m_initCount = initCount;
                this.m_pageCount = pageselectNum;
                if (a1.length == 1) {
                    var aRows = a1[0];
                    var SelectedNum = initCount + pageselectNum;
                    if (SelectedNum > 0) {
                        aRows.innerHTML = aRows.innerHTML.replace(/\d+/g, SelectedNum);
                        a1.show();
                    } else {
                        a1.hide();
                    }
                }
            }
            catch (err) {
                console.log(err)
            }
        }
    },
    // 设置多选已选条数
    set_SelectRows: function (isAdd) {
        if (this.m_toolbarDiv != null && this.m_toolbarDiv.tagName == "TABLE" && this.m_toolbarDiv.rows[0].cells[0].children.length > 0) {
            var a1 = $(this.m_toolbarDiv.rows[0].cells[0]).children("#a_sel_count");
            if (a1.length == 1) {
                var aRows = a1[0];
                var reg = /\d+/g;
                // 初次选择记录初始已选数量
                if (!this.m_isSelected) {
                    this.m_isSelected = true
                }
                this.m_pageCount = isAdd ? this.m_pageCount + 1 : this.m_pageCount - 1
                SelectedNum = this.m_pageCount + this.m_initCount;
                SelectedNum = SelectedNum < 0 ? 0 : SelectedNum;
                aRows.innerHTML = aRows.innerHTML.replace(/\d+/g, SelectedNum)
                if (SelectedNum > 0) {
                    a1.show();
                } else {
                    a1.hide();
                }

            }
        }
    },
    //表体被选择
    OnBodyRowSelected: function (selectedRowIndex, selected, oldSelectedValue) {
        var id = this.GetCellValueByFieldAndRow("ID", selectedRowIndex).Value;
        if (selected) {
            if (!oldSelectedValue) {
                this.set_SelectRows(true)
            }
            this.SortedSelectIDs_Add(id);
            this.m_gridFaciesManager.SetSelectedRowBgcolor(selectedRowIndex, true);
            // 添加已选基数-zjh
        } else {
            this.SortedSelectIDs_Remove(id);
            this.UnSelectIDs_Add(id);
            if (oldSelectedValue) {
                this.set_SelectRows(false)
                this.m_gridFaciesManager.SetSelectedRowBgcolor(selectedRowIndex, false);
            }
            // 减少已选计数
        }

        if (this.m_SumSelectedData && (selected != oldSelectedValue)) {
            for (var i = 0; i < this.MainCols.length; i++) {
                var oldCellValue = 0;
                if (this.MainCols[i].cusAttr('HasSum') == "true") {
                    oldCellValue = parseFloat(this.D_Body.rows[selectedRowIndex].cells[i].cusAttr("Value"));
                    //wanglei 20110902: 获取合计组件修改(过去方法,在 浏览时,获取 选中行合计,会报错.)
                    if (selected) {
                        // this.m_gridBodyEventsHandler.GridEditHelper.CalculateHelper.aggregationCalculater.Aggregating(i,0,oldCellValue);
                        this.getCaculator().aggregationCalculater.Aggregating(i, 0, oldCellValue);
                    } else {
                        this.getCaculator().aggregationCalculater.Aggregating(i, oldCellValue, 0);
                    }
                }
            }
        }
        //wanglei:是否触发 新合计行 计算逻辑

        if (this._element.cusAttr('HasNewSumRow') == "true" &&
            (selected != oldSelectedValue)) {
            for (var i = 0; i < this.MainCols.length; i++) {
                var oldCellValue = 0;
                if (this.MainCols[i].cusAttr('HasSum') == "true") {
                    oldCellValue = parseFloat(this.D_Body.rows[selectedRowIndex].cells[i].cusAttr("Value"));
                    if (selected) {
                        this.getCaculator().aggregationCalculater.AggregatingNewSum(i, 0, oldCellValue);
                    } else {
                        this.getCaculator().aggregationCalculater.AggregatingNewSum(i, oldCellValue, 0);
                    }
                }
            }
        }

        if (!selected) {
            var cell = this.m_gridFaciesManager.tableHead.children[0].cells[0];
            var checkBox = cell.firstChild;
            if (checkBox != this.UNDEFINED_VALUE) {
                if (checkBox.type == "checkbox") {
                    checkBox.checked = false;
                }
            }
            //当行的选中状态变为false时，把所有页选中标记置为false
            if (this.m_pageBreakManagerInstance && this.m_pageBreakManagerInstance.chk)
                this.m_pageBreakManagerInstance.chk.checked = false;

        }
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = new SelectRowArg(selectedRowIndex, selected);
        this.raiseEvent(DataGridEvent.OnBodyRowSelectedValueChange, evtArgs);
    },
    //表体被选择
    OnBodyRowSelectedClick: function (selectedRowIndex, selected) {
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = new SelectRowArg(selectedRowIndex, selected);
        this.raiseEvent(DataGridEvent.OnBodyRowSelected, evtArgs);
    },
    //增加行之后事件
    OnAfterRowAdded: function (newRowIndex) {
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = newRowIndex;
        this.InitializeEvent(evtArgs);
        this.raiseEvent(DataGridEvent.OnAfterRowAdded, evtArgs);
    },

    //行插入之后事件
    OnAfterRowInserted: function (newRowIndex) {
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = newRowIndex;
        this.InitializeEvent(evtArgs);
        this.raiseEvent(DataGridEvent.OnAfterRowInserted, evtArgs);
    },

    //行增加之前执行
    OnBeforeRowAdd: function () {
        var content = new CellDataContent("", "");
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = content;
        this.InitializeEvent(evtArgs);
        this.raiseEvent(DataGridEvent.OnBeforeRowAdd, evtArgs);
        return content.CancelAction;
    },

    //行插入之前执行
    OnBeforeRowInsert: function () {
        var content = new CellDataContent("", "");
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = content;
        this.InitializeEvent(evtArgs);
        this.raiseEvent(DataGridEvent.OnBeforeRowInsert, evtArgs);
        return content.CancelAction;
    },

    //行删除之前执行
    OnBeforeRowDelete: function () {
        var content = new CellDataContent("", "");
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = content;
        this.InitializeEvent(evtArgs);
        this.raiseEvent(DataGridEvent.OnBeforeRowDelete, evtArgs);
        return content.CancelAction;
    },

    //删除行之后事件
    OnAfterRowDeleted: function () {
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        this.InitializeEvent(evtArgs);
        this.raiseEvent(DataGridEvent.OnAfterRowDeleted, evtArgs);
    },

    //行复制之前执行
    OnBeforeRowCopy: function () {
        var content = new CellDataContent("", "");
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = content;
        this.InitializeEvent(evtArgs);
        this.raiseEvent(DataGridEvent.OnBeforeRowCopy, evtArgs);
        return content.CancelAction;
    },

    //复制行之后事件
    OnAfterRowCopyed: function (newRowIndex, oldRowIndex) {
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.SrcRowIndex = newRowIndex;
        evtArgs.oldRowIndex = oldRowIndex;
        this.InitializeEvent(evtArgs);
        this.raiseEvent(DataGridEvent.OnAfterRowCopyed, evtArgs);
    },

    //复制行后的默认动作
    OnAfterRowCopyedDefaultAction: function (newRowIndex, oldRowIndex) {
        var disableDefAct = false;
        if (this._element.cusAttr('DisableDefaultCopyRowAction') != this.UNDEFINED_VALUE) {
            disableDefAct = true;
        }
        var oldRowStatus = this.GetRowStatus(oldRowIndex);
        if (oldRowStatus != RowStatus.Modified && oldRowStatus != RowStatus.UnChanged) {
            disableDefAct = true;
        }
        if (!disableDefAct) {
            var evtArgs = this.CreateEventArgs();
            evtArgs.sourceElement = this.get_element();
            evtArgs.SrcRowIndex = newRowIndex;
            evtArgs.oldRowIndex = oldRowIndex;
            this.InitializeEvent(evtArgs);
            this.raiseEvent(DataGridEvent.OnAfterRowCopyed4Default, evtArgs);
        }
    },

    //激活控件鼠标单击事件
    OnCellClick: function (rowIndex, columnIndex) {
        if (this._element.cusAttr('NoFireEvent') && this._element.cusAttr('NoFireEvent').toString() == "true") {
            //window.event.cancelBubble=true;
            return;
        }
        //获取个性化前的列索引
        columnIndex = this.GetOldColumnIndex(columnIndex);

        var context = new CellDataContent("", "");
        this.SetCurrentCellInfo(context); //设置当前单元格的基本信息
        var evtArgs = this.CreateEventArgs();
        this.InitializeEvent(evtArgs);
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = context;
        this.raiseEvent(DataGridEvent.OnCellClick, evtArgs);

        if (typeof (this._element.cusAttr('ClickEvent')) != "undefined") {
            this.eventNode = this.dataDom.createElement("Event");
            this.eventNode.setAttribute("Style", "CellClick");
            this.eventNode.setAttribute("RowIndex", rowIndex);
            this.eventNode.setAttribute("ColumnIndex", columnIndex);
            //
            this.StoreState("Y");
            this.GridIsInFocus = true;
            //
            eval(this._element.cusAttr('onfireevents'));
        }
    },
    SelectCurrentRow: function () {
        var checkBox = this.D_Body.rows[this.m_currentRowIndex].getElementsByTagName("input")[0];
        if (checkBox) {
            if (checkBox.type != "checkbox") return true;
            if (checkBox.checked == true)
                return true;
            checkBox.focus();
            checkBox.checked = true;
            this.OnBodyRowSelected(this.m_currentRowIndex, true, false);
        }
    },
    //设置当前行选中或者不选中
    SetCurrentRowChecked: function (checked) {
        this.SetRowChecked(this.m_currentRowIndex, checked);
    },
    //设置指定行选中或者不选中
    SetRowChecked: function (rowIndex, checked, fireClickEvent) {
        var checkBox = this.D_Body.rows[rowIndex].getElementsByTagName("input")[0];
        if (checkBox) {
            if (checkBox.type != "checkbox") return true;
            checkBox.focus();
            var oldValue = checkBox.checked;
            checkBox.checked = checked;
            //模拟录入方式，触发点击变更
            //mahx U9ZNZZ-58276
            this.OnBodyRowSelected(rowIndex, checked, oldValue);
            if (fireClickEvent) {
                this.OnBodyRowSelectedClick(rowIndex, checked);
                this.OnRowClicked();
            }
        }
    },
    //激活控件鼠标双击表格行事件
    OnCellDBClick: function (rowIndex, columnIndex) {
        //获取个性化前的列索引
        columnIndex = this.GetOldColumnIndex(columnIndex);

        var context = new CellDataContent("", "");
        this.SetCurrentCellInfo(context); //设置当前单元格的基本信息
        var evtArgs = this.CreateEventArgs();
        this.InitializeEvent(evtArgs);
        evtArgs.arg = context;
        evtArgs.sourceElement = this.get_element();
        this.raiseEvent(DataGridEvent.OnCellDbClick, evtArgs);
        //if(typeof(this.get_element().DBClickEvent)!="undefined")
        if (typeof (this._element.cusAttr('DBClickEvent')) != "undefined") {
            //
            if (this.m_isCheckedByClick) {
                this.SelectCurrentRow();
            }
            //
            this.eventNode = this.dataDom.createElement("Event");
            this.eventNode.setAttribute("Style", "CellDbClick");
            this.eventNode.setAttribute("RowIndex", rowIndex);
            this.eventNode.setAttribute("ColumnIndex", columnIndex);

            this.StoreState("Y");
            this.GridIsInFocus = true;
            eval(this._element.cusAttr('onfireevents'));
        }
    },

    OnMovePage: function (action, PageNumber) {
        if (this.m_PageCount == 1) return;
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.arg = action;
        this.raiseEvent(DataGridEvent.OnMovePage, evtArgs);
        if (typeof (this._element.cusAttr('TurnPage')) != "undefined") {
            this.eventNode = this.dataDom.createElement("Event");
            this.eventNode.setAttribute("Style", "TurnPage");
            this.eventNode.setAttribute("StartRowIndex", this._element.cusAttr('StartRowIndex'));
            this.eventNode.setAttribute("ActionTag", action);
            if (PageNumber != null) {
                this.eventNode.setAttribute("GotoPage", PageNumber);
            } else {
                this.eventNode.setAttribute("GotoPage", "-1");
            }
            //
            this.StoreState("P");
            this.GridIsInFocus = true;
            //db分页 为了后台方便判断是否是分页发起的PostBack
            var fireevent = this._element.cusAttr('onfireevents').replace("\'\'", "\'MovePage\'");
            eval(this._element.cusAttr('onfireevents'));
        }
    },

    OnChangePageSize: function (pageSize) {
        var cookieName = "PageSize_" + $("#UserCode").val();
        //this.setCookie(cookieName,pageSize);
        //window.location.reload();
        this.eventNode = this.dataDom.createElement("Event");
        this.eventNode.setAttribute("Style", "ChangePageSize");
        this.eventNode.setAttribute("PageSize", pageSize);
        this.StoreState("P");
        this.GridIsInFocus = true;
        //db分页 为了后台方便判断是否是页码发起的PostBack
        var fireevent = this._element.cusAttr('onfireevents').replace("\'\'", "\'ChangePageSize\'");
        eval(this._element.cusAttr('onfireevents'));
    },
    setCookie: function (name, value) {
        var Days = 30;
        var exp = new Date();
        exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
        document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
    },
    //选中所有页
    OnSelectAllPage: function (checked) {
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        evtArgs.AllPageSelected = checked;
        evtArgs.arg = checked;
        this.raiseEvent(DataGridEvent.OnSelecteAllPage, evtArgs);

        if (typeof (this._element.cusAttr('SelecteAllPage')) != "undefined") {
            this.eventNode = this.dataDom.createElement("Event");
            this.eventNode.setAttribute("Style", "SelecteAllPage");
            this.eventNode.setAttribute("AllPageSelected", checked ? "true" : "false");
            this.StoreState("Y");
            this.GridIsInFocus = true;
            eval(this._element.cusAttr('onfireevents'));
        }

    },
    //批量修改
    OnBatchModify: function (dataArg) {
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        var content = new CellDataContent("", "");
        evtArgs.arg = content;
        evtArgs.arg.Data = dataArg.Data;
        this.raiseEvent(DataGridEvent.OnBatchModify, evtArgs);

        var element = this.get_element();
        var fCols = element.cusAttr("EditCols");
        if ((typeof (element.cusAttr("BatchModify")) != "undefined") &&
            (!fCols || (fCols.indexOf(dataArg.Column) >= 0)) &&
            (
                dataArg.Symbol === "=" || (dataArg.Symbol !== "=" && element.cusAttr("BCOnServer") === "True")
            )
        ) {
            this.eventNode = this.dataDom.createElement("Event");
            this.eventNode.setAttribute("Style", "BatchModify");
            this.eventNode.setAttribute("Data", dataArg.Data);
            this.eventNode.setAttribute("ColName", dataArg.Column);
            this.eventNode.setAttribute("ColIndex", this.GetOldColumnIndex(this.GetColumnIndex(dataArg.Column)));
            this.StoreState("Y");
            this.GridIsInFocus = true;
            eval(element.cusAttr('onfireevents'));
            return true;
        }
        return content.CancelAction;
    },
    //批量粘贴
    OnBatchPaste: function (dataArg) {
        var evtArgs = this.CreateEventArgs();
        evtArgs.sourceElement = this.get_element();
        var content = new CellDataContent("", "");
        evtArgs.arg = content;
        evtArgs.arg.Data = dataArg;
        this.raiseEvent(DataGridEvent.OnBatchPaste, evtArgs);

        var element = this.get_element();
        this.eventNode = this.dataDom.createElement("Event");
        this.eventNode.setAttribute("Style", "BatchPaste");
        this.eventNode.setAttribute("Data", dataArg.PasteList);
        this.eventNode.setAttribute("ColName", dataArg.fieldid);
        this.eventNode.setAttribute("ColIndex", dataArg.rowIndex);
        this.StoreState("Y");
        this.GridIsInFocus = true;
        eval(element.cusAttr('onfireevents'));
    },

    IsBatchModifyRunAtServer: function (colName) {
        var element = this.get_element();
        var fCols = element.cusAttr("EditCols");
        if ((typeof (element.cusAttr("BatchModify")) != "undefined") && (!fCols || (fCols.indexOf(colName) >= 0))) {
            return true;
        }
        return false;
    },


    //单元焦点进入
    OnCellFocusEnter: function () {
        this.GridIsInFocus = true;
        var context = new CellDataContent("", "");
        this.SetCurrentCellInfo(context); //设置当前单元格的基本信息
        var evtArgs = this.CreateEventArgs();
        this.InitializeEvent(evtArgs);
        evtArgs.arg = context;
        evtArgs.sourceElement = this.get_element();
        this.raiseEvent(DataGridEvent.OnCellFocusEnter, evtArgs);
    },
    OnFireSelectAllEvent: function () {
        var evtArgs = this.CreateEventArgs();
        var context = new CellDataContent("", "");
        this.SetCurrentCellInfo(context); //设置当前单元格的基本信息
        evtArgs.arg = context;
        this.InitializeEvent(evtArgs);
        evtArgs.sourceElement = this.get_element();
        this.raiseEvent(DataGridEvent.OnSelectAllRecords, evtArgs);
    },
    OnFireControlChangeEvent: function () {
        /*var evtArgs = this.CreateEventArgs();
        var context =new CellDataContent("","");
        this.SetCurrentCellInfo(context); //设置当前单元格的基本信息
        evtArgs.arg =context;
        this.InitializeEvent(evtArgs);
        evtArgs.sourceElement =this.get_element();
        this.raiseEvent(DataGridEvent.OnControlValueChange,evtArgs);*/
    },
    //单元焦点丢失
    OnCellFocusOut: function (rowIndex, colIndex) {
        //获取个性化前的列索引
        colIndex = this.GetOldColumnIndex(colIndex);

        var evtArgs = this.CreateEventArgs();
        var context = new CellDataContent("", "");
        this.SetCurrentCellInfo(context); //设置当前单元格的基本信息
        evtArgs.arg = context;
        evtArgs.SrcColIndex = colIndex;
        evtArgs.SrcRowIndex = rowIndex;
        this.InitializeEvent(evtArgs);
        evtArgs.SrcColIndex = colIndex - 1;
        evtArgs.sourceElement = this.get_element();
        this.raiseEvent(DataGridEvent.OnCellFocusOut, evtArgs);
    },

    InitializeEvent: function (evtArgs) {
        if (this._element.cusAttr('EditStatus') == DisplayStyle.Edit) {
            var v = this.getCurId(evtArgs.SrcRowIndex, evtArgs.SrcColIndex);
            if (null != v) {
                var sEventSrc = this.getEventSrcs();
                evtArgs.EventSrc = v;
            }
        }
    },


    //设置当前单元的基本信息
    SetCurrentCellInfo: function (context) {
        if (context != null) {
            context.CurrentRowIndex = this.m_currentRowIndex; //设置当前行索引
            context.CurrentColumnIndex = this.m_currentColumnIndex - 1; //设置当前列索引 
            if (this.MainCols[this.m_currentColumnIndex]) {
                context.ColField = this.MainCols[this.m_currentColumnIndex].cusAttr('FieldID'); //取得列名
            }
        }
    },

    CreateEventArgs: function () {
        return new UF.UI.GridEventArgs();
    },
    getCurId: function (rowIndex, colIndex) {
        var ele;
        if (rowIndex == this.UNDEFINED_VALUE) {
            ele = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(this.m_currentRowIndex, this.m_currentColumnIndex);
        } else {
            ele = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(rowIndex, colIndex);
        }
        if (!ele) {
            return "";
        }
        var sEventSrc = this.getEventSrcs();
        var idSrc = null;
        if (sEventSrc[0] != "") {
            var fieldId = this.MainCols[ele.cellIndex].cusAttr('FieldID');
            for (var i = 0; i < sEventSrc.length; i++) {
                if (fieldId == sEventSrc[i]) {
                    idSrc = sEventSrc[i];
                    break;
                }
            }
        }
        return idSrc;
    },

    ///
    ///控件初始化处理
    ///
    ReadDataGridContent: function () {
        this.M_Table = this.get_element().children[0]; //布局控制表格
        this.m_activeContainer = this.M_Table.rows[0].cells[0].children[0]; //Grid内容显示表格容器
        this.S_Body = this.m_activeContainer.children[0]; //Grid内容显示主表格
        this.D_Head = this.S_Body.tHead; //设置表头控制对象
        this.D_Body = this.S_Body.tBodies[0]; //设置表体各行的内容
        this.ParentDocument = $E(this._element.parentElement).document;
        if (this._element.cusAttr('HasSum') == DefaultSymbol.True) this.D_Foot = this.S_Body.tFoot; //设置表尾合计行
        //if(this.$element.attr('Pagging') !=this.UNDEFINED_VALUE) 
        this.m_toolbarDiv = this.GetPageBreakToolbar(this.M_Table); //找到分页工具条
        if (this._element.cusAttr('PageSize') != this.UNDEFINED_VALUE) this.m_PageSize = parseInt(this._element.cusAttr('PageSize'), 10); //找到分页工具条
        if (this._element.cusAttr('CustomFilter') != this.UNDEFINED_VALUE) this.m_CustomFilterToolbarDiv = this.GetCustomFilterToolbar(this.M_Table); //找到分页工具条
        if (this._element.cusAttr('RefSplitter2') != this.UNDEFINED_VALUE) this.RefSplitter2 = this._element.cusAttr('RefSplitter2');
        if (this._element.cusAttr('FrozenCtrlCol') != this.UNDEFINED_VALUE) {
            this.m_FrozenControlColumn = (this._element.cusAttr('FrozenCtrlCol') == "true"); // = "FrozenCtrlCol"
        }
        if (this._element.cusAttr('SumAllData') != this.UNDEFINED_VALUE) {
            this.m_SumAllData = (this._element.cusAttr('SumAllData') == "true"); // 合计所有行（DB） "SumAllData"
        }
        if (this._element.cusAttr('SumSelectedData') != this.UNDEFINED_VALUE) {
            this.m_SumSelectedData = (this._element.cusAttr('SumSelectedData') == "true"); // 合计选中行 = "SumSelectedData"
        }
        if (this._element.cusAttr('ViewDirty') != this.UNDEFINED_VALUE && this._element.cusAttr('ViewDirty').toString() == "true") {
            this.ViewDirty = true;
        }
    },

    GetCustomFilterToolbar: function (layoutGrid) {
        if (layoutGrid != null) {
            if (layoutGrid.rows.length > 2) {
                return layoutGrid.rows[2];
            } else if (layoutGrid.rows.length > 1) {
                if (layoutGrid.rows[1].className == "CustomFilterToolBar") {
                    return layoutGrid.rows[1];
                }
            }
            else if (layoutGrid.rows.length == 1) {
                //只有在IE11下rows才会有1个，很邪门儿，明明有三行
                if (layoutGrid.children.length == 2 && layoutGrid.children[1].tagName.toLowerCase() == "tbody") {
                    var cc = layoutGrid.children[1];
                    if (cc.children.length > 2) {
                        return cc.children[2];
                    } else if (cc.children.length > 1) {
                        if (cc.children[1].className == "CustomFilterToolBar") {
                            return cc.children[1];
                        }
                    }
                }
            }
        }
        return null;
    },

    //找到翻页工具条
    GetPageBreakToolbar: function (layoutGrid) {
        if (layoutGrid != null) {
            if ((layoutGrid.rows.length > 2) || (layoutGrid.rows.length == 2 && layoutGrid.rows[1].cells.length > 0 && layoutGrid.rows[1].cells[0].firstChild && layoutGrid.rows[1].cells[0].firstChild.rows && layoutGrid.rows[1].cells[0].firstChild.rows.length > 0 && layoutGrid.rows[1].cells[0].firstChild.rows[0].cells.length > 0)) {
                if (layoutGrid.rows[1].cells.length > 0) {
                    return layoutGrid.rows[1].cells[0].firstChild;
                }
            }
        }
        return null;
    },
    //文档准备
    InitControl: function () {
        var focusDiv = document.createElement("DIV");
        focusDiv.style.position = "absolute";
        focusDiv.style.left = 15 + 'px';//===by zzq 增加单位
        focusDiv.style.top = 10 + 'px';//===by zzq 增加单位
        focusDiv.id = "gg";
        focusDiv.innerHTML = "<input id='" + this._element.id + "_GB" + "' style='height:0;width:0' />";
        this._element.insertAdjacentElement("beforeEnd", focusDiv);
        this.inDeleting = false;

        //        var msgDiv = document.createElement("DIV");
        //        msgDiv.outerHTML = "<div style='z-index:10;left:15;top:-20;padding:20px;width:300px;height:100px;border:solid 1px black;background-color:#EEEEEE;' id='msg'>sddddddddddfsdfs</div>";
        //        this.get_element().insertAdjacentElement("beforeEnd",msgDiv);
        //        this.msgDiv = msgDiv;

        this._element.cusAttr('NoFireEvent', true);
        //
        this.ReadDataGridContent();
        this.InitHelperObject(); //动态对象指针初始化
        this.InitGridBehavior(); //初始化表格行为
        this.InitColumnSumDataFormat(); //初始化列的SumDataFormat
        this.ResetState(); //恢复grid状态
        //this.get_element().GridReadyState = "complete";
        this._element.cusAttr('GridReadyState', 'complete');
        if (this._element.cusAttr('AlwaysCollectData') == 'true') {
            this.m_AlwaysCollectData = true;
        }

        if (this.m_batchModifyManager) {
            this.m_batchModifyManager.resetAfterPost();
        }

        if (this._element.cusAttr('AutoAddNewRowOnLastCellReturn') == "true")
            this.set_AutoAddNewRowOnLastCellReturn(true);
        if (this._element.cusAttr('DefaultValueColumns')) {
            this.m_DefaultValueColumns = this._element.cusAttr('DefaultValueColumns').split(this.DefaultValueSplitString);
        }
        if (this._element.cusAttr('DefaultValueColumnsOrder')) {
            this.m_DefaultValueColumnsOrder = this._element.cusAttr('DefaultValueColumnsOrder').split(this.DefaultValueSplitString);
        }
        if (this._element.cusAttr('SortColumnsOrder')) {
            this.m_SortColumns = this._element.cusAttr('SortColumnsOrder').split(",");
        }
        if (this._element.cusAttr('IsSortSelectRecords') && this._element.cusAttr('IsSortSelectRecords') == "true") {
            this.m_IsSortSelectRecords = true;
        }
        if (this._element.cusAttr('CheckedByClick') && this._element.cusAttr('CheckedByClick') == "false") {
            this.m_isCheckedByClick = false;
        }
        if (this._element.cusAttr('AllowEditSingleRow') && this._element.cusAttr('AllowEditSingleRow') == "false") {
            this.m_AllowEditSingleRow = false;
        }

        //快速定位设置滚动条
        if (top.ShowCustomFilter && top.ShowCustomFilter[this.get_id()] == true) {
            _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').m_currentRowIndex = " +
                this.m_currentRowIndex + ";$find('" + this.get_id() +
                "').m_currentColumnIndex = " + this.m_currentColumnIndex +
                "; $find('" + this.get_id() + "').Focus(true)");
        }
        //yangkuna_2010-05-17_弹出窗口的动作最后做
        if (this._element.cusAttr('CustomFilter_Show') == "true") {
            _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').m_CustomFilterManagerInstance.OnBtnSetFilterClick(null,true);");
        }

        this.ResetSortColumnNum();
        /*自动增行处理逻辑
         * 当自动增加空白行时，记录此信息到 window.DataGridAutoAddNewEmptyRow[this.get_id()]=true;
         * 当Empty行被删除时，如果已经记录了自动增加行的信息就反过来置为false，
         *    window.DataGridAutoAddNewEmptyRow[this.get_id()]=false;
         * 当控件被加载时，检查是否在window上记录了增加该Grid的自动增加空行信息，如果有则增加一行
         * 当当前页已经满时，不自动新增行（2008-10-8 增加该逻辑）
         */
        if (this._element.cusAttr('EditStatus') == DisplayStyle.Edit && this._element.cusAttr('AutoEditModel') == "true") {
            //mahx2-190315 这里解决PMP201903050222
            //问题一直就有，并不是突发，原因是下面这句代码：
            //window.DataGridAutoAddNewEmptyRow && window.DataGridAutoAddNewEmptyRow[this.get_id()] == true
            //上面代码导致只有记录新增行时才会新增，而对于参照完成直接刷新父窗体的就window.DataGridAutoAddNewEmptyRow成null了，无法进入新增行
            //上面代码适合参照进行值返回，而不是刷新父窗体时才会好用。先这样改，后期看效果。
            if (!window.DataGridAutoAddNewEmptyRow || window.DataGridAutoAddNewEmptyRow[this.get_id()] == true) {
                if (!this.IsEmptyRow(this.D_Body.rows[this.m_rows - 1]) && this.m_rows < this.m_PageSize) {
                    if (this.m_gridBodyEventsHandler.GridEditHelper != null) { //增加新的空行
                        // if(!this.OnBeforeRowAdd())
                        {

                            var oldTag = Get_Global_IsCheckDirtyData_TheForm();
                            var oldDirtyTag = Get_Global_IsDirtyData_TheForm();
                            Set_Global_IsCheckDirtyData_TheForm(false);
                            var rowIndex = this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.AddNewEmptyRow();
                            if (rowIndex != -100) {
                                this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.InitEmptyRow(rowIndex);
                                //this.OnAfterRowAdded(rowIndex);    
                            }
                            Set_Global_IsCheckDirtyData_TheForm(oldTag);
                            Set_Global_IsDirtyData_TheForm(oldDirtyTag);
                        }
                    }
                }
            }
        }

        //
        if (this.m_rows > 0) //function add by lzhm...2007-11-14 设置ID列自增初始值
            this.InitIDFieldSequenceStartValue();
        //
        //
        this._element.cusAttr('NoFireEvent', false);
        //wanglei:添加标志位(表头点击是否 触发 行 click 事件)
        this.HeadSelectedCauseClick = this._element.cusAttr("HeadSelectedCauseClick") === "False" ? false : true;
        //多表头固定列取值问题修复，原写法导致取多表头列宽错误，引发列值错位 modify by zhaoliann 20191225
        var fixedLength = $($(this.D_Head).find('tr')[0]).find(".FixedColumnTitleCell").length;
        //var fixedLength=$(this.D_Head).find(".FixedColumnTitleCell").length;
        //冻结列表初始化
        GridFrozenColumnsHelper.GetInstance(this.m_activeContainer, this.S_Body, this.D_Head, fixedLength, this.m_activeContainer.scrollLeft, this.m_activeContainer.scrollTop).init();

    },
    Maximized: function () {
        /*if($(this._element).parent(".maximized-panel-wrap").length ==0){
                 $(this._element).parents(".TP").addClass("overflow-x-inherit").wrapInner('<div class="maximized-panel-wrap"></div>');
        }*/
        //判断是不是弹出层
        if ($(this._element).parents(".popLayer").length == 0) {
            this.FullScreen = $(this._element).siblings(".zoomBig").get(0);
            if (this.FullScreen) {
                this.cssZoomElement();
                this.bindOnMaximizedClick()
            }

        }
    },
    cssZoomElement: function () {
        var GridID = $(this._element).attr("id");
        FullScreenGridHelper.GetInstance().cssZoomElement(GridID, this.FullScreen);
    },
    bindOnMaximizedClick: function () {
        var GridID = $(this._element).attr("id");
        $(this.FullScreen).unbind('click');
        //放大
        $(this.FullScreen).on('click', function () {
            FullScreenGridHelper.GetInstance().onZoomElementClick(this, GridID);
        })
    },

    InitIDFieldSequenceStartValue: function () {
        var maxValue = 1;
        var colIndex = this.GetColumnIndex("ID");
        if (colIndex == -1)
            return;
        for (var i = 0; i < this.m_rows; i++) {
            var curValue = parseInt(this.D_Body.rows[i].cells[colIndex].cusAttr('Value'), 10);
            curValue = Math.abs(curValue);
            if (maxValue < curValue) {
                maxValue = curValue;
            }
        }
        //9201610080228 modify by kxl 20161020 初始化步长是当前页的最大值+1，这个策略在有多页的情况下，会和下一页的第一行ID
        //重复，这里改为5000，一个单据有5000条记录的情况应该是很少的,复制效率也很低，
        this.MainCols[colIndex].cusAttr('SequenceStart', (maxValue + 5000).toString());
    },


    SwitchColumnControl: function (fromColumn, toColumn) {
        this.MainCols[this.GetColumnIndex(toColumn)].cusAttr("ReplaceColumn", fromColumn);
    },
    Replace: function (strV, oldC, newC) {
        var re = /oldC/g;
        return strV.replace(re, newC);
    },
    //zjx add for store state
    StoreState: function (focus) {
        var stateC = null;
        if (this.m_Hidden_State == null) {
            var re = /_/g;
            stateC = $get(this.get_id().replace(re, "$") + "_State");
        } else {
            stateC = this.m_Hidden_State;
        }

        if (stateC) {
            if (stateC.value != null && (stateC.value.indexOf(",F2") >= 0 || stateC.value.indexOf(",P,") >= 0)) //如果已经置过YY或者P，不允许再置
                return;
            var bContinue = false;
            if (focus == "YY") {
                focus = "Y";
                bContinue = true;
            }
            if (event && (event.type == "click" || event.type == "dblclick")) {
                //===by zzq 改变对话框弹关闭之后的方法调用方式，导致dom事件目标改变，通过zlayer.elementSrc[0]存储事件目标指向
                //if (zlayer.srcEventElement[0] && zlayer.srcEventElement[0].tagName == "TD" && zlayer.srcEventElement[0].className && zlayer.srcEventElement[0].className.split(" ")[0] == "tbc")
                //    this.m_currentColumnIndex = zlayer.srcEventElement[0].cellIndex;
                if (event.srcElement && event.srcElement.tagName == "TD" && event.srcElement.className && event.srcElement.className.split(" ")[0] == "tbc")
                    this.m_currentColumnIndex = event.srcElement.cellIndex;
            }
            if (bContinue) {
                stateC.value = this.m_currentRowIndex + "," + (this.m_currentColumnIndex - 1) + "," + focus + "," + this.get_id() + ",F2";
                this.GetColumnControl(this.m_currentColumnIndex).control.set_IsShowForm(false);
            } else {
                stateC.value = this.m_currentRowIndex + "," + (this.m_currentColumnIndex - 1) + "," + focus + "," + this.get_id();
            }
        }
    },

    ResetState: function () {
        var stateC = null;
        if (this.m_Hidden_State == null) {
            var re = /_/g;
            stateC = $get(this.get_id().replace(re, "$") + "_State");
        } else {
            stateC = this.m_Hidden_State;
        }
        if (stateC) {
            var stateV = stateC.value;
            stateC.value = "";
            if (stateV.indexOf(",") >= 0) {
                var s = stateV.split(",");
                if (s[3] == this.get_id()) {
                    if (s[2] == "Y" || s[2] == "N") {
                        if (parseInt(s[0]) >= this.D_Body.rows.length) {
                            s[0] = 0;
                            s[1] = 0;
                        }
                        //获取焦点                    
                        //if(this.$element.attr('EditStatus') ==DisplayStyle.Browser || $(this.get_element()).attr('AlwaysFocus')=="true"){                            
                        //if( $(this.get_element()).attr('AlwaysFocus')=="true"){      
                        if (this._element.cusAttr('AlwaysFocus') == "true" || s[2] == "Y") {
                            //this.set_CurrentRowIndex(parseInt(s[0]));
                            //this.set_CurrentColumnIndex(parseInt(s[1]));                
                            //因为使用方法设置行列值，会主动设置焦点单元格的编辑状态，所以直接设置属性 2007-12-5
                            if (this._element.cusAttr('SelectedCell') != this.UNDEFINED_VALUE) {
                                //如果 SetInitialFocus 已经处理了焦点，则不再次处理
                                this.m_currentRowIndex = parseInt(s[0]);
                                this.m_currentColumnIndex = parseInt(s[1]) + 1;
                            } else {
                                this.m_currentRowIndex = parseInt(s[0]);
                                this.m_currentColumnIndex = parseInt(s[1]) + 1;
                            }
                            //this.m_gridBodyEventsHandler.CanEndEdit(false);
                            //this.Focus();  
                            /*this.StartEdit(); */ // ResetState 不再处理抓焦点，而是画面统一处理
                            //Global_JSQueueEvalAfterPageLoadedManager.Add("if($find && $find('" + this.get_id() + "')){ $find('" + this.get_id() + "').StartEdit();}");
                            //this.m_gridFaciesManager.ShowCellByScrollLayout(parseInt(s[0]),parseInt(s[1])+1);
                        }
                        if (s.length == 5) {
                            //this.set_CurrentRowIndex(parseInt(s[0]));
                            //this.set_CurrentColumnIndex(parseInt(s[1]));
                            //因为使用方法设置行列值，会主动设置焦点单元格的编辑状态，所以直接设置属性 2007-12-5
                            this.m_currentRowIndex = parseInt(s[0]);
                            this.m_currentColumnIndex = parseInt(s[1]) + 1;
                            var t = this._element.cusAttr('NoFireEvent');
                            this._element.cusAttr('NoFireEvent', false);
                            this.StartEdit();
                            this._element.cusAttr('NoFireEvent', t);
                            var ref1 = this.ControlArray[this.MainCols[parseInt(s[1]) + 1].cusAttr('FieldID')];
                            if (ref1) {
                                stateC.value = "";
                                Global_JSQueueEvalAfterPageLoadedManager.Add("var ref = $find('" + ref1.id + "');if(ref){ref.set_IsShowForm(true); ref.ShowRefForm('');ref.set_IsShowForm(false);}");
                                //                              ref1.control.set_IsShowForm(true);
                                //                                if(_ClientCallBackManager && _ClientCallBackManager.Runing)   //如果在Callback期间，不处理
                                //                                    return false;
                                //                              ref1.control.ShowRefForm("");
                                //                                ref1.control.set_IsShowForm(false);
                            }
                        }
                    } else if (s[2] == "P") { //翻页 add by lzhm 2007-11-15
                        //this.set_CurrentRowIndex(parseInt(this.$element.attr('SelectedCell').split(",")[0],10));
                        //this.set_CurrentColumnIndex(parseInt(this.$element.attr('SelectedCell').split(",")[1],10));                
                        //因为使用方法设置行列值，会主动设置焦点单元格的编辑状态，所以直接设置属性 2007-12-5
                        this.m_currentRowIndex = parseInt(this._element.cusAttr('SelectedCell').split(".")[0], 10);
                        this.m_currentColumnIndex = parseInt(this._element.cusAttr('SelectedCell').split(".")[1], 10) + 1;
                    }
                }
            }
        }
        if (this._element.cusAttr('EditStatus') == DisplayStyle.Browser) {
            //this.set_CurrentRowIndex(parseInt(this.$element.attr('SelectedCell').split(",")[0],10));
            //this.set_CurrentColumnIndex(parseInt(this.$element.attr('SelectedCell').split(",")[1],10));   
            //因为使用方法设置行列值，会主动设置焦点单元格的编辑状态，所以直接设置属性 2007-12-5
            this.m_currentRowIndex = parseInt(this._element.cusAttr('SelectedCell').split(".")[0], 10);
            this.m_currentColumnIndex = parseInt(this._element.cusAttr('SelectedCell').split(".")[1], 10) + 1;
        }
        //yangkuna20101015:焦点行样式
        var fRowIndex = this.m_currentRowIndex;
        var fColIndex = this.m_currentColumnIndex;
        if (this.GetIsBatchModifyRunning()) {
            fRowIndex = this.m_batchModifyManager.rowIndexBefore;
            fColIndex = this.m_batchModifyManager.columnIndexBefore;
        }
        if (fRowIndex >= 0 && this.GetRowStatus(fRowIndex) != RowStatus.Empty) {
            var rBgColor = this.m_gridFaciesManager.GetRowBackgroundColor(fRowIndex);
            if (!rBgColor) {
                this.m_gridFaciesManager.SetRowBackgroundColor(fRowIndex, DefaultSymbol.SelectedRowColor, true);
            }
        }
    },

    Focus: function (isForce) {
        //页面初始化时，如果焦点单元格不在可视范围，则不进入编辑态
        if (_ClientJSExecQueueManager.Count > 0) {
            var jsF = "$find('" + this.get_id() + "').Focus(";
            //如果最后一个handler不是focus(true)才放队列里，不然如果队列里有，再添加一个，然后再次进来，再次判断又加一个，形成死循环，
            if (_ClientJSExecQueueManager.Handlers[_ClientJSExecQueueManager.Handlers.length - 1].js.indexOf(jsF) != 0)
                _ClientJSExecQueueManager.Push(jsF + isForce + ");");
            return;
        }   //如果js队列有内容，则不置焦点
        isInit = (top.PageInitCompleted ? false : true);
        if (this.m_gridBodyEventsHandler && this.m_gridBodyEventsHandler.GridEditHelper && this.m_gridBodyEventsHandler.GridEditHelper.CellEditActive) {
            if (this.m_gridBodyEventsHandler && this.m_gridBodyEventsHandler.GridEditHelper) {
                this.m_gridFaciesManager.Focus();
            }
            return;
        }
        if (this.m_gridFaciesManager != null) {
            if (this.m_gridBodyEventsHandler && this.m_gridBodyEventsHandler.GridEditHelper) {
                if (this.m_currentColumnIndex == 0) {
                    this.m_currentColumnIndex = 1;
                }
                var cell = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(this.m_currentRowIndex, this.m_currentColumnIndex);
                if (cell != null) {
                    //不触发StartEdit
                    var tmp = this.m_gridReadOnly;
                    this.m_gridReadOnly = true;
                    if (!this.GetIsBatchModifyRunning()) {
                        this.m_gridFaciesManager.SetCurrentCellStyle(this.m_currentRowIndex, this.m_currentColumnIndex, isInit);
                    }
                    this.m_gridReadOnly = tmp;

                    this.m_gridFaciesManager.lastRowIndex = this.m_currentRowIndex;
                    this.m_gridFaciesManager.lastColumnIndex = this.m_currentColumnIndex;

                    var sl = this.m_activeContainer.scrollLeft;
                    if (isForce) {
                        try {
                            if (isInit && !this.m_gridFaciesManager.IsCellInHorizonViewArea(this.m_currentRowIndex, this.m_currentColumnIndex)) {
                                cell.setActive();
                                return;
                            } else {
                                this.m_eventProcessLock = true;
                                /*this.S_Body.rows[0].cells[0].focus();
                                this.S_Body.rows[0].cells[0].click();
                                this.m_gridFaciesManager.Focus();*/
                                //cell.focus();
                                this.m_eventProcessLock = true;
                                cell.click();
                                this.m_eventProcessLock = false;
                                if (!this.m_isRelaySwitchTag || !this.IsNeedSwitchTabPage(this.m_currentColumnIndex)) {
                                    this.StartEdit();
                                } else {
                                    cell.setActive();
                                }
                                //if(!this.m_gridBodyEventsHandler.GridEditHelper.CellEditActive) { this.StartEdit(); }
                                if (cell.firstChild && $find(cell.firstChild.id) && $find(cell.firstChild.id).SetFocus) {
                                    $find(cell.firstChild.id).SetFocus();
                                    if ($find(cell.firstChild.id).input_onfocus) {
                                        $find(cell.firstChild.id).input_onfocus();
                                    }
                                }
                            }
                        } catch (e) { }
                    } else {
                        this.m_gridFaciesManager.Focus();
                    }
                    if (sl != 0) {
                        //this.m_activeContainer.scrollLeft = sl;
                    } else {
                        this.m_gridFaciesManager.ShowCellByScrollLayout(this.m_currentRowIndex, this.m_currentColumnIndex);
                    }
                }
                //this.m_gridFaciesManager.Focus();
            } else {
                if (this.D_Body.rows[this.m_currentRowIndex] && this.D_Body.rows[this.m_currentRowIndex].cells[0]) {
                    var cell = this.D_Body.rows[this.m_currentRowIndex].cells[0];
                    try {
                        this.m_eventProcessLock = true;
                        cell.setAttribute("tabIndex", -1);
                        cell.focus(); //focus后this.m_eventProcessLock会自动恢复false值，顾再置一次
                        $(cell).find("input:first").focus();
                        this.m_eventProcessLock = true;
                        cell.click();
                        this.m_eventProcessLock = false;
                    } catch (eee) { }
                }
            }
            //this.m_gridFaciesManager.ShowCellByScrollLayout(this.m_currentRowIndex,this.m_currentColumnIndex);
            //window.setTimeout(function(){$find('u_M_P6_DataGrid5').m_gridFaciesManager.Focus();},1000);
        }

    },
    //动态对象指针初始化
    InitHelperObject: function () {
        this.MainCols = this.S_Body.getElementsByTagName("col"); //取得表格列结构描述对象指针
        if (this.dataDom == this.UNDEFINED_VALUE) { //初始化XML文档构造对象 兼容性写法
            this.dataDom = Basic.GetXmlDom();
        }
        this.m_lastSelectedRow = -1;
        this.m_columns = this.MainCols.length; //记录Grid初始列数
        this.m_rows = this.D_Body.rows.length; //记录Grid初始行数
        if (this.m_toolbarDiv) {
            var table = this.m_toolbarDiv;
            this.m_PageIndex = parseInt(table.cusAttr('PageIndex'), 10);
            this.m_PageCount = parseInt(table.cusAttr('PageCount'), 10);
            this.m_TotalRows = parseInt(table.cusAttr('TotalRows'), 10);
        }
        this.SetInitialFocus(this._element.cusAttr('SelectedCell'));
    },

    SetInitialFocus: function (selectCell) {
        if (selectCell != this.UNDEFINED_VALUE) {
            var points = selectCell.split(".");
            if (points.length == 2) {
                this.m_currentRowIndex = parseInt(points[0], 10);
                this.m_currentColumnIndex = parseInt(points[1], 10);
                if (this.m_currentRowIndex == -1) this.m_currentRowIndex = 0;
                if (this.m_currentColumnIndex == -1) {
                    this.m_currentColumnIndex = this.GetNextColumn(1);
                } else {
                    this.m_currentColumnIndex = this.GetNextColumn(this.m_currentColumnIndex + 1);
                }
                //zjx add   
                if (this._element.cusAttr('Focus') == "true") {
                    //this.StoreState("Y");       
                    this.GridIsInFocus = true;
                }
                this.m_lastSelectedRow = this.m_currentRowIndex;
            }
        }
    },

    InitColumnSumDataFormat: function () {
        for (var i = 0; i < this.MainCols.length; i++) {
            if (this.MainCols[i].cusAttr('SDF') != null) {
                //$(this.MainCols[i]).attr('SumDataFormat') = eval("new NumberFormat('" + $(this.MainCols[i]).attr('SDF').replace(/,/g, "','") + "')");
                // this.MainCols[i].SumDataFormat=eval("new NumberFormat('" + this.MainCols[i].cusAttr('SDF').replace(/,/g, "','") + "')");
                // 内存泄漏问题-zjh 2022/10/26
                var params = this.MainCols[i].cusAttr('SDF').split(',');
                this.MainCols[i].SumDataFormat = new NumberFormat(params[0], params[1], params[2], params[3]);
            }
        }
    },

    //初始化表格行为
    InitGridBehavior: function () {
        this.InitGridGeneralBehavior(); //初始化表格通用行为
        if (this._element.cusAttr('EditStatus') == DisplayStyle.Browser) { //初始化数据数据浏览模式专用行为
            if (this.m_toolbarDiv != null) { //创建系统分页管理器
                this.m_pageBreakManagerInstance = GridPageBreakManager.GetInstance(this.m_toolbarDiv, this.get_element(), this.D_Body, this);
                this.m_pageBreakManagerInstance.Initialize();
                //this.get_element().onselectstart = funRetunFalse;
            }
            //wanglei 20110902: 增加 合计组件注册
            //this.caculator = new CalculateHelper(this.tableBody,this.tableFoot,this.thisControl,this._owner);
            this.caculator = new CalculateHelper(this.D_Body, this.D_Foot, this._element, this);
            this.caculator.Init();
            this.m_formatHelper = GridDataFormatHelper.GetInstance(this); //构建格式化帮助类
        } else {
            //if(this.get_element().AlwaysPagging=="true"){
            if (this._element.cusAttr('AlwaysPagging') == "true") {
                //初始化数据数据浏览模式专用行为
                if (this.m_toolbarDiv != null) { //创建系统分页管理器
                    this.m_pageBreakManagerInstance = GridPageBreakManager.GetInstance(this.m_toolbarDiv, this._element, this.D_Body, this);
                    this.m_pageBreakManagerInstance.Initialize();
                    //this.get_element().onselectstart = function(){return false;}
                }
            }
            this.caculator = new CalculateHelper(this.D_Body, this.D_Foot, this._element, this);
            this.caculator.Init();
            //初始化行编辑模式专用行为
            var instance = new GridEditManager(this.m_activeContainer, this.D_Body, this.D_Foot, this._element, this);
            instance.Init(this.m_gridFaciesManager); //行编辑初始化，行编辑时需要驱动表格外观变更
            this.m_gridBodyEventsHandler.AttachEditHelper(instance); //行编辑行为注册
            this.m_formatHelper = GridDataFormatHelper.GetInstance(this); //构建格式化帮助类
        }
        if (this.m_CustomFilterToolbarDiv != null) {
            this.m_CustomFilterManagerInstance = GridCustomFilterToolbarManager.GetInstance(this.m_CustomFilterToolbarDiv, this, "Grid");
            this.m_CustomFilterManagerInstance.Initialize();
        }
        this.m_MessageToolbarManager = GridMessageToolbarManager.GetInstance(this);
        if (this._element.cusAttr("DisplayMessage") != null) {
            this.m_MessageToolbarManager.ShowMessage(this._element.cusAttr("DisplayMessage"));
        }
    },
    //wanglei 20110902: 获取 计算组件
    //浏览状态 和 编辑状态  对象 不一致.
    getCaculator: function () {
        if (this._element.cusAttr('EditStatus') == DisplayStyle.Browser) {
            return this.caculator;
        } else {
            return this.m_gridBodyEventsHandler.GridEditHelper.CalculateHelper;
        }
    },
    //初始化表格通用行为
    InitGridGeneralBehavior: function () {
        //初始化表格默认布局
        this.InitGridDefaultLayout();
        //表头行为管理对象初始化
        HeadGeneralBehaviorManager.GetInstance(this.D_Body, this.D_Head, this).Init();
        //表格布局管理对象初始化
        TableDimentionManager.GetInstance(this.m_activeContainer, this.S_Body, this.D_Head, this.MainCols, this).Init();
        //表格事件管理器
        GridBodyEventsHandler.GetInstance(this.get_element(), this.m_activeContainer, this.S_Body, this.D_Head, this).AttachEvents();
        //初始化表格外观管理助手
        this.m_gridFaciesManager = GridFaciesManager.GetInstance(this.m_activeContainer, this.D_Head, this.D_Body, this.D_Foot, this.m_toolbarDiv, this);

        //表格外观初始外观,浏览状态下不需要此行为
        /*
        this.m_gridFaciesManager.SetGridInitFacies(this.m_currentRowIndex,this.m_currentColumnIndex);
        */
        //事件管理器要挂接外观管理助手
        this.m_gridBodyEventsHandler.AttachFaciesHelper(this.m_gridFaciesManager);
        //if(this.$element.attr('SelectModel')=="mulitline")
        if (this._element.cusAttr('SelectModel') == "mulitline") { //初始化所有被选择行
            /*this.m_gridFaciesManager.InitSelectedRow(this.get_element().SelectIndex);*/
            this.SetHeadCheckBoxState();
        }
    },

    //初始化表格默认布局
    InitGridDefaultLayout: function () {
        try { //取得控件初始状态
            //if(this.get_element().GridReadOnly==DefaultSymbol.True)
            if (this._element.cusAttr('GridReadOnly') == DefaultSymbol.True) {
                this.m_gridReadOnly = true;
            } else {
                this.m_gridReadOnly = false;
            }
            //设置滚动条的位置
            /*
            this.S_Body.scrollTop  = this.get_element().ScrollTop;
            this.S_Body.scrollLeft = this.get_element().ScrollLeft; 
            */
        } catch (e) { }
    },

    ///
    ///Grid属性及参数类定义
    ///
    //编辑菜单是否显示控制属性
    get_EditMenuVisible: function () {
        return this.m_gridBodyEventsHandler.GetEditMenuEnabled();
    },

    set_EditMenuVisible: function (visible) {
        this.m_gridBodyEventsHandler.SetEditMenuEnabled(visible);
    },

    //自动编辑模式控制属性
    get_AutoEditModelEnabled: function () {
        return this.m_gridBodyEventsHandler.GetAutoEditEnabled();
    },
    set_AutoEditModelEnabled: function (enabled) {
        this.m_gridBodyEventsHandler.SetAutoEditEnabled(enabled);
    },
    get_AutoAddNewRowOnLastCellReturn: function () {
        return this.m_gridBodyEventsHandler.GetAutoAddNewRowOnLastCellReturn();
    },

    set_AutoAddNewRowOnLastCellReturn: function (enabled) {
        this.m_gridBodyEventsHandler.SetAutoAddNewRowOnLastCellReturnEnabled(enabled);
    },
    //取得表格单元默认背景色
    get_CellDefaultBackgroundColor: function () {
        return DefaultSymbol.BodyCellBackgroundcolor;
    },
    //当前行属性 r/w
    get_CurrentRowIndex: function () {
        if (this.m_currentRowIndex == -1)
            return 0;
        else
            return this.m_currentRowIndex;
    },

    set_CurrentRowIndex: function (rowIndex) {
        if (rowIndex >= 0 && rowIndex < this.m_rows) {
            this.m_gridBodyEventsHandler.CanEndEdit(false);
            this.m_currentRowIndex = rowIndex;
            this.FocusCurrentCell(); //设置焦点单元   
        }
    },

    //设置当前焦点单元
    FocusCurrentCell: function () {
        //设置当前行操作
        if (this.m_gridFaciesManager != null) {
            this.m_gridBodyEventsHandler.CanEndEdit(false);
            if (this.m_currentColumnIndex == 0) {
                var resultIndex = 0;
                for (var i = 1; i < this.m_columns; i++) {
                    if (this.MainCols[i].style.display == "none") {
                        continue;
                    } else {
                        resultIndex = i;
                        break;
                    }
                }
                this.m_currentColumnIndex = resultIndex;
            }
            this.m_gridFaciesManager.SetCurrentCellStyle(this.m_currentRowIndex, this.m_currentColumnIndex);
            this.m_gridFaciesManager.Focus();
        }
    },
    //当前列属性 r/w
    get_CurrentColumnIndex: function () {
        return this.m_currentColumnIndex - 1;
    },

    set_CurrentColumnIndex: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            this.m_currentColumnIndex = columnIndex + 1;
            this.FocusCurrentCell(); //设置焦点单元
        }
    },
    //设置和管理当前表格的是否可编辑属性
    //在可编辑状态下，可以禁止当前表格编辑
    get_ReadOnly: function () {
        return this.m_gridReadOnly;
    },

    set_ReadOnly: function (readonly) {
        if (this.m_gridBodyEventsHandler != null) {
            this.m_gridBodyEventsHandler.CanEndEdit(false);
            this.m_gridReadOnly = readonly;
            if (readonly && this.m_gridBodyEventsHandler.GridEditHelper) {
                this.m_gridBodyEventsHandler.GridEditHelper.HideMenu();
            }
        }
    },
    //Rows属性定义
    get_Rows: function () {
        if (this.D_Body == this.UNDEFINED_VALUE) return this.m_rows;
        //重新取表体数据行
        return this.D_Body.rows.length;
    },
    //Columns属性定义 readOnly
    get_Columns: function () {
        return this.m_columns - 1;
    },
    //取得总页数
    get_PageCount: function () {
        return this.m_PageCount;
    },
    //设置总页数 mahx 只给异步DB分页用
    set_PageCount: function (value) {
        if (this.m_toolbarDiv != null && this.m_toolbarDiv.tagName == "TABLE" && this.m_toolbarDiv.rows[0].cells[0].children.length > 0) {
            var a1 = this.m_toolbarDiv.rows[0].cells[1].getElementsByTagName("SPAN");
            if (a1.length == 2) {
                var aRows = a1[1];
                this.m_PageCount = value;
                if (this.m_PageCount < 1) { this.m_PageCount = 1; }
                aRows.innerHTML = aRows.innerHTML.replace(/\d+/g, this.m_PageCount);
                /*var options = {
                    pageIndex: parseInt($(a1[0]).html()),
                    pageCount: parseInt(this.m_PageCount),
                    container: document.getElementById("pageBox"),
                    showPage:1,
                };
                var pagination=paginationHelper.GetInstance(options);
                pagination.onChange=function(index){
                        GridPageBreakManager.OnPageClick()
                        console.log(index)
                }
                pagination.init();*/

            }
        }
    },
    //取得当前页码（从0开始）
    get_PageIndex: function () {
        return this.m_PageIndex;
    },
    //设置当前页码 mahx 只给异步DB分页用
    set_PageIndex: function (value) {
        if (this.m_toolbarDiv != null && this.m_toolbarDiv.tagName == "TABLE" && this.m_toolbarDiv.rows[0].cells[0].children.length > 0) {
            var a1 = this.m_toolbarDiv.rows[0].cells[1].getElementsByTagName("SPAN");
            if (a1.length == 2) {
                var aRows = a1[0];
                this.m_PageIndex = value - 1;
                if (this.m_PageIndex < 1) { this.m_PageIndex = 1; }
                aRows.innerHTML = aRows.innerHTML.replace(/\d+/g, value);
            }
        }
    },
    //是否分页
    get_IsPaging: function () {
        return (this._element.cusAttr('Pagging') == DefaultSymbol.True);
    },
    //取得总数据条数
    get_TotalRows: function () {
        return this.m_TotalRows;
    },
    //设置总数据条数
    set_TotalRows: function (count) {
        if (this.m_toolbarDiv != null && this.m_toolbarDiv.tagName == "TABLE" && this.m_toolbarDiv.rows[0].cells[0].children.length > 0) {
            var a1 = $(this.m_toolbarDiv.rows[0].cells[0]).children("#a_total_count");
            if (a1.length == 1) {
                var aRows = a1[0];
                this.m_TotalRows = count;
                if (this.m_TotalRows < 0) {
                    this._m_TotalRows = 0;
                }
                aRows.innerHTML = aRows.innerHTML.replace(/\d+/g, this.m_TotalRows);
            }
        }
    },

    //返回当前表格的数据
    get_Data: function () {
        var re = /&nbsp/g;
        var s = this.GetTableXml().replace(re, " ");
        return s; //提交数据提交改变行
    },

    get_AllData: function () {
        return this.get_Data();
    },
    get_SelectedData: function () {
        var re = /&nbsp/g;
        var s = this.GetSelectRowXml().replace(re, " ");
        return s;
    },
    ///
    ///Grid对外方法定义
    ///
    RowIsChecked: function (rowNo) {
        if (rowNo == null || rowNo.toString() == "") {
            rowNo = this.m_currentRowIndex;
        }
        var row = this.D_Body.rows[rowNo];
        return this.RowChecked(row);
    },
    ClearColumnData: function (colNo) {
        if (colNo) {
            if (typeof (colNo) == "string") {
                colNo = this.GetColumnIndex(colNo);
            }
            var l = this.D_Body.rows.length;
            for (var i = 0; i < l; i++) {
                this.SetReferenceCellValue(i, colNo, "", "", "");
            }
        }
    },
    GetSelectedRows: function () {
        var rowIndexs = [];
        if (this._element.cusAttr('SelectModel') == "mulitline") {
            rowIndexs = this.InsertSelectRowIndexToArray(this.D_Body.rows);
        } else {
            rowIndexs[0] = this.m_currentRowIndex;
        }
        return rowIndexs;
    },
    //激活PostBack事件
    FirePostBack: function (tag, eve, args) {
        //add by lzhm 20080515  用于截获Grid上出现的多次PostBack
        if (this.IsThisGirdPosting == true) {
            return;
        } else {
            this.IsThisGirdPosting = true;
        }
        //add by lzhm 20080515
        var context = new CellDataContent("", "");
        this.SetCurrentCellInfo(context); //设置当前单元格的基本信息
        var evtArgs = (args ? args : null);
        if (evtArgs == null) {
            evtArgs = this.CreateEventArgs();
            evtArgs.sourceElement = this.get_element();
            evtArgs.arg = context;
            this.InitializeEvent(evtArgs);
        }
        if (typeof (evtArgs.SrcColIndex) == "undefined" || evtArgs.SrcColIndex == null) {
            evtArgs.SrcColIndex = this.GetOldColumnIndex(this.m_currentColumnIndex) - 1;
        }
        this.raiseEvent(DataGridEvent.OnBeforeCustomerPostBack, evtArgs);
        //
        var hc = $get("HiddenCurrentContainer");
        if (hc)
            hc.value = this.get_id();
        //
        this.eventNode = this.dataDom.createElement("Event");
        this.eventNode.setAttribute("Style", "CustomerPostBack");
        this.eventNode.setAttribute("RowIndex", this.m_currentRowIndex);

        //this.eventNode.setAttribute("ColIndex",this.m_currentColumnIndex-1);
        //个性化后列索引还应该去原始列索引
        //this.eventNode.setAttribute("ColIndex",this.GetOldColumnIndex(this.m_currentColumnIndex)-1);
        this.eventNode.setAttribute("ColIndex", evtArgs.SrcColIndex);

        this.eventNode.setAttribute("LastRowIndex", this.m_lastRowIndex);
        this.eventNode.setAttribute("EventName", eve);
        if (typeof (evtArgs.SrcColIndex) != "undefined" && evtArgs.SrcColIndex >= 0) {
            this.eventNode.setAttribute("ColName", this.GetColumnNameByOldIndex(evtArgs.SrcColIndex + 1));
        }

        if (tag) {
            this.eventNode.setAttribute("PostTag", tag);
        }
        //
        this.BeforeSubmit("CustomerPostBack");
        window._GridWillPostBack = true;
        Set_Global_WillDoPostBack(true); //gct20090709:说明当前页面一定有PostBack要执行
        this.m_gridBodyEventsHandler.CellKeyDownReceive();
        var postAction = this._element.cusAttr('onfireevents');
        postAction = postAction.replace(/,''/, ",'" + encodeURI(XMLHelper.serializeXMLNodeToString(this.eventNode)) + "'");
        window.setTimeout("eval(\"" + postAction + "\")", 0);
        //window.setTimeout("eval(\""+this.$element.attr('onfireevents')+"\")",0);  
        //eval(this.$element.attr('onfireevents'));
    },

    RecoveryEventNode: function (encodedEventArgXml) {
        if (encodedEventArgXml) {
            var eventArgXml = decodeURI(encodedEventArgXml);
            if (eventArgXml.indexOf("<Event") == 0) {
                //                var doc = Basic.GetXmlDom();
                //                doc.loadXML(eventArgXml);
                var doc = XMLHelper.createXMLDocument(eventArgXml);
                this.eventNode = this.dataDom.createElement("Event");
                var attrs = doc.childNodes[0].attributes;
                for (var i = 0; i < attrs.length; i++) {
                    this.eventNode.setAttribute(attrs[i].nodeName, attrs[i].nodeValue);
                }
                return true;
            }
        }
        return false;
    },

    GetControlByServerID: function (sID) {
        var ele = null;
        //????
        //var fieldCtrls=element.document.getElementsByTagName("span");
        var fieldCtrls = window.document.getElementsByTagName("span");
        for (var i = 0, len = fieldCtrls.length; i < len; i++) {
            var tmpId = fieldCtrls[i].id + ","; //增加","，然后再indexOf()，不然会出错。例如当sIDu为CustM的时候，就依赖于u_M_P1_CustM和u_M_P1_CustM_Code的先后顺序
            if (tmpId.indexOf(sID + ",") >= 0) {
                ele = fieldCtrls[i];
                break;
            }
        }
        return ele;
    },
    SetRowStatus: function (rowIndex, state) {
        if (this.m_gridFaciesManager != null) {
            this.m_gridFaciesManager.ChangeRowState(rowIndex, state);
        }
    },
    GetRowStatus: function (rowIndex) {
        if (this.m_gridFaciesManager != null) {
            return this.m_gridFaciesManager.GetRowState(rowIndex);
        }
        return null;
    },
    GetCellValueByFieldAndRow: function (filedName, rowIndex) {
        var colIndex = null;
        var ojbValue = null;
        if (rowIndex == null) {
            rowIndex = this.m_currentRowIndex;
        }
        colIndex = this.GetColumnIndex(filedName);
        if (this.m_gridFaciesManager != null) { //取得单元值
            ojbValue = this.m_gridFaciesManager.GetCellValue(rowIndex, colIndex);
        }
        return ojbValue;
    },
    FireEventSrcs: function (s) {
        //gct20090922:stringEventSrc为"AssetCard,DisposalQty,"   s为"Qty"的时候就错了
        /*
        if(this.stringEventSrc.indexOf(s)<0)
        {
            this.stringEventSrc +=s;
        }        
        return this.stringEventSrc;
        */

        var ss = "," + s;
        if (this.stringEventSrc.indexOf(ss) < 0 && this.stringEventSrc.indexOf(s) != 0) {
            this.stringEventSrc += s;
        }
        return this.stringEventSrc;
    },

    getEventSrcs: function () {
        var fireEventSrc = [];
        fireEventSrc = this.stringEventSrc.split(",");
        return fireEventSrc;
    },
    fireEventOnkeypress: function () {
        var ele = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(this.m_currentRowIndex, this.m_currentColumnIndex);
        if (!ele) return;
        var isFire = false;
        var sEventSrc = this.getEventSrcs();
        var idSrc = "";
        if (sEventSrc[0] != "") {
            for (var i = 0; i < sEventSrc.length; i++) {
                if (this.MainCols[ele.cellIndex].cusAttr('FieldID') == sEventSrc[i]) {
                    idSrc = sEventSrc[i];
                    isFire = true;
                    break;
                }
            }
        } else {
            isFire = true;
        }
        if (isFire) {
            var evtArgs = this.CreateEventArgs();
            evtArgs.EventSrc = idSrc;
            if (event.keyCode == 229 && event.code == "Equal") {// =号hack，chrome 下keycode为229,应该为187
                evtArgs.keyCode = 187;
            } else {

                evtArgs.keyCode = event.keyCode;

            }
            this.raiseEvent(DataGridEvent.Onkeypress, evtArgs);
        }
    },
    //取得当前列默认的控件
    GetCurrentColumnDefaultControl: function () {
        return this.GetColumnControl(this.m_currentColumnIndex);
    },
    //取得指定列名的列控件
    GetColumnDefaultControl: function (fieldName) {
        var columnIndex = this.GetColumnIndex(fieldName);
        if (columnIndex >= 0) {
            return this.GetColumnControl(columnIndex);
        }
        return null;
    },
    //恢复指定列的默认输入控件
    ResumeColumnDefaultControl: function (fieldName) {
        if (this.m_clientUserControl[fieldName] != this.UNDEFINED_VALUE) { //清控自定义参照控件
            this.m_clientUserControl[fieldName] = null;
        }
    },

    //为特定列设置参照控件
    //fieldName:参照字段名
    //referenceControl:参照控件
    //refParas:参照上下文参数描述字符串,默认为""
    //参数语法格式：[[<key>,<refField>,<refAtt>];[<key>,<refField>,<refAtt>]]
    //   key:参数名 refField:从Grid的refField指定的列的当前行中读取参数
    //   refAtt:参照属性('ByValue'默认行为，用列的值作为参数，'ByText'用列的显示值作为参数)
    //调用实例:SetColumnReferenceControl("Department",control,"");
    //         SetColumnReferenceControl("Department",control,"key,customer,ByValue;value,customerKey,ByValue");
    SetColumnReferenceControl: function (fieldName, referenceControl, refParas) {
        if (referenceControl == this.UNDEFINED_VALUE) { //客户端参照控件不存在
            throw new error("client eference control not exists!");
        }
        if (this.GetColumnIndex(fieldName) == -1) {
            throw new error("field '" + fieldname + "' not exists!");
        } else { //追加用户自定义控件
            var userControl = new ClientUserControl();
            userControl.ControlType = ControlType.RefControl;
            userControl.Control = referenceControl;
            userControl.refParas = refParas;
            this.m_clientUserControl[fieldName] = userControl;
        }
    },

    //当前行移动到第一行、
    //InChangeFields:不交换内容的字段列表如：
    //MoveFirstRow("rowIndex,name") //移动到第一行，但rowIndex和name列的内容不交换
    MoveFirstRow: function (inChangeFields) {
        if (this.m_gridBodyEventsHandler != null) {
            this.m_gridBodyEventsHandler.MoveFirstRow(inChangeFields);
        }
    },

    //当前行移动到下一行
    MoveNextRow: function (inChangeFields) {
        if (this.m_gridBodyEventsHandler != null) {
            this.m_gridBodyEventsHandler.MoveNextRow(inChangeFields);
        }
    },

    //开始编辑
    StartEdit: function () {
        if (this.m_gridBodyEventsHandler != null) {
            if (this.m_gridBodyEventsHandler.GridEditHelper) {
                this.m_gridBodyEventsHandler.GridEditHelper.StartEdit();
            } else {
                this.Focus(true);
            }
        }
    },
    //结束编辑，隐藏控件
    EndEdit: function () {
        if (this.m_gridBodyEventsHandler != null) {
            this.m_gridBodyEventsHandler.CanEndEdit(false);
        }
    },

    RemoveData: function () {
        if (this.m_gridBodyEventsHandler != null) {
            this.m_gridBodyEventsHandler.GridEditHelper.RemoveData();
        }
    },
    //清空表体数据
    ClearData: function () {
        if (this.m_gridBodyEventsHandler != null) {
            this.m_gridBodyEventsHandler.ClearData();
            this.ClearTotalValues();
        }
    },
    ClearTotalValues: function () {
        if (this.m_rows == 0 || (this.m_rows == 1 && this.D_Body.rows[0].cusAttr('Status') == RowStatus.Empty)) {
            for (var i = 1; i < this.m_columns; i++) {
                if (this.MainCols[i].cusAttr('HasSum') == DefaultSymbol.True) {
                    this.SetTotalValue(this.MainCols[i].cusAttr('FieldID'), 0);
                }
            }
        }
    },

    //当前行移动到最后一行
    MoveLastRow: function (inChangeFields) {
        if (this.m_gridBodyEventsHandler != null) {
            this.m_gridBodyEventsHandler.MoveLastRow(inChangeFields);
        }
    },

    //当前行移动到最后一行
    MovePreviousRow: function (inChangeFields) {
        if (this.m_gridBodyEventsHandler != null) {
            this.m_gridBodyEventsHandler.MovePreviousRow(inChangeFields);
        }
    },

    GetRowIndexByID: function (value) {
        var colIndex = this.GetColumnIndex("ID");
        if (colIndex < 0)
            return -1;
        for (var i = 0; i < this.D_Body.rows.length; i++) {
            if (this.D_Body.rows[i].cells[colIndex].cusAttr('Value').toString() == value.toString())
                return i;
        }
    },

    GetLastRealRowIndex: function () {
        for (var i = this.D_Body.rows.length - 1; i >= 0; i--) {
            if (this.GetRowStatus(i) != RowStatus.Empty) {
                return i;
            }
        }
    },

    //根据名称取得列索引
    GetColumnIndex: function (fieldName) {
        if (this.m_ColumnIndexList[fieldName] != null)
            return this.m_ColumnIndexList[fieldName];

        var resultIndex = -1;
        for (var i = 1; i < this.m_columns; i++) {
            if (this.MainCols[i].cusAttr('FieldID') == fieldName) {
                resultIndex = i;
                break;
            }
        }
        this.m_ColumnIndexList[fieldName] = resultIndex;
        return resultIndex;
    },
    IsColumnAllowSort: function (fieldName) {
        if (fieldName && fieldName.length > 0) {
            var colIndex = this.GetColumnIndex(fieldName);
            if (colIndex >= 0) {
                var allowSortTag = this.MainCols[colIndex].cusAttr('AllowSort');
                return (typeof (allowSortTag) == "undefined" || allowSortTag.toLowerCase() == "true");
            }
        }
        return false;
    },

    GetColumnControlByColumnName: function (columnName) {
        return this.GetColumnControl(this.GetColumnIndex(columnName));
    },

    GetColumnControl: function (columnIndex, rowIndex) {
        //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ Begin
        var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识

        switch (this.GetColumnType(columnIndex)) {
            case ControlType.TextBox:
                { //创建文本录入控件 
                    return this.CreateTextBoxControl(columnIndex);
                }
            case ControlType.CheckBox:
                { //创建选择按纽控件 
                    return this.CreateCheckBoxControl(columnIndex);
                }
            case ControlType.Date:
                { //创建日历控件
                    return this.CreateDatePickerControl(columnIndex);
                }
            case ControlType.Combox:
                { //创建下拉列表框控件
                    return this.CreateComboxControl(columnIndex);
                }
            case ControlType.TextArea:
                { //创建多行文本输入控件
                    return this.CreateTextAreaControl(columnIndex);
                }
            case ControlType.RefControl:
                { //创建参照控件
                    return this.CreateReferenceControl(columnIndex);
                }
            case ControlType.MultiInput:
                { //创建多语言录入控件
                    return this.CreateMultiInputControl(columnIndex);
                }
            case ControlType.Numberic:
                { //创建数值录入控件
                    return this.CreateNumbericControl(columnIndex, rowIndex);
                }
        }


        if (this.Grid_IsDirtyData == true) //如果Grid本身的脏数据标识为true，则认为该页面全局的脏数据标识为true
            Set_Global_IsDirtyData_TheForm(this.Grid_IsDirtyData);
        else
            Set_Global_IsDirtyData_TheForm(bDirtyDataFlag); //恢复以前的脏数据标识
        //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ End

        return null;
    },

    //查找下一条数据的位置,等CallBack实现后一并解决
    FindNextGridData: function () {

    },

    //查找第一条数据等CallBack实现后一并解决
    FindGridData: function (filterExpression) {

    },

    //刷新表格数据等CallBack实现后一并解决
    RefreshGridData: function (filterExpression) {

    },

    //移动到上一页等CallBack实现后一并解决
    MovePreviousPage: function () {

    },

    //移动到第一页等CallBack实现后一并解决
    MoveFirstPage: function () {

    },

    //移动到最后一页等CallBack实现后一并解决
    MoveLastPage: function () {

    },
    //移动到下一页等CallBack实现后一并解决
    MoveNextPage: function () {

    },

    //设置参照单元值
    SetReferenceCellValue: function (rowIndex, columnIndex, value, code, text, isSynchUpdateValue4P) {
        if (this.m_gridFaciesManager != null) { //设置参照单元值
            //this.get_element().NotEndEdit = true;
            //this.m_gridBodyEventsHandler.CanEndEdit(false);
            //this.get_element().NotEndEdit = false;

            this.m_gridFaciesManager.SetReferenceCellValue(rowIndex, columnIndex, value, code, text, isSynchUpdateValue4P);
            /*     delete status change      
            var row =this.D_Body.rows[rowIndex];                 
            if($(row).attr('Status')==RowStatus.Empty)
            {   //设置行位被修改状态            
                $(row).attr('Status')=RowStatus.Added;
            }else if($(row).attr('Status')==RowStatus.UnChanged)
            {   //设置行位被修改状态            
                $(row).attr('Status')=RowStatus.Modified;
            }        
            */
            var cellData = new CellDataContent("", value);
            this.OnCellDataValueChanged(cellData, rowIndex, columnIndex);
        }
    },

    //设置表格单元值
    SetCellValue: function (rowIndex, columnIndex, value) {
        if (this.m_gridFaciesManager != null) { //设置单元值 

            //this.m_gridBodyEventsHandler.CanEndEdit(false);
            this.m_gridFaciesManager.SetCellValue(rowIndex, columnIndex, value);
        }
    },

    //取得表格单元值
    GetCellValue: function (rowIndex, columnIndex) {
        if (this.m_gridFaciesManager != null) { //取得单元值
            return this.m_gridFaciesManager.GetCellValue(rowIndex, columnIndex);
        }
        //return null;//处理成空值的对象，去掉关联控件输出的比目运算符
        var returnValue = new CellValue("");
        return returnValue;
    },

    //设置行的前景色
    SetRowFrontColor: function (rowIndex, color) {
        if (this.m_gridFaciesManager != null) {
            this.m_gridFaciesManager.SetRowFrontColor(rowIndex, color);
        }
    },

    //取得行的前景色
    GetRowFrontColor: function (rowIndex) {
        if (this.m_gridFaciesManager != null) {
            return this.m_gridFaciesManager.GetRowFrontColor(rowIndex);
        }
        return "";
    },

    //设置行的背景颜色
    SetRowBackgroundColor: function (rowIndex, color, IsAlways) {
        if (this.m_gridFaciesManager != null) {
            this.m_gridFaciesManager.SetRowBackgroundColor(rowIndex, color, IsAlways);
        }
    },

    //取得指定行的背景颜色
    GetRowBackgroundColor: function (rowIndex) {
        if (this.m_gridFaciesManager != null) {
            return this.m_gridFaciesManager.GetRowBackgroundColor(rowIndex);
        }
        return "";
    },

    //设置单元前景色
    SetCellFrontColor: function (rowIndex, columnIndex, color) {
        if (rowIndex >= 0 && rowIndex < this.m_rows && columnIndex > 0 && columnIndex < this.m_columns) {
            if (this.m_gridFaciesManager != null) {
                this.m_gridFaciesManager.SetCellFrontColor(rowIndex, columnIndex, color, "body");
            }
        }
    },

    //取得单元前景色
    GetCellFrontColor: function (rowIndex, columnIndex) {
        if (rowIndex >= 0 && rowIndex < this.m_rows && columnIndex > 0 && columnIndex < this.m_columns) {
            if (this.m_gridFaciesManager != null) {
                return this.m_gridFaciesManager.GetCellFrontColor(rowIndex, columnIndex, "body");
            }
        }
        return "";
    },

    //设置指定单元的背景颜色
    SetCellBackgroundColor: function (rowIndex, columnIndex, color) {
        if (rowIndex >= 0 && rowIndex < this.m_rows && columnIndex > 0 && columnIndex < this.m_columns) {
            if (this.m_gridFaciesManager != null) {
                this.m_gridFaciesManager.SetCellBackgroundColor(rowIndex, columnIndex, color, "body");
            }
        }
    },

    //取得指定单元的背景颜色
    GetCellBackgroundColor: function (rowIndex, columnIndex) {
        if (rowIndex >= 0 && rowIndex < this.m_rows && columnIndex > 0 && columnIndex < this.m_columns) {
            if (this.m_gridFaciesManager != null) {
                return this.m_gridFaciesManager.GetCellBackgroundColor(rowIndex, columnIndex, "body");
            }
        }
        return "";
    },

    //取得列是否允许编辑属性
    GetColumnDefaultValue: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            return this.MainCols[columnIndex].cusAttr('DefaultValue');
        }
        return "";
    },

    //取得列是否允许编辑属性
    GetColumnDefaultValue4P: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            return this.MainCols[columnIndex].cusAttr('DefaultValue4P');
        }
        return "";
    },

    //取得列是否允许编辑属性
    SetColumnDefaultValue: function (columnIndex, value) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            if (this.GetColumnType(columnIndex) == ControlType.RefControl) {
                value = value.replace(/,/g, this.RefSplitter2);
            }
            this.MainCols[columnIndex].cusAttr('DefaultValue', value);
            //  $(this.MainCols[columnIndex]).attr('DefaultValue') = value;
        }

        try {
            if (this.GetRowStatus(0) === 'Empty') {
                var i = columnIndex;
                var row = this.D_Body.rows[0];
                var cell = row.cells[i];
                switch (this.MainCols[i].cusAttr('ControlType')) {
                    case ControlType.CheckBox:
                        cell.cusAttr('Value', value);
                        this.setCellListValue(cell, this._owner.GetCheckBoxTextByValue(value, this._owner.MainCols[i].cusAttr('CheckBoxValueRef')));
                        break;
                    case ControlType.Combox:
                        cell.cusAttr('Value', value);
                        this.setCellListValue(cell, this._owner.GetComboxTextbyID(i, value));
                        break;
                    case ControlType.Date:
                        cell.cusAttr('Value', value);
                        this.setCellListValue(cell, this._owner.GetDateFormatedValue(value, i));
                        break;
                    case ControlType.RefControl:

                        if (this.m_gridBodyEventsHandler &&
                            this.m_gridBodyEventsHandler.GridEditHelper &&
                            this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper
                        )
                            this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.SetReferenceDefaultValue(cell, value);
                        break;

                    case ControlType.Numberic:
                        var numValue = this._owner.m_formatHelper.FormatCellNumber(i, rowIndex, value, cell.cusAttr('Value'), isNewRowInit);
                        cell.cusAttr('Value', numValue.Value);
                        this.setCellListValue(cell, numValue.Text);
                        break;
                    case ControlType.MultiInput:
                        cell.cusAttr('Value', value);
                        cell.MultiLang = this._owner.GetMultiinputData(value, i);
                        this.setCellListValue(cell, value);
                        break;
                    default:
                        //取得数据的格式化结果
                        cell.cusAttr('Value', value);
                        this.setCellListValue(cell, this._owner.GetFormatedValue(value, this._owner.MainCols[i].cusAttr('DataType'), this._owner.MainCols[i].cusAttr('DisplayFormat')));
                }
            }
        } catch (e) {
            showStatus(e.description);//mahx20160705 修改状态栏提示
        }

    },
    SetColumnDefaultValueByFieldName: function (columnName, value) {
        var columnIndex = this.GetColumnIndex(columnName);
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            if (this.GetColumnType(columnIndex) == ControlType.RefControl) {
                value = value.replace(/,/g, this.RefSplitter2);
            }
            this.MainCols[columnIndex].cusAttr('DefaultValue', value);
            // $(this.MainCols[columnIndex]).attr('DefaultValue') = value;
        }
    },
    //取得列的控件类型
    GetColumnControlType: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            return this.MainCols[columnIndex].cusAttr('CotrolType');
        }
        return "";
    },

    //取得列的数据类型
    GetColumnDataType: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            return this.MainCols[columnIndex].cusAttr('DataType');
        }
        return "";
    },

    //取得列是否允许编辑属性
    GetColumnEditEnable: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            return this.MainCols[columnIndex].cusAttr('Edit') == DefaultSymbol.True;
        }
        return false;
    },

    //设置列是否允许编辑
    SetColumnEditEnable: function (columnIndex, enable) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            if (enable || this.m_gridBodyEventsHandler.CanEndEdit(false)) {
                if (enable && (this.MainCols[columnIndex].cusAttr('EditEx') == DefaultSymbol.True)) {
                    var oldEdit = this.MainCols[columnIndex].cusAttr('Edit');

                    this.MainCols[columnIndex].cusAttr('Edit', DefaultSymbol.True);

                    // $(this.MainCols[columnIndex]).attr('Edit') = DefaultSymbol.True;
                    //yangkuna_如果是焦点单元格则进入编辑
                    if (oldEdit == DefaultSymbol.False && columnIndex == this.m_currentColumnIndex) {
                        this.StartEdit();
                    }
                } else {
                    this.MainCols[columnIndex].cusAttr('Edit', DefaultSymbol.True);

                    // $(this.MainCols[columnIndex]).attr('Edit') = DefaultSymbol.False;
                }
            }
        }
    },

    //设置Cell的只读状态
    SetCellEnabledByFieldId: function (rowIndex, FieldId, enable) {
        var colIndex = this.GetColumnIndex(FieldId);
        if (colIndex > 0)
            this.SetCellEnabled(rowIndex, colIndex, enable);
    },


    //取得Cell的只读状态
    GetCellEnabledByFieldId: function (rowIndex, FieldId) {
        var colIndex = this.GetColumnIndex(FieldId);
        if (colIndex > 0)
            return this.GetCellEnabled(rowIndex, colIndex);
        else
            return false;
    },

    //设置Cell的只读状态
    SetCellEnabled: function (rowIndex, colIndex, enable) {
        if (rowIndex >= this.D_Body.rows.length || rowIndex < 0) {
            return false;
        }
        if (colIndex >= this.m_columns || colIndex < 0) {
            return false;
        }
        var cell = this.D_Body.rows[rowIndex].cells[colIndex];
        if (cell) {
            cell.cusAttr("Enabled", (enable ? "true" : "false"));
        }
    },


    //取得Cell的只读状态
    GetCellEnabled: function (rowIndex, colIndex) {
        if (rowIndex >= this.D_Body.rows.length || rowIndex < 0) {
            return false;
        }
        if (colIndex >= this.m_columns || colIndex < 0) {
            return false;
        }
        var cell = this.D_Body.rows[rowIndex].cells[colIndex];;
        if (cell) {
            return cell.cusAttr("Enabled");
        }
        return false;
    },

    //设置Cell的背景色，通过bgcolor设置，不影响style
    SetCellBgColorByFieldId: function (rowIndex, FieldId, color) {
        var colIndex = this.GetColumnIndex(FieldId);
        if (colIndex > 0)
            this.SetCellBgColor(rowIndex, colIndex, color);
    },

    //取得cell的背景色，bgcolor
    GetCellBgColorByFieldId: function (rowIndex, FieldId) {
        var colIndex = this.GetColumnIndex(FieldId);
        if (colIndex > 0)
            return this.GetCellBgColor(rowIndex, colIndex);
        else
            return "";
    },

    //设置Cell的背景色，通过bgcolor设置，不影响style
    SetCellBgColor: function (rowIndex, colIndex, color) {
        if (rowIndex >= this.D_Body.rows.length || rowIndex < 0) {
            return false;
        }
        if (colIndex >= this.m_columns || colIndex < 0) {
            return false;
        }
        var cell = this.D_Body.rows[rowIndex].cells[colIndex];
        if (cell) {
            cell.cusAttr("bgColor", color);
            cell.style.backgroundColor = color;
        }
    },

    //取得cell的背景色，bgcolor
    GetCellBgColor: function (rowIndex, colIndex) {
        if (rowIndex >= this.D_Body.rows.length || rowIndex < 0) {
            return false;
        }
        if (colIndex >= this.m_columns || colIndex < 0) {
            return false;
        }
        var cell = this.D_Body.rows[rowIndex].cells[colIndex];;
        if (cell) {
            return cell.cusAttr("bgColor");
        }
    },

    //设置指定单元格 前景色
    SetCellFontColorByFieldId: function (rowIndex, FieldId, fontColor) {
        var colIndex = this.GetColumnIndex(FieldId);
        if (colIndex > 0)
            this.SetCellFontColor(rowIndex, colIndex, fontColor);
    },

    //获取指定单元格 前景色
    GetCellFontColorByFieldId: function (rowIndex, FieldId) {
        var colIndex = this.GetColumnIndex(FieldId);
        if (colIndex > 0)
            return this.GetCellFontColor(rowIndex, colIndex);
        else
            return "";
    },

    //设置指定单元格 前景色
    SetCellFontColor: function (rowIndex, colIndex, fontColor) {
        if (rowIndex >= this.D_Body.rows.length || rowIndex < 0) {
            return false;
        }
        if (colIndex >= this.m_columns || colIndex < 0) {
            return false;
        }
        var cell = this.D_Body.rows[rowIndex].cells[colIndex];
        if (cell) {
            cell.style.color = fontColor;
        }
    },

    //获取指定单元格 前景色
    GetCellFontColor: function (rowIndex, colIndex) {
        if (rowIndex >= this.D_Body.rows.length || rowIndex < 0) {
            return false;
        }
        if (colIndex >= this.m_columns || colIndex < 0) {
            return false;
        }
        var cell = this.D_Body.rows[rowIndex].cells[colIndex];;
        if (cell) {
            return cell.style.color;
        }
    },

    //取得列宽度
    GetColumnWidth: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            return parseInt(this.MainCols[columnIndex].width, 10);
        }
        return 0;
    },

    //设置列宽度
    SetColumnWidth: function (columnIndex, width) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            if (width > 0) { //小于或等于零设置无意义
                if (this.m_gridBodyEventsHandler.CanEndEdit(false)) {
                    this.MainCols[columnIndex].width = width + "px";
                }
            }
        }
    },

    GetColumnVisible: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            return this.MainCols[columnIndex].cusAttr('visible');
        }
    },

    SetColumnVisible: function (columnIndex, visible) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            var col = this.MainCols[columnIndex];
            if (this.m_gridBodyEventsHandler.CanEndEdit(false)) {
                if (visible && (this.MainCols[columnIndex].cusAttr('visibleEx'))) {
                    if (col.cusAttr('oldWidth'))
                        col.width = col.cusAttr('oldWidth');
                    // $(this.MainCols[columnIndex]).attr('visible') = DefaultSymbol.True;
                    col.cusAttr('visible', DefaultSymbol.True);
                    this.MainCols[columnIndex].style.display = "";
                    this.ResetColumnCellCssClass(columnIndex, true, col.cusAttr('Frozen') == DefaultSymbol.True);
                } else {
                    if (!col.cusAttr('oldWidth'))
                        col.cusAttr('oldWidth', col.width);
                    //  $(this.MainCols[columnIndex]).attr('oldWidth') = this.MainCols[columnIndex].width;
                    col.width = '1px';
                    // $(this.MainCols[columnIndex]).attr('visible') = DefaultSymbol.False;
                    col.cusAttr('visible', DefaultSymbol.False);
                    this.MainCols[columnIndex].style.display = "none";
                    this.ResetColumnCellCssClass(columnIndex, false);
                }
                this.m_tableDimentionManager.AdjustTableHeadPosition();
                if (window.frameElement && window.frameElement.src.indexOf("FI.GL.Process.Voucher.Voucher") > -1) {
                    try {
                        this.Focus(true);
                    } catch (e) { }
                }
            }
        }
    },

    ResetColumnCellCssClass: function (columnIndex, visible, frozen) {
        if (this.D_Head.children.length == 1) {
            //根据列是否显示来控制 display 样式，quick模式下，直接使用 colgroup的visibile就可以控制，标准的需要逐行控制 modify by kxl
            var display = visible ? "" : "none";
            this.D_Head.children[0].cells[columnIndex].style.display = display;
            //冻结关联
            $(this.S_Body).find(".thead-tr td").eq(columnIndex).css("display", display);
            if (visible) {
                if (this.D_Head.children[0].cells[columnIndex].className != (visible ? DefaultSymbol.cssthc + (frozen ? " " + DefaultSymbol.cssFixedColumnTitleCell : "") : ""))
                    this.D_Head.children[0].cells[columnIndex].className = visible ? DefaultSymbol.cssthc + (frozen ? " " + DefaultSymbol.cssFixedColumnTitleCell : "") : "";
            }
            //冻结关联
            $(this.D_Head).width($(this.S_Body).width());
        }
        if (this.D_Body.rows.length > 0) {
            for (var i = 0; i < this.D_Body.rows.length; i++) {
                this.D_Body.rows[i].cells[columnIndex].style.display = visible ? "" : "none";
                if (visible) {
                    if (this.D_Body.rows[i].cells[columnIndex].className != (visible ? DefaultSymbol.csstbc + (frozen ? " " + DefaultSymbol.cssFixedColumnDataCell : "") : ""))
                        this.D_Body.rows[i].cells[columnIndex].className = visible ? DefaultSymbol.csstbc + (frozen ? " " + DefaultSymbol.cssFixedColumnDataCell : "") : "";
                }

            }
        }
    },

    ResetColumnsWidth: function () {
        for (var i = 0; i < this.MainCols.length; i++) {
            if (this.MainCols[i].cusAttr('oldWidth'))
                this.MainCols[i].width = this.MainCols[i].cusAttr('oldWidth');
        }
    },

    //选择所有行
    SelectAllRow: function (selected) {
        if (this.m_gridFaciesManager != null) {
            this.m_gridFaciesManager.SelectAllRow(selected);
        }
    },

    //选择行
    SelectRow: function (rowIndex, selected) {
        if (this.m_gridFaciesManager != null) {
            this.m_gridFaciesManager.SelectRow(rowIndex, selected);
        }
    },

    //增加新行
    AddNewRow: function () {
        if (this.m_gridBodyEventsHandler.GridEditHelper != null) {
            if (this.m_gridBodyEventsHandler.CanEndEdit(false)) {
                this.m_IsStartEdit = true;
                return this.m_gridBodyEventsHandler.GridEditHelper.OnAddRow();
            }
        }
        return -1; //行增加错误
    },

    //插入新行
    InsertRow: function (rowIndex) {
        if (this.m_gridBodyEventsHandler.GridEditHelper != null) {
            if (this.m_gridBodyEventsHandler.CanEndEdit(false)) {
                return this.m_gridBodyEventsHandler.GridEditHelper.OnInsertRow(rowIndex);
            }
        }
        return -1; //行增加错误
    },

    //复制行
    CopyRow: function (rowDataXml) {
        var oldRowIndex = this.m_currentRowIndex;
        var newRowIndex = -1;
        if (this.m_gridBodyEventsHandler.GridEditHelper != null) {
            if (this.m_gridBodyEventsHandler.CanEndEdit(false)) {
                this.m_IsStartEdit = true;
                newRowIndex = this.m_gridBodyEventsHandler.GridEditHelper.OnAddRow(true);
            }
        }
        if (newRowIndex !== false && newRowIndex >= 0) {
            var rowData = this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.GetRowDataFromXml(rowDataXml);
            this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.SetRowData(newRowIndex, rowData);
            var oLastRowIndex = this.m_lastRowIndex;
            this.m_lastRowIndex = oldRowIndex;
            this.OnAfterRowCopyedDefaultAction(newRowIndex, oldRowIndex);
            this.OnAfterRowCopyed(newRowIndex, oldRowIndex);
            this.m_lastRowIndex = oLastRowIndex;
            this.OnRowChanged();
        }
        return -1; //行增加错误
    },

    //删除指定的行
    DeleteRow: function (rowIndex) {
        if (rowIndex === undefined) {
            rowIndex = this.m_currentRowIndex;
        }
        if (this.m_gridBodyEventsHandler.GridEditHelper != null) { //删除指定的行
            if (this.m_gridBodyEventsHandler.CanEndEdit(false)) {
                this.m_gridBodyEventsHandler.GridEditHelper.OnRemoveRow(rowIndex);
            }
        }
    },
    //删除指定的行不触发删除前事件
    DeleteRowDirect: function () {
        if (this.m_gridBodyEventsHandler.GridEditHelper != null) { //删除指定的行
            if (this.m_gridBodyEventsHandler.CanEndEdit(false)) {
                this.m_gridBodyEventsHandler.GridEditHelper.OnRemoveRowDirect();
            }
        }
    },

    //删除指定的行ForList
    DeleteRowAlways: function () {
        if (this.m_gridBodyEventsHandler.GridEditHelper != null) { //删除指定的行
            if (this.m_gridBodyEventsHandler.CanEndEdit(false)) {
                this.m_gridBodyEventsHandler.GridEditHelper.OnRemoveRowAlways();
            }
        }
    },


    //判断指定列是否包含当前值
    ContainOf: function (columnName, value) {
        if (this.m_gridBodyEventsHandler != null) {
            return this.m_gridBodyEventsHandler.ContainOf(columnName, value);
        }
        return false;
    },

    //在关闭之前收集数据
    BeforeSubmit: function (postType) {
        //一次提交只进行一次数据收集 (UCM0100219222)
        if (this.IsThisGirdPosting == true) {
            if (this._isDataCollected == true) {
                this.ReplaceEventArgument(); //yangkuna_不做数据收集，但要更新事件参数
                return;
            } else {
                this._isDataCollected = true;
            }
        }
        //记录滚动条位置
        var mainBodyDiv = $get(this.get_id() + "_MainBody");
        $get(this.get_id() + "_MainBody_ScrollPositionX").value = mainBodyDiv.scrollLeft;
        $get(this.get_id() + "_MainBody_ScrollPositionY").value = mainBodyDiv.scrollTop;
        //一次提交只进行一次数据收集 (UCM0100219222)
        if (this.m_gridBodyEventsHandler != null) {
            this.ResetColumnsWidth(); //列隐藏调整时会设置行的列宽，提交之间修改回来。
            this.m_gridBodyEventsHandler.OnFormPostBack(); //当前页面提交,不提交改变行
            //replace + to ?
            var strXml = this.GetTableXml(postType);
            var re = /\+/g;
            strXml = strXml.replace(re, "^^");
            //    //
            //    ///????
            var helperObj = this.ParentDocument.getElementById(this._element.cusAttr('HelpId'));
            if (helperObj) {
                helperObj.value = encodeURIComponent(strXml);
            }
            //this.ParentDocument.all(this.$element.attr('HelpId')).value = encodeURIComponent(strXml);
        }
    },

    ReplaceEventArgument: function () {
        //wanglei:yangkun添加的无效逻辑,影响性能,去除.    
        //        var oldXml=this.ParentDocument.all(this.$element.attr('HelpId')).value;
        //        if(oldXml && this.eventNode)
        //        {
        //            var doc=Basic.GetXmlDom();
        //            doc.loadXML(decodeURIComponent(oldXml));
        //            var eNode=doc.documentElement.selectSingleNode("Event");
        //            if(eNode!=null){eNode=doc.createElement("Event"); doc.documentElement.appendChild(eNode); }
        //            if(eNode.attributes && eNode.attributes.length>0)
        //            {
        //                for(var i=eNode.attributes.length-1; i>=0; i--)
        //                {
        //                    eNode.removeAttribute(eNode.attributes[i].nodeName);
        //                }
        //            }
        //            if(this.eventNode.attributes && this.eventNode.attributes.length>0)
        //            {
        //                for(var i=0; i<this.eventNode.attributes.length; i++)
        //                {
        //                    eNode.setAttribute(this.eventNode.attributes[i].nodeName, this.eventNode.attributes[i].nodeValue);
        //                }
        //            }
        //        }
    },


    ///
    ///
    //取得当前行数据
    GetCurRowData: function (dom, inputRow) //for Card Data
    {
        var cellCount = inputRow.cells.length;
        var RowInfor = dom.createElement(RowData.RowFlag);
        for (var i = 0; i < cellCount; i++) {
            var cellInfor = dom.createElement(RowData.CellFlag);
            cellInfor.setAttribute(RowData.CellID, this.MainCols[inputRow.cells[i].cellIndex].getAttribute(RowData.CellID));
            var tempValue = inputRow.cells[i].getAttribute(RowData.CellValue);
            if (tempValue) {
                cellInfor.setAttribute(RowData.CellValue, tempValue);
            }
            RowInfor.appendChild(cellInfor);
        }
        //return RowInfor.xml; 
        //mahx 20170410 发现很多还在用XmlElment.xml，这个会在跨浏览器报错，改为如下的使用方式。这个地方我没有测试
        //直接修改的
        return XMLHelper.serializeXMLNodeToString(RowInfor);
    },
    //设置插入行行号的取值方式
    SetInsertedRowNoType: function (type) {
        if (type != null)
            type = type.toString();
        this._insertedRowNoType = type;
    },
    //取得插入行行号的取值方式
    GetInsertedRowNoType: function () {
        return this._insertedRowNoType;
    },
    //装入当前行数据
    LoadCurRowData: function (inputXml, RowNumber) {
        this.dataDom.loadXml(inputXml);
        var Items = this.dataDom.getElementsByTagName(RowData.CellFlag);
        if (this.D_Body.rows.length > RowNumber) {
            for (var i = 0; i < Items.length; i++) {
                var ItemID = Items.getAttribute(RowData.CellID);
                var ItemValue = Items.getAttribute(RowData.CellValue);
                for (var j = 0; j < this.m_columns; j++) {
                    if (this.MainCols[j].getAttribute(RowData.CellID) == ItemID) {
                        this.innerSetCellValue(ItemValue, this.D_Body.rows[i].cells[j]);
                    }
                }
            }
        }
    },

    //设置输入单元的值
    innerSetCellValue: function (inputValue, curCell) {
        //$(curCell).attr('Value') = inputValue;//===by zzq
        curCell.cusAttr('Value', inputValue);
        this.setCellListValue(curCell, inputValue);
        //
        var cellData = new CellDataContent("", inputValue);
        this.OnCellDataValueChanged(cellData, this.m_currentRowIndex, this.m_currentColumnIndex);
    },

    /*****************************************************************
    页面提交时的数据收集以及CallBack时的数据操作
    *******************************************************************/
    //===by zzq XMLHelper.setXMLNodeContent
    GetTableXml: function (postType) {

        var el = this.dataDom.createElement("DataTable");
        el.setAttribute("Name", this.get_id());
        //
        if (this._element.cusAttr('onfireevents')) {
            if (theForm.__EVENTTARGET.value.trim().length > 0) {
                var b = this._element.cusAttr('onfireevents').trim().indexOf(theForm.__EVENTTARGET.value) > 0;
                if (b) {
                    if (postType == "CustomerPostBack") {
                        el.setAttribute("AutoAddNewRow", "true");
                    }
                }
            }
        }
        //
        this.SetSelectedRowIndexs(el, this.dataDom); //设置设置被选择列信息
        el.appendChild(this.GetCurrentCellInfo(this.dataDom));

        //回发所有数据行信息
        var eleTotalRows = this.dataDom.createElement("TotalRows");
        //if (eleTotalRows.innerHTML != undefined)
        //    eleTotalRows.innerHTML = this.m_TotalRows;
        //else
        //    eleTotalRows.text = this.m_TotalRows;
        XMLHelper.setXMLNodeContent(eleTotalRows, this.m_TotalRows);
        el.appendChild(eleTotalRows);

        var tSelectCellInfor = this.GetCurrentCellPosition(this.dataDom);
        if (tSelectCellInfor) {
            el.appendChild(tSelectCellInfor); //取得当前单元未值描述
        }
        el.appendChild(this.GetScrollPosiion(this.dataDom)); //取得滚动条位置描述
        //yangkuna20100720:回传列名
        el.appendChild(this.GetCurrentCellInfoEx(this.dataDom));
        for (var i = 0; i < this.m_columns; i++) {
            el.appendChild(this.GetColXml(this.dataDom, this.MainCols[i]));
        }

        el.appendChild(this.GetBodyXml(this.dataDom)); //取得表格内容定义       
        if (this.eventNode != this.UNDEFINED_VALUE) el.appendChild(this.eventNode); //取得事件节点描述    

        if (this.m_SumAllData) el.appendChild(this.GetSumDatasXml(this.dataDom));
        if (this.m_pageBreakManagerInstance && this.m_pageBreakManagerInstance.chk) {
            el.appendChild(this.GetIsDBSelectAllXML(this.dataDom));
        }
        if (this.m_SortColumns.length > 0) {
            el.appendChild(this.GetSortColumnsXML(this.dataDom));
        }
        this.dataDom.documentElement = el;
        //zjx add
        if (this.GridIsInFocus === true) {
            /*
            if(this.m_gridBodyEventsHandler && this.m_gridBodyEventsHandler.GridEditHelper && this.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper){
                var ele = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(this.m_currentRowIndex,this.m_currentColumnIndex); 
                if(this.$element.attr('EditStatus') ==DisplayStyle.Edit && !(this.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.CellEditEnabled(this.m_currentColumnIndex,ele))){  //编辑状态且当前单元格为不可编辑，则不抓取焦点
                    this.StoreState("N"); 
                }else{
                    this.StoreState("Y");       
                }
            }else{
                this.StoreState("Y");       
            }
                */
            this.StoreState("Y");
        } else {
            this.StoreState("N");
        }
        if (this._element.cusAttr('AlwaysFocus') == "true") {
            this.StoreState("Y");
            this.GridIsInFocus = true;
        }
        //if(this.datadom){
        //    return this.dataDom.xml;
        //}
        return XMLHelper.serializeXMLNodeToString(el);
        //if(el.xml){
        //    return el.xml;
        //}else if(el.outerHTML){
        //    return el.outerHTML;
        //}else{
        //    //===by zzq 兼容safari和edge
        //    return    HtmlHelper._innerXML(el);
        //}
    },
    //===by zzq XMLHelper.setXMLNodeContent
    GetIsDBSelectAllXML: function (dataDom) {
        var ele = this.dataDom.createElement("AllPageSelected");
        //===by zzq 增加兼容性判断
        //if (ele.innerHTML != undefined) {
        //    ele.innerHTML = this.m_pageBreakManagerInstance.chk.checked ? "true" : "false";
        //} else {
        //    ele.text = this.m_pageBreakManagerInstance.chk.checked ? "true" : "false";
        //}
        XMLHelper.setXMLNodeContent(ele, this.m_pageBreakManagerInstance.chk.checked ? "true" : "false");
        return ele;
    },

    //取得合计值
    GetSumDatasXml: function (dataDom) {

        var el = this.dataDom.createElement("SumDatas");
        for (var i = 1; i < this.m_columns; i++) {
            if (this.MainCols[i].cusAttr('HasSum') == DefaultSymbol.True) {

                var item = this.dataDom.createElement("Item");
                item.setAttribute("Key", this.MainCols[i].cusAttr('FieldID'));
                item.setAttribute("Value", this.GetTotalValue(this.MainCols[i].cusAttr('FieldID')));
                el.appendChild(item);
            }
        }
        return el;
    },

    GetSelectRowXml: function (postType) {

        var el = this.dataDom.createElement("DataTable");
        el.setAttribute("Name", this.get_id());
        //
        if (this._element.cusAttr('onfireevents')) {
            if (theForm.__EVENTTARGET.value.trim().length > 0) {
                var b = this._element.cusAttr('onfireevents').trim().indexOf(theForm.__EVENTTARGET.value) > 0;
                if (b) {
                    if (postType == "CustomerPostBack") {
                        el.setAttribute("AutoAddNewRow", "true");
                    }
                }
            }
        }
        //
        this.SetSelectedRowIndexs(el, this.dataDom); //设置设置被选择列信息
        el.appendChild(this.GetCurrentCellInfo(this.dataDom));
        var tSelectCellInfor = this.GetCurrentCellPosition(this.dataDom);
        if (tSelectCellInfor) {
            el.appendChild(tSelectCellInfor); //取得当前单元未值描述
        }
        el.appendChild(this.GetScrollPosiion(this.dataDom)); //取得滚动条位置描述
        //yangkuna20100720:回传列名
        el.appendChild(this.GetCurrentCellInfoEx(this.dataDom));
        for (var i = 0; i < this.m_columns; i++) {
            el.appendChild(this.GetColXml(this.dataDom, this.MainCols[i]));
        }

        el.appendChild(this.GetSelectRowBodyXml(this.dataDom, this.m_currentRowIndex)); //取得表格内容定义      
        if (this.eventNode != this.UNDEFINED_VALUE) el.appendChild(this.eventNode); //取得事件节点描述    
        this.dataDom.documentElement = el;
        //zjx add
        if (this.GridIsInFocus === true) {
            this.StoreState("Y");
        } else {
            this.StoreState("N");
        }
        if (this._element.cusAttr('AlwaysFocus') == "true") {
            this.StoreState("Y");
            this.GridIsInFocus = true;
        }
        if (this.datadom) {
            //return this.dataDom.xml;
            //mahx20170410
            //return  XMLHelper.serializeXMLNodeToString(this.dataDom);
        }
        //if(el.xml){
        //    return el.xml;
        //}
        //else if(el.outerHTML ){
        //    return el.outerHTML;
        //}
        //else{
        //    //===by zzq 兼容safari和edge
        //    return    HtmlHelper._innerXML(el);
        //}
        return XMLHelper.serializeXMLNodeToString(el);
    },
    //取得当前单元位置描述
    //===by zzq XMLHelper.setXMLNodeContent
    GetCurrentCellPosition: function (dataDom) {
        if (this._element.cusAttr('Focus') != "focus") {
            return null;
        }
        var selectedCell = this.dataDom.createElement("SelectedCell");
        if ((this.m_currentRowIndex < 0) || (this.IsEmptyRow(this.D_Body.rows[this.m_currentRowIndex]))) { //焦点行不存在
            //if(selectedCell.innerHTML !=undefined)
            //    selectedCell.innerHTML = "-1.-1";
            //else
            //    selectedCell.text = "-1.-1";

            XMLHelper.setXMLNodeContent(selectedCell, "-1.-1");
        } else {
            if (this._element.cusAttr('EditStatus') == DisplayStyle.Edit) {
                //if(selectedCell.innerHTML !=undefined)
                //    selectedCell.innerHTML = this.m_currentRowIndex + "." + (this.m_currentColumnIndex - 1);
                //else
                //    selectedCell.text = this.m_currentRowIndex + "." + (this.m_currentColumnIndex - 1);

                XMLHelper.setXMLNodeContent(selectedCell, this.m_currentRowIndex + "." + (this.m_currentColumnIndex - 1));
            } else {
                var columnIndex = this.GetColumnIndex("ID");
                if (columnIndex == -1 || this.m_currentRowIndex >= this.m_rows) {
                    //if (selectedCell.innerHTML != undefined)
                    //    selectedCell.innerHTML = "-1.-1";
                    //else
                    //    selectedCell.text = "-1.-1";
                    XMLHelper.setXMLNodeContent(selectedCell, "-1.-1");
                } else {
                    //if (selectedCell.innerHTML != undefined)
                    //    selectedCell.innerHTML = $(this.D_Body.rows[this.m_currentRowIndex].cells[columnIndex]).attr('Value') + "." + (columnIndex - 1);
                    //else
                    //    selectedCell.text = $(this.D_Body.rows[this.m_currentRowIndex].cells[columnIndex]).attr('Value') + "." + (columnIndex - 1);
                    XMLHelper.setXMLNodeContent(selectedCell, this.D_Body.rows[this.m_currentRowIndex].cells[columnIndex].cusAttr('Value') + "." + (columnIndex - 1));
                }
            }
        }

        return selectedCell;
    },
    //取得当前单元位置描述
    //===by zzq XMLHelper.setXMLNodeContent
    GetCurrentCellInfo: function (dataDom) {
        var selectedCell = this.dataDom.createElement("SelectedCellInfo");

        if ((this.m_currentRowIndex < 0) || this.IsEmptyRow(this.D_Body.rows[this.m_currentRowIndex])) { //焦点行不存在
            //if (selectedCell.innerHTML != undefined)
            //    selectedCell.innerHTML = "-1.-1";
            //else
            //    selectedCell.text = "-1.-1";
            XMLHelper.setXMLNodeContent(selectedCell, "-1.-1");
        } else {
            if (this._element.cusAttr('EditStatus') == DisplayStyle.Edit) {
                //if (selectedCell.innerHTML != undefined)
                //    selectedCell.innerHTML = this.m_currentRowIndex + "." + (this.m_currentColumnIndex - 1);
                //else
                //    selectedCell.text = this.m_currentRowIndex + "." + (this.m_currentColumnIndex - 1);
                //===by zzq 修改为得到的 SelectedCellInfo标识
                XMLHelper.setXMLNodeContent(selectedCell, this.m_currentRowIndex + "." + (this.m_currentColumnIndex - 1));
            } else {
                var columnIndex = this.GetColumnIndex("ID");
                if (columnIndex == -1 || this.m_currentRowIndex >= this.m_rows) {
                    //if (selectedCell.innerHTML != undefined)
                    //    selectedCell.innerHTML = "-1.-1";
                    //else
                    //    selectedCell.text = "-1.-1";
                    XMLHelper.setXMLNodeContent(selectedCell, "-1.-1");
                } else {
                    //if (selectedCell.innerHTML != undefined)
                    //    selectedCell.innerHTML = $(this.D_Body.rows[this.m_currentRowIndex].cells[columnIndex]).attr('Value') + "." + (columnIndex - 1);
                    //else
                    //    selectedCell.text = $(this.D_Body.rows[this.m_currentRowIndex].cells[columnIndex]).attr('Value') + "." + (columnIndex - 1);
                    XMLHelper.setXMLNodeContent(selectedCell, this.D_Body.rows[this.m_currentRowIndex].cells[columnIndex].cusAttr('Value') + "." + (columnIndex - 1));
                }
            }
        }

        return selectedCell;
    },
    //取得当前单元位置额外描述
    //===by zzq XMLHelper.setXMLNodeContent
    GetCurrentCellInfoEx: function (dataDom) {
        var selectedCell = this.dataDom.createElement("CellInfo");

        if ((this.m_currentColumnIndex < 0) || this.m_currentColumnIndex >= this.MainCols.length) { //焦点行不存在
            //if (selectedCell.innerHTML != undefined)
            //    selectedCell.innerHTML = "";
            //else
            //    selectedCell.text = "";
            XMLHelper.setXMLNodeContent(selectedCell, "");
        } else {
            //if (selectedCell.innerHTML != undefined)
            //    selectedCell.innerHTML = $(this.MainCols[this.m_currentColumnIndex]).attr('FieldID');
            //else
            //    selectedCell.text = $(this.MainCols[this.m_currentColumnIndex]).attr('FieldID');
            XMLHelper.setXMLNodeContent(selectedCell, this.MainCols[this.m_currentColumnIndex].cusAttr('FieldID'));
        }

        return selectedCell;
    },
    //Get Sort Columns List XML with order ,split with ","
    //===by zzq XMLHelper.setXMLNodeContent
    GetSortColumnsXML: function (dataDom) {
        var stc = this.dataDom.createElement("SortColumnsOrder");
        //if (stc.innerHTML != undefined) {
        //    stc.innerHTML = this.m_SortColumns.join(",");
        //}
        //else {
        //    stc.text = this.m_SortColumns.join(",");
        //}
        XMLHelper.setXMLNodeContent(stc, this.m_SortColumns.join(","));
        return stc;
    },
    //设置被选择行信息
    SetSelectedRowIndexs: function (parentElement, datadom) {
        //设置被选择行索引集合
        var newRowIndexs = [];
        var selectedRowKeys = this.dataDom.createElement("SelRowKeys");
        if (this.CalculateNewAndDeletedRows(newRowIndexs)) { //设置被选择的行索引
            //设置被选择的行关键字集合//===by zzq 增加浏览器创建xmldom兼容判断
            //if( selectedRowKeys.innerHTML != undefined){
            //    selectedRowKeys.innerHTML = this.GetSelectedRowKeys(newRowIndexs);
            //}else{
            //    selectedRowKeys.text = this.GetSelectedRowKeys(newRowIndexs);
            //}
            XMLHelper.setXMLNodeContent(selectedRowKeys, this.GetSelectedRowKeys(newRowIndexs));
        } else { //保持以前不变      
            //zjx remove  
            //selectedRowKeys.text =this.get_element().SelRowKeys;
            //if( selectedRowKeys.innerHTML !=  undefined){
            //    selectedRowKeys.innerHTML = "";
            //}else{
            //    selectedRowKeys.text = "";
            //}
            XMLHelper.setXMLNodeContent(selectedRowKeys, this.GetSelectedRowKeys(newRowIndexs));
        }
        parentElement.appendChild(selectedRowKeys);
        //构建选中行记录时，同时记录顺序选中行记录
        this.SetSortedSelectIDs(parentElement, this.dataDom);
    },

    //===by zzq XMLHelper.setXMLNodeContent
    SetSortedSelectIDs: function (parentElement, datadom) {
        if (this._element.cusAttr('SelectModel') != "mulitline") {
            if (this.m_currentRowIndex >= 0 && this.m_rows > 0 && this.GetColumnIndex("ID") > -1) {
                if (this.GetCellValueByFieldAndRow("ID", this.m_currentRowIndex)) {
                    var id = this.GetCellValueByFieldAndRow("ID", this.m_currentRowIndex).Value;
                    this.m_SortedSelectIDs.push(id);
                }
            }
        }
        var node1 = this.dataDom.createElement("SortedSelectIDs");
        //if( node1.innerHTML!=undefined)
        //    node1.innerHTML = this.m_SortedSelectIDs.join(",");
        //else
        //    node1.text = this.m_SortedSelectIDs.join(",");
        XMLHelper.setXMLNodeContent(node1, this.m_SortedSelectIDs.join(","));
        parentElement.appendChild(node1);

        var node2 = this.dataDom.createElement("UnSelectIDs");
        //if( node2.innerHTML!=undefined)
        //    node2.innerHTML = this.m_UnSelectIDs.join(",");
        //else
        //    node2.text = this.m_UnSelectIDs.join(",");
        XMLHelper.setXMLNodeContent(node2, this.m_UnSelectIDs.join(","));
        parentElement.appendChild(node2);

        var node3 = this.dataDom.createElement("IsSortSelectRecords");
        //if( node3.innerHTML!= undefined)
        //    node3.innerHTML = this.get_IsSortSelectRecords().toString();
        //else
        //    node3.text = this.get_IsSortSelectRecords().toString();
        XMLHelper.setXMLNodeContent(node3, this.get_IsSortSelectRecords().toString());
        parentElement.appendChild(node3);
    },

    //计算新行和被删除行
    CalculateNewAndDeletedRows: function (newRowIndexs) {
        if (this._element.cusAttr('SelectModel') == "mulitline") {
            var rowIndexs = this.InsertSelectRowIndexToArray(this.D_Body.rows);
            //取得新增行索引
            for (var i = 0; i < rowIndexs.length; i++) {
                newRowIndexs.push(rowIndexs[i]);
            }
        } else {
            newRowIndexs.push(this.m_currentRowIndex);
        }
        return newRowIndexs.length > 0;
    },

    //取得被选择行关键字集合
    GetSelectedRowKeys: function (newRowIndexs) {
        var result = "";
        var newRowKeys = this.GetRowKeys(newRowIndexs, this.GetColumnIndex("ID"));
        if (this._element.cusAttr('SelectModel') == "mulitline") {
            if (newRowKeys.length > 0) {
                result = newRowKeys.join(",");
            }
        } else {
            result = newRowKeys.join(",");
        }
        return result;
    },

    //取得行关键字集合
    GetRowKeys: function (rowIndexs, keyColumnIndex) {
        var resultArray = [];
        //modify by zjx why????????????????????????????????????????????????????????????????????????
        var rows = this.D_Body.rows;
        if (rows.length > 0)
            if (keyColumnIndex > -1) {
                for (var i = 0; i < rowIndexs.length; i++) {
                    if (rows[rowIndexs[i]] != null)
                        resultArray.push(rows[rowIndexs[i]].cells[keyColumnIndex].cusAttr('Value'));
                }
            }
        return resultArray;
    },

    //对相同元素的数组进行合并
    MergeArrays: function (souArray, appendArray, removedArray) { //先删除后增加
        for (var i = 0; i < removedArray.length; i++) {
            var index = this.IndexOf(removedArray[i], souArray);
            if (index > -1) souArray.splice(index, 1); //删除指定索引        
        }
        for (var i = 0; i < appendArray.length; i++) {
            souArray.push(appendArray[i]);
        }
    },

    //比较整型数据 
    CompareInteger: function (value1, value2) {
        var iValue1 = parseInt(value1, 10);
        var iValue2 = parseInt(value2, 10);
        if (iValue1 < iValue2) {
            return -1;
        } else {
            if (iValue1 > iValue2) {
                return 1;
            } else {
                return 0;
            }
        }
    },

    //判断值是否在集合中
    IndexOf: function (value, rowIndexs) {
        for (var i = 0; i < rowIndexs.length; i++) {
            if (rowIndexs[i] == value) return i;
        }
        return -1;
    },

    //添加被选择行到数组中
    InsertSelectRowIndexToArray: function (rows) {
        var result = new Array();
        var rowCount = rows.length;
        for (var i = 0; i < rowCount; i++) {
            if (this.RowChecked(rows[i])) result.push(i);
        }
        return result;
    },

    //判断当前行是否被选择
    RowChecked: function (row) {
        var checkbox = row.cells[0].firstChild;
        if (checkbox.type == "checkbox") {
            return checkbox.checked;
        } else {
            return false;
        }
    },

    //取得表体数据行的内容
    GetBodyXml: function (dataDom) {
        var bodyXml = dataDom.createElement("DataContent");
        //被修改和新增加的数据
        var rowCount = this.D_Body.rows.length;
        var rows = this.D_Body.rows;
        //需要改进 添加是否需要收集数据属性
        // if ((this.$element.attr('EditStatus') == DisplayStyle.Edit) || (this.m_AlwaysCollectData)) { //只有编辑状态提交数据
        //     for (var i = 0; i < rowCount; i++) {
        //         if (!this.IsEmptyRow(rows[i])) {
        //             bodyXml.appendChild(this.GetRowXml(dataDom, rows[i], i));
        //         }
        //     }
        //     //被删除的数据行
        //     for (var i = 0; i < this.m_deletedRows.length; i++) {
        //         bodyXml.appendChild(this.m_deletedRows[i]);
        //     }
        // }

        //这里将是否收集数据的判断先去掉，浏览状态下，this.m_AlwaysCollectData=="false" IE里解析 这个值时始终为true,本意应该是false.
        //chrome将这个值解析成了false ,所以进不了这个判断导致了错误。列表的服务器端grid render时，this.AlwaysCollectData 始终为ｆａｌｓｅ
        //如果要彻底解决这个问题，需要开发配合来修改。明确告诉是否需要在浏览状态下收集数据
        // modify by kxl 20170721
        for (var i = 0; i < rowCount; i++) {
            if (!this.IsEmptyRow(rows[i])) {
                bodyXml.appendChild(this.GetRowXml(dataDom, rows[i], i));
            }
        }
        //被删除的数据行
        for (var i = 0; i < this.m_deletedRows.length; i++) {
            bodyXml.appendChild(this.m_deletedRows[i]);
        }



        return bodyXml;
    },
    GetSelectRowBodyXml: function (dataDom, index) {
        var bodyXml = dataDom.createElement("DataContent");
        //被修改和新增加的数据
        var rowCount = this.D_Body.rows.length;
        var rows = this.D_Body.rows;
        //需要改进 添加是否需要收集数据属性
        if ((this._element.cusAttr('EditStatus') == DisplayStyle.Edit) || (this.m_AlwaysCollectData)) { //只有编辑状态提交数据            
            //wanglei:增加 是否为空行判断
            if (rows[index] !== undefined && !this.IsEmptyRow(rows[index])) {
                bodyXml.appendChild(this.GetRowXml(dataDom, rows[index], index));
            }
        }
        return bodyXml;
    },
    //取得表体数据行的内容
    GetRowXml: function (dom, row, rowIndex) {
        var RowInfor = dom.createElement("R");
        for (var i = 0; i < this.RowAttribute.length; i++) { //只取得行状态
            var rowAttr = row.getAttribute(this.RowAttribute[i]);
            if (!rowAttr)
                rowAttr = row.cusAttr(this.RowAttribute[i]);
            if (rowAttr != null) {
                RowInfor.setAttribute(this.RowAttribute[i], rowAttr);
            }
        }
        //yangkuna20100722:收集个性化相关参数--客户端数据是否更改
        if (typeof (rowIndex) != "undefined" && rowIndex != null) {
            var isClientDataChanged = this.GetClientRowDataDirtyTag(rowIndex);
            RowInfor.setAttribute("DataChanged", isClientDataChanged ? "1" : "0");
        }
        //end 个性化
        var cellCount = row.cells.length;
        var attCount = this.CellAttribute.length;
        for (var i = 1; i < cellCount; i++) {
            //对于个性化扩展到Grid行上的列，如果为参照控件，值为“”时转为“-1”，与卡片收集行为一致 U9V2000324856
            if (this.MainCols[i].cusAttr('ControlType') == ControlType.RefControl && this.MainCols[i].cusAttr('ColEditCtrlClientID4P')) {
                var curCell = row.cells[i];
                if (curCell.cusAttr('Value') == "") {
                    curCell.cusAttr('Value', '-1');
                }
                //yangkuna20100816:参照列R属性补全
                if (!curCell.cusAttr('R')) {
                    curCell.cusAttr('R', "" + this.RefSplitter2);
                }
            } else if (this.MainCols[i].cusAttr('ControlType') == ControlType.Combox) {
                var curCell = row.cells[i];
                if (curCell.cusAttr('Value').toString() == "") {
                    curCell.cusAttr('Value', '-1');
                }
            }

            var cellInfor = dom.createElement("C");
            for (var j = 0; j < attCount; j++) {
                var tempValue = row.cells[i].getAttribute(this.CellAttribute[j]);
                if (!tempValue)
                    tempValue = row.cells[i].cusAttr(this.CellAttribute[j]);
                if (typeof (tempValue) != "undefined" && tempValue !== null && tempValue !== "") {
                    cellInfor.setAttribute(this.CellAttribute[j].substring(0, 1), tempValue.toString());
                } else if (this.MainCols[i].cusAttr('ControlType') === "NUMBERIC" && tempValue === "") {
                    cellInfor.setAttribute(this.CellAttribute[j].substring(0, 1), tempValue.toString());
                }
            }
            RowInfor.appendChild(cellInfor);
        }
        return RowInfor;
    },

    //取得列信息
    GetColXml: function (dom, inputCol) {
        var colInfor = dom.createElement("Item");
        var attlength = this.ColAttribute.length;
        for (var j = 0; j < attlength; j++) {
            var tempValue = inputCol.cusAttr(this.ColAttribute[j]);
            if (tempValue !== null && tempValue !== "" & tempValue != undefined) {
                //收集列宽的时候应该把单位去掉，否则服务器端会转换整数失败 modify by kxl
                if (this.ColAttribute[j] == 'Width' && tempValue != undefined) {
                    tempValue = tempValue.replace('px', '');
                }
                colInfor.setAttribute(this.ColAttribute[j], tempValue);
            }
        }
        return colInfor;
    },

    //设置滚动条的位置
    GetScrollPosiion: function (dom) {
        var scrollInfor = dom.createElement("ScrollPosition");
        scrollInfor.setAttribute("ScrollLeft", this.S_Body.scrollLeft);
        scrollInfor.setAttribute("ScrollTop", this.S_Body.scrollTop);
        return scrollInfor
    },

    //恢复从后台得到的多页数据
    RecieveData: function (inputPage) {
        this.dataDom.loadXML(inputPage);
        //设置翻页的结果
        var newMax;
        var newCur;
        if (this.dataDom.childNodes[0].getAttribute("MaxPage") != null && this._element.cusAttr('Paging') == DefaultSymbol.True) {
            if (this.dataDom.childNodes[0].getAttribute("MaxPage") != null) {
                newMax = this.dataDom.childNodes[0].getAttribute("MaxPage");
            }
            if (this.dataDom.childNodes[0].getAttribute("CurPage") != null) {
                newCur = this.dataDom.childNodes[0].getAttribute("CurPage");
            }
            this._element.cusAttr('Paging', newCur);
            this._element.cusAttr('MaxPage', newMax);
            this.pages.SetNumber(this._element.cusAttr('CurrentPage'), this._element.cusAttr('MaxPage'), false);
        }
        var inputTable = decodeURIComponent(XMLHelper.serializeXMLNodeToString(this.dataDom.childNodes[0].firstChild));
        var tempDiv = document.createElement("div");
        tempDiv.innerHTML = inputTable;
        var tempTable = tempDiv.children[0];
    },

    ///
    ///
    //判断指定的行是否为空行
    IsEmptyRow: function (row) {
        if (row == this.UNDEFINED_VALUE) {
            return false;
        } else {
            return row.cusAttr('Status') == RowStatus.Empty;
        }
    },

    //创建多语言输入控件
    CreateMultiInputControl: function (columnIndex) {
        var multiInput = null;
        var fieldName = this.GetColumnFieldID(columnIndex);
        if (fieldName != "") {
            multiInput = this.ControlArray[fieldName];
            if (multiInput == null) {
                multiInput = window.document.getElementById(this.get_id() + "_" + fieldName);
                Init(multiInput.id, UF.UI.GlobalInput);
                var maxLength = parseInt(this.MainCols[columnIndex].cusAttr('MaxLength'), 10);
                if (maxLength > 0) multiInput.control._textbox.maxLength = maxLength;
                this.ControlArray[fieldName] = multiInput;
            }
        }
        return multiInput;
    },

    //创建多行文本输入控件
    CreateTextAreaControl: function (columnIndex) {
        var textArea = null;
        var fieldName = this.GetColumnFieldID(columnIndex);
        if (fieldName != "") {
            textArea = this.ControlArray[fieldName];
            if (textArea == null) {
                textArea = window.document.createElement("TextArea");
                textArea.id = this.get_id() + "_" + fieldName;
                textArea.className = "GridInput";
                textArea.DataType = this.GetColumnDataType(columnIndex);
                textArea.DisplayFormat = this.GetColumnDisplayFormat(columnIndex);
                textArea.maskChars = this.GetColumnMaskChars(columnIndex);
                var maxLength = parseInt(this.MainCols[columnIndex].cusAttr('MaxLength'), 10);
                if (maxLength > 0) textArea.maxLength = maxLength;
                textArea.onkeydown = this.TextAreaKeyDown;
                // textArea.attachEvent("onkeypress", this.CheckMarkChar);
                $(textArea).bind("keypress", this.CheckMarkChar);
                // textArea.attachEvent("onkeypress", this.CheckMarkChar);
                $(textArea).bind("paste", this.CheckMarkChars);
                this.ControlArray[fieldName] = textArea;
            }
        }
        return textArea;
    },

    //文本输入按键
    TextAreaKeyDown: function () {
        switch (window.event.keyCode) {
            case KeyCode.left:
            case KeyCode.right:
            case KeyCode.up:
            case KeyCode.down:
            case KeyCode.enter:
                $Event(event).stopPropagation();
                break;
        }
    },
    //创建数值录入控件   
    CreateNumbericControl: function (columnIndex, rowIndex, isNewRowInit) {
        //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ Begin
        var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识

        var numberic = null;
        var fieldName = this.GetColumnFieldID(columnIndex);
        if (fieldName != "") {
            numberic = this.ControlArray[fieldName];
            if (numberic == null) {
                numberic = window.document.getElementById(this.get_id() + "_" + fieldName);
                Init(numberic.id, UF.UI.Number);
                if (numberic.control) {
                    tryAttachCtrlEvent(this.get_id() + "_" + fieldName, "onchange", this.OnFireControlChangeEvent);
                }
                this.ControlArray[fieldName] = numberic;
            }
            //设置动态精度和舍入方式
            //gct20071120:注释掉，采用给相应方法多增加一个参数(rowIndex)的方式解决，目的是采用rowIndex，而不是采用全局的this._owner.m_currentRowIndex
            var sf_columnIndex = this.GetColumnIndex(this.MainCols[columnIndex].cusAttr('sf'));
            var tf_columnIndex = this.GetColumnIndex(this.MainCols[columnIndex].cusAttr('tf'));
            var vf_columnIndex = this.GetColumnIndex(this.MainCols[columnIndex].cusAttr('vf'));
            var cs_columnIndex = this.GetColumnIndex(this.MainCols[columnIndex].cusAttr('CS'));

            if (rowIndex == null)
                this.SetDynamicScaleAndRoundType(columnIndex, numberic, null, sf_columnIndex, tf_columnIndex, vf_columnIndex, cs_columnIndex);
            else
                this.SetDynamicScaleAndRoundType(columnIndex, numberic, rowIndex, sf_columnIndex, tf_columnIndex, vf_columnIndex, cs_columnIndex, isNewRowInit);
        }

        if (this.Grid_IsDirtyData == true) //如果Grid本身的脏数据标识为true，则认为该页面全局的脏数据标识为true
            Set_Global_IsDirtyData_TheForm(this.Grid_IsDirtyData);
        else
            Set_Global_IsDirtyData_TheForm(bDirtyDataFlag); //恢复以前的脏数据标识
        //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ End

        return numberic;
    },

    SetDynamicScaleAndRoundType: function (columnIndex, controlC, rowIndex, sf_columnIndex, tf_columnIndex, vf_columnIndex, cs_columnIndex, isNewRowInit) {
        var control = controlC.control;
        var _tmpCurrentRowIndex = this.m_currentRowIndex;
        //gct20071120:注释掉，采用给相应方法多增加一个参数(rowIndex)的方式解决，目的是采用rowIndex，而不是采用全局的this._owner.m_currentRowIndex
        /*
        if(this.m_IsCurrentRowIndexChanged){
            _tmpCurrentRowIndex -= 1;
            this.m_IsCurrentRowIndexChanged = false; 
        }
        */
        if (rowIndex != null && rowIndex != this.m_currentRowIndex) _tmpCurrentRowIndex = rowIndex;
        if (this.MainCols[columnIndex].cusAttr('sf') != this.UNDEFINED_VALUE) { //wanglei:动态精度列 
            var scale;
            var roundType;
            var roundValue;
            var cs;

            if (isNewRowInit == true && columnIndex < sf_columnIndex) //初始化列默认值的时候，如果引用到还没有初始化的列，需要先初始化被引用的列
                scale = this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.GetCellDefaultValue(this.MainCols[sf_columnIndex], _tmpCurrentRowIndex, sf_columnIndex);
            else
                scale = this.InnerGetCellValue(_tmpCurrentRowIndex, sf_columnIndex);

            if (isNewRowInit == true && columnIndex < tf_columnIndex) //初始化列默认值的时候，如果引用到还没有初始化的列，需要先初始化被引用的列            
                roundType = this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.GetCellDefaultValue(this.MainCols[tf_columnIndex], _tmpCurrentRowIndex, tf_columnIndex);
            else
                roundType = this.InnerGetCellValue(_tmpCurrentRowIndex, tf_columnIndex);

            if (isNewRowInit == true && columnIndex < vf_columnIndex) //初始化列默认值的时候，如果引用到还没有初始化的列，需要先初始化被引用的列
                roundValue = this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.GetCellDefaultValue(this.MainCols[vf_columnIndex], _tmpCurrentRowIndex, vf_columnIndex);
            else
                roundValue = this.InnerGetCellValue(_tmpCurrentRowIndex, vf_columnIndex);

            if (scale != "") control.set_Scale(scale, true);

            if (roundType != "" && roundValue != "") {
                control.set_RoundType(roundType, true);
                control.set_RoundValue(roundValue, true);
            }
            if (this.MainCols[columnIndex].cusAttr('CS')) {
                if (isNewRowInit == true && columnIndex < cs_columnIndex) //初始化列默认值的时候，如果引用到还没有初始化的列，需要先初始化被引用的列
                    cs = this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.GetCellDefaultValue(this.MainCols[cs_columnIndex], _tmpCurrentRowIndex, cs_columnIndex);
                else
                    cs = this.InnerGetCellValue(_tmpCurrentRowIndex, cs_columnIndex);
                control.set_CurrencySymbol(cs, true);
            }

            //处理合计行动态精度
            if (this.MainCols[columnIndex].SumDataFormat != null) {
                if (scale != "" && (scale > this.MainCols[columnIndex].SumDataFormat.scale)) {
                    this.MainCols[columnIndex].SumDataFormat.scale = scale;
                    this.MainCols[columnIndex].SumDataFormat.roundType = roundType;
                    this.MainCols[columnIndex].SumDataFormat.roundValue = roundValue;
                }

                if (this._element.cusAttr('EditStatus') == DisplayStyle.Browser) { //wanglei:添加 浏览状态 分支逻辑
                    //此处不修改合计币符
                } else if (!this.IsEmptyRow(this.D_Body.rows[rowIndex])) {
                    if (cs != "") {
                        if ((this.MainCols[columnIndex].SumDataFormat.currencySymbol != "") && (this.MainCols[columnIndex].SumDataFormat.currencySymbol != cs)) {
                            this.MainCols[columnIndex].SumDataFormat.currencySymbol = "";
                        } else {
                            if (this.get_TotalRows() == 1) {
                                this.MainCols[columnIndex].SumDataFormat.currencySymbol = cs;
                            }
                        }
                    } else {
                        this.MainCols[columnIndex].SumDataFormat.currencySymbol = "";
                    }
                }
            }
        } else {
            if (this.MainCols[columnIndex].cusAttr('CS')) {
                var cs;
                if (isNewRowInit == true && columnIndex < cs_columnIndex) //初始化列默认值的时候，如果引用到还没有初始化的列，需要先初始化被引用的列
                    cs = this.m_gridBodyEventsHandler.GridEditHelper.GridCRUDHelper.GetCellDefaultValue(this.MainCols[cs_columnIndex], _tmpCurrentRowIndex, cs_columnIndex);
                else
                    cs = this.InnerGetCellValue(_tmpCurrentRowIndex, cs_columnIndex);
                control.set_CurrencySymbol(cs, true);
            }
            control.set_Scale(control.get_element().cusAttr('Scale'), true);
            control.set_RoundValue(control.get_element().cusAttr('RV'), true);
            control.set_RoundType(control.get_element().cusAttr('RT'), true);
            control.set_FormatString(control.get_element().cusAttr('FS'));
        }
    },
    InnerGetCellValue: function (rowIndex, columnIndex) {
        var result = "";
        if (this.m_gridFaciesManager != null) {
            if (columnIndex >= 0) {
                var cellValue = this.m_gridFaciesManager.GetCellValue(rowIndex, columnIndex);
                if (cellValue != null) result = cellValue.Value;
            }
        }
        return result;
    },

    //创建日历控件
    CreateDatePickerControl: function (columnIndex) {
        var datePicker = null;
        var fieldName = this.GetColumnFieldID(columnIndex);
        if (fieldName != "") {
            datePicker = this.ControlArray[fieldName];
            if (datePicker == null) {
                datePicker = window.document.getElementById(this.get_id() + "_" + fieldName);
                Init(datePicker.id, UF.UI.DateTimePicker);
                this.ControlArray[fieldName] = datePicker;
            }
        }
        return datePicker;
    },

    //没有用?????
    //取得取得标准日期值
    GetDateValueString: function (date) {
        var resultDate = "";
        if (date != null) {
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var day = date.getDate();
            var hour = date.getHours();
            var minute = date.getMinutes();
            var seconds = date.getSeconds();
            resultDate = year + "-" + month + "-" + day + " " + hour + ":" + minute + ":" + seconds;
        }
        return resultDate;
    },

    //取得列表框控件实例
    CreateComboxControl: function (columnIndex) {
        var comboxInstance = null;
        var fieldName = this.GetColumnFieldID(columnIndex);
        if (fieldName != "") {
            comboxInstance = this.ControlArray[fieldName];
            if (comboxInstance == null) {
                comboxInstance = window.document.getElementById(this.get_id() + "_" + fieldName);
                Init(comboxInstance.id, UF.UI.DropDownList);
                var bNull = this.MainCols[columnIndex].cusAttr('IsNull');
                if (bNull == 'false') {
                    //comboxInstance.ReadOnly="true";
                    //comboxInstance.R = "y";
                    comboxInstance.cusAttr('R', 'y');
                }
                this.ControlArray[fieldName] = comboxInstance;
            }
        }
        return comboxInstance;
    },

    //创建单选框控件
    CreateCheckBoxControl: function (columnIndex) {
        var checkBoxInstance = null;
        var fieldName = this.GetColumnFieldID(columnIndex);
        if (fieldName != "") {
            checkBoxInstance = this.ControlArray[fieldName];
            if (checkBoxInstance == null) {
                // checkBoxInstance = $E(this.get_element()).document.createElement("<INPUT type='checkbox'/>");
                checkBoxInstance = $E(this.get_element()).createElement('input', { 'type': 'checkbox' });
                checkBoxInstance.className = "GridInput";
                checkBoxInstance.id = this.get_id() + "_" + fieldName;
                this.ControlArray[fieldName] = checkBoxInstance;
            }
        }
        return checkBoxInstance;
    },

    //设置CheckBox或RadioBox列当前内容的转义结果
    SetCheckBoxValue: function (cellValue, columnIndex) {
        var checkBoxRef = this.MainCols[columnIndex].cusAttr('CheckBoxValueRef');
        if (checkBoxRef == "") { //返回默认结果
            return cellValue == DefaultSymbol.True;
        } //end checkBoxRef
        return this.GetCheckBoxSelect(cellValue, checkBoxRef);
    },

    //取得CheckBox列或RadioBox列的值
    GetCheckBoxSelect: function (boolValue, valueSchema) {
        var valueLines = valueSchema.split(";");
        for (var i = 0; i < 2; i++) {
            var values = valueLines[i].split(",");
            if (boolValue == values[0]) {
                return values[2] == DefaultSymbol.True;
            }
        }
        return false;
    },

    //根据列表框的键值找到显示内容
    GetCheckBoxTextByValue: function (value, valueSchema) {
        //bug for checkbox
        if (valueSchema != "") {
            var valueLines = valueSchema.split(";");
            for (var i = 0; i < 2; i++) {
                var values = valueLines[i].split(",");
                if (value == values[0]) {
                    return values[1];
                }
            }
        }
        return " ";
    },

    //取得CheckBox列或RadioBox列的值
    GetCheckBoxValue: function (boolValue, valueSchema) {
        if (valueSchema != "") {
            var valueLines = valueSchema.split(";");
            for (var i = 0; i < 2; i++) {
                var values = valueLines[i].split(",");
                if (boolValue == values[2]) {
                    return values[0];
                }
            }
        }
        return "";
    },

    //取得CheckBox列或RadioBox列的显示值
    GetCheckBoxText: function (boolValue, valueSchema) {
        var valueLines = valueSchema.split(";");
        for (var i = 0; i < 2; i++) {
            var values = valueLines[i].split(",");
            if (boolValue == values[2]) {
                return values[1];
            }
        }
        return "";
    },

    //设置制定单元的显示内容
    setCellListValue: function (inputCell, inputValue, controlType, inputV, isSynchUpdateValue4P) {
        inputCell.style.padding = "0 2 0 2";
        var bHasCreateControls = false;
        var controlJs = null;
        var curC = inputCell.children[0];
        if (curC == this.UNDEFINED_VALUE || curC.tagName == "NOBR" || curC.className == "FixedInner") {
            bHasCreateControls = false;
        } else {
            bHasCreateControls = true;
            controlJs = $find(curC.id);
        }

        if (bHasCreateControls) {
            inputCell.cusAttr("oldValue", inputCell.cusAttr("Value"));;
        } //yangkuna20101231:如果设置值的控件已经创建了输入控件则同步oldValue属性
        var inputCellValue = inputCell.cusAttr("Value");
        //gct20090615增加了isSynchUpdateValue4P标识，为了解决应付单税组合个性化移动到Grid中的情况,15SP300276832
        if (bHasCreateControls && isSynchUpdateValue4P == undefined) {
            switch (controlType) {
                case ControlType.CheckBox:
                    var tmpB = (inputCellValue == "true") ? true : false;
                    curC.checked = tmpB;
                    break;
                case ControlType.Combox:
                    controlJs.set_Value(inputCellValue);
                    break;
                case ControlType.MultiInput:
                    controlJs.SetMultiinputData(inputCell.cusAttr("MultiLang"));
                    controlJs.set_Value(inputValue);
                    break;
                case ControlType.Numberic:
                    controlJs.set_Value(inputCellValue);
                    controlJs.input_onfocus();
                    break;
                case ControlType.RefControl:
                    controlJs._isNeedValidate = !controlJs._isNeedValidate;
                    this.SetReferenceValues(controlJs, inputCell);
                    controlJs._isNeedValidate = !controlJs._isNeedValidate;
                    controlJs.onInputFocus();
                    break;
                case ControlType.Date:
                    controlJs.set_Value(inputCellValue);
                    break;
                case ControlType.TextBox:
                    controlJs = $ID(curC.id);
                    if (controlJs) {
                        if (inputCell.children[0] != null && inputCell.children[0].tagName == "INPUT") {
                            inputCell.innerText = inputValue;
                        }
                        controlJs.value = inputValue;
                        //wangl: 重新 设置 单元格 title 
                        inputCell.title = inputValue;
                    }
                    break;
                default:
                    controlJs = $ID(curC.id);
                    if (controlJs) {
                        controlJs.value = inputValue;
                    }
                    break;

            }
        } else {
            if (!(inputValue) || inputValue == "") {
                inputCell.innerText = " ";
                //wangl: clear the old value of the cell
                inputCell.title = "";

            } else {
                if (inputCell.children[0] != null && inputCell.children[0].tagName == "SPAN") {
                    //gct20090701：说明现在列的编辑控件还在
                    ;
                } else {
                    var noWrap = window.document.createElement("NOBR");
                    noWrap.innerText = inputValue;
                    inputCell.innerHTML = "";
                    inputCell.appendChild(noWrap);
                }
            }
        }
        //
    },

    //取得指定列对应的FieldID
    GetColumnFieldID: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            var resultValue = this.MainCols[columnIndex].cusAttr('FieldID');
            if (resultValue != this.UNDEFINED_VALUE)
                return resultValue;
        }
        return "";
    },

    //取得指定列的显示格式定义
    GetColumnDisplayFormat: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            var displayFormat = this.MainCols[columnIndex].cusAttr('DisplayFormat');
            if (displayFormat != this.UNDEFINED_VALUE) return displayFormat;
        }
        return ""; //无数据显示格式定义
    },

    //取得指定列的数据类型
    GetColumnDataType: function (columnIndex) {
        if (columnIndex > 0 && columnIndex < this.m_columns) {
            var dataType = this.MainCols[columnIndex].cusAttr('DataType');
            if (dataType != this.UNDEFINED_VALUE) return dataType;
        }
        //默认返回最一般的数据类型
        return DataType.String;
    },

    //取得列的屏蔽字符
    GetColumnMaskChars: function (columnIndex) {
        var maskChar = MaskChar.Default;

        if (columnIndex > 0 && columnIndex < this.m_columns) {
            if (this.MainCols[columnIndex].cusAttr('IsUseDefaultMaskChars') === "False") {
                maskChar = "";
            }
            if (this.MainCols[columnIndex].cusAttr('MaskChars') != this.UNDEFINED_VALUE) {
                return maskChar + this.MainCols[columnIndex].cusAttr('MaskChars');
            }
        }
        return maskChar;
    },

    //创建文本输入框目标控件
    CreateTextBoxControl: function (columnIndex) {
        var textBoxInstance = null;
        var fieldName = this.GetColumnFieldID(columnIndex);
        if (fieldName != "") {
            textBoxInstance = this.ControlArray[fieldName];
            if (textBoxInstance == null) {
                // textBoxInstance = $E(this.get_element()).document.createElement("<INPUT type='text'/>");
                textBoxInstance = $E(window.document).createElement('input', { 'type': 'text' });
                textBoxInstance.id = this.get_id() + "_" + fieldName;
                textBoxInstance.className = "GridInput";
                textBoxInstance.cusAttr("dataType", this.GetColumnDataType(columnIndex)); //取得数据类型     
                textBoxInstance.cusAttr("displayFormat", this.GetColumnDisplayFormat(columnIndex)); //取得显示格式                                                 
                // textBoxInstance.attachEvent("onkeypress", this.CheckMarkChar);
                $(textBoxInstance).bind("keypress", this.CheckMarkChar);
                // textBoxInstance.attachEvent("onpaste", this.CheckMarkChars);
                $(textBoxInstance).bind("paste", this.CheckMarkChars);
                textBoxInstance.cusAttr("maskChars", this.GetColumnMaskChars(columnIndex));
                var maxLength = parseInt(this.MainCols[columnIndex].cusAttr('MaxLength'), 10);
                if (maxLength > 0) textBoxInstance.maxLength = maxLength;
                this.ControlArray[fieldName] = textBoxInstance;
            }
        }
        return textBoxInstance;
    },

    SetCheckMark: function () {
        var textBox = event.srcElement;
        textBox.ctrlv = false;
        if (event.ctrlKey) {
            if (event.keyCode == 86) {
                textBox.ctrlv = true;
            }
        }
    },

    //检查屏蔽字符集合
    CheckMarkChars: function () {
        var textBox = event.srcElement;
        var maskChars = textBox.cusAttr("maskChars");
        // var text = window.clipboardData.getData("text");
        var text;
        if (event) {
            text = event.clipboardData.getData("text/plain");
        } else {
            text = window.clipboardData.getData("text");
        }
        if (isMasks(text, maskChars)) {
            $Event(event).preventDefault();
        }
    },

    //检查屏蔽字符
    CheckMarkChar: function () {
        var textBox = event.srcElement;
        var maskChars = textBox.cusAttr("maskChars");
        if (maskChars != "") {
            if (isMask(event.keyCode, maskChars)) {
                $Event(event).preventDefault();
            }
        }
    },

    //删除字符串中的特定字符
    RemoveCharOfString: function (source, character) {
        var resultValue = "";
        if (source != "") {
            var values = source.split(character);
            for (var i = 0; i < values.length; i++) {
                resultValue += values[i];
            }
        }
        return resultValue;
    },
    //创建参照控件
    CreateReferenceControl: function (columnIndex) {
        var reference = null;
        var fieldName = this.GetColumnFieldID(columnIndex);
        if (fieldName != "") { //优先使用用户定义控件
            reference = this.GetUserDefineReferenceControl(fieldName);
            if (reference == null) { //使用默认参照控件
                reference = this.ControlArray[fieldName];
                if (reference == null) {
                    //gct20090601:bug15SP300276224如果该列的列编辑器是个性化置换的
                    var colEditCtrlClientID4P = this.MainCols[this.GetColumnIndex(fieldName)].cusAttr('ColEditCtrlClientID4P');
                    if (colEditCtrlClientID4P) {
                        reference = $ID(colEditCtrlClientID4P);

                        if (reference != null) {
                            //gct20090601:bug15SP300276224如果该列的列编辑器是个性化置换的，则把事件注册到个性化控件上，而不是列默认的列编辑器上
                            this.UpdateReferenceResult.IsCustomPersonal = true;
                            //如果这个时候还没有初始化控件，则代表此控件的初始化晚于现在的这个过程，需要先初始化再添加事件。不然后期事件不完整。201712040290
                            if (!$find(colEditCtrlClientID4P)) {
                                Init(reference.id, UF.UI.Reference);
                            }
                            tryAttachCtrlEvent(colEditCtrlClientID4P, "ContentChanged", this.UpdateReferenceResult);
                            this.UpdateReferenceResult.SourceRefOutFieldName = fieldName; //记录是哪个引起参照携带的fieldName，以供UpdateReferenceResult4P使用

                            var refRel4P = this.MainCols[columnIndex].cusAttr('RefRel4P');
                            if (refRel4P != null && refRel4P != "") {
                                //方案1，挂在编辑器上 ----------------- 不行
                                //tryAttachCtrlEvent(colEditCtrlClientID4P,"ContentChanged4P",this.UpdateReferenceResult4P);

                                //方案2
                                tryAttachCtrlEvent(this.get_id(), "OnRowContentChanged4P", this.UpdateReferenceResult4P);
                                //this.UpdateReferenceResult4P.SourceJSCtrl = $find(colEditCtrlClientID4P);
                                //this.UpdateReferenceResult4P.SourceRefOutFieldName = fieldName;
                            }


                            this.RefBeforeLoadData.IsCustomPersonal = true;
                            tryAttachCtrlEvent(colEditCtrlClientID4P, "BeforeLoadData", this.RefBeforeLoadData);
                        }
                    }
                    if (reference == null) //此时如果还为null，有可能说明是在个性化关联设计器中使用，当然找不到了
                    {
                        reference = window.document.getElementById(this.get_id() + "_" + fieldName);
                        Init(reference.id, UF.UI.Reference);
                        reference.cusAttr('RefPara', this.MainCols[columnIndex].cusAttr('RefPara'));
                        reference.cusAttr('CtrlId', this.MainCols[columnIndex].cusAttr('CtrlId'));

                        tryAttachCtrlEvent(this.get_id() + "_" + fieldName, "ContentChanged", this.UpdateReferenceResult);
                        this.UpdateReferenceResult.SourceRefOutFieldName = fieldName; //记录是哪个引起参照携带的fieldName，以供UpdateReferenceResult4P使用

                        var refRel4P = this.MainCols[columnIndex].cusAttr('RefRel4P');
                        if (refRel4P != null && refRel4P != "") {
                            //方案1，挂在编辑器上 ----------------- 不行
                            //tryAttachCtrlEvent(this.get_id()+"_" + fieldName,"ContentChanged4P",this.UpdateReferenceResult4P);

                            //方案2
                            tryAttachCtrlEvent(this.get_id(), "OnRowContentChanged4P", this.UpdateReferenceResult4P);
                            //this.UpdateReferenceResult4P.SourceJSCtrl = $find(this.get_id()+"_" + fieldName);
                            //this.UpdateReferenceResult4P.SourceRefOutFieldName = fieldName;
                        }

                        tryAttachCtrlEvent(this.get_id() + "_" + fieldName, "BeforeLoadData", this.RefBeforeLoadData);
                    }

                    reference.columnIndex = columnIndex;

                    //zjx add
                    if (this.MainCols[columnIndex].cusAttr('Post') == "1") {
                        reference.control.set_IsShowForm(false);
                        reference.control._button.onclick = this.DoFirePostBack;
                    } else if (this.MainCols[columnIndex].cusAttr('Post') == "2") { //2为datachange后postback;1为之前postback
                        /*reference.PostBackTime = "2";
                        //
                        this.eventNode=this.dataDom.createElement("Event");
                        this.eventNode.setAttribute("Style","CustomerPostBack");
                        this.eventNode.setAttribute("RowIndex",this.m_currentRowIndex);
                        this.eventNode.setAttribute("ColIndex",this.m_currentColumnIndex-1);
                        */

                        //
                    }
                    //      
                    this.ControlArray[fieldName] = reference;
                }
            }
            //zjx add 
            //reference.IsShowForm = true;
            this.UpdateReferenceResult.SourceRefOutFieldName = fieldName; //记录是哪个引起参照携带的fieldName，以供UpdateReferenceResult4P使用
        }
        return reference;
    },

    //取得用户自定义控件
    GetUserDefineReferenceControl: function (fieldName) {
        var reference = null;
        var clientControl = this.m_clientUserControl[fieldName];
        if (clientControl != this.UNDEFINED_VALUE) {
            if (clientControl.ControlType == ControlType.RefControl) {
                reference = clientControl.Control;
                if (reference != null) {
                    reference.RefPara = clientControl.refParas;
                }
            }
        }
        return reference;
    },

    //设置参照单元初始值
    SetReferenceValues: function (refControl, cell, isSynchUpdateValue4P) { //zjx remove now add     
        var isR = refControl.get_IsRaiseEvent();
        var isPersonalProcess = refControl.get_IsPersonalProcess();
        refControl.set_IsRaiseEvent(false); //因为是初始化，不抛事件
        refControl.set_IsPersonalProcess(false); //因为是初始化，不同步
        refControl.SetValues("", "", "");
        refControl.set_IsRaiseEvent(isR);
        refControl.set_IsPersonalProcess(isPersonalProcess);

        if (cell.cusAttr('R') != this.UNDEFINED_VALUE) { //设置key code text关键字
            var line = cell.cusAttr('R');
            if (line != "") {
                var items = line.split(this.RefSplitter2);
                if (items.length == 2) {
                    var code = items[0];
                    var text = items[1];
                    refControl.SetValues(cell.cusAttr('Value'), code, text);
                }
            }
        }
    },

    //设置参照打开前的上下文参数
    SetReferenceParameters: function (refControl, columnIndex, rowIndex, paraSchema) {
        if (refControl != null) {
            if (paraSchema != this.UNDEFINED_VALUE) {
                var parameters = paraSchema.split(";");
                for (var i = 0; i < parameters.length; i++) {
                    this.SetReferenceParameter(refControl, rowIndex, parameters[i], columnIndex);
                }
            }
        }
    },

    //设置参照的上下文参数
    SetReferenceParameter: function (refControl, rowIndex, lineSchema, columnIndex) {
        if (lineSchema != "") {
            var commands = lineSchema.split(",");
            if (commands.length == 3) {
                var key = commands[0];
                var column = commands[1];
                var attribute = commands[2];

                //设置参照上下文参数时,如果关联控件已设置，且目前该Param的值不为null，则不设置
                if (!refControl.get_IsLoadDefaultParams() && refControl.GetParam(key) != null) {
                    if (!this.MainCols[columnIndex].cusAttr('ISMultiOrg')) {
                        return;
                    }
                }

                if (attribute == "Context") {
                    if (this.MainCols[columnIndex].hasCusAttr('ISMultiOrg') && this.MainCols[columnIndex].cusAttr('ISMultiOrg').toString().toLowerCase() == "true") {
                        var v = "";
                        var c = $ID(column);

                        if (c) {
                            if (c.control) {
                                if (c.control.get_Type() == ControlType.Reference) {
                                    v = c.control.get_Key();
                                } else {
                                    v = c.control.get_Value();
                                }
                            } else {
                                v = c.value;
                            }
                        } else {
                            v = this.MainCols[columnIndex].cusAttr('SrcOrg');
                            //v = this.m_gridFaciesManager.GetCellValue(m_currentRowIndex,columnIndex);
                        }
                        refControl.AddParam(key, v);
                    } else {
                        //取环境变量
                        refControl.AddParam(key, $ID(column).value);
                    }
                } else {
                    //zjx modify
                    var index = this.GetColumnIndex(column);
                    if (index >= 0) {
                        refControl.AddParam(key, this.GetColumnRefContext(rowIndex, this.GetColumnIndex(column), attribute));
                    } else {
                        var v = "";
                        //var o = this.get_element().document.getElementById(column);
                        var o = this.GetControlByServerID(column);
                        if (o && o.control) {
                            //if(o.className.indexOf(ControlType.Reference)>=0){
                            if (o.control.get_Type() == ControlType.Reference) {
                                if (attribute == "ByValue") {
                                    v = o.control.get_Key();
                                } else if (attribute == "ByCode") {
                                    v = o.control.get_Value();
                                } else if (attribute == "ByText") {
                                    v = o.control.get_Text();
                                }
                            } else {
                                v = o.control.get_Value();
                            }
                            refControl.AddParam(key, v);
                        }
                    }
                }
            }
        }
    },

    //取得当前列的输入值类型
    GetColumnType: function (columnIndex) {
        var resultType = this.MainCols[columnIndex].cusAttr('ControlType');
        if (resultType == this.UNDEFINED_VALUE) return "";
        return resultType;
    },

    //取得指定名称的列索引
    /* GetColumnIndex : function(fieldid) 
     {
         var resultColIndex  =-1 ;  
         for(var i=0;i<_this.m_columns ;i++)
         {
             if(fieldid==_this.MainCols[i].FieldID)
             {
                 resultColIndex=i;
                 break;
             }
         }
         return resultColIndex
     },*/

    //设置列参照上下文
    GetColumnRefContext: function (rowIndex, columnIndex, attribute) {
        if (columnIndex > -1) {
            if (attribute == "ByCode") {
                //如果是参照控件，返回Code，其他类型控件返回value
                if (this.GetColumnType(columnIndex) == ControlType.RefControl) {
                    return this.GetCellValue(rowIndex, columnIndex).Code;
                } else {
                    return this.GetColValue(rowIndex, columnIndex);
                }
            } else {
                if (attribute == "ByText") {
                    return this.GetColText(rowIndex, columnIndex);
                } else {
                    return this.GetColValue(rowIndex, columnIndex);
                }
            }
        }
        return "";
    },

    //取得指定单元的Value值
    GetColValue: function (rowIndex, columnIndex) {
        return this.D_Body.rows[rowIndex].cells[columnIndex].cusAttr('Value');
    },

    //取得指定单元的文本值
    GetColText: function (rowIndex, columnIndex) {
        //return $(this.D_Body.rows[rowIndex].cells[columnIndex]).attr('innerText');
        return $(this.D_Body.rows[rowIndex].cells[columnIndex]).text();
    },

    //更新数字精度值
    UpdateNumbericPrecision: function (rowIndex) {
        for (var i = 0; i < this.m_columns; i++) {
            if (this.MainCols[i].cusAttr('sf') != this.UNDEFINED_VALUE) {
                var cellValue = this.m_gridFaciesManager.GetCellValue(rowIndex, i);
                if (cellValue != null) {
                    var oldValue = cellValue.Value;
                    var numValue = this.m_formatHelper.FormatCellNumber(i, rowIndex, cellValue.Value, cellValue.Value);
                    var newValue = numValue.Value;
                    this.SetColValue(rowIndex, i, newValue);
                    this.SetColText(rowIndex, i, numValue.Text);
                    if (this.MainCols[i].cusAttr('HasSum') == "true") {
                        if ((newValue - oldValue) != 0) {
                            this.SetTotalValue(this.MainCols[i].cusAttr('FieldID'), parseFloat(this.GetTotalValue(this.MainCols[i].cusAttr('FieldID'))) + parseFloat(newValue) - parseFloat(oldValue));
                        }
                    }
                }
            }
        }
    },

    //用参照返回值更新单元值
    //refResult参照返回值
    //refRelation参照回填关系定义 
    //note:
    //      参照关系定义信息为用逗号分隔的四段内容gridKeyField,refExpression,refcodeField,
    //      refNameField  如果该段无值，则返回'',只有gridKeyField有值时回写才有意义
    UpdateCellValueFromReferenceResult: function (refResult, refRelation, cur_m_currentRowIndex) {
        if (refRelation != "") {
            var relations = refRelation.split(",");
            if (relations.length == 4) {
                var gridKeyField = relations[0];
                var refExpression = relations[1];
                var refCodeField = relations[2];
                var refNameField = relations[3];
                var columnIndex = this.GetColumnIndex(gridKeyField);
                if (columnIndex > -1)
                //if(columnIndex>-1&&(columnIndex!=this.m_currentColumnIndex))
                { //只有被回写列存在时才有意义
                    switch (this.GetColumnControlType(gridKeyField)) {
                        case ControlType.RefControl:
                            { //更新参照单元
                                if (cur_m_currentRowIndex == null)
                                    this.UpdateReferenceCell(refResult, this.m_currentRowIndex, columnIndex, refExpression, refCodeField, refNameField);
                                else
                                    this.UpdateReferenceCell(refResult, cur_m_currentRowIndex, columnIndex, refExpression, refCodeField, refNameField);
                                break;
                            }
                        case ControlType.Combox:
                            { //更新下拉列表单元
                                if (cur_m_currentRowIndex == null)
                                    this.UpdateComboxCell(refResult, this.m_currentRowIndex, columnIndex, refExpression);
                                else
                                    this.UpdateComboxCell(refResult, cur_m_currentRowIndex, columnIndex, refExpression);
                                break;
                            }
                        case ControlType.MultiInput:
                            { //更新多语言录入单元
                                if (cur_m_currentRowIndex == null)
                                    this.UpdateMultiInputCell(refResult, this.m_currentRowIndex, columnIndex, refExpression);
                                else
                                    this.UpdateMultiInputCell(refResult, cur_m_currentRowIndex, columnIndex, refExpression);
                                break;
                            }
                        case ControlType.CheckBox:
                            {
                                if (cur_m_currentRowIndex == null)
                                    this.UpdateCheckBoxCell(refResult, this.m_currentRowIndex, columnIndex, refExpression);
                                else
                                    this.UpdateCheckBoxCell(refResult, cur_m_currentRowIndex, columnIndex, refExpression);
                                break;
                            }
                        case ControlType.Numberic:
                            {
                                if (cur_m_currentRowIndex == null)
                                    this.UpdateNumbericCell(refResult, this.m_currentRowIndex, columnIndex, refExpression);
                                else
                                    this.UpdateNumbericCell(refResult, this.m_currentRowIndex, columnIndex, refExpression);
                                break;
                            }
                        case ControlType.Date:
                        case ControlType.DateTime:
                            {
                                if (cur_m_currentRowIndex == null)
                                    this.UpdateDateCell(refResult, this.m_currentRowIndex, columnIndex, refExpression);
                                else
                                    this.UpdateDateCell(refResult, cur_m_currentRowIndex, columnIndex, refExpression);
                                break;
                            }
                        default:
                            { //更新普通单元
                                if (cur_m_currentRowIndex == null)
                                    this.UpdateNormalCell(refResult, this.m_currentRowIndex, columnIndex, refExpression);
                                else
                                    this.UpdateNormalCell(refResult, cur_m_currentRowIndex, columnIndex, refExpression);
                            }
                            var cellData = new CellDataContent("", refResult);
                            if (cur_m_currentRowIndex == null)
                                this.OnCellDataValueChanged(cellData, this.m_currentRowIndex, columnIndex);
                            else
                                this.OnCellDataValueChanged(cellData, cur_m_currentRowIndex, columnIndex);

                    } //end switch
                }
            } //relation
        }
    },

    //更新参照单元
    UpdateReferenceCell: function (refResult, rowIndex, columnIndex, keyField, codeField, nameField) {
        //取得参照值
        var keyValue = refResult.GetValue(keyField);
        var codeValue = refResult.GetValue(codeField);
        var nameValue = refResult.GetValue(nameField);
        var oldV = this.GetColValue(rowIndex, columnIndex);
        this.SetColValue(rowIndex, columnIndex, keyValue);
        this.SetColText(rowIndex, columnIndex, nameValue);
        this.SetColRefAttribute(rowIndex, columnIndex, codeValue + this.RefSplitter2 + nameValue);

        if (oldV == "") {
            oldV = "-1";
        }
        if (keyValue != oldV && keyValue != "") {
            var cellData = new CellDataContent("", keyValue);
            this.OnCellDataValueChanged(cellData, rowIndex, columnIndex);
        }
    },

    //更新下拉列表单元
    UpdateComboxCell: function (refResult, rowIndex, columnIndex, refExpression) {
        //取得参照值
        var resultValue = refResult.GetValue(refExpression);
        this.SetCellValue(rowIndex, columnIndex, resultValue);
        //this.SetColValue(rowIndex,columnIndex,resultValue);
        //this.SetColText(rowIndex,columnIndex,this.GetComboxTextbyID(columnIndex,resultValue));    
    },

    //根据ID号取得列表文本值
    GetComboxTextbyID: function (columnIndex, value) {
        var resultValue = value;
        var cur = this.CreateComboxControl(columnIndex);
        if (cur != this.UNDEFINED_VALUE) {
            var curJS = cur.control;
            resultValue = curJS.getTextByValue(value);
            if (resultValue == "") resultValue = " ";
        }
        return resultValue;
    },

    //更新CheckBox内容
    UpdateCheckBoxCell: function (refResult, rowIndex, columnIndex, refExpression) {
        //取得参照值    
        var value = refResult.GetValue(refExpression);
        if (value) {
            if (typeof (value) == "string") {
                value = value.toLowerCase();
            }
        }
        this.SetCellValue(rowIndex, columnIndex, value);

        //this.SetColValue(rowIndex,columnIndex,value);
        //this.SetColText(rowIndex,columnIndex,this.GetCheckBoxTextByValue(value,$(this.MainCols[columnIndex]).attr('CheckBoxValueRef')));
    },

    //更新多语录入单元
    UpdateMultiInputCell: function (refResult, rowIndex, columnIndex, refExpression) {
        //取得参照值
        var resultValue = refResult.GetValue(refExpression);
        this.m_gridFaciesManager.SetMultiLangAttribute(this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(rowIndex, columnIndex), resultValue);
        this.SetCellValue(rowIndex, columnIndex, resultValue);
        //this.SetColValue(rowIndex,columnIndex,resultValue);
        //this.SetColText(rowIndex,columnIndex,resultValue);
    },
    //更新数字单元
    UpdateNumbericCell: function (refResult, rowIndex, columnIndex, refExpression) {
        //取得参照值
        var resultValue = refResult.GetValue(refExpression);

        this.SetCellValue(rowIndex, columnIndex, resultValue);
        //this.SetColValue(rowIndex,columnIndex,resultValue);
        //this.SetColText(rowIndex,columnIndex,this.GetNumberFormatedValue(resultValue,columnIndex));
    },
    //更新日期单元
    UpdateDateCell: function (refResult, rowIndex, columnIndex, refExpression) {
        //取得参照值
        var resultValue = refResult.GetValue(refExpression);
        this.SetCellValue(rowIndex, columnIndex, resultValue);
        //this.SetColValue(rowIndex,columnIndex,resultValue);
        //this.SetColText(rowIndex,columnIndex,this.GetDateFormatedValue(resultValue,columnIndex));
    },
    //更新普通单元
    UpdateNormalCell: function (refResult, rowIndex, columnIndex, refExpression) {
        //取得参照值
        var resultValue = refResult.GetValue(refExpression);
        this.SetCellValue(rowIndex, columnIndex, resultValue);
        //this.SetColValue(rowIndex,columnIndex,resultValue);
        //this.SetColText(rowIndex,columnIndex,resultValue);
    },

    //取得指定名称列的控件类型
    GetColumnControlType: function (fieldid) {
        var resultControlType = "";
        for (var i = 0; i < this.m_columns; i++) {
            if (fieldid == this.MainCols[i].cusAttr('FieldID')) {
                resultControlType = this.MainCols[i].cusAttr('ControlType');
                break;
            }
        }
        return resultControlType;
    },

    //设置指定单元的Value值
    SetColValue: function (rowIndex, columnIndex, value) {
        this.D_Body.rows[rowIndex].cells[columnIndex].cusAttr('Value', value);
    },

    //设置列的参照值属性
    SetColRefAttribute: function (rowIndex, columnIndex, value) {
        try {
            this.D_Body.rows[rowIndex].cells[columnIndex].cusAttr('R', value);
        } catch (e) { }
    },

    //设置指定单元的显示内容
    SetColText: function (rowIndex, columnIndex, text) {
        this.setCellListValue(this.D_Body.rows[rowIndex].cells[columnIndex], text);
    },

    //取得数据格式化之后的显示结果
    GetFormatedValue: function (value, dataType, format) {
        return value;
    },

    //取得多语控件的多语Value信息
    GetMultiinputData: function (value, columnIndex) {
        if (!value)
            return "";
        var control = this.GetColumnControl(columnIndex);
        if (control != null) {
            //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ Begin
            var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识

            var controlJS = control.control;
            var oldMultiData = controlJS.GetMultiinputData();
            var oldValue = controlJS.get_Value();
            controlJS.ClearData();
            controlJS.set_Value(value);
            var d = controlJS.GetMultiinputData();
            controlJS.SetMultiinputData(oldMultiData);
            controlJS.set_Value(oldValue);

            Set_Global_IsDirtyData_TheForm(bDirtyDataFlag); //恢复以前的脏数据标识
            //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ End
            return d;
        }
        return "";
    },

    //取得日期格式化后的结果
    GetDateFormatedValue: function (value, columnIndex) {
        var control = this.CreateDatePickerControl(columnIndex);
        if (control != null) {
            //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ Begin
            var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识

            var controlJS = control.control;
            var oldValue = controlJS.get_Value();
            controlJS.set_Value(value);
            var text = controlJS.get_Text();
            controlJS.set_Value(oldValue);

            Set_Global_IsDirtyData_TheForm(bDirtyDataFlag); //恢复以前的脏数据标识
            //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ End

            return text;
        }
        return value;
    },

    //    //取得数值格式化后的结果
    //    GetNumberFormatedValue : function(value,columnIndex,rowIndex,isNewRowInit)
    //    {
    //      if($(this.MainCols[columnIndex]).attr('FieldID')=="ID"){return value;}
    //        var control;
    //        //Add by lzhm 2008-12-05 提前记录oldValue
    //        var oldValue = null;
    //        var fieldName = this.GetColumnFieldID(columnIndex);
    //        if(fieldName != ""){
    //            numberic = this.ControlArray[fieldName];
    //            if(numberic && numberic.control){
    //                oldValue = numberic.control.get_Value();
    //            }
    //        }
    //        //gct20071120:注释掉，采用给相应方法多增加一个参数(rowIndex)的方式解决，目的是采用rowIndex，而不是采用全局的this._owner.m_currentRowIndex
    //        if(rowIndex==null)
    //            control = this.CreateNumbericControl(columnIndex);
    //        else
    //            control = this.CreateNumbericControl(columnIndex,rowIndex,isNewRowInit);
    //        
    //        if(control)
    //        {
    //           var controlJS = control.control;   
    //           if(controlJS){
    //              //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ Begin
    //                var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm();//获取当前的脏数据标识
    //            
    //                if(oldValue == null){
    //                  oldValue = controlJS.get_Value();
    //              }

    //                //controlJS.set_Value(""); //add by lzhm 2007-10-27
    //              controlJS.set_Value(value);
    //              var text =controlJS.GetTextBoxValue();
    //              control = this.CreateNumbericControl(columnIndex,this.m_currentRowIndex,isNewRowInit);
    //              controlJS = control.control;
    //              
    //              controlJS.set_Value(oldValue);
    //              if(control.style.display != "none"){
    //                  controlJS.input_onfocus();
    //              }
    //              
    //              Set_Global_IsDirtyData_TheForm(bDirtyDataFlag);//恢复以前的脏数据标识
    //                //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ End
    //              
    //              return text;
    //           }
    //        }
    //        return value;
    //    },
    //    //取得数值格式化后的结果(用于TotalValue的取值) add by lzhm 2007-10-26
    //    GetNumberFormatedValue4TotalValue : function(value,columnIndex)
    //    {
    //      if($(this.MainCols[columnIndex]).attr('FieldID')=="ID"){return value;}
    //      //合计值取第0行的精度信息
    //        var oldValue = null;
    //        var oldMaxV = null;
    //        var oldMinV = null;
    //        var fieldName = this.GetColumnFieldID(columnIndex);
    //        if(fieldName != ""){
    //            numberic = this.ControlArray[fieldName];
    //            if(numberic && numberic.control){
    //                oldValue = numberic.control.get_Value();
    //                oldMaxV = numberic.control.get_MaxValue();
    //                oldMinV = numberic.control.get_MinValue();
    //            }
    //        }

    //        var control = this.CreateNumbericControl(columnIndex,0,false);        
    //        if(control)
    //        {
    //           var controlJS = control.control;   
    //           if(controlJS){
    //              //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ Begin
    //                var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm();//获取当前的脏数据标识
    //                if(oldValue == null){
    //                  oldValue = controlJS.get_Value();
    //              }
    //              if(oldMaxV == null){
    //                  oldMaxV = controlJS.get_MaxValue();
    //              }
    //              if(oldMinV == null){
    //                  oldMinV = controlJS.get_MinValue();
    //              }
    //              controlJS.set_MaxValue(999999999999999);
    //              controlJS.set_MinValue(-99999999999999);
    //              
    //              controlJS.set_Value(value);


    //              //var text  = controlJS.get_Text();
    //              var text =controlJS.GetTextBoxValue();
    //              control = this.CreateNumbericControl(columnIndex,this.m_currentRowIndex);
    //          
    //              controlJS = control.control;
    //              controlJS.set_MaxValue(oldMaxV);
    //              controlJS.set_MinValue(oldMinV);
    //              
    //              if($(this.MainCols[columnIndex]).attr('SumDataFormat') != null){
    //                  var sdf = $(this.MainCols[columnIndex]).attr('SumDataFormat');
    //                  controlJS.set_Scale(sdf.scale);
    //                  controlJS.set_RoundType(sdf.roundType);
    //                  controlJS.set_RoundValue(sdf.roundValue);
    //                  controlJS.set_CurrencySymbol(sdf.currencySymbol);
    //              }
    //              
    //              controlJS.set_Value(oldValue);
    //              if(control.style.display != "none"){
    //                    controlJS.input_onfocus();
    //              }
    //              Set_Global_IsDirtyData_TheForm(bDirtyDataFlag);//恢复以前的脏数据标识
    //                //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ End
    //                
    //              return text;
    //           }
    //        }
    //        return value;
    //    },
    //    //直接从数字控件取值，不设置精度信息
    //    GetNumberFormatedValue_Clean : function(controlJS,value)
    //    {
    //        if(controlJS)
    //        {
    //           if(controlJS){
    //              //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ Begin
    //                var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm();//获取当前的脏数据标识
    //                
    //              var oldValue = controlJS.get_Value();   
    //                //controlJS.set_Value(""); //add by lzhm 2007-10-27
    //              controlJS.set_Value(value);
    //              //var text  = controlJS.get_Text();
    //              var text =controlJS.GetTextBoxValue();
    //              controlJS.set_Value(oldValue);              
    //              
    //              Set_Global_IsDirtyData_TheForm(bDirtyDataFlag);//恢复以前的脏数据标识
    //                //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ End
    //                
    //              return text;
    //           }
    //        }
    //        return value;
    //    }   ,

    SetColumnEdit: function (fieldName, bEdit) {
        var colIndex = this.GetColumnIndex(fieldName);
        //$(this.MainCols[colIndex]).attr('Edit') = bEdit && ($(this.MainCols[colIndex]).attr('EditEx') == DefaultSymbol.True);//===by zzq
        this.MainCols[colIndex].cusAttr('Edit', bEdit && (this.MainCols[colIndex].cusAttr('EditEx') == DefaultSymbol.True));
    },
    AllowEdit: function (colIndex, rowIndex) {
        var oldCurrentRowIndex = this.m_currentRowIndex;
        if (rowIndex != null) {
            this.m_currentRowIndex = rowIndex;
        }
        var bT = true;
        if (this.m_gridFaciesManager) {
            var ele = this.m_gridFaciesManager.GetCurrentCell(this.m_currentRowIndex, colIndex);
            if (ele) {
                if (this.m_gridBodyEventsHandler.GridEditHelper) {
                    var currentCellIsEditable = this.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.CellEditEnabled(colIndex, ele);
                    bT = currentCellIsEditable;
                } else {
                    bT = false;
                }
            } else {
                bT = false;
            }
        }
        if (this.MainCols[colIndex])
            if (this.MainCols[colIndex].style)
                if (this.MainCols[colIndex].style.display == "none" || (this.MainCols[colIndex].cusAttr('Edit') == "false")) {
                    bT = false;
                }
        this.m_currentRowIndex = oldCurrentRowIndex;
        return bT;
    },
    IsEndColumn: function (startIndex) {
        var columnIndex = this.m_currentColumnIndex;
        while (startIndex < this.m_columns) {
            if (this.IsNeedSwitchTabPage(startIndex)) {
                break;
            } //yangkuna_20100613_个性化扩展列需模拟切页签时直接返回
            if (this.MainCols[startIndex])
                if (this.MainCols[startIndex].style.display == "none" || (!this.AllowEdit(startIndex))) {
                    startIndex = startIndex + 1;
                } else {
                    break;
                }
        }
        this.m_currentColumnIndex = columnIndex;
        if (startIndex == this.m_columns) {
            return true;
        } else {
            return false;
        }
    },
    GetFirstColumn: function () {
        var resultIndex = 0;
        for (var i = 1; i < this.m_columns; i++) {
            if (this.IsNeedSwitchTabPage(i)) {
                break;
            } //yangkuna_20100613_个性化扩展列需模拟切页签时直接返回
            if (this.MainCols[i].style.display == "none" || (!this.AllowEdit(i))) {
                continue;
            } else {
                resultIndex = i;
                break;
            }
        }
        return resultIndex;
    },
    GetNextColumn: function (startIndex, endIndex) {
        var resultIndex = startIndex;

        while (resultIndex < this.m_columns) {
            if (endIndex != null && resultIndex == endIndex) {
                break;
            }; //如果已经查到上行对应列终止
            if (!this.MainCols[resultIndex]) {
                break;
            }
            if (this.IsNeedSwitchTabPage(resultIndex)) {
                break;
            } //yangkuna_20100613_个性化扩展列需模拟切页签时直接返回
            if (this.MainCols[resultIndex].style.display == "none" || (!this.AllowEdit(resultIndex))) {
                resultIndex = resultIndex + 1;
            } else {
                break;
            }
        }
        if (resultIndex == this.m_columns) resultIndex = startIndex - 1;
        return resultIndex;
    },
    GetPreviousColumn: function (startIndex) {
        var resultIndex = startIndex;
        while (resultIndex > 0) {
            if (!this.MainCols[resultIndex]) {
                break;
            }
            if (this.IsNeedSwitchTabPage(resultIndex)) {
                break;
            } //yangkuna_20100613_个性化扩展列需模拟切页签时直接返回
            if (this.MainCols[resultIndex].style.display == "none" || (!this.AllowEdit(resultIndex))) {
                resultIndex = resultIndex - 1;
            } else {
                break;
            }
        }
        if (resultIndex == 0) resultIndex = startIndex + 1;
        return resultIndex;
    },

    SetHeadCheckBoxState: function (checked) {
        if (this._element.cusAttr('SelectModel') != "mulitline") //如果不是多选不处理
            return;

        var chk = true;
        if (checked != null)
            chk = checked;
        if (!chk) {
            if (this.D_Head.children[0].cells[0].children[0])
                this.D_Head.children[0].cells[0].children[0].checked = false;
            //当行的选中状态变为false时，把所有页选中标记置为false
            if (this.m_pageBreakManagerInstance && this.m_pageBreakManagerInstance.chk)
                this.m_pageBreakManagerInstance.chk.checked = false;
        }
        try {
            var selAll = true;
            for (var i = 0; i < this.D_Body.rows.length; i++) {
                if (!this.D_Body.children[i].cells[0].children[0].checked) {
                    selAll = false;
                    break;
                }
            }
            this.D_Head.children[0].cells[0].children[0].checked = selAll;
        } catch (e) { }
    },

    SetTotalValue: function (fieldName, value) {
        if (this.D_Foot != this.UNDEFINED_VALUE) {
            var colIndex = this.GetColumnIndex(fieldName);
            if (colIndex < 0) { //找不到对应的列，退出
                return;
            }
            var cell = this.getFootOriginalRow().cells[colIndex];
            if (!cell) { //找不到单元格，退出
                return;
            }
            var numValue = this.m_formatHelper.FormatTotalNumber(colIndex, value);
            cell.cusAttr('Value', numValue.Value);
            if (cell.children.length > 0) {
                //cell.children[0].innerHTML = this.GetNumberFormatedValue4TotalValue(value,colIndex);
                cell.children[0].innerHTML = numValue.Text;
            } else {
                //cell.innerHTML = this.GetNumberFormatedValue4TotalValue(value,colIndex);
                cell.innerHTML = numValue.Text;
            }
        }
    },
    GetTotalValue: function (fieldName) {
        if (this.D_Foot != this.UNDEFINED_VALUE) {
            var colIndex = this.GetColumnIndex(fieldName);
            if (colIndex < 0) { //找不到对应的列，退出
                return 0.0;
            }
            var cell = this.getFootOriginalRow().cells[colIndex];
            if (!cell) { //找不到单元格，退出
                return 0.0;
            }
            if (cell.cusAttr('Value')) {
                return cell.cusAttr('Value');
            } else {
                if (cell.innerText.replace(/[^-.\d]/g, '') != "")
                    return parseFloat(cell.innerText.replace(/[^-.\d]/g, ''));
            }
        }
        return 0.0;
    },
    OnGotoErrorRecordClick: function (rcdID) {
        var fldID;
        var isCurrentPage = false;
        for (var i = 0; i < this.m_rows; i++) {
            fldID = this.GetCellValueByFieldAndRow("ID", i).Value;
            if (rcdID == fldID) {
                isCurrentPage = true;
                this.m_currentRowIndex = i;
                this.m_gridFaciesManager.SetSelectedRow(i);
                this.m_gridFaciesManager.ShowCellByScrollLayout(i, this.m_currentColumnIndex);
                break;
            }
        }

        if (!isCurrentPage) {
            //如果不在当前页，在服务端定位到行
            //准备参数
            this.eventNode = this.dataDom.createElement("Event");
            this.eventNode.setAttribute("Style", "GotoErrorRecord");
            this.eventNode.setAttribute("ErrorRecordID", rcdID);
            //触发postback
            eval(this._element.cusAttr('onfireevents'));
        }
    },

    OnCustomFilterClick: function (action, currentRecordID) {
        if (this.m_rows < 2)
            return;

        if (action == "BuildFilter") {
            this.eventNode = this.dataDom.createElement("Event");
            this.eventNode.setAttribute("Style", "CustomFilter");
            this.eventNode.setAttribute("StartRowIndex", "0");
            this.eventNode.setAttribute("ActionTag", "None");
            this.StoreState("P");
            this.GridIsInFocus = true;

            eval(this._element.cusAttr('onfireevents'));
            return;
        }
        //if(typeof(this.$element.attr('CustomFilter'))!="undefined")
        {
            if (action == "select" || action == "unselect") {
                this.SelectMarkedRecord(action == "select");
                return;
            }
            if (action != "SetFilter") {
                if (this.m_gridBodyEventsHandler.CanEndEdit(false)) {
                    var oldRowIndex = this.m_currentRowIndex;
                    if (this.GetNextMarkedRecord(action) == true) {
                        this.m_lastRowIndex = oldRowIndex;
                        this.OnRowChanged();
                        this.Focus(true); //筛选出数据直接焦点定位过去，所以改为true
                        return;
                    }
                }
            }

            this.eventNode = this.dataDom.createElement("Event");
            this.eventNode.setAttribute("Style", "CustomFilter");
            var startRowIndex = 0;
            if (this.m_currentRowIndex >= 0) {
                startRowIndex = this.GetCellValueByFieldAndRow("ID", this.m_currentRowIndex).Value;
            }
            if (startRowIndex == "") startRowIndex = "0";
            this.eventNode.setAttribute("StartRowIndex", startRowIndex);
            this.eventNode.setAttribute("ActionTag", action);
            this.StoreState("P");
            this.GridIsInFocus = true;

            eval(this._element.cusAttr('onfireevents'));
        }
    },

    SelectMarkedRecord: function (isselect) {
        var oldCurrentIndex = this.m_currentRowIndex;
        for (var i = 0; i < this.m_rows; i++) {
            if (this.D_Body.rows[i].cusAttr('Marked') == "true") {
                this.m_currentRowIndex = i;
                this.SetRowChecked(i, isselect, true);
            }
        }
        this.m_currentRowIndex = oldCurrentIndex;
    },

    GetNextMarkedRecord: function (action) {
        if (action == "Next") {
            for (var i = this.m_currentRowIndex + 1; i < this.m_rows; i++) {
                if (this.D_Body.rows[i].cusAttr('Marked') == "true") {
                    this.m_currentRowIndex = i;
                    this.m_gridFaciesManager.SetSelectedRow(i);
                    this.m_gridFaciesManager.ShowCellByScrollLayout(i, this.m_currentColumnIndex);
                    return true;
                }
            }
            //////            if(parseInt(this.get_PageCount(),10) == parseInt(this.get_PageIndex(),10) + 1){
            //////                return true;
            //////            }
        } else if (action == "Previous") {
            for (var i = this.m_currentRowIndex - 1; i >= 0; i--) {
                if (this.D_Body.rows[i].cusAttr('Marked') == "true") {
                    this.m_currentRowIndex = i;
                    this.m_gridFaciesManager.SetSelectedRow(i);
                    this.m_gridFaciesManager.ShowCellByScrollLayout(i, this.m_currentColumnIndex);
                    return true;
                }
            }
            //////            if(parseInt(this.get_PageIndex(),10) == 0 ){
            //////                return true;
            //////            }
        } else if (action == "First") {
            //////            if(parseInt(this.get_PageIndex(),10) == 0 ){
            //////                for(var i = 0;i<this.m_rows;i++){
            //////                    if(this.D_Body.rows[i].Marked){
            //////                        this.m_currentRowIndex = i;
            //////                        this.m_gridFaciesManager.SetSelectedRow(i);
            //////                        this.m_gridFaciesManager.ShowCellByScrollLayout(i,this.m_currentColumnIndex);
            //////                        return true;
            //////                    }
            //////                }
            //////            }
        } else if (action == "Last") {
            //////            if(parseInt(this.get_PageCount(),10) == parseInt(this.get_PageIndex(),10) + 1){
            //////                for(var i = this.m_rows - 1;i>=0;i--){
            //////                    if(this.D_Body.rows[i].Marked){
            //////                        this.m_currentRowIndex = i;
            //////                        this.m_gridFaciesManager.SetSelectedRow(i);
            //////                        this.m_gridFaciesManager.ShowCellByScrollLayout(i,this.m_currentColumnIndex);
            //////                        return true;
            //////                    }
            //////                }
            //////            }
        }
        return false;
    },
    IsRowSelected: function (row) {
        if (typeof (row) != "object") {
            row = this.D_Body.rows[parseInt(row, 10)];
        }
        if (row && row.cells && row.cells.length > 0 && row.cells[0].children.length > 0 && row.cells[0].children[0].type == "checkbox") {
            return row.cells[0].children[0].checked;
        }
        return false;
    },

    SetDefaultValue4P: function (rowIndex, exceptColIndex) {
        if (typeof (exceptColIndex) == "undefined") {
            exceptColIndex = -1;
        }
        var oldColumnIndex = this.m_currentColumnIndex;
        var jsCount = 0;
        for (var i = 0; i < this.m_DefaultValueColumnsOrder.length; i++) {
            var colIndex = this.GetColumnIndex(this.m_DefaultValueColumnsOrder[i]);
            if (exceptColIndex == colIndex) {
                continue;
            }
            if (colIndex < 1)
                continue;
            //先检查最后值列表中是否存在
            if (this.IsInDefaultValueColumnsLastValue(this.m_DefaultValueColumnsOrder[i])) {
                if (rowIndex < 1)
                    continue;
                var cellValue = this.GetCellValue((rowIndex - 1), colIndex);
                if (jsCount == 0) {
                    _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').EndEdit();");
                }
                //var js = "$SetGridCellValue('" + this.get_id() + "'," + rowIndex + "," + colIndex + ",'" + cellValue.Value + "','" + cellValue.Code + "','" + cellValue.Text + "',null,null,0,true)";
                var js = "$SetGridCellValue('" + this.get_id() + "'," + "$find(\"" + this.get_id() + "\").m_rows > " + rowIndex + " ?  " + rowIndex + " : '$find(\"" + this.get_id() + "\").GetLastRealRowIndex()'" + "," + colIndex + ",'" + cellValue.Value + "','" + cellValue.Code + "','" + cellValue.Text + "',null,null,0,true)";

                _ClientJSExecQueueManager.Push(js);
                jsCount++;
            } else { //如果没有最后值，则认为是固定默认值
                var value4P = this.GetColumnDefaultValue4P(colIndex);
                if (jsCount == 0) {
                    _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').EndEdit();");
                }
                if (this.GetColumnType(colIndex) == ControlType.RefControl) {
                    _ClientJSExecQueueManager.Push("$SetGridCellValue('" + this.get_id() + "'," + rowIndex + "," + colIndex + ",'" + value4P.replace(/__&URS2&_/g, "','") + "',null,null,0,true)");
                } else {
                    _ClientJSExecQueueManager.Push("$SetGridCellValue('" + this.get_id() + "'," + rowIndex + "," + colIndex + ",'" + value4P + "',null,null,null,null,0,true)");
                }

                jsCount++;
            }
        }
        if (jsCount > 0) {
            _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').EndEdit();");
            _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').m_currentColumnIndex = " + oldColumnIndex + ";$find('" + this.get_id() + "').Focus();");
            _ClientJSExecQueueManager.Start();
        }
        return jsCount;
    },
    hasPersonalDefaultValue: function () {
        for (var i = 0; i < this.m_DefaultValueColumnsOrder.length; i++) {
            var colIndex = this.GetColumnIndex(this.m_DefaultValueColumnsOrder[i]);
            if (colIndex >= 1) {
                return true;
            }
        }
        return false;
    },

    IsInDefaultValueColumnsLastValue: function (columnName) {
        for (var i = 0; i < this.m_DefaultValueColumns.length; i++) {
            if (this.m_DefaultValueColumns[i] == columnName) {
                return true;
            }
        }
        return false;
    },
    //    SetLastDefaultValue4P : function(rowIndex){
    //        if(rowIndex < 1)
    //            return;
    //        var colIndex;
    //        var jsCount = 0;
    //        for(var i=0;i<this.m_DefaultValueColumns.length;i++){
    //             colIndex = this.GetColumnIndex(this.m_DefaultValueColumns[i]);
    //             if(colIndex < 1)
    //                continue;
    //             var cellValue = this.GetCellValue((rowIndex -1),colIndex);
    //            if(jsCount == 0){
    //                _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').EndEdit();");
    //            }
    //             var js = "$SetGridCellValue('" + this.get_id() + "'," + rowIndex + "," + colIndex + ",'" + cellValue.Value + "','" + cellValue.Code + "','" + cellValue.Text + "')";
    //             _ClientJSExecQueueManager.Push(js);
    //             jsCount ++;
    //        }
    //        if(jsCount > 0){
    //            _ClientJSExecQueueManager.Push("$find('" + this.get_id() + "').Focus();");
    //            _ClientJSExecQueueManager.Start();
    //        }
    //    },

    ShowMessage: function (msg, time) {
        this.msgDiv.innerHTML = msg;
        this.msgDiv.style.display = "";
        window.setTimeout("$find('" + this.get_id() + "').HideMessage();", time);
    },
    HideMessage: function () {
        this.msgDiv.style.display = "none";
    },

    //为参照列控件设置单值
    SetRefSingleValue: function (rowIndex, fieldId, value) {
        this.EndEdit();
        var colIndex = this.GetColumnIndex(fieldId);
        if (colIndex <= 0)
            return;
        this.m_currentRowIndex = rowIndex;
        this.m_currentColumnIndex = colIndex;
        var cell = this.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(rowIndex, colIndex);
        if (cell) {
            this.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.StartCellEdit(cell);
        }
        if (cell.children[0].tagName == "SPAN") {
            var c = cell.children[0];
            var jc = c.control;
            jc.set_SingleText(value);
        } else {
            return;
        }
        if (cell) {
            this.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.EndCellEdit(cell);
        }
    },
    ShowFormReference: function (colName) {
        if (this.m_behaviorManager && this.m_behaviorManager.HeadEventsManager) {
            this.MainCols[this.GetColumnIndex(colName)].cusAttr('_showLabelFormAfterCallBack', null);
            var formReference = this.m_behaviorManager.HeadEventsManager.GetFormReference(this.m_currentFormRef, colName);
            this.m_behaviorManager.HeadEventsManager.ShowDialog(formReference, colName);
        }
    },
    AddSortColumnToList: function (FieldID, SortStyle, OldSortStyle) {
        //if(OldSortStyle == "UP" || OldSortStyle == "DOWN"){
        for (var len = this.m_SortColumns.length, i = len - 1; i >= 0; i--) {
            if (this.m_SortColumns[i] == FieldID) {
                Array.removeAt(this.m_SortColumns, i);
                break;
            }
        }
        //}
        if (SortStyle == "UP" || SortStyle == "DOWN") {
            this.m_SortColumns.push(FieldID);
        }
        if (this.m_SortColumns.length > this.m_SortColumnsLimit) {
            var fieldId = this.m_SortColumns.shift();
            var columnSchema = this.MainCols[this.GetColumnIndex(fieldId)];
            if (columnSchema) {
                columnSchema.Sorted = "";
                var cell = this.getColumnHeadCell(this.GetColumnIndex(fieldId), fieldId);
                if (cell.sortDiv)
                    cell.removeChild(cell.sortDiv);
            }
        }
    },
    ResetSortColumnNum: function () {
        if (this.m_SortColumns.length > 0) {
            for (var i = 0; i < this.m_SortColumns.length; i++) {
                var fieldId = this.m_SortColumns[i];
                var cell = this.getColumnHeadCell(this.GetColumnIndex(fieldId), fieldId);
                if (cell.sortDiv) {
                    cell.sortDiv.className = cell.sortDiv.className + "_" + (i + 1);
                    //cell.sortDiv.children[0].innerText = (i+1);
                } else { //这种情况说明不允许排序，在后台取消了该列的排序
                    Array.removeAt(this.m_SortColumns, i);
                    i--;
                }
            }
        }
    },

    GetRowIndex4BatchInput: function (colIndex, value, conditions) {
        if (colIndex < 0)
            return -1;
        for (var i = 0; i < this.D_Body.rows.length; i++) {
            if (!this.IsEqual(colIndex, this.D_Body.rows[i].cells[colIndex].cusAttr('Value').toString(), value.toString())) {
                if (this.GetRowStatus(i) == RowStatus.Empty)
                    continue;
                if (!this.AllowEdit(colIndex, i)) //不可编辑，不处理
                    continue;
                if (conditions == null) {
                    return i;
                } else {
                    if (this.CompareValue4BatchInput(i, conditions)) {
                        return i;
                    }
                }
            }
        }
        return -1;
    },

    IsEqual: function (colIndex, value, value2) {
        var ret = false;
        if (value == value2) {
            ret = true;
        } else {
            var ct = this.GetColumnType(colIndex);
            switch (ct) {
                case ControlType.Date:
                    if ((value == "" && value2 != "") || (value2 == "" && value != "")) { } else {
                        if (parseDate(value).toString() == parseDate(value2).toString())
                            ret = true;
                    }
                    break;
                case ControlType.RefControl:
                    if (value == "") {
                        value = -1;
                    }
                    if (value == value2)
                        ret = true;
                    break;
                //                case ControlType.TextBox:
                //                case ControlType.TextArea:
                //                case ControlType.MultiInput:
                //                case ControlType.Numberic:
                //                case ControlType.CheckBox:
                //                case ControlType.RefControl:
                //                case ControlType.Combox:
            }
        }
        return ret;
    },

    //wanglei:新增多条件 批量修改
    CompareValue4BatchInput: function (rowIndex, conditions) {
        if (!conditions)
            return false;
        for (var i = 0; i < conditions.length; i++) {
            var item = conditions[i];
            var result = this.CompareValue4BatchInputItem(rowIndex, item);
            if (result === false)
                return false;
        }
        return true;
    },
    CompareValue4BatchInputItem: function (rowIndex, conditions) {
        var ct, opV, conditionV1, conditionV2;
        colIndex = conditions.colIndex;
        opV = conditions.op;
        conditionV1 = conditions.V1;
        conditionV2 = conditions.V2;

        gridCellV = this.GetCellValue(rowIndex, colIndex);
        if (gridCellV) {
            if (this.MainCols[colIndex].cusAttr('ControlType') == ControlType.RefControl) {
                gridCellV = gridCellV.Code;
            } else {
                gridCellV = gridCellV.Value;
            }
        }
        if (gridCellV == "") gridCellV = "''";
        var ct = this.GetColumnType(colIndex);
        var result = false;
        var condition = "1==2";
        switch (ct) {
            case ControlType.TextBox:
            case ControlType.TextArea:
            case ControlType.RefControl:
            case ControlType.MultiInput:
                {
                    if (opV == 3) {
                        condition = "\"" + gridCellV + "\">=\"" + conditionV1 + "\" && \"" + gridCellV + "\"<=\"" + conditionV2 + "\"";
                    } else if (opV == 0) {
                        condition = "\"" + gridCellV + "\"==\"" + conditionV1 + "\"";
                    } else if (opV == 1) {
                        condition = "\"" + gridCellV + "\">\"" + conditionV1 + "\"";
                    } else if (opV == 2) {
                        condition = "\"" + gridCellV + "\"<\"" + conditionV1 + "\"";
                    } else if (opV == 4) //wanglei:add operation symbol
                    { //is null
                        condition = "\"" + gridCellV + "\"== \"''\"";
                    } else if (opV == 5) { //is not null
                        condition = "\"" + gridCellV + "\"!= \"''\"";
                    } else if (opV == 7) { // 在...之中
                        result = conditionV1.split(",").some(item => {
                            return item == gridCellV
                        })
                        break
                    }

                    result = eval(condition);
                    break;
                }
            case ControlType.Date:
                {
                    var _DateCultureName = getCultureName().toLowerCase();
                    var condiDate1 = new Date();
                    var condiDate2 = new Date();
                    var gridDate = new Date();
                    if (gridDate)
                        gridDate = Date$parseEx(gridDate, gridCellV.toString(), "G", _DateCultureName);
                    if (conditionV1)
                        condiDate1 = Date$parseEx(condiDate1, conditionV1.toString(), "G", _DateCultureName);
                    if (conditionV2)
                        condiDate2 = Date$parseEx(condiDate2, conditionV2.toString(), "G", _DateCultureName);

                    if (opV == 3) {
                        result = gridDate >= condiDate1 && gridDate <= condiDate2;
                    } else if (opV == 0) {

                        result = ((!(gridDate > condiDate1)) && (!(gridDate < condiDate1)));
                    } else if (opV == 1) {
                        result = gridDate > condiDate1;
                    } else if (opV == 2) {
                        result = gridDate < condiDate1;
                    }
                    if (opV == 4) //wanglei:add operation symbol
                    { //is null
                        condition = "\"" + gridCellV + "\"== \"''\"";
                        result = eval(condition);
                    } else if (opV == 5) { //is not null
                        condition = "\"" + gridCellV + "\"!= \"''\"";
                        result = eval(condition);
                    }
                    break;
                }
            case ControlType.Numberic:
            case ControlType.CheckBox:
            case ControlType.Combox:
                {
                    if (opV == 3) {
                        condition = gridCellV + ">=" + conditionV1 + " && " + gridCellV + "<=" + conditionV2;
                    } else if (opV == 0) {
                        condition = gridCellV + "==" + conditionV1;
                    } else if (opV == 1) {
                        condition = gridCellV + ">" + conditionV1;
                    } else if (opV == 2) {
                        condition = gridCellV + "<" + conditionV1;
                    }
                    //wanglei:add operation symbol
                    if (opV == 4 && ct == ControlType.Numberic) { //is null
                        condition = "\"" + gridCellV + "\"== \"0\"";
                    } else if (opV == 5 && ct == ControlType.Numberic) { //is not null
                        condition = "\"" + gridCellV + "\"!= \"0\"";
                    } else if (opV == 4 && ct == ControlType.Combox) {
                        condition = "\"" + gridCellV + "\"== \"-1\"";
                    } else if (opV == 5 && ct == ControlType.Combox) {
                        condition = "\"" + gridCellV + "\"!= \"-1\"";
                    } else if (opV == 4 && ct == ControlType.CheckBox) {
                        condition = "\"" + gridCellV + "\"== \"''\"";
                    } else if (opV == 5 && ct == ControlType.CheckBox) {
                        condition = "\"" + gridCellV + "\"!= \"''\"";
                    }
                    result = eval(condition);
                    break;
                }
        }
        return result;
    },
    get_Type: function () {
        return ControlType.DataGrid;
    },

    /*按照点选顺序返回记录相关 Add 20100423 lzhm*/
    get_IsSortSelectRecords: function () {
        if (this.m_IsSortSelectRecords == null)
            this.m_IsSortSelectRecords = false;
        return this.m_IsSortSelectRecords;
    },
    set_IsSortSelectRecords: function (value) {
        if (value == true)
            value = true;
        else
            value = false;
        this.m_IsSortSelectRecords = value;
    },
    SortedSelectIDs_Add: function (ID) {
        this.SortedSelectIDs_Remove(ID);
        this.m_SortedSelectIDs.push(ID);
        return this.m_SortedSelectIDs.toString();
    },
    SortedSelectIDs_Remove: function (ID) {
        for (var i = 0; i < this.m_SortedSelectIDs.length; i++) {
            if (this.m_SortedSelectIDs[i] == ID) {
                this.m_SortedSelectIDs.splice(i, 1);
                break;
            }
        }
        return this.m_SortedSelectIDs.toString();
    },
    UnSelectIDs_Add: function (ID) {
        this.UnSelectIDs_Remove(ID);
        this.m_UnSelectIDs.push(ID);
        return this.m_UnSelectIDs.toString();
    },
    UnSelectIDs_Remove: function (ID) {
        for (var i = 0; i < this.m_UnSelectIDs.length; i++) {
            if (this.m_UnSelectIDs[i] == ID) {
                this.m_UnSelectIDs.splice(i, 1);
                break;
            }
        }
        return this.m_UnSelectIDs.toString();
    },

    //获取 表格 原始合计行 对象
    getFootOriginalRow: function () {
        if (this.D_Foot !== undefined &&
            this.D_Foot.rows[0] !== undefined &&
            this.D_Foot.rows[0].cusAttr(this.sumRowFlag) &&
            this.D_Foot.rows[0].cusAttr(this.sumRowFlag).toString().toLowerCase() === "true") {
            return this.D_Foot.rows[0];
        }
        if (this.D_Foot !== undefined &&
            this.D_Foot.rows[1] !== undefined &&
            this.D_Foot.rows[1].cusAttr(this.sumRowFlag) &&
            this.D_Foot.rows[1].cusAttr(this.sumRowFlag).toString().toLowerCase() === "true") {
            return this.D_Foot.rows[1];
        }
    },

    //获取 表格 新增合计行 对象
    getFootNewRow: function () {
        if (this.D_Foot !== undefined &&
            this.D_Foot.rows[0] !== undefined &&
            this.D_Foot.rows[0].cusAttr(this.newSumRowFlag) &&
            this.D_Foot.rows[0].cusAttr(this.newSumRowFlag).toString().toLowerCase() === "true") {
            return this.D_Foot.rows[0];
        }
        if (this.D_Foot !== undefined &&
            this.D_Foot.rows[1] !== undefined &&
            this.D_Foot.rows[1].cusAttr(this.newSumRowFlag) &&
            this.D_Foot.rows[1].cusAttr(this.newSumRowFlag).toString().toLowerCase() === "true") {
            return this.D_Foot.rows[1];
        }
    },
    //获取新增合计行的值.
    GetNewTotalValue: function (fieldName) {
        if (this.D_Foot != this.UNDEFINED_VALUE) {
            var colIndex = this.GetColumnIndex(fieldName);
            if (colIndex < 0) { //找不到对应的列，退出
                return 0.0;
            }
            var cell = this.getFootNewRow().cells[colIndex];
            if (!cell) { //找不到单元格，退出
                return 0.0;
            }
            if (cell.cusAttr('Value')) {
                return cell.cusAttr('Value');
            } else {
                if (cell.innerText.replace(/[^-.\d]/g, '') != "")
                    return parseFloat(cell.innerText.replace(/[^-.\d]/g, ''));
            }
        }
        return 0.0;
    },

    //获取 表格 焦点 行列信息
    getFocusInfo: function () {
        return {
            "rowIndex": this.m_currentRowIndex,
            "colIndex": this.m_currentColumnIndex
        };
    },
    //设置 表格 焦点 行列 信息
    setFocusInfo: function (cellInfo) {
        this.m_currentRowIndex = cellInfo["rowIndex"];
        this.m_currentColumnIndex = cellInfo["colIndex"];
    },

    findDisplayNameByIndex: function (index) {
        if (index == -1)
            return "";
        try {
            var name = this.MainCols[index].cusAttr("name");
        } catch (err) {
            var name = '';
        }
        var fieldId = this.GetColumnFieldID(index);
        if (this.D_Head.children.length > 1) {
            //多表头
            if (!name) {
                var j = index;
                while (index > 0 && !name) {
                    try {
                        name = this.MainCols[--j].cusAttr("name");
                    } catch (err) {
                        name = '';
                    }
                }

            }
            if (name)
                name += ","
            for (var i = 1; i < this.D_Head.children.length; i++) {
                var tr = this.D_Head.children[i];
                $.each($(tr).find("td"), function (j, item) {
                    if (item.cusAttr("fieldid") == fieldId) {
                        name += $(item).text() + ","
                    }
                })
            }
            if (name && name.lastIndexOf(",") == name.length - 1)
                name = name.substring(0, name.length - 1);
        }
        return name || "";
    },
    to_Help: function (index, func) {
        var _this = this;
        var showFlag = false;
        var tdList = $(this.D_Body).find("tr").eq(0).find("td");
        if (tdList.length == 0 && this.D_Head.children.length == 1) {
            var tr = this.D_Head.children[0];
            tdList = $(tr).find("td");
        }
        if (tdList.length > 0) {
            //如果有内容行，或者是单表头，则直接循环td向里面增加遮罩层
            tdList = $(this.D_Head).find("td") || $(this.D_Head).find("th");
            $.each(tdList, function (i, item) {
                if ($(item).css("display") != "none") {
                    var name = _this.findDisplayNameByIndex(i);
                    var width = $(item).width();
                    var height = $(item).parents('table').height();
                    if (name)
                        $(item).append("<div class='fieldBg' forid='" + _this._element.id + "' fieldname='" + name + "' z-index='" + index + "' style='width:" + width + "px;height:" + height + "px;'></div>")
                    else {
                        $(item).append("<div  class='fieldBg' z-index='" + index + "' style='width:" + width + "px;height:" + height + "px;'></div>");
                    }
                    $(item).addClass("fieldBg_holder");
                }
            })
        }
        else {//多表头而且表体没有内容
            var history = {};
            for (var i = this.D_Head.children.length - 1; i >= 0; i--) {
                var tr = this.D_Head.children[i];
                $.each($(tr).find("td"), function (i, item) {
                    if ($(item).css("display") != "none") {
                        var index = _this.GetColumnIndex(item.cusAttr("fieldid"));
                        var name = _this.findDisplayNameByIndex(index);
                        //因为有可能Col定义里，列name字段为空，而表头列又显示出了表头
                        //这时候上面方法找的name是上一列的，和这一列一点儿意义也没有，所以这里面判断
                        //如果td中有内容，并且查找的内容不包含td中的内容，则以当前td的内容为查找项
                        if ($(item).text() != "" && name.indexOf($(item).text()) == -1)
                            name = $(item).text();
                        if (item.cusAttr("fieldid") && history[item.cusAttr("fieldid")] !== true && name) {
                            $(item).append("<div class='fieldBg' forid='" + _this._element.id + "' fieldname='" + name + "' z-index='" + index + "' style='width:" + $(item).width() + "px'></div>")
                            history[item.cusAttr("fieldid")] = true;
                        } else if (history[item.cusAttr("fieldid")] != true) {
                            $(item).append("<div  class='fieldBg' z-index='" + index + "' style='width:" + $(item).width() + "px'></div>");
                        }
                    }
                })
            }
        }
        this.m_pageBreakManagerInstance.to_Help(index, func);
        //if (showFlag) {
        //    $(_this._element).after("<div class='controlBg1' z-index='" + index + "'></div>");
        //}
        // $("body").append("<div  style='left:" + $(this._element).position().left + ";top:" + $(this._element).position().top + ";position:absolute;width:" + $(this._element).width() + ";height:" + $(this._element).height() + "' forid='" + this._element.id + "' z-index='99999999999999999999'></div>")
        if (func)
            $("[forid='" + this._element.id + "']").click(function (e) {
                func($(e.target).attr("fieldname"), $(e.target).attr("forid"))
                e.preventDefault();
                e.stopPropagation();
            });
    },
    to_Translate: function (index, func) {
        var _this = this;
        var showFlag = false;
        var tdList = $(this.S_Body).find("tr").find("td");
        if (tdList.length > 0) {
            $.each(tdList, function (i, item) {
                if ($(item).css("display") != "none") {
                    var self = this;
                    //var width = $(item).width();
                    // var height = $(item).height();
                    var id = self.cusAttr("fieldid");
                    $(item).css({ "position": "relative" });
                    if (id && id.indexOf("DescFlexField_") == -1)
                        $(item).append("<div class='fieldTranslateBg' forid='" + id + "' fieldname='" + name + "' z-index='" + index + "'></div>")
                    else {
                        $(item).append("<div class='fieldTranslateBg disabled' z-index='" + index + "'></div>");
                        $(item).unbind("click dblclick");
                        $(item).on('click dblclick', function (e) {
                            if ($(item).hasClass("fieldTranslateBg_holder")) {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        });
                    }
                    $(item).addClass("fieldTranslateBg_holder");
                    if (func) {
                        $("[forid='" + id + "']").unbind("click").bind('click', function (e) {
                            e.preventDefault();
                            e.stopPropagation();
                            func(id, id);
                        });
                    }
                }
            })
        }
        this.m_pageBreakManagerInstance.to_Help(index, func);


    },
    set_translateName: function (dom, currentName) {
        var holder = dom.parent(".fieldTranslateBg_holder");
        $(holder).each(function () {
            $($(this).find("nobr")[0]).html(currentName);
        });

    },
    to_Defualt: function () {
        if ($(this._element).find(".fieldBg").length > 0) {
            $(this._element).find(".fieldBg").remove();
            var fieldBg_holder = $(this._element).find(".fieldBg_holder");
            if (fieldBg_holder) {
                fieldBg_holder.removeClass("fieldBg_holder");
            }
        }
        if ($(this._element).find(".fieldTranslateBg").length > 0) {
            $(this._element).find(".fieldTranslateBg").remove();
            var fieldBg_holder = $(this._element).find(".fieldTranslateBg_holder");
            if (fieldBg_holder) {
                fieldBg_holder.removeClass("fieldTranslateBg_holder").css("position", "static");;
            }
        }
        this.m_pageBreakManagerInstance.to_Defualt();
    }
    /**/
}

UF.UI.DataGrid.registerClass('UF.UI.DataGrid', UF.UI.Control);

//DataGrid控件事件名称常量定义-->
function DataGridEvent() { }
DataGridEvent.OnBodyRowSelectedChange = "OnBodyRowSelectedChange";
DataGridEvent.OnBodyRowSelectedValueChange = "OnBodyRowSelectedValueChange";
DataGridEvent.OnBodyRowSelected = "OnBodyRowSelected";
DataGridEvent.OnBeforeRowInsert = "OnBeforeRowInsert";
DataGridEvent.OnBeforeRowDelete = "OnBeforeRowDelete";

DataGridEvent.OnAfterRowInserted = "OnAfterRowInserted";
DataGridEvent.OnAfterRowDeleted = "OnAfterRowDeleted";
DataGridEvent.OnCellFocusEnter = "OnCellFocusEnter";
DataGridEvent.OnCellFocusOut = "OnCellFocusOut";

DataGridEvent.OnCellClick = "OnCellClick";
DataGridEvent.OnCellDbClick = "OnCellDbClick";
DataGridEvent.OnRowChanged = "OnRowChanged";
DataGridEvent.OnRowClick = "OnRowClick";

DataGridEvent.OnMovePage = "OnMovePage";
DataGridEvent.OnSortData = "OnSortData";
DataGridEvent.Onkeypress = "Onkeypress";
DataGridEvent.OnBeforeOpenDialog = "OnBeforeOpenDialog";
DataGridEvent.OnAfterOpenDialog = "OnAfterOpenDialog";

DataGridEvent.OnBeforeCustomerPostBack = "OnBeforeCustomerPostBack";

DataGridEvent.OnAfterRowAdded = "OnAfterRowAdded";
DataGridEvent.OnBeforeCellFocusEnter = "OnBeforeCellFocusEnter";
DataGridEvent.OnCellDataChanged = "OnCellDataChanged";
DataGridEvent.OnCellDataValueChanged = "OnCellDataValueChanged";
DataGridEvent.OnAfterRowCopyed = "OnAfterRowCopyed";
DataGridEvent.OnBeforeRowCopy = "OnBeforeRowCopy";

DataGridEvent.OnRowContentChanged4P = "OnRowContentChanged4P"; //gct20091104：为了支持个性化参照携带而增加（个性化的参照携带在固有事件逻辑之后）

DataGridEvent.OnBeforeRowAdd = "OnBeforeRowAdd";
DataGridEvent.OnSelectAllRecords = "OnSelectAllRecords";
DataGridEvent.OnControlValueChange = "OnControlValueChange";

DataGridEvent.OnSelecteAllPage = "OnSelecteAllPage";
DataGridEvent.OnBatchModify = "OnBatchModify"; //yangkuna20100919:批量修改事件
DataGridEvent.OnAfterRowCopyed4Default = "OnAfterRowCopyed4Default"; //yangkuna20100701:复制行默认事件，系统内部使用
DataGridEvent.OnImitateSwitchTabPage = "OnImitateSwitchTabPage"; //yangkuna20100719:模拟切页签CallBack事件，系统内部使用


$SetGridCellValue = function (grid, rowIndex, colIndex, key, value, text, needValidate, sender, type, loseFocus) {
    if (sender == "Run4P") //gct20090625:页面加载完毕后，个性化代码中赋值不跑，只跑赋状态的JS代码
        return;
    if (false) { //检查CallBack，PostBack执行情况
        return;
    }
    //统一处理错误提示是默认值还是关联设计    
    var msgType = type;
    //added by u9lkc 20100326
    //增加错误类型
    //0:默认值   1:关联设计  2:批量修改
    if (msgType != 0 && msgType != 2) {
        msgType = 1; //约定：如果不是默认值触发或者批量修改，则都认为是关联设计触发的。
    }

    if ($find(grid)) {
        var gridCtrl = $find(grid);
        try {
            if (sender && sender.fromPersonal) {
                window.top.diagnosticVue && window.top.diagnosticVue.pushLogItem({
                    "type": "Personalize",
                    "time": new Date().format("yyyy-MM-dd HH:mm:ss"),
                    "message": "个性化导致的Grid单元格赋值，控件ID：" + grid + "；行Index：" + rowIndex + "；列Index：" + colIndex + "；FieldId：" + gridCtrl.MainCols[colIndex].cusAttr('FieldId') + "；key：" + key + "；value：" + value + "；text：" + text,
                    "threadId": 999
                })
            }
        } catch (e) { console.log(e) }
        var oldColIndex = gridCtrl.m_currentColumnIndex;
        var oldRowIndex = gridCtrl.m_currentRowIndex;
        pRowIndex = rowIndex; //保留参数原始值

        if (isNaN(pRowIndex) == true)
            rowIndex = eval(rowIndex);

        if (rowIndex === undefined)
            rowIndex = oldRowIndex;
        // 针对个性化关联赋值、关联计算会传DateTime格式数据，转成字符串下形式 如'2020-02-22 10:00:00'
        if (key instanceof Date) {
            key = this.getDateToString(key)
        }

        if (!value) {
            value = key;
        }
        if (!text) {
            text = key;
        }
        if (value instanceof Date) {
            value = this.getDateToString(value)
        }
        if (text instanceof Date) {
            text = this.getDateToString(text)
        }
        key = typeof (key) == "string" ? key.replace("&apos;", "\'").replace("&quot;", "\"") : key;
        value = value.replace("&apos;", "\'").replace("&quot;", "\"");
        text = text.replace("&apos;", "\'").replace("&quot;", "\"");
        //数字控件,如果传来Nan值，不处理
        if (gridCtrl.GetColumnType(colIndex) == ControlType.Numberic) {
            if (isNaN(key)) {
                return;
            }
        }
        gridCtrl.m_currentColumnIndex = colIndex;
        gridCtrl.m_currentRowIndex = rowIndex;
        //不可编辑的单元格，不可以进行模拟录入
        if (gridCtrl.IsNeedSwitchTabPage(colIndex, rowIndex)) {
            if (!window.IsGridInImitateSwitchTabPage && !_ClientCallBackManager.Runing) {
                gridCtrl.ImitateSwitchTabPage(true);
            }
            var tmpJS = "$SetGridCellValue('" + grid + "','" + pRowIndex + "','" + colIndex + "','" + key + "','" + value + "','" + text + "'," + needValidate + ",null," + msgType + (loseFocus ? ",true" : "") + ");";
            _ClientJSExecQueueManager.AddToFirstQuery(tmpJS);
            _ClientJSExecQueueManager.Start();
            return;
        }
        if (!gridCtrl.AllowEdit(colIndex))
            return;
        if (gridCtrl.MainCols[colIndex].cusAttr("ColEditCtrlClientID4P")) //AllowEdit()中可能引起PostBack。再给个性化列赋值的时候就会在BeforeCellFocusEnter中触发PostBack，用于发起模拟切换页签的功能。所以当前这个模拟录入过程应该在这个PostBack之后执行。
            if (_ClientPostBackManager.Runing) {
                var tmpJS = "$SetGridCellValue('" + grid + "','" + pRowIndex + "','" + colIndex + "','" + key + "','" + value + "','" + text + "'," + needValidate + ",null," + msgType + (loseFocus ? ",true" : "") + ");";
                Global_JSQueueEvalAfterPageLoadedManager.Add(tmpJS);
                return;
            } else if (_ClientCallBackManager.Runing) {
                var tmpJS = "$SetGridCellValue('" + grid + "','" + pRowIndex + "','" + colIndex + "','" + key + "','" + value + "','" + text + "'," + needValidate + ",null," + msgType + (loseFocus ? ",true" : "") + ");";
                _ClientJSExecQueueManager.Push(tmpJS);
                return;
            }
        //含有屏蔽字符，退出
        if (isMasks(value, gridCtrl.GetColumnMaskChars(colIndex))) {
            return;
        }
        var cell = gridCtrl.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(rowIndex, colIndex);
        if (cell) {
            //$find(grid).m_gridFaciesManager.SetCurrentCellStyle(rowIndex,colIndex);
            gridCtrl.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.StartCellEdit(cell);
        }
        gridCtrl.ResetRowStates(rowIndex);
        var isNumber = false;
        var isSetControlValue = false;
        var isChanged = false;
        var jc;
        if (cell && cell.children[0].tagName == "SPAN") { // && cell.children[0].GridCltID4P

            isSetControlValue = true;
            var c = cell.children[0];
            var jc = c.control;
            var oldNeedValidate = jc._isNeedValidate;
            if (needValidate == false) {
                jc._isNeedValidate = false;
            }
            if (jc.get_Type() == ControlType.Numberic) {
                isNumber = true;
            }
            if (jc.get_Type() == ControlType.Reference) {
                if (key == "-1" || key == -1) {
                    value = text = "";
                }
            }
            //$find(grid).SetReferenceCellValue(rowIndex,colIndex,key,value,text);
            var grdItem = new Object();
            grdItem.id = grid;
            grdItem.rowIndex = rowIndex;
            grdItem.colIndex = colIndex;

            //mahx 1. 判断是否为参照控件，如果是参照控件就先把需要在弹框后执行的代码放到ZlayerCallBackArray中，在弹框后的endHanlder里执行，
            //详情参考OWS.js的ShowModalDialogForAll方法
            if (jc.get_Type() == ControlType.Reference) {
                var obj = new ZlayerCallBackItem("DoSetGridCellValueAfterSetControlValue", callBackFunc);
                window.ZlayerCallBackArray.push(obj);
            }
            $SetControlValue(c.id, (jc.get_Type() == ControlType.Reference), value, key, text, null, msgType, grdItem);
            jc._isNeedValidate = oldNeedValidate;
        } else {
            var oldCellValue = gridCtrl.GetCellValue(rowIndex, colIndex);
            if (oldCellValue != null) {
                oldCellValue = oldCellValue.Value;
            }
            if (oldCellValue != value) {
                isChanged = true;
            }
            gridCtrl.SetReferenceCellValue(rowIndex, colIndex, key, value, text);
        }

        //mahx 2. 判断参照控件是否弹出了弹出框，如果有弹出框，则默认1的行为，如果没有弹出框则在这里执行callBackFunc方法。
        if (jc && jc.get_Type() == ControlType.Reference && !jc._IsDialogOpenning) {
            for (var i = 0; i < window.ZlayerCallBackArray.length; i++) {
                if (window.ZlayerCallBackArray[i].key == "DoSetGridCellValueAfterSetControlValue") {
                    window.ZlayerCallBackArray.splice(i, 1);
                    break;
                }
            }
            callBackFunc();
        }
        else if (!jc || jc.get_Type() != ControlType.Reference) {// 3.如果为非参照则立即执行callBackFunc方法
            callBackFunc();
        }
        //mahx 把需要在后面执行的参数封装成一个方法
        function callBackFunc() {
            if (cell) {
                if (isNumber) {
                    gridCtrl.m_gridBodyEventsHandler.GridEditHelper.CalculateHelper.columnExpressionCalculater.Calculating(colIndex, cell.parentElement);
                }
                gridCtrl.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.EndCellEdit(cell, colIndex);
                if (!isSetControlValue && isChanged) {
                    gridCtrl.FireCellChange(key, rowIndex, colIndex);
                }
            } else {
                gridCtrl.EndEdit();
            }
            if (loseFocus) { } else {
                gridCtrl.m_currentColumnIndex = oldColIndex;
                gridCtrl.m_currentRowIndex = oldRowIndex;
                // 重新赋焦点；防抖不适用，批量修改组合焦点会来回跳；
                window.setTimeout("$find('" + grid + "').StartEdit();");
            }
        }
    }
}

function getDateToString(key) {
    var year = key.getFullYear();
    var month = key.getMonth() + 1;
    var day = key.getDate();
    var hour = key.getHours();
    var minute = key.getMinutes();
    var second = key.getSeconds();

    var time = year + '-' + this.addZero(month) + '-' + this.addZero(day) + ' ' + this.addZero(hour) + ':' + this.addZero(minute) + ':' + this.addZero(second);
    return time;
}
function addZero(s) {
    return s < 10 ? ('0' + s) : s
}
/*Grid的SortMenu调用的方法*/
function GridSortMenu_Click(sortStyle, menuID) {
    var mu = $find(menuID);
    if (mu == null)
        return;
    mu.attachDisplayControl.cusAttr("cmSort", sortStyle);
    mu.attachDisplayControl.click();
}


function parseDate(str) {
    if (typeof str == 'string') {
        var results = str.match(/^ *(\d{4})-(\d{1,2})-(\d{1,2}) *$/);
        if (results && results.length > 3)
            return new Date(parseInt(results[1]), parseInt(results[2]) - 1, parseInt(results[3]));
        results = str.match(/^ *(\d{4})-(\d{1,2})-(\d{1,2}) +(\d{1,2}):(\d{1,2}):(\d{1,2}) *$/);
        if (results && results.length > 6)
            return new Date(parseInt(results[1]), parseInt(results[2]) - 1, parseInt(results[3]), parseInt(results[4]), parseInt(results[5]), parseInt(results[6]));
        results = str.match(/^ *(\d{4})-(\d{1,2})-(\d{1,2}) +(\d{1,2}):(\d{1,2}):(\d{1,2})\.(\d{1,9}) *$/);
        if (results && results.length > 7)
            return new Date(parseInt(results[1]), parseInt(results[2]) - 1, parseInt(results[3]), parseInt(results[4]), parseInt(results[5]), parseInt(results[6]), parseInt(results[7]));
    }
    return null;
}

function funRetunFalse() {
    return false;
}

///列编辑信息
ColumnEditInfo = function (fieldId, name) {
    this.DisplayName = name;
    this.FieldID = fieldId;
    this.Control = null;
    this.Enabled = true;
    this.IsInit = false;
};

//批量修改进度
GridBatchModifyProcessManager = function (owner, effectiveRowCount) {
    this._owner = owner;
    //批量修改开始前的行、列
    this.rowIndexBefore = -1;
    this.columnIndexBefore = -1;
    this.rowCount = 0;
    if (effectiveRowCount && effectiveRowCount > 0) {
        this.rowCount = effectiveRowCount;
    }
    this.processedRow = 0;
    this.isInProcessing = false;
    this.sumInfo = [];
    this.sumInfo.Keys = {};
};
GridBatchModifyProcessManager.prototype = {
    dispose: function () {
        this.rowIndexBefore = -1;
        this.columnIndexBefore = -1;
        this.rowCount = 0;
        this.processedRow = 0;
        this.isInProcessing = false;
        this.sumInfo = null;
        this._owner = null;
    },
    initialize: function () {
        this.rowIndexBefore = this._owner.m_currentRowIndex;
        this.columnIndexBefore = this._owner.m_currentColumnIndex;
        if (this.rowCount <= 0) {
            var rowCount = this._owner.D_Body.rows.length;
            if (rowCount > 0 && this._owner.GetRowStatus(rowCount - 1) == RowStatus.Empty) {
                rowCount--;
            }
            this.rowCount = rowCount;
        }
        this.isInProcessing = true;
    },
    resetAfterPost: function () {
        this.sumInfo = [];
        this.sumInfo.Keys = {};
    },
    addSumInfor: function (column, oldValue, newValue) {
        if (!this.sumInfo.Keys[column]) {
            var cInfo = {};
            cInfo.column = column;
            cInfo.oldValue = 0;
            cInfo.newValue = 0;
            this.sumInfo.push(cInfo);
            this.sumInfo.Keys[column] = this.sumInfo.length;
        }
        var index = this.sumInfo.Keys[column] - 1;
        var cInfo = this.sumInfo[index];
        cInfo.oldValue += (oldValue * 1);
        cInfo.newValue += (newValue * 1);
    },
    getProcessPosition: function () {
        var $grid = $(this._owner.get_element());
        var gridPos = $grid.offset();
        var p = {};
        p.left = gridPos.left + ($grid.width() / 2) - 50;
        p.top = gridPos.top + 50;
        return p;
    },
    setElementPos: function (element, top, left) {
        element.style.left = left + 'px';//===by zzq 增加单位;
        element.style.top = top + 'px';//===by zzq 增加单位;
    },
    createBaseProcessBar: function (bId) {
        var bar = document.createElement("span");
        bar.id = bId;
        bar.style.cssText = "position:absolute;border:1px solid #FACECF;border-radius:5px;padding:1px;width:280px;height:10px;text-align:center;font-weight:bold;color:black;cursor:wait;z-index:99;";
        var $grid = $(this._owner.get_element());
        var gridPos = $grid.offset();
        bar.style.fontSize = "22";
        return bar;
    },
    ShowProcess: function () {
        var sp = document.createElement("div");
        sp.id = "BatchModifyProcessPanel";
        sp.style.cssText = "position:absolute;margin:0px;left:0px;top:0px;opacity：0.1;filter:alpha(opacity=20);cursor:wait;z-index:99;";
        sp.style.width = document.body.offsetWidth - 15 + 'px';
        sp.style.height = document.body.offsetHeight - 15 + 'px';
        var p = this.getProcessPosition();
        var bar = this.createBaseProcessBar("BatchModifyProcessBar");
        this.setElementPos(bar, p.top, p.left);
        bar.style.textAlign = "left";
        var subBar = document.createElement("span");
        subBar.id = "BatchModifyProcessBarProc";
        subBar.style.cssText = "background:linear-gradient(to top, #EF2324 , #FC4C30);border-radius:5px;margin:0px;padding:0px;width:0px;height:100%;filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr='#76b400',EndColorStr='#3f6d00');z-index:99;display:block";
        bar.appendChild(subBar);
        this.processedRow = 0;
        var pBar = this.createBaseProcessBar("BatchModifyProcessBarText");
        pBar.style.backgroundColor = "transparent";
        pBar.style.border = "none";
        pBar.style.textAlign = "left";
        pBar.style.height = "30px";
        pBar.style.width = "50px";
        this.setElementPos(pBar, p.top - 25, p.left);
        pBar.innerText = "0/" + this.rowCount;
        var pTip = this.createBaseProcessBar("BatchModifyProcessBarTip");
        pTip.style.backgroundColor = "transparent";
        pTip.style.border = "none";
        pTip.style.textAlign = "left";
        pTip.style.fontSize = "12";
        pTip.style.color = "#333";
        pTip.style.height = "25px";
        pTip.style.width = "200px";
        this.setElementPos(pTip, p.top - 15, p.left + 85);
        pTip.innerText = ""; //"正在执行批量修改...";
        document.body.appendChild(sp);
        document.body.appendChild(bar);
        document.body.appendChild(pBar);
        document.body.appendChild(pTip);
    },
    FowardOneUnit: function () {
        this.processedRow++;
        var bar = $get("BatchModifyProcessBar");
        if (bar) {
            var subBar = $get("BatchModifyProcessBarProc");
            subBar.style.width = (this.processedRow / this.rowCount) * 280 + 'px'; // weiyin -- 添加单位
            $get("BatchModifyProcessBarText").innerText = this.processedRow + "/" + this.rowCount;
        }
    },
    OnCompleted: function () {
        if (this.sumInfo.length > 0) {
            var cInfo;
            for (var i = 0; i < this.sumInfo.length; i++) {
                cInfo = this.sumInfo[i];
                this._owner.m_gridBodyEventsHandler.GridEditHelper.CalculateHelper.aggregationCalculater.Aggregating(cInfo.column, cInfo.oldValue, cInfo.newValue);
            }
        }
        this.CloseProcess();
    },
    CloseProcess: function () {
        var pTip = $get("BatchModifyProcessBarTip");
        if (pTip) {
            pTip.parentNode.removeChild(pTip);
        }
        var subBar = $get("BatchModifyProcessBarProc");
        if (subBar) {
            subBar.parentNode.removeChild(subBar);
        }
        var pBar = $get("BatchModifyProcessBarText");
        if (pBar) {
            pBar.parentNode.removeChild(pBar);
        }
        var bar = $get("BatchModifyProcessBar");
        if (bar) {
            bar.parentNode.removeChild(bar);
        }
        var pPanel = $get("BatchModifyProcessPanel");
        if (pPanel) {
            document.body.removeChild(pPanel);
        }
    }
};
;

if (!window.top.GridInfo) window.top.GridInfo = []
FullScreenGridHelper = function() {
    this.cssWrapMaximized = "maximized-panel-wrap";
    this.cssMaximizedPanel = "maximized-panel";
    this.cssBodyMaximized = "maximized-model";
    this.cssZoomBig = "y-icon-fullScreen";
    this.cssZoomSmall = "y-icon-exit-fullScreen";
}
FullScreenGridHelper.prototype = {
    init: function() {
        //增加放大标志 //弹出层不处理
        if (!$("#out").hasClass("popLayer")) {
            this.processMaximized();
            this.cssMaximized();
            this.setReportHeight(); //postback后报表的全屏
            this.OnReportResize();//报表event
        } else if($("#out").hasClass("popLayer") && $('.report-table').length > 0){
            this.processMaximized();
            this.cssMaximized();
            this.setReportHeight(); //postback后报表的全屏
            this.setReportWidth();
            this.OnReportResize(true);//报表event
        }
    },
    //报表f11 的触发
    OnReportResize: function(isSetWidth) {
        var that = this;
        $(window).resize(function() {
            if(isSetWidth){
                that.setReportWidth();
            }
            that.setReportHeight();
        });
    },
    setReportWidth: function() {
        var reportControl=$(".report-table").eq(0).attr("id");
        if(reportControl){
            var closestTd=$("#"+reportControl).closest("td");
            if(closestTd.attr("rowspan") > 1){
                var reportControlHeight=closestTd.width() - 10 ;
            }else{
                var reportControlHeight=$("#"+reportControl).closest("tr").width() -10;
            }
            setTimeout(function() {
                $("#"+reportControl+"_ctl14").width(reportControlHeight -10);
                $("#"+reportControl+"_ctl14").parent().width(reportControlHeight - 10);
                $("#"+reportControl).width(reportControlHeight);
            }, 0);
        }
    },
    setReportHeight: function() {
         var reportControl=$(".report-table").eq(0).attr("id");
         if(reportControl){
             var closestTd=$("#"+reportControl).closest("td");
             if(closestTd.attr("rowspan") > 1){
                 var reportControlHeight=closestTd.height() - 10;
             }else{
                var reportControlHeight=$("#"+reportControl).closest("tr").height() - 10;
             }
             setTimeout(function() {
               $("#"+reportControl+"_ctl14").height(reportControlHeight - 40);
               $("#"+reportControl+"_ctl14").parent().height(reportControlHeight - 40);
               $("#"+reportControl).height(reportControlHeight);
             }, 0);
         }
    },
    //人员基本信息ie11镜像
    settleMirror:function(){
            $(".zoomBig").parent().css("position","static");
            var timers=0;
            clearTimeout(timers);
            timers=setTimeout(function(){
               $(".zoomBig").parent().css("position","");
            },0)
    },
    //后台加
    processMaximized: function() {
        this.addFullScreenMask();
        $("." + this.cssWrapMaximized).closest(".TP").addClass("overflow-x-inherit");
    },
    //遮罩
    addFullScreenMask:function(){
            var fullScreenMask="fullScreenMask";
            if($("body").children("#"+fullScreenMask).length ==0){
                 $("body").append('<div id="'+fullScreenMask+'" class="'+fullScreenMask+'"></div>');
            }
            if($(".toolbar").length ==0 && $(".uc-toolbar-wrap").length ==0){
                $("#"+fullScreenMask).css("top","0");
            }
    },
    cssMaximized: function() {
        //得到link，相当于id，唯一标识
        var link = this.getLink();
        //得到window.top.GridInfo中相应的link信息，或者false
        var gridInfo = this.getGridInfo(link);
        //如果gridInfo存在，并且gridInfo的isFullScreen是true，
        //则说明这个grid最大化了，需要做相应的处理
        if (gridInfo && gridInfo.isFullScreen) {
            //body增加class"maximized-model"
            $("body").addClass(this.cssBodyMaximized);
            //这个grid的祖父级增加class"maximized-panel"
            $("#" + gridInfo.GridID).closest("." + this.cssWrapMaximized).parent().addClass(this.cssMaximizedPanel);
        }
    },
    //得到link，相当于id，唯一标识
    getLink: function() {
        var link = "lnk" + window.location.href.split("lnk")[1].split("nid")[0] + "nid";
        //var link = window.top.TabPanelManager.getActiveTab().id;
        return link;
    },
    cssZoomElement: function(id, FullScreenElement) {
       //相当于id，唯一标识
        //var link = this.getLink();
        //得到grid的相关信息
        var gridInfo = this.getGridInfo(this.getLink());
        //信息存在时并且是全屏，并且id相等
        this.changeCssFullScreenElement(gridInfo  && gridInfo.isFullScreen  && gridInfo.GridID == id,FullScreenElement);
    },
    changeCssFullScreenElement:function(Boole,FullScreenElement){
        var FullScreenElement=$(FullScreenElement).get(0);
        if(FullScreenElement){
            if (Boole) {
                FullScreenElement.className = "zoomBig iconfont " + this.cssZoomSmall;
                FullScreenElement.title=Sys.CultureInfo[getCultureName().toLowerCase()].Resources.Restore;
                this.settleMirror();

            } else {
                FullScreenElement.className = "zoomBig iconfont " + this.cssZoomBig;
                FullScreenElement.title=Sys.CultureInfo[getCultureName().toLowerCase()].Resources.Maximization;
                this.settleMirror();
            }
        }
    },
    //与window.top.GridInfo进行比对，如果link存在，返回window.top.GridInfo中相应的link信息，否则返回false
    getGridInfo: function(link) {
        var GridInfo = window.top.GridInfo;
        if (GridInfo && GridInfo.length > 0) {
            for (var i = 0; i < GridInfo.length; i++) {
                if (GridInfo[i].link == link) {
                    return GridInfo[i];
                } else if (i == GridInfo.length - 1) {
                    return false;
                }
            }
        } else {
            return false;
        }
    },
    setGridInfo: function(link, GridID, isFullScreen) {
        var GridInfo = window.top.GridInfo;
        if (!GridInfo || GridInfo.length == 0) {
            this.pushGridInfo(link, GridID, isFullScreen);
        } else {
            for (var i = 0; i < GridInfo.length; i++) {
                if (GridInfo[i].link == link) {
                    GridInfo[i].link = link;
                    GridInfo[i].isFullScreen = isFullScreen;
                    GridInfo[i].GridID = GridID;
                    return;
                } else if (i == GridInfo.length - 1) {
                    this.pushGridInfo(link, GridID, isFullScreen)
                }
            }
        }

    },
    pushGridInfo: function(link, GridID, isFullScreen) {
        if (!!window.top.GridInfo) {
            window.top.GridInfo.push({
                "link": link, //相当于当前页的id
                "isFullScreen": isFullScreen, //true 全屏，false非全屏
                "GridID": GridID //当前grid的ID，存在一个单多个grid的情况，但是只有一个grid是全屏的状态
            })
        }
    },
    setFullScreenClass:function(FullScreenElement,isJMF,isFullScreen){
          //改变样式
        $("body").toggleClass(this.cssBodyMaximized);
        this.changeCssFullScreenElement(isFullScreen,FullScreenElement);
        //放大标志的增加或者移除
        if (isJMF) {
            $(FullScreenElement).parent("." + this.cssWrapMaximized).parent().toggleClass(this.cssMaximizedPanel);
        } else {
            $(FullScreenElement).siblings("." + this.cssWrapMaximized).parent().toggleClass(this.cssMaximizedPanel);
        }
    },
    //放大/缩小
    onZoomElementClick: function(FullScreenElement, GridID, isJMF) {
        //是否全屏
        var isFullScreen = $(FullScreenElement).hasClass(this.cssZoomBig);
        //setGrid信息
        this.setGridInfo(this.getLink(), GridID, isFullScreen);
        this.setFullScreenClass(FullScreenElement,isJMF,isFullScreen);
        //内部元素刷新高度计算
        TdSetHeightHelper.GetInstance($(FullScreenElement).parent().parent()).afreshInit();

    }

}
FullScreenGridHelper.GetInstance = function() {
    return new FullScreenGridHelper();
}
/**************************************************************
给自适应td设置高度,chrome ie11 只处理超出，ie10全部处理 by-liyne
***************************************************************/
TdSetHeightHelper = function(selectPage, flagItemValue) {
    this.cssInherit = "inherit";
    this.cssAbsolute = "absolute";
    //自适应tr
    this.cssAutoHeightRow = "autoheight-row";
    //自适应td
    this.autoFlag = ".singlezone .autoheight-webpart";
    this.firefoxAutoFlag = ".popLayer .autoheight-webpart";
    this.cssAutoHeightCell = ".autoheight-cell:not(:hidden)";
    this.cssTableCell = ".table-col:not(:hidden)";
    this.cssNavCon = "navcon";
    this.selectTreeBorder = $(".TreeBorder");
    this.selectGridNextTable = $(".dataGridMainBody > table");
    this.cssTreeBorderParent = "TreeBorderParent";
    this.selectPage = selectPage;
    this.flagItem = "setHeightYet";
    this.flagItemValue = flagItemValue; //标志，只计算一次高度，避免重复计算
}
TdSetHeightHelper.Tools = {
    OnResize: function() {
        var that = this;
        var resizeTimer = 0;
        $(window).resize(function() {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(function() {
                TdSetHeightHelper.GetInstance().afreshInit();
            }, 90);
        });
    }
}
TdSetHeightHelper.prototype = {
    init: function() {
            if($(window.frameElement).parent().css("display")=="none") return;
            if($(window).height()==0) return;//iframe隐藏时不支持
            var userAgent = navigator.userAgent;
            //safari浏览器自适应只需处理navCon,TreeBorder
            if (userAgent.indexOf("Safari") > -1 && !(userAgent.indexOf("Chrome") > -1)) {
                if (!this.flagItemValue) {
                    this.flagItemValue = "yes"; //默认值
                }
                this.addClassForNavCon();
                this.addClassForTreeBorder();
                this.uniteTdFlagForSafari();
                //forEachTd
                this.forEachTd();

            } else {
                if (!this.flagItemValue) {
                    this.flagItemValue = "yes"; //默认值
                }
                var top = this.addPositon();
                this.addClassForNavCon();
                this.addClassForTreeBorder();
                this.processTdHeight();
                this.removePositon(top);

                if($("input:hidden[name='IsStartUIAutoAdaption']").val()=='1'){
                    var that=this;
                    if($('[jmfick]').length>0){
                        that.autoWidth_JMF();
                    }else{
                        that.autoWidth_dataGrid();
                    }
                }
            }
    },
    afreshInit: function() {
        if($(window.frameElement).parent().css("display")=="none") return;
        if($(window).height()==0)  return;
        this.removeFlag();
        this.trNeedBack();
        this.init();
    },
    //计算autotd的高度
    processTdHeight: function() { //ie11 消耗338ms 计数1
        //所有需要计算的td统一标识
        this.uniteTdFlag();
        //forEachTd
        this.forEachTd();
    },
    autoWidth_init:function(id,isJMF){
        if($(id).length > 0){
            var b_tables = $(id).find('table');
            if (isJMF) {
                this.autoWidthForAllJMF(b_tables,'15%');
                var Wizard_tables=$('[jmfick="Wizard"]').find('table')
                this.autoWidthForAllJMF(Wizard_tables,'100%');
            } else {
                this.autoWidthForAllDataGrid(b_tables);
            }
        }
    },
    autoWidth_dataGrid:function(){
        var that=this;
        // 单据自适应
        // 标准销售类单据自适应
        var tabPageId=''
        var autoWidth_idArr = $('[class="nav-item selected"]', this.selectPage)
        if (autoWidth_idArr.length > 0) {
            autoWidth_idArr.each(function (i, item) {
                var str = $(item).attr('id')
                var newId = '#' + str.slice(0, -5);
                tabPageId=newId
                that.autoWidth_init(newId,false);

            })
        }

        // // //获取页面中所有id
        // that.autoWidth_init('#u_M_p0_Card');
        // //科目期初
        // that.autoWidth_init('#u_M_p0_Card2');
        // //数据结构定义
        // that.autoWidth_init('#u_M_p0_Card3');
        // //项目作业
        // that.autoWidth_init('#u_M_p0_Card4');
        // //料品成本重置
        // that.autoWidth_init('#u_M_p0_Card6');
        // //销售返还主档
        // that.autoWidth_init('#u_M_p0_Card21');
        // //料品
        // that.autoWidth_init('#u_M_p0_Card23');
        // //工程变更申请
        // that.autoWidth_init('#u_M_P1_Card2');
        // //料品数量状况
        // this.autoWidth_init('#u_M_p1_Card3');
        // //招聘计划
        // that.autoWidth_init('#u_M_p0_MainCard');
        var tabs=$('#u_M_p0_ItemMainUIForm').find('table')
        tabs.each(function(i, item){
            if(item.parentElement.cusAttr('id').indexOf('_Card')>-1){
                if(tabPageId&&$(tabPageId).find('#'+item.parentElement.cusAttr('id')).length>0){
                    return;
                }else{
                    that.autoWidth_init('#'+item.parentElement.cusAttr('id'),false);
                }
            }
        })

    },

    autoWidthForAllDataGrid:function(tabs){
        // var lableWidth=lableWidth?lableWidth:85;
        var documentWidth = $(document).width();
        if (documentWidth>1440) {
            try {
                tabs.each(function (i, item1) {
                    //获取tables中所有的thead
                    if($(item1).hasClass('autoWidthForDataGrid')){
                        return
                    }
                    if(item1.parentElement.cusAttr('ick')=='DataGrid'){
                        return
                    }
                    if($(item1.parentElement).hasClass('dataGridMainBody')){
                        return
                    }
                    var b_theads = this.children[0];
                    var b_tds = $(b_theads).find('tr td');
                    if (i == 0) {
                        b_tds.each(function (k, item3) {
                            if ($(item3).attr('gridcolumntype') == 'Value' && $(item3).attr('isfixed') && $(item3).attr('width') > 60) {
                                if($(item3).attr('width') < 300){
                                    $(item3).attr('width', '15%')
                                }
                            }
                            if (item3.cusAttr('gridcolumntype') == 'Value' && $(item3).hasClass('autowidth-col')) {
                                $(item3).replaceWith('<td width="15%" gridcolumntype="Value" isfixed="True"></td><td class="autowidth-col" width="1" gridcolumntype="Spacing" isfixed="False"></td>');
                            }
                        })
                    } else {

                        var b_tds_type = $(b_theads).find('tr td[gridcolumntype="Value"]');
                        if (b_tds_type.length > 0) {
                            b_tds_type.each(function (i, item4) {
                                if ($(item4).attr('gridcolumntype') == 'Value' && $(item4).attr('isfixed') && $(item4).attr('width') > 60) {
                                    $(item4).attr('width', '100%')
                                }
                            })
                        }
                        // if (b_tds_type.length == 1) {
                        //     $(b_tds_type[0]).attr('width', '100%');
                        // } else if (b_tds_type.length == 2) {
                        //     b_tds_type.each(function(i,item4){
                        //         if ($(item4).attr('gridcolumntype') == 'Value' && $(item4).attr('isfixed') && $(item4).attr('width') > 60) {
                        //             $(item4).attr('width', '100%')
                        //         }
                        //     })
                        // }
                    }

                    //获取tables中所有的tbody
                    var b_tbodys = $(item1).find('tbody')
                    b_tbodys.each(function (l, item4) {
                        var b_tbodys_trs = $(item4).find("tr")
                        b_tbodys_trs.each(function (m, item5) {
                            if ($(item5).attr('height') >= 19) {
                                var b_tbodys_trs_span = $(item5).find('td>span')
                                b_tbodys_trs_span.each(function (n, item6) {
                                    var unFlexSpan = $(item6).attr('ick') === 'Button' || $(item6).attr('ick') === 'FlexField' && item6.cusAttr('IsKey').toLowerCase() == "n" || $(item6).attr('ick') === 'CheckBox' || $(item6).attr('ick') === 'TextBox'&& item6.clientWidth>400
                                    if (unFlexSpan) {
                                        return
                                    }else {
                                        if (item6.clientWidth > 120) {
                                            item6.style.minWidth = ""
                                            // item6.style.maxWidth = '300px';
                                        } else {
                                            item6.style.minWidth = item6.style.width;
                                        }
                                        // item6.style.minWidth = item6.style.width;
                                        item6.style.width = "90%";
                                        if ($(item6).find(":first-child").attr('type') != "checkbox") {
                                            if ($(item6).children().length > 0 && item6.firstChild) {
                                                if (item6.firstChild.localName == 'textarea') {
                                                    item6.firstChild.style.width = "98% !important"
                                                } else {
                                                    item6.firstChild.style.width = "100%"
                                                }
                                            }
                                        }
                                    }
                                })
                            }
                        })
                    })
                })
            } catch (error) {
                console.log(error);
            }
        }
    },
    autoWidth_JMF:function(){
        var that=this;
        $('.uc-tabbody').find('div')
        var tabs=$('.uc-tabbody').find('div');
        if (tabs.length > 0) {
            tabs.each(function (i, item) {
                var str = $(item).attr('id')
                var newId = '#' + str;
                that.autoWidth_init(newId,true);

            })
        }
        this.autoWidth_init('#u_M_p0_Card1',true);
        this.autoWidth_init('#u_M_p0_Card2',true);
        this.autoWidth_init('#u_M_p0_Card3',true);
        this.autoWidth_init('#u_M_p0_Card4',true);
    },
    autoWidthForAllJMF:function(tabs,val){
        var documentWidth = $(document).width();
        if (documentWidth > 1440) {
            try {
                tabs.each(function (i, item1) {
                    //获取tables中所有的thead
                    var b_colgroup = this.children[0];
                    var b_col = $(this.children[0]).find('col');
                        b_col.each(function (k, item2) {
                            if($(item2).width()>900){
                                var flexFatherBox = 100 - parseInt(b_colgroup.lastElementChild.width) + '%'
                                $(b_colgroup.firstElementChild).attr('width', flexFatherBox)
                            }else{
                                if ($(item2).attr('gridcolumntype')=='Value'&& $(item2).attr('width') > 60) {
                                    $(item2).attr('width', val)
                                }
                            }
                        })
                    // }
                })
            } catch (error) {
                console.log(error);
            }
        }
    },
    //内容超出时计算精确
    addPositon: function() { //ie11消耗时间1ms 计数1 样本：标准销售
        var scroll_top = $(".dataGridMainBody").length>0?$(".dataGridMainBody").scrollTop():0;//记录当前页签滚动条位置
        //解决薪资计算--高度计算，不能实时更新
        $('[ick="DataGrid"]').addClass("inherit").parent("td").addClass("needSetHeight");

        this.selectTreeBorder.addClass(this.cssAbsolute);
        this.selectGridNextTable.addClass(this.cssAbsolute);
        $(".treeBorder").addClass(this.cssAbsolute);
        $(".CDataGrid").addClass(this.cssAbsolute);
        return scroll_top;
    },
    //还原
    removePositon: function(top) { //ie11消耗时间23ms 计数1
        this.selectTreeBorder.removeClass(this.cssAbsolute);
        this.selectGridNextTable.removeClass(this.cssAbsolute);
        $(".treeBorder").removeClass(this.cssAbsolute);
        $(".CDataGrid").removeClass(this.cssAbsolute);
        //zhaoliann_问题号：201810080240
        if($(".dataGridMainBody").length>0){
            $(".dataGridMainBody").scrollTop(top);
        }
        //界面权限-字段权限头部显示异常
        $(".TP .main_Span:not(:hidden)").scrollTop(0);
    },
    addClassForNavCon: function() { //ie11消耗时间1ms
        /*if(this.selectPage){
          $(".tPn",this.selectPage).addClass("autoheight-tPn");
          $(".tPnl",this.selectPage).addClass("autoheight");
          $(".tPnl",this.selectPage).css("height","");
        }*/
        //navcon自适应 .singlezone .autoheight-webpart .autoheight-tPn > .autoheight  特殊
        //navcon自适应 .toppanelCardCon 特殊
        var navCon = this.autoFlag + " .autoheight-tPn > .autoheight,.tPn .tPnl,.toppanelCardCon";
        $(navCon).addClass(this.cssNavCon);
    },
    addClassForTreeBorder: function() { //ie11消耗时间1ms
        this.selectTreeBorder.parent().addClass(this.cssTreeBorderParent);
    },
    forEachTd: function() {
        var needSetHeightArr = $(".needSetHeight", this.selectPage);
        var j;
        for (j = 0; j < needSetHeightArr.length; j++) {
            this.ProcessEachTdHeight(needSetHeightArr[j],j);
        }
        needSetHeightArr = null;
    },
    uniteTdFlagForSafari: function() {
        //所有预计超出存到数组
        //.Wizard 工程变更
        var selectArr = ['.' + this.cssTreeBorderParent, '.' + this.cssNavCon, $(".Wizard").parent()];
        this.addClassNeedSetHeight(selectArr);
        selectArr = null;
    },
    //所有需要计算的td统一标识
    uniteTdFlag: function() {
        //两种场景，1.div 2.table
        //1.已经支持.table-col div版本所有场景
        //2.考虑到 循环td，效率太慢，处理预测超出场景
        //3.火狐浏览器弹窗自适应 .popLayer .autoheight-webpart .autoheight-cell

        //.singlezone .autoheight-webpart .autoheight-cell  加强
        //".table-col:not(:hidden)" div版本 预测超出
        //.grid-main-row>td 预测超出
        //.TreeBorder 预测超出
        //.navcon 必须计算
        //1、"td:not('.thc')[rowspan]";跨行  预测超出
        var selectAutoheightCell = $(this.getAutoheightCell(), this.selectPage); //.singlezone .autoheight-webpart .autoheight-cell:not(:hidden)
        for (var j = 0; j < selectAutoheightCell.length; j++) {
            var selectItem = $(selectAutoheightCell[j]);
            //内部只有一个div才增加
            if (selectItem.children("div").length == 1) {
                selectItem.addClass("needSetHeight");
            }
        }
        //2、所有预计超出存到数组
        var selectArr = [this.cssTableCell, ".grid-main-row>td:not(:hidden)", '.' + this.cssTreeBorderParent, '.' + this.cssNavCon, "td:not('.thc'):not(:hidden)[rowspan]"];
        this.addClassNeedSetHeight(selectArr);
        selectArr = null;
        //3、
        $(".CDataGrid").parent().addClass("needSetHeight");
        //4、
        if (navigator.userAgent.indexOf('Firefox') > 0){
            var firefoxSelectAutoheightCell = $(this.firefoxGetAutoheightCell(), this.selectPage); //.popLayer .autoheight-webpart .autoheight-cell:not(:hidden)
            for (var j = 0; j < firefoxSelectAutoheightCell.length; j++) {
                var selectItem = $(firefoxSelectAutoheightCell[j]);
                //内部只有一个div才增加
                if (selectItem.children("div").length == 1) {
                    selectItem.addClass("needSetHeight");
                }
            }
        }

    },
    addClassNeedSetHeight: function(selectArr) {
        var i;
        for (i = 0; i < selectArr.length; i++) {
            if (this.selectPage) {
                //统一增加标识
                $(selectArr[i], this.selectPage).addClass("needSetHeight");
            } else {
                $(selectArr[i]).addClass("needSetHeight");
            }
        }
    },
    getAutoheightCell: function() {
        var autoheightCell;
        if (!this.selectPage) {
            autoheightCell = this.autoFlag + " " + this.cssAutoHeightCell;
        } else {
            autoheightCell = this.cssAutoHeightCell; //单击tab标签时的选择器 有个bug 非自适应也会走
        }
        return autoheightCell;
    },
     // 火狐浏览器弹窗height：100%需要设置px高度
     firefoxGetAutoheightCell: function() {
        var autoheightCell;
        if (!this.selectPage) {
            autoheightCell = this.firefoxAutoFlag + " " + this.cssAutoHeightCell
        } else {
            autoheightCell = this.cssAutoHeightCell;
        }
        return autoheightCell;
    },
    ProcessEachTdHeight: function(item,index) {
        var that = this;
        var selectItem = $(item);
        //isSetAutoItemHeight==true，则重复set，返回
        if (that.isProcessYetfn(item, that.flagItem, that.flagItemValue)) return;
        if (selectItem.hasClass(that.cssNavCon)) {
            //场景：.navCon
            //简介：.autoheight-tPn 100%  .navBar 20px   计算content高度
            //标记 var navCon
            //方案:
            //1. .autoheight-tPn:table,.navBar:talbe-row,.tPnl:table-row、height:auto
            //2. content孩子节点 height:inheirt
            that.setNavConHeight(selectItem);
        } else {
            var rowspan = that.getRowspan(selectItem);
            //解决：div版本不支持rowspan属性
            //场景：rowspan大于1，非td
            //谷歌，ie11，ie10通用
            // 标记符：.table-col[rowspan]
            if (!selectItem.is("td") && rowspan > 1) {
                that.rowspanForDivHack(selectItem, rowspan);
                //场景：
                //1.div版本，rowspan=1，标记：.table-col
                //2.td版本:
                //标记：.singlezone .autoheight-webpart .autoheight-cell
                //标记：.TreeBorderParent
                //标记：.grid-main-row>td
            } else {
                that.checkAutoRow(selectItem, rowspan);
                //td赋值高度
                that.setHeight(selectItem,index);
            }
        }
        that.setFlag(item, that.flagItem, that.flagItemValue);
    },
    //ie11下渲染异常
    //参见单应聘人员面试安排 工作日历 查询 料品
    //重新对自适应tr作算法
    // 一个rowspan等于3，它之后有非空同辈元素，显示异常
    //一个rowspan等于7，它之前有非空同辈元素，显示异常 见存货选项——会计期间统计维度配置
    checkAutoRow: function(selectItem, rowspan) { //ie11 消耗4ms 计数5
        //不是自适应单
        if ($(".autoheight-webpart").length == 0) return;
        var that = this;
        if (rowspan > 1) {
            //它之后有非空同辈元素
            //var selectItemNextTd=selectItem.nextAll("td:not(:empty)");
            //一个rowspan等于7，它之前有非空同辈元素，显示异常 见存货选项——会计期间统计维度配置。修改为同辈
            var selectItemNextTd = selectItem.siblings("td:not(:empty)");
            if (selectItemNextTd.length > 0) {
                //selectItemNextTd.addClass(that.cssAutoHeightCell);
                var itemClosestTable = selectItem.closest("table");
                //table下的自适应tr
                var tableAutoHeightRow = itemClosestTable.children().children('.' + that.cssAutoHeightRow);
                ////table下的有自适应tr
                if (tableAutoHeightRow.length > 0) {
                    //总的自适应tr的高度
                    var totalAutoHeight = 0;
                    //再把table下的自适应tr的高度加上
                    tableAutoHeightRow.each(function(index, item) {
                        totalAutoHeight += $(item).height();
                    })
                    //平均每个自适应tr的高度,向下取整
                    var eachAutoHeight = parseInt(totalAutoHeight / (tableAutoHeightRow.length));
                    //给自适应tr赋高度,并且移除class自适应，避免浏览器计算混乱
                    if (eachAutoHeight != 0) {
                        tableAutoHeightRow.height(eachAutoHeight).removeClass(that.cssAutoHeightRow);
                        tableAutoHeightRow.attr("trneedback", "yes")
                    }
                }
            }
        }
    },
    setNavConHeight: function(selectItem) { //消耗45ms 计数1
        var isItemHasClassAutoHeight = selectItem.hasClass("autoheight");
        if (!isItemHasClassAutoHeight) {
            selectItem.addClass("autoheight"); //工程变更 -变更
        }
        //给table-row设置高度
        this.setHeight(selectItem);
        //设置完高度不需要height:auto !important
        selectItem.removeClass("autoheight");
        this.addClassInherit(selectItem);
    },
    //给设置过高度的元素加上标志
    setFlag: function(item, flag, flagValue) { //消耗3ms，计数7
        if (item.cusAttr) {
            item.cusAttr(flag, flagValue);
        }
    },
    removeFlag: function() {
        var that = this;
        $(".needSetHeight", this.selectPage).each(function(index, item) {
            item.removeCusAttr("yesTab")
            item.removeCusAttr(that.flagItem);
            // $(item).children().removeClass(that.cssInherit);
            $(item).css("height", "");
        })
    },
    trNeedBack: function() {
        $('[trneedback="yes"]', this.selectPage).addClass(this.cssAutoHeightRow).css("height", "");
    },
    //判断是否设置过高度，isSetAutoItemHeight==true，则重复set
    isProcessYetfn: function(item, flag, flagValue) { //消耗1ms，计数7
        var isProcessYet = false;
        if (item.cusAttr(flag) == flagValue) {
            isProcessYet = true;
        }
        return isProcessYet;
    },
    setHeight: function(selectItem,index) { //消耗193ms 计数6
        var itemHeight = this.getActualHeight(selectItem);
		if(index == 0 && itemHeight>window.innerHeight){
			itemHeight = window.innerHeight - 30;
			selectItem.css("overflow","auto");
		}else if( selectItem.children().attr('ick') == 'TabControl' ){
			selectItem.css("overflow","hidden");
			}
        this.setItemHeight(selectItem, itemHeight);
    },
    setItemHeight: function(selectItem, itemHeight) { //消耗5ms 计数6
        if (itemHeight != 0) {
            selectItem.height(itemHeight);
            //itemChildren高度100%，高度超出外部td时，会溢出,inherit代替100%
            this.addClassInherit(selectItem);
        }
    },
    addClassInherit: function(selectItem, itemHeight) { //消耗1ms 计数1
        //itemChildren高度100%，高度超出外部td时，会溢出,inherit代替100%
        var itemChildren = selectItem.children();
        itemChildren.addClass(this.cssInherit);
    },
    rowspanForDivHack: function(selectItem, rowspan) {
        //解决div版本不支持rowspan属性
        //场景：rowspan大于1，非td
        var totalHeight = this.getRowTotalHeightAsDiv(selectItem, rowspan);
        this.setItemHeight(selectItem, totalHeight);
    },
    //计算div版本跨行总高度
    getRowTotalHeightAsDiv: function(selectItem, rowspan) {
        var that = this;
        var nextRows = selectItem.parent().nextAll().slice(0, rowspan - 1);
        //其他行设置高度设置为0
        nextRows.height(0);
        var trHeight = 0;
        //计算总的跨行高度
        trHeight += this.getActualHeight(selectItem);
        nextRows.each(function(index, item) {
            var _selectItem = $(item);
            if (_selectItem.hasClass(that.cssAutoHeightRow)) {
                trHeight += that.getActualHeight(_selectItem);
            }
        })
        return trHeight;
    },
    getActualHeight: function(selectItem) { //消耗187ms 计数6
        var actualHeight = selectItem.height();
        if (actualHeight == 0) {
              //隐藏元素不计算
               actualHeight=this.getHiddenTPHeight(selectItem);
        } else if (actualHeight < 30) { //报表 查询 树控件
               actualHeight=this.getHiddenTPHeight(selectItem);
        }
        return actualHeight;
    },
    getHiddenTPHeight:function(selectItem){
            var actualHeight="";
            var closestTP = selectItem.closest(".TP:hidden");
            if (selectItem.closest(".TP:hidden").length > 0) {
                // closestTP.show();
               closestTP.addClass("css-box-show");
               actualHeight = selectItem.height();
               closestTP.removeClass("css-box-show");
                // closestTP.hide();
            }else if (selectItem.closest(":hidden").length > 0) {
                actualHeight = selectItem.actual("height");
            }
            return actualHeight;
    },
    //求rowspan
    getRowspan: function(selectItem) { //消耗1ms 计数5
        var rowspan = selectItem.attr("rowspan");
        if (!rowspan) {
            rowspan = 1;
        } else {
            rowspan = parseInt(rowspan);
        }
        return rowspan;
    }

}

TdSetHeightHelper.GetInstance = function(selectPage, flagItemValue) {
    return new TdSetHeightHelper(selectPage, flagItemValue);
}
/*

   var btnArrowID="#u_M_p0_BtnDisplay",//点击的箭头按钮
          toggleWidthCardID="#u_M_p0_Card4",//需要切换宽度的cardID
          bigWidth=500,//展开的宽度
          smallWidth=0,//收起的宽度
          isCardSpread=false,//默认false 收起 ，true展开
          resizeDataGridID="#u_M_p0_DataGrid5", //需要resize的datagridID
          isTreeShow=true; //true tree显示，false tree不显示
      ToggleColWidthForTreeHelper = function(btnArrowID,toggleWidthCardID,bigWidth,smallWidth,isCardSpread,resizeDataGridID,isTreeShow).init();

*/


//点击的箭头按钮  需要切换宽度的cardID  展开的宽度  收起的宽度  true默认展开  需要resize的datagridID  tree是否显示
ToggleColWidthForTreeHelper = function(btnArrowID, toggleWidthCardID, bigWidth, smallWidth, isCardSpread, resizeDataGridID, isTreeShow) {
    this.toggleWidthCardIDCols = $(toggleWidthCardID + ' .glColC:first > col'); //需要切换宽度的cardID的col集合
    this.resizeDataGridID = resizeDataGridID; //需要resize的datagridID
    this.btnArrowID = btnArrowID; //点击的箭头按钮
    this.isTreeShow = isTreeShow; //true tree显示，false tree不显示
    this.bigWidth = bigWidth; //展开的宽度
    this.smallWidth = smallWidth; //收起的宽度
    this.cssAutoWidth = "autowidth";
    this.isCardSpread = isCardSpread; //默认false 收起 ，true展开
    this.hideTreeFlag = false; //false时，单击展开
}

ToggleColWidthForTreeHelper.prototype = {
    init: function() {
        this.def();
        this.WidthInit();
        this.Events();
    },
    def: function() {
        this.treeCol = this.toggleWidthCardIDCols.eq(0);
        this.tableWidth = this.treeCol.closest("table").width();
        //默认false 收起
        if (!this.isCardSpread) {
            this.isCardSpread = false;
        }
        this.selectBtnDisplayID = $(this.btnArrowID);
    },
    Events: function() {
        var that = this;
        if (this.isCardSpread) {
            this.hideTreeFlag = true;
        } else {
            this.hideTreeFlag = false;
        }
        this.selectBtnDisplayID.click(function() {
            that.btnDisplayOnClick(this);
        });
        //tree move
        this.treeControlDrag();
    },
    btnDisplayOnClick: function(item) {
        var that = this;
        if (!this.hideTreeFlag) {
            //展开
            that.spread();
            this.hideTreeFlag = true;
        } else {
            /*if(!item.treeWidth)
                item.treeWidth = that.treeCol.width();*/
            //收起
            that.shrink();
            this.hideTreeFlag = false;
        }
        return false;
    },
    WidthInit: function() {
        if (this.isTreeShow === false) {
            this.toggleWidthCardIDCols.eq(0).width("0");
            this.toggleWidthCardIDCols.eq(1).width("0");
        } else {
            if (this.isCardSpread) {
                this.spread();
            } else {
                this.shrink();
            }
        }
    },
    //展开
    spread: function() {
        this.toggleColWidth(this.bigWidth);
        this.selectBtnDisplayID.css("background-image", 'url(../images/BtnToLeft.gif)');
        this.triggerResize();
    },
    //收起
    shrink: function() {
        this.toggleColWidth(this.smallWidth);
        this.selectBtnDisplayID.css("background-image", 'url(../images/BtnToRight.gif)');
        this.triggerResize();
    },
    toggleColWidth: function(Width) {
        var space = 16;
        this.treeCol.width(Width);
        this.toggleWidthCardIDCols.eq(2).width(this.tableWidth - Width - space).removeClass("autowidth-col");

    },
    triggerResize: function() {
        var resizeDataGridID = $(this.resizeDataGridID).get(0);
        this.bindFireEvent(resizeDataGridID, "resize");
    },
    bindFireEvent: function(element, evt) {
        try {
            //非IE
            var eventObj = document.createEvent('MouseEvents');
            eventObj.initEvent(evt, true, false);
            element.dispatchEvent(eventObj);
        } catch (e) {
            element.fireEvent(evt);
        }
        //$(window).trigger("resize"); 不好使
        //$UF$find(this.resizeDataGridID).fireEvent(DataGridEvent.Resize); 存在兼容问题
    },
    treeControlDrag: function() {
        var that = this;
        var moveTreeButton = $("[id$='MoveTreeButton']");
        if (moveTreeButton.length > 0) {
            moveTreeButton.hide();
            var treeLine = moveTreeButton.closest("table").closest("td");
            $(treeLine).css("cursor", " w-resize");
            var treeLineElement = treeLine.get(0);
            //var treeTD=$(treeLine).closest("table").children("colgroup").find("col:first");
            treeLineElement.onmousedown = function(e) {
                var downX = (e || event).clientX;
                var treeLineOffsetLeft = $(treeLine).offset().left;
                document.onmousemove = function(e) {
                    var e = e || window.event;
                    var changWidth = treeLineOffsetLeft + (e.clientX - downX);
                    //var maxT = oBox.clientWight - treeLineElement.offsetWidth;
                    changWidth < 0 && (changWidth = 0);
                    // changWidth > maxT && (changWidth = maxT);
                    //$(treeTD).width(changWidth);
                    that.toggleColWidth(changWidth);
                    $("#BomMainUI_TreeContro_Width").val(changWidth);
                    return false;
                };
                document.onmouseup = function() {
                    document.onmousemove = null;
                    document.onmouseup = null;
                    treeLineElement.releaseCapture && treeLineElement.releaseCapture();
                    that.triggerResize();
                };
                treeLineElement.setCapture && treeLineElement.setCapture();
                return false;
            };
        }
    }
}

ToggleColWidthForTreeHelper.GetInstance = function(btnArrowID, toggleWidthCardID, bigWidth, smallWidth, isCardSpread, resizeDataGridID, isTreeShow) {
    return new ToggleColWidthForTreeHelper(btnArrowID, toggleWidthCardID, bigWidth, smallWidth, isCardSpread, resizeDataGridID, isTreeShow);
}

//快速查询设置样式
function quickSearchSetStyleManager() {
    this.CaseItemWidth = 0;
    this.caseItemWidthList=[];
    this.caseItemWidthIndex=window.caseItemIndex?window.caseItemIndex:0; //控制查询方案滚动索引值
    this.transformValue = window.transformValue?window.transformValue:0;  //控制查询方案滚动初始值
    this.quickSearchPanelHeight=window.quickSearchPanelHeight?window.quickSearchPanelHeight:0; //记录拖拽后的高度
    this.filteritemlength = parseInt($('.quickSearchPanel .quickSearchContainer').attr('filteritemlength'))
    this.$quickSearchPanel=$(".quickSearchPanel");
    this.$container=$('.quickSearchPanel .quickSearchContainer');
    this.$caseList=$(".quickSearchPanel .quickSearchCaseList");
    // localStorage中记录快速查询的展开收起
    this.pageLnk='';
    this.userName='';
    this.IsshowfilterStorage=null;
}
quickSearchSetStyleManager.prototype={
    init:function(){
        if(this.$quickSearchPanel.attr('isshowfilter')){
            if (this.$quickSearchPanel.attr('isshowfilter')=='True') {
                // localStorage中记录快速查询的展开收起
                this.pageLnk=dealUrlPara("lnk", window.$("#RawUrl").val());
                this.userName=$("#UserName").val();
                this.IsshowfilterStorage=JSON.parse(window.localStorage.getItem(this.userName + "_Isshowfilter"));
                // 新增展开折叠按钮
                if (this.$quickSearchPanel.attr('isshowfilter') == 'True' && $('.outer-center #quickSearchImg').length == 0) {
                    var imgHtml = '<img id="quickSearchImg" onclick="window.newQuickSearchSetStyleManager.OnQuickSearch()" src="../Images/quick-search.png?v=20231113" width="20" height="20">';
                    $('.outer-center').prepend(imgHtml);
                }
                //增加两个dom容器
                this.$quickSearchPanel.wrap("<div id='quickSearchPanel-scroll-wrapper'></div>");
                this.$caseList.wrap("<div class='scroll-box'></div>");
                this.createDom()
                //默认不显示查询方案 
                if(this.IsshowfilterStorage&& this.IsshowfilterStorage[this.pageLnk]){
                    if(this.IsshowfilterStorage[this.pageLnk].isFold){
                        this.quickSearchShowTr();
                    }else{
                        this.quickSearchHideTr();
                    }
                }else{
                    this.IsshowfilterStorage = this.IsshowfilterStorage ? this.IsshowfilterStorage : {};
                    this.IsshowfilterStorage[this.pageLnk]={isFold:false};
                    localStorage.setItem(this.userName + "_Isshowfilter",JSON.stringify(this.IsshowfilterStorage));
                    this.quickSearchHideTr();
                }
                this.rememberData();
                this.OnDrag();
                TdSetHeightHelper.GetInstance().afreshInit();
            }else{
                this.$quickSearchPanel.parent().parent().hide();
                this.$quickSearchPanel.parent().parent().next().hide();
                TdSetHeightHelper.GetInstance().afreshInit();
            }
        }
    },
    rememberData:function(){
        var _this=this;
        //记录滚动
        if(_this.transformValue){
            _this.$caseList[0].style.transform = `translateX(${_this.transformValue}px)`; // 更新转换值
        }

        if(_this.quickSearchPanelHeight>0){
            _this.$quickSearchPanel.height(_this.quickSearchPanelHeight);
        }
    },
    getCaseItemWidth:function(){
        var _this = this;
        //计算查询方案总长度
        $(".quickSearchPanel .quickSearchCaseItem").each(function (index, ele) {
            $(ele).attr('title', ele.value);
            _this.CaseItemWidth += $(ele).outerWidth() + 10;
            _this.caseItemWidthList.push($(ele).outerWidth() + 10);
        });
    },
    createDom:function(){
        var _this=this;
        _this.getCaseItemWidth();
        // 新增左右滑动按钮
        if (_this.CaseItemWidth > _this.$caseList.width()) {
            if(_this.transformValue==0){
                $('.quickSearchCasePanel .scroll-box').before("<div id='quickSearchScrollLeft' onclick='window.newQuickSearchSetStyleManager.OnScrollLeft()' clsss='scroll-left' style='margin-right:5px'><img src='../Images/arrowLeftGrey.png' width='14' height='14'></div>");
            }else{
                $('.quickSearchCasePanel .scroll-box').before("<div id='quickSearchScrollLeft' onclick='window.newQuickSearchSetStyleManager.OnScrollLeft()' clsss='scroll-left' style='margin-right:5px'><img src='../Images/arrowLeftBlack.png' width='14' height='14'></div>");
            }
            $('.quickSearchCasePanel .scroll-box').after("<div id='quickSearchScrollRight' onclick='window.newQuickSearchSetStyleManager.OnScrollRight()' clsss='scroll-right' style='margin-left:5px'><img src='../Images/arrowRightBlack.png' width='14' height='14'></div>");
        }
        //修改自适应样式
        $(".quickSearchPanel .quickSearchContainer .filterValue").each(function (index, ele) {
            if ($(ele).children().length > 1) {
                $(ele).children().addClass('half-width');
            } else {
                $(ele).children().addClass('total-width');
            }
        })
        // 将搜索value值隐藏
        $('.quickSearchBtn .quickSearch').val('');
    },
    quickSearchHideTr:function(){
        $('#quickSearchPanel-scroll-wrapper').parent().parent().hide();
        $('#quickSearchPanel-scroll-wrapper').parent().parent().next().hide();
        TdSetHeightHelper.GetInstance().afreshInit();
    },
    quickSearchShowTr:function($id){
        $('#quickSearchPanel-scroll-wrapper').parent().parent().show();
        $('#quickSearchPanel-scroll-wrapper').parent().parent().next().show();
        TdSetHeightHelper.GetInstance().afreshInit();
    },
    getCaseItemWidth:function(){
        var _this=this;
        $(".quickSearchPanel .quickSearchCaseItem").each(function (index, ele) {
            $(ele).attr('title', ele.value);
            _this.CaseItemWidth += $(ele).outerWidth() + 10;
            _this.caseItemWidthList.push($(ele).outerWidth() + 10);
        });
    },
    //快速查询按钮点击触发
    OnQuickSearch: function () {
        if (!this.IsshowfilterStorage[this.pageLnk].isFold) {
            this.quickSearchShowTr();
            this.$quickSearchPanel.show();
            TdSetHeightHelper.GetInstance().afreshInit();
            this.IsshowfilterStorage[this.pageLnk].isFold=true;
            localStorage.setItem(this.userName + "_Isshowfilter",JSON.stringify(this.IsshowfilterStorage));
        } else {
            this.$quickSearchPanel.hide();
            this.quickSearchHideTr();
            TdSetHeightHelper.GetInstance().afreshInit();
            this.IsshowfilterStorage[this.pageLnk].isFold=false;
            localStorage.setItem(this.userName + "_Isshowfilter",JSON.stringify(this.IsshowfilterStorage));
        }
    },
    //拖拽
    OnDrag: function () {
        var _this=this;
        _this.$quickSearchPanel.draggable({
            axis: "y",
            containment: "parent",
            drag: function (event, ui) {
                var height = event.clientY;
                _this.$quickSearchPanel.height(height);
                _this.quickSearchPanelHeight = height;
                window.quickSearchPanelHeight = height;
                TdSetHeightHelper.GetInstance().afreshInit();
            }
        });
    },
    //查询方案左侧点击
    OnScrollLeft:function(){
        var _this=this;
        // _this.getCaseItemWidth();
        $('#quickSearchScrollRight img').attr('src', '../Images/arrowRightBlack.png');
            if (_this.transformValue != 0 &&window.caseItemIndex>0) {
                if(-_this.transformValue>_this.caseItemWidthList[_this.caseItemWidthIndex]){
                    _this.transformValue+=_this.caseItemWidthList[_this.caseItemWidthIndex]
                }else{
                    _this.transformValue=0;
                }
                _this.$caseList[0].style.transform = `translateX(${_this.transformValue}px)`; // 更新转换值
                window.caseItemIndex=_this.caseItemWidthIndex;
                window.transformValue=_this.transformValue;
                window.caseItemIndex--;
            } else {
                $('#quickSearchScrollLeft img').attr('src', '../Images/arrowLeftGrey.png');
                _this.$caseList[0].style.transform = "translateX(0px)";
                window.transformValue=0;
                window.caseItemIndex=0;
            }
    },
    OnScrollRight: function () {
        var _this=this;
        // _this.getCaseItemWidth();
        $('#quickSearchScrollLeft img').attr('src', '../Images/arrowLeftBlack.png');
        if (_this.CaseItemWidth - (-_this.transformValue) > _this.$caseList.width() && _this.caseItemWidthIndex < _this.caseItemWidthList.length) {
            if (_this.CaseItemWidth - (-_this.transformValue) - _this.$caseList.width() < _this.caseItemWidthList[_this.caseItemWidthIndex]) {
                _this.transformValue -= _this.CaseItemWidth - (-_this.transformValue) - _this.$caseList.width()
            } else {
                _this.transformValue -= _this.caseItemWidthList[_this.caseItemWidthIndex];
            }
            _this.$caseList[0].style.transform = `translateX(${_this.transformValue}px)`; // 更新转换值
            window.caseItemIndex = _this.caseItemWidthIndex;
            window.transformValue = _this.transformValue;
            window.caseItemIndex++;
        } else {
            window.caseItemIndex = _this.caseItemWidthList.length - 1
            $('#quickSearchScrollRight img').attr('src', '../Images/arrowRightGrey.png');
        }
    }
}
quickSearchSetStyleManager.GetInstance = function() {
    return new quickSearchSetStyleManager();
}

popLayerTableSetWidthtHelper = function() {
    //观察阶段--后期需后端或者开发实现 by 20170414 U9V6000001559
    //症结：第一个table的第一列td宽度为1260px，
    //导致：弹出框自适应时总框宽度会很大为1260px，导致层内宽度与iframe宽度不相符
    //修改结果，弹出框宽度跟随iframe宽度
    //采购订单变更单-变更-供应商-整单价格重算 postback basicInfor中调用
    var popLayerTableFirst = $(".popLayer table:first");
    if (popLayerTableFirst.length > 0) {
        var popLayerTdFirst =  popLayerTableFirst.find("td:eq(0)");
        var popLayerTdSecond= popLayerTableFirst.find("td:eq(1)");
        if (popLayerTdFirst.width() > 1000) {
            popLayerTdFirst.addClass("autowidth-col");
            popLayerTdSecond.removeClass("autowidth-col");
        }
    }
    //观察end
}

// 参照选择带图片，新做一个弹窗页面，与单据主页面联动
selectItemForImage = function(gridId) {
    window.showModalDialog("../mvc/main/ItemSelector",{},"dialogWidth: 600;dialogHeight:400", function (returnValue) {
        for(var i = 0; i< $find(gridId).MainCols.length; i++) {
            if($find(gridId).MainCols[i].cusAttr("fieldid")  == "ItemInfo_ItemID") {
                $find(gridId).m_currentRowIndex = 0;
                $find(gridId).m_currentColumnIndex = i;
            }
        }
        if(returnValue.length > 0) {
            $find(gridId).Focus(true);
            var grid = $find(gridId).get_id();
            var totalRows = $find(gridId).m_TotalRows;
            var rowIndex = $find(gridId).m_currentRowIndex;
            var columnIndex = $find(gridId).m_currentColumnIndex;
            $find(grid).ReadyToStartBatchModifyProcess(returnValue.length);
            _ClientJSExecQueueManager.ClearAll()
            for(var j = 0; j < returnValue.length; j++) {
                if(returnValue[j].Code != "") {
                var resultJs = ""
                if(rowIndex + j < totalRows) {
                    resultJs = "$find('"+grid+"').EndEdit();if( $find('"+grid+"').m_currentRowIndex != "+ (rowIndex + j) +"){ $find('" +grid +"').m_currentRowIndex="+ (rowIndex + j) +";$find('"+grid+"').m_currentColumnIndex="+ columnIndex +";$find('"+grid+"').Focus(true);$find('"+grid+"').OnRowChanged(true);}"
                }else{
                    resultJs = "$find('"+grid+"').EndEdit();$find('"+grid+"').AddNewRow(false);if( $find('"+grid+"').m_currentRowIndex != "+ (rowIndex + j) +"){ $find('" +grid +"').m_currentRowIndex="+ (rowIndex + j) +";$find('"+grid+"').m_currentColumnIndex="+ columnIndex +";$find('"+grid+"').Focus(true);$find('"+grid+"').OnRowChanged(true);}"
                }
                _ClientJSExecQueueManager.Push(resultJs)
                var changeJs = "$SetGridCellValue('"+grid+"',"+ (rowIndex + j) + ","+columnIndex+",'"+returnValue[j].ID+"','"+returnValue[j].Code+"','"+returnValue[j].Name+"',false, null, 2);$find('"+grid+"').BatchModifyFowardOneUnit();"
                _ClientJSExecQueueManager.Push(changeJs)
                }else {
                    var resultJs = "";
                    if(rowIndex + j < totalRows) {
                        resultJs = "$find('"+grid+"').EndEdit();if( $find('"+grid+"').m_currentRowIndex != "+ (rowIndex + j) +"){ $find('" +grid +"').m_currentRowIndex="+ (rowIndex + j) +";$find('"+grid+"').m_currentColumnIndex="+ columnIndex +";$find('"+grid+"').Focus(true);$find('"+grid+"').OnRowChanged(true);}"
                    }else{
                        resultJs = "$find('"+grid+"').EndEdit();$find('"+grid+"').AddNewRow(false);if( $find('"+grid+"').m_currentRowIndex != "+ (rowIndex + j) +"){ $find('" +grid +"').m_currentRowIndex="+ (rowIndex + j) +";$find('"+grid+"').m_currentColumnIndex="+ columnIndex +";$find('"+grid+"').Focus(true);$find('"+grid+"').OnRowChanged(true);}"
                    }
                    _ClientJSExecQueueManager.Push(resultJs)
                    var changeJs = "$find('"+grid+"').BatchModifyFowardOneUnit();"
                    _ClientJSExecQueueManager.Push(changeJs)
                }
            }
            var compJs = "var tGrid=$find('"+grid+"');tGrid.CompleteBatchModify();UF.UI.Reference.DisableShowForm = false;tGrid=null"
            _ClientJSExecQueueManager.Push(compJs)
            _ClientJSExecQueueManager.Running=false;
            _ClientJSExecQueueManager.Start()
        }
    })
}

$(function() {
    popLayerTableSetWidthtHelper();
    /*TdSetHeightHelper.GetInstance().init();*/
    //TdSetHeightHelper.Tools.OnResize();
     //报表行点击
     //.report-table [id$='_oReportCell'] table table table tr
    $(document).delegate(".report-table table[role='presentation'] table tr","mousedown",function(event){
        event.stopPropagation();
        $(this).siblings().removeClass("report-tr-select");
        $(this).addClass("report-tr-select");
    })

    // users/liudis/22/03/10-解决销售统计表问题-销售统计表查询结果，第一页选择行时有橙色标识，之后的页签都无法显示橙色标识
    // 原因：presentation属性值丢失，微软库导致，后端不好解决，因此前端添加多个选择器来追加事件！
    $(document).delegate(".report-table div[role='main'] span[role='navigation']+table tr","click",function(event){
        if($("table[role='presentation']").length && $("table[role='presentation']").length>0){
            return;
        }
        event.stopPropagation();
        $(this).siblings().removeClass("report-tr-select");
        $(this).addClass("report-tr-select");
    })
    // 注册报表页输入页数跳转事件
    $(document).delegate(".report-table  .ToolBarButtonsCell .ToolbarPageNav #u_M_p0_ReportControl1_ctl00_ctl10_ctl00_CurrentPage","change",function(event){
        event.stopPropagation();
        if(!isNaN(this.value)){
            if(this.value >= 1 && this.value <= $("#u_M_p0_ReportControl1_ctl00_ctl10_ctl00_TotalPages").text()) {
                __doPostBack('u$M$p0$ReportControl1$ctl00$ctl10$ctl00$CurrentPage','')
            }
        }
    })
});
/**************************************************************
 公共标记常量和全局变量定义
 ***************************************************************/
//数据类型标记类
function Event() { }
Event.Dbclick = "DBClick";
Event.Click = "Click";

// 处理url参数
function dealUrlPara(name, url) {
    if (url.indexOf('?') > -1) {
        var arr = url.split('?');
        if (arr.length > 1) {
            var param = url.split('?')[1];
            param = param.replace(/\&amp;/ig, '&');
            var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); //构造一个含有目标参数的正则表达式对象
            var r = param.match(reg);  //匹配目标参数
            if (r != null) return unescape(r[2]); return null; //返回参数值
        }
    }
}

//行修改标记  RowStatus
function RowStatus() { }
RowStatus.Empty = "Empty";
RowStatus.Added = "Added";
RowStatus.Modified = "Modified";
RowStatus.Deleted = "Deleted";
RowStatus.UnChanged = "Unchanged";
//列属性名定义，应该和服务器控件中列的属性名对应起来
function Col() { }
Col.ID = "FieldID";
Col.Formula = "Formula";
Col.ControlType = "ControlType";
Col.BeforeCellFocusEnable = "BeforeCellFocusEnable";
Col.Frozen = "Frozen";
//表格排序方式设置
function Sort() { }
Sort.StringUp = "0"; //字符串升序
Sort.StringDown = "1"; //字符串降序
Sort.IntUp = "2"; //数值升序
Sort.IntDown = "3"; //数值降序
//Grid编辑模式定义
function DisplayStyle() { }
DisplayStyle.Browser = "Browse";
DisplayStyle.Edit = "Edit";

//lxd 重构，表格操作时默认的全局标记常量标记定义
function DefaultSymbol() { }
DefaultSymbol.SelectedRowColor = "#feae02"; //定义被选择行的背景颜色
DefaultSymbol.SelectedCellColor = "#F8F8F5"; //定义被选择单元的背景颜色
DefaultSymbol.BodyCellBackgroundcolor = "#F8F8F5"; //默认表体单元背景色
DefaultSymbol.BodyCurrentCellBackgroundcolor = "#FFE9A6"; //表体当前单元背景色
DefaultSymbol.borderColor = "#E0E0E0"; //被定义的边框颜色
DefaultSymbol.DisabledColor = "gray"; //="#E6E6E6";
DefaultSymbol.borderWidth = 1; //用来标记主span的border的宽度
DefaultSymbol.True = "true"; //字符类型布尔值true
DefaultSymbol.False = "false"; //字符类型布尔值false
DefaultSymbol.cssthc = "thc"; //表头单元
DefaultSymbol.csstcc = "tcc"; //表体控制单元
DefaultSymbol.csstbc = "tbc"; //表体单元
DefaultSymbol.cssFixedDataRow = "FixedDataRow"; //固定数据行
DefaultSymbol.cssFixedColumnTitleCell = "FixedColumnTitleCell"; //固定列的表头单元格
DefaultSymbol.cssFixedColumnDataCell = "FixedColumnDataCell"; //固定列的数据单元格
DefaultSymbol.cssFixedColumnSumCell = "FixedColumnSumCell"; //固定列的合计单元格

//gct:插入行的行号取值方式
function InsertedRowNoType() { }
InsertedRowNoType.Floor = "0"; //上一行行号+1
InsertedRowNoType.LowAverage = "1"; //小平均数
InsertedRowNoType.HighAverage = "2"; //大平均数
InsertedRowNoType.Ceil = "3"; //下一行行号-1

//*************************************************************************************
//arg:在OnCellDataChanged事件中事件参数内容
//arg:在OnBeforeCellFocusEnter事件中事件参数内容
CellDataContent = function (oldValue, inputValue) {
    //??????
    //OnCellDataChanged时间使用参数
    this.OldValue = oldValue; //单元以前内容
    this.InputValue = inputValue; //当前输入值
    this.ResultValue = ""; //返回修改后的单元值，如果不做修改则不需要
    this.ResultText = ""; //返回修改后的单元显示值，如果不做修改则不需要
    this.Cancel = false; //是否
    //OnBeforeCellFocusEnter 事件使用参数
    this.ColField = ""; //当前列对应字段
    this.CurrentRowIndex = 0; //当前行号
    this.CurrentColumnIndex = 0; //当前列号
    this.CellEditEnabled = true; //当前单元是否允许编辑
    //OnBeforeRowAdd ,OnBeforeRowInsert,OnBeforeRowDelete
    this.CancelAction = false; //是否取消将要执行的动作
    //OnBeforeOpenDialog ,OnAfterOpenDialog 事件参数
    this.QueryParameters = []; //查询参数
    this.Result = null; //参照返回结果
    this.CancelDefaultAction = false; //是否终止系统默认的行为
    this.Flag = null;
} //end CellDataContent

ClientUserControl = function () {
    this.ControlType = ""; //控件类型
    this.Control = null; //客户定义控件
    this.refParas = ""; //参照上下文参数描述
} //end CellDataContent

//arg:this._owner.OnBodyRowSelected事件中的参数定义
SelectRowArg = function (rowIndex, selected) {
    this.RowIndex = rowIndex; //被选择的行索引
    this.Selected = selected; //指定的行是否被选择
} //end SelectRowArg

//表格单元值描述结构
CellValue = function (value) {
    this.Value = value;
    this.Code = "";
    this.Text = "";
} //end CellValue

NumberFormat = function (s, rt, rv, cs) {
    this.scale = parseInt(s, 10);
    this.roundType = parseInt(rt, 10);
    this.roundValue = parseInt(rv, 10);
    this.currencySymbol = cs;
    // 内存泄漏问题-zjh 2022/10/26
    // this.toStr = function () {
    //     return this.scale.toString() + "," + this.roundType.toString() + "," + this.roundValue.toString() + "," + this.currencySymbol;
    // }
}
/**************************************************************
 表格外观管理对象，负责处理表格各部分的显示样式以及在客户端扩展表格功能
 ***************************************************************/

GridFaciesManager = function (layoutContainer, tableHead, tableBody, tableFoot, pageBreakToolbar, owner) {
    this._owner = owner;
    this.layoutContainer = layoutContainer;
    this.tableHead = tableHead;
    this.tableBody = tableBody;
    this.tableFooter = tableFoot;
    this.toolbar = pageBreakToolbar;
    this.lastRowIndex = -1;
    this.lastColumnIndex = -1;
    this.lastBackColor = DefaultSymbol.BodyCellBackgroundcolor;
    this.shiftRowIndexList = [0, 0];
    this.startIndex = 0;
    this.fromTheBottomUp = false;
}
GridFaciesManager.prototype = {
    //GridFaciesManager对象卸载
    dispose: function () {
        this._owner = null;;
        this.layoutContainer = null;
        this.tableHead = null;
        this.tableBody = null;
        this.tableFooter = null;
        this.toolbar = null;
    },
    //设置表格的初始外观
    SetGridInitFacies: function (rowIndex, columnIndex) {
        if (this._owner.get_element().cusAttr('Focus') == "true") {
            //设置默认的当前单元位置
            try {
                this._owner.S_Body.focus();
            } catch (e) { }
            //如果后台需要设置焦点的情况
            this.SetCurrentCellStyle(rowIndex, columnIndex);
        }
    }, //end InitGridFacies

    Focus: function () {
        if (this.tableBody != this._owner.UNDEFINED_VALUE) {
            try {
                //this.tableBody.focus();
                var cell = this.GetCurrentCell(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                if (cell != this._owner.UNDEFINED_VALUE) {
                    //cell.focus();
                    //cell.focus();
                    try { //解决callback 控件不移除时的焦点问题，直接把焦点赋给内部的input
                        var inputs = cell.getElementsByTagName("input");
                        if (!inputs || inputs.length == 0) {
                            inputs = cell.getElementsByTagName("textarea");
                        }
                        if (inputs != null && inputs.length > 0) {
                            inputs[0].focus();
                        } else {
                            //cell.children[0].focus();
                            cell.setActive(); //yangkuna_非编辑单元格不要用focus，否则滚动条会跳到最前面
                        }
                    } catch (e) {
                        cell.children[0].focus();
                    }
                }
                //if(cell.children.length == 0 || (cell.children[0].tagName!="SPAN" && cell.children[0].tagName!="INPUT")){
                //yangkuna_不用CellEditEnabled方法判断，因为该方法会触发BeforeFocusEnter
                //if(!this._owner.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.CellEditEnabled(this._owner.m_currentColumnIndex,cell)){
                //cell.focus();
                //}
            } catch (e) { }
        }
    }, //end Focus

    GetCurrentCell: function (rowIndex, columnIndex) {
        if (rowIndex != null && rowIndex >= 0 && rowIndex < this.tableBody.rows.length) {
            var row = this.tableBody.rows[rowIndex];
            if (columnIndex < row.cells.length) {
                return row.cells[columnIndex];
            }
        }
        return null;
    }, //end GetCurrentCell

    //开始当前列排序
    OnStartGridColumnSort: function () {
        this.OutCurrentCellStyle(); //放弃当前单元样式设置
    },

    //终止当前列排序
    OnEndGridColumnSort: function () {
        this.SetCurrentCellStyle(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
    },

    //单元格被单击
    OnHeadCellClicked: function (rowIndex, columnIndex) {
        //设置当前行
    },
    //单元格被双击
    OnHeadCellDBClicked: function (rowIndex, columnIndex) {
        //设置当前行

    },
    /**
     *  @param {ClickEvent} srcEvent - 点击事件event
     *  @param {number} rowIndex - 点前行号
     * */
    // shift选中-hjl
    ShiftSelect: function (srcEvent,rowIndex) {
        if(srcEvent.shiftKey){
            window.getSelection().removeAllRanges();
            if (rowIndex <= this.shiftRowIndexList[0]) { // 小于开始的选择的状态
                if(!this.fromTheBottomUp){
                    this.setShiftSelectState(this.shiftRowIndexList[0],this.shiftRowIndexList[1],rowIndex,false);
                }
                this.setShiftSelectState(rowIndex,this.shiftRowIndexList[0],rowIndex,true);
                this.shiftRowIndexList = [rowIndex,this.startIndex];
                this.fromTheBottomUp = true;  // 修改自下而上状态为true
            } else if (rowIndex >= this.shiftRowIndexList[0]) { // 大于开始的选择的状态
                if (rowIndex > this.shiftRowIndexList[0] && rowIndex <= this.shiftRowIndexList[1]) {  //判断是否按住shift点击的是连接内的idnex
                    if (this.fromTheBottomUp) {   // 如果是自下而上的状状态，是由上减去,不是由下减
                        this.setShiftSelectState(this.shiftRowIndexList[0], rowIndex,rowIndex,false);
                        this.shiftRowIndexList = [rowIndex,this.startIndex];
                    } else {
                        this.setShiftSelectState(rowIndex, this.shiftRowIndexList[1],rowIndex,false);
                        this.shiftRowIndexList = [this.startIndex,rowIndex];
                    }
                } else {  // 这里正常的由上而下选择的状态
                    if (this.fromTheBottomUp) {
                        this.setShiftSelectState(this.shiftRowIndexList[0], this.shiftRowIndexList[1],this.shiftRowIndexList[1],false);
                    }
                    this.fromTheBottomUp = false;
                    var startIndex = this.shiftRowIndexList[1] === 0 ? this.startIndex:this.shiftRowIndexList[1];
                    this.setShiftSelectState(startIndex,rowIndex,rowIndex,true);
                    this.shiftRowIndexList = [this.startIndex,rowIndex];
                }
            }
        }else{ // 没有按住shift清除以前的
            this.fromTheBottomUp = false
            if (this.shiftRowIndexList[1] > 0) {
                this.setShiftSelectState(this.shiftRowIndexList[0],this.shiftRowIndexList[1],rowIndex,false)
            }
            this.shiftRowIndexList = [rowIndex,0]
            this.startIndex = rowIndex
        }
    },
    setShiftSelectState: function (start,end,currentIndex,isSelect) {
        for(var i = start; i <= end; i++){
            if(i == currentIndex && currentIndex){
                continue;
            }
            this.SetRowBackgroundColor(i, "");
            this.SetSelectedRowBgcolor(i, isSelect);
            checkBox = this._owner.D_Body.rows[i].getElementsByTagName("input")[0];
            var oldCheckBox = checkBox.checked;
            checkBox.checked = isSelect;
            this._owner.OnBodyRowSelected(i, isSelect , oldCheckBox);
            this._owner.OnBodyRowSelectedClick(i, isSelect);
            this._owner.OnRowClicked();
        }
        this._owner.SetHeadCheckBoxState();
    },
    resetShiftSelectparams:function (){
        this.shiftRowIndexList = [0, 0];
        this.startIndex = 0;
        this.fromTheBottomUp = false;
    },
    //表体单元被点击
    OnBodyCellClicked: function (rowIndex, columnIndex, event) { //设置当前单元样式
        this.SetCurrentCellStyle(rowIndex, columnIndex);
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var row = this.tableBody.rows[rowIndex];
            if (!this._owner.IsEmptyRow(row)) {
                this._owner.OnCellClick(rowIndex, columnIndex);
                this._owner.OnRowClicked();
            }
            //yangkuna
            if (this._owner.m_gridBodyEventsHandler.GridEditHelper && (!this._owner.m_isRelaySwitchTag || !this._owner.IsNeedSwitchTabPage(columnIndex, rowIndex))) {
                this._owner.m_gridBodyEventsHandler.GridEditHelper.StartEdit();
            }
        }
    },

    //表体单元被点击
    OnBodyCellDBClicked: function (rowIndex, columnIndex) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var row = this.tableBody.rows[rowIndex];
            if (!this._owner.IsEmptyRow(row)) {
                this._owner.OnCellDBClick(rowIndex, columnIndex);
                if (this._owner.IsNeedSwitchTabPage(this._owner.m_currentColumnIndex)) {
                    this._owner.ImitateSwitchTabPage();
                }
            }
        }
    },

    //表体行标题单元被点击
    OnBodyRowHeadClicked: function (rowIndex, cell) {
        var firstChild = cell.firstChild;
        if (firstChild != null) {
            this.SetSelectedRow(rowIndex); //设置当前被选择行
            if (firstChild.type == "checkbox") { //激活行被选择事件,如果点在checkbox上，引发重算值事件，直接点在Td上，不触发事件
                if (event && event.srcElement && event.srcElement.tagName == "INPUT" && event.srcElement.type == "checkbox" && !event.srcElement.cusAttr("alreadySelected")) {
                    if (event.srcElement.checked) {
                        this.SetSelectedRowBgcolor(rowIndex, true)
                    } else {
                        this.SetSelectedRowBgcolor(rowIndex, false)
                    }
                    this._owner.OnBodyRowSelected(rowIndex, firstChild.checked, !firstChild.checked);
                } else {
                    if (event && event.srcElement && event.srcElement.cusAttr("alreadySelected"))
                        event.srcElement.cusAttr("alreadySelected", null);
                    var isMulti = this.IsMultiSelect();
                    this._owner.OnBodyRowSelected(rowIndex, firstChild.checked, (isMulti ? !firstChild.checked : firstChild.checked));
                }
                this._owner.OnBodyRowSelectedClick(rowIndex, firstChild.checked);
                //zjx add
                this._owner.OnRowClicked();
            } else {
                //激活行被选择事件
                this._owner.OnBodyRowSelected(rowIndex, true, false);
                this._owner.OnBodyRowSelectedClick(rowIndex, true);
                this._owner.OnRowClicked();
                this.OnBodyCellClicked(rowIndex, 0);
                this.SetSelectedRow(rowIndex);
            }
        }
        if (this._owner.m_currentRowIndex != rowIndex) this._owner.OnRowChanged(); //行位置转换事件
        //if(this._owner.m_lastRowIndex != rowIndex) this._owner.OnRowChanged();  //add by lzhm 2007-10-18 注释 2007-11-19
    },

    //设置当前被选择行
    SetSelectedRow: function (rowIndex) {
        if (this.lastRowIndex > -1 && this.lastColumnIndex > -1) { //取消当前单元
            this.SetSelectCellBorder(this.lastRowIndex, this.lastColumnIndex, false);
        }
        if (this._owner.m_lastSelectedRow > -1 && this._owner.m_lastSelectedRow != rowIndex) {
            this._owner.SetRowBackgroundColor(this._owner.m_lastSelectedRow, "");
            this._owner.SetRowBackgroundColor(rowIndex, DefaultSymbol.SelectedRowColor, true); //true 强制设置
        }
        this._owner.m_lastSelectedRow = rowIndex;
    },

    //选择行
    SelectRow: function (rowIndex, selected) {
        var oldSelected = this._owner.IsRowSelected(rowIndex);
        if (rowIndex >= 0 && rowIndex < this.tableBody.rows.length) {
            if (this.SelectRowOfTableBody(rowIndex, selected, this.tableBody.rows[rowIndex])) {
                this._owner.OnBodyRowSelected(rowIndex, selected, oldSelected);
                this._owner.SetHeadCheckBoxState(selected);
            }
        }
    },

    //取得当前单元值
    GetCellValue: function (rowIndex, columnIndex) {
        var resultValue = null;
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows && columnIndex > 0 && columnIndex < this._owner.m_columns) {
            var cell = this.tableBody.rows[rowIndex].cells[columnIndex];
            resultValue = new CellValue(cell.cusAttr('Value'));
            resultValue.Text = cell.innerText;
            if (resultValue.Text == "") {
                resultValue.Text = this.GetRefNameAttribute(cell.cusAttr('R'));
            }
            if (cell.cusAttr('R') != this._owner.UNDEFINED_VALUE) {
                resultValue.Code = this.GetRefCodeAttribute(cell.cusAttr('R'));
            }
            if (resultValue.Value == "" && resultValue.Text == " ") {
                resultValue.Text = "";
            }

            //weiyin -- 跨浏览器兼容添加 -- &nbsp;这个空字符的处理在chrome下导致判断有问题，在此多做一步处理,肉眼看不出实际下面的判断中两处空字符有半角和全角的差异 -- 20170810
            if (resultValue.Text == " " || resultValue.Text == " ") {
                resultValue.Text = "";
            }
            if (this._owner.MainCols[columnIndex].cusAttr('ControlType') == "REF") //gct20090411：对于参照列的Cell.Value表达的是ID的含义，如果是空参照，规定统一为数字-1。非空参照则是字符串
            {
                if (resultValue.Value == "" || resultValue.Value == null) {
                    resultValue.Value = -1;
                }
            }

        }
        return resultValue;
    },

    //设置参照单元的Code属性
    GetRefCodeAttribute: function (refAtt) {
        if (refAtt == this._owner.UNDEFINED_VALUE || refAtt.length == 0)
            return "";
        var atts = refAtt.split(this._owner.RefSplitter2);
        if (atts.length == 2) {
            return atts[0];
        } else {
            return "";
        }
    },
    //设置参照单元的Code属性
    GetRefNameAttribute: function (refAtt) {
        if (refAtt == this._owner.UNDEFINED_VALUE || refAtt.length == 0)
            return "";
        var atts = refAtt.split(this._owner.RefSplitter2);
        if (atts.length == 2) {
            return atts[1];
        } else {
            return "";
        }
    },
    //设置单元值
    SetCellValue: function (rowIndex, columnIndex, valueString) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows && columnIndex > 0 && columnIndex < this._owner.m_columns) {
            var cell = this.tableBody.rows[rowIndex].cells[columnIndex];
            var oldV = cell.cusAttr('Value');
            //zjx
            if (typeof (valueString) == "boolean") {
                valueString = valueString.toString();
            }
            cell.cusAttr('Value', valueString);

            // add by lzhm 2008-1-24
            // 给Switch列赋值时，取当前列控件，控件类型不对应的问题，可重现节点人事管理-》员工调配-》调整薪资
            var cType = this._owner.MainCols[columnIndex].cusAttr('ControlType');
            var rColumn = this._owner.MainCols[columnIndex].cusAttr("ReplaceColumn");
            if (rColumn && rColumn.length > 0 && this._owner.GetColumnIndex(rColumn) > -1) {
                var cIndex = this._owner.GetColumnIndex(rColumn);
                if (cIndex > -1) {
                    cType = this._owner.MainCols[cIndex].cusAttr("ControlType");
                    columnIndex = cIndex;
                }
            }
            //add end .....
            switch (cType) {
                case ControlType.CheckBox:
                    cell.cusAttr('Value', valueString.toLowerCase());
                    this._owner.setCellListValue(cell, this._owner.GetCheckBoxTextByValue(valueString.toLowerCase(), this._owner.MainCols[columnIndex].cusAttr('CheckBoxValueRef')), ControlType.CheckBox);
                    break;
                case ControlType.Combox:
                    this._owner.setCellListValue(cell, this._owner.GetComboxTextbyID(columnIndex, valueString), ControlType.Combox);
                    break;
                case ControlType.MultiInput:
                    this.SetMultiLangAttribute(cell, valueString);
                    this._owner.setCellListValue(cell, valueString, ControlType.MultiInput);
                    break;
                case ControlType.Numberic:
                    //m_formatHelper.FormatCellNumber(columnIndex,rowIndex,value,oldV)
                    cell.cusAttr('Value', this._owner.m_formatHelper.FormatCellNumber(columnIndex, rowIndex, valueString, oldV).Value);
                    if (this._owner.m_gridBodyEventsHandler.GridEditHelper && this._owner.m_gridBodyEventsHandler.GridEditHelper.CalculateHelper) {
                        //gct20071120:注释掉，采用给相应方法多增加一个参数(rowIndex)的方式解决，目的是采用rowIndex，而不是采用全局的this._owner.m_currentRowIndex
                        if (rowIndex == this._owner.m_currentRowIndex) {
                            //this._owner.setCellListValue(cell,this._owner.GetNumberFormatedValue(valueString,columnIndex),ControlType.Numberic);
                            //gct20071106:此时cell.Value是没有经过（按精度）舍入的值，这样数据收集到的数据是没有舍入的数值，因此需要进行舍入，故此加上下面这句。
                            this._owner.m_gridBodyEventsHandler.GridEditHelper.CalculateHelper.columnExpressionCalculater.SetColumnValue(this.tableBody.rows[rowIndex], columnIndex, cell.cusAttr('Value'));
                        } else {
                            //this._owner.setCellListValue(cell,this._owner.GetNumberFormatedValue(valueString,columnIndex,rowIndex),ControlType.Numberic);
                            //gct20071106:此时cell.Value是没有经过（按精度）舍入的值，这样数据收集到的数据是没有舍入的数值，因此需要进行舍入，故此加上下面这句。
                            this._owner.m_gridBodyEventsHandler.GridEditHelper.CalculateHelper.columnExpressionCalculater.SetColumnValue(this.tableBody.rows[rowIndex], columnIndex, cell.cusAttr('Value'), rowIndex);
                        }
                    }
                    /**
                     * mahx 20230707 选中合计
                     */
                    this._owner.caculator.CalculateAggregations(rowIndex, cell.cellIndex, parseFloat(oldV), parseFloat(cell.cusAttr('Value')));
                    // if (this._owner.m_SumSelectedData && !this._owner.IsRowSelected(rowIndex)) { } else {
                    //     this._owner.m_gridBodyEventsHandler.GridEditHelper.CalculateHelper.aggregationCalculater.Aggregating(cell.cellIndex, parseFloat(oldV), parseFloat(cell.cusAttr('Value')));
                    // }
                    break;
                case ControlType.Date:
                case ControlType.DateTime:
                    this._owner.setCellListValue(cell, this._owner.GetDateFormatedValue(valueString, columnIndex), cType);
                    break;
                default: //取得数据的格式化结果
                    this._owner.setCellListValue(cell, this._owner.GetFormatedValue(valueString, this._owner.MainCols[columnIndex].cusAttr('DataType'), this._owner.MainCols[columnIndex].cusAttr('DisplayFormat')));
            }
            //this.SetRowChangeStates(this.tableBody.rows[rowIndex]);
            //
            if (valueString != oldV) {
                var cellData = new CellDataContent("", valueString);
                this._owner.OnCellDataValueChanged(cellData, rowIndex, columnIndex);
            }

        }
    },

    //设置多语言属性
    SetMultiLangAttribute: function (cell, value) {
        cell.cusAttr('MultiLang', this._owner.GetMultiinputData(value, cell.cellIndex)); //设置默认的语言种类
    },
    //设置行状态
    SetRowChangeStates: function (row) {
        if (row.cusAttr('Status') == RowStatus.UnChanged) {
            row.cusAttr('Status', RowStatus.Modified);
        } else if (row.cusAttr('Status') == RowStatus.Empty) {
            row.cusAttr('Status', RowStatus.Added);
            this._owner.set_TotalRows(this._owner.m_TotalRows + 1);
        }
    },
    //改变行状态
    ChangeRowState: function (rowIndex, state) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            state = state.substring(0, 3);
            var row = this.tableBody.rows[rowIndex];
            var oldState = row.cusAttr('Status');
            switch (state) {
                case "Mod":
                    row.cusAttr('Status', RowStatus.Modified);
                    break;
                case "Add":
                    if (oldState == RowStatus.Empty) {
                        this._owner.set_TotalRows(this._owner.m_TotalRows + 1);
                    }
                    row.cusAttr('Status', RowStatus.Added);
                    break;
                case "Unc":
                    row.cusAttr('Status', RowStatus.UnChanged);
                    break;
                case "Emp":
                    if (oldState != RowStatus.Empty) {
                        this._owner.set_TotalRows(this._owner.m_TotalRows - 1);
                    }
                    row.cusAttr('Status', RowStatus.Empty);
                    break;
            }
        }
    },
    GetRowState: function (rowIndex) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var row = this.tableBody.rows[rowIndex];
            if (row)
                return row.cusAttr('Status');
        }
        return "";
    },
    //设置参照列的当前单?元值
    SetReferenceCellValue: function (rowIndex, columnIndex, value, code, text, isSynchUpdateValue4P) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows && columnIndex > 0 && columnIndex < this._owner.m_columns) {

            var row = this.tableBody.rows[rowIndex];
            var cell = row.cells[columnIndex];
            var oldV = cell.cusAttr('Value');
            cell.cusAttr('Value', value);
            //zjx modify for users
            switch (this._owner.MainCols[columnIndex].cusAttr('ControlType')) {
                case ControlType.CheckBox:
                    cell.cusAttr('Value', value.toString().toLowerCase());
                    this._owner.setCellListValue(cell, this._owner.GetCheckBoxTextByValue(value.toString().toLowerCase(), this._owner.MainCols[columnIndex].cusAttr('CheckBoxValueRef')), ControlType.CheckBox);
                    break;
                case ControlType.Combox:
                    this._owner.setCellListValue(cell, this._owner.GetComboxTextbyID(columnIndex, value), ControlType.Combox);
                    break;
                case ControlType.MultiInput:
                    this.SetMultiLangAttribute(cell, value);
                    this._owner.setCellListValue(cell, value, ControlType.MultiInput);
                    break;
                case ControlType.Numberic:
                    //zjx add
                    var numValue = this._owner.m_formatHelper.FormatCellNumber(columnIndex, rowIndex, value, oldV);
                    cell.cusAttr('Value', numValue.Value);
                    this._owner.setCellListValue(cell, numValue.Text, ControlType.Numberic);
                    /**
                     * mahx 20230707 选中合计
                     */
                    this._owner.caculator.CalculateAggregations(rowIndex, cell.cellIndex, parseFloat(oldV), parseFloat(cell.cusAttr('Value')));
                    // if (this._owner.m_SumSelectedData && !this._owner.IsRowSelected(rowIndex)) { } else {
                    //     this._owner.m_gridBodyEventsHandler.GridEditHelper.CalculateHelper.aggregationCalculater.Aggregating(cell.cellIndex, parseFloat(oldV), parseFloat(cell.cusAttr('Value')));
                    // }
                    break;
                case ControlType.RefControl:
                    cell.cusAttr('R', code + this._owner.RefSplitter2 + text);
                    cell.title = code;
                    this._owner.setCellListValue(cell, text, ControlType.RefControl, code, isSynchUpdateValue4P);
                    break;
                case ControlType.Date:
                    this._owner.setCellListValue(cell, this._owner.GetDateFormatedValue(value, columnIndex), ControlType.Date);
                    break;
                default: //取得数据的格式化结果
                    this._owner.setCellListValue(cell, this._owner.GetFormatedValue(value, this._owner.MainCols[columnIndex].cusAttr('DataType'), this._owner.MainCols[columnIndex].cusAttr('DisplayFormat')), this._owner.MainCols[columnIndex].cusAttr('ControlType'));
            }
            //this.SetRowChangeStates(row);
        }
    },

    //选择标题单元
    SelectRowOfTableBody: function (rowIndex, selected, row) {
        var result = false;
        var cell = row.cells[0];
        var firstChild = cell.firstChild;
        if (firstChild.type == "checkbox") {
            if (typeof (selected) == "string") {
                selected = ToBoolean(selected);
            }
            firstChild.checked = selected;
            result = true;

        }
        return result;
    },

    //GridFaciesManager.prototype
    SelectAllRow: function (selected) {
        var rows = this.tableBody.rows;
        for (var i = 0; i < rows.length; i++) {
            var oldValue = this._owner.IsRowSelected(i);
            if (this.SelectRowOfTableBody(i, selected, rows[i])) {
                this._owner.OnBodyRowSelected(i, selected, oldValue);
            }
        }
        //bug?
        this._owner.OnRowClicked();
    },

    //设置初始被选择列信息
    InitSelectedRow: function (selectRowIndexs) {
        if (selectRowIndexs != "") {
            var rowIndex = 0;
            var iSize = this.tableBody.rows.length;
            var arrays = selectRowIndexs.split(",");
            for (var i = 0; i < arrays.length; i++) {
                rowIndex = parseInt(arrays[i], 10);
                if (rowIndex >= iSize) break;
                if (rowIndex >= 0) { //记录初始被选择行索引，待提交时确定被删除或新增的选项
                    this.SelectRowOfTableBody(rowIndex, true, this.tableBody.rows[rowIndex]);

                }
            }
        }
    },

    //表体行标题单元被双击
    OnBodyRowHeadDBClicked: function (rowIndex) {

    },

    //表体被滚动
    OnLayoutScroll: function (srcEvent) {

    },
    //表体被滚动start
    OnLayoutScrollStart: function (srcEvent) {


    },
    //表体被滚动stop
    OnLayoutScrollStop: function (srcEvent) {

    },
    //放弃当前单元样式设置
    OutCurrentCellStyle: function () {
        if (this._owner.m_lastSelectedRow > -1) { //取消被选择行
            this.SetRowBackgroundColor(this._owner.m_lastSelectedRow, "");
        }
        if (this.lastRowIndex > -1 && this.lastColumnIndex > -1) { //恢复以前的背景色
            this.SetSelectCellBorder(this.lastRowIndex, this.lastColumnIndex, false);
        }
        this.lastRowIndex = -1;
        this.lastColumnIndex = -1;
        this._owner.m_lastSelectedRow = -1;
    },

    //设置当前单元样式,
    SetCurrentCellStyle: function (rowIndex, columnIndex, notScrollToView) {
        if (this._owner.m_lastSelectedRow > -1 && this._owner.m_lastSelectedRow != rowIndex) { //取消被选择行
            this.SetRowBackgroundColor(this._owner.m_lastSelectedRow, "");
        }
        if (this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Browser) { //浏览状态只处理行选择
            this._owner.m_lastRowBackColor = this.GetRowBackgroundColor(rowIndex);
            if (this._owner.m_lastSelectedRow != rowIndex)
                this.SetRowBackgroundColor(rowIndex, DefaultSymbol.SelectedRowColor, true);
            this._owner.m_lastSelectedRow = rowIndex;
            if (!notScrollToView) {
                this.ShowCellByScrollLayout(rowIndex, columnIndex);
            }
        } else {
            //浏览状态只处理行选择
            this._owner.m_lastRowBackColor = this.GetRowBackgroundColor(rowIndex);
            if (this._owner.m_lastSelectedRow != rowIndex)
                this.SetRowBackgroundColor(rowIndex, DefaultSymbol.SelectedRowColor, true);
            this._owner.m_lastSelectedRow = rowIndex;
            //编辑状态处理
            if (this.lastRowIndex > -1 && this.lastColumnIndex > -1) { //恢复以前的背景色
                this.SetSelectCellBorder(this.lastRowIndex, this.lastColumnIndex, false);
            }
            if (columnIndex < this._owner.m_columns && columnIndex >= 0 && rowIndex < this._owner.m_rows && rowIndex >= 0) {
                this.lastBackColor = this.GetCellBackgroundColor(rowIndex, columnIndex, "body");
                //设置当前单元背景颜色
                this.SetSelectCellBorder(rowIndex, columnIndex, true);
                if (!notScrollToView) {
                    this.ShowCellByScrollLayout(rowIndex, columnIndex);
                }
                this.lastRowIndex = rowIndex;
                this.lastColumnIndex = columnIndex;
            }
        }
    },
    IsMultiSelect: function () {
        var bIsSelectMulti = false;

        var checkBox = this.tableBody.rows[this._owner.m_currentRowIndex].cells[0].firstChild;
        if (checkBox != this._owner.UNDEFINED_VALUE && checkBox.nodeName == "INPUT") {
            bIsSelectMulti = true;
        }
        return bIsSelectMulti;
    },
    //设置当前单元编辑状态的边框
    SetSelectCellBorder: function (rowIndex, columnIndex, setting) {
        if (this.tableBody != null) {
            if (rowIndex >= 0 && rowIndex < this.tableBody.rows.length) {
                var cells = this.tableBody.rows[rowIndex].cells;
                if (columnIndex > 0 && columnIndex < cells.length) {
                    var cell = cells[columnIndex];
                    if (setting) {
                        if (cell.oldStyle == null)
                            cell.oldStyle = new Object();
                        cell.oldStyle.borderStyle = $E(cell).getCurrentStyle().borderStyle;
                        cell.oldStyle.borderColor = $E(cell).getCurrentStyle().borderColor;
                        cell.oldStyle.borderWidth = $E(cell).getCurrentStyle().borderWidth;

                        cell.style.borderStyle = "solid";
                        cell.style.borderColor = "#000000";
                        cell.style.borderWidth = "1px";

                        //cell.style.backgroundColor = DefaultSymbol.SelectedRowColor;
                        //zjx test
                        //yangkuna beforefocusenter 应在 cellclick之后.该方法为设置样式，不要触发事件
                        //if(this._owner.m_gridBodyEventsHandler.GridEditHelper)
                        //    this._owner.m_gridBodyEventsHandler.GridEditHelper.StartEdit();
                        this._owner.m_InCellEditing = true;

                        if (!this.IsMultiSelect()) {
                            var noWrap = document.createElement("NOBR");
                            noWrap.innerText = ">";
                            if (!cells[0].children[0]) { //交换列后，此箭头会存在于cell[0]中的情况，需判断有的时候则不再添加，weiyin跨浏览器兼容添加 -- 20170412
                                cells[0].appendChild(noWrap);
                            }
                        }

                        //cells[0].className =DefaultSymbol.csstcc;
                    } else {
                        if (cell.oldStyle != null) {
                            cell.style.borderStyle = cell.oldStyle.borderStyle;
                            cell.style.borderColor = cell.oldStyle.borderColor;
                            cell.style.borderWidth = cell.oldStyle.borderWidth;
                            cell.oldStyle = null;
                        } else {
                            cell.style.borderColor = "#FFFFFF #C1C8D2 lightgrey #FFFFFF";
                            cell.style.borderWidth = "0px,1px,0px,1px";
                        }
                        //cell.style.backgroundColor = DefaultSymbol.SelectedCellColor;

                        if (cell.bgColor != null && cell.bgColor.length > 0)
                            cell.style.backgroundColor = cell.bgColor;
                        else
                            //cell.style.backgroundColor = "";

                            // if(cell.style.backgroundColor != null && cell.style.backgroundColor=="")
                            // cell.style.backgroundColor = DefaultSymbol.SelectedCellColor;
                            //else
                            // cell.style.backgroundColor = DefaultSymbol.SelectedRowColor;

                        if (!this.IsMultiSelect()) {
                            if (cells[0].children[0]) {
                                cells[0].removeChild(cells[0].children[0])
                            }
                        }
                    }
                }
            }
        }
    },
    //设置当前单元编辑状态的边框
    OutSelectCellBorder: function (rowIndex, columnIndex, setting) {
        if (this.tableBody != null) {
            if (rowIndex >= 0 && rowIndex < this.tableBody.rows.length) {
                var cells = this.tableBody.rows[rowIndex].cells;
                if (columnIndex > 0 && columnIndex < cells.length) {
                    var cell = cells[columnIndex];
                    cell.focus();
                    if (setting) {
                        cell.style.borderStyle = "solid";
                        cell.style.borderColor = "#000000";
                        cell.style.borderWidth = "2px";
                        //cell.style.backgroundColor = DefaultSymbol.SelectedRowColor;
                        this._owner.m_InCellEditing = true;
                    } else {
                        cell.style.borderStyle = "solid";
                        cell.style.borderColor = "#000000";
                        cell.style.borderWidth = "2px";
                        //cell.style.backgroundColor = DefaultSymbol.SelectedCellColor;
                        this._owner.m_InCellEditing = false;
                    }
                }
            }
        }
    },

    //Add by lzhm 2008-11-21 计算固定列所占宽度,用于处理将当前单元格置于可视区域内
    GetFixColumnRightPixcel: function (rowIndex, columnIndex) {
        //记录缓存，只计算一次，拖动列宽时需要清空
        if (this._owner._FixColumnRightPixcel || parseInt(this._owner._FixColumnRightPixcel) == 0) {
            return this._owner._FixColumnRightPixcel;
        }

        var row = this.tableBody.rows[rowIndex];
        this._owner._TccColumnWidth = row.cells[0].offsetWidth;
        if (!row || !row.cells || !row.cells.length) {
            this._owner._FixColumnRightPixcel = 0;
            return 0;
        }
        var width = 0;
        if (row.cells[0].className.indexOf(DefaultSymbol.cssFixedColumnDataCell) < 0) {
            this._owner._FixColumnRightPixcel = 0;
            return 0;
        }
        width = this._owner._TccColumnWidth;
        for (var i = 1; i < row.cells.length; i++) {
            if (row.cells[i].className.indexOf(DefaultSymbol.cssFixedColumnDataCell) >= 0) {
                width += parseInt(row.cells[i].offsetWidth, 10);
            }
        }
        this._owner._FixColumnRightPixcel = width;
        return width;
    },

    //滚动布局使单元得以显示
    ShowCellByScrollLayout: function (rowIndex, columnIndex) {
        //columnIndex = 0;//===by zzq 首列 没有隐藏可以测量到高度
        /*Cell布局定位处理逻辑
         * 1、检查是否存在滚动条，如果不存在滚动条，则不处理
         * 2、检测是否在可视范围内，如果不在则计算，移动滚动条
         * 3、如果属于固定列，则不处理行向滚动条
         * 4、如果存在固定列，考虑显示区域左边缘就得加上固定列所占区域
         */
        var hScroll = this.layoutContainer.offsetWidth < this.layoutContainer.scrollWidth; //是否存在横向滚动条
        var vScroll = this.layoutContainer.offsetHeight < this.layoutContainer.scrollHeight; //是否存在纵向滚动条
        if (!hScroll && !vScroll) { //如果没有出现滚动条，直接退出
            return;
        }
        if (columnIndex >= 0 && columnIndex < this._owner.m_columns && rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var headHeight = this._owner.D_Head.offsetHeight;
            var cell = this.tableBody.rows[rowIndex].cells[columnIndex];

            var fixedColumn = (cell.className.indexOf(DefaultSymbol.cssFixedColumnDataCell) >= 0); //单元格属于固定列

            var fixColWidth = 0;
            if (!fixedColumn) { //如果此单元格不在固定列内,计算固定列所占宽度
                fixColWidth = this.GetFixColumnRightPixcel(rowIndex, columnIndex);
            }

            var cellLeft = cell.offsetLeft;
            var cellRight = cell.offsetLeft + cell.offsetWidth;
            var cellTop = cell.offsetTop;
            var cellBottom = cell.offsetTop + cell.offsetHeight;

            var layoutLeft = this.layoutContainer.scrollLeft + fixColWidth;
            var layoutRight = this.layoutContainer.scrollLeft + this.layoutContainer.clientWidth;
            var layoutTop = this.layoutContainer.scrollTop + headHeight;
            var layoutBottom = this.layoutContainer.scrollTop + this.layoutContainer.clientHeight;
            //冻结行列点击头部问题
            /*if (cellLeft < layoutLeft || cellRight > layoutRight || cellTop < layoutTop || cellBottom > layoutBottom) { //不在可视范围内
                if ((cellLeft < layoutLeft) && !fixedColumn) {
                    if ((cellLeft - fixColWidth) <= this._owner._TccColumnWidth) //如果是最左列，就直接到最左边，把控制列显示出来
                        this.layoutContainer.scrollLeft = 0;
                    else
                        this.layoutContainer.scrollLeft = (cellLeft - fixColWidth) + 'px'; //weiyin--2016.06.23
                }
                if ((cellRight > layoutRight) && !fixedColumn) {
                    this.layoutContainer.scrollLeft += (cellRight - layoutRight) + 'px';
                }
                if (cellTop < layoutTop) {
                    this.layoutContainer.scrollTop = (cellTop - headHeight) + 'px';
                }
                if (cellBottom > layoutBottom) {
                    this.layoutContainer.scrollTop += (cellBottom - layoutBottom) + 'px';
                }
            }*/
            if (window.event) {
                if (window.event.keyCode == KeyCode.up || window.event.keyCode == KeyCode.down || window.event.keyCode == KeyCode.left || window.event.keyCode == KeyCode.right) {

                    $Event(window.event).stopPropagation();
                    $Event(window.event).preventDefault();
                }
            }
        } //end scroll
    },
    //判断单元格是否在横向可视区域内
    IsCellInHorizonViewArea: function (rowIndex, columnIndex) {
        var hScroll = this.layoutContainer.offsetWidth < this.layoutContainer.scrollWidth; //是否存在横向滚动条
        var vScroll = this.layoutContainer.offsetHeight < this.layoutContainer.scrollHeight; //是否存在纵向滚动条
        if (!hScroll && !vScroll) { //如果没有出现滚动条，肯定在可视区域
            return true;
        }
        if (columnIndex >= 0 && columnIndex < this._owner.m_columns && rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var headHeight = this._owner.D_Head.offsetHeight;
            var cell = this.tableBody.rows[rowIndex].cells[columnIndex];

            var fixedColumn = (cell.className.indexOf(DefaultSymbol.cssFixedColumnDataCell) >= 0); //单元格属于固定列

            var fixColWidth = 0;
            if (!fixedColumn) { //如果此单元格不在固定列内,计算固定列所占宽度
                fixColWidth = this.GetFixColumnRightPixcel(rowIndex, columnIndex);
            }

            var cellLeft = cell.offsetLeft;
            var cellRight = cell.offsetLeft + cell.offsetWidth;
            var cellTop = cell.offsetTop;
            var cellBottom = cell.offsetTop + cell.offsetHeight;

            var layoutLeft = this.layoutContainer.scrollLeft + fixColWidth;
            var layoutRight = this.layoutContainer.scrollLeft + this.layoutContainer.clientWidth;
            var layoutTop = this.layoutContainer.scrollTop + headHeight;
            var layoutBottom = this.layoutContainer.scrollTop + this.layoutContainer.clientHeight;

            if (cellLeft < layoutLeft || cellRight > layoutRight || cellTop < layoutTop || cellBottom > layoutBottom) { //不在可视范围内
                return false;
            }
            return true;
        } //end scroll
        return false;
    },

    //取得行的背景色
    GetRowBackgroundColor: function (rowIndex) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var row = this.tableBody.rows[rowIndex];
            return $(row).css("backgroundColor");
        }
        return "";
    },

    //设置行的背景色
    SetRowBackgroundColor: function (rowIndex, color, IsAlways) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var row = this.tableBody.rows[rowIndex];
            //$(row).css("backgroundColor", color);
            //重新布
            if (color == "" || color == " ") {
                $(row).removeClass("onSelectedRow");
            } else {
                //选中行
                $(row).addClass("onSelectedRow");
            }


            /*
              var columns = row.cells.length;
              for (var i = 1; i < columns; i++) {
                    if (this._owner.MainCols[i].cusAttr('visible')) {
                        if (!IsAlways && row.cells[i].cusAttr("bgColor") != null && row.cells[i].cusAttr("bgColor").length > 0) {
                            if ($(row.cells[i]).css("backgroundColor") != row.cells[i].cusAttr("bgColor"))
                                $(row.cells[i]).css("backgroundColor", row.cells[i].cusAttr("bgColor"));
                        } else {
                            if ($(row.cells[i]).css("backgroundColor") != color)
                                $(row.cells[i]).css("backgroundColor", color);
                        }
                    }
               }
            */
        }
    },

    // zjh设置多选选中行的背景色
    SetSelectedRowBgcolor: function (rowIndex, isSelectd) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var row = this.tableBody.rows[rowIndex];
            if (isSelectd) {
                $(row).addClass("SelectedRow");
            } else {
                $(row).removeClass("SelectedRow");
            }
        }
    },

    //取得行的前景色
    GetRowFrontColor: function (rowIndex) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var row = this.tableBody.rows[rowIndex];
            return row.style.color;
        }
        return "";
    },

    //设置行的前景色
    SetRowFrontColor: function (rowIndex, color) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var row = this.tableBody.rows[rowIndex];
            row.style.color = color;
        }
    },

    //驱策行的背景颜色
    GetRowBackgroundColor: function (rowIndex) {
        var result = "";
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var row = this.tableBody.rows[rowIndex];
            result = row.style.backgroundColor;
        }
        return result;
    },

    //取得单元的背景颜色
    GetCellBackgroundColor: function (rowIndex, columnIndex, region) {
        if (region == "head") {
            return this.GetCellBackgroundColorOfRegion(rowIndex, columnIndex, this.tableHead);
        } else {
            if (region == "foot") {
                return this.GetCellBackgroundColorOfRegion(rowIndex, columnIndex, this.tableFooter);
            } else {
                return this.GetCellBackgroundColorOfRegion(rowIndex, columnIndex, this.tableBody);
            }
        }
    },

    //返回指定区域的单元背景颜色
    GetCellBackgroundColorOfRegion: function (rowIndex, columnIndex, regionDom) {
        var result = "";
        if (regionDom != this._owner.UNDEFINED_VALUE) {
            if (rowIndex >= 0 && rowIndex < regionDom.rows.length) {
                var row = regionDom.rows[rowIndex];
                if (columnIndex >= 0 && columnIndex < row.cells.length) {
                    result = row.cells[columnIndex].style.backgroundColor;
                }
            }
        }
        return result;
    },

    //设置表格中某一单元的背景颜色
    //region: head:表头,body:表体,foot:表尾
    SetCellBackgroundColor: function (rowIndex, columnIndex, color, region) {
        if (region == "head") {
            this.SetCellBackgroundColorofRegion(rowIndex, columnIndex, color, this.tableHead);
        } else {
            if (region == "foot") {
                this.SetCellBackgroundColorofRegion(rowIndex, columnIndex, color, this.tableFooter);
            } else {
                this.SetCellBackgroundColorofRegion(rowIndex, columnIndex, color, this.tableBody);
            }
        }
    },

    //设置表格某一区域中的单元背景颜色
    SetCellBackgroundColorofRegion: function (rowIndex, columnIndex, color, regionDom) {
        if (regionDom != this._owner.UNDEFINED_VALUE) {
            if (rowIndex >= 0 && rowIndex < regionDom.rows.length) {
                if (columnIndex >= 0 && columnIndex < this._owner.m_columns) {
                    regionDom.rows[rowIndex].cells[columnIndex].style.backgroundColor = color;
                    regionDom.rows[rowIndex].cells[columnIndex].bgColor = color;
                }
            }
        }
    },

    //取得单元前景色
    GetCellFrontColor: function (rowIndex, columnIndex, region) {
        if (region == "head") {
            return this.GetCellFrontColorofRegion(rowIndex, columnIndex, this.tableHead);
        } else {
            if (region == "foot") {
                return this.GetCellFrontColorofRegion(rowIndex, columnIndex, this.tableFooter);
            } else {
                return this.GetCellFrontColorofRegion(rowIndex, columnIndex, this.tableBody);
            }
        }
    },

    //设置区域单元的前景色
    SetCellFrontColor: function (rowIndex, columnIndex, color, region) {
        if (region == "head") {
            return this.SetCellFrontColorofRegion(rowIndex, columnIndex, color, this.tableHead);
        } else {
            if (region == "foot") {
                return this.SetCellFrontColorofRegion(rowIndex, columnIndex, color, this.tableFooter);
            } else {
                return this.SetCellFrontColorofRegion(rowIndex, columnIndex, color, this.tableBody);
            }
        }
    },

    //设置表格某一区域中的单元背景颜色
    SetCellFrontColorofRegion: function (rowIndex, columnIndex, color, regionDom) {
        if (regionDom != this._owner.UNDEFINED_VALUE) {
            if (rowIndex >= 0 && rowIndex < regionDom.rows.length) {
                if (columnIndex >= 0 && columnIndex < this._owner.m_columns) {
                    regionDom.rows[rowIndex].cells[columnIndex].style.color = color;
                }
            }
        }
    },

    //返回指定区域的单元背景颜色
    GetCellFrontOfRegion: function (rowIndex, columnIndex, regionDom) {
        var result = "";
        if (regionDom != this._owner.UNDEFINED_VALUE) {
            if (rowIndex >= 0 && rowIndex < regionDom.rows.length) {
                var row = regionDom.rows[rowIndex];
                if (columnIndex >= 0 && columnIndex < row.cells.length) {
                    result = row.cells[columnIndex].style.color;
                }
            }
        }
        return result;
    },

    SetOddEvenTrStyle: function () {
        var defaults = {
            evenRowClass: 'AlternatingRow'
            //hoverRowClass:'hoverRow'
        };

        _this = $("#" + this._owner.get_id() + "_MainBody");

        //给第tr偶数行增加class‘oddRow’
        _this.find("tbody tr").removeClass(defaults.evenRowClass);


        _this.find("tbody tr:odd").addClass(defaults.evenRowClass);


        // _this.find("tbody tr td").removeClass(defaults.evenRowClass).removeClass("tcc");
        // _this.find("tbody tr." + defaults.evenRowClass).each(function () {
        //     $(this).children("td:first").addClass(defaults.evenRowClass);
        // })
        // _this.find("tbody tr[class='']").each(function () {
        //     $(this).children("td:first").addClass("tcc");
        // })
        //_this.find("tbody tr."+defaults.evenRowClass+" td:firstChild").addClass(defaults.evenRowClass);
        // _this.find("tbody tr[class=''] td:firstChild").addClass("tcc");
        //_this.find("tbody tr:odd").removeClass(defaults.evenRowClass);



    },
    //mahx 为跨浏览器而写，主要是解决在谷歌中如果加上100%,在列少的时候会把列撑到特别大。如果不加100%会在列多的时候每列变的特别小
    //不能兼得。所以从后台根据列实际宽度算出了DataGrid的实际宽度并且渲染，这个方法是为了给拉伸列之后调整DataGrid实际宽度用
    SetTableAutoSizeByColumns: function (offsetWidth) {
        var id = this._owner.get_id() + "_MainBody";
        var thisTable = $("#" + id).children("table");
        var width = this.getTableInitLoadingWidth();
        // for (var i = 0; i < this._owner.MainCols.length; i++) {
        //     var col = this._owner.MainCols[i];
        //     if ($(col).css("display") != "none") {
        //         width += parseInt($(col).css("width"), 10);
        //     }
        // }
        thisTable.attr("width",  width + offsetWidth + "px");
        //修改为样式处理 .positionThead{width:inherit}，以下仅供参考
        //固定行列需要thead宽度byliyne 20170301
        //var iehackWidth=this.getIehackWidth();
        //thisTable.children("thead").width(width/*+iehackWidth*/);
    },
    getTableInitLoadingWidth:function () {
        var id = this._owner.get_id() + "_MainBody";
        var thisTable = $("#" + id).children("table");
        var pxValue = thisTable.attr("width").replace('px','');
        return parseInt(pxValue)
    },
    getIehackWidth: function () {
        var iehackWidth = 0;
        if (!!window.ActiveXObject || "ActiveXObject" in window) {
            iehackWidth = 2;
        }
        return iehackWidth;
    }
} //end GridFaciesManager

//表格外观管理对象初始化
GridFaciesManager.GetInstance = function (container, head, body, foot, toolbar, owner) {
    return new GridFaciesManager(container, head, body, foot, toolbar, owner);
} //end getInstance
//end GridFaciesManager class


/**************************************************************
 Grid通用功能处理和控制
 1.表格数据排序功能
 2.管理表头钻取事件
 3.协调表格整体布局
 ***************************************************************/
//var m_behaviorManager;
//表头通用行为管理类
HeadGeneralBehaviorManager = function (tableBody, tableHead, owner) {
    this._owner = owner; //gct20070702:add
    this.Body = tableBody;
    this.Head = tableHead;
    this.TableSortManager; //表格排序管理
    this.HeadEventsManager; //表头钻取事件管理类
    //初始化通用行为
} //end headGeneralBehaviorManager
HeadGeneralBehaviorManager.prototype = {
    dispose: function () {
        if (this.TableSortManager) {
            this.TableSortManager.dispose();
            this.TableSortManager = null;
        }
        if (this.HeadEventsManager) {
            this.HeadEventsManager.dispose();
            this.HeadEventsManager = null;
        }
        this._owner = null;
        this.Body = null;
        this.Head = null;
    },
    Init: function () { //初始化表头钻取事件管理功能,事件优先响应
        this.HeadEventsManager = new HeadEventsManager(this.Head, this.Body, this._owner);
        this.HeadEventsManager.Init();
        if (this._owner.get_element().cusAttr('AllowSort') == DefaultSymbol.True) { //初始化表格排序功能，一般编辑模式下不要使用表头排序功能
            this.TableSortManager = new TableSortManager(this.Head, this.Body, this._owner);
            this.TableSortManager.Init();
        }
    } //end init
}
//初始化对象实例
HeadGeneralBehaviorManager.GetInstance = function (tableBody, tableHead, owner) {
    if (owner.m_behaviorManager == owner.UNDEFINED_VALUE) {
        owner.m_behaviorManager = new HeadGeneralBehaviorManager(tableBody, tableHead, owner);
    }
    return owner.m_behaviorManager;
}


//排序之前的回调事件定义
function BeforeResort() {
    var dd = "ddddd";
} //end BeforeResort

//排序之后的回调事件定义
function AfterSort() {
    var dd = "ddddd";
} //end AfterSort

//start tableSortManager class
//表头排序功能处理
//sub class of tableSortManager
CellItem = function (value, parent) {
    this.Text = value;
    this.Parent = parent;
} //end CellText

var _SortObject = null;
TableSortManager = function (tableHead, tableBody, owner) {
    this._owner = owner;
    this.EventAfterSort = AfterSort; //排序后事件
    this.EventBeforeSort = BeforeResort; //排序前事件
    this.TableHead = tableHead; //表头行引用
    this.TableBody = tableBody; //表体行引用
    this.SortDiv; //背景颜色
    _SortObject = this;
    this._downX = 0;
}
TableSortManager.curInstance = null;
TableSortManager.prototype = {
    dispose: function () {
        this._owner = null;
        this.EventAfterSort = null;
        this.EventBeforeSort = null;
        this.TableHead = null;
        this.TableBody = null;
        this.SortDiv = null;
        _SortObject = null;
    },
    //开始排序
    StartSort: function () {
        if (this._owner.m_gridBodyEventsHandler != null)
            this._owner.m_gridBodyEventsHandler.OnStartGridColumnSort();
    },

    //结束排序
    EndSort: function () {
        if (this._owner.m_gridBodyEventsHandler != null) this._owner.m_gridBodyEventsHandler.OnEndGridColumnSort();
    },

    //对象初始化
    Init: function () {
        TableSortManager.curInstance = this; //记录当前实例
        _SortObject = this;
        this.AttachEvents();
        for (var i = 0; i < this._owner.MainCols.length; i++) {
            if (this._owner.MainCols[i].cusAttr('Sorted') != this.UNDEFINED_VALUE) {
                var sortStyle = this.GetSortStyle(i);
                var cell = this.getColumnHeadCell(i, this._owner.MainCols[i].cusAttr('FieldID'));
                //var cell = this.TableHead.rows[this.TableHead.rows.length-1].cells[i];
                if (cell) {
                    this.SetSortImage(sortStyle, cell);
                }
            }
            //zhaolian_2019_列checkbox选项
            if (this._owner.MainCols[i].cusAttr('HasChecked') != this.UNDEFINED_VALUE && this._owner.MainCols[i].cusAttr('HasChecked') == "true") {
                var cell = this.getColumnHeadCell(i, this._owner.MainCols[i].cusAttr('FieldID'));
                if (cell) {
                    this.SetCellCheckBoxState(cell);
                }
            }
        }
    },
    getColumnHeadCell: function (columnIndex, FieldID) {
        var rowIndex = this.TableHead.children.length - 1;
        if (this.TableHead.children[rowIndex].cells[columnIndex] && this.TableHead.children[rowIndex].cells[columnIndex].cusAttr('FieldID') == FieldID) {
            return this.TableHead.children[rowIndex].cells[columnIndex];
        } else {
            for (var i = rowIndex; i >= 0; i--) {
                for (var j = 0; j < this.TableHead.children[i].cells.length; j++) {
                    if (this.TableHead.children[i].cells[j].cusAttr('FieldID') == FieldID) {
                        return this.TableHead.children[i].cells[j];
                    }
                }
            }
        }
        return null;
    },

    //表格响应表格事件
    AttachEvents: function () {
        if (this.TableHead != this.UNDEFINED_VALUE) { //关联排序事件
            // this.TableHead.attachEvent("onclick",this.OnHeadClicked);
            // this.TableHead.attachEvent("oncontextmenu",this.OnHeadClicked);
            // this.TableHead.attachEvent("onmousedown",this.onMouseDown);
            $(this.TableHead).bind("click", this.OnHeadClicked);
            $(this.TableHead).bind("contextmenu", this.OnHeadClicked);
            $(this.TableHead).bind("mousedown", this.onMouseDown);
        }
    },

    onMouseDown: function () {
        this._downX = parseInt(window.event.x, 10);
    },
    //记录表头点击事件
    OnHeadClicked: function () {
        var nextSortStyle = null;
        if (event && event.srcElement.tagName == "TD" && event.srcElement.cusAttr("cmSort") != undefined && event.srcElement.cusAttr("cmSort") != null) {
            nextSortStyle = event.srcElement.cusAttr("cmSort");
            event.srcElement.removeCustomAttribute("cmSort");
        } else {
            //计算鼠标按下到抬起的X偏移量，当超过2时，认为用户希望移动列宽，不予排序。
            var dx = parseInt(window.event.x, 10);
            if (Math.abs(dx - this._downX) > 1)
                return;
        }
        //窗体事件响应时this不再指向当前实例，因此需要恢复对象实例
        var _owner = null;
        var cell = null;

        var ele;
        ele = event.srcElement;
        for (var i = 0; i < 5; i++) {
            if (ele.tagName == "TD")
                break;
            ele = ele.parentElement;
        }

        if (ele.tagName == "TD") {
            cell = ele;
            _owner = ele.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.control;
        } else {
            return;
        }
        if (!_owner) return;
        if (_owner.get_element().cusAttr('disabled')) return;
        if (_owner.get_element().cusAttr('EditStatus') == DisplayStyle.Edit && _owner.get_element().cusAttr('AutoEditModel') == "true") {
            if (!window.DataGridAutoAddNewEmptyRow || window.DataGridAutoAddNewEmptyRow[_owner.get_id()] == true) {
                if ((_owner.IsEmptyRow(_owner.D_Body.rows[_owner.m_rows - 1])) && _owner.m_rows < _owner.m_PageSize) {
                    if (_owner.m_TotalRows < 2 && (_owner.m_rows - 1) < 2) return;
                }
            }
        }
        if (_owner.m_TotalRows < 2 && _owner.m_rows < 2) return;
        //如果是弹性域域列，退出排序
        if (ele.cusAttr('FieldID') && ele.cusAttr('FieldID').indexOf("_DescFlexField_") == 0) return;
        if (!_owner.IsColumnAllowSort(ele.cusAttr('FieldID'))) {
            return;
        }
        if (_owner.get_element().cusAttr('PagingStrategy') && _owner.get_element().cusAttr('PagingStrategy') == "DB" && (_owner.Grid_IsDirtyData || _owner.ViewDirty)) {
            showStatus(Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_GridCantSort);
            return;
        }

        if (event && event.type == "contextmenu") {
            if ($find(_owner.get_id() + "_SortMenu")) {
                $find(_owner.get_id() + "_SortMenu").attachDisplayControl = cell;
                $find(_owner.get_id() + "_SortMenu").DropDown();
            }
            $Event(event).stopPropagation();
            $Event(event).preventDefault();
            return;
        }
        if (_owner.m_tableDimentionManager && _owner.m_tableDimentionManager.ColWidthChanged) {
            _owner.m_tableDimentionManager.ColWidthChanged = false;

            $Event(event).stopPropagation();
        } else if (event && event.srcElement.type == "checkbox") {

        } else {
            if (_owner.m_eventProcessLock) return;
            if (_owner.get_element().cusAttr('PagingStrategy') && _owner.get_element().cusAttr('PagingStrategy') == "DB" && (_owner.Grid_IsDirtyData || _owner.ViewDirty)) {
                showStatus(Sys.CultureInfo[getCultureName().toLowerCase()].Resources.JSMsg_GridCantSort);
                return;
            }
            if (_owner.m_gridBodyEventsHandler && _owner.m_gridBodyEventsHandler.CanEndEdit(false)) { //只有编辑正常结束的情况下才能排序
                _owner.m_eventProcessLock = true;

                var instance = _owner.m_behaviorManager.TableSortManager;
                //如果在调整列宽所用范围内，不予排序
                if ((cell.offsetWidth - event.offsetX) <= 6) {
                    _owner.m_eventProcessLock = false;
                    return;
                }
                instance.StartSort();
                try {
                    var columnIndex = _owner.GetColumnIndex(cell.cusAttr('FieldID'));
                    var cellIndex = cell.cellIndex;
                    //var rowIndex = cell.parentElement.rowIndex;
                    var rowIndex = $(cell.parentElement).index();
                    //if(rowIndex==(instance.TableHead.rows.length-1) && columnIndex>0)
                    if (columnIndex > 0 && (rowIndex == (instance.TableHead.children.length - 1) || cell.colSpan == 1)) { //只有点中表头最下面那行时才进行排序
                        var oldSortStyle = instance.GetSortStyle(cellIndex);
                        if (!oldSortStyle)
                            oldSortStyle = '';

                        var sortStyle = null;
                        if (nextSortStyle != null) {
                            sortStyle = nextSortStyle;
                        } else {
                            sortStyle = instance.GetNextSortStyle(cellIndex);
                        }
                        if (oldSortStyle == sortStyle)
                            return;
                        _owner.AddSortColumnToList(cell.cusAttr('FieldID'), sortStyle, oldSortStyle);
                        _owner.OnSort(columnIndex, sortStyle, cell.cusAttr('FieldID'));
                    }
                } catch (error) { /*屏蔽所有错误*/ }
                instance.EndSort();
                _owner.m_eventProcessLock = false;
            } //end sort
        }
    },

    //    //取得升序排列样式
    //    GetSortUpStyle : function(dataType)
    //    {
    //        if(dataType==DataType.Int || dataType==DataType.Float || dataType==DataType.Int16 || dataType==DataType.Int64 || dataType==DataType.Decimal || dataType==DataType.Single || dataType==DataType.Double)
    //        {
    //            return Sort.IntUp;
    //        }
    //        else
    //        {
    //            return Sort.StringUp;
    //        }
    //    },

    //    //取得降序排列样式
    //    GetSortDownStyle : function(dataType)
    //    {
    //        if(dataType==DataType.Int || dataType==DataType.Float || dataType==DataType.Int16 || dataType==DataType.Int64 || dataType==DataType.Decimal || dataType==DataType.Single || dataType==DataType.Double)
    //        {
    //            return Sort.IntDown;
    //        }
    //        else
    //        {
    //            return Sort.StringDown;
    //        }
    //    },

    //取得排序样式
    GetSortStyle: function (columnIndex) {
        var columnSchema = this._owner.MainCols[columnIndex];
        if (!columnSchema)
            return '';
        return columnSchema.cusAttr('Sorted');
    },
    //取得点击后的排序样式
    GetNextSortStyle: function (columnIndex) {
        var columnSchema = this._owner.MainCols[columnIndex];
        if (!columnSchema)
            return null;
        if (columnSchema.cusAttr('Sorted') == null || columnSchema.cusAttr('Sorted') == "") {
            columnSchema.cusAttr('Sorted', 'UP');
        } else if (columnSchema.cusAttr('Sorted') == "UP") {
            columnSchema.cusAttr('Sorted', 'DOWN');
        } else {
            columnSchema.cusAttr('Sorted', '');
        }
        return columnSchema.cusAttr('Sorted');
    },

    //设置排序完成后标题的标记
    SetSortImage: function (sortStyle, headCell) {
        if (headCell != null && headCell.sortDiv == null)
            headCell.sortDiv = document.createElement("span");
        //if(this.SortDiv==this._owner.UNDEFINED_VALUE) this.SortDiv=$E(this._owner.get_element()).createElement("span");
        if (sortStyle == "UP") {
            headCell.sortDiv.className = this._owner.SortUPPattem;
        } else if (sortStyle == "DOWN") {
            headCell.sortDiv.className = this._owner.SortDownPattem;
        }
        headCell.appendChild(headCell.sortDiv);
    },
    //设置列checkbox状态是否选中
    SetCellCheckBoxState: function (headCell) {
        $(headCell).find("[type='checkbox']").prop("checked", true);
    },
    //对表体的各行进行排序
    SortTableRows: function (columnIndex, sortStyle) {
        var cellItems = new Array();
        var cell = null;
        if (this.TableBody != this._owner.UNDEFINED_VALUE) {
            var rowCount = this.TableBody.rows.length;
            for (var i = 0; i < rowCount; i++) {
                cell = this.TableBody.rows[i].cells[columnIndex];
                cellItems.push(new CellItem(cell.cusAttr('Value'), cell.parentElement));
            }
            cellItems.sort(CompareAtomy(sortStyle));
            //移动表格行
            for (var i = cellItems.length - 1; i >= 0; i--) { //先删除表格行
                this.TableBody.removeChild(cellItems[i].Parent);
            }
            for (var i = 0; i < cellItems.length; i++) { //再插入表格行
                this.TableBody.appendChild(cellItems[i].Parent);
            }
        }
    }
} //end TableSortManager

//?????
//返回数据比较结果 upDown:true 升序 false降序
function Compare(a, b, upDown) {
    var flag = 0;
    if (a > b) flag = upDown ? 1 : -1;
    else {
        if (a < b)
            flag = upDown ? -1 : 1;
        else
            flag = 0;
    }
    return flag;
} //end Compare

//?????
//比较原子对象
function CompareAtomy(sortStyle) {
    return function (value1, value2) {
        var flag = 0;
        switch (sortStyle) {
            case Sort.StringUp:
            { //字符串升序排列
                flag = Compare(value1.Text, value2.Text, true);
                break;
            }
            case Sort.StringDown:
            { //字符串降序排列
                flag = Compare(value1.Text, value2.Text, false);
                break;
            }
            case Sort.IntUp:
            { //数值升序排列
                try {
                    flag = Compare(parseFloat(value1.Text), parseFloat(value2.Text), true);
                } catch (error) { /*如果转换错误则不做比较*/ }
                break;
            }
            case Sort.IntDown:
            { //数值降序排列
                try {
                    flag = Compare(parseFloat(value1.Text), parseFloat(value2.Text), false);
                } catch (error) { /*如果转换错误则不做比较*/ }
                break;
            }
        } //end switch
        return flag;
    }
} //end CompareAtomy
//end TableSortManager class


//start HeadEventsManager class
//表头单元钻取事件管理
HeadEventsManager = function (tableHead, tableBody, owner) {
    var _this = this;
    this._owner = owner;
    this.TableHead = tableHead;
    this.tableBody = tableBody;
    HeadEventsManager.Owner = owner;
    this.OnKeyDownClick = function (columnIndex) {
        if (this._owner.MainCols[columnIndex].cusAttr('HasEvent') != _this.UNDEFINED_VALUE) {
            _this.FireDrowthroughEvent(_this._owner.MainCols[columnIndex].cusAttr('FieldID'));
        } //end OnKeyDownClick
    },
        //激活表头钻取事件
        this.FireDrowthroughEvent = function (columnName) {
            var colControlID = _this._owner.MainCols[_this._owner.GetColumnIndex(columnName)].cusAttr("ColEditCtrlClientID4P");
            if (colControlID) {
                if (this._owner.GetColumnIndex(columnName) != this._owner.m_currentColumnIndex) {
                    this._owner.m_currentColumnIndex = this._owner.GetColumnIndex(columnName);
                    this._owner.m_gridFaciesManager.SetCurrentCellStyle(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                    this._owner.Focus();
                }
                //yangkuna_20100624_先模拟切页签
                if (this._owner.IsNeedSwitchTabPage(this._owner.m_currentColumnIndex)) {
                    this._owner.ImitateSwitchTabPage();
                    _ClientJSExecQueueManager.Push("$find('" + this._owner.get_id() + "').m_behaviorManager.HeadEventsManager.FireDrowthroughEvent(\"" + columnName + "\");");
                    return;
                }
                var jsC = $find(colControlID);
                if (jsC) {
                    var domC = jsC.get_element();
                    if (domC.cusAttr("LC")) {
                        var jsLC = $find(domC.cusAttr("LC")); //控件对应的Label控件
                        if (jsLC) {
                            if (jsLC.get_element().getAttribute('onclick')) {
                                jsLC.get_element().fireEvent("onclick");
                            } else {
                                jsLC.onMouseUp();
                            }
                        } else //gct20081230:没有js对象，还需要找找有没有直接定义的事件
                        {
                            var domLabel = $get(domC.cusAttr("LC"));
                            if (domLabel.onclick) {
                                //eval(domLabel.onclick);
                                domLabel.fireEvent("onclick");
                            }
                        }
                    }
                }
                return; //处理完毕，该函数返回
            }
            //yangkuna_先结束编辑
            if (_this._owner.m_gridBodyEventsHandler.CanEndEdit(false)) {
                //yangkuna20100714:有事件在跑时，排队
                if (_ClientPostBackManager.Runing == true || Get_Global_WillDoPostBack() == true || _ClientCallBackManager.Runing == true) {
                    _ClientJSExecQueueManager.Push("$find('" + this._owner.get_id() + "').m_behaviorManager.HeadEventsManager.FireDrowthroughEvent(\"" + columnName + "\");");
                    return;
                }
                if (_this.GetFormRef(_this._owner.GetColumnIndex(columnName)) == "") { //服务端事件
                    _this._owner.eventNode = _this._owner.dataDom.createElement("Event");
                    _this._owner.eventNode.setAttribute("Style", "GridHeadClick");
                    _this._owner.eventNode.setAttribute("FieldID", columnName);
                    eval(_this._owner.get_element().cusAttr('onfireevents'));
                } else //客户端Form引用
                {
                    //前事件处理
                    if (this._owner.GetColumnIndex(columnName) != this._owner.m_currentColumnIndex) {
                        this._owner.m_currentColumnIndex = this._owner.GetColumnIndex(columnName);
                        this._owner.m_gridFaciesManager.SetCurrentCellStyle(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                        this._owner.StartEdit();
                    }
                    var formReference = _this.GetFormReference(_this._owner.m_currentFormRef, columnName);
                    var result = _this._owner.OnBeforeOpenDialog(_this.BeforeContext(formReference, columnName));
                    if (result) {
                        return;
                    }; //如果用户指定取消默认处理，则Return，不直接弹出窗口
                    formReference = _this.GetFormReference(_this._owner.m_currentFormRef, columnName);
                    var callback = _this._owner.MainCols[this._owner.GetColumnIndex(columnName)].cusAttr("RefCallbackMethod");
                    if (callback != null && callback != "") {
                        formReference.formUrl += "&" + encodeURI(callback);
                    }
                    _this.ShowDialog(formReference, columnName);
                }
            }
        } //end FireDrowthroughEvent
        ,
        this.TranslateInfor = function (refInfoXml) {
            var results = new ReferenceData();
            if (refInfoXml == null || refInfoXml == "") return results;
            //===by zzq 创建xml对象
            //var dom = PopupFormHelper.StringToXMLDom(refInfoXml);
            // var xmlStr = Encoder.htmlDecode(refInfoXml);
            var xmlStr = decodeURIComponent(refInfoXml);
            var dom = Basic._loadXML(xmlStr);
            var returnNodes = dom.getElementsByTagName("ReferenceReturn");
            for (var i = 0; i < returnNodes.length; i++) {
                var result = new Array();
                var curRow = returnNodes[i];
                var selectTag = curRow.getAttribute("IsSelected");
                if (selectTag) {
                    if (selectTag == "Y") {
                        _this._selectIndex = i;
                    }
                }
                var fieldNodes = curRow.getElementsByTagName("ReturnField");
                for (var j = 0; j < fieldNodes.length; j++) {
                    var item = fieldNodes[j];
                    result[item.getAttribute("name")] = item.getAttribute("value");
                }
                results.Rows[i] = result;
                if (selectTag) {
                    if (selectTag == "Y") {
                        results.Rows[i].Selected = true;
                    }
                }
            }
            return results;
        }

    this.ShowDialog = function (formReference, columnName) {
        if (formReference != null) {
            { //执行默认行为、如果用户未取消
                formReference.GetParameterValues(); //取得当前行参数
            }
            var title = '';
            if (event && event.srcElement.innerText && event.srcElement.children) {
                title = event.srcElement.innerText;
                ///如果<nobr 中含有Table，则是多行表头输出。应替换掉文本最后面的*号
                if (event.srcElement.children.length > 0 && event.srcElement.children[0].tagName == "TABLE") {
                    title = title.replace(/\*$/g, '');
                }
            }
            if (columnName != null) {
                var r = this._owner.D_Head.children.length - 1;
                for (var i = 1; i < this._owner.D_Head.children[r].cells.length; i++) {
                    if (this._owner.D_Head.children[r].cells[i].cusAttr('FieldID') == columnName) {
                        title = this._owner.D_Head.children[r].cells[i].innerText;
                        break;
                    }
                }
                title = title.replace(/\*$/g, '');
            }
            if (formReference.Caption() != "") {
                title = formReference.Caption();
            }
            var ret = ShowModalDialogForAll(formReference.Url(columnName), title, formReference.height, formReference.width, formReference.hideStatusBar, false, this, formReference);

        }
    } //end ShowDialog

    this.showDialogCallback = function (ret, formReference) {
        var refresult = this.TranslateInfor(ret);
        if (!this._owner.OnAfterOpenDialog(this.AfterContext(refresult))) {

            if (this._owner.m_gridFaciesManager != null) {
                this._owner.m_gridBodyEventsHandler.CanEndEdit(false);
            }
            //zjx add
            var currentCellIsEditable = true;
            if (this._owner.m_gridBodyEventsHandler.GridEditHelper) {
                var ele = this._owner.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                //
                currentCellIsEditable = this._owner.m_gridBodyEventsHandler.GridEditHelper.CellEditHelper.CellEditEnabled(this._owner.m_currentColumnIndex, ele)
                //
            }

            //this._owner.m_currentColumnIndex有可能为NaN，例如列表画面中选择多行进行审核，在审核报告画面中，没有点击任何列的情况下，直接点击列头上的链接，再关闭链接画面返回后，此时this._owner.m_currentColumnIndex为NaN（因为根本就没有点击任何一列）
            if ((this._owner.MainCols[this._owner.m_currentColumnIndex] != null) && (this._owner.MainCols[this._owner.m_currentColumnIndex].cusAttr("Edit") != "false") && currentCellIsEditable) {
                if (refresult.Rows.length > 0) { //如果没有返回信息，不主动修改行位编辑状态
                    //执行默认行为、如果用户未取消
                    var row = this._owner.D_Body.rows[this._owner.m_currentRowIndex];
                    if (row) {
                        if (row.cusAttr('Status') == RowStatus.Empty) { //设置行位被修改状态
                            row.cusAttr('Status', RowStatus.Added);
                        } else if (row.cusAttr('Status') == RowStatus.UnChanged) { //设置行位被修改状态
                            row.cusAttr('Status', RowStatus.Modified);
                        }
                        formReference.SetResult(refresult);
                        //yangkuna20100722:如果有Post将要发生，则Grid应该重新收集数据
                        if (window._GridWillPostBack) {
                            this._owner._isDataCollected = false;
                        }
                    }
                }
            }

        }
    }

    //创建打开窗口事件上下文
    this.BeforeContext = function (formReference, colName) {
        var context = new CellDataContent("", "");
        context.QueryParameters = formReference.parameters;
        context.FieldID = colName;
        return context;
    } //end CreaetBeforeContext

    //创建返回值事件上下文
    this.AfterContext = function (result) {
        var context = new CellDataContent("", "");
        context.Result = result;
        return context;
    } //end CreaetBeforeContext

} //end struct
HeadEventsManager.Events = null; //对象静态属性定义
HeadEventsManager.Owner = null; //对象静态属性定义
HeadEventsManager.FireDrowthroughEventStatic = function (columnName, ids) {
    //HeadEventsManager.Owner.m_behaviorManager.HeadEventsManager.FireDrowthroughEvent(columnName);
    $find(ids).m_behaviorManager.HeadEventsManager.FireDrowthroughEvent(columnName);
}
HeadEventsManager.prototype = {
    dispose: function () {
        this._owner = null;
        this.TableHead = null;
        this.tableBody = null;
        if (HeadEventsManager.Events) {
            Array.clear(HeadEventsManager.Events);
            HeadEventsManager.Events = null;
        }
        HeadEventsManager.Owner = null;
        //????事件清理
    },
    //表头钻取时间追加
    AttachCellEvents: function (cells, columnName, kp, hasEvent) {
        HeadEventsManager.Owner = this._owner;
        var _this = this;
        for (var i = 0; i < cells.length; i++) {
            //if($(cells[i]).attr('FieldID')==columnName) // by lzhm 2007-11-6
            if (cells[i].cusAttr('FieldID') == columnName) {
                //bug
                if (hasEvent && $(cells[i]).find(".underLine").length > 0) {
                    HeadEventsManager.Events.push($(cells[i]).find(".underLine")[0]);
                    eval("HeadEventsManager.Events[HeadEventsManager.Events.length-1].onclick=function(){HeadEventsManager.FireDrowthroughEventStatic('" + columnName + "','" + this._owner.get_element().id + "');$Event(event).stopPropagation();};");
                }
                if (kp == "true") {
                    var index = _this._owner.GetColumnIndex(columnName);
                    var name = _this._owner.findDisplayNameByIndex(index);
                    $(cells[i].children[0]).prepend("<i class='iconfont y-icon-help icon-help'></i>");
                    $(cells[i].children[0]).find("i").click(function () {
                        window.top.helpTool.show(name, _this._owner._element.id, true);
                    });
                }
            }
        }
    }, //end AttachCellEvents

    //函数初始化
    Init: function () {
        HeadEventsManager.Events = new Array();
        if (this.TableHead != this._owner.UNDEFINED_VALUE) {
            for (var i = 0; i < this._owner.m_columns; i++) {
                for (var j = 0; j < this.TableHead.children.length; j++) { // by lzhm 2007-11-6 ,原先只处理头的最后一行Row的cells
                    this.AttachCellEvents(this.TableHead.children[j].cells, this._owner.MainCols[i].cusAttr('FieldID'), this._owner.MainCols[i].cusAttr('kp'), this._owner.MainCols[i].cusAttr('HasEvent') != this._owner.UNDEFINED_VALUE);
                }
            }
        }
    },
    //取得Form参照对象实例
    GetFormRef: function (columnIndex) {
        if (columnIndex > -1) {
            this._owner.m_currentFormRef = this._owner.MainCols[columnIndex].cusAttr('FormRef');
            if (this._owner.m_currentFormRef == this._owner.UNDEFINED_VALUE) this._owner.m_currentFormRef = "";
        }
        return this._owner.m_currentFormRef;
    },

    //取得Form参照对象实例
    GetFormReference: function (refString, columnName) {
        var result = new FormReferenceSchema(this._owner);
        result.Init(refString);
        result.columnName = columnName;
        if (result.ok) return result;
        return null;
    }
    //end HeadEventsManager class
}

//Form引用样式描述
FormReferenceSchema = function (owner) {
    var _this = this;
    this._owner = owner;
    this.formUrl = ""; //form的url地址
    this.formCaption = ""; //form的标题
    this.width = 600;
    this.height = 400;
    this.hideStatusBar = true; //是否隐藏弹出窗口状态条
    this.bindingCombox = false; //是否自动绑定枚举
    this.codeField = "Code"; //编码列名
    this.nameField = "Name"; //名称列名
    this.columnName = ""; //当前列
    this.parameters = []; //参数对象的集合
    this.result = []; //返回值描述集合
    this.ok = false; //系统参数就绪
    //取得查询参数值
    this.GetParameterValues = function () {
        if (_this._owner.D_Body != null) {
            if (_this.bindingCombox) {
                for (var i = 0; i < _this.parameters.length; i++) { //直接的静态值
                    _this.parameters[i].value = _this.parameters[i].bindingName;
                }
            } else {
                var row = _this._owner.D_Body.rows[_this._owner.m_currentRowIndex];
                for (var i = 0; i < _this.parameters.length; i++) {
                    if (_this.parameters[i].bindingType == "context") {
                        var control = $find(_this.parameters[i].bindingName)
                        if (control != null) {
                            _this.parameters[i].value = control.value;
                        }
                    } else if (_this.parameters[i].bindingType == "value") {
                        _this.parameters[i].value = _this.parameters[i].bindingName;
                    } else {
                        //zjx modify
                        var column = _this.parameters[i].bindingName;
                        var index = _this._owner.GetColumnIndex(column);
                        if (index >= 0) {
                            //_this.parameters[i].value=_this.GetCellValue(row,_this.parameters[i].bindingName);
                            var colIndex = _this._owner.GetColumnIndex(_this.parameters[i].bindingName);
                            if (_this._owner.GetColumnType(colIndex) == ControlType.RefControl) {
                                var flag = _this.parameters[i].bindingProperty;
                                var cellValue = _this._owner.GetCellValue(_this._owner.m_currentRowIndex, colIndex);
                                if (flag == "value") {
                                    if (cellValue != null)
                                        _this.parameters[i].value = cellValue.Code;
                                } else if (flag == "text") {
                                    if (cellValue != null)
                                        _this.parameters[i].value = cellValue.Text;
                                } else {
                                    _this.parameters[i].value = _this.GetCellValue(row, _this.parameters[i].bindingName);
                                }
                            } else {
                                _this.parameters[i].value = _this.GetCellValue(row, _this.parameters[i].bindingName);
                            }
                        } else {
                            var v = "";
                            var o = _this._owner.GetControlByServerID(column);
                            //var o = element.document.getElementById(column);
                            if (o) {
                                var oJS = o.control;
                                if (oJS.get_Type() == ControlType.Reference) {
                                    var flag = _this.parameters[i].bindingProperty;
                                    if (flag == "key") {
                                        v = oJS.get_Key();
                                    } else if (flag == "value") {
                                        v = oJS.get_Value();
                                    }
                                    if (flag == "text") {
                                        v = oJS.get_Text();
                                    }
                                } else {
                                    v = oJS.get_Value();
                                }
                                _this.parameters[i].value = v;
                            }
                        }

                    }
                }
            } //end if
        }
    }
}
FormReferenceSchema.prototype = {
    Init: function (refString) {
        if (refString)
            if (refString != "") {
                var segment = refString.split("#"); //分离出段落
                this.SetBaseSchema(segment[0]); //设置基本信息
                this.SetParameterSchema(segment[1]); //设置参数
                this.SetResultSchema(segment[2]); //设置返回值
                this.ok = true; //ok
            }
    },

    //设置基本属性
    SetBaseSchema: function (baseSchema) {
        var values = baseSchema.split(",");
        this.formUrl = values[0];
        this.formCaption = values[1];
        this.width = parseInt(values[2], 10);
        this.height = parseInt(values[3], 10);
        this.hideStatusBar = (values[4] == DefaultSymbol.True);
        this.bindingCombox = (values[5] == DefaultSymbol.True);
        this.codeField = values[6];
        this.nameField = values[7];
    }, //end SetBaseSchema

    //设置参数
    SetParameterSchema: function (parametersString) {
        var lines = parametersString.split(";");
        for (var i = 0; i < lines.length; i++) {
            var para = new QueryParameter();
            para.Init(lines[i]);
            this.parameters.push(para);
        }
    }, //end SetParameters

    //设置返回值
    SetResultSchema: function (resultString) {
        var lines = resultString.split(";");
        for (var i = 0; i < lines.length; i++) {
            var para = new QueryParameter();
            para.Init(lines[i]);
            this.result.push(para);
        }
    }, //end SetResult

    //取得Form引用url地址
    Url: function (columnName) {
        //
        var urlEx = null;
        var columnIndex = this._owner.GetColumnIndex(columnName);
        if (this._owner.MainCols[columnIndex].cusAttr('ISMultiOrg') == "true") {
            urlEx = "&EntityFullName=" + this._owner.MainCols[columnIndex].cusAttr('EntityFullName');
        }

        //
        var qStr = "";
        qStr = this.GetQueryString();
        if (this.formUrl.indexOf("?") == -1) {
            if (qStr == "") {
                var result = this.formUrl + "?" + qStr;
            } else {
                var result = this.formUrl;
            }
            if (urlEx) {
                result += urlEx;
            }
            return result;
        } else {
            //return this.formUrl+this.GetQueryString();
            if (qStr != "") {
                if (urlEx) {
                    return this.formUrl + "&" + qStr + urlEx;
                } else {
                    return this.formUrl + "&" + qStr; // by lzhm 2007-10-31
                }
            } else {
                if (urlEx) {
                    return this.formUrl + urlEx;
                } else {
                    return this.formUrl;
                }
            }
        }
    }, //end GetFormUrl

    //取得Form标题
    Caption: function () {
        return this.formCaption;
    }, //end GetFormUrl

    //取得查询参数字符串
    GetQueryString: function () {
        var querys = [];
        for (var i = 0; i < this.parameters.length; i++) {
            if (this.parameters[i].value != null)
                if (this.parameters[i].value.toString() != "") {
                    querys.push(this.parameters[i].name + "=" + encodeURIComponent(this.parameters[i].value));
                }
        }
        //if(querys.length>0) return "&" + querys.join("&");
        if (querys.length > 0) return querys.join("&"); // by lzhm 2007-10-31
        return "";
    }, //end GetQueryString



    //取得单元格的值
    GetCellValue: function (row, columnName) {
        if (row) {
            if (row.cells) {
                var index = this._owner.GetColumnIndex(columnName);
                if (index >= 0) {
                    //===by zzq 获取ID方式改为兼容性写法
                    return row.cells[index].cusAttr("Value");
                }
            }
        }
        return "";
    }, //end GetCellValue

    //设置返回值
    SetResult: function (refresult) {
        //只读情况下不回写数据，Form引用
        if (this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Browser)
            return;

        if (refresult.Rows.length > 0 && this._owner.m_gridFaciesManager != null) {
            if (this.bindingCombox) { //动态枚举绑定

                this.SetComboxItems(this.columnName, refresult);
            } else { //普通列回填
                if (this._owner.GetColumnIndex(this.columnName) != this._owner.m_currentColumnIndex) {
                    return;
                }
                var row = refresult.Rows[0];
                var bnT = "";
                for (var i = 0; i < this.result.length; i++) {
                    var resultSchema = this.result[i];
                    var columnIndex = this._owner.GetColumnIndex(resultSchema.bindingName);
                    if (columnIndex > -1) {
                        //判断是否参照列  zjx modify
                        if (this._owner.MainCols[columnIndex].cusAttr('ControlType') == ControlType.RefControl) {
                            if (bnT == resultSchema.bindingName) {
                                continue;
                            } else {
                                bnT = resultSchema.bindingName;
                            }
                            var r = this.setRefData(resultSchema.bindingName, this.result, row, columnIndex, i);
                            if (this._owner.m_currentColumnIndex == columnIndex) {
                                if (!r) {
                                    break;
                                }
                            }
                            continue;
                        } else {
                            var value = row[resultSchema.name];
                            if (value != this._owner.UNDEFINED_VALUE) this._owner.m_gridFaciesManager.SetCellValue(this._owner.m_currentRowIndex, columnIndex, value);
                        }
                    }
                } //end for
                if (this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Edit)
                    this._owner.UpdateNumbericPrecision(this._owner.m_currentRowIndex); //更新数字显示精度
            }
        } //end SetResult
    }, //end SetResult

    //zjx add
    setRefData: function (bindingName, result, row, columnIndex, iCount) {
        var pk = "",
            code = "",
            name = "";
        var count = 0;
        var rs = [];
        var bSet = true;
        for (var i = 0; i < this.result.length; i++) {
            var resultSchema = this.result[i];
            if (resultSchema.bindingName == bindingName) {
                if (resultSchema.bindingProperty == "key") {
                    pk = row[resultSchema.name];
                    if (pk <= -1) {
                        return false;
                    }
                    continue;
                } else if (resultSchema.bindingProperty == "value") {
                    code = row[resultSchema.name];
                    continue;
                } else if (resultSchema.bindingProperty == "text") {
                    name = row[resultSchema.name];
                    continue;
                }
            }
            rs[count] = resultSchema;
            count++;
        }
        var reference = this._owner.CreateReferenceControl(columnIndex);
        if (columnIndex == this._owner.m_currentColumnIndex) {
            reference.control.set_NeedValidate(true);
            if (reference.control.get_IsLoadDefaultParams()) { //设置参照上下文参数,如果关联控件已设置则不设置
                this._owner.SetReferenceParameters(reference.control, this._owner.m_currentColumnIndex, this._owner.m_currentRowIndex, reference.cusAttr("RefPara"));
            }
        } else {
            reference.control.set_NeedValidate(false);
        }
        reference.control.set_Key(pk);
        reference.control.set_Value(code);
        reference.control.set_Text(name);
        reference.control.set_NeedValidate(true);

        if ((reference.control.get_Key() == -1 || reference.control.get_Key() == "") && (pk != -1 && pk != "")) {
            bSet = false;
        }
        if (bSet) {
            var refValueChanged = true;
            if (this._owner.GetCellValue(this._owner.m_currentRowIndex, columnIndex) &&
                this._owner.GetCellValue(this._owner.m_currentRowIndex, columnIndex).Value == reference.control.get_Key()) {
                refValueChanged = false;
            }
            this._owner.m_gridFaciesManager.SetReferenceCellValue(this._owner.m_currentRowIndex, columnIndex, pk, code, name);
            if (refValueChanged == true) {
                var cellData = new CellDataContent("", pk);
                this._owner.OnCellDataChanged(cellData, this._owner.m_currentRowIndex, columnIndex);
                this._owner.OnCellDataValueChanged(cellData, this._owner.m_currentRowIndex, columnIndex);
            }
            return true;
        } else {
            this._owner.m_gridFaciesManager.SetReferenceCellValue(this._owner.m_currentRowIndex, columnIndex, "", "", "");
            return false;
        }
    },
    //设置下拉列表
    SetComboxItems: function (columnName, result) {
        if (result == null) return;
        if (result.Rows == null) return;
        var columnIndex = this._owner.GetColumnIndex(columnName);
        if (columnIndex > -1) {
            if (this._owner.MainCols[columnIndex].cusAttr('ControlType') == ControlType.Combox) {
                var control = this._owner.CreateComboxControl(columnIndex);
                var controlJS = control.control;
                var source = new Object();
                source[0] = this.codeField;
                source[1] = this.nameField;
                source[2] = result;
                if (controlJS != null) controlJS.set_DataSource(source);
                //
                this._owner.SetCellValue(this._owner.m_currentRowIndex, columnIndex, controlJS.get_Value());
            } //end this._owner.MainCols
        }
    } //end SetComboxItems

} //end FormReferenceSchema

QueryParameter = function () {
    this.name = "";
    this.bindingName = "";
    this.bindingType = "";
    this.bindingProperty = "";
    this.value = "";
}
QueryParameter.prototype = {
    Init: function (parameterString) {
        var values = parameterString.split(",");
        this.name = values[0];
        this.bindingName = values[1];
        this.bindingType = values[2];
        this.bindingProperty = values[3];
        this.value = "";
    } //end Init
} //end QueryParameter

//start TableDimentionManager class
//var m_tableDimentionManager;
//表格布局管理对象
TableDimentionManager = function (tableLayout, mainTable, tableHead, cols, owner) {
    var _this = this;
    this._owner = owner;
    this.TableLayout = tableLayout;
    this.MainTable = mainTable;
    this.TableHead = tableHead;
    this.Cols = cols;
    this.StartResizeColumnWidth = false;
    this.StartOffsetX = 0;
    this.StartColumnIndex = 0;
    this.StartCell = null;
    this.ColWidthChanged = false;
    //背景滚动处理
    this.OnLayoutScroll = function () {
        //if(_this._owner.m_eventProcessLock) return;
        _this._owner.m_eventProcessLock = true;
        _this._owner.m_tableDimentionManager.AdjustTableHeadPosition();
        _this._owner.m_eventProcessLock = false;
    }
    //鼠标移动
    this.OnMouseMove = function () {
        var cell = event.srcElement;
        if (_this && _this._owner) {
            if (cell.tagName == "TD") {
                if (!_this._owner.m_tableDimentionManager.StartResizeColumnWidth) {
                    if ((cell.offsetWidth - event.offsetX) <= 6) {
                        // if(cell.currentStyle.cursor != "w-resize")
                        //     cell.style.cursor="w-resize";
                        cell.style.cursor = "w-resize";
                    } else {
                        cell.style.cursor = "default";
                    }
                }
                else {
                    cell.style.cursor = "col-resize";
                }
            } //mahx 因为给table所在的div(TableLayout)也注册了鼠标经过事件，所以这里要修改成也可以适配div的情况。
            else if (cell.tagName == "DIV") {
                if (!_this._owner.m_tableDimentionManager.StartResizeColumnWidth) {
                    cell.style.cursor = "default";
                }
                else {
                    cell.style.cursor = "col-resize";//记录一下：div下的col-resize样式和td的col-resize样式不一样。
                }
            }
        }
    }

    //鼠标按下
    this.OnMouseDown = function () {
        _this.ColWidthChanged = false;
        var cell = event.srcElement;
        if (cell.tagName == "TD" && (cell.className.split(" ")[0] == "thc")) {
            if ((cell.offsetWidth - event.offsetX) <= 6) {
                if (_this._owner.m_gridBodyEventsHandler.CanEndEdit(false)) {
                    _this._owner.m_tableDimentionManager.StartResizeColumnWidth = true;
                    _this._owner.m_tableDimentionManager.StartOffsetX = event.clientX;
                    /*add by lzhm 2007-10-16*/
                    var cellIndex = -1;
                    if (cell.parentElement.parentElement.rows.length == 1 || _this.Cols.length == cell.parentElement.cells.length) {
                        cellIndex = cell.cellIndex;
                    } else {
                        if (Number(cell.getAttribute("colspan")) === 1 && Number(cell.getAttribute("rowspan")) >= 2) {
                            //判断是一行的的
                            cellIndex = cell.cellIndex;
                        } else if (Number(cell.getAttribute("colspan")) >= 2 && Number(cell.getAttribute("rowspan")) === 1) {
                            //判断是多行中得父行
                            cellIndex = cell.cellIndex + 1;
                        } else {
                            //判断是多行中得子行
                            // 根据位置取Col的index 2007-11-1
                            var oleft = 0;
                            var zleft = parseInt(cell.offsetLeft, 10) + parseInt(cell.offsetWidth, 10);
                            var parentI = childrenI = step = iTotal = 0
                            var childHArray = Array.prototype.slice.call(event.srcElement.parentElement.children)
                            var parentHArray = Array.prototype.slice.call(event.srcElement.parentElement.parentElement.children[0].children)
                            if (childHArray.length === parentHArray.length) {
                                childHArray = Array.prototype.slice.call(event.srcElement.parentElement.parentElement.children[1].children)
                            }
                            // while (childrenI <= parentHArray.length || parentI <= parentHArray.length) {
                            //     if (childHArray[childrenI].style.display != "none") {
                            //         oleft += parseInt(childHArray[childrenI].offsetWidth, 10);
                            //         iTotal += parseInt(childHArray[childrenI].offsetWidth, 10);
                            //         step++;
                            //         childrenI++;
                            //     } else {
                            //         while (parentHArray[parentI].style.display === "none") {
                            //             parentI++;
                            //         }
                            //         if (iTotal != 0 && Math.abs(parentHArray[parentI].offsetWidth - iTotal) < 5) {
                            //             parentI++;
                            //             iTotal = 0;
                            //             if (parentHArray[parentI + 1].style.display == "none") {
                            //                 childrenI += 2;
                            //                 step += 2;
                            //             }
                            //         } else {
                            //             oleft += parseInt(parentHArray[parentI].offsetWidth, 10);
                            //             step++;
                            //             parentI++;
                            //             childrenI++;
                            //         }
                            //     }
                            //     if (oleft && zleft && Math.abs(oleft - zleft) < 5) {
                            //         // step记录的索引多加了1，应该是从-1开始计算
                            //         cellIndex = step - 1;
                            //         break;
                            //     }
                            // }
                            var fieldId = JSON.parse(cell.getAttribute("data-ca")).fieldid
                            if (fieldId) {
                                $(_this._owner.m_tableDimentionManager.Cols).each(function (i, item) {
                                    if (JSON.parse(item.getAttribute("data-ca")).fieldid === fieldId) {
                                        cellIndex = i;
                                    }
                                })
                            }
                        }
                    }
                    _this._owner.m_tableDimentionManager.StartColumnIndex = cellIndex;
                    /*替换下行的处理*/
                    //_this._owner.m_tableDimentionManager.StartColumnIndex =cell.cellIndex +cell.colSpan-1;
                    _this._owner.m_tableDimentionManager.StartCell = cell;
                    _this._owner.m_tableDimentionManager.StartCell.style.cursor = "col-resize";
                    //===
                    return false;
                    //_this._owner.m_tableDimentionManager.StartCell.setCapture();
                }
            } else {
                cell.style.cursor = "default";
            }
        }
    }

    //鼠标台开
    this.OnMouseUp = function () {
        if (_this._owner && _this._owner.m_tableDimentionManager && _this._owner.m_tableDimentionManager.StartResizeColumnWidth) {
            _this._owner._FixColumnRightPixcel = null; //清除缓存的属性 方法：GetFixColumnRightPixcel 中引用此属性
            _this.ColWidthChanged = true;
            _this._owner.m_tableDimentionManager.StartResizeColumnWidth = false;
            _this._owner.m_tableDimentionManager.StartCell.style.cursor = "default";
            _this._owner.m_tableDimentionManager.SetColumnWidth(event.clientX - _this._owner.m_tableDimentionManager.StartOffsetX);
            //===
            //mahx 重新计算宽度
            _this._owner.m_gridFaciesManager.SetTableAutoSizeByColumns(event.clientX - _this._owner.m_tableDimentionManager.StartOffsetX);
            // 存储拖动单元格宽度
            gridID = _this._owner.get_id() + "_MainBody";
            cellName = _this.StartCell.cusAttr("fieldid");
            cellWidth = _this.StartCell.width;
            pageLnk = dealUrlPara("lnk", window.frameElement.src) + "_" + dealUrlPara("SO_Type", window.frameElement.src)
            userName = $("#UserName").val()
            GridSizeStorage = JSON.parse(window.localStorage.getItem(userName + "_cellWidth"));
            if (GridSizeStorage && GridSizeStorage[pageLnk]) {
                GridSizeStorage[pageLnk][gridID + "_" + cellName] = cellWidth
            } else {
                GridSizeStorage = GridSizeStorage ? GridSizeStorage : {}
                GridSizeStorage[pageLnk] = {}
                GridSizeStorage[pageLnk][gridID + "_" + cellName] = cellWidth
            }
            window.localStorage.setItem(userName + "_cellWidth", JSON.stringify(GridSizeStorage))
            return false;
            //if (_this._owner.m_tableDimentionManager.StartCell != null) _this._owner.m_tableDimentionManager.StartCell.releaseCapture();
        }
    }
}
TableDimentionManager.prototype = {
    dispose: function () {
        this.DetachEvents();
        this._owner = null;
        this.TableLayout = null;
        this.MainTable = null;
        this.TableHead = null;
        this.Cols = null;
        this.StartCell = null;
    },
    //初始化布局管理对象
    Init: function () { //连接表格事件
        this.AttachEvents();
    }, //end Init

    //连接鼠标事件
    AttachEvents: function () {
        if (this.TableLayout != this._owner.UNDEFINED_VALUE) {
            this.TableLayout.onscroll = this.OnLayoutScroll;
            //mahx 为解决跨浏览器的tableHead的拖拽问题，给table所在的div也加入拖拽事件
            //因为在IE下，如果拖动一个td，鼠标按下，鼠标抬起，不管鼠标位置在哪里都会进入到TableHead注册的onmouseup事件里
            //而谷歌下，如果鼠标按下，鼠标抬起的时候鼠标位置超出了注册事件的（tableHead）的范围，就不会触发tableHead的onmouseup事件
            //解决办法就是在table的外层（TableLayout）也注册一个鼠标抬起的事件，和tableHead引用一个即可。
            //给table的外层（TableLayout）也注册onmousemove的原因就是和上面一样，不过这个是为了解决样式问题，不然拖动td出了tablehead的范围的时候，鼠标样式是默认的。
            this.TableLayout.onmouseup = this.OnMouseUp;
            this.TableLayout.onmousemove = this.OnMouseMove;
            //mahx20170417 单加上面的还不能完全解决问题，因为拖动最后一列，想要最后一列一直宽度增加到比Grid本身还要大时，单加上面的就不好用了。
            //因为moseup事件已经跑到某个父容器里去了，我干脆在document里都注册这个事件。在mouseup里判断此grid是否启用拖动即可
            window.document.onmouseup = this.OnMouseUp;
            window.document.onmousemove = this.OnMouseMove;
        }
        if (this.TableHead != this._owner.UNDEFINED_VALUE) {
            this.TableHead.onmousemove = this.OnMouseMove;
            this.TableHead.onmouseup = this.OnMouseUp;
            this.TableHead.onmousedown = this.OnMouseDown;
        }
    },
    DetachEvents: function () {

        if (this.TableLayout) {
            this.TableLayout.onscroll = null;
            this.TableLayout.onmouseup = null;
            this.TableLayout.onmousemove = null;
        }
        if (this.TableHead) {
            this.TableHead.onmousemove = null;
            this.TableHead.onmouseup = null;
            this.TableHead.onmousedown = null;
        }
    },

    //同步标题位置
    AdjustTableHeadPosition: function () {
        return;
        if (this._owner.m_tableDimentionManager.TableHead != this._owner.UNDEFINED_VALUE) {
            var scrollTop = this._owner.m_tableDimentionManager.TableLayout.scrollTop;

            if (scrollTop == "0" && !this._owner.m_tableDimentionManager.TableLayout._old_scrollTop) { // this._owner.m_tableDimentionManager.TableLayout._old_scrollTop 0或者null空
                return;
            }
            this._owner.m_tableDimentionManager.TableLayout._old_scrollTop = scrollTop;

            var rows = this._owner.m_tableDimentionManager.TableHead.rows;
            var rowHeight = 0;
            //if(scrollTop > 0){
            var th = [];
            for (var i = 0; i < rows.length; i++) {
                if (rows.length == 1) {
                    rows[i].style.position = "relative"; //加在样式表中。。。2007-10-26
                }
                th[i] = (rowHeight + scrollTop - 60) + "px";
                for (var j = 0; j < rows[i].cells.length; j++) {
                    if (rows.length == 1 && this.Cols[j].style.display != "none") {
                        rows[i].cells[j].style.position = "relative"; ////加在样式表中。。。2007-10-26
                    }
                    rows[i].cells[j].style.top = (-1 * i * 20) + 60 + "px";
                }
                rowHeight += 20; //下一行坐标
                if (rows.length > 1) {
                    rows[i].cells[0].style.position = "relative";
                }
            }

            for (var i = rows.length - 1; i >= 0; i--) {
                rows[i].style.top = th[i] + 'px';//===by zzq 增加单位;
            }
            /*
            } else{
                for(var i=0;i<rows.length;i++){
                    rows[i].style.position = "static";
                    rows[i].style.top = "";
                    for(var j=0;j<rows[i].cells.length;j++){
                        rows[i].cells[j].style.position = "static";
                        rows[i].cells[j].style.top = "";
                    }
                }
            }
            */
        }
    }, //end AdjustTableHeadPosition

    //设置列宽
    SetColumnWidth: function (offsetWidth) {
        if (this.StartColumnIndex < this._owner.m_columns && this.StartColumnIndex >= 0) {
            // this.TableHead.parentNode.children[1].style.width=this.TableHead.children[0].clientWidth+"px";
            for (var i = 0; i < this.TableHead.parentNode.children.length; i++) {
                if (this.TableHead.parentNode.children[i].className == "thead-tr") {
                    this.TableHead.parentNode.children[i].style.display = "none";
                }
            }
            this.TableHead.style.position = "static";
            try {
                var newWidth = parseInt(this.Cols[this.StartColumnIndex].width, 10);
                newWidth += offsetWidth;
                //mahx 加一个最小宽度限制，最少20.不然谷歌太灵敏，很可能设的非常小。
                if (newWidth < 20)
                    newWidth = 20;
                this.Cols[this.StartColumnIndex].width = newWidth + "px";
                //谷歌下td没有赋值
                //$(this.TableHead).children("tr").find("td").eq(this.StartColumnIndex).outerWidth(newWidth);
                //var theadTr = this.TableHead.children[this.TableHead.children.length - 1];
                for (var j = 0; j < this.TableHead.children.length; j++) {
                    var theadTr = this.TableHead.children[j];
                    for (var i = 0; i < theadTr.children.length; i++) {
                        var td = theadTr.children[i];
                        if (td.cusAttr("fieldId") == this.Cols[this.StartColumnIndex].cusAttr("fieldId")) {
                            var tdWidth = (parseInt(td.width, 10) + offsetWidth);
                            if (tdWidth < 20)
                                tdWidth = 20;
                            td.width = tdWidth;
                            break;
                        }
                    }
                }
                this._owner.m_tableDimentionManager.AdjustTableHeadPosition();
            } catch (error) { /*不合理的设置都自然屏蔽*/ }
        }
    } //end SetColumnWidth

} //end tableDimentionManager class


//取得对象实例
TableDimentionManager.GetInstance = function (tableLayout, mainTable, tableHead, cols, owner) {
    if (owner.m_tableDimentionManager == owner.UNDEFINED_VALUE) {
        owner.m_tableDimentionManager = new TableDimentionManager(tableLayout, mainTable, tableHead, cols, owner);
    }
    return owner.m_tableDimentionManager;
} //end GetInstance

//end TableDimentionManager class

/**************************************************************
 功能：表格事件连接和分发
 ***************************************************************/
//表体事件分发句柄
GridBodyEventsHandler = function (thisControl, tableContainer, tableBody, tableHead, owner) {
    var _this = this;
    this._owner = owner;
    this.thisControl = thisControl; //当前控件容器
    this.tableContainer = tableContainer; //表格容器
    this.tableBody = tableBody; //表体
    this.tableHead = tableHead;
    this.GridEditHelper = null; //表格编辑管理类
    this.GridFaciesHelper = null; //表格外观管理类
    //接收布局滚动事件
    this.LayoutScrollReceive = function () {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        _this._owner.m_gridBodyEventsHandler.OnLayoutScroll(event);
    }
    //接收布局滚动事件开始
    this.LayoutScrollReceiveStart = function (event) {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        _this._owner.m_gridBodyEventsHandler.OnLayoutScrollStart(event);
    }
    //接收布局滚动事件结束
    this.LayoutScrollReceiveStop = function (event) {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        _this._owner.m_gridBodyEventsHandler.OnLayoutScrollStop(event);
    }
    //接收鼠标单击事件
    this.CellClickReceive = function (Event) {
        $Event(event).stopPropagation();
        if (window.event) $Event(window.event).stopPropagation();
        if (_this._owner == null) return;
        if (_this._owner.m_eventProcessLock) return;
        var event;
        if (_this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Browser) {
            event = Event;
        } else {
            event = window.event;
        }
        if (_this._owner.get_element().cusAttr('disabled')) return;

        _this._owner.m_gridFocusEventProcessed = true;
        if (_this._owner.m_tableDimentionManager.StartResizeColumnWidth) { //
            _this._owner.m_tableDimentionManager.StartResizeColumnWidth = false;
        } else {
            //当处于编辑状态时，点击列头的checkbox，不处理选中，只是EndEdit，保证数据正确
            if (_this._owner.m_SumAllData && _this._owner.m_SumSelectedData && event && event.srcElement && event.srcElement.type == "checkbox" && event.srcElement.parentElement.className == "tcc") {
                if (_this.GridEditHelper && _this.GridEditHelper.CellEditActive) {
                    event.srcElement.checked = !event.srcElement.checked;
                    _this._owner.EndEdit();
                    return;
                }
            }
            //zhaolian_2019_表头列checkbox
            if (event.srcElement.type == "checkbox") {
                var fieldid = event.srcElement.parentElement.parentElement.cusAttr('fieldid');
                var cellIndex = event.srcElement.parentElement.parentElement.cellIndex;
                if (fieldid) {
                    _this._owner.MainCols[cellIndex].cusAttr('HasChecked', event.srcElement.checked.toString());
                }
            }
            if (_this._owner.m_eventProcessLock) return;
            _this._owner.m_eventProcessLock = true;
            _this._owner.m_gridBodyEventsHandler.OnCellClick(event);
            _this._owner.m_eventProcessLock = false;
        }


    }
    //接收Dom鼠标双击事件
    this.CellDBClickReceive = function (Event) {
        //console.log('CellDBClickReceive');
        if (_this._owner.m_eventProcessLock) return;
        var event;
        if (_this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Browser) {
            event = Event;
        } else {
            event = window.event;
        }
        if (_this._owner.get_element().cusAttr('disabled')) return;
        _this._owner.m_gridFocusEventProcessed = true;
        _this._owner.m_gridBodyEventsHandler.OnCellDBClick(event);
        if (event)
            $Event(event).stopPropagation();
        if (window.event)
            $Event(window.event).stopPropagation();
    }
    //接收Dom键盘事件
    this.CellKeyDownReceive = function () {
        if (event == null) {
            return;
        }
        if (event.type != "keydown") {
            return;
        }
        if (event.keyCode == 70 && event.ctrlKey == true) {
            if (_this._owner.m_pageBreakManagerInstance) {
                if (_this._owner.m_pageBreakManagerInstance.OnBtnLocateClick)
                    _this._owner.m_pageBreakManagerInstance.OnBtnLocateClick();
            }
            $Event(event).stopPropagation();
            $Event(event).preventDefault();
            return false;
        }
        if (event.keyCode == KeyCode.tab) {
            event.keyCode = KeyCode.GridTab;
            return true;
        }
        if ((event.altKey && event.keyCode == 188) || (event.altKey && event.keyCode == 190)) { //alt+<> for queryList
            $Event(event).stopPropagation();
        }
        if (_this._owner.get_element().cusAttr('disabled')) return;
        _this._owner.m_gridFocusEventProcessed = true;
        _this._owner.m_gridBodyEventsHandler.OnCellKeyDown(event);
        //wangxiaoliang 漏斗的快捷键
        if (event.keyCode == 89 && event.altKey == true) {
            _this._owner.m_CustomFilterManagerInstance.OnBtnSetFilterClick();
        }
        //keyCode == 74 (H Alt+J 显示隐藏浮动工具条)
        if (event.keyCode == 74 && event.altKey == true) {
            _this._owner.m_editMenuToolbar.Toggle();
            event.keyCode = 0;
            $Event(event).stopPropagation();
            $Event(event).preventDefault();
        }
        //zjx modify
        if (!(event.ctrlKey || event.altKey)) {
            $Event(event).stopPropagation();
        }
        if (event.keyCode == 13) {
            $Event(event).stopPropagation();
            //弹出页，在按enter键之后，希望能找到提交按钮做自动提交功能（一般是确定按钮点击事件，达到自动选中并且关闭弹框功能）
            //如果没有提交按钮并且不是弹出页，阻止默认事件，这种情况下如果想用enter键就自己注册事件实现，阻止一切其他的默认事件。
            if (window.location.href.toLowerCase().indexOf('simple.aspx') > -1 && $(":submit").length > 0)
                $(":submit").trigger("click");
            else
                $Event(event).preventDefault();
        }
        if (event.keyCode == KeyCode.tab) {
            $Event(event).stopPropagation();
            $Event(event).preventDefault();
        }

    }
    //当前空件的焦点丢失
    this.ControlFocusOutReceive = function () {
        if (_this._owner == null) {
            return;
        }
        if (_this._owner.m_eventProcessLock) return;
        _this._owner.m_eventProcessLock = true;
        if (!_this._owner.m_gridFocusEventProcessed) {
            if (_this._owner.m_gridBodyEventsHandler.GridEditHelper != null) {
                _this._owner.m_gridBodyEventsHandler.GridEditHelper.OnLayoutFocusOut();
            }
        }
        _this._owner.m_gridFocusEventProcessed = false;
        _this._owner.m_eventProcessLock = false;
    }
    this.CellKeyDown = function () {
        if ((event.keyCode == KeyCode.up) || (event.keyCode == KeyCode.down) || (event.keyCode == KeyCode.left) || (event.keyCode == KeyCode.right) || (event.keyCode == KeyCode.F2) || (event.keyCode == KeyCode.F12)) {
            _this.CellKeyDownReceive();
        } else {
            $Event(event).stopPropagation();
        }
    }
    //表头行选择事件接收功能
    this.HeadSelectEventReceive = function () {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        _this._owner.m_gridFocusEventProcessed = true;
        _this._owner.m_gridBodyEventsHandler.OnHeadAllSelect(event.srcElement);
        _this._owner.OnFireSelectAllEvent();
        _this.GridFaciesHelper.resetShiftSelectparams()
    }
}
GridBodyEventsHandler.prototype = {
    dispose: function () {
        if (this.GridEditHelper) {
            this.GridEditHelper.dispose();
            this.GridEditHelper = null;
        }
        this._owner = null;
        this.DetachEvents();
        this.thisControl = null;
        this.tableContainer = null;
        this.tableBody = null;
        this.tableHead = null;
        this.GridFaciesHelper = null;
    },

    //判断某列是否包含指定值
    ContainOf: function (columnName, value) {
        var result = false;
        var columnIndex = this._owner.GetColumnIndex(columnName);
        if (columnIndex >= 0 && this.tableBody != null) {
            var rows = this.tableBody.rows;
            for (var i = 0; i < rows.length; i++) {
                var cellValue = rows[i].cells[columnIndex].cusAttr("Value");
                if (value == cellValue) {
                    result = true;
                    break;
                }
            }
        }
        return result;
    },

    MoveFirstRow: function (inChangeFields) {
        if (this.GridEditHelper != null) {
            if (this.CanEndEdit(true)) {
                this.GridEditHelper.MoveFirstRow(this.GetNotChangeFields(inChangeFields));
            }
        }
    },

    MoveNextRow: function (inChangeFields) {
        if (this.GridEditHelper != null) {
            if (this.CanEndEdit(true)) {
                this.GridEditHelper.MoveNextRow(this.GetNotChangeFields(inChangeFields));
            }
        }
    },

    MoveLastRow: function (inChangeFields) {
        if (this.GridEditHelper != null) {
            if (this.CanEndEdit(true)) {
                this.GridEditHelper.MoveLastRow(this.GetNotChangeFields(inChangeFields));
            }
        }
    },

    //移动到上一行
    MovePreviousRow: function (inChangeFields) {
        if (this.GridEditHelper != null) {
            if (this.CanEndEdit(true)) {
                this.GridEditHelper.MovePreviousRow(this.GetNotChangeFields(inChangeFields));
            }
        }
    },

    //清空所有数据
    ClearData: function () {
        if (this.GridEditHelper != null) {
            if (this.CanEndEdit(true)) {
                this.GridEditHelper.ClearData(); //清空所有记录
            }
        }
    },

    //取得不用转换的字段列表
    GetNotChangeFields: function (inChangeFields) {
        var resultFields = [];
        if (inChangeFields != "") {
            var fields = inChangeFields.split(",");
            var columnIndex = -1;
            for (var i = 0; i < fields.length; i++) {
                columnIndex = this._owner.GetColumnIndex(fields[i]);
                if (columnIndex > -1) resultFields.push(columnIndex);
            }
        }
        return resultFields;
    },

    GetEditMenuEnabled: function () {
        if (this.GridEditHelper != null) {
            return this.GridEditHelper.editMenuEnabled;
        }
        return false;
    },

    SetEditMenuEnabled: function (enabled) {
        if (this.GridEditHelper != null) {
            this.GridEditHelper.editMenuEnabled = enabled;
        }
    },

    GetAutoEditEnabled: function () {
        if (this.GridEditHelper != null) {
            return this.GridEditHelper.autoEditModel;
        }
        return false;
    },

    SetAutoEditEnabled: function (enabled) {
        if (this.GridEditHelper != null) {
            this.GridEditHelper.autoEditModel = enabled;
        }
    },
    GetAutoAddNewRowOnLastCellReturnEnabled: function () {
        if (this.GridEditHelper != null) {
            return this.GridEditHelper.autoAddNewRowOnLastCellReturn;
        }
        return false;
    },

    SetAutoAddNewRowOnLastCellReturnEnabled: function (enabled) {
        if (this.GridEditHelper != null) {
            this.GridEditHelper.autoAddNewRowOnLastCellReturn = enabled;
        }
    },

    //绑定事件
    AttachEvents: function () {
        var gridBodyEventsHandler = this;
        //容器滚动事件
        if (this.tableContainer != this._owner.UNDEFINED_VALUE) {
            // this.tableContainer.attachEvent("onscroll",this.LayoutScrollReceive);
            //var _GridFrozenColumnsHelper = GridFrozenColumnsHelper.GetInstance($(this.tableContainer))
            //var panelFirstConfig = {
            //     latency: 500,_GridFrozenColumnsHelper:_GridFrozenColumnsHelper
            //};
            //$(this.tableContainer).bind("scroll", this.LayoutScrollReceive);
            //$(this.tableContainer).on('scrollstart', panelFirstConfig, this.LayoutScrollReceiveStart);
            //$(this.tableContainer).on('scrollstop', panelFirstConfig, this.LayoutScrollReceiveStop);
        }
        //连接表体相关事件
        if (this.tableBody != this._owner.UNDEFINED_VALUE) {
            if (this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Browser) {

                this.tableBody.onclick = function () {
                    //console.log('onclick');
                    if (gridBodyEventsHandler.tableBody != null) {
                        if (window.currentGridClickTimeout != null) {
                            window.clearTimeout(window.currentGridClickTimeout);
                            window.currentGridClickTimeout = null;
                        }
                        //return;
                    }
                    //wangl: 容错, tb 可能为 null.
                    if (!gridBodyEventsHandler || gridBodyEventsHandler._owner.m_eventProcessLock)
                        return;

                    this.tmpEvent = new Object();
                    this.tmpEvent.altKey = window.event.altKey;
                    this.tmpEvent.ctrlKey = window.event.ctrlKey;
                    this.tmpEvent.srcElement = window.event.srcElement;
                    this.tmpEvent.keyCode = window.event.keyCode;
                    this.tmpEvent.type = window.event.type;
                    this.tmpEvent.shiftKey = window.event.shiftKey;
                    this.tmpEvent.x = window.event.x;
                    this.tmpEvent.y = window.event.y;

                    window.currentGridClickTimeout = window.setTimeout(function (tableBody) {
                        try {
                            gridBodyEventsHandler.CellClickReceive(tableBody.tmpEvent);
                        } catch (e) {
                            console.log(e)
                        }
                    }(this), 1000);
                    $Event(event).stopPropagation();
                }; // this.CellClickReceive;
                this.tableBody.ondblclick = function () {
                    //console.log('ondblclick');
                    if (gridBodyEventsHandler._owner.m_eventProcessLock) return;
                    if (window.currentGridClickTimeout) {
                        window.clearTimeout(window.currentGridClickTimeout);
                        window.currentGridClickTimeout = null;
                    }
                    gridBodyEventsHandler.CellDBClickReceive(this.tmpEvent);
                };
            } else {
                this.tableBody.ondblclick = this.CellDBClickReceive;
                this.tableBody.onclick = this.CellClickReceive;
            }
            //this.tableBody.onkeypress = this.CellKeyDownReceive;
            this.tableBody.onkeydown = this.CellKeyDownReceive;
            //this.tableBody.onkeydown = this.CellKeyDown;
        }
        //连接控件事件
        if (this.thisControl != this._owner.UNDEFINED_VALUE) {
            this.thisControl.onfocusout = this.ControlFocusOutReceive;
        }
        if (this.tableHead != this._owner.UNDEFINED_VALUE) {
            this.AttachHeadSelectEvent(this.tableHead);
        }
    },
    DetachEvents: function () {
        if (this.tableContainer) {
            $(this.tableContainer).unbind("scroll", this.LayoutScrollReceive);
        }
        if (this.tableBody) {
            $(this.tableBody).unbind("click", this.CellClickReceive);
            $(this.tableBody).unbind("dblclick", this.CellDBClickReceive);
            $(this.tableBody).unbind("keydown", this.CellKeyDownReceive);
        }
        if (this.thisControl) {
            $(this.tableBody).unbind("focusout", this.ControlFocusOutReceive);
        }
        if (this.tableHead) {
            this.DetachHeadSelectEvent(this.tableHead);
        }
    },

    //增加表头数据行选择事件
    AttachHeadSelectEvent: function (tableHead) {
        if (tableHead.children.length > 0) {
            var cell = tableHead.children[0].cells[0];
            var checkBox = cell.firstChild;

            if (checkBox != this._owner.UNDEFINED_VALUE) {
                if (checkBox.type == "checkbox") {
                    //checkBox.attachEvent("onclick",this.HeadSelectEventReceive)
                    $(checkBox).bind("click", this.HeadSelectEventReceive)

                }
            }
        }
    },
    DetachHeadSelectEvent: function (tableHead) {
        if (tableHead.children.length > 0) {
            var cell = tableHead.children[0].cells[0];
            var checkBox = cell.firstChild;
            if (checkBox) {
                if (checkBox.type == "checkbox") {
                    $(checkBox).unbind("click", this.HeadSelectEventReceive);
                }
            }
        }
    },
    //连接外观管理助手
    AttachFaciesHelper: function (faciesHelperInstance) {
        this.GridFaciesHelper = faciesHelperInstance;
    },

    //连接编辑管理助手
    AttachEditHelper: function (editHelperInstance) {
        this.GridEditHelper = editHelperInstance;
    },

    //选择所有单元
    OnHeadAllSelect: function (srcElement) {
        var checked = srcElement.checked;
        var bodyRows = this._owner.D_Body.rows; //var bodyRows = this.tableBody.rows;
        this._owner.EndEdit(false); //选全之前先中止编辑
        for (var i = 0; i < bodyRows.length; i++) {
            var oldValue = this._owner.IsRowSelected(i);
            this.SetRowHeadSelected(bodyRows[i].cells[0], checked, i);
            //激活行被选择事件
            this._owner.OnBodyRowSelected(i, checked, oldValue);
            // 是否触发 行选中事件
            if (this._owner.HeadSelectedCauseClick === true) {
                this._owner.OnRowClicked();
            }
        }
    },

    //设置行头被选择状态
    SetRowHeadSelected: function (cell, checked, rowIndex) {
        if (cell != this._owner.UNDEFINED_VALUE) {
            var checkbox = cell.firstChild;
            if (checkbox != this._owner.UNDEFINED_VALUE) {
                if (checkbox.type = "checkbox") {
                    checkbox.checked = checked;
                    //this._owner.OnBodyRowSelected(rowIndex,checked);
                }
                //bug?
            }

        }
    },

    //表格布局滚动事件
    OnLayoutScroll: function (srcEvent) { //并发控制

        if (this._owner.m_eventProcessLock) return;
        this._owner.m_eventProcessLock = true;
        if (this.GridFaciesHelper != null) {
            this.GridFaciesHelper.OnLayoutScroll(srcEvent);
        }
        if (this.GridEditHelper != null) {
            this.GridEditHelper.OnLayoutScroll(srcEvent);
        }
        this._owner.m_eventProcessLock = false;
    },
    //表格布局滚动事件开始
    OnLayoutScrollStart: function (srcEvent) { //并发控制

        if (this._owner.m_eventProcessLock) return;
        this._owner.m_eventProcessLock = true;
        if (this.GridFaciesHelper != null) {
            this.GridFaciesHelper.OnLayoutScrollStart(srcEvent);
        }
        if (this.GridEditHelper != null) {
            this.GridEditHelper.OnLayoutScrollStart(srcEvent);
        }
        this._owner.m_eventProcessLock = false;
    },
    //表格布局滚动事件结束
    OnLayoutScrollStop: function (srcEvent) { //并发控制

        if (this._owner.m_eventProcessLock) return;
        this._owner.m_eventProcessLock = true;
        if (this.GridFaciesHelper != null) {
            this.GridFaciesHelper.OnLayoutScrollStop(srcEvent);
        }
        if (this.GridEditHelper != null) {
            this.GridEditHelper.OnLayoutScrollStop(srcEvent);
        }
        this._owner.m_eventProcessLock = false;
    },
    //响应键盘事件
    OnCellKeyDown: function (srcEvent) {
        //并发控制
        if (_ClientCallBackManager && _ClientCallBackManager.Runing) {
            return;
        }
        if (this._owner.m_eventProcessLock) {
            return;
        }

        this._owner.m_eventProcessLock = true;
        if (!this.MoveCurrentCellKeyDown(srcEvent.keyCode) && srcEvent.keyCode != KeyCode.del) { //如果不是移动单元键值输入，则认为要开始编辑
            if (this.GridEditHelper != null) this._owner.fireEventOnkeypress(); //先处理内部动作
            var cell = this.GridFaciesHelper.GetCurrentCell(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
            if (!(cell && cell.firstChild && (cell.firstChild.tagName == "INPUT" || cell.firstChild.tagName == "SPAN" || cell.firstChild.tagName == "TEXTAREA"))) {
                if (this.GridEditHelper && this.GridEditHelper.CellEditActive)
                    this.GridEditHelper.CellEditActive = false;
            }
            /*if(this._owner.IsNeedSwitchTabPage(this._owner.m_currentColumnIndex))
        {
            //this._owner.ImitateSwitchTabPage();
            var switchPost="$find('" + this._owner.get_id() + "').ImitateSwitchTabPage();";
            var action="if(_ClientCallBackManager.Runing == true || _ClientPostBackManager.Runing == true || $find('"+this._owner.get_id()+"').IsThisGirdPosting) { _ClientJSExecQueueManager.Push(\"" + switchPost + "\"); } ";//
            action += "else { eval(\"" + switchPost + "\"); }";
            window.setTimeout(action,0);
        } else { this.StartEditKeyDown(srcEvent.keyCode); }*/
            if (srcEvent.keyCode != KeyCode.up && srcEvent.keyCode != KeyCode.down) {
                this.StartEditKeyDown(srcEvent.keyCode);
            }
            /*if(this._owner.IsNeedSwitchTabPage(this._owner.m_currentColumnIndex))
            {
                var switchPost="$find('" + this._owner.get_id() + "').Focus(true);";
                var action="if(_ClientCallBackManager.Runing == true || _ClientPostBackManager.Runing == true || $find('"+this._owner.get_id()+"').IsThisGirdPosting) { _ClientJSExecQueueManager.Push(\"" + switchPost + "\"); } ";//
                action += "else { eval(\"" + switchPost + "\"); }";
                window.setTimeout(action,0);
            }
            else { this.StartEditKeyDown(srcEvent.keyCode); }*/
        }
        this._owner.m_eventProcessLock = false;
    },
    //响应键盘事件,延迟键盘响应
    DoCellKeyDown: function (srcEvent) {
        //并发控制
        if (_ClientCallBackManager && _ClientCallBackManager.Runing) {
            return;
        }
        if (this._owner.m_eventProcessLock) {
            return;
        }

        this._owner.m_eventProcessLock = true;
        if (!this.MoveCurrentCellKeyDown(srcEvent.keyCode)) { //如果不是移动单元键值输入，则认为要开始编辑
            if (this.GridEditHelper != null) this._owner.fireEventOnkeypress(); //先处理内部动作
            var cell = this.GridFaciesHelper.GetCurrentCell(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
            if (!(cell && cell.firstChild && (cell.firstChild.tagName == "INPUT" || cell.firstChild.tagName == "SPAN" || cell.firstChild.tagName == "TEXTAREA"))) {
                if (this.GridEditHelper && this.GridEditHelper.CellEditActive)
                    this.GridEditHelper.CellEditActive = false;
            }
            /*if(this._owner.IsNeedSwitchTabPage(this._owner.m_currentColumnIndex))
        {
            //this._owner.ImitateSwitchTabPage();
            var switchPost="$find('" + this._owner.get_id() + "').ImitateSwitchTabPage();";
            var action="if(_ClientCallBackManager.Runing == true || _ClientPostBackManager.Runing == true || $find('"+this._owner.get_id()+"').IsThisGirdPosting) { _ClientJSExecQueueManager.Push(\"" + switchPost + "\"); } ";//
            action += "else { eval(\"" + switchPost + "\"); }";
            window.setTimeout(action,0);
        } else { this.StartEditKeyDown(srcEvent.keyCode); }*/
            if (srcEvent.keyCode != KeyCode.up && srcEvent.keyCode != KeyCode.down) {
                this.StartEditKeyDown(srcEvent.keyCode);
            }
            /*if(this._owner.IsNeedSwitchTabPage(this._owner.m_currentColumnIndex))
            {
                var switchPost="$find('" + this._owner.get_id() + "').Focus(true);";
                var action="if(_ClientCallBackManager.Runing == true || _ClientPostBackManager.Runing == true || $find('"+this._owner.get_id()+"').IsThisGirdPosting) { _ClientJSExecQueueManager.Push(\"" + switchPost + "\"); } ";//
                action += "else { eval(\"" + switchPost + "\"); }";
                window.setTimeout(action,0);
            }
            else { this.StartEditKeyDown(srcEvent.keyCode); }*/
        }
        this._owner.m_eventProcessLock = false;
        this._owner.inRequestProcess = false;
        srcEvent = null;
    },
    GetPoint: function (objC) {
        objC.focus();
        var len = 0;
        //mahx 20160706 解决Grid按左右建的时候，浏览器兼容问题，此方法主要是获取选中的文本框的光标位置。
        //ie下没有objC.selectionStart，所以用了selection，先取到光标选中内容：workRange，然后全选文本框再获取选中内容：allRange，
        //用workRange.setEndPoint("StartToStart", allRange);将workRange的选中开始位置设置为全文的开始位置，这样可以判断内容长度，获取workRange的光标位置
        //比如：控件内容是：abcdef，我鼠标选中了cd，然后想获取当前的光标位置（4），先创建一个workRange，此区域的开始到结束位置：2-4，然后全选再创建一个allRange，此时选中位置：1-6，
        //然后StartToStart把allRange的开始位置设置到workRange开始位置上，workRange此时的区域是：1-4，此时获取workRange的长度，就是光标位置。
        //非IE下的objC.selectionStart既可以直接获取光标位置。
        if (document.selection) {
            var selection = document.selection;
            if (selection.type) {
                try {
                    var workRange = selection.createRange();
                    objC.select();
                    var allRange = selection.createRange();
                    workRange.setEndPoint("StartToStart", allRange);
                    len = workRange.text.length;
                    workRange.collapse(false);
                    workRange.select();
                } catch (ex) {
                    //console.log(ex);
                }
            }
        }
        else {
            try {
                len = objC.selectionStart;
            } catch (ex) {
                //console.log(ex);
            }
        }
        return len;
    },
    FireRowSelectEvent: function (checkBox) {
        //激活行被选择事件
        this._owner.OnBodyRowSelected(this._owner.m_currentRowIndex, checkBox.checked, !checkBox.checked);
        this._owner.OnBodyRowSelectedClick(this._owner.m_currentRowIndex, checkBox.checked);
        //zjx add
        this._owner.OnRowClicked();
    },
    //移动当前光标
    MoveCurrentCellKeyDown: function (keyCode) {
        //zjx add
        //window.status = keyCode;
        if (keyCode == KeyCode.ESC) {
            this.GridFaciesHelper.OutSelectCellBorder(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex, false);
        }
        if (window.event.altKey) {
            return false;
        }
        if (event.keyCode == KeyCode.space && this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Browser) {
            //if(event.keyCode==KeyCode.space){
            var checkBox = this._owner.D_Body.rows[this._owner.m_currentRowIndex].getElementsByTagName("input")[0];
            if (checkBox) {
                if (checkBox.type != "checkbox") return true;
                //checkBox.focus();
                checkBox.checked = !checkBox.checked;
                this.FireRowSelectEvent(checkBox);
                this._owner.SetHeadCheckBoxState(true); //设置表头状态
                $Event(event).stopPropagation();
                $Event(event).preventDefault();
            }
        }
        if (event.keyCode == KeyCode.space && event.shiftKey && this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Edit) { // 66 为 字母 b
            var checkBox = this._owner.D_Body.rows[this._owner.m_currentRowIndex].getElementsByTagName("input")[0];
            if (checkBox) {
                if (checkBox.type != "checkbox") return true;
                checkBox.checked = !checkBox.checked;
                this.FireRowSelectEvent(checkBox);
                $Event(event).stopPropagation();
                $Event(event).preventDefault();
            }
        }

        if (window.event.ctrlKey) {
            if (this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Browser) {
                if (keyCode == KeyCode.enter) {
                    this._owner.m_gridFaciesManager.OnBodyCellDBClicked(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                } else if (keyCode == KeyCode.s) {
                    var c = this._owner.m_gridBodyEventsHandler.tableHead;
                    if (c) {
                        var cell = c.children[0].cells[0];
                        var checkBox = cell.firstChild;
                        if (checkBox) {
                            checkBox.checked = !checkBox.checked;
                            this._owner.SelectAllRow(checkBox.checked);
                            this.FireRowSelectEvent(checkBox);
                        }
                    }
                }
                // else if (keyCode == 67) {//mahx客户提需求，如果跨列选择一下，那么选中然后复制的内容前面多很多空格，他们想要去掉这些空格
                //     var message = "";
                //     if (document.selection)
                //         message = document.selection.createRange().text;
                //     if (!message && window.getSelection())
                //         message = window.getSelection().toString();
                //     if (message) {
                //         //空格在快捷键复制时取值转16进制有问题，做个替换
                //         message = message.replace(/^[\s\n\t]+/g, "").replace(/\s/g," ")
                //     }
                //     if (message){
                //         Clipboard.setData(message);
                //         //$Event(event).stopPropagation();
                //         $Event(event).preventDefault();
                //     }
                // }
            } else if (this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Edit && keyCode == KeyCode.s) {
                if (this._owner.m_gridBodyEventsHandler) {
                    var c = this._owner.m_gridBodyEventsHandler.tableHead;
                    if (c) {
                        var cell = c.children[0].cells[0];
                        var checkBox = cell.firstChild;
                        if (checkBox) {
                            checkBox.checked = !checkBox.checked;
                            this._owner.SelectAllRow(checkBox.checked);
                            this.FireRowSelectEvent(checkBox);
                        }
                    }
                }

            } else {
                if (keyCode == KeyCode.M) {
                    this._owner.m_gridBodyEventsHandler.GridEditHelper.ShowMenu(this._owner.m_currentRowIndex);
                } else if (keyCode == 67) {
                    var cell = this.GridEditHelper.GetCurrentCell(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                    if (cell) {
                        var message = "";
                        if (document.selection)
                            message = document.selection.createRange().text;
                        if (!message && window.getSelection())
                            message = window.getSelection().toString();
                        //如果选择区域上有内容，则走默认的复制逻辑，不去干预
                        //mahx客户提需求，如果跨列选择一下，那么选中然后复制的内容前面多很多空格，他们想要去掉这些空格
                        if (message) {
                            message = message.replace(/^[\s\n\t]+/g, "")
                            Clipboard.setData(message);
                            //$Event(event).stopPropagation();
                            $Event(event).preventDefault();
                            //zhaoliann_问题号：201811080170
                            $(cell).find("input").focus();
                        }
                        //如果选择区域没内容，则走我们定义的逻辑，赋值整个cell的内容
                        else {
                            var inputs = cell.getElementsByTagName("input");
                            if (!inputs || inputs.length == 0) {
                                inputs = cell.getElementsByTagName("textarea");
                            }
                            if (!inputs || inputs.length == 0) {
                                //window.clipboardData.setData("Text", cell.innerText);
                                message = cell.innerText;
                            }//其余的不要管会走浏览器默认的复制
                            if (message)
                                Clipboard.setData(message);
                        }
                    }
                }
            }
            if (keyCode != KeyCode.insert) { //add by  lzhm 20080709 Ctrl + Insert 增加新行，所以不能直接返回
                return false;
            }
        }
        var result = false; //返回是否已经移动光标

        switch (keyCode) {
            case 123:
                HeadEventsManager.Owner = this._owner;
                HeadEventsManager.Owner.m_behaviorManager.HeadEventsManager.OnKeyDownClick(this._owner.m_currentColumnIndex);
                break;
            case KeyCode.left: //光标向左,右移动
            {
                if (event.shiftKey)
                    return;
                this._owner.GridIsInFocus = true;
                var t = event.srcElement;
                var nP = 0;
                if (t && (t.tagName == "INPUT" || t.tagName == "TEXTAREA")) {
                    var nP = this.GetPoint(t);
                }
                if (nP == 0) {

                    if (this.CanEndEdit(false)) { //先终止编辑,如果不能终止编辑则不允许移动
                        var oldRowIndex = this._owner.m_currentRowIndex;
                        //zjx add
                        this._owner.m_lastRowIndex = oldRowIndex;
                        if (this.GetNextCellPosition(keyCode)) {
                            if (this.CanRowChanged(oldRowIndex)) { //允许行交换
                                this.GridFaciesHelper.SetCurrentCellStyle(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                                if (this._owner.m_currentRowIndex != oldRowIndex) this._owner.OnRowChanged(); //行位置转换事件
                            }
                        }
                        result = true; //光标移动键已被截取
                    }
                }
                break;
            }
            case KeyCode.right:
            {
                if (event.shiftKey)
                    return;
                this._owner.GridIsInFocus = true;
                /*if((this.GridEditHelper!=null && this.GridEditHelper.CellEditActive))
                {   //正在编辑时左右光标键不起作用
                if(this.GetNextCellPosition(keyCode))
                {
                if(this.GridFaciesHelper!=null)
                {   //设置当前单元
                this.GridFaciesHelper.SetCurrentCellStyle(this._owner.m_currentRowIndex,this._owner.m_currentColumnIndex);
                }
                }
                result =true; //光标移动键已被截取
                } */
                var t = event.srcElement;
                if (t && (t.tagName == "INPUT" || t.tagName == "TEXTAREA")) {
                    var bCheckbox = false;
                    if (t.type == "checkbox") {
                        bCheckbox = true;
                    } else {
                        var nP = this.GetPoint(t);
                        if (t.parentElement.control)
                            if (t.parentElement.control.get_Type() == ControlType.DropDownList) {
                                nP = t.value.length;
                            } else {
                                //if(nP!=0)
                                if (nP != 0 && nP == t.value.length) {
                                    if (!t.cusAttr("notfirstIn")) {
                                        var ctrlType = t.parentElement.control.get_Type();
                                        var cellChanged = false;
                                        if (ctrlType == ControlType.DateTime) {
                                            cellChanged = ($find(t.parentNode.id).get_Text() != t.value);
                                        } else {
                                            cellChanged = ($find(t.parentNode.id).get_Value() != t.value);
                                        }
                                        t.cusAttr("notfirstIn", cellChanged ? "N" : "Y");
                                    }
                                    if (t.cusAttr("notfirstIn") == "Y") {
                                        nP = nP - 1;
                                        t.cusAttr("notfirstIn", "N");
                                    } else {
                                        t.cusAttr("notfirstIn", "Y");
                                    }

                                }
                            }
                    }

                    if (nP == t.value.length || bCheckbox) {
                        if (this.CanEndEdit(false)) { //先终止编辑,如果不能终止编辑则不允许移动
                            if (t.cusAttr("notfirstIn")) {
                                t.cusAttr("notfirstIn", null);
                            }
                            var oldRowIndex = this._owner.m_currentRowIndex;
                            //zjx add
                            this._owner.m_lastRowIndex = oldRowIndex;
                            if (this.GetNextCellPosition(keyCode)) {
                                if (this.CanRowChanged(oldRowIndex)) { //允许行交换
                                    this.GridFaciesHelper.SetCurrentCellStyle(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                                    if (this._owner.m_currentRowIndex != oldRowIndex) this._owner.OnRowChanged(); //行位置转换事件
                                }
                            }
                            result = true; //光标移动键已被截取
                        }
                    }
                } else {
                    if (this.CanEndEdit(false)) { //先终止编辑,如果不能终止编辑则不允许移动
                        var oldRowIndex = this._owner.m_currentRowIndex;
                        //zjx add
                        this._owner.m_lastRowIndex = oldRowIndex;
                        if (this.GetNextCellPosition(keyCode)) {
                            if (this.CanRowChanged(oldRowIndex)) { //允许行交换
                                if (this._owner.m_currentColumnIndex == 0) {
                                    var resultIndex = 0;
                                    for (var i = 1; i < this._owner.m_columns; i++) {
                                        if (this._owner.MainCols[i].style.display == "none") {
                                            continue;
                                        } else {
                                            resultIndex = i;
                                            break;
                                        }
                                    }
                                    this._owner.m_currentColumnIndex = resultIndex;
                                }
                                this.GridFaciesHelper.SetCurrentCellStyle(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                                if (this._owner.m_currentRowIndex != oldRowIndex) this._owner.OnRowChanged(); //行位置转换事件
                            }
                        }
                        result = true; //光标移动键已被截取
                    }
                }
                break;
            }
            //case KeyCode.tab:    //
            case KeyCode.up: //光标上下和顺序移动
            case KeyCode.down: //光标向下移动
            case KeyCode.enter: //光标顺序移动
            {
                result = this.DoKeyEvent(keyCode);
                break;
            }
            case KeyCode.home:
            { //键盘翻页 第一页
                if (event.shiftKey)
                    return;
                if (this._owner.m_pageBreakManagerInstance != null) this._owner.m_pageBreakManagerInstance.OnFirstPageReceive();
                this._owner.StoreState("Y");
                this._owner.GridIsInFocus = true;
                break;
            }
            case KeyCode.end:
            { //键盘翻页 最后一页
                if (event.shiftKey)
                    return;
                if (this._owner.m_pageBreakManagerInstance != null) this._owner.m_pageBreakManagerInstance.OnLastPageReceive();
                this._owner.StoreState("Y");
                this._owner.GridIsInFocus = true;
                break;
            }
            case KeyCode.pup:
            { //键盘翻页 上一页
                if (this._owner.m_pageBreakManagerInstance != null) this._owner.m_pageBreakManagerInstance.OnPreviousPageReceive();
                this._owner.StoreState("Y");
                this._owner.GridIsInFocus = true;
                break;
            }
            case KeyCode.pdn:
            { //键盘翻页 下一页
                if (this._owner.m_pageBreakManagerInstance != null) this._owner.m_pageBreakManagerInstance.OnNextPageReceive();
                this._owner.StoreState("Y");
                this._owner.GridIsInFocus = true;
                break;
            }
            case KeyCode.del:
            {
                //zjx modify
                if (this._owner.get_element().cusAttr('EditStatus') != DisplayStyle.Browser && (!this._owner.m_InCellEditing)) {
                    //zjx
                    //if (event.srcElement.tagName == "INPUT") {
                    //    $Event(event).stopPropagation();
                    //} else {
                    if (this.CanEndEdit(false)) { //先终止编辑,如果不能终止编辑则不允许删除
                        //this.GridEditHelper.OnRemoveRow();
                        if (this._owner.m_editMenuToolbar) {
                            this._owner.m_editMenuToolbar.OnDeleteClicked();

                            $Event(event).stopPropagation();
                            $Event(event).preventDefault();
                        }
                    }
                    //}
                }
                break;
            }
            case KeyCode.insert:
            {
                //zjx modify
                if (this._owner.get_element().cusAttr('EditStatus') != DisplayStyle.Browser) {
                    if (this.CanEndEdit(false)) { //先终止编辑,如果不能终止编辑则不允许移动
                        if (event.shiftKey || event.ctrlKey) {
                            //this.GridEditHelper.OnAddRow();
                            if (this._owner.m_editMenuToolbar) {
                                this._owner.m_editMenuToolbar.OnAddClicked();
                            }
                        } else {
                            //this.GridEditHelper.OnInsertRow();
                            if (this._owner.m_editMenuToolbar) {
                                this._owner.m_editMenuToolbar.OnInsertClicked();
                            }
                        }
                        this._owner.Focus();
                    }
                }
                break;
            }
        } //end switch
        if (result == true && this.GridEditHelper) {
            /*if(this._owner.IsNeedSwitchTabPage(this._owner.m_currentColumnIndex)) {
                var cell =this.GridEditHelper.GetCurrentCell(this._owner.m_currentRowIndex,this._owner.m_currentColumnIndex);
                //cell.focus();
                this._owner.Focus(false);
                //cell.setAttribute("",
            } else {
                this.GridEditHelper.StartEdit();
            }*/
            if (this._owner.m_isRelaySwitchTag && this._owner.IsNeedSwitchTabPage(this._owner.m_currentColumnIndex)) {
                /*var switchPost="$find('" + this._owner.get_id() + "').ImitateSwitchTabPage();";
                var action="if(_ClientCallBackManager.Runing == true || _ClientPostBackManager.Runing == true || $find('"+this._owner.get_id()+"').IsThisGirdPosting) { _ClientJSExecQueueManager.Push(\"" + switchPost + "\"); } ";//
                action += "else { eval(\"" + switchPost + "\"); }";
                window.setTimeout(action,0);*/
            } else {
                this.GridEditHelper.StartEdit();
            }
        }
        return result;
    },
    DoKeyEvent: function (keyCode, tmpEvent) {

        this._owner.GridIsInFocus = true;
        var rowIndex = this._owner.m_currentRowIndex;
        if (!tmpEvent) {
            tmpEvent = window.event;
        }
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows && this._owner.IsPersonalColumnByMoved(this._owner.m_currentColumnIndex)) {
            if (event && (event.keyCode == KeyCode.up || event.keyCode == KeyCode.down)) {
                if (this.CanEndEdit(false)) {
                    var doStr = "var tmpEvent = new Object();tmpEvent.shiftKey = " + (tmpEvent.shiftKey ? "true" : "false") + ";tmpEvent.keyCode = " + keyCode + ";$find('" + this._owner.get_id() + "').MoveToNextPosition(" + keyCode + ",tmpEvent);$find('" + this._owner.get_id() + "').Focus(true);";
                    var action = "if(_ClientCallBackManager.Runing == true || _ClientPostBackManager.Runing == true || $find('" + this._owner.get_id() + "').IsThisGirdPosting) { _ClientJSExecQueueManager.Push(\"" + doStr + "\"); } ";
                    action += "else { eval(\"" + doStr + "\");}";
                    window.setTimeout(action, 0);
                    $Event(event).stopPropagation();
                    $Event(event).preventDefault();
                    return false;
                }
            }
        }
        if (keyCode == KeyCode.down) {
            rowIndex++;
        } else if (keyCode == KeyCode.up) {
            if (rowIndex > 0) {
                rowIndex--;
            }
        }
        result = false;
        //if(this._owner.get_element().EditStatus !=DisplayStyle.Browser)
        //{
        //yangkuna_如果到了边界，则不作移动处理
        if (rowIndex < 0 || rowIndex >= this._owner.m_rows) {
            result = true;
        } else if (this.CanEndEdit(false)) //先终止编辑,如果不能终止编辑则不允许移动
        {
            //当目前有PostBack发起时，则不进行焦点跳转，等PostBack结束之后再接着跳转。2009-5-27 lzhm
            var isSecond = false;
            if (tmpEvent && tmpEvent.isSecond) {
                isSecond = true;
            }
            //如果callback在跑则需要等待 问题号;201804100202
            if (this._owner.IsThisGirdPosting || _ClientCallBackManager.Runing == true) {
                //yangkuna_20100712:方向键也处理
                //if(keyCode == KeyCode.enter){ //只处理回车情况，避免有行切换PostBack时，无法键盘切换行
                _ClientJSExecQueueManager.Push("var tmpEvent = new Object();tmpEvent.isSecond=true;tmpEvent.shiftKey = " + (tmpEvent.shiftKey ? "true" : "false") + ";tmpEvent.keyCode = " + keyCode + ";$find(\"" + this._owner.get_id() + "\").m_gridBodyEventsHandler.DoKeyEvent(" + keyCode + ",tmpEvent);$find('" + this._owner.get_id() + "').Focus(true);");
                return;
                //}
            } else if (!isSecond && this._owner.IsPersonalColumnByMoved(this._owner.m_currentColumnIndex)) {
                _ClientJSExecQueueManager.Add("var tmpEvent = new Object();tmpEvent.isSecond=true;tmpEvent.shiftKey = " + (tmpEvent.shiftKey ? "true" : "false") + ";tmpEvent.keyCode = " + keyCode + ";$find(\"" + this._owner.get_id() + "\").m_gridBodyEventsHandler.DoKeyEvent(" + keyCode + ",tmpEvent);$find('" + this._owner.get_id() + "').Focus(true);");
                return;
            }
            var oldRowIndex = this._owner.m_currentRowIndex;
            this._owner.m_lastRowIndex = oldRowIndex;
            if (this.GetNextCellPosition(keyCode, tmpEvent)) {
                this.GridFaciesHelper.SetCurrentCellStyle(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                if (this._owner.m_currentRowIndex != oldRowIndex) {
                    this._owner.OnRowChanged(); //行位置转换事件
                    //this._owner.OnBodyRowSelected();
                }
                setTimeout(new Function("if($find('" + this._owner.get_id() + "')) { $find('" + this._owner.get_id() + "').Focus(false); }"), 30);
            }
            result = true; //光标移动键已被截取
        }
        //}
        if (event && (event.keyCode == KeyCode.up || event.keyCode == KeyCode.down)) {
            $Event(event).stopPropagation();
            $Event(event).preventDefault();
        }
        return result;
    },
    //当前行变换允许
    CanRowChanged: function (oldRowIndex) {
        if (oldRowIndex != this._owner.m_currentRowIndex && !this._owner.m_gridReadOnly) {
            if (this.GridEditHelper != null) {
                if (!this.GridEditHelper.OnBeforeRowChange(oldRowIndex)) {
                    this._owner.m_currentRowIndex = oldRowIndex;
                    return false;
                }
            }
        }
        return true;
    },

    //取得下一单元坐标：
    // true 移动成功  false 移动失败
    GetNextCellPosition: function (keyCode, tmpEvent) {
        var result = true;
        switch (keyCode) {
            case KeyCode.left:
            {
                if (this._owner.m_currentColumnIndex == 1) {
                    this._owner.m_currentColumnIndex = this._owner.GetPreviousColumn(this._owner.m_columns - 1);
                } else {
                    this._owner.m_currentColumnIndex = this._owner.GetPreviousColumn(this._owner.m_currentColumnIndex - 1);
                }
                break;
            }
            case KeyCode.right:
            {
                if (this._owner.IsEndColumn(this._owner.m_currentColumnIndex + 1)) {
                    this._owner.m_currentColumnIndex = this._owner.GetNextColumn(1);
                } else {
                    this._owner.m_currentColumnIndex = this._owner.GetNextColumn(this._owner.m_currentColumnIndex + 1);
                }
                break;
            }
            case KeyCode.up:
            {
                if (this._owner.m_currentRowIndex > 0) {
                    this._owner.m_currentRowIndex = Number(this._owner.m_currentRowIndex) - 1;
                }
                break;
            }
            case KeyCode.down:
            {
                if (this._owner.m_currentRowIndex < this._owner.m_rows - 1) {
                    this._owner.m_currentRowIndex = Number(this._owner.m_currentRowIndex) + 1;
                }
                break;
            }
            //case KeyCode.tab:
            case KeyCode.enter:
            {
                if (window.event) {
                    tmpEvent = window.event
                }
                if (tmpEvent.shiftKey) {
                    tmpEvent.keyCode = KeyCode.left
                    return this.GetNextCellPosition(tmpEvent.keyCode);
                }

                if (this._owner.get_element().cusAttr('EditStatus') != DisplayStyle.Browser) {
                    /*
            2.1 修改焦点切换方案 2010.6.30 lzhm
            1、老版本处理逻辑，回车后，找到下一个可编辑单元格置焦点，如果未找到，会遍历所有的行和列
            2、新版的处理逻辑，回车后，在本单元格到下一行此列单元格内，找到一个可编辑的控件置入，如无则
               置到最后一个单元格上，即相当于在同一列向下移动了一个单元格
            */

                    var oldColumnIndex = this._owner.m_currentColumnIndex;
                    if (this._owner.IsEndColumn(this._owner.m_currentColumnIndex + 1)) {
                        if (this._owner.m_currentRowIndex == this._owner.m_rows - 1) {
                            //result =false; //不能继续移动
                            this._owner.m_currentColumnIndex = this._owner.GetNextColumn(1);
                            if (this._owner && this._owner.m_gridBodyEventsHandler && this._owner.m_gridBodyEventsHandler.GridEditHelper) {
                                var tmpEditHelper = this._owner.m_gridBodyEventsHandler.GridEditHelper;
                                if (tmpEditHelper.autoAddNewRowOnLastCellReturn && tmpEditHelper.autoEditModel && (this._owner.m_currentRowIndex == (this._owner.m_rows - 1))) { //在最后一行编辑
                                    if (tmpEditHelper.GridCRUDHelper != null) { //增加新的空行
                                        if (!this._owner.OnBeforeRowAdd()) {
                                            this._owner.ResetRowStates(this._owner.m_currentRowIndex);
                                            var rowIndex = tmpEditHelper.GridCRUDHelper.AddNewEmptyRow();
                                            if (rowIndex != -100) {
                                                tmpEditHelper.GridCRUDHelper.InitEmptyRow(rowIndex);
                                                this._owner.OnAfterRowAdded(rowIndex);
                                                this._owner.m_currentRowIndex = rowIndex;
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            var _tmpColIndex = 0;

                            if (this._owner.m_currentRowIndex + 1 < this._owner.m_rows) {
                                this._owner.m_currentRowIndex += 1;
                                _tmpColIndex = this._owner.GetNextColumn(1, oldColumnIndex);
                                if (_tmpColIndex != 0) {
                                    this._owner.m_currentColumnIndex = _tmpColIndex;
                                    break;
                                }
                            }
                        }
                    } else {
                        //if call AllowEdit then columnIndex already ++
                        this._owner.m_currentColumnIndex = this._owner.GetNextColumn(this._owner.m_currentColumnIndex + 1);
                    }
                }
                break;
            }
        }
        return result;
    },

    //判断是否应该终止编辑
    CanEndEdit: function (clicked) {
        //zjx add
        //this._owner.StoreState("Y");
        //
        var result = true; //可以终止编辑
        if (this.GridEditHelper != null && this.GridEditHelper.CellEditActive) {
            result = this.GridEditHelper.EndEdit(clicked);
        }
        return result;
    },

    //判断是否为开始编辑输入键
    StartEditKeyDown: function (keyCode) {
        if (this.GridEditHelper != null) {
            if (this.GridEditHelper.CellEditActive) {
                this.GridEditHelper.AcceptEdit();
            } else {
                if (this.IsEditKeyCode(keyCode)) {
                    this.GridEditHelper.StartEdit();
                }
            }
        }
    },

    //判断当前键盘键入值是否为编辑键
    IsEditKeyCode: function (keyCode) {
        var editKey = true;
        if (keyCode == 27) return false;
        /*if(keyCode <32 || (keyCode >111 && keyCode<124))
        {
            editKey =false;
        }
        else*/
        {
            switch (keyCode) {
                case 33: //pageup
                case 34: //pagedown
                case 35: //end
                case 36: //home
                case 45: //insert
                case 46: //delete
                case 91: //
                case 92: //
                case 93: //
                case 144: //break
                case 145: //scrolllock
                {
                    editKey = false;
                    break;
                }
            }
        }
        //zjx modify
        if (keyCode == KeyCode.F2 || event.altKey) {
            editKey = true;
        }
        //lzhm for Ctrl + C,Ctrl + V ..
        if (editKey == true && event.ctrlKey) {
            editKey = false;
        }
        return editKey;
    },

    //双击鼠标开始编辑
    StartEditDBClick: function () {
        if (this.GridEditHelper != null && !this.GridEditHelper.CellEditActive) {
            this.GridEditHelper.StartEdit();
        }
    },

    //当前页面提交
    OnFormPostBack: function () {
        if (this.GridEditHelper != null && this.GridEditHelper.CellEditActive) { //终止行编辑
            result = this.CanEndEdit(false);
        }
    },

    //当前表格排序开始
    OnStartGridColumnSort: function () { //自定义事件不需要并发控制
        if (this.GridFaciesHelper != null) { //将排序事件直接映射到布局管理
            this.GridFaciesHelper.OnStartGridColumnSort();
        }
        this._owner.m_eventProcessLock = false;
    },

    //表格排序终止
    OnEndGridColumnSort: function () {
        //自定义事件不需要并发控制
        if (this.GridFaciesHelper != null) { //终止排序时布局管理对象应该做的处理
            this.GridFaciesHelper.OnEndGridColumnSort();
        }
    },

    //当前单元被点击事件
    OnCellClick: function (srcEvent) {
        if (this.m_eventProcessLock) return;
        var oldRowIndex = this._owner.m_currentRowIndex;
        //zjx add
        this._owner.m_lastRowIndex = oldRowIndex;
        var cell = this.GetClickedCellElement(srcEvent.srcElement);
        if (cell != null) {
            if (this.CanEndEdit(true)) {
                switch (cell.className.split(" ")[0]) {
                    case "thc":
                    case "thcMulti":
                    { //表头单元被点击
                        if (cell && cell.cellIndex == 0)
                            break;
                        if (this.GridEditHelper != null) {
                            this.GridEditHelper.OnHeadCellClicked();
                        }
                        if (this.GridFaciesHelper != null) {
                            this.GridFaciesHelper.OnHeadCellClicked($(cell.parentElement).index(), cell.cellIndex);
                        }
                        break;
                    }
                    case "tbc":
                    { //表体内容单元被点击
                        //yangkuna20100708:如果换行了且有post事件，则等待
                        //如果是totalpage这个callback则不影响客户继续选择。
                        if (cell.parentElement.sectionRowIndex != this._owner.m_currentRowIndex && ((_ClientCallBackManager.Runing == true && _ClientCallBackManager.Args != "TotalPage") || _ClientPostBackManager.Runing == true || this._owner.IsThisGirdPosting)) {
                            var action = "var oldRowIndex=$find('" + this._owner.get_id() + "').m_currentRowIndex;";
                            action += "$find('" + this._owner.get_id() + "').m_currentRowIndex=" + cell.parentElement.sectionRowIndex + ";";
                            action += "$find('" + this._owner.get_id() + "').m_currentColumnIndex=" + cell.cellIndex + ";";
                            action += "$find('" + this._owner.get_id() + "').Focus(true);";
                            action += "if($find('" + this._owner.get_id() + "').m_gridBodyEventsHandler.CanRowChanged(oldRowIndex))";
                            action += "$find('" + this._owner.get_id() + "').OnRowChanged();";
                            Global_JSQueueEvalAfterPageLoadedManager.AddLast(action);
                            break;
                        }
                        this._owner.m_currentRowIndex = cell.parentElement.sectionRowIndex; //设置当前行
                        //
                        //
                        if (this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Browser || !this.GridEditHelper.CellEditHelper.CellEditEnabled(cell.cellIndex, cell)) {
                            var checkBox = this._owner.D_Body.rows[this._owner.m_currentRowIndex].getElementsByTagName("input")[0];
                            if (checkBox) {
                                if (checkBox.type != "checkbox") return true;
                                // checkBox.focus();
                                if (!checkBox.checked && srcEvent.srcElement != checkBox && this._owner.m_isCheckedByClick) {
                                    var oldValue = checkBox.checked;
                                    checkBox.checked = true;
                                    this._owner.OnBodyRowSelected(this._owner.m_currentRowIndex, checkBox.checked, oldValue);
                                    this._owner.OnBodyRowSelectedClick(this._owner.m_currentRowIndex, checkBox.checked);
                                    if (oldValue != checkBox.checked) {
                                        this._owner.SetHeadCheckBoxState(checkBox.checked);
                                    }
                                }
                                // shift选中-hjl
                                this.GridFaciesHelper.ShiftSelect(srcEvent,this._owner.m_currentRowIndex)
                            }

                        }
                        //
                        //
                        if (this.CanRowChanged(oldRowIndex)) {
                            var isSameCol = (this._owner.m_currentColumnIndex == cell.cellIndex);
                            this._owner.m_currentColumnIndex = cell.cellIndex; //设置当前列
                            if (this.GridEditHelper != null) { //表体行被点击
                                this.GridEditHelper.OnBodyCellClicked(this._owner.m_currentRowIndex, srcEvent);
                            }
                            //yangkuna_CellClick是否应该在RowChanged之后？
                            if (oldRowIndex != this._owner.m_currentRowIndex) this._owner.OnRowChanged(); //激活行被改变事件
                            if (this.GridFaciesHelper != null) {
                                this.GridFaciesHelper.OnBodyCellClicked(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex, srcEvent);
                            }
                            //yangkuna_20100617
                            var isSameRow = (oldRowIndex == this._owner.m_currentRowIndex);
                            if (isSameCol && isSameRow && this._owner.IsNeedSwitchTabPage(this._owner.m_currentColumnIndex, this._owner.m_currentRowIndex)) {
                                // lkc 无效逻辑只有checkbox 才能进入.
                                // this._owner.ImitateSwitchTabPage();
                            }

                        }
                        break;
                    }
                    case "tcc": //表体头单元被点击
                    {
                        if (cell.parentElement.parentElement.tagName == 'TFOOT') {
                            if (this.GridEditHelper != null) {
                                this.GridEditHelper.OnFootCellClicked();
                            }
                            break;
                        }
                        //yangkuna20100806:多选时单据了checkbox外时的处理
                        if (srcEvent.srcElement.nodeName == "TD" && cell.firstChild && cell.firstChild.nodeName == "INPUT") {
                            cell.firstChild.checked = !cell.firstChild.checked;
                        }
                        this._owner.m_currentRowIndex = cell.parentElement.sectionRowIndex; //设置当前行
                        if (this.CanRowChanged(this._owner.m_currentRowIndex)) {
                            if (this.GridEditHelper != null && this.GridEditHelper.GridEditMenu != null) {
                                this.GridEditHelper.GridEditMenu.InitMenu();
                            }
                            if (this.GridFaciesHelper != null) {
                                this.GridFaciesHelper.OnBodyRowHeadClicked(this._owner.m_currentRowIndex, cell);
                            }
                            if (this.GridEditHelper != null) {
                                this.GridEditHelper.OnRowHeadClicked(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                            }
                            if (oldRowIndex != this._owner.m_currentRowIndex) this._owner.OnRowChanged(); //激活行被改变事件
                        }
                        this._owner.SetHeadCheckBoxState(true);
                        this.GridFaciesHelper.shiftRowIndexList = [this._owner.m_currentRowIndex,0]
                        this.GridFaciesHelper.startIndex = this._owner.m_currentRowIndex
                        break;
                    }
                    case "tfc":
                    { //表尾单元被点击，暂时不用
                        if (this.GridEditHelper != null) {
                            this.GridEditHelper.OnFootCellClicked();
                        }
                        break;
                    }
                } //end switch
            } //end CanEndEdit
        }
    },

    //单元被双击事件,如果鼠标双击则单击事件一定触发所以如果在此使用并发控制则会导致双击事件永远不能执行
    OnCellDBClick: function (srcEvent) {
        if (this.m_eventProcessLock) return;
        if (!srcEvent) return; //srcEvent为空，不处理
        var oldRowIndex = this._owner.m_currentRowIndex;
        this._owner.m_lastRowIndex = oldRowIndex;

        var cell = this.GetClickedCellElement(srcEvent.srcElement);
        if (cell != null) {
            switch (cell.className.split(" ")[0]) {
                case "thc":
                case "thcMulti":
                { //表头单元被点击
                    if (this.GridFaciesHelper != null) {
                        this.GridFaciesHelper.OnHeadCellDBClicked(cell.parentElement.sectionRowIndex, cell.cellIndex);
                    }
                    break;
                }
                case "tbc":
                { //表体内容单元被双击
                    if (this.GridFaciesHelper != null) {
                        this._owner.m_currentRowIndex = cell.parentElement.sectionRowIndex;
                        this.GridFaciesHelper.OnBodyCellDBClicked(cell.parentElement.sectionRowIndex, cell.cellIndex);
                    }
                        //added by u9lkc 20100118
                    //双击客户端返回
                    else {
                        this._owner.OnBodyCellDBClicked(cell.parentElement.sectionRowIndex, cell.cellIndex);
                    }
                    this.StartEditDBClick(); //鼠标双击时也可以激活编辑
                    break;
                }
                case "tcc": //表体头单元被点击
                {
                    if (cell.parentElement.parentElement.tagName != 'TFOOT' && this.GridFaciesHelper != null) {
                        this.GridFaciesHelper.OnBodyRowHeadDBClicked(cell.parentElement.sectionRowIndex);
                    }
                    break;
                }
                case "tfc":
                { //表尾单元被点击，暂时不用
                    break;
                }
            } //end switch
        }
    },

    //取得被点击的表格单元
    GetClickedCellElement: function (srcElement) {
        if (srcElement.tagName == "TD") {
            return srcElement;
        } else {
            //            if(srcElement.tagName=="NOBR")
            //            {
            //                return srcElement.parentElement;
            //            }
            //            else
            //            {
            //                if(srcElement.tagName=="INPUT" &&  srcElement.type=="checkbox")
            //                {
            //                    return srcElement.parentElement;
            //                }
            //            }
            if (srcElement.tagName == "NOBR" || srcElement.className == "FixedInner" || (srcElement.tagName == "INPUT" && srcElement.type == "checkbox")) {
                var ele = srcElement.parentElement;
                while (ele != null && ele.tagName != "TD") {
                    ele = ele.parentElement;
                }
                return ele;
            }
        }
        return null;
    }
} //end GridBodyEventsHandler class

//取得对象实例
GridBodyEventsHandler.GetInstance = function (thisControl, tableContainer, tableBody, tableHead, owner) {
    if (owner.m_gridBodyEventsHandler == null) {
        owner.m_gridBodyEventsHandler = new GridBodyEventsHandler(thisControl, tableContainer, tableBody, tableHead, owner);
    }
    return owner.m_gridBodyEventsHandler;
} //end GridBodyEventsHandler.GetInstance

/**************************************************************
 功能：管理表格通用行编辑功能
 ***************************************************************/
//tableLayout   表格容器
//tableBody     表体
//thisControl   当前控件
//calculater    表格计算引擎
GridEditManager = function (tableLayout, tableBody, tableFoot, thisControl, owner) {
    this._owner = owner; //gct20070702
    this.tableLayout = tableLayout; //表格背景布局
    this.tableBody = tableBody; //表体
    this.tableFoot = tableFoot; //表尾
    this.thisControl = thisControl; //当前控件
    this.editMenuEnabled = true; //是否允许显示编辑菜单
    this.autoEditModel = false; //是否允许自动编辑模式
    this.CellEditActive = false; //当前编辑正处于活动状态
    this.GridFaciesHelper = null; //表格外观管理助手
    this.CellEditHelper = null; //表格单元编辑助手
    this.CalculateHelper = null; //表格计算助手
    this.GridCRUDHelper = null; //表格增、删、插入功能助手类
    this.GridEditMenu = null; //表格编辑菜单
    this.autoAddNewRowOnLastCellReturn = false; //是否在最后最后一个单元格按回车时新增行
}

GridEditManager.prototype = {
    dispose: function () {
        if (this.CellEditHelper) {
            this.CellEditHelper.dispose();
            this.CellEditHelper = null;
        }
        if (this.CalculateHelper) {
            this.CalculateHelper.dispose();
            this.CalculateHelper = null;
        }
        if (this.GridCRUDHelper) {
            this.GridCRUDHelper.dispose();
            this.GridCRUDHelper = null;
        }
        if (this.GridEditMenu) {
            this.GridEditMenu.dispose();
            this.GridEditMenu = null;
        }
        //this.GridFaciesHelper本身的dispose在父类中进行
        this.GridFaciesHelper = null;
        this._owner = null;
        this.tableLayout = null;
        this.tableBody = null;
        this.tableFoot = null;
        this.thisControl = null;
    },
    MoveFirstRow: function (fieldIndexArray) {
        var targetRowIndex = this.GetTargetRowIndex(this._owner.m_currentRowIndex, "first")
        if (targetRowIndex >= 0 && targetRowIndex < this._owner.m_rows) {
            if (this._owner.m_currentRowIndex > targetRowIndex) {
                for (var i = this._owner.m_currentRowIndex; i >= targetRowIndex; i--) { //行依次互换
                    this.RowChange(i, i - 1, fieldIndexArray);
                }
            }
            this._owner.m_currentRowIndex = targetRowIndex;
            this._owner.FocusCurrentCell(); //设置当前焦点
        }
    }, //end MoveFirstRow

    MoveLastRow: function (fieldIndexArray) {
        var targetRowIndex = this.GetTargetRowIndex(this._owner.m_currentRowIndex, "last");
        if (targetRowIndex >= 0 && targetRowIndex < this._owner.m_rows) {
            if (targetRowIndex > this._owner.m_currentRowIndex) {
                for (var i = this._owner.m_currentRowIndex; i < targetRowIndex; i++) {
                    this.RowChange(i, i + 1, fieldIndexArray);
                }
            }
            this._owner.m_currentRowIndex = targetRowIndex;
            this._owner.FocusCurrentCell(); //设置当前焦点
        }
    }, //end MoveLastRow

    MoveNextRow: function (fieldIndexArray) {
        var targetRowIndex = this.GetTargetRowIndex(this._owner.m_currentRowIndex, "next");
        if (targetRowIndex >= 0 && targetRowIndex < this._owner.m_rows) {
            this.RowChange(this._owner.m_currentRowIndex, targetRowIndex, fieldIndexArray);
            this._owner.m_currentRowIndex = targetRowIndex;
            this._owner.FocusCurrentCell(); //设置当前焦点
        }
    }, //end MoveNextRow

    MovePreviousRow: function (fieldIndexArray) {
        var targetRowIndex = this.GetTargetRowIndex(this._owner.m_currentRowIndex, "previous");
        if (targetRowIndex >= 0 && targetRowIndex < this._owner.m_rows) {
            this.RowChange(this._owner.m_currentRowIndex, targetRowIndex, fieldIndexArray);
            this._owner.m_currentRowIndex = targetRowIndex;
            this._owner.FocusCurrentCell(); //设置当前焦点
        }
    }, //end MovePreviousRow

    //行交换
    RowChange: function (sourceRowIndex, targetRowIndex, fieldIndexArray) {
        if (targetRowIndex > -1 && sourceRowIndex != targetRowIndex) {
            var souRow = this.tableBody.rows[sourceRowIndex];
            var targRow = this.tableBody.rows[targetRowIndex];
            if (souRow.cusAttr('Status') != RowStatus.Empty && targRow.cusAttr('Status') != RowStatus.Empty) {
                for (var i = 0; i < this._owner.m_columns; i++) {
                    if (!this.Contain(i, fieldIndexArray)) { //拷贝单元内容
                        this.CopyCellContent(souRow.cells[i], targRow.cells[i]);
                    }
                }
                this.ChangeRowState(souRow, targRow, fieldIndexArray);
            }
        }
    }, //end RowChange

    //交换行标记
    ChangeRowState: function (souRow, targRow, fieldIndexArray) {
        if (fieldIndexArray.length > 0) {
            var s = souRow.cusAttr('Status');
            var t = targRow.cusAttr('Status');
            souRow.cusAttr('Status', t);
            targRow.cusAttr('Status', s);
            //
            if (targRow.cusAttr('Status') == RowStatus.UnChanged) {
                targRow.cusAttr('Status', RowStatus.Modified);
            }
            if (souRow.cusAttr('Status') == RowStatus.UnChanged) {
                souRow.cusAttr('Status', RowStatus.Modified);
            }
        } else {
            var s = souRow.cusAttr('Status');
            var t = targRow.cusAttr('Status');
            souRow.cusAttr('Status', t);
            targRow.cusAttr('Status', s);
        }
    }, //end ChangeRowState

    //cell单元拷贝
    CopyCellContent: function (souCell, targCell) {
        var attributes = new Array("Value", "MultiLang", "R");
        //交换单元内容
        var innerHtml = souCell.innerHTML;
        souCell.innerHTML = targCell.innerHTML;
        targCell.innerHTML = innerHtml;
        //交换单元属性
        for (var i = 0; i < attributes.length; i++) {
            var tempAtt = targCell.cusAttr(attributes[i]);
            if (tempAtt != this._owner.UNDEFINED_VALUE) {
                targCell.cusAttr(attributes[i], souCell.cusAttr(attributes[i]));
                souCell.cusAttr(attributes[i], tempAtt);
            }
        }
    }, //end CopyCellContent

    //数组元素是否包含指定值
    Contain: function (value, array) {
        var result = false;
        for (var i = 0; i < array.length; i++) {
            if (value == array[i]) {
                result = true;
                break;
            }
        }
        return result;
    },

    //取得被移动的目标行索引
    GetTargetRowIndex: function (currentRowIndex, mark) {
        var resultTargetRowIndex = -1;
        switch (mark) {
            case "first":
            {
                resultTargetRowIndex = 0;
                break;
            }
            case "next":
            {
                if (currentRowIndex < this._owner.m_rows - 1) {
                    resultTargetRowIndex = currentRowIndex + 1;
                }
                break;
            }
            case "previous":
            {
                if (currentRowIndex > 0) {
                    resultTargetRowIndex = currentRowIndex - 1;
                }
                break;
            }
            case "last":
            {
                resultTargetRowIndex = this._owner.m_rows - 1;
                break;
            }
        }
        return resultTargetRowIndex;
    }, //end GetMoveTargetRowIndex

    //初始化表格编辑助手
    Init: function (gridFaciesHelper) {
        this.SetControlPropertys(this.thisControl); //设置控件属性
        this.GridFaciesHelper = gridFaciesHelper; //连接外观管理助手
        this.CellEditHelper = new CellEditHelper(this.tableBody, this, this._owner); //创建单元格编辑助手
        //创建表格计算助手并初始化
        this.CalculateHelper = new CalculateHelper(this.tableBody, this.tableFoot, this.thisControl, this._owner);
        this.CalculateHelper.Init();
        this.CellEditHelper.AttachCalculate(this.CalculateHelper); //连接表格计算助手
        if (this.editMenuEnabled) { //初始化行编辑菜单
            this.GridEditMenu = new GridMenuManager(this.thisControl, this.tableLayout, this.tableBody, this, this._owner);
            this.GridEditMenu.Init();
        }
        this.GridCRUDHelper = new GridCRUDHelper(this.thisControl, this.tableBody, this, this._owner);
        this.GridCRUDHelper.Init();
    }, //end GridEditHelper

    //设置控件属性
    SetControlPropertys: function (thisControl) {
        if (thisControl.cusAttr('AutoEditModel') == DefaultSymbol.True) {
            this.autoEditModel = true;
        }
        if (thisControl.cusAttr('ShowFloatMenu') == DefaultSymbol.False) {
            this.editMenuEnabled = false;
        } else {
            this.editMenuEnabled = true;
        }
    }, //end SetControlPropertys

    //表格行标题被点击
    OnRowHeadClicked: function (rowIndex) {
        this.ShowMenu(rowIndex);
    }, //end OnRowHeadClick

    //表头单元被点击
    OnHeadCellClicked: function () {
        //this.HideMenu();
        this.ShowMenu(0);
    }, //end OnHeadCellClicked

    //表尾单元被点击
    OnFootCellClicked: function () {
        //this.HideMenu();
    }, //end OnFootCellClicked

    //表体单元被点击
    OnBodyCellClicked: function (rowIndex) {
        this.ShowMenu(rowIndex);
    }, //end OnBodyCellClicked

    HideMenu: function () {
        if (this.GridEditMenu != null) {
            this.GridEditMenu.HideMenu();
        }
    }, //end hideMenu
    ShowMenu: function (rowIndex) {
        if (this.GridEditMenu != null && this.editMenuEnabled) {
            /*
            var row = this.tableBody.rows[this._owner.m_currentRowIndex];
            if(row)
                if($(row).attr('Status')==RowStatus.Empty){
                    this.GridEditMenu.deleteEnabled = false;
                }else{
                    this.GridEditMenu.deleteEnabled = true;
                }
            */
            this.GridEditMenu.ShowMenu(rowIndex);
        }
    }, //end showMenu
    GetMenuVisible: function () {
        if (this.GridEditMenu != null) {
            return this.GridEditMenu.GetMenuVisible();
        }
        return false;
    }, //end showMenu

    //表格行标题被双击
    OnRowHeadDBClicked: function (rowIndex) {

    }, //end OnRowHeadDBClick

    //表格背景被滚动
    OnLayoutScroll: function (srcEvent) { }, //end OnLayotScroll
    OnLayoutScrollStart: function (srcEvent) { },
    OnLayoutScrollStop: function (srcEvent) { },
    //增加行，在此插入客户端事件
    OnAddRow: function (isForCopy) {
        if (this.GridCRUDHelper != null && !this._owner.m_gridReadOnly) { //增加新行
            if (this._owner.get_IsPaging() && ((this._owner.m_PageCount > 1) && (this._owner.m_PageIndex < (this._owner.m_PageCount - 1)))) {
                this._owner.StoreState("Y");
                this._owner.GridIsInFocus = true;
                this._owner.OnMovePage("LastPage");
                if (isForCopy) {
                    var jsCopyRow = "var xml=\"" + this.GridCRUDHelper.GetRowDataXmlStr(this._owner.m_currentRowIndex) + "\";";
                    jsCopyRow += "$find('" + this._owner.get_id() + "').CopyRow(xml);";
                    Global_JSQueueEvalAfterPageLoadedManager.Add(jsCopyRow);
                } else {
                    Global_JSQueueEvalAfterPageLoadedManager.Add("$find('" + this._owner.get_id() + "').AddNewRow();");
                }
                Global_JSQueueEvalAfterPageLoadedManager.Add("$find('" + this._owner.get_id() + "').Focus();");
                return false;
            }

            if (this._owner.m_MaxRows > 0) {
                if (this.tableBody.rows.length == this._owner.m_MaxRows) {
                    return false;
                }
            }
            var isDo = true;
            if (isForCopy) {
                isDo = !this._owner.OnBeforeRowCopy();
            } else {
                isDo = !this._owner.OnBeforeRowAdd();
            }
            if (isDo) {
                this._owner.m_gridBodyEventsHandler.CanEndEdit(false);
                //add 4 点击新增按钮增两行问题 by lzhm
                //处理逻辑，点击新增时，如果最下面一行是空行，则删除掉。
                if ((this.tableBody.rows.length > 0) && (this.tableBody.rows[this.tableBody.rows.length - 1]) && (this.tableBody.rows[this.tableBody.rows.length - 1].cusAttr('Status') == RowStatus.Empty)) {
                    this.tableBody.deleteRow(this.tableBody.rows.length - 1);
                    this._owner.m_rows -= 1;
                }
                //add end..
                this._owner.m_lastRowIndex = this._owner.m_currentRowIndex;
                this._owner.m_gridFaciesManager.lastRowIndex = this._owner.m_currentRowIndex;
                this._owner.m_gridFaciesManager.lastColumnIndex = this._owner.m_currentColumnIndex;
                this._owner.m_gridFaciesManager.OutCurrentCellStyle();
                var newRowIndex = this.GridCRUDHelper.AddNewRow();
                this.GridCRUDHelper.UpdateRowDefaultData(newRowIndex, true);
                this._owner.m_currentRowIndex = newRowIndex;
                //zjx add
                this._owner.m_currentColumnIndex = this._owner.GetFirstColumn();
                //this._owner.set_CurrentColumnIndex(this._owner.m_currentColumnIndex);
                //this._owner.set_CurrentRowIndex(this._owner.m_currentRowIndex);
                //this.GridFaciesHelper.SetCurrentCellStyle(this._owner.m_currentRowIndex,this._owner.m_currentColumnIndex);

                //this._owner.m_gridFaciesManager.SetCurrentCellStyle(this.m_currentRowIndex,this.m_currentColumnIndex);
                this._owner.m_gridFaciesManager.Focus();
                if (!this._owner.m_IsStartEdit) {
                    this._owner.StartEdit();
                } else {
                    this._owner.m_IsStartEdit = false;
                }

                //this.ShowMenu(this._owner.m_currentRowIndex);
                //yangkuna复制行时，不触发新增后事件，RowChanged事件延后触发
                if (!isForCopy) {
                    this._owner.OnAfterRowAdded(newRowIndex);
                    this._owner.OnRowChanged();
                }

                //重算合计值(有默认值的情况下,合计值错误.)
                var sumColumnsDataList = this.GetSumColumnsDataList();
                this.CalculateHelper.ResetAggForNewRow(sumColumnsDataList);

                //设置个性化默认值
                this._owner.SetDefaultValue4P(newRowIndex);
                //this._owner.SetLastDefaultValue4P(newRowIndex);
                this._owner.Grid_IsDirtyData = true;
                this._owner.m_gridFaciesManager.SetOddEvenTrStyle();
                return newRowIndex;
            }

        }
        return -1;
    }, //end OnAddRow

    //复制行，在此插入客户端事件
    OnCopyRow: function () {
        var oldRowIndex = this._owner.m_currentRowIndex;
        var newRowIndex = this.OnAddRow(true);
        if (newRowIndex !== false && newRowIndex >= 0) {
            this.GridCRUDHelper.CopyRowData(newRowIndex, oldRowIndex);
            var oLastRowIndex = this._owner.m_lastRowIndex;
            this._owner.m_lastRowIndex = oldRowIndex;
            this._owner.OnAfterRowCopyedDefaultAction(newRowIndex, oldRowIndex);
            this._owner.OnAfterRowCopyed(newRowIndex, oldRowIndex);
            this._owner.m_lastRowIndex = oLastRowIndex;
            this._owner.OnRowChanged();
        }
    }, //end OnCopyRow

    ClearData: function () {
        if (this.GridCRUDHelper != null) {
            while (this._owner.m_rows > 1) { //删除其他行
                this.GridCRUDHelper.DeleteRow(this._owner.m_rows - 1);
            }
            if (this._owner.m_rows == 1) { //删除最后一行
                this.GridCRUDHelper.DeleteRow(0);
            }
        }
    },
    RemoveData: function () {
        if (this.GridCRUDHelper != null) {
            while (this._owner.m_rows > 1) { //移除其他行
                this.GridCRUDHelper.RemoveRow(this._owner.m_rows - 1);
            }
            if (this._owner.m_rows == 1) { //移除最后一行
                this.GridCRUDHelper.RemoveRow(0);
            }
        }
    },

    //删除行,在此插入客户端事件
    OnRemoveRow: function () {
        if (this.GridCRUDHelper != null && !this._owner.m_gridReadOnly) {
            //zjx add 彩旦不显示的时候，不做删除
            //if(!this._owner.m_gridBodyEventsHandler.GridEditHelper.editMenuEnabled){return;}
            if (this._owner.inDeleting) {
                return;
            }
            if (_ClientCallBackManager.Runing == true) { //wangl:如果有callback 等,callback 结束后,在继续.

                var jsCopyRow = "$find('" + this._owner.get_id() + "').m_editMenuToolbar.OnDeleteClicked();";
                Global_JSQueueEvalAfterPageLoadedManager.Add(jsCopyRow);
                this._owner.m_gridFocusEventProcessed = false;
                return;
            }
            if (this._owner.m_rows < 1) return; //没有记录行时
            if (!this._owner.OnBeforeRowDelete()) {
                /*
                if(_ClientCallBackManager.Runing){
                    if(!RemoveRow(this._owner.get_element().id)){
                        //window.setTimeout("RemoveRow('"+this._owner.get_element().id+"')",100);
                        eval("RemoveRow('"+this._owner.get_element().id+"')");

                    }
                }else{*/
                this._owner.inDeleting = true;
                _ClientJSExecQueueManager.Add("$find('" + this._owner.get_id() + "').inDeleting=false;");
                this._owner.m_gridBodyEventsHandler.CanEndEdit(false);
                var sumColumnsDataList = this.GetSumColumnsDataList();
                //2020-01-06 support201912310110
                var currentRow = this.tableBody.rows[this._owner.m_currentRowIndex];
                var rowSelected = this._owner.IsRowSelected(this._owner.m_currentRowIndex);
                var delFlag = currentRow.cells[0].children[0] && currentRow.cells[0].children[0].type && currentRow.cells[0].children[0].type == "checkbox" && !rowSelected ? true : false;
                if (this._owner.m_rows == 1) {
                    if (this.tableBody.rows[0].cusAttr('Status') == RowStatus.Empty) {
                        sumColumnsDataList = null;
                    }
                    if (this._owner.m_gridBodyEventsHandler != null) {
                        this._owner.m_gridBodyEventsHandler.ClearData();
                    }
                } else {
                    if (currentRow.cusAttr('Status') == RowStatus.Empty) {
                        sumColumnsDataList = null;
                    }
                    this.GridCRUDHelper.DeleteRow(this._owner.m_currentRowIndex);
                }
                this._owner.m_tableDimentionManager.AdjustTableHeadPosition();
                this._owner.m_currentColumnIndex = this._owner.GetFirstColumn();
                this._owner.StartEdit();
                //this._owner.m_gridFaciesManager.Focus();
                if (!!delFlag) {
                    sumColumnsDataList = null;
                }
                if (sumColumnsDataList) {
                    this.CalculateHelper.ResetCalculateAggregations(sumColumnsDataList);
                }
                this._owner.OnAfterRowDeleted();
                this._owner.OnRowChanged(null, true);
                this._owner.Grid_IsDirtyData = true;
                this._owner.m_gridFaciesManager.SetOddEvenTrStyle();
                /*}*/
            }
        }
    }, //end rowIndex
    //删除行,在此插入客户端事件
    OnRemoveRowDirect: function () {
        if (this.GridCRUDHelper != null && !this._owner.m_gridReadOnly) {
            if (!this._owner.m_gridBodyEventsHandler.GridEditHelper.editMenuEnabled) {
                return;
            }
            if (this._owner.m_rows < 1) return; //没有记录行时

            this._owner.m_gridBodyEventsHandler.CanEndEdit(false);
            var sumColumnsDataList = this.GetSumColumnsDataList();
            if (this._owner.m_rows == 1) {
                if (this._owner.m_gridBodyEventsHandler != null) {
                    this._owner.m_gridBodyEventsHandler.ClearData();
                }
            } else {

                this.GridCRUDHelper.DeleteRow(this._owner.m_currentRowIndex);
            }
            this._owner.m_tableDimentionManager.AdjustTableHeadPosition();
            this._owner.m_currentColumnIndex = this._owner.GetFirstColumn();
            this._owner.StartEdit();
            //this._owner.m_gridFaciesManager.Focus();
            this.CalculateHelper.ResetCalculateAggregations(sumColumnsDataList);
            this._owner.OnAfterRowDeleted();
            this._owner.OnRowChanged(null, true);
            this._owner.Grid_IsDirtyData = true;
        }
    }, //end rowIndex


    //删除行,在此插入客户端事件forList
    OnRemoveRowAlways: function () {
        if (this.GridCRUDHelper != null && !this._owner.m_gridReadOnly) {
            if (this._owner.m_rows < 1) return; //没有记录行时
            if (!this._owner.OnBeforeRowDelete()) {
                var sumColumnsDataList = this.GetSumColumnsDataList();

                if (this._owner.m_rows == 1) {
                    if (this._owner.m_gridBodyEventsHandler != null) {
                        this._owner.m_gridBodyEventsHandler.ClearData();
                    }
                } else {
                    this.GridCRUDHelper.DeleteRow(this._owner.m_currentRowIndex);
                }
                this._owner.m_tableDimentionManager.AdjustTableHeadPosition();
                this.CalculateHelper.ResetCalculateAggregations(sumColumnsDataList);
                this._owner.OnAfterRowDeleted();
                this._owner.Grid_IsDirtyData = true;
            }
        }
    }, //end rowIndex

    GetSumColumnsDataList: function () {
        var dList = new Object();
        for (var i = 1; i < this._owner.m_columns; i++) {
            if (this._owner.MainCols[i].cusAttr('HasSum')) {
                dList[this._owner.MainCols[i].cusAttr('FieldID')] = this._owner.GetCellValue(this._owner.m_currentRowIndex, i).Value;
            }
        }
        return dList;
    },

    ResetNumberValue: function (newRowIndex) {
        for (var i = 0; i < this._owner.MainCols.length; i++) {
            if (this._owner.ControlArray[this._owner.MainCols[i].cusAttr('FieldID')])
                if (this._owner.ControlArray[this._owner.MainCols[i].cusAttr('FieldID')].control)
                    if (this._owner.ControlArray[this._owner.MainCols[i].cusAttr('FieldID')].control.get_Type() == ControlType.Numberic) {
                        if (this._owner.MainCols[i].cusAttr('sf') != this.UNDEFINED_VALUE) {
                            this._owner.SetDynamicScaleAndRoundType(i, this._owner.ControlArray[this._owner.MainCols[i].cusAttr('FieldID')]);
                            this._owner.SetCellValue(newRowIndex, i, this._owner.MainCols[i].cusAttr('DefaultValue'));
                        }
                    }
        }
    },
    //插入行，在此插入客户端事件
    OnInsertRow: function () {
        if (this.GridCRUDHelper != null && !this._owner.m_gridReadOnly) { //插入新行
            //zjx add 彩旦不显示的时候，不做插入
            if (!this._owner.m_gridBodyEventsHandler.GridEditHelper.editMenuEnabled) {
                return;
            }
            if (this._owner.m_editMenuToolbar) {
                if (!this._owner.m_editMenuToolbar.editMenuManager.insertEnabled) {
                    return;
                }
            }
            if (this._owner.m_MaxRows > 0) {
                if (this.tableBody.rows.length == this._owner.m_MaxRows) {
                    return false;
                }
            }
            if (this.GridCRUDHelper.CanInsertRow(this._owner.m_currentRowIndex)) {
                //把下面这段代码挪出来，如果放到OnBeforeRowInsert下面，如果OnBeforeRowInsert里有callback触发了，
                //那么下面就会等callback之后再次进行插入，然后再次进入OnBeforeRowInsert，又有callback一直这样循环进入无限循环
                //暂时不知道为什么增加这个判断，因为OnAddRow和OnDeleteRow都没做这种判断，看看效果先
                if (_ClientCallBackManager.Runing == true) { //wangl:如果有callback 等,callback 结束后,在继续.
                    var jsCopyRow = "$find('" + this._owner.get_id() + "').m_editMenuToolbar.OnInsertClicked();";
                    Global_JSQueueEvalAfterPageLoadedManager.Add(jsCopyRow);
                    this._owner.m_gridFocusEventProcessed = false;
                    return;
                }
                if (!this._owner.OnBeforeRowInsert()) {
                    this._owner.m_gridBodyEventsHandler.CanEndEdit(false);

                    //if (_ClientCallBackManager.Runing == true) { //wangl:如果有callback 等,callback 结束后,在继续.
                    //    var jsCopyRow = "$find('" + this._owner.get_id() + "').m_editMenuToolbar.OnInsertClicked();";
                    //    Global_JSQueueEvalAfterPageLoadedManager.Add(jsCopyRow);
                    //    this._owner.m_gridFocusEventProcessed = false;
                    //    return;
                    //}

                    this._owner.m_lastRowIndex = this._owner.m_currentRowIndex;
                    this._owner.m_gridFaciesManager.lastRowIndex = this._owner.m_currentRowIndex;
                    this._owner.m_gridFaciesManager.lastColumnIndex = this._owner.m_currentColumnIndex;
                    this._owner.m_gridFaciesManager.OutCurrentCellStyle();
                    var newRowIndex = this.GridCRUDHelper.InsertRow(this._owner.m_currentRowIndex);
                    //更新新行的默认值
                    this.GridCRUDHelper.UpdateRowDefaultData(newRowIndex);
                    //
                    this.ResetNumberValue(newRowIndex);
                    //

                    this._owner.m_currentRowIndex = newRowIndex;
                    this._owner.m_currentColumnIndex = this._owner.GetFirstColumn();
                    this._owner.m_gridFaciesManager.Focus();
                    this._owner.StartEdit();
                    this._owner.OnAfterRowInserted(newRowIndex);
                    this._owner.OnRowChanged();

                    //重算合计值(有默认值的情况下,合计值错误.)

                    var sumColumnsDataList = this.GetSumColumnsDataList();
                    this.CalculateHelper.ResetAggForNewRow(sumColumnsDataList);

                    //设置个性化默认值
                    this._owner.SetDefaultValue4P(newRowIndex);
                    //this._owner.SetLastDefaultValue4P(newRowIndex);

                    this._owner.Grid_IsDirtyData = true;
                    this._owner.m_gridFaciesManager.SetOddEvenTrStyle();
                    return newRowIndex;
                }
            }
        }
        return -1;
    }, //end OnInsertRow

    //背景容器焦点丢失
    OnLayoutFocusOut: function () {
        if (this.GridEditMenu != null) {
            //zjx remove
            //this.GridEditMenu.HideMenu();
        }
    }, //end OnLayoutFocusOut


    //当前行的内容被改变事件响应
    //参数: inputValue 当前输入的内容
    //      row 当前行
    //返回值 true 允许当前改变 false 不允许当前改变
    OnRowContentChanged: function (cellData, row, currentColumnIndex) {
        var eventResult = true;

        var IsEmptyRow = row.cusAttr('Status') === RowStatus.Empty

        if (IsEmptyRow) {
            //触发修改合计值逻辑
            var sumColumnsDataList = this.GetSumColumnsDataList();
            var caculator = this._owner.getCaculator();
            if (!caculator) return;
            caculator.ResetAggForNewRow(sumColumnsDataList);
        }

        if (currentColumnIndex != null) //gct20090601:bug15SP300276224，如果有后两个参数，使用传进来的currentRowIndex和currentColumnIndex
        {
            eventResult = this._owner.OnCellDataChanged(cellData, this._owner.m_currentRowIndex, currentColumnIndex);
            this._owner.OnCellDataValueChanged(cellData, this._owner.m_currentRowIndex, currentColumnIndex);
        } else {
            eventResult = this._owner.OnCellDataChanged(cellData, this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
            this._owner.OnCellDataValueChanged(cellData, this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
        }

        if (this._owner.IsEmptyRow(row)) { //修改之后空行变成新增行
            row.cusAttr('Status', RowStatus.Added);
            this._owner.set_TotalRows(this._owner.m_TotalRows + 1);
            //当用户修改了一行的记录才触发设置个性化默认值事件 20101109 lzhm
            var jsC = this._owner.SetDefaultValue4P(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);

            var hasPost = _ClientPostBackManager.Runing || _this.IsThisGirdPosting;
            if (hasPost) {
                _ClientJSExecQueueManager.Push("$find('" + _this.get_id() + "').Focus(true);");
            }
        }
        if (eventResult) { //如果数据验证成功且又是自动增行模式，则判断是否需要动态增加新行
            if (!this.autoAddNewRowOnLastCellReturn && this.autoEditModel && (this._owner.m_currentRowIndex == (this._owner.m_rows - 1))) { //在最后一行编辑
                if (this.GridCRUDHelper != null) { //增加新的空行
                    if (!this._owner.OnBeforeRowAdd()) {
                        var rowIndex = this.GridCRUDHelper.AddNewEmptyRow();
                        if (rowIndex != -100) {
                            this.GridCRUDHelper.InitEmptyRow(rowIndex);
                            this._owner.OnAfterRowAdded(rowIndex);
                        }
                    }
                }
            }
            if (row.cusAttr('Status') == RowStatus.UnChanged) { //设置行位被修改状态
                row.cusAttr('Status', RowStatus.Modified);
            }
        } //end eventResult

        //gct20091104：为了支持个性化参照携带而增加（个性化的参照携带在固有事件逻辑之后）
        this._owner.OnRowContentChanged4P(cellData, this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);

        return eventResult;
    }, //end OnRowContentChanged

    //表格行变化,返回值:true 允许换行 false 不允许换行
    OnBeforeRowChange: function (rowIndex) {
        return true; //this.RowInhibitChecked(rowIndex);
    }, //end OnBeforeRow

    //表格行级约束校验
    RowInhibitChecked: function (rowIndex) {
        var ok = true;
        var errorMessage = "";
        if (rowIndex >= 0 && rowIndex < this.tableBody.rows.length) {
            var row = this.tableBody.rows[rowIndex];
            if (!this._owner.IsEmptyRow(row)) {
                for (var i = 1; i < row.cells.length; i++) {
                    var cell = row.cells[i];
                    if ((cell.cusAttr('Value') == "" || cell.cusAttr('Value') == this._owner.UNDEFINED_VALUE) && this._owner.MainCols[i].cusAttr('visible') && this._owner.MainCols[i].cusAttr('IsNull') == DefaultSymbol.False) {
                        errorMessage = this._owner.MainCols[i].cusAttr('Name') + ": " + MenuText.NotNullErrorMessage;
                        ok = false;
                        break;
                    }
                }
            }
        }
        return true;
    }, //end RowDataChecked

    //开始编辑
    StartEdit: function () {

        if (this.CellEditHelper != null && !this._owner.m_gridReadOnly) {
            //默认新增空行也要触发个性化默认值赋值 20100823,当第一次开始单元格编辑时，触发此事件
            //注释  20101109 lzhm
            //            if (this._owner.m_rows == 0 || (this._owner.m_rows == 1 && this._owner.D_Body.rows[0].Status == RowStatus.Empty)) {
            //                var jsCount = 0;
            //                jsCount = this._owner.SetDefaultValue4P(0);
            //                if(jsCount > 0)
            //                    return;
            //            }
            //行编辑开始
            //this.HideMenu();
            var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识
            this.CellEditActive = this.CellEditHelper.StartCellEdit(this.GetCurrentCell(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex));
            Set_Global_IsDirtyData_TheForm(bDirtyDataFlag);

            this._owner.StoreState("Y");
        }
    }, //end startEdit

    //正在编辑时接受额外操作
    AcceptEdit: function () {
        if (this.CellEditActive && !this._owner.m_gridReadOnly) {
            if (this.CellEditHelper != null) {
                var cell = this.GetCurrentCell(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
                if (this.CellEditHelper.AcceptCellEdit(cell)) { //取消当前输入
                    try {
                        this._owner.S_Body.focus();
                        cell.focus();
                        this.CellEditActive = false;
                    } catch (e) { }
                }
            }
        }
    }, //end AcceptEdit

    //终止编辑,如果是鼠标点击Grid则不必重新设置焦点（若重新设置将导致Grid无序滚动）
    EndEdit: function (clicked) {
        if (this.CellEditHelper != null && !this._owner.m_gridReadOnly) { //终止单元格编辑
            var cell = this.GetCurrentCell(this._owner.m_currentRowIndex, this._owner.m_currentColumnIndex);
            if (cell == null)
                return;
            if (this.CellEditHelper.EndCellEdit(cell)) { //单元编辑正常终止
                try {
                    if (!clicked) {
                        //this._owner.m_tableDimentionManager.AdjustTableHeadPosition();
                        //this._owner.S_Body.focus();
                        //cell.focus();
                    }
                    this.CellEditActive = false;
                } catch (e) { }
                return true;
            }
        }
        return false;
    }, //end EndEdit

    //取得当前表格单元
    GetCurrentCell: function (rowIndex, columnIndex) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows && columnIndex > 0 && columnIndex < this._owner.m_columns) {
            return this.tableBody.rows[rowIndex].cells[columnIndex];
        }
        return null;
    } //end GetCurrentCell

} //end GridEditHelper class


//表格菜单管理类
GridMenuManager = function (thisControl, tableLayout, tableBody, editHandler, owner) {
    this._owner = owner;
    this.thisControl = thisControl;
    this.tableLayout = tableLayout;
    this.editHandler = editHandler;
    this.tableBody = tableBody;
    this.addEnabled = false; //是否允许增加行
    this.deleteEnabled = false; //是否允许删除行
    this.insertEnabled = false; //是否允许插入行
    this.copyEnabled = false; //是否允许复制行
    this.editEnabled = false; //是否允许批量修改行
    this.menuInstance = null;
    this.ShowAllMenuButton = true; //缺省值为true
    this.canShowMenu = true;
}
GridMenuManager.prototype = {
    dispose: function () {
        if (this.menuInstance) {
            this.menuInstance.dispose();
            this.menuInstance = null;
        }
        if (this.quickMenuInstance) {
            this.quickMenuInstance.dispose();
            this.quickMenuInstance = null;
        }
        this._owner = null;
        this.thisControl = null;
        this.tableLayout = null;
        this.editHandler = null;
        this.tableBody = null;
    },
    //初始化当前处理
    Init: function () {
        if (this.thisControl.cusAttr('ShowAllMenuButton') == "false") this.ShowAllMenuButton = false;
        if (this.thisControl.cusAttr('AllowAddRow') != this._owner.UNDEFINED_VALUE) this.addEnabled = true;
        if (this.thisControl.cusAttr('AllowDelRow') != this._owner.UNDEFINED_VALUE) this.deleteEnabled = true;
        if (this.thisControl.cusAttr('AllowInsertRow') != this._owner.UNDEFINED_VALUE) this.insertEnabled = true;
        if (this.thisControl.cusAttr('AllowEditRow') != this._owner.UNDEFINED_VALUE) this.editEnabled = true;
        if (this.thisControl.cusAttr('AllowCopyRow') != this._owner.UNDEFINED_VALUE) this.copyEnabled = true;
        this.InitMenu();
        if (this.thisControl.cusAttr('ShowFloatingMenu') === "False")
            this.displayFloatingMenu = false;
        else
            this.displayFloatingMenu = true;
        if (this.displayFloatingMenu === false)
            this.menuInstance.Hidden()
    }, //end init

    //创建菜单
    CreateMenu: function () {
        this.menuInstance = new EditMenuToolbar(this, this._owner);
        this.menuInstance.InitMenuToolbar(this.addEnabled, this.insertEnabled, this.deleteEnabled, this.editEnabled, this.copyEnabled, this.ShowAllMenuButton);
        this.menuInstance.AttachButtonEvents(); //追加事件
        this.CreateQuickMenu(this.menuInstance);
    },

    CreateQuickMenu: function (editMenuToolbar) {
        this.quickMenuInstance = new QuickEditMenuToolbar(this, this._owner, editMenuToolbar);
        this.quickMenuInstance.InitMenuToolbar(this.addEnabled, this.insertEnabled, this.deleteEnabled, this.editEnabled, this.copyEnabled, this.ShowAllMenuButton);
        this.quickMenuInstance.AttachButtonEvents(); //追加事件
    },

    //初始化菜单实例
    InitMenu: function () {
        if (!this._owner.m_gridReadOnly) {
            if (this.menuInstance == null) {
                this.CreateMenu();
                this.thisControl.appendChild(this.menuInstance.GetMenuToolbar());
            }
        }
    },

    //显示菜单
    ShowMenu: function (rowIndex) {
        if (this.displayFloatingMenu === false)
            return;
        //yangkuna20101011:批量修改过程中不显示菜单
        if (this._owner.GetIsBatchModifyRunning()) {
            return;
        }
        //只在第一次使用时才显示菜单
        if (!this._owner.m_gridReadOnly) {
            if (this.menuInstance == null) {
                this.CreateMenu();
                this.thisControl.appendChild(this.menuInstance.GetMenuToolbar());
            }
            this.menuInstance.Display(); //显示菜单
            var topP = 0;
            if (this._owner.D_Body.rows.length > 0) {
                topP = this.GetRowTopPosition(rowIndex);
            } else {  //row为0
                topP = 20;
            }
            this.menuInstance.Binding(this.thisControl, topP);
        }
    }, //end ShowMenu

    //取得表体行的位置
    GetRowTopPosition: function (rowIndex) {
        var row = this.tableBody.rows[rowIndex];
        var res = row.offsetTop - this.tableLayout.scrollTop + row.offsetHeight;
        if (this._owner.m_currentRowIndex == this.tableBody.rows.length - 1 && (row.offsetHeight + row.offsetTop + 10 >= this.tableLayout.offsetHeight)) {
            res = res - 40;
        }
        if ((this._owner.get_element().offsetHeight - 25) < res) {
            res = this._owner.get_element().offsetHeight - 25;
        }
        return res;
    }, //end GetRowTopPosition

    //隐含菜单
    GetMenuVisible: function () {
        if (this.menuInstance != null && this.menuInstance.menuLayout) { //隐藏菜单
            return this.menuInstance.menuLayout.style.display != "none";
        }
        return false;
    }, //end HideMenu

    //隐含菜单
    HideMenu: function () {
        if (this.menuInstance != null) { //隐藏菜单
            this.menuInstance.Hidden();
        }
    }, //end HideMenu

    //增加事件被激活
    OnAddEvent: function () {
        if (this.addEnabled) { //增加行
            this.editHandler.OnAddRow();
        }
    }, //end OnAddEvents

    //插入事件被激活
    OnInsertEvent: function () {
        if (this.insertEnabled) { //插入行
            this.editHandler.OnInsertRow();
        }
    }, //end OnInsertEvent

    //删除事件被激活
    OnDeleteEvent: function () {
        if (this.deleteEnabled) { //删除行
            this.editHandler.OnRemoveRow();
        }
    }, //end OnDeleteEvent

    //复制行事件被激活
    OnCopyRowEvent: function () {
        if (this.copyEnabled && _ClientCallBackManager.Runing != true) { //增加行
            this.editHandler.OnCopyRow();
        }
    }, //end OnCopyRowEvent
    CanShowMenu: function (value) {
        if (value == undefined) {
            return this.canShowMenu;
        } else {
            this.canShowMenu = value;
        }
    }
} //end GridMenuManager class


QuickEditMenuToolbar = function (editMenuManager, owner, editMenuToolbar) {
    var _this = this;
    this._owner = owner;
    this.editMenuManager = editMenuManager;
    this.addButton = null;
    this.insertButton = null;
    this.deleteButton = null;
    this.copyButton = null;
    this.menuLayout = null;

    if (this._owner.m_toolbarDiv != null)
        //this.menuLayout = this._owner.m_toolbarDiv.cells[0];
        this.menuLayout = this._owner.m_toolbarDiv.rows[0].cells[0];

    this.editMenuToolbar = editMenuToolbar;

    //增加按钮按下
    this.OnAddClicked = this.editMenuToolbar.OnAddClicked;
    //删除按钮按下
    this.OnDeleteClicked = this.editMenuToolbar.OnDeleteClicked;
    //插入按钮按下
    this.OnInsertClicked = this.editMenuToolbar.OnInsertClicked;
    //批量修改按钮按下
    this.OnEditAllClicked = this.editMenuToolbar.OnEditAllClicked;
    //复制按钮按下
    this.OnCopyClicked = this.editMenuToolbar.OnCopyClicked;
}

QuickEditMenuToolbar.prototype = {
    dispose: function () {
        this._owner = null;
        this.DetachButtonEvents();
        this.editMenuManager = null;
        this.closeButton = null;
        this.addButton = null;
        this.insertButton = null;
        this.deleteButton = null;
        this.menuLayout = null;
        this.editAllButton = null;
        this.copyButton = null;
        this.editMenuToolbar = null;
    },
    //添加编辑事件
    AttachButtonEvents: function () {
        if (this.closeButton != null) this.closeButton.onclick = this.OnCloseClicked;
        if (this.addButton != null) this.addButton.onclick = this.OnAddClicked;
        if (this.insertButton != null) this.insertButton.onclick = this.OnInsertClicked;
        if (this.deleteButton != null) this.deleteButton.onclick = this.OnDeleteClicked;
        if (this.editAllButton != null) this.editAllButton.onclick = this.OnEditAllClicked;
        if (this.copyButton != null) {
            this.copyButton.onclick = this.OnCopyClicked;
        }
    },
    DetachButtonEvents: function () {
        if (this.closeButton != null) $(this.closeButton).unbind('click', this.OnCloseClicked);
        if (this.addButton != null) $(this.addButton).unbind('click', this.OnAddClicked);
        if (this.insertButton != null) $(this.insertButton).unbind('click', this.OnInsertClicked)
        if (this.deleteButton != null) $(this.deleteButton).unbind('click', this.OnDeleteClicked);
        if (this.editAllButton != null) $(this.editAllButton).unbind('click', this.OnEditAllClicked);
        if (this.copyButton != null) {
            $(this.copyButton).unbind('click', this.OnCopyClicked);
        }
    },

    //菜单工具条初始化
    InitMenuToolbar: function (addEnabled, insertEnabled, delEnabled, editEnabled, copyEnabled, ShowAllMenuButton) {
        if (this.menuLayout == null)
            return this;
        for (var i = 0; i < this.menuLayout.children.length; i++) {
            var tmp = this.menuLayout.children[i];
            if (tmp.id == "add") {
                this.addButton = tmp;
            }
            if (tmp.id == "insert") {
                this.insertButton = tmp;
            }
            if (tmp.id == "del") {
                this.deleteButton = tmp;
            }
            if (tmp.id == "editall") {
                this.editAllButton = tmp;
            }
            if (tmp.id == "copy") {
                this.copyButton = tmp;
            }
        }
        this._owner.m_quickEditMenuToolbar = this;
        return this;
    },

    ResetMenuStatus: function (btnName, enabled) {
        if (this.editMenuManager) {
            if (btnName == "AddButton") {
                if (this.addButton) {
                    this.addButton.className = enabled ? "add" : "add_disabled";
                    this.addButton.disabled = !enabled;
                }
            }
            if (btnName == "InsertButton") {
                if (this.insertButton) {
                    this.insertButton.className = enabled ? "insert" : "insert_disabled";
                    this.insertButton.disabled = !enabled;
                }
            }
            if (btnName == "DelButton") {
                if (this.deleteButton) {
                    this.deleteButton.className = enabled ? "del" : "del_disabled";
                    this.deleteButton.disabled = !enabled;
                }
            }
        }
    },
    //取得菜单工具条
    GetMenuToolbar: function () {
        return this.menuLayout;
    }

} //end QuickEditMenuToolar class



//编辑菜单工具条
//var m_editMenuToolbar =null;
EditMenuToolbar = function (editMenuManager, owner) {
    var _this = this;
    this._owner = owner;
    this.id = owner.get_id() + "_editMenu";
    this.editMenuManager = editMenuManager;
    this.closeButton = null;
    this.addButton = null;
    this.insertButton = null;
    this.deleteButton = null;
    this.menuLayout = null;
    this.copyButton = null;
    //关闭键按下
    this.OnCloseClicked = function () {
        //alert("关闭");
        _this.Hidden();
        //this.Hidden();
    }
    //增加键按下
    this.OnAddClicked = function () {
        _this._owner.m_gridFocusEventProcessed = true;
        if (_this._owner.m_editMenuToolbar.editMenuManager != null) { //激活增加行事件
            _this._owner.m_editMenuToolbar.editMenuManager.OnAddEvent();
        }
    }

    //删除键按下
    this.OnDeleteClicked = function () {
        _this._owner.m_gridFocusEventProcessed = true;
        if (_this._owner.m_editMenuToolbar.editMenuManager != null) { //激活行删除事件
            _this._owner.m_editMenuToolbar.editMenuManager.OnDeleteEvent();
        }
    }

    //插入键按下
    this.OnInsertClicked = function () {
        _this._owner.m_gridFocusEventProcessed = true;
        if (_this._owner.m_editMenuToolbar.editMenuManager != null) { //激活插入事件
            _this._owner.m_editMenuToolbar.editMenuManager.OnInsertEvent();
        }
    }
    this.OnEditAllClicked = function () {
        if (editMenuManager.editEnabled) {
            if (_this._owner.D_Body.rows.length > 1) {
                if (this.m_currentRowIndex < 0)
                    return;
                if (_this._owner.GetRowStatus(this.m_currentRowIndex) == RowStatus.Empty)
                    return;
                //yangkuna20100803:如果有个性化扩展列，且需要模拟切换页签的，先走模拟切换页签
                /*var fromColIndex = 0,toColIndex = _this._owner.MainCols.length;
                var tColIndex = -1;
                for(var i=fromColIndex; i<toColIndex; i++) {
                    if(_this._owner.IsPersonalColumnByMoved(i)) {
                        if(_this._owner.IsNeedSwitchTabPage(i)) { tColIndex=i; }
                        break;
                    }
                }
                if(tColIndex >= 0) {
                    var oldColIndex = _this._owner.m_currentColumnIndex;
                    if(tColIndex != oldColIndex) {
                        _this._owner.m_currentColumnIndex = tColIndex;
                    }
                    _this._owner.ImitateSwitchTabPage();
                    var tmpJs = "var tGrid=$find('"+_this._owner.get_id()+"');tGrid.EndEdit();tGrid.m_currentColumnIndex=" + oldColIndex + ";tGrid.Focus(true);";
                    tmpJs += "tGrid.m_editMenuToolbar.OnEditAllClicked();";
                    _ClientJSExecQueueManager.Push(tmpJs);
                    return;
                }*/
                //end
                //_this._owner.InitColumnsInfor();
                _this._owner.GetCurrentColumnsInfor();
                if (_this._owner._columnsInforForEdit !== null && _this._owner._columnsInforForEdit.length === 0) {
                    return;
                }
                UF.UI.Reference.DisableShowForm = true;
                _this._owner.m_gridBodyEventsHandler.CanEndEdit(false);
                _this._owner.m_gridFaciesManager.SetSelectCellBorder(_this._owner.m_currentRowIndex, _this._owner.m_currentColumnIndex, false);
                var url = "../ufsoft/GridEdit.aspx";
                url = AppendPopupUrl(url);

                if (_this._owner.get_element().cusAttr('IsCondtionBatch') === "True") {
                    url += "&IsCondtionBatch=true"
                } else {
                    url += "&IsCondtionBatch=false"
                }

                var _features = "status:off;dialogWidth:640px;dialogHeight:400px";
                _this._owner.window = window;

                if (!window.retvShowGridEdit) {
                    if (_this._owner.IsThisGirdPosting) {
                        var startJs = "var gObj={}; gObj.win=window; gObj.gridId='" + _this._owner.get_id() + "';";
                        startJs += "window.retvShowGridEdit = window.showModelessDialog(\"" + url.replace(/"/g, "\\\"") + "\",gObj,\"" + _features + "\");";
                        _ClientJSExecQueueManager.Push(startJs);
                    } else {
                        var gObj = {};
                        gObj.win = window;
                        gObj.gridId = _this._owner.get_id();
                        var sysLan = window.localStorage.getItem("lang")
                        if (!window.langResouces || window.langType != sysLan) {
                            $.ajax({
                                type: "GET",
                                url: "../mvc/main/lang",
                                async: false,
                                data: {
                                    groupid: "0ac30d58-2676-4c3d-b24e-f77a4cce6dcf",
                                    lang: sysLan
                                },
                                success: function (data) {
                                    if (data) {
                                        window.langResouces = JSON.parse(data)
                                        window.langType = sysLan
                                    }
                                }
                            })
                        }
                        //                        window.retvShowGridEdit = window.showModelessDialog(url, gObj, _features);
                        zlayer.open({
                            title: window.langResouces.EditAll,
                            area: [660 + "px", 400 + "px"], //===by zzq添加高度
                            argument: gObj,
                            content: url,
                            endHandle: function (data) {
                                window.retvShowGridEdit = data;
                                //===by zzq 需要置空编辑状态
                                window.retvShowGridEdit = null;
                            }
                        });
                    }
                } else {
                    if (!window.retvShowGridEdit.window) {
                        window.retvShowGridEdit = null;
                    }
                }
            }
        }
    }
    this.OnCopyClicked = function () {
        _this._owner.m_gridFocusEventProcessed = true;
        if (_this._owner.m_editMenuToolbar.editMenuManager != null) { //激活复制行事件
            _this._owner.m_editMenuToolbar.editMenuManager.OnCopyRowEvent();
        }
    }
}
EditMenuToolbar.prototype = {
    dispose: function () {
        this._owner = null;
        this.DetachButtonEvents();
        this.editMenuManager = null;
        this.closeButton = null;
        this.addButton = null;
        this.insertButton = null;
        this.deleteButton = null;
        this.menuLayout = null;
        this.editAllButton = null;
        this.copyButton = null;
    },
    //添加编辑事件
    AttachButtonEvents: function () {
        if (this.closeButton != null) this.closeButton.onclick = this.OnCloseClicked;
        if (this.addButton != null) this.addButton.onclick = this.OnAddClicked;
        if (this.insertButton != null) this.insertButton.onclick = this.OnInsertClicked;
        if (this.deleteButton != null) this.deleteButton.onclick = this.OnDeleteClicked;
        if (this.editAllButton != null) this.editAllButton.onclick = this.OnEditAllClicked;
        if (this.copyButton != null) {
            this.copyButton.onclick = this.OnCopyClicked;
        }
    },
    DetachButtonEvents: function () {
        if (this.closeButton != null) $(this.closeButton).unbind('click', this.OnCloseClicked);
        if (this.addButton != null) $(this.addButton).unbind('click', this.OnAddClicked);
        if (this.insertButton != null) $(this.insertButton).unbind('click', this.OnInsertClicked)
        if (this.deleteButton != null) $(this.deleteButton).unbind('click', this.OnDeleteClicked);
        if (this.editAllButton != null) $(this.editAllButton).unbind('click', this.OnEditAllClicked);
        if (this.copyButton != null) {
            $(this.copyButton).unbind('click', this.OnCopyClicked);
        }
    },

    //菜单工具条初始化
    InitMenuToolbar: function (addEnabled, insertEnabled, delEnabled, editEnabled, copyEnabled, ShowAllMenuButton) {
        this.Create(addEnabled, insertEnabled, delEnabled, editEnabled, copyEnabled, ShowAllMenuButton);
        this._owner.m_editMenuToolbar = this;
    },

    //取得菜单工具条
    GetMenuToolbar: function () {
        return this.menuLayout;
    },
    //切换显示隐藏状态
    Toggle: function () {
        if (this.menuLayout.style.display == "none") {
            this.editMenuManager.CanShowMenu(true);
            this.editMenuManager.ShowMenu(this._owner.m_currentRowIndex);
        } else {
            this.editMenuManager.CanShowMenu(false);
            this.Hidden();
        }
    },
    //隐藏菜单
    Hidden: function () {
        this.menuLayout.style.display = "none";
    },

    //显示菜单
    Display: function () {
        if (this.editMenuManager.CanShowMenu()) {
            this.menuLayout.style.display = "";
        }
    },

    //帮定控件
    //thisControl当前控件，当前被点击单元上坐标
    Binding: function (thisControl, rowTop) {
        var rect = thisControl.getBoundingClientRect();
        var menuTop = rowTop;
        var columnWidths = this.GetColumnWidths(); //
        var recWidth = (rect.right - rect.left); //
        var menuWidth = this.menuLayout.offsetWidth; //
        var menuLeft = 0;
        if ((columnWidths + menuWidth) > recWidth) {
            menuLeft = recWidth - menuWidth;
        } else {
            menuLeft = columnWidths;
        }
        //===by zzq 发现top不够，之前老版本是够的不知道是不是布局改变之后出现的问题
        this.menuLayout.style.top = menuTop + "px";
        this.menuLayout.style.left = menuLeft + "px";
    },

    GetColumnWidths: function () {
        var widths = 15;
        for (var i = 1; i < this._owner.m_columns; i++) {
            if (this._owner.MainCols[i].cusAttr('visible')) {
                widths = widths + parseInt(this._owner.MainCols[i].width, 10);
            }
        }
        return widths;
    },

    ResetMenuStatus: function (btnName, enabled) {
        if (this.editMenuManager) {
            var btn = null;
            if (btnName == "AddButton") {
                this.editMenuManager.addEnabled = enabled;
                btn = this.addButton;
            }
            if (btnName == "InsertButton") {
                this.editMenuManager.insertEnabled = enabled;
                btn = this.insertButton;
            }
            if (btnName == "DelButton") {
                this.editMenuManager.deleteEnabled = enabled;
                btn = this.deleteButton;
            }
            if (btn != null) {
                var color = (enabled ? "" : DefaultSymbol.DisabledColor);
                btn.style.color = color;
            }
            if (this.editMenuManager.quickMenuInstance) {
                this.editMenuManager.quickMenuInstance.ResetMenuStatus(btnName, enabled);
            }
        }
    },

    //创建菜单方法
    Create: function (addEnabled, insertEnabled, delEnabled, editEnabled, copyEnabled, ShowAllMenuButton) {
        var curT;
        var tableAttr = {
            'id': this.id,
            'style': 'table-layout:fixed;z-index:99;font-size:9pt;position:absolute;left:-1999px;', //left:-1999px;解决谷歌下表格无法自适应问题，以便让菜单隐藏
            'cellpadding': 0,
            'cellspacing': 0
        };
        curT = $E(document).createElement('table', tableAttr);
        //curT = $E(this._owner.get_element()).createElement("<table id='" + this.id + "' style=\"table-layout:fixed;z-index:99;font-size:9pt;position:absolute;\" cellpadding=0 cellspacing=0 >");
        var curR = curT.insertRow(-1);
        $(curR).attr('height', 23);
        var firTD = $E(window.document).createElement('td', {
            'width': '27px'
        });
        var img = document.createElement("img");
        img.src = "../App_Themes/default/images/Listleft.gif";
        firTD.appendChild(img);
        curR.appendChild(firTD);
        var secTD;
        //        if (ShowAllMenuButton) {
        //            secTD = document.createElement("td");
        //            secTD.className = "GridMenuItem";
        //            secTD.align = "center";
        //            secTD.vAlign = "middle";
        //            var text = document.createElement("div");
        //            text.className = "GridMenuButton";
        //            text.style.cursor = "hand";
        //            text.innerText = "关闭";
        //            text.title = "Ctrl+Insert";
        //            if (!addEnabled) text.style.color = DefaultSymbol.DisabledColor;
        //            this.closeButton = text;
        //            secTD.appendChild(text);
        //            curR.appendChild(secTD);
        //        }
        if (addEnabled || ShowAllMenuButton) {
            secTD = document.createElement("td");
            secTD.className = "GridMenuItem";
            secTD.align = "center";
            secTD.vAlign = "middle";
            var text = document.createElement("div");
            text.className = "GridMenuButton";
            text.style.cursor = "hand";
            text.innerText = MenuText.Add;
            text.title = "Ctrl+Insert";
            if (!addEnabled) text.style.color = DefaultSymbol.DisabledColor;
            this.addButton = text;
            secTD.appendChild(text);
            curR.appendChild(secTD);
        }
        if (insertEnabled || ShowAllMenuButton) {
            secTD = document.createElement("td");
            secTD.className = "GridMenuItem";
            secTD.align = "center";
            secTD.vAlign = "middle";
            text = document.createElement("div");
            text.style.cursor = "hand";
            text.className = "GridMenuButton";
            text.innerText = MenuText.Insert;
            text.title = "Insert";
            if (!insertEnabled) text.style.color = DefaultSymbol.DisabledColor;
            this.insertButton = text;
            secTD.appendChild(text);
            curR.appendChild(secTD);
        }
        if (delEnabled || ShowAllMenuButton) {
            secTD = document.createElement("td");
            secTD.className = "GridMenuItem";
            secTD.align = "center";
            secTD.vAlign = "middle";
            text = document.createElement("div");
            text.className = "GridMenuButton";
            text.style.cursor = "hand";
            text.innerText = MenuText.Del;
            text.title = "ESC+Del";
            if (!delEnabled) text.style.color = DefaultSymbol.DisabledColor;
            this.deleteButton = text;
            secTD.appendChild(text);
            curR.appendChild(secTD);
        }
        if (editEnabled || ShowAllMenuButton) {
            secTD = document.createElement("td");
            secTD.className = "GridMenuItemEnd";
            secTD.align = "center";
            secTD.vAlign = "middle";
            text = document.createElement("div");
            text.className = "GridMenuButton";
            text.style.width = "60px";  // weiyin添加单位px -- 2016.06.23
            text.style.cursor = "hand";
            text.innerText = MenuText.EditAll;
            text.title = "Edit";
            if (!editEnabled)
                text.style.color = DefaultSymbol.DisabledColor;
            this.editAllButton = text;
            secTD.appendChild(text);
            curR.appendChild(secTD);
        }
        //复制
        if (copyEnabled) { // || ShowAllMenuButton
            secTD = document.createElement("td");
            secTD.className = "GridMenuItem";
            secTD.align = "center";
            secTD.vAlign = "middle";
            var text = document.createElement("div");
            text.className = "GridMenuButton";
            text.style.cursor = "hand";
            text.innerText = MenuText.Copy;
            //text.title="Ctrl+Insert";
            if (!copyEnabled) text.style.color = DefaultSymbol.DisabledColor;
            this.copyButton = text;
            secTD.appendChild(text);
            curR.appendChild(secTD);
        }
        if (ShowAllMenuButton) {
            secTD = document.createElement("td");
            secTD.className = "GridMenuItem";
            secTD.align = "center";
            secTD.vAlign = "middle";
            var text = document.createElement("div");
            text.className = "GridMenuButton";
            text.style.cursor = "hand";
            text.innerText = MenuText.Close;
            text.title = "Alt+J";
            //if (!addEnabled) text.style.color = DefaultSymbol.DisabledColor;
            this.closeButton = text;
            secTD.appendChild(text);
            curR.appendChild(secTD);
        }
        if (!editEnabled && !delEnabled && !insertEnabled && !addEnabled && !ShowAllMenuButton) {
            //如果所有按钮都不显示，则不显示左侧小箭头
            curT.rows[0].cells[0].style.display = "none";
        }
        curT.style.display = "none";
        if (this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Edit && this._owner.GetSelectedRows().length > 0) {
            curT.style.display = "";
        }
        this.menuLayout = curT;

    }

} //end EditMenuToolar class

//表格通用增加、插入、删除功能处理类
GridCRUDHelper = function (thisControl, tableBody, editHandler, owner) {
    this._owner = owner;
    this.thisControl = thisControl;
    this.tableBody = tableBody;
    this.editHandler = editHandler;
    this.defaultRowHeight = "20";

}
GridCRUDHelper.prototype = {
    dispose: function () {
        this._owner = null;
        this.thisControl = null;
        this.tableBody = null;
        this.editHandler = null;
    },
    Init: function () {
        this.defaultRowHeight = this.thisControl.cusAttr('DefaultRowHeight');
    }, //end Init

    //创建新行
    CreateNewRow: function () {
        var cell = null;
        var row = document.createElement("tr");
        row.setAttribute('height', this.defaultRowHeight);
        cell = document.createElement("td");
        if (this._owner.m_FrozenControlColumn) { //锁定控制列
            cell.className = DefaultSymbol.csstcc + " " + DefaultSymbol.cssFixedColumnDataCell;
        } else {
            cell.className = DefaultSymbol.csstcc;
        }
        //zjx add checkbox
        if (this._owner.get_element().cusAttr('SelectModel') == "mulitline") {
            cell.appendChild($E(window.document).createElement('input', {
                'type': 'checkbox'
            }));
        } else {
            this._owner.setCellListValue(cell, "");
        }
        //mahx 以前align属性定义到col就可以用，但是在HTML5下不支持。需要定义到具体td上。
        $(cell).attr("align", "center");
        //
        row.appendChild(cell);
        //添加控制单元
        for (var i = 1; i < this._owner.m_columns; i++) {
            cell = document.createElement("td");
            if (this._owner.MainCols[i].cusAttr('visible') && this._owner.MainCols[i].cusAttr('visibleEx')) {
                cell.className = DefaultSymbol.csstbc;
            } else {
                cell.style.display = 'none';
            }
            //mahx 以前align属性定义到col就可以用，但是在HTML5下不支持。需要定义到具体td上。
            $(cell).attr("align", this._owner.MainCols[i].getAttribute('align'))
            if (this._owner.MainCols[i].cusAttr('Frozen').toLowerCase() == DefaultSymbol.True)
                cell.className += " " + DefaultSymbol.cssFixedColumnDataCell
            if (this._owner.MainCols[i].cusAttr('DefaultBgColor') != null) {
                cell.bgColor = cell.style.backgroundColor = this._owner.MainCols[i].cusAttr('DefaultBgColor');
            }
            if (this._owner.MainCols[i].cusAttr('DefaultFontColor') != null) {
                cell.style.color = this._owner.MainCols[i].cusAttr('DefaultFontColor');
            }
            cell.cusAttr('Value', '');
            this._owner.setCellListValue(cell, "");
            row.appendChild(cell);
        }
        return row;
    }, //end CreateNewRow

    //增加新行（新行带默认值）,返回新行行号
    AddNewRow: function () {
        var newRow = this.CreateNewRow();
        newRow.cusAttr('Status', RowStatus.Added);
        //$(newRow).attr('Status') =RowStatus.Empty;
        this.tableBody.appendChild(newRow);
        //如果前一行是空行则把它置成新行
        this.SetPreviousEmptyRowToAdd(this._owner.m_rows - 1)
        this._owner.m_rows = this._owner.m_rows + 1; //行数增加一
        this._owner.set_TotalRows(this._owner.m_TotalRows + 1);
        return this._owner.m_rows - 1;
    }, //end AddNewRow

    SetPreviousEmptyRowToAdd: function (preRowIndex) {
        if (preRowIndex >= 0) {
            var row = this.tableBody.rows[preRowIndex];
            if (row.cusAttr('Status') == RowStatus.Empty) {
                row.cusAttr('Status', RowStatus.Added);
            }
        }
    }, //end SetPreviousEmpryRowToAdd

    //增加新的空行,返回行号
    AddNewEmptyRow: function () {
        if (!window.DataGridAutoAddNewEmptyRow) {
            window.DataGridAutoAddNewEmptyRow = new Array();
        }
        window.DataGridAutoAddNewEmptyRow[this._owner.get_id()] = true;
        if (this._owner.m_MaxRows > 0) {
            if (this.tableBody.rows.length == this._owner.m_MaxRows) {
                return -100;
            }
        }
        var newRow = this.CreateNewRow();
        newRow.cusAttr('Status', RowStatus.Empty); //空行是非有效行
        this.tableBody.appendChild(newRow);
        this._owner.m_rows = this._owner.m_rows + 1;
        return this._owner.m_rows - 1;
    }, //end AddNewEmptyRow

    //插入新行
    InsertRow: function (rowIndex) {
        var newRow = this.CreateNewRow();
        newRow.cusAttr('Status', RowStatus.Added);
        //$(newRow).attr('Status') =RowStatus.Empty;
        var insertedRow = this.tableBody.rows[this._owner.m_currentRowIndex];
        if (insertedRow == this._owner.UNDEFINED_VALUE) {
            this.tableBody.appendChild(newRow);
        } else {
            this.tableBody.insertBefore(newRow, insertedRow);
        }
        this._owner.m_rows = this._owner.m_rows + 1; //行数增加
        this._owner.set_TotalRows(this._owner.m_TotalRows + 1);
        return this._owner.m_currentRowIndex; //返回被插入的行位置
    }, //end InsertRow

    //删除当前行
    DeleteRow: function (rowIndex) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows && this.tableBody.rows.length > 0) {
            if (this._owner.m_rows == 1) { //最后一行变为空行
                var row = this.tableBody.rows[rowIndex];
                if (row.cusAttr('Status') != RowStatus.Empty) {
                    row.cusAttr('Status', RowStatus.Deleted);
                    this._owner.m_deletedRows.push(this._owner.GetRowXml(this._owner.dataDom, row, rowIndex));
                    if (this.editHandler.autoEditModel) {
                        this.ClearRow(row); //清空当前行的内容
                        this.UpdateRowDefaultData(rowIndex);
                        row.cusAttr('Status', RowStatus.Empty);
                    } else {
                        this.tableBody.deleteRow(rowIndex);
                        this._owner.m_rows = 0;
                    }
                    this._owner.m_currentRowIndex = 0;

                    this._owner.set_TotalRows(this._owner.m_TotalRows - 1);
                    //
                    var autoTurn = this._owner.get_element().cusAttr('_autoturn');
                    if (autoTurn !== undefined) {
                        if (this._owner.get_IsPaging()) {
                            var pIndex = 0;
                            if (this._owner.m_PageIndex == 0) {
                                pIndex = 0;
                            } else if (this._owner.m_PageIndex == this._owner.m_PageCount - 1) {
                                pIndex = this._owner.m_PageIndex - 1;
                            } else {
                                pIndex = this._owner.m_PageIndex;
                            }
                            this._owner.OnMovePage("GotoPage", pIndex);
                        }
                    }
                    //
                }
            } else { //删除行，如果是空行则跳过
                var curRow = this.tableBody.rows[rowIndex];
                if (curRow.cusAttr('Status') == RowStatus.Modified || curRow.cusAttr('Status') == RowStatus.UnChanged) { //如果是已有行则记录被删除行提交给后台
                    curRow.cusAttr('Status', RowStatus.Deleted);
                    this._owner.m_deletedRows.push(this._owner.GetRowXml(this._owner.dataDom, curRow, rowIndex));
                } else if (curRow.cusAttr('Status') == RowStatus.Empty) { //如果删除空行，自动置掉自动添加空行标志
                    if (window.DataGridAutoAddNewEmptyRow) {
                        window.DataGridAutoAddNewEmptyRow[this._owner.get_id()] = false;
                    }
                }

                if (curRow.cusAttr('Status') != RowStatus.Empty) {
                    this._owner.set_TotalRows(this._owner.m_TotalRows - 1);
                }
                this.tableBody.deleteRow(rowIndex);
                this._owner.m_rows = this._owner.m_rows - 1;
                if (this._owner.m_rows == 1) {
                    this._owner.m_currentRowIndex = 0;
                } else {
                    var cRows = this._owner.m_rows;
                    if (this.tableBody.rows[cRows - 1].cusAttr('Status') == RowStatus.Empty)
                        cRows = cRows - 1;

                    if (this._owner.m_currentRowIndex == cRows) this._owner.m_currentRowIndex = cRows - 1;
                }
            }
        }
    }, //end DeleteRow
    //删除当前行
    RemoveRow: function (rowIndex) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows && this.tableBody.rows.length > 0) {
            if (this._owner.m_rows == 1) { //最后一行变为空行
                var row = this.tableBody.rows[rowIndex];
                if (row.cusAttr('Status') != RowStatus.Empty) {
                    if (this.editHandler.autoEditModel) {
                        this.ClearRow(row); //清空当前行的内容
                        this.UpdateRowDefaultData(rowIndex);
                        row.cusAttr('Status', RowStatus.Empty);
                    } else {
                        this.tableBody.deleteRow(rowIndex);
                        this._owner.m_rows = 0;
                    }
                    this._owner.m_currentRowIndex = 0;

                    this._owner.set_TotalRows(this._owner.m_TotalRows - 1);

                }
            } else { //删除行，如果是空行则跳过
                var curRow = this.tableBody.rows[rowIndex];
                if (curRow.cusAttr('Status') != RowStatus.Empty) {
                    this._owner.set_TotalRows(this._owner.m_TotalRows - 1);
                }
                this.tableBody.deleteRow(rowIndex);
                this._owner.m_rows = this._owner.m_rows - 1;
                if (this._owner.m_rows == 1) {
                    this._owner.m_currentRowIndex = 0;
                } else {
                    if (this._owner.m_currentRowIndex == this._owner.m_rows) this._owner.m_currentRowIndex = this._owner.m_currentRowIndex - 1;
                }
            }
        }
    }, //end RemoveRow
    //初始化空行
    InitEmptyRow: function (rowIndex) {
        this.UpdateRowDefaultData(rowIndex); //设置空行的初始值
        //自动新增行也处理模拟录入默认值逻辑 Start...
        //        var autoEdit = this._owner.m_gridBodyEventsHandler.GridEditHelper.autoEditModel;
        //        this._owner.m_gridBodyEventsHandler.GridEditHelper.autoEditModel = false;
        //        this._owner.SetDefaultValue4P(rowIndex);
        //        if(autoEdit){
        //            _ClientJSExecQueueManager.Push("$find('" + this._owner.get_id() + "').m_gridBodyEventsHandler.GridEditHelper.autoEditModel = true;");
        //        }
        //        //_ClientJSExecQueueManager.Push("$find('" + this._owner.get_id() + "').SetRowStatus(" + rowIndex + ",'Emp');$find('" + this._owner.get_id() + "').EndEdit();");
        //        _ClientJSExecQueueManager.Push("$find('" + this._owner.get_id() + "').EndEdit();");
        //        _ClientJSExecQueueManager.Push("$find('" + this._owner.get_id() + "').m_currentRowIndex = " + this._owner.m_currentRowIndex + ";$find('" + this._owner.get_id() + "').m_currentColumnIndex = " + this._owner.m_currentColumnIndex + "; $find('" + this._owner.get_id() + "').Focus(true)");
        //
        //自动新增行也处理模拟录入默认值逻辑 End...

        var row = this.tableBody.rows[rowIndex];
        if (row)
            row.cusAttr('Status', RowStatus.Empty);
    }, //end InitEmptyRow

    //为当前空行设置默认值
    UpdateRowDefaultData: function (rowIndex, isNewRowInit) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            var row = this.tableBody.rows[rowIndex];
            for (var i = 1; i < this._owner.m_columns; i++) {
                var value = this.GetCellDefaultValue(this._owner.MainCols[i], rowIndex, i);
                var cell = row.cells[i];
                if (cell.cusAttr('Value') == "") { //如果当前单元没有输入值则允许使用默认值
                    if (this._owner.MainCols[i].cusAttr('ControlType') == ControlType.CheckBox) {
                        if (value == "true") { } else {
                            value = "false";
                        }
                    }
                    if (value != this._owner.UNDEFINED_VALUE && value != "") {

                        switch (this._owner.MainCols[i].cusAttr('ControlType')) {
                            case ControlType.CheckBox:
                                cell.cusAttr('Value', value);
                                this._owner.setCellListValue(cell, this._owner.GetCheckBoxTextByValue(value, this._owner.MainCols[i].cusAttr('CheckBoxValueRef')));
                                break;
                            case ControlType.Combox:
                                cell.cusAttr('Value', value);
                                this._owner.setCellListValue(cell, this._owner.GetComboxTextbyID(i, value));
                                break;
                            case ControlType.Date:
                                cell.cusAttr('Value', value);
                                this._owner.setCellListValue(cell, this._owner.GetDateFormatedValue(value, i));
                                break;
                            case ControlType.RefControl:
                                this.SetReferenceDefaultValue(cell, value);
                                break;
                            case ControlType.Numberic:
                                var numValue = this._owner.m_formatHelper.FormatCellNumber(i, rowIndex, value, cell.cusAttr('Value'), isNewRowInit);
                                cell.cusAttr('Value', numValue.Value);
                                this._owner.setCellListValue(cell, numValue.Text);
                                break;
                            case ControlType.MultiInput:
                                cell.cusAttr('Value', value);
                                cell.cusAttr('MultiLang', this._owner.GetMultiinputData(value, i));
                                this._owner.setCellListValue(cell, value);
                                break;
                            default:
                                //取得数据的格式化结果
                                cell.cusAttr('Value', value);
                                this._owner.setCellListValue(cell, this._owner.GetFormatedValue(value, this._owner.MainCols[i].cusAttr('DataType'), this._owner.MainCols[i].cusAttr('DisplayFormat')));
                        }
                    } else {
                        this._owner.setCellListValue(cell, "");
                    }
                } //cell no set
            } //end for
        }
    }, //end UpdateRowDefaultData

    //复制行值，自动编号列自动不复制
    CopyRowData: function (rowIndex, oldRowIndex) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows && oldRowIndex >= 0 && oldRowIndex < this._owner.m_rows) {
            var oldRow = this.tableBody.rows[oldRowIndex];
            var row = this.tableBody.rows[rowIndex];
            var columnSchema = null;
            var numCols = [];
            for (var i = 1; i < this._owner.m_columns; i++) {
                columnSchema = this._owner.MainCols[i];
                if (columnSchema.cusAttr('FieldID') != "ID" && columnSchema.cusAttr('IsSequence') == this._owner.UNDEFINED_VALUE) {
                    var value = this._owner.GetCellValue(oldRowIndex, i);
                    this._owner.SetReferenceCellValue(rowIndex, i, value.Value, value.Code, value.Text);
                    if (this._owner.GetColumnType(i) == ControlType.Numberic) {
                        numCols.push(i);
                    }
                } else if (columnSchema.cusAttr('FieldID') == "ID") {
                    // row.CopyRowArg = this._owner.GetCellValue(oldRowIndex, i).Value;
                    row.cusAttr('CopyRowArg', this._owner.GetCellValue(oldRowIndex, i).Value); //2016.06.15跨浏览器兼容 -- weiyin
                }
            } //end for
            for (var i = 0; i < numCols.length; i++) {
                var colIndex = numCols[i];
                var value = this._owner.GetCellValue(oldRowIndex, colIndex);
                this._owner.SetReferenceCellValue(rowIndex, colIndex, value.Value, value.Code, value.Text);
            } //end for
        }
    }, //end CopyRowData

    //设置行数据
    SetRowData: function (rowIndex, rowData) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows && rowData) {
            var row = this.tableBody.rows[rowIndex];
            var columnSchema = null;
            var numCols = [];
            for (var i = 1; i < this._owner.m_columns; i++) {
                columnSchema = this._owner.MainCols[i];
                if (columnSchema.cusAttr('FieldID') != "ID" && columnSchema.cusAttr('IsSequence') == this._owner.UNDEFINED_VALUE) {
                    var value = rowData[columnSchema.cusAttr('FieldID')];
                    this._owner.SetReferenceCellValue(rowIndex, i, value.Value, value.Code, value.Text);
                    if (this._owner.GetColumnType(i) == ControlType.Numberic) {
                        numCols.push(i);
                    }
                } else if (columnSchema.cusAttr('FieldID') == "ID") {
                    // row.CopyRowArg = rowData[$(columnSchema).attr('FieldID')].Value;
                    row.cusAttr('CopyRowArg', rowData[columnSchema.cusAttr('FieldID')].Value);
                }
            } //end for
            for (var i = 0; i < numCols.length; i++) {
                var colIndex = numCols[i];
                var value = rowData[this._owner.MainCols[colIndex].cusAttr('FieldID')];
                this._owner.SetReferenceCellValue(rowIndex, colIndex, value.Value, value.Code, value.Text);
            } //end for
        }
    },

    GetRowDataXmlStr: function (rowIndex) {
        var doc = Basic.GetXmlDom();
        //doc.loadXML("<RowData></RowData>");
        //var node = doc.createElement("RowData");
        var rowXml = this._owner.GetRowXml(doc, this._owner.D_Body.rows[rowIndex], rowIndex);
        return encodeURIComponent(XMLHelper.serializeXMLNodeToString(rowXml));
    },

    GetRowDataFromXml: function (xmlStr) {
        if (xmlStr) {
            var xmlStr = decodeURIComponent(xmlStr);
            //doc.loadXML(xmlStr);
            var doc = Basic._loadXML(xmlStr);
            var rowData = {};
            var columnSchema = null;
            var node = null;
            for (var i = 1; i < this._owner.m_columns; i++) {
                columnSchema = this._owner.MainCols[i];
                node = doc.documentElement.childNodes[i - 1];
                var value = new CellValue(node.getAttribute("V"));
                var rAttr = node.getAttribute("R");
                value.Text = this._owner.m_gridFaciesManager.GetRefNameAttribute(rAttr);
                value.Code = this._owner.m_gridFaciesManager.GetRefCodeAttribute(rAttr);
                rowData[columnSchema.cusAttr('FieldID')] = value;
            }
            return rowData;
        }
        return null;
    },

    //设置参照初始值
    SetReferenceDefaultValue: function (cell, defaultValue) {
        var values = defaultValue.split(this._owner.RefSplitter2);
        if (values.length == 3) {
            this._owner.setCellListValue(cell, values[2]);
            cell.cusAttr('Value', values[0]);
            values.shift();
            cell.cusAttr('R', values.join(this._owner.RefSplitter2));
            cell.title = values[1];
        }
    }, //end SetReferenceDefaultValue

    //判断是否允许插入行 zjx add
    CanInsertRow: function (rowIndex) {
        if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
            for (var i = 1; i < this._owner.m_columns; i++) {
                var columnSchema = this._owner.MainCols[i];
                var bCan = true;
                var result = columnSchema.cusAttr('DefaultValue');
                if (columnSchema.cusAttr('IsSequence') != this._owner.UNDEFINED_VALUE) {
                    if (columnSchema.cusAttr('FieldID') == "ID") {
                        continue;
                    }
                    var defaultStartValue = parseInt(columnSchema.cusAttr('SequenceStart'), 10);
                    var step = parseInt(columnSchema.cusAttr('SequenceStep'), 10);
                    var startValue = 0;
                    if (columnSchema.cusAttr('AutoStart') == this._owner.UNDEFINED_VALUE) {
                        startValue = defaultStartValue;
                    } else {
                        startValue = parseInt(columnSchema.cusAttr('AutoStart'), 10);
                    }
                    //处理插入行行号和新增行号
                    result = this.GetInsertedRowNo(rowIndex, i, startValue, step, defaultStartValue);
                    if (result == 0) {
                        result = "";
                    }
                    if (result == "") {
                        bCan = false;
                        break;
                    }
                }
            }
        }
        return bCan;
    },
    //设置插入行时行ID号
    GetInsertedRowNo: function (rowIndex, columnIndex, startValue, step, defaultStartValue) {
        var result = -1;
        if (rowIndex < this._owner.m_rows && rowIndex >= 0) {
            var previousID = defaultStartValue - step;
            var nextID = this.GetRowAutoIndex(rowIndex, columnIndex);
            if (rowIndex > 0) previousID = this.GetRowAutoIndex(rowIndex - 1, columnIndex);
            if (previousID < 0) {
                return "";
            }
            //if(previousID==-1){return "";}
            if ((nextID - previousID) > step) {
                //if(previousID){
                //  result = "";
                //}else{
                result = previousID + step;
                //}
            } else {
                if ((nextID - previousID) > 1) {
                    result = previousID + 1;
                } else if ((nextID - previousID) == 1 && rowIndex == 0) {
                    result = previousID;
                }
            }

        }
        if (result == -1) return "";
        if (result != "") {
            //检查数据库中是否存在此行号
            /*var columnIDIndex =this._owner.GetColumnIndex("ID");
            var row = this.tableBody.rows[rowIndex];
            var v  = row.cells[columnIDIndex].Value;
            var bOld = false;
            if(v){
                if(parseInt(v,10)>0){
                    bOld = true;
                }
            }
            if(bOld){
                if(row.cells[columnIDIndex].Value==result){
                    result = "";
                }
            }*/
        }
        return result.toString();
    }, //end GetInsertRowID

    //取得当前单元的默认值
    GetCellDefaultValue: function (columnSchema, rowIndex, columnIndex) {
        var result = columnSchema.cusAttr('DefaultValue');
        if (columnSchema.cusAttr('IsSequence') != this._owner.UNDEFINED_VALUE) {
            var defaultStartValue = parseInt(columnSchema.cusAttr('SequenceStart'), 10);
            var step = parseInt(columnSchema.cusAttr('SequenceStep'), 10);
            var startValue = 0;
            if (columnSchema.cusAttr('AutoStart') == this._owner.UNDEFINED_VALUE) {
                startValue = defaultStartValue;
            } else {
                startValue = parseInt(columnSchema.cusAttr('AutoStart'), 10);
            }

            if (columnSchema.cusAttr('FieldID') == "ID") {
                //int64数字长度19位，最长
                result = defaultStartValue.toString() + 100;
                if (defaultStartValue.toString().length >= 16) {
                    result = "-" + defaultStartValue.toString();
                }
                columnSchema.cusAttr('SequenceStart', (defaultStartValue + step).toString());
                return result;
            }

            //处理插入行行号和新增行号    zjx modify
            var row = this._owner.D_Body.rows[rowIndex];
            if (row.cusAttr('Status') == RowStatus.Deleted) {
                result = defaultStartValue - step;
            } else if (row.cusAttr('Status') == RowStatus.Added && rowIndex == 0) {
                result = defaultStartValue - step;
            } else {
                result = this.GetInsertedRowID(rowIndex, columnIndex, startValue, step, defaultStartValue);
            }

            if (result == 0) {
                result = "";
            }
            if (result == "") { //如果不是插入行则按最大行号取值
                //zjx modify
                /*result = startValue.toString();*/
                //if($(columnSchema).attr('FieldID')=="ID"){
                //  result = startValue.toString();
                //}
                startValue = startValue + step;
                columnSchema.cusAttr('AutoStart', startValue.toString());

            }
            //if($(columnSchema).attr('FieldID')!="ID"){
            this._owner.m_ArrNos[0] = defaultStartValue - step;
            this._owner.m_ArrNos[rowIndex] = result;
            //}
        }
        //处理默认值设置的情况
        /*
        if(this._owner.m_DefaultValueColumns)
        if(this._owner.m_DefaultValueColumns.length>0){
            var bIn = false;
            for(var i=0;i<this._owner.m_DefaultValueColumns.length;i++){
                if(this._owner.m_DefaultValueColumns[i].trim()==$(columnSchema).attr('FieldID')){
                    bIn = true;
                    break;
                }
            }
            if(bIn){

                result = this.DefaultValueReset(columnSchema,(rowIndex - 1),columnIndex);
            }
        }
        */
        //
        return result;
    }, //end GetDefaultValue
    DefaultValueReset: function (columnSchema, rowIndex, columnIndex) {
        if (rowIndex == -1)
            return "";
        var result = "";
        if (this._owner.m_gridFaciesManager != null) {
            if (columnIndex >= 0) {
                var cellValue = this._owner.m_gridFaciesManager.GetCellValue(rowIndex, columnIndex);
                if (cellValue != null) {
                    if (cellValue.Code) {
                        result = cellValue.Value + this._owner.RefSplitter2 + cellValue.Code + this._owner.RefSplitter2 + cellValue.Text;
                    } else {
                        result = cellValue.Value;
                    }
                }
            }
        }
        //this._owner.m_gridBodyEventsHandler.GridEditHelper.CopyCellContent();
        return result;
    }, // end DefaultValueReset
    NeedGetID: function (index, bNext) {
        var hasID = true;
        var res = index;
        if (bNext) {
            res++;
        } else {
            res--;
        }
        if (this._owner.D_Body.rows.length > res) {
            var row = this._owner.D_Body.rows[res];
            if (row.cusAttr('Status') == RowStatus.UnChanged) {
                hasID = false;
            }
        }
        return hasID;
    },
    //设置插入行时行ID号
    GetInsertedRowID: function (rowIndex, columnIndex, startValue, step, defaultStartValue) {
        var result = -1;
        if (rowIndex < this._owner.m_rows && rowIndex >= 0) {
            //
            if (rowIndex + 1 == this._owner.m_rows)
                if (this.GetRowAutoIndex(rowIndex - 1, columnIndex) < defaultStartValue) {
                    return defaultStartValue;
                }
            //
            var previousID = defaultStartValue;

            //if(!this.NeedGetID(rowIndex,true)){return defaultStartValue;}
            var nextID = this.GetRowAutoIndex(rowIndex + 1, columnIndex);
            if (rowIndex > 0) {
                //if(this.NeedGetID(rowIndex,false))
                {
                    previousID = this.GetRowAutoIndex(rowIndex - 1, columnIndex);
                }
                //else
                {
                    //previousID = previousID-step;
                }
            }
            //zjx modify
            //if(nextID==-1)
            if (previousID < 0) {
                return "";
            }
            //if(previousID==-1){return "";}

            if (nextID == -1 && previousID != -1) { //新增行的情况
                result = previousID + step;
            } else { //插入行的情况
                if ((nextID - previousID) > step) {
                    result = previousID + step;
                    //result = "";
                } else {
                    if ((nextID - previousID) > 1) {
                        //result =previousID + 1;//原先取行号的方式
                        result = this.GetInsertedRowNnumber(previousID, nextID);
                    }
                }
            } //end if
        }
        if (result == -1) return "";
        return result.toString();
    }, //end GetInsertRowID
    //gct20080418:取得插入值的中间行号。第三个参数为可选参数，如果不指定则取Grid的插入行方式
    GetInsertedRowNnumber: function (previousNo, nextNo, insertType) {
        if (insertType != null)
            insertType = insertType.toString();
        var type = insertType ? insertType : this._owner.GetInsertedRowNoType();
        switch (type) {
            case InsertedRowNoType.Floor:
                return previousNo + 1;
            case InsertedRowNoType.LowAverage:
                return Math.floor((previousNo + nextNo) / 2);
            case InsertedRowNoType.HighAverage:
                return Math.ceil((previousNo + nextNo) / 2);
            case InsertedRowNoType.Ceil:
                return nextNo - 1;
            default:
                return Math.ceil((previousNo + nextNo) / 2);
        }
    },
    //取得指定行的动态索引
    GetRowAutoIndex: function (rowIndex, columnIndex) {
        var result = -1;
        if (this.tableBody != null) {
            var rows = this.tableBody.rows;
            if (rowIndex < rows.length) {
                var row = this.tableBody.rows[rowIndex];
                var cell = row.cells[columnIndex];
                result = parseInt(cell.cusAttr('Value'), 10);
                if (isNaN(result)) result = -1;
            }
        }
        return result;
    }, //end GetRowAutoIndex

    //清除当前行的所有内容
    ClearRow: function (row) {
        if (row != this._owner.UNDEFINED_VALUE) {
            for (var i = 1; i < this._owner.m_columns; i++) {
                this.ClearCell(row.cells[i]);
            }
        }
    }, //end ClearRow

    //清空当前单元
    ClearCell: function (cell) {
        if (cell.cusAttr('Value') != this._owner.UNDEFINED_VALUE) {
            cell.cusAttr('Value', '');
        }
        if (cell.cusAttr('MultiLang') != this._owner.UNDEFINED_VALUE) {
            cell.cusAttr('MultiLang', '');
        }
        if (cell.cusAttr('R') != this._owner.UNDEFINED_VALUE) {
            cell.cusAttr('R', '');
            cell.title = "";
        }
        this._owner.setCellListValue(cell, "");
    } //end ClearCell

} //end GridCRUDHelper class

/**************************************************************
 单元格编辑助手
 ***************************************************************/

//当前单元格编辑助手类
CellEditHelper = function (tableBody, gridEditManager, owner) {
    this._owner = owner;
    this.tableBody = tableBody;
    this.editManager = gridEditManager;
    this.calculate = null;
}
CellEditHelper.prototype = {
    dispose: function () {
        this._owner = null;
        this.tableBody = null;
        this.editManager = null;
        this.calculate = null;
    },
    //添加计算引擎
    AttachCalculate: function (calculate) {
        this.calculate = calculate;
    }, //end AttachCalculate

    //当前单元编辑接受中
    AcceptCellEdit: function (activeCell) {
        switch (this._owner.GetColumnType(this._owner.m_currentColumnIndex)) {
            case ControlType.CheckBox:
            {
                this.SelectCheckBox(activeCell);
                break;
            }
            default:
            {
                /*if(event.keyCode==27)
                {   //取消输入
                    this.RestoreCellOldValue(activeCell);
                    return true;
                }*/
                break;
            }
        }
        return false;
    }, //end AcceptCellEdit

    //单元格编辑开始,返回值：true 单元允许编辑 false 单元不允许编辑
    StartCellEdit: function (activeCell) {
        //        /************************************************** 个性化列模拟切换页签处理 Begin **************************************************/
        //        //gct20090825在开始编辑的时候，判断是不是正在编辑个性化列的Cell
        //        //如果是个性化列的Cell，那么就需要判断RowIndex4PCol和RowIndex是不是相等，如果不等就需要回补个性化发起的RowChanged的Post，如果相等，不需要处理。
        //        //如果不是个性列的Cell，不需要处理
        //        var colIndex = this._owner.m_currentColumnIndex;
        //        var ctrl = this._owner.MainCols[colIndex].ColEditCtrlClientID4P;
        //        if(ctrl != null)//判断是不是个性化列的Cell
        //        {
        //            if(this._owner.m_currentRowIndex != this._owner.m_currentRowIndex4PCol)
        //            {
        //                this._owner.OnRowChanged();//回补个性化发起的RowChanged的Post
        //            }
        //        }
        //        /************************************************** 个性化列模拟切换页签处理 End **************************************************/

        //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ Begin
        var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识


        var result = false;
        if (this.CellEditEnabled(this._owner.m_currentColumnIndex, activeCell)) {
            //zjx add
            var columnIndex = this._owner.m_currentColumnIndex;
            var replaceControlID = null;
            if (this._owner.MainCols[columnIndex].cusAttr("ColEditCtrlClientID4P")) {
                replaceControlID = this._owner.MainCols[columnIndex].cusAttr("ColEditCtrlClientID4P");
            }

            if (this._owner.MainCols[columnIndex].cusAttr("ReplaceColumn")) {
                var replaceColumn = this._owner.MainCols[columnIndex].cusAttr("ReplaceColumn");
                if (replaceColumn !== "") {
                    columnIndex = this._owner.GetColumnIndex(replaceColumn);
                    //
                    var row = this._owner.D_Body.rows[this._owner.m_currentRowIndex];
                    if (row)
                        if (row.cusAttr('Status') == RowStatus.UnChanged) {
                            if (this._owner.m_gridFaciesManager)
                                activeCell.cusAttr('Value', this._owner.m_gridFaciesManager.GetCellValue(this._owner.m_currentRowIndex, columnIndex).Value);
                        }
                    //
                }
            }
            //
            //activeCell.scrollIntoView(false);

            if (activeCell.children.length == 1 && (activeCell.children[0].tagName == "SPAN" || activeCell.children[0].tagName == "INPUT")) {
                //Basic.SetFocus(activeCell.children[0]);
                if (activeCell.children[0].tagName == "INPUT") { //文本列，直接使用了INPUT，没有使用TextBox控件
                    activeCell.children[0].focus();
                    result = true;
                }

                var control = activeCell.children[0];
                var controlJS = control.control;
                switch (this._owner.GetColumnType(columnIndex)) {
                    case ControlType.Numberic:
                        //controlJS.input_onfocus();
                        control.children[0].focus();
                        //controlJS._textbox.click();
                        controlJS.input_onfocus();
                        break;
                    default:
                        try {
                            control.children[0].focus();
                        } catch (e) { }
                        break;
                }
                result = true;
            } else {
                //控件初始化之前 （不抛事件，不同步）
                if ($find(replaceControlID)) {
                    $find(replaceControlID).set_IsRaiseEvent(false); //抛事件
                    $find(replaceControlID).set_IsPersonalProcess(false); //不同步
                } else { //如果找不到replaceControlID，说明控件没有移动过来，或者没有初始化，则不使用
                    replaceControlID = null;
                }

                switch (this._owner.GetColumnType(columnIndex)) {
                    case ControlType.TextBox:
                    { //创建文本录入控件
                        result = this.CreateTextBox(activeCell, columnIndex, replaceControlID);
                        break;
                    }
                    case ControlType.CheckBox:
                    { //创建选择按纽控件
                        result = this.CreateCheckBox(activeCell, columnIndex, replaceControlID);
                        break;
                    }
                    case ControlType.Date:
                    { //创建日历控件
                        result = this.CreateDatePicker(activeCell, columnIndex, replaceControlID);
                        break;
                    }
                    case ControlType.Combox:
                    { //创建下拉列表框控件

                        result = this.CreateCombox(activeCell, columnIndex, replaceControlID);
                        break;
                    }
                    case ControlType.TextArea:
                    { //创建多行文本输入控件
                        result = this.CreateTextArea(activeCell, columnIndex, replaceControlID);
                        break;
                    }
                    case ControlType.RefControl:
                    { //创建参照控件
                        result = this.CreateReference(activeCell, columnIndex, replaceControlID);
                        break;
                    }
                    case ControlType.MultiInput:
                    {
                        //对于多语控件特殊处理，当首行数据此从后台输出时，MultiLang为 "",焦点离开时会认为value变更
                        if (activeCell.cusAttr("MultiLang") == this._owner.UNDEFINED_VALUE || (activeCell.cusAttr('Value') != "" && activeCell.cusAttr("MultiLang") == "")) {
                            activeCell.cusAttr("MultiLang", this._owner.GetMultiinputData(activeCell.cusAttr('Value'), columnIndex));
                        }
                        //创建多语言录入控件
                        result = this.CreateMultiInput(activeCell, columnIndex, null);
                        break;
                    }
                    case ControlType.Numberic:
                    { //创建数值录入控件
                        result = this.CreateNumbericInput(activeCell, columnIndex, this._owner.m_currentRowIndex, replaceControlID);
                        break;
                    }
                } //end switch

                if ($find(replaceControlID)) {
                    if (result) { //编辑时 抛事件，不同步
                        $find(replaceControlID).set_IsRaiseEvent(true); //抛事件
                        $find(replaceControlID).set_IsPersonalProcess(false); //不同步
                    } else { //创建失败，恢复默认值（被被关联，抛事件，同步）
                        $find(replaceControlID).set_IsRaiseEvent(true); //抛事件
                        $find(replaceControlID).set_IsPersonalProcess(true); //同步
                    }
                }
            }
            if (result) this._owner.OnCellFocusEnter(); //焦点进入
        } else {
            // 当cell变为不可编辑时，设置滚动条的滚动。
            if (this.tableBody.rows.length > 0) {
                var cell = this.tableBody.rows[this._owner.m_currentRowIndex].cells[this._owner.m_currentColumnIndex];
                var headHeight = this._owner.D_Head.offsetHeight;
                var cellTop = cell.offsetTop;
                var cellBottom = cell.offsetTop + cell.offsetHeight;

                var layoutTop = this._owner.m_tableDimentionManager.TableLayout.scrollTop + headHeight;
                var layoutBottom = this._owner.m_tableDimentionManager.TableLayout.scrollTop + this._owner.m_tableDimentionManager.TableLayout.clientHeight;

                if (cellTop < layoutTop || cellBottom > layoutBottom) { //不在可视范围内
                    this._owner.m_tableDimentionManager.TableLayout.scrollTop = cellTop - headHeight;
                }
            }
            //对于不可编辑的文本列单元格，修改title属性，显示Tooltip 20110110
            if (this._owner.MainCols[this._owner.m_currentColumnIndex].cusAttr("ControlType") == ControlType.TextBox) {
                if (activeCell) {
                    activeCell.title = activeCell.innerText;
                }
            }

            //如果有选中内容，即是用户选择了单元格里的内容，在不能把焦点置到隐藏焦点捕捉控件内。
            if (window.document.selection && window.document.selection.createRange().text.length > 0) {
                return;
            }
            else if (window.document.getSelection() && window.document.getSelection().isCollapsed == false) {
                return;
            }
            //u_M_p0_DataGrid1_GB
            var dataGrid1_GB_Input = document.getElementById(this._owner.get_element().id + "_GB");
            if (dataGrid1_GB_Input) {
                try {
                    dataGrid1_GB_Input.focus();
                    dataGrid1_GB_Input.onkeydown = this.aaEvent;
                } catch (e) { }
            }
            this._owner.StoreState("Y");
            this._owner.GridIsInFocus = true;
        }


        if (this._owner.Grid_IsDirtyData == true) //如果Grid本身的脏数据标识为true，则认为该页面全局的脏数据标识为true
            Set_Global_IsDirtyData_TheForm(this._owner.Grid_IsDirtyData);
        else
            Set_Global_IsDirtyData_TheForm(bDirtyDataFlag); //恢复以前的脏数据标识
        //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ End


        return result;
    }, //end startCellEdit
    aaEvent: function () {
        event.srcElement.parentElement.parentElement.control.Focus();
        event.srcElement.parentElement.parentElement.control.m_gridBodyEventsHandler.CellKeyDownReceive();
    },
    //合法性校验
    inhibitCheck: function (cell, columnIndex) {
        var userControl = true;
        var value = "";
        var control = null;
        if (this._owner.MainCols[columnIndex].cusAttr('IsNull') == DefaultSymbol.False) {
            switch (this._owner.GetColumnType(columnIndex)) {
                case ControlType.TextBox:
                { //创建文本录入控件
                    userControl = false;
                    var textBox = cell.getElementsByTagName("input");
                    if (textBox != null) {
                        control = textBox[0];
                        control = $find(control.id); //gct20070704
                        value = control.get_Value();
                    }
                    break;
                }
                case ControlType.Date:
                { //创建日历控件
                    var datePicker = cell.children[0];
                    if (datePicker != null && datePicker.tagName != "NOBR" && (datePicker.className != "FixedInner")) {
                        datePicker = $find(datePicker.id);
                        control = datePicker;
                        value = datePicker.get_Value();
                    }
                    break;
                }
                case ControlType.Combox:
                { //创建下拉列表框控件
                    var combox = cell.children[0];
                    if (combox != null && combox.tagName != "NOBR" && (combox.className != "FixedInner")) {
                        combox = $find(combox.id); //gct20070704
                        control = combox;
                        value = combox.get_Value();
                    }
                    break;
                }
                case ControlType.TextArea:
                { //创建多行文本输入控件
                    var textArea = cell.children[0];
                    if (textArea != null && textArea.tagName != "NOBR" && (textArea.className != "FixedInner")) {
                        textArea = $find(textArea.id); //gct20070704
                        control = textArea;
                        value = textArea.get_Value();
                        userControl = false;
                    }
                    break;
                }
                case ControlType.RefControl:
                { //创建参照控件
                    var curRef = cell.children[0];
                    if (curRef != null && curRef.tagName != "NOBR" && (curRef.className != "FixedInner")) {
                        curRef = $find(curRef.id); //gct20070704
                        control = curRef;
                        value = curRef.get_Key();
                    }
                    break;
                }
                case ControlType.MultiInput:
                { //创建多语言录入控件
                    var curItem = cell.children[0];
                    if (curItem != null || curItem.tagName != "NOBR" && (curItem.className != "FixedInner")) {
                        curItem = $find(curItem.id); //gct20070704
                        control = curItem;
                        value = curItem.get_Value();
                    }
                    break;
                }
                case ControlType.Numberic:
                { //创建数值录入控件
                    var numberic = cell.children[0];
                    if (numberic != null && numberic.tagName != "NOBR" && (numberic.className != "FixedInner")) {
                        numberic = $find(numberic.id); //gct20070704
                        control = numberic;
                        if (numberic.get_Value() != null) {
                            value = numberic.get_Value().toString();
                        }
                    }
                    break;
                }
                default:
                    return true;
            } //end switch
            if (value == "" || value == null) {
                window.alert(this._owner.MainCols[columnIndex].cusAttr('Name') + ": " + MenuText.NotNullErrorMessage);
                if (control != null) {
                    try {
                        if (userControl) {
                            control.SetFocus();
                        } else {
                            control.focus();
                        }
                    } catch (e) { }
                } //end control
                return false;
            }
        }
        return true
    }, //end inhibitCheck

    //终止编辑当前单元,返回值:true成功终止单元编辑，false单元编辑不能终止
    EndCellEdit: function (activeCell, colIndex) //gct20090720:增加columnIndex的原因是因为模拟录入的时候使用。
    {
        var result = false;

        //必须输项控制,不做任何校验
        //if(!this.inhibitCheck(activeCell,this._owner.m_currentColumnIndex))
        //{
        //}

        //gct20090720:模拟录入的时候columnIndex不能取当前默认columnIndex（即this._owner.m_currentColumnIndex），因为可能是模拟录入嵌套，等回到最外层的模拟录入的时候，当前的columnIndex已经改变了。
        var columnIndex = -1;
        if (colIndex == undefined)
            columnIndex = this._owner.m_currentColumnIndex;
        else
            columnIndex = colIndex;
        var eventColIndex = columnIndex;
        var replaceControlID = null;
        if (this._owner.MainCols[columnIndex].cusAttr("ColEditCtrlClientID4P")) {
            replaceControlID = this._owner.MainCols[columnIndex].cusAttr("ColEditCtrlClientID4P");
        }

        if (this._owner.MainCols[columnIndex].cusAttr("ReplaceColumn")) {
            var replaceColumn = this._owner.MainCols[columnIndex].cusAttr("ReplaceColumn");
            if (replaceColumn !== "") {
                columnIndex = this._owner.GetColumnIndex(replaceColumn);
            }
        }

        //------------------------------------------------------------------------------------------------------------------------
        //gct & lzhm 20090421:对于【列编辑控件】录入完值后，【列编辑控件】触发自己的事件，
        //在下面End×××的处理中也会调用【列编辑控件】的set_Value()，从而会调用onchange和ValueChanged，这时候就应该再触发这些事件。
        //因为这不是【列编辑控件】在个性化之前就具有的，而是Grid本身硬附加给【列编辑控件】的。所以不抛事件！
        if (replaceControlID && $find(replaceControlID)) {
            $find(replaceControlID).set_IsRaiseEvent(false); //----------------------------------------个性化-不抛事件
            $find(replaceControlID).set_IsPersonalProcess(true); //------------------------------------个性化-同步
        }
        //
        switch (this._owner.GetColumnType(columnIndex)) {
            case ControlType.TextBox:
            { //创建文本录入控件
                if (replaceControlID && $find(replaceControlID))
                    $find(replaceControlID).set_IsRaiseEvent(true); //-个性化-文本控件，不需要set_Value，不会触发无谓的事件，不需要屏蔽事件

                result = this.EndTextBoxInput(activeCell, columnIndex);
                break;
            }
            case ControlType.CheckBox:
            { //创建选择按纽控件
                result = this.EndCheckBoxInput(activeCell, columnIndex);
                break;
            }
            case ControlType.Date:
            { //创建日历控件
                result = this.EndDatePickerInput(activeCell, columnIndex);
                break;
            }
            case ControlType.Combox:
            { //创建下拉列表框控件
                result = this.EndComboxInput(activeCell, columnIndex);
                break;
            }
            case ControlType.TextArea:
            { //创建多行文本输入控件
                result = this.EndTextAreaInput(activeCell, columnIndex);
                break;
            }
            case ControlType.RefControl:
            { //创建参照控件
                result = this.EndReferenceInput(activeCell, columnIndex);
                break;
            }
            case ControlType.MultiInput:
            { //创建多语言录入控件
                replaceControlID = null; //gct20090108:对于多语跨页签移动到Grid中的情况，个性化列的编辑器暂时用列默认的编辑器
                result = this.EndMultiInput(activeCell, columnIndex);
                break;
            }
            case ControlType.Numberic:
            { //创建数值录入控件
                if (replaceControlID && $find(replaceControlID))
                    $find(replaceControlID).set_IsRaiseEvent(true); //数字控件取值已经使用FormatHelper不需要多语的SetValue，不需要屏蔽事件

                result = this.EndNumbericInput(activeCell, columnIndex);
                break;
            }
            //
        } //end switch

        //终止编辑成功
        if (result && replaceControlID && $find(replaceControlID)) {
            $find(replaceControlID).set_IsRaiseEvent(true); //----------------------------------------个性化-抛事件
            $find(replaceControlID).set_IsPersonalProcess(true); //-----------------------------------个性化-同步
        }
        //var columnIndex = this._owner.m_currentColumnIndex;
        columnIndex = eventColIndex;
        if (this._owner.MainCols[columnIndex].cusAttr("ReplaceColumn")) {
            var replaceColumn = this._owner.MainCols[columnIndex].cusAttr("ReplaceColumn");
            if (replaceColumn !== "") {
                columnIndex = this._owner.GetColumnIndex(replaceColumn);
                var ele = this._owner.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(this._owner.m_currentRowIndex, columnIndex);
                ele.cusAttr("Value", activeCell.cusAttr('Value'));
                ele.cusAttr('R', activeCell.cusAttr('R'));
                ele.title = activeCell.title;
                var row = this.tableBody.rows[this._owner.m_currentRowIndex];
                var cell = row.cells[columnIndex];
                cell.cusAttr('Value', activeCell.cusAttr('Value'));
            }
        }
        if (result) this._owner.OnCellFocusOut(this._owner.m_currentRowIndex, columnIndex); //焦点丢失
        return result;
    }, //end EndCellEdit

    //创建文本输入框 true 编辑成功 false 编辑失败
    CreateTextBox: function (cell, columnIndex, replaceControlID) {
        var textBox = null;
        if (replaceControlID != null) {
            textBox = $get(replaceControlID);
            textBox.style.border = "0";
            textBox.style.width = "100%";
        } else {
            textBox = this._owner.CreateTextBoxControl(columnIndex);
        }

        if (textBox == null) return false;
        textBox.cusAttr("oldText", cell.innerText);
        if (replaceControlID != null) {
            textBox.control.set_Value(cell.cusAttr('Value'));
        } else {
            //当被交换的列是参照的时候，cell.Value是参照的ID，应该是参照的name即innerText。
            if (this._owner.GetColumnType(this._owner.m_currentColumnIndex) == ControlType.RefControl)
                textBox.value = cell.innerText;
            else
                textBox.value = cell.cusAttr('Value');
        }
        this.SetCellOldValue(cell);

        if (this._owner.GetColumnType(this._owner.m_currentColumnIndex) == ControlType.RefControl)
            textBox.value = textBox.cusAttr("oldText");
        else
            textBox.value = cell.cusAttr('Value');

        var textBoxJS = textBox.control;
        var _this = this
        textBox.onpaste = function (e) {

            var ClipboardData = e.clipboardData || window.clipboardData;
            var getcopyDate = navigator.userAgent.indexOf('Firefox') > -1 ? ClipboardData.getData('Text').split('\n') : ClipboardData.getData('Text').split('\r\n');
            var totalRows = _this._owner.m_TotalRows
            var rowIndex = _this._owner.m_currentRowIndex
            var pasteCols = _this._owner._element.cusAttr("PasteCols");
            var fieldId = _this._owner.MainCols[columnIndex].cusAttr("fieldid")
            var copyDate = [];
            for (let k = 0; k < getcopyDate.length; k++) {
                if (getcopyDate[k].split("\t")[0] || k < getcopyDate.length - 1) {
                    copyDate.push(getcopyDate[k].split("\t")[0].trim())
                }
            }
            var copeDataStr = copyDate.join("\r\n");
            if (copyDate.length > 1) {
                if (pasteCols && pasteCols.indexOf(fieldId) >= 0 && _this._owner._element.cusAttr("BPOnServer") === "True") {
                    var grid = _this._owner.get_id()
                    var tGrid = $find(grid)
                    tGrid.OnBatchPaste({
                        rowIndex: rowIndex,
                        fieldid: fieldId,
                        PasteList: copeDataStr
                    })
                } else {
                    if (totalRows >= copyDate.length + rowIndex) {
                    } else {
                        for (var i = 0; i < copyDate.length + rowIndex - totalRows; i++) {
                            _this._owner.AddNewRow(false);
                        }
                    }
                    _ClientJSExecQueueManager.ClearAll()
                    var grid = _this._owner.get_id()
                    var readyJs = "var tGrid=$find('" + grid + "');tGrid.ReadyToStartBatchModifyProcess(" + (copyDate.length) + ");tGrid.HideMenu();tGrid=null";
                    _ClientJSExecQueueManager.Push(readyJs)
                    for (var j = 0; j < copyDate.length; j++) {
                        var resultJs = "$find('" + grid + "').EndEdit();if( $find('" + grid + "').m_currentRowIndex != " + (rowIndex + j) + "){ $find('" + grid + "').m_currentRowIndex=" + (rowIndex + j) + ";$find('" + grid + "').m_currentColumnIndex=" + columnIndex + ";$find('" + grid + "').Focus(true);$find('" + grid + "').OnRowChanged(true);}"
                        _ClientJSExecQueueManager.Push(resultJs)
                        var changeJs = "$SetGridCellValue('" + grid + "'," + (rowIndex + j) + "," + columnIndex + ",'" + copyDate[j].replace(/\'/g, "&apos;").replace(/\"/, "&quot;") + "','" + copyDate[j].replace(/\'/g, "&apos;").replace(/\"/, "&quot;") + "','" + copyDate[j].replace(/\'/g, "&apos;").replace(/\"/, "&quot;") + "',false, null, 2);$find('" + grid + "').BatchModifyFowardOneUnit();"
                        _ClientJSExecQueueManager.Push(changeJs)
                        // $SetGridCellValue(grid,rowIndex + j,columnIndex,refDataArray[j].key,refDataArray[j].value,refDataArray[j].text,false, null, 2)
                    }
                    var compJs = "var tGrid=$find('" + grid + "');tGrid.CompleteBatchModify();UF.UI.Reference.DisableShowForm = false;tGrid=null"
                    _ClientJSExecQueueManager.Push(compJs)
                    _ClientJSExecQueueManager.Running = false;
                    _ClientJSExecQueueManager.Start()
                }
            }
        }
        cell.innerHTML = "";
        this.RemovePadding(cell);
        textBox.style.display = "";
        cell.appendChild(textBox);
        if (textBox.control) {
            try {
                textBox.control._textbox.focus();
                textBox.control._textbox.select();
            } catch (e) { }
        } else {
            textBox.focus();
            textBox.select();
        }

        return true;
    }, //end CreateTextBox

    //终止文本输入 true 终止成功 false失败
    EndTextBoxInput: function (cell, columnIndex) {
        //gct20081210:如果修改正常逻辑，请相应修改个性化分支，两个分支逻辑应该保持一致。
        if (cell.getElementsByTagName("Span").length > 0) //gct20081208:个性化分支。注意：个性化跨页签移动时cell里面是<Span>不是<input>
        {
            var span = cell.getElementsByTagName("Span")[0]; //取得个性化跨页签列的编辑器控件span，而不是Grid默认的列编辑器check
            var textBox = span.children[0];
            if (textBox.type != "text") return true;
            if (cell.getElementsByTagName("input").length == 0) return true;
            var textBox = cell.getElementsByTagName("input");
            var newValue = G_SplitLongString(G_Trim(textBox[0].value), textBox[0].maxLength);
            var oldText = span.cusAttr("oldText");
            var dataType = textBox[0].cusAttr("dataType");
            var format = textBox[0].cusAttr("displayFormat");
            var oldValue = cell.cusAttr("oldValue");
            span.style.display = "none"; //替换textBox[0].style.display="none";
            this._owner.get_element().appendChild(span); //替换this._owner.get_element().appendChild(textBox[0]);
            if (oldValue == newValue) { //当前单元值未改变
                cell.cusAttr('Value', oldValue);
                this._owner.setCellListValue(cell, oldText);
                return true;
            } else {
                cell.cusAttr('Value', newValue); //在抛出事件之前先改变单元内容
                cell.title = newValue; //wangl:设置 tooltip
                this._owner.setCellListValue(cell, this._owner.GetFormatedValue(newValue, dataType, format));
                var cellData = new CellDataContent(oldValue, newValue);
                // var oldSelectedValue = this._owner.IsRowSelected(cell.parentElement);
                if (this.editManager.OnRowContentChanged(cellData, cell.parentElement, columnIndex)) { //激活行内容被改变事件
                    if (cellData.ResultValue != "") { //用户改变了当前数据
                        cell.cusAttr('Value', cellData.ResultValue);
                        if (cellData.ResultText != "") {
                            this._owner.setCellListValue(cell, cellData.ResultText);
                        } else { //利用原数据格式化
                            this._owner.setCellListValue(cell, this._owner.GetFormatedValue(cellData.ResultValue, dataType, format));
                        }
                    }
                    if (dataType == DataType.Float || dataType == DataType.INT || dataType == DataType.Int16 || dataType == DataType.Int64 || dataType == DataType.Decimal || dataType == DataType.Single || dataType == DataType.Double) { //计算公式和合计
                        this.calculate.CalculateColumnExpression(columnIndex, this._owner.m_currentRowIndex);
                        this.calculate.CalculateAggregations(cell.parentElement, columnIndex, oldValue, newValue);
                        // if (this._owner.m_SumSelectedData && !oldSelectedValue) { } else {
                        //     this.calculate.CalculateAggregations(columnIndex, oldValue, newValue);
                        // }
                    }
                    return true;
                } else { //如果输入不合法，光标依然停留在当前位置
                    try {
                        span.style.display = ""; //替换textBox[0].style.display="";
                        textBox[0].focus;
                    } catch (e) { }
                    return false;
                }
            }
        } else //非个性化的正常逻辑
        {
            if (cell.getElementsByTagName("input").length == 0) return true;
            var textBox = cell.getElementsByTagName("input");
            var newValue = G_SplitLongString(G_Trim(textBox[0].value), textBox[0].maxLength);
            var oldText = textBox[0].cusAttr("oldText");
            var dataType = textBox[0].cusAttr("dataType");
            var format = textBox[0].cusAttr("displayFormat");
            var oldValue = cell.cusAttr("oldValue");
            textBox[0].style.display = "none";
            this._owner.get_element().appendChild(textBox[0]);
            if (oldValue == newValue) { //当前单元值未改变
                cell.cusAttr('Value', oldValue);
                this._owner.setCellListValue(cell, oldText);
                return true;
            } else {
                cell.cusAttr('Value', newValue); //在抛出事件之前先改变单元内容
                cell.title = newValue; //wangl:设置 tooltip

                this._owner.setCellListValue(cell, this._owner.GetFormatedValue(newValue, dataType, format));
                var cellData = new CellDataContent(oldValue, newValue);
                // var oldSelectedValue = this._owner.IsRowSelected(cell.parentElement);
                if (this.editManager.OnRowContentChanged(cellData, cell.parentElement, columnIndex)) { //激活行内容被改变事件
                    if (cellData.ResultValue != "") { //用户改变了当前数据
                        cell.cusAttr('Value', cellData.ResultValue);
                        if (cellData.ResultText != "") {
                            this._owner.setCellListValue(cell, cellData.ResultText);
                        } else { //利用原数据格式化
                            this._owner.setCellListValue(cell, this._owner.GetFormatedValue(cellData.ResultValue, dataType, format));
                        }
                    }
                    if (dataType == DataType.Float || dataType == DataType.INT || dataType == DataType.Int16 || dataType == DataType.Int64 || dataType == DataType.Decimal || dataType == DataType.Single || dataType == DataType.Double) { //计算公式和合计
                        this.calculate.CalculateColumnExpression(columnIndex, this._owner.m_currentRowIndex);
                        this.calculate.CalculateAggregations(cell.parentElement, columnIndex, oldValue, newValue);
                        // if (this._owner.m_SumSelectedData && !oldSelectedValue) { } else {
                        //     this.calculate.CalculateAggregations(columnIndex, oldValue, newValue);
                        // }
                    }
                    else if (this._owner.MainCols[columnIndex].cusAttr('TextMode') == "password" && newValue) {
                        //做密码的处理
                        this._owner.setCellListValue(cell, newValue.replace(/./g, "*"));
                    }
                    return true;
                } else { //如果输入不合法，光标依然停留在当前位置
                    try {
                        textBox[0].style.display = "";
                        textBox[0].focus;
                    } catch (e) { }
                    return false;
                }
            }
        } //分支结束
    }, //end EndTextBoxInput

    //创建单选按纽控件
    CreateCheckBox: function (cell, columnIndex, replaceControlID) {
        var checkBox = null;
        var currentCellValue;
        if (replaceControlID != null) //个性化跨页签分支
        {
            checkBox = $get(replaceControlID);
            checkBox.style.border = "0";
            //checkBox.className="GridInput";//暂时不需要加这句话也可满足要求
            cell.align = "center";
        } else {
            checkBox = this._owner.CreateCheckBoxControl(columnIndex);
        }
        if (checkBox == null) return false; //控件创建不成功
        this.SetCellOldValue(cell);
        cell.innerHTML = "";
        checkBox.style.display = "";
        cell.appendChild(checkBox);
        this.RemovePadding(cell);
        // checkBox.style.width = cell.clientWidth + 'px';
        checkBox.style.width = 17 + 'px';  //跨浏览器兼容样式所修改 -- weiyin -- 20170316
        currentCellValue = this._owner.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(this._owner.m_currentRowIndex, columnIndex).cusAttr('value');
        if (this._owner.HasSwitchColumn(this._owner.m_currentColumnIndex)) {
            checkBox.checked = this._owner.SetCheckBoxValue(currentCellValue, columnIndex);
        } else {
            checkBox.checked = this._owner.SetCheckBoxValue(cell.cusAttr('Value'), columnIndex);
        }
        try {
            Basic.SetFocus(checkBox);
            checkBox.focus();
        } catch (e) { }
        /*if(event.keyCode==KeyCode.space){
        checkBox.checked = !checkBox.checked;
        //激活行被选择事件
        this._owner.OnBodyRowSelected(this._owner.m_currentRowIndex,checkBox.checked);
        this._owner.OnBodyRowSelectedClick(this._owner.m_currentRowIndex,checkBox.checked);
        //zjx add
        this._owner.OnRowClicked();
        }*/
        return true;
    }, //end CreateCheckBox

    //终止单选按纽输入
    EndCheckBoxInput: function (cell, columnIndex) {
        if (cell.getElementsByTagName("Span").length > 0) //gct20081208:个性化分支。注意：个性化跨页签移动时cell里面是<Span>不是<input>
        {
            var span = cell.getElementsByTagName("Span")[0]; //取得个性化跨页签列的编辑器控件span，而不是Grid默认的列编辑器check
            var checkbox = span.children[0]; //替换var checkbox=cell.getElementsByTagName("input")[0];
            if (checkbox.type != "checkbox") return true;
            var checkBoxRef = this._owner.MainCols[columnIndex].cusAttr('CheckBoxValueRef');
            var newValue = this._owner.GetCheckBoxValue(checkbox.checked.toString(), checkBoxRef);
            if (cell.cusAttr('Value') == newValue) {
                //cell.removeChild(checkbox);
                span.style.display = "none"; //替换checkbox.style.display="none";
                this._owner.get_element().appendChild(span); //替换this._owner.get_element().appendChild(checkbox);
                this._owner.setCellListValue(cell, this._owner.GetCheckBoxText(checkbox.checked.toString(), checkBoxRef));
                return true;
            } else {
                var cellData = new CellDataContent(cell.cusAttr('Value'), newValue);
                //cell.removeChild(checkbox);
                span.style.display = "none"; //替换checkbox.style.display="none";
                this._owner.get_element().appendChild(span); //替换this._owner.get_element().appendChild(checkbox);
                cell.cusAttr('Value', newValue);
                this._owner.setCellListValue(cell, this._owner.GetCheckBoxText(checkbox.checked.toString(), checkBoxRef));
                if (this.editManager.OnRowContentChanged(cellData, cell.parentElement, columnIndex)) {
                    return true;
                } else {
                    cell.innerHTML = "";
                    cell.appendChild(span); //替换cell.appendChild(checkbox);
                    span.style.display = ""; //替换checkbox.style.display="";
                    try {
                        checkbox.focus;
                    } catch (e) { }
                    return false;
                }
            }
        } else {
            if (cell.getElementsByTagName("input").length == 0) return true;
            var checkbox = cell.getElementsByTagName("input")[0];
            if (checkbox.type != "checkbox") return true;
            var checkBoxRef = this._owner.MainCols[columnIndex].cusAttr('CheckBoxValueRef');
            var newValue = this._owner.GetCheckBoxValue(checkbox.checked.toString(), checkBoxRef);
            if (cell.cusAttr('Value') == newValue) {
                //cell.removeChild(checkbox);
                checkbox.style.display = "none";
                this._owner.get_element().appendChild(checkbox);
                this._owner.setCellListValue(cell, this._owner.GetCheckBoxText(checkbox.checked.toString(), checkBoxRef));
                return true;
            } else {
                var cellData = new CellDataContent(cell.cusAttr('Value'), newValue);
                //cell.removeChild(checkbox);
                checkbox.style.display = "none";
                this._owner.get_element().appendChild(checkbox);
                cell.cusAttr('Value', newValue);
                this._owner.setCellListValue(cell, this._owner.GetCheckBoxText(checkbox.checked.toString(), checkBoxRef));
                if (this.editManager.OnRowContentChanged(cellData, cell.parentElement, columnIndex)) {
                    return true;
                } else {
                    cell.innerHTML = "";
                    cell.appendChild(checkbox);
                    checkbox.style.display = "";
                    try {
                        checkbox.focus;
                    } catch (e) { }
                    return false;
                }
            }
        }
    }, //end EndCheckBoxInput

    //选择当前按钮
    SelectCheckBox: function (cell) {
        if (cell.getElementsByTagName("input").length == 0) return true;
        var checkbox = cell.getElementsByTagName("input")[0];
        if (checkbox.type != "checkbox") return true;
        //checkbox.checked =!checkbox.checked;
        checkbox.focus();
    }, //end SelectCheckBox

    //创建下拉列表控件
    CreateCombox: function (cell, columnIndex, replaceControlID) {
        var combox = null;
        if (replaceControlID != null) {
            combox = $get(replaceControlID);
            combox.style.border = "0";
        } else {
            combox = this._owner.CreateComboxControl(columnIndex);
        }
        if (combox == null) return false;
        var comboxJS = combox.control;
        this.RemovePadding(cell);
        comboxJS.set_Value(cell.cusAttr('Value'));
        comboxJS.set_Text(unescapeHTML($(cell).text()));

        this.SetCellOldValue(cell);

        var _this = this
        comboxJS._textbox.onpaste = function (e) {
            var ClipboardData = e.clipboardData || window.clipboardData;
            var getcopyDate = navigator.userAgent.indexOf('Firefox') > -1 ? ClipboardData.getData('Text').split('\n') : ClipboardData.getData('Text').split('\r\n');
            var totalRows = _this._owner.m_TotalRows
            var rowIndex = _this._owner.m_currentRowIndex
            var refDataArray = []
            var pasteCols = _this._owner._element.cusAttr("PasteCols");
            var fieldId = _this._owner.MainCols[columnIndex].cusAttr("fieldid")
            var copyDate = [];
            for (let k = 0; k < getcopyDate.length; k++) {
                if (getcopyDate[k].split("\t")[0] || k < getcopyDate.length - 1) {
                    copyDate.push(getcopyDate[k].split("\t")[0].trim())
                }
            }
            var copeDataStr = copyDate.join("\r\n");
            if (copyDate.length > 1) {
                e.preventDefault();
                if (pasteCols && pasteCols.indexOf(fieldId) >= 0 && _this._owner._element.cusAttr("BPOnServer") === "True") {
                    var grid = _this._owner.get_id()
                    var tGrid = $find(grid)
                    tGrid.OnBatchPaste({
                        rowIndex: rowIndex,
                        fieldid: fieldId,
                        PasteList: copeDataStr
                    })
                } else {
                    var grid = _this._owner.get_id()
                    // comboxJS.CallXmlHttpForPaste(copeDataStr) // ID Code Name
                    var refData = []
                    var refInfo = comboxJS.getRefInfo();
                    var QureyField = refInfo.ValueField;
                    var url;

                    url = comboxJS.GetUrl(refInfo.RefType, "ModalRef", false, false) + "&CommandType=callback&QueryField=" + QureyField + "&QueryNameField=" + refInfo.TextField + "&CustQueryField=EValue";
                    url += "&MatchType=5&__ipt=true&ContentType=json";
                    url = AppendPopupUrl(url);
                    url = url.replace("simple.aspx?", "../mvc/main/BatchReference?");
                    $.ajax({
                        url: url,
                        type: "post",
                        async: false,
                        data: {
                            Code: copeDataStr
                        },
                        success: function (data) {
                            try {
                                refData = data ? JSON.parse(data) : []
                            } catch (e) {
                                refData = []
                            }
                        }
                    })
                    for (var j = 0; j < refData.length; j++) {
                        refDataArray.push({
                            key: refData[j]["EValue"] ? refData[j]["EValue"] : "",
                            value: refData[j]["EValue"] ? refData[j]["EValue"].replace(/\'/g, "&apos;").replace(/\"/, "&quot;") : "",
                            text: refData[j]["EValue"] ? refData[j]["EValue"].replace(/\'/g, "&apos;").replace(/\"/, "&quot;") : ""
                        })
                    }
                    if (refDataArray.length == 0) {
                        return
                    }
                    $find(grid).ReadyToStartBatchModifyProcess(refDataArray.length);
                    _ClientJSExecQueueManager.ClearAll()
                    for (var j = 0; j < refDataArray.length; j++) {
                        // if(refDataArray[j].value != "") {
                        var resultJs = ""
                        if (rowIndex + j < totalRows) {
                            resultJs = "$find('" + grid + "').EndEdit();if( $find('" + grid + "').m_currentRowIndex != " + (rowIndex + j) + "){ $find('" + grid + "').m_currentRowIndex=" + (rowIndex + j) + ";$find('" + grid + "').m_currentColumnIndex=" + columnIndex + ";$find('" + grid + "').Focus(true);$find('" + grid + "').OnRowChanged(true);}"
                        } else {
                            resultJs = "$find('" + grid + "').EndEdit();$find('" + grid + "').AddNewRow(false);if( $find('" + grid + "').m_currentRowIndex != " + (rowIndex + j) + "){ $find('" + grid + "').m_currentRowIndex=" + (rowIndex + j) + ";$find('" + grid + "').m_currentColumnIndex=" + columnIndex + ";$find('" + grid + "').Focus(true);$find('" + grid + "').OnRowChanged(true);}"
                        }
                        // var resultJs = "$find('"+grid+"').EndEdit();if( $find('"+grid+"').m_currentRowIndex != "+ (rowIndex + j) +"){ $find('" +grid +"').m_currentRowIndex="+ (rowIndex + j) +";$find('"+grid+"').m_currentColumnIndex="+ columnIndex +";$find('"+grid+"').Focus(true);$find('"+grid+"').OnRowChanged(true);}"
                        _ClientJSExecQueueManager.Push(resultJs)
                        var changeJs = "$SetGridCellValue('" + grid + "'," + (rowIndex + j) + "," + columnIndex + ",'" + refDataArray[j].key + "','" + refDataArray[j].value + "','" + refDataArray[j].text + "',false, null, 2);$find('" + grid + "').BatchModifyFowardOneUnit();"
                        _ClientJSExecQueueManager.Push(changeJs)
                    }
                    var compJs = "var tGrid=$find('" + grid + "');tGrid.CompleteBatchModify();UF.UI.Reference.DisableShowForm = false;tGrid=null"
                    _ClientJSExecQueueManager.Push(compJs)
                    _ClientJSExecQueueManager.Running = false;
                    _ClientJSExecQueueManager.Start()
                }
            }
        }

        cell.innerHTML = "";

        combox.style.display = "";
        cell.appendChild(combox);
        comboxJS.set_Width(cell.clientWidth);
        Basic.SetFocus(comboxJS._textbox);
        comboxJS._textbox.focus();
        comboxJS._textbox.select();
        return true;
    }, //end CreateCombox

    //删除边距
    RemovePadding: function (cell) {
        cell.style.padding = "0px 0px 0px 0px";
        //cell.style.paddingRight = 0;
    }, //end RemovePadding

    //终止枚举输入 true 终止成功 false 失败
    EndComboxInput: function (cell, columnIndex) {
        var combox = cell.children[0];
        if (combox == this._owner.UNDEFINED_VALUE || combox.tagName == "NOBR" || combox.className == "FixedInner") return true;
        var comboxJS = combox.control;
        var value = comboxJS.get_Value();
        var text = comboxJS.get_Text();
        combox.style.display = "none";
        //if(value==""){value=-1;}//in js,0=="" is true,所以若枚举值value为0的时候，js认为0==""，总是会被置-1。
        if (value == null || value.toString() == "") {
            value = -1;
        }
        var oldCellValue = cell.cusAttr('Value');
        if (oldCellValue == null || oldCellValue.toString() == "") {
            oldCellValue = -1;
        }
        if (value == oldCellValue) {
            //cell.removeChild(combox);
            this._owner.get_element().appendChild(combox);
            this._owner.setCellListValue(cell, text);
            return true;
        } else {
            var cellData = new CellDataContent(cell.cusAttr('Value'), value);
            //cell.removeChild(combox);
            this._owner.get_element().appendChild(combox);
            cell.cusAttr('Value', value);
            this._owner.setCellListValue(cell, text);
            if (this.editManager.OnRowContentChanged(cellData, cell.parentElement, columnIndex)) {
                return true;
            } else {
                cell.innerHTML = "";
                cell.appendChild(combox);
                combox.style.display = "";
                comboxJS.SetFocus();
                return false;
            }
        }
    }, //end EndComboxInput

    SetCellOldValue: function (cell) {
        cell.cusAttr("oldValue", cell.cusAttr('Value'));
        cell.cusAttr("oldText", cell.innerHTML);
    }, //end SetCellOldValue

    RestoreCellOldValue: function (cell) {
        var control = cell.children[0];
        if (control == this._owner.UNDEFINED_VALUE || control.tagName == "NOBR" || control.className == "FixedInner") return;
        cell.removeChild(control);
        cell.cusAttr('Value', cell.cusAttr("oldValue"));
        cell.innerHTML = cell.cusAttr("oldText");
    }, //end RestoreCellOldValue

    //创建日历控件
    CreateDatePicker: function (cell, columnIndex, replaceControlID) {
        var datePicker = null;
        if (replaceControlID != null) {
            datePicker = $get(replaceControlID);
            datePicker.style.border = "0";
        } else {
            datePicker = this._owner.CreateDatePickerControl(columnIndex);
        }

        if (datePicker == null) return false;
        var datePickerJS = datePicker.control;
        if (cell.cusAttr('Value') == "") {
            datePickerJS.set_Value(null);
        } else {
            datePickerJS.set_Value(cell.cusAttr('Value'));
        }
        //cell.style.backgroundColor =DefaultSymbol.BodyCellBackgroundcolor;
        this.SetCellOldValue(cell);
        var _this = this
        datePickerJS._textbox.onpaste = function (e) {
            var ClipboardData = e.clipboardData || window.clipboardData;
            var getcopyDate = navigator.userAgent.indexOf('Firefox') > -1 ? ClipboardData.getData('Text').split('\n') : ClipboardData.getData('Text').split('\r\n');
            var totalRows = _this._owner.m_TotalRows
            var rowIndex = _this._owner.m_currentRowIndex
            var pasteCols = _this._owner._element.cusAttr("PasteCols");
            var fieldId = _this._owner.MainCols[columnIndex].cusAttr("fieldid")
            var copyDate = [];
            for (let k = 0; k < getcopyDate.length; k++) {
                if (getcopyDate[k].split("\t")[0] || k < getcopyDate.length - 1) {
                    copyDate.push(getcopyDate[k].split("\t")[0].trim())
                }
            }
            var copeDataStr = copyDate.join("\r\n");
            if (copyDate.length > 1) {
                if (pasteCols && pasteCols.indexOf(fieldId) >= 0 && _this._owner._element.cusAttr("BPOnServer") === "True") {
                    var grid = _this._owner.get_id()
                    var tGrid = $find(grid)
                    tGrid.OnBatchPaste({
                        rowIndex: rowIndex,
                        fieldid: fieldId,
                        PasteList: copeDataStr
                    })
                } else {
                    if (totalRows >= copyDate.length + rowIndex) {
                    } else {
                        for (var i = 0; i < copyDate.length + rowIndex - totalRows; i++) {
                            _this._owner.AddNewRow(false);
                        }
                    }
                    _ClientJSExecQueueManager.ClearAll()
                    var grid = _this._owner.get_id()
                    var reg = /^[0-9,./:-\s]+$/;
                    var readyJs = "var tGrid=$find('" + grid + "');tGrid.ReadyToStartBatchModifyProcess(" + (copyDate.length) + ");tGrid.HideMenu();tGrid=null";
                    _ClientJSExecQueueManager.Push(readyJs)
                    for (var j = 0; j < copyDate.length; j++) {

                        if (!isNaN(Date.parse(new Date(copyDate[j].replace(/-/g, '/')))) && isNaN(copyDate[j]) && reg.test(copyDate[j])) {
                            copyDate[j] = new Date(copyDate[j].replace(/-/g, '/')).toLocaleString().replace(/\//g, "-")
                        } else {
                            copyDate[j] = ""
                        }
                        var resultJs = "$find('" + grid + "').EndEdit();if( $find('" + grid + "').m_currentRowIndex != " + (rowIndex + j) + "){ $find('" + grid + "').m_currentRowIndex=" + (rowIndex + j) + ";$find('" + grid + "').m_currentColumnIndex=" + columnIndex + ";$find('" + grid + "').Focus(true);$find('" + grid + "').OnRowChanged(true);}"
                        _ClientJSExecQueueManager.Push(resultJs)
                        var changeJs = "$SetGridCellValue('" + grid + "'," + (rowIndex + j) + "," + columnIndex + ",'" + copyDate[j] + "','" + copyDate[j] + "','" + copyDate[j] + "',false, null, 2);$find('" + grid + "').BatchModifyFowardOneUnit();"
                        _ClientJSExecQueueManager.Push(changeJs)
                        // $SetGridCellValue(grid,rowIndex + j,columnIndex,refDataArray[j].key,refDataArray[j].value,refDataArray[j].text,false, null, 2)
                    }
                    var compJs = "var tGrid=$find('" + grid + "');tGrid.CompleteBatchModify();UF.UI.Reference.DisableShowForm = false;tGrid=null"
                    _ClientJSExecQueueManager.Push(compJs)
                    _ClientJSExecQueueManager.Running = false;
                    _ClientJSExecQueueManager.Start()
                }
            }
        }
        cell.innerHTML = "";
        this.RemovePadding(cell);
        datePicker.style.display = "";
        cell.appendChild(datePicker);
        datePickerJS.set_Width(cell.clientWidth);
        Basic.SetFocus(datePickerJS._textbox);
        return true;
    }, //end CreateDatePicker

    //终止日历输入 true终止成功 false 失败
    EndDatePickerInput: function (cell, columnIndex) {
        var datePicker = cell.children[0];
        if (datePicker == this._owner.UNDEFINED_VALUE || datePicker.tagName == "NOBR" || datePicker.className == "FixedInner") return true;
        var datePickerJS = datePicker.control;
        if (!datePickerJS)
            return;
        datePicker.style.display = "none";
        //mahx20160707 在IE下，当值发生改变并且不是点击页面其他地方失去焦点的时候，上面那句代码datePicker.style.display = "none";，就可以触发DatePicker的change事件
        //而谷歌下不会触发，我手动强制触发了一下。不然后面得到的值永远是旧值
        if (datePickerJS.get_Text() != $(datePicker.children[0]).val())
            datePickerJS.inputChange();
        var dateValue = datePickerJS.get_Value();
        datePickerJS.set_Value(cell.cusAttr('Value'));
        if (dateValue == datePickerJS.get_Value()) {
            cell.cusAttr('Value', datePickerJS.get_Value());
        }
        datePickerJS.set_Value(dateValue);
        /*if($(cell).attr('Value').length>dateValue.length&&(dateValue.length!=0)&&(Math.abs(dateValue.length-$(cell).attr('Value').length)<=2)){
        //$(cell).attr('Value') = $(cell).attr('Value').substring(0,dateValue.length);
        $(cell).attr('Value') = dateValue;
        }*/
        if (cell.cusAttr('Value') == dateValue) {
            //cell.removeChild(datePicker);
            this._owner.get_element().appendChild(datePicker);
            this._owner.setCellListValue(cell, datePickerJS.get_Text());
            return true;
        } else {
            var cellData = new CellDataContent(cell.cusAttr('Value'), dateValue);
            //cell.removeChild(datePicker);
            this._owner.get_element().appendChild(datePicker);
            cell.cusAttr('Value', dateValue);
            this._owner.setCellListValue(cell, datePickerJS.get_Text());
            if (this.editManager.OnRowContentChanged(cellData, cell.parentElement, columnIndex)) {
                return true;
            } else {
                cell.innerHTML = "";
                cell.appendChild(datePicker);
                datePicker.style.display = "";
                datePickerJS.SetFocus();
                return false;
            }
        }
    }, //end EndDatePickerInput

    //创建数值输入控件
    CreateNumbericInput: function (cell, columnIndex, rowIndex, replaceControlID) {
        var numberic = null;
        if (replaceControlID != null) {
            numberic = $get(replaceControlID);
            numberic.style.border = "0";
        } else {
            numberic = this._owner.CreateNumbericControl(columnIndex, rowIndex);
        }

        if (numberic == null) return false;
        var numbericJS = numberic.control;
        this.SetCellOldValue(cell);
        var _this = this
        //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ Begin
        var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识

        numberic.cusAttr("V", cell.cusAttr('Value'));
        var oldTag = numbericJS._showInvalidMessage; //是否显示异常提示
        numbericJS._showInvalidMessage = "false";
        numbericJS.set_Value(""); // add by lzhm 2007-10-27
        numbericJS.set_Value(cell.cusAttr('Value'));
        numbericJS._showInvalidMessage = oldTag;
        numbericJS._textbox.onpaste = function (e) {
            var ClipboardData = e.clipboardData || window.clipboardData;
            var getcopyDate = navigator.userAgent.indexOf('Firefox') > -1 ? ClipboardData.getData('Text').split('\n') : ClipboardData.getData('Text').split('\r\n');
            var totalRows = _this._owner.m_TotalRows
            var rowIndex = _this._owner.m_currentRowIndex
            var pasteCols = _this._owner._element.cusAttr("PasteCols");
            var fieldId = _this._owner.MainCols[columnIndex].cusAttr("fieldid")
            var copyDate = [];
            for (let k = 0; k < getcopyDate.length; k++) {
                if (getcopyDate[k].split("\t")[0] || k < getcopyDate.length - 1) {
                    copyDate.push(getcopyDate[k].split("\t")[0].trim())
                }
            }
            var copeDataStr = copyDate.join("\r\n");
            if (copyDate.length > 1) {
                if (pasteCols && pasteCols.indexOf(fieldId) >= 0 && _this._owner._element.cusAttr("BPOnServer") === "True") {
                    var grid = _this._owner.get_id()
                    var tGrid = $find(grid)
                    tGrid.OnBatchPaste({
                        rowIndex: rowIndex,
                        fieldid: fieldId,
                        PasteList: copeDataStr
                    })
                } else {
                    if (totalRows >= copyDate.length + rowIndex) {
                    } else {
                        for (var i = 0; i < copyDate.length + rowIndex - totalRows; i++) {
                            _this._owner.AddNewRow(false);
                        }
                    }
                    _ClientJSExecQueueManager.ClearAll()
                    var grid = _this._owner.get_id()
                    var readyJs = "var tGrid=$find('" + grid + "');tGrid.ReadyToStartBatchModifyProcess(" + (copyDate.length) + ");tGrid.HideMenu();tGrid=null";
                    _ClientJSExecQueueManager.Push(readyJs)
                    for (var j = 0; j < copyDate.length; j++) {
                        var resultJs = "$find('" + grid + "').EndEdit();if( $find('" + grid + "').m_currentRowIndex != " + (rowIndex + j) + "){ $find('" + grid + "').m_currentRowIndex=" + (rowIndex + j) + ";$find('" + grid + "').m_currentColumnIndex=" + columnIndex + ";$find('" + grid + "').Focus(true);$find('" + grid + "').OnRowChanged(true);}"
                        _ClientJSExecQueueManager.Push(resultJs)
                        var changeJs = "$SetGridCellValue('" + grid + "'," + (rowIndex + j) + "," + columnIndex + ",'" + copyDate[j] + "','" + copyDate[j] + "','" + copyDate[j] + "',false, null, 2);$find('" + grid + "').BatchModifyFowardOneUnit();"
                        _ClientJSExecQueueManager.Push(changeJs)
                        // $SetGridCellValue(grid,rowIndex + j,columnIndex,refDataArray[j].key,refDataArray[j].value,refDataArray[j].text,false, null, 2)
                    }
                    var compJs = "var tGrid=$find('" + grid + "');tGrid.CompleteBatchModify();UF.UI.Reference.DisableShowForm = false;tGrid=null"
                    _ClientJSExecQueueManager.Push(compJs)
                    _ClientJSExecQueueManager.Running = false;
                    _ClientJSExecQueueManager.Start()
                }
            }

        }

        cell.innerHTML = "";
        this.RemovePadding(cell);
        cell.appendChild(numberic);
        numberic.style.display = "";
        numbericJS.set_Width(cell.clientWidth)
        numbericJS.SetFocus();

        if (this._owner.Grid_IsDirtyData == true) //如果Grid本身的脏数据标识为true，则认为该页面全局的脏数据标识为true
            Set_Global_IsDirtyData_TheForm(this._owner.Grid_IsDirtyData);
        else
            Set_Global_IsDirtyData_TheForm(bDirtyDataFlag); //恢复以前的脏数据标识
        //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ End

        return true;
    }, //end CreateNumbericInput
    IsRepeat: function (columnIndex, rowIndex, v) {
        var columnSchema = this._owner.MainCols[columnIndex];
        var bR = null;
        if (columnSchema)
            if (columnSchema.cusAttr('IsSequence') != this._owner.UNDEFINED_VALUE) {
                for (var i = 0; i < this._owner.m_ArrNos.length; i++) {
                    var v1 = this._owner.m_ArrNos[i];
                    if (v1 == v && (i != rowIndex)) {
                        bR = this._owner.m_ArrNos[rowIndex];
                        break;
                    }
                }
            }
        return bR;
    },
    //终止数值输入
    EndNumbericInput: function (cell, columnIndex) {
        var numberic = cell.children[0];
        if (numberic == this._owner.UNDEFINED_VALUE || numberic.tagName == "NOBR" || numberic.className == "FixedInner") return true;
        numberic.style.display = "none";
        var numbericJS = numberic.control;
        //mahx201901180174 在IE下，当值发生改变并且不是点击页面其他地方失去焦点的时候，上面那句代码numberic.style.display = "none";，就可以触发Numberic的change事件
        //也就是number的changepd事件，这个事件里会做一系列的操作。包括callback的触发等，如果没这一步，就走不了callback。
        //而下面的numbericJS.FireChange()里只是修改控件值，不会触发事件。
        //而谷歌下不会触发，我手动强制触发了一下。
        if (navigator.userAgent.indexOf("Chrome") > -1) {
            numbericJS.changePD();
        }

        if (event)
            if (event.keyCode == KeyCode.up || event.keyCode == KeyCode.down || event.keyCode == KeyCode.left || event.keyCode == KeyCode.right || event.keyCode == KeyCode.enter) {
                var numValStr = numbericJS.changeGroupSeparatorToSpace(numbericJS._textbox.value)
                numbericJS.set_Value(numValStr);
            }

        numbericJS.mschangeFired = true; //置为true，不走数字的changepd
        numbericJS.FireChange();
        var value = numbericJS.get_Value();

        //var rowIndex = cell.parentElement.rowIndex - this._owner.D_Head.children.length;
        //if (this._owner.GetCloneHead())
        //    rowIndex = rowIndex - this._owner.GetCloneHead().length
        var rowIndex = $(cell.parentElement).index();//mahx 用jquery的index比使用上面那种rowIndex更保险
        cell.cusAttr('Value', this._owner.m_formatHelper.FormatCellNumber(columnIndex, rowIndex, cell.cusAttr('Value'), cell.cusAttr('Value')).Value);

        var text = numbericJS.GetTextBoxValue();

        if (value == null) {
            value = "";
        }

        var r = this.IsRepeat(columnIndex, this._owner.m_currentRowIndex, value);
        if (r) {
            cell.cusAttr('Value', r);
            this._owner.get_element().appendChild(numberic);
            this._owner.setCellListValue(cell, r);
            return true;
        }
        var old_value = value; //gct20071120:解决Grid中单元格本来为"",焦点离开后变成0的问题。
        if (value == "") {//U9ZNZZ-69490,value是空，却没给old_value纠正数据
            value = 0;
            old_value = 0;
        }
        if (cell.cusAttr('Value') == "") {
            cell.cusAttr('Value', 0);
        }
        var old_cellValue = cell.cusAttr("oldValue"); //gct20071120:解决Grid中单元格本来为"",焦点离开后变成0的问题。
        if (old_cellValue == "") {
            old_cellValue = 0;
        }
        var tmpReturnValue = false;

        var IsEmptyRow = this.tableBody.rows[rowIndex].cusAttr('Status') === RowStatus.Empty

        if ((parseFloat(old_value) == parseFloat(old_cellValue)) || (old_value == old_cellValue)) {
            //gct20071120:解决Grid中单元格本来为"",焦点离开后变成0的问题。
            value = old_value;
            cell.cusAttr('Value', old_cellValue);

            //cell.removeChild(numberic);
            this._owner.get_element().appendChild(numberic);
            this._owner.setCellListValue(cell, text);
            tmpReturnValue = true;
        } else {
            //gct20071120:解决Grid中单元格本来为"",焦点离开后变成0的问题。
            value = old_value;
            cell.cusAttr('Value', old_cellValue);

            var cellData = new CellDataContent(cell.cusAttr('Value'), value);
            //cell.removeChild(numberic);
            this._owner.get_element().appendChild(numberic);
            cell.cusAttr('Value', value);
            this._owner.setCellListValue(cell, text);
            // var oldSelectedValue = this._owner.IsRowSelected(cell.parentElement);

            var _this = this;
            if (_this.editManager.OnRowContentChanged(cellData, cell.parentElement, columnIndex)) { //先不处理返回值的更改问题
                _this.calculate.CalculateColumnExpression(columnIndex, _this._owner.m_currentRowIndex);
                // if (_this._owner.m_SumSelectedData && !oldSelectedValue) { } else {
                if (event && event.srcElement && event.srcElement.type == "checkbox" && event.srcElement.parentElement.parentElement == cell.parentElement) {
                    event.srcElement.cusAttr("alreadySelected", true);
                }
                if (!IsEmptyRow) {
                    this.calculate.CalculateAggregations(cell.parentElement, columnIndex, old_cellValue, value);
                }
                // }
                //numbericJS.set_Value(""); //此处清除控件值，对个性化到Grid上的数字控件，可能引发回写空错误
                tmpReturnValue = true;
            } else {
                cell.innerHTML = "";
                cell.appendChild(numberic);
                numberic.style.display = "";
                numbericJS.SetFocus();
                tmpReturnValue = false;
            }

        }
        //$(cell).attr('Value') = numbericJS.get_Value();
        return tmpReturnValue;
    }, //end EndNumberInput

    //创建多行文本录入控件
    CreateTextArea: function (cell, columnIndex, replaceControlID) {
        var controlArea = null;
        if (replaceControlID != null) {
            controlArea = $get(replaceControlID);
            controlArea.style.border = "0";
        } else {
            controlArea = this._owner.CreateTextAreaControl(columnIndex);
        }

        if (controlArea == null) return false;
        controlArea.value = cell.cusAttr('Value');
        controlArea.style.width = cell.clientWidth + 'px';
        this.SetCellOldValue(cell);
        cell.innerHTML = "";
        this.RemovePadding(cell);
        cell.appendChild(controlArea);
        controlArea.style.display = "";
        if (controlArea.control) {
            try {
                controlArea.control._textbox.focus();
                controlArea.control._textbox.select();
            } catch (e) { }
        } else {
            controlArea.focus();
            controlArea.select();
        }
        return true;
    }, //end CreateTextArea

    //终止多行文本输入 true 终止成功 false失败
    EndTextAreaInput: function (cell, columnIndex) {
        var curItem = cell.children[0];
        if (curItem == this._owner.UNDEFINED_VALUE || curItem.tagName == "NOBR" || curItem.className == "FixedInner") return true;
        if (curItem.value == "") {
            curItem.value = curItem.innerText;
        }
        curItem.value = G_SplitLongString(G_Trim(curItem.value), curItem.maxLength);
        curItem.style.display = "none";
        if (cell.cusAttr('Value') == curItem.value) {
            //cell.removeChild(curItem);
            this._owner.get_element().appendChild(curItem);
            this._owner.setCellListValue(cell, curItem.value);
            return true;
        } else { //通知当前输入内容的校验，如果不合法则不能终止输入
            var cellData = new CellDataContent(cell.cusAttr('Value'), curItem.value);
            //cell.removeChild(curItem);
            this._owner.get_element().appendChild(curItem);
            cell.cusAttr('Value', curItem.value);
            this._owner.setCellListValue(cell, curItem.value);
            if (this.editManager.OnRowContentChanged(cellData, cell.parentElement, columnIndex)) {
                if (cellData.ResultValue != "") {
                    cell.cusAttr('Value', cellData.ResultValue);
                    if (cellData.ResultText == "") {
                        this._owner.setCellListValue(cell, cell.cusAttr('Value'));
                    } else { //输入内容被用户修改
                        this._owner.setCellListValue(cell, cellData.ResultValue);
                    }
                }
                return true;
            } else {
                curItem.style.display = "";
                curItem.focus();
                return false;
            }
        }
    }, //end EndTextAreaInput

    //创建多语录入控件
    CreateMultiInput: function (cell, columnIndex, replaceControlID) {
        var _this = this;
        var multiInput = null;
        if (replaceControlID != null) {
            multiInput = $get(replaceControlID);
            multiInput.style.border = "0";
        } else {
            multiInput = this._owner.CreateMultiInputControl(columnIndex);
        }

        if (multiInput == null) return false;
        var multiInputJS = multiInput.control;
        if (!multiInputJS)
            return false;

        this.SetCellOldValue(cell);
        cell.innerHTML = "";

        multiInputJS.ClearData();
        if (cell.cusAttr('MultiLang') == this._owner.UNDEFINED_VALUE) {
            multiInputJS.SetMultiinputData("");
        } else {
            multiInputJS.SetMultiinputData(cell.cusAttr('MultiLang'));
        }

        multiInput.onpaste = function (e) {

            var ClipboardData = e.clipboardData || window.clipboardData;
            var getcopyDate = navigator.userAgent.indexOf('Firefox') > -1 ? ClipboardData.getData('Text').split('\n') : ClipboardData.getData('Text').split('\r\n');
            var totalRows = _this._owner.m_TotalRows
            var rowIndex = _this._owner.m_currentRowIndex
            var pasteCols = _this._owner._element.cusAttr("PasteCols");
            var fieldId = _this._owner.MainCols[columnIndex].cusAttr("fieldid")
            var copyDate = [];
            for (let k = 0; k < getcopyDate.length; k++) {
                if (getcopyDate[k].split("\t")[0] || k < getcopyDate.length - 1) {
                    copyDate.push(getcopyDate[k].split("\t")[0].trim())
                }
            }
            var copeDataStr = copyDate.join("\r\n");
            if (copyDate.length > 1) {
                if (pasteCols && pasteCols.indexOf(fieldId) >= 0 && _this._owner._element.cusAttr("BPOnServer") === "True") {
                    var grid = _this._owner.get_id()
                    var tGrid = $find(grid)
                    tGrid.OnBatchPaste({
                        rowIndex: rowIndex,
                        fieldid: fieldId,
                        PasteList: copeDataStr
                    })
                } else {
                    if (totalRows >= copyDate.length + rowIndex) {
                    } else {
                        for (var i = 0; i < copyDate.length + rowIndex - totalRows; i++) {
                            _this._owner.AddNewRow(false);
                        }
                    }
                    _ClientJSExecQueueManager.ClearAll()
                    var grid = _this._owner.get_id()
                    var readyJs = "var tGrid=$find('" + grid + "');tGrid.ReadyToStartBatchModifyProcess(" + (copyDate.length) + ");tGrid.HideMenu();tGrid=null";
                    _ClientJSExecQueueManager.Push(readyJs)
                    for (var j = 0; j < copyDate.length; j++) {
                        var resultJs = "$find('" + grid + "').EndEdit();if( $find('" + grid + "').m_currentRowIndex != " + (rowIndex + j) + "){ $find('" + grid + "').m_currentRowIndex=" + (rowIndex + j) + ";$find('" + grid + "').m_currentColumnIndex=" + columnIndex + ";$find('" + grid + "').Focus(true);$find('" + grid + "').OnRowChanged(true);}"
                        _ClientJSExecQueueManager.Push(resultJs)
                        var changeJs = "$SetGridCellValue('" + grid + "'," + (rowIndex + j) + "," + columnIndex + ",'" + copyDate[j] + "','" + copyDate[j] + "','" + copyDate[j] + "',false, null, 2);$find('" + grid + "').BatchModifyFowardOneUnit();"
                        _ClientJSExecQueueManager.Push(changeJs)
                        // $SetGridCellValue(grid,rowIndex + j,columnIndex,refDataArray[j].key,refDataArray[j].value,refDataArray[j].text,false, null, 2)
                    }
                    var compJs = "var tGrid=$find('" + grid + "');tGrid.CompleteBatchModify();UF.UI.Reference.DisableShowForm = false;tGrid=null"
                    _ClientJSExecQueueManager.Push(compJs)
                    _ClientJSExecQueueManager.Running = false;
                    _ClientJSExecQueueManager.Start()
                }
            }
        }
        multiInputJS.set_Value(cell.cusAttr('Value'));
        this.RemovePadding(cell);
        multiInput.style.display = "";
        cell.appendChild(multiInput);
        multiInputJS.set_Width(cell.clientWidth);
        Basic.SetFocus(multiInputJS._textbox);
        return true;
    }, //end CreateMultiInput
    IsEqueMultiValue: function (oldV, newV) {
        var bEqu = false;
        if (oldV == newV) {
            return true;
        }
        //===by zzq 更改newDom的获取方式
        //var newDom = Basic.GetXmlDom();
        var newDom = Basic._loadXML(newV);
        if (oldV) {
            //===by zzq 更改oldDom的获取方式
            //var oldDom = Basic.GetXmlDom();
            var oldDom = Basic._loadXML(oldV);
            // oldDom.loadXML(oldV);
            // newDom.loadXML(newV);
            //oldDom = Basic.loadXML(oldDom, oldV);
            //newDom = Basic.loadXML(newDom, newV);
            var oldItems = oldDom.getElementsByTagName("Item");
            var newItems = newDom.getElementsByTagName("Item");

            if (oldItems.length == 1) {
                var oldID = oldItems[0].getAttribute("ID");
                var oldText = oldItems[0].getAttribute("Text");
                for (var i = 0; i < newItems.length; i++) {
                    var newID = newItems[i].getAttribute("ID")
                    var newText = newItems[i].getAttribute("Text");
                    if (oldID == newID) {
                        var dOldText = oldText;
                        try {
                            dOldText = decodeURIComponent(oldText);
                        } catch (ex) { }
                        if (oldText != newText && (dOldText != decodeURIComponent(newText))) {
                            bEqu = false;
                            return bEqu;
                        } else {
                            if (newItems.length == 1) {
                                bEqu = true;
                                return bEqu;
                            }
                        }
                    } else {
                        if (newText) {
                            bEqu = false;
                            return bEqu;
                        }
                    }
                }
            } else if (oldItems.length == 0) {
                if (newItems.length == 0) {
                    bEqu = true;
                    return bEqu;
                } else if (newItems.length == 1) {
                    var newText = newItems[0].getAttribute("Text");
                    if (!newText) {
                        bEqu = true;
                        return bEqu;
                    }
                }
            } else if (oldItems.length > 1) {
                var oItem;
                for (var i = 0; i < oldItems.length; i++) {
                    oItem = oldItems[i];
                    var lanId = oItem.getAttribute("ID");
                    var oText = oItem.getAttribute("Text");
                    //===by zzq IE高版本以及webkit内核浏览器不支持selectSingleNode，只能通过寻找Dom节点的方式
                    var newItem = newDom.selectSingleNode("Items/Item[@ID='" + lanId + "']");
                    //var newItem = $(newDom).find("Item[ID=" + lanId + "]")[0];
                    if (newItem) {
                        var nText = newItem.getAttribute("Text");
                        if (lanId == getCultureName()) {
                            var dOText = oText;
                            try {
                                dOText = decodeURIComponent(oText);
                            } catch (ex) { }
                            if (oText != nText && (dOText != decodeURIComponent(nText))) {
                                bEqu = false;
                                return bEqu;
                            }
                        } else if (decodeURIComponent(nText) != decodeURIComponent(oText)) {
                            bEqu = false;
                            return bEqu;
                        }
                        bEqu = true;
                    } else {
                        bEqu = false;
                        return bEqu;
                    }
                }
            }
        } else {
            //newDom.loadXML(newV);

            // newDom.innerHTML = newV; 通过 下面的方法虽然可以修改 outerHTML，innerHTML 但 childNods为0 ，导致后面查找不到结果
            //所以在Baxic中定义了一个兼容性的loadXml方法
            // newDom.outerHTML=newV;
            newDom = Basic.loadXML(newDom, newV);
            var newItems = newDom.getElementsByTagName("Item");
            var bC = true;
            if (newItems.length > 0) {
                for (var i = 0; i < newItems.length; i++) {
                    if (newItems[i].getAttribute("Text")) {
                        bC = false;
                        break;
                    }
                }
            }
            if (bC) {
                bEqu = true;
            }
        }
        return bEqu;
    },
    //终止多语言输入
    EndMultiInput: function (cell, columnIndex) {
        var curItem = cell.children[0];
        if (curItem == this._owner.UNDEFINED_VALUE || curItem.tagName == "NOBR" || curItem.className == "FixedInner") return true;
        var curItemJS = $find(curItem.id);
        if (!curItemJS)
            return true;
        //curItemJS.DivFocusOut();

        var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识

        curItemJS.InputChange();

        if (this._owner.Grid_IsDirtyData == true) //如果Grid本身的脏数据标识为true，则认为该页面全局的脏数据标识为true
            Set_Global_IsDirtyData_TheForm(this._owner.Grid_IsDirtyData);
        else
            Set_Global_IsDirtyData_TheForm(bDirtyDataFlag); //恢复以前的脏数据标识


        var MultiXml = curItemJS.GetMultiinputData();
        var curValue = curItemJS.get_Value();
        curItem.style.display = "none";
        if (this.IsEqueMultiValue(cell.cusAttr('MultiLang'), MultiXml)) {
            //cell.removeChild(curItem);
            this._owner.get_element().appendChild(curItem);
            this._owner.setCellListValue(cell, curValue);
            return true;
        } else { //数据改变事件激活

            var cellData = new CellDataContent(cell.cusAttr('Value'), curItem.value);
            //cell.removeChild(curItem);
            this._owner.get_element().appendChild(curItem);
            cell.cusAttr('MultiLang', MultiXml);
            cell.cusAttr('Value', curValue);
            this._owner.setCellListValue(cell, curValue);
            if (this.editManager.OnRowContentChanged(cellData, cell.parentElement, columnIndex)) {
                return true;
            } else {
                curItem.style.display = "";
                cell.innerHTML = "";
                cell.appendChild(curItem);
                curItemJS.SetFocus();
                return false;
            }
        }
    }, //end EndMultiInput

    //创建参照输入控件
    CreateReference: function (cell, columnIndex, replaceControlID) {
        //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ Begin
        var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识
        var reference = null;

        //gct20090630:个性化扩展列的特殊处理（这些扩展列可能又被新增了参照携带）15SP300280098  15SP300280093 15SP300280304 等多个bug
        if (replaceControlID != null && this._owner.MainCols[columnIndex].cusAttr('ColEditCtrlClientID4P') == null) {
            reference = $get(replaceControlID);
            reference.style.border = "0";
        } else //gct20090630：个性化扩展列走这里
        {
            reference = this._owner.CreateReferenceControl(columnIndex);
            if (this._owner.MainCols[columnIndex].cusAttr('ColEditCtrlClientID4P') != null)
                reference.style.border = "0"; //gct20090630：个性化扩展列特殊处理
        }
        if (reference == null) return false;
        var refJS = reference.control;
        var old_NeedValidate = refJS.get_NeedValidate();
        refJS.set_NeedValidate(false);
        //
        if (this._owner.HasSwitchColumn(this._owner.m_currentColumnIndex)) {
            this._owner.SetReferenceValues(refJS, this._owner.m_gridBodyEventsHandler.GridEditHelper.GetCurrentCell(this._owner.m_currentRowIndex, columnIndex)); //设置进入时的参照初始值
        } else {
            this._owner.SetReferenceValues(refJS, cell); //设置进入时的参照初始值
        }

        refJS.set_NeedValidate(old_NeedValidate);
        /*if(refJS.get_IsLoadDefaultParams()) // 改到 SetReferenceParameter 处理 lzhm*/
        { //设置参照上下文参数,如果关联控件已设置则不设置
            this._owner.SetReferenceParameters(refJS, this._owner.m_currentColumnIndex, this._owner.m_currentRowIndex, reference.cusAttr("RefPara"));
        }
        //cell.style.backgroundColor =DefaultSymbol.BodyCellBackgroundcolor;
        this.SetCellOldValue(cell);
        var _this = this
        refJS._textbox.onpaste = function (e) {
            var ClipboardData = e.clipboardData || window.clipboardData;
            var getcopyDate = navigator.userAgent.indexOf('Firefox') > -1 ? ClipboardData.getData('Text').split('\n') : ClipboardData.getData('Text').split('\r\n');
            var totalRows = _this._owner.m_TotalRows
            var rowIndex = _this._owner.m_currentRowIndex
            var refDataArray = []
            var keyField = refJS._element.cusAttr('KeyField');
            var valueField = refJS._element.cusAttr('ValueField');
            var textField = refJS._element.cusAttr('TextField');
            var pasteCols = _this._owner._element.cusAttr("PasteCols");
            var fieldId = _this._owner.MainCols[columnIndex].cusAttr("fieldid")
            var copyDate = [];
            for (let k = 0; k < getcopyDate.length; k++) {
                if (getcopyDate[k].split("\t")[0] || k < getcopyDate.length - 1) {
                    copyDate.push(getcopyDate[k].split("\t")[0].trim())
                }
            }
            var copeDataStr = copyDate.join("\r\n");
            if (copyDate.length > 1) {
                e.preventDefault();
                if (pasteCols && pasteCols.indexOf(fieldId) >= 0 && _this._owner._element.cusAttr("BPOnServer") === "True") {
                    var grid = _this._owner.get_id()
                    var tGrid = $find(grid)
                    tGrid.OnBatchPaste({
                        rowIndex: rowIndex,
                        fieldid: fieldId,
                        PasteList: copeDataStr
                    })
                } else {
                    var grid = _this._owner.get_id()
                    var batchpastecustwhere = _this._owner.MainCols[columnIndex].cusAttr("batchpastecustwhere");
                    if(batchpastecustwhere) {
                        // batchpastecustwhere =  window.top.$.base64decode(batchpastecustwhere)

                        function findInBrackets(str) {
                            const regex = /\{([^}]+)\}/g;
                            let match;
                            const results = [];

                            while ((match = regex.exec(str)) !== null) {
                                results.push(match[1]);
                            }

                            return results;
                        }
                        var match = findInBrackets(batchpastecustwhere)
                        var batchpasteArray = []
                        copyDate.forEach(function(item,index) {
                            var pasteConditionStr = batchpastecustwhere
                            match.forEach((j) =>{
                                var replaceStr = _this._owner.GetCellValueByFieldAndRow(j, rowIndex + index)
                                pasteConditionStr = pasteConditionStr.replace("{" + j + "}", replaceStr && replaceStr.Code ?  replaceStr.Code : replaceStr.Value )
                            })
                            batchpasteArray.push(pasteConditionStr)
                        })
                        batchpastecustwhere = batchpasteArray.join("\r\n")
                    }
                    // 取每列col参数 _this._owner.MainCols[columnIndex].cusAttr("batchpastecustwhere")
                    // 取指定filedId某一行的值  _this._owner.GetCellValueByFieldAndRow(filedName, rowIndex)
                    // 取参照特殊参数字段 refJS._element.cusAttr('custominparams');
                    refJS.CallXmlHttpForPaste(copeDataStr,(batchpastecustwhere ? batchpastecustwhere : "")) // ID Code Name
                    var refData = window.referenceData;
                    for (var j = 0; j < refData.length; j++) {
                        refDataArray.push({
                            key: refData[j][keyField] ? refData[j][keyField] : "",
                            value: refData[j][valueField] ? refData[j][valueField].replace(/\'/g, "&apos;").replace(/\"/, "&quot;") : "",
                            text: refData[j][textField] ? refData[j][textField].replace(/\'/g, "&apos;").replace(/\"/, "&quot;") : ""
                        })
                    }
                    if (refDataArray.length == 0) {
                        return
                    }
                    $find(grid).ReadyToStartBatchModifyProcess(refDataArray.length);
                    _ClientJSExecQueueManager.ClearAll()
                    for (var j = 0; j < refDataArray.length; j++) {
                        // if(refDataArray[j].value != "") {
                        var resultJs = ""
                        if (rowIndex + j < totalRows) {
                            resultJs = "$find('" + grid + "').EndEdit();if( $find('" + grid + "').m_currentRowIndex != " + (rowIndex + j) + "){ $find('" + grid + "').m_currentRowIndex=" + (rowIndex + j) + ";$find('" + grid + "').m_currentColumnIndex=" + columnIndex + ";$find('" + grid + "').Focus(true);$find('" + grid + "').OnRowChanged(true);}"
                        } else {
                            resultJs = "$find('" + grid + "').EndEdit();$find('" + grid + "').AddNewRow(false);if( $find('" + grid + "').m_currentRowIndex != " + (rowIndex + j) + "){ $find('" + grid + "').m_currentRowIndex=" + (rowIndex + j) + ";$find('" + grid + "').m_currentColumnIndex=" + columnIndex + ";$find('" + grid + "').Focus(true);$find('" + grid + "').OnRowChanged(true);}"
                        }
                        // var resultJs = "$find('"+grid+"').EndEdit();if( $find('"+grid+"').m_currentRowIndex != "+ (rowIndex + j) +"){ $find('" +grid +"').m_currentRowIndex="+ (rowIndex + j) +";$find('"+grid+"').m_currentColumnIndex="+ columnIndex +";$find('"+grid+"').Focus(true);$find('"+grid+"').OnRowChanged(true);}"
                        _ClientJSExecQueueManager.Push(resultJs)
                        var changeJs = "$SetGridCellValue('" + grid + "'," + (rowIndex + j) + "," + columnIndex + ",'" + refDataArray[j].key + "','" + refDataArray[j].value + "','" + refDataArray[j].text + "',false, null, 2);$find('" + grid + "').BatchModifyFowardOneUnit();"
                        _ClientJSExecQueueManager.Push(changeJs)
                        // $SetGridCellValue(grid,rowIndex + j,columnIndex,refDataArray[j].key,refDataArray[j].value,refDataArray[j].text,false, null, 2)
                        // }
                        // else {
                        //     var resultJs = "";
                        //     if(rowIndex + j < totalRows) {
                        //         resultJs = "$find('"+grid+"').EndEdit();if( $find('"+grid+"').m_currentRowIndex != "+ (rowIndex + j) +"){ $find('" +grid +"').m_currentRowIndex="+ (rowIndex + j) +";$find('"+grid+"').m_currentColumnIndex="+ columnIndex +";$find('"+grid+"').Focus(true);$find('"+grid+"').OnRowChanged(true);}"
                        //     }else{
                        //         resultJs = "$find('"+grid+"').EndEdit();$find('"+grid+"').AddNewRow(false);if( $find('"+grid+"').m_currentRowIndex != "+ (rowIndex + j) +"){ $find('" +grid +"').m_currentRowIndex="+ (rowIndex + j) +";$find('"+grid+"').m_currentColumnIndex="+ columnIndex +";$find('"+grid+"').Focus(true);$find('"+grid+"').OnRowChanged(true);}"
                        //     }
                        //     _ClientJSExecQueueManager.Push(resultJs)
                        //     var changeJs = "$find('"+grid+"').BatchModifyFowardOneUnit();"
                        //     _ClientJSExecQueueManager.Push(changeJs)
                        // }
                    }
                    var compJs = "var tGrid=$find('" + grid + "');tGrid.CompleteBatchModify();UF.UI.Reference.DisableShowForm = false;tGrid=null"
                    _ClientJSExecQueueManager.Push(compJs)
                    _ClientJSExecQueueManager.Running = false;
                    _ClientJSExecQueueManager.Start()
                }
            }
        }

        // if (!cell.all(reference.id)) {
        if (!$E(cell).document.childNodes[reference.id]) {
            cell.innerHTML = "";
            cell.appendChild(reference);
            this.RemovePadding(cell);
            reference.style.display = "";
            refJS.set_Width(cell.clientWidth);
        } else {
            reference.style.display = "";
        }
        Basic.SetFocus(refJS._textbox);
        if (replaceControlID != null && this._owner.MainCols[columnIndex].cusAttr('ColEditCtrlClientID4P') != null) {
            refJS.SetFocus();
        }
        //zjx add
        /*
        if(event && event.keyCode==KeyCode.F2){
            if(_ClientCallBackManager && _ClientCallBackManager.Runing)   //如果在Callback期间，不处理
                return false;
            refJS.ShowRefForm();
        }
        */
        //


        if (this._owner.Grid_IsDirtyData == true) //如果Grid本身的脏数据标识为true，则认为该页面全局的脏数据标识为true
            Set_Global_IsDirtyData_TheForm(this._owner.Grid_IsDirtyData);
        else
            Set_Global_IsDirtyData_TheForm(bDirtyDataFlag); //恢复以前的脏数据标识
        //gct20081009:Grid对脏数据的特殊处理 ------------------------------------------------------ End

        return true;
    }, //end CreateRefControl

    //终止参照录入 true 终止成功 false 失败
    EndReferenceInput: function (cell, columnIndex) {
        var curRef = cell.children[0];
        if (curRef == this._owner.UNDEFINED_VALUE || curRef.tagName == "NOBR" || curRef.className == "FixedInner") return true;
        var refJS = $find(curRef.id);
        var value = refJS.get_Key();
        var isChange = curRef.IsChange;
        curRef.style.display = "none";
        if (cell.cusAttr('Value') == "") {
            cell.cusAttr('Value', -1);
        }
        //if((value==$(cell).attr('Value'))&&isChange!=true)
        if ((value == cell.cusAttr('Value'))) {
            //cell.removeChild(curRef);
            this._owner.get_element().appendChild(curRef);
            cell.cusAttr('Value', value);
            cell.cusAttr('R', refJS.get_Value() + this._owner.RefSplitter2 + refJS.get_Text());
            cell.title = refJS.get_Value();
            this._owner.setCellListValue(cell, refJS.get_Text());
            return true;
        } else {
            curRef.IsChange = false;
            //终止编辑
            //cell.removeChild(curRef);
            this._owner.get_element().appendChild(curRef);
            cell.cusAttr('Value', value);
            cell.cusAttr('R', refJS.get_Value() + this._owner.RefSplitter2 + refJS.get_Text());
            cell.title = refJS.get_Value();
            this._owner.setCellListValue(cell, refJS.get_Text());
            var cellData = new CellDataContent(cell.cusAttr('Value'), value);
            if (this.editManager.OnRowContentChanged(cellData, cell.parentElement, columnIndex)) {
                return true;
            } else { //输入值错误
                cell.innerHTML = "";
                cell.appendChild(curRef);
                curRef.style.display = "";
                refJS.SetFocus();
                return false;
            }
        }

    }, //end EndReference

    //当前单元是否允许编辑
    CellEditEnabled: function (columnIndex, cell) {
        if (!cell) {
            return false;
        }
        if (this._owner.get_element().cusAttr('EditStatus') == DisplayStyle.Browser || this._owner.m_gridReadOnly == true) {
            return false;
        }
        if (!this._owner.m_AllowEditSingleRow) {
            return false;
        }
        if (cell.cusAttr('Enabled') == "false" || cell.cusAttr('Enabled') == false) { //如果直接设置cell的Enabled为false则返回false
            return false;
        }
        if (this._owner.MainCols[columnIndex].cusAttr('ColEditCtrlClientID4P')) {
            var colEditor = $find(this._owner.MainCols[columnIndex].cusAttr('ColEditCtrlClientID4P'));
            if (colEditor) //此时应该一定会有colEditor，如果没有表示已经出错了
            {
                if (this._owner.MainCols[columnIndex].cusAttr('Edit') != "true") //后台个性化列应该全是"true"，个性化列是否可编辑完全取决于该列的编辑器（即移动过来的控件的状态）
                    this._owner.MainCols[columnIndex].cusAttr('Edit', 'true'); //发现不为"true"，做一下容错
                this._owner.m_currentColumnIndex = columnIndex;
                var readonly = colEditor.get_ReadOnly();

                this._owner.OnBeforeCellFocusEnter(this.CreateContext(columnIndex)); //gct20090826：强制调一下OnBeforeCellFocusEnter

                //yangkuna20100721:个性化列如果需要模拟切页签则直接返回返回false
                if (this._owner.IsNeedSwitchTabPage(columnIndex)) {
                    return false;
                } else {
                    return !readonly;
                }
            }
        }
        if (this._owner.MainCols[columnIndex].cusAttr('Edit') == DefaultSymbol.True && cell.clientWidth > 0) {
            //var oldColumnIndex = this._owner.m_currentColumnIndex;
            this._owner.m_currentColumnIndex = columnIndex;
            var r = this._owner.OnBeforeCellFocusEnter(this.CreateContext(columnIndex));
            /*if(!r){
                this._owner.m_currentColumnIndex = oldColumnIndex;
            }*/
            return r;
        }
        return false;
    }, //end CellEditEnabled

    //创建事件上下文
    CreateContext: function (columnIndex) {
        var context = new CellDataContent("", "");
        this._owner.SetCurrentCellInfo(context);
        context.CellEditEnabled = true; //默认当前单元允许编辑
        return context;
    } //end CreateContext

} //end EndCellEditHelper class

/**************************************************************
 表格计算助手类
 ***************************************************************/

//表格计算助手类
CalculateHelper = function (tableBody, tableFooter, thisControl, owner) {
    this._owner = owner;
    this.tableBody = tableBody; //表体Dom
    this.tableFooter = tableFooter; //表尾合计行Dom
    this.thisControl = thisControl; //当前控件自身的引用
    this.columnExpressionCalculater = null; //列间表达式计算类
    this.aggregationCalculater = null; //聚合计算类
}
CalculateHelper.prototype = {
    dispose: function () {
        if (this.columnExpressionCalculater) {
            this.columnExpressionCalculater.dispose();
            this.columnExpressionCalculater = null;
        }
        if (this.aggregationCalculater) {
            this.aggregationCalculater.dispose();
            this.aggregationCalculater = null;
        }
        this._owner = null;
        this.tableBody = null;
        this.tableFooter = null;
        this.thisControl = null;
    },
    Init: function () { //初始化公式计算引擎以及列合计计算类
        this.aggregationCalculater = new AggregationCalculateHelper(this.tableBody, this.tableFooter, this._owner);
        this.columnExpressionCalculater = new ColumnExpressionCalculateHelper(this._owner);
        this.columnExpressionCalculater.InitExpressions(this._owner.MainCols, this.aggregationCalculater);
    }, //end Init

    //计算列间表达式
    //columnIndex   当前列号
    //rowIndex      当前行号
    CalculateColumnExpression: function (columnIndex, rowIndex) {
        if (this.columnExpressionCalculater != null) {
            if (rowIndex >= 0 && rowIndex < this._owner.m_rows) {
                var row = this.tableBody.rows[rowIndex];
                if (!this._owner.IsEmptyRow(row)) { //计算列间公式
                    this.columnExpressionCalculater.Calculating(columnIndex, row);
                }
            }
        } //end columnExpressCalculater
    }, //end CalculateColumnExpression
    //重新计算所有行合计
    ResetCalculateAggregations: function (sumColumnsDataList) {
        if (this.aggregationCalculater != null) {
            //if($(this._owner.MainCols[columnIndex]).attr('HasSum') !=this._owner.UNDEFINED_VALUE)
            for (var i = 0; i < this._owner.MainCols.length; i++) {
                if (this._owner.MainCols[i].cusAttr('HasSum') == "true") {
                    if (sumColumnsDataList && sumColumnsDataList[this._owner.MainCols[i].cusAttr('FieldID')] != null) {
                        this.aggregationCalculater.Aggregating(i, sumColumnsDataList[this._owner.MainCols[i].cusAttr('FieldID')], 0);
                    } else {
                        this.aggregationCalculater.Aggregating(i, 0, 0);
                    }
                }
            }
        }
    },

    //重新计算所有行合计
    ResetAggForNewRow: function (sumColumnsDataList) {
        if (!sumColumnsDataList) return;
        if (!this.aggregationCalculater) return;
        for (var i = 0; i < this._owner.MainCols.length; i++) {
            if (this._owner.MainCols[i].cusAttr('HasSum') == "true" &&
                sumColumnsDataList &&
                sumColumnsDataList[this._owner.MainCols[i].cusAttr('FieldID')] != null
            ) {
                this.aggregationCalculater.Aggregating(i, 0, sumColumnsDataList[this._owner.MainCols[i].cusAttr('FieldID')]);
            }
        }
    },



    //计算行合计
    CalculateAggregations: function (row, columnIndex, oldValue, newValue) {
        /**
         * mahx 20230707 选中合计
         *
         * 1. 如果有选中合计行HasNewSumRow，并且选中了，则在新合计行中作合计
         * 2. 如果总合计m_SumSelectedData就是选中合计，要被选中才做合集，则直接做合集
         * 3. 如果总合计不是选中合计m_SumSelectedData=false，则直接合计
         */
        var oldSelectedValue = this._owner.IsRowSelected(row);
        if (this._owner._element.cusAttr('HasNewSumRow') == "true" && oldSelectedValue) {
            this.aggregationCalculater.AggregatingNewSum(columnIndex, oldValue, newValue);
        }
        if (this._owner.m_SumSelectedData) {
            if (!oldSelectedValue) {
                return;
            }
        }
        this.aggregationCalculater.Aggregating(columnIndex, oldValue, newValue);

        // if (this.aggregationCalculater != null) {
        //     if (this._owner.MainCols[columnIndex].cusAttr('HasSum') == "true") {
        //         this.aggregationCalculater.Aggregating(columnIndex, oldValue, newValue);
        //     }
        // }
    } //end CalculateAggregations

} //end CalculateHelper class

//列间表达式计算助手类
ColumnExpressionCalculateHelper = function (owner) {
    this._owner = owner;
    this.expressions = [];
    this.aggregater = null; //公式计算完毕后同样需要计算合计
}
ColumnExpressionCalculateHelper.prototype = {
    dispose: function () {
        this._owner = null;
        if (this.expressions) {
            for (var i = 0; i < this.expressions.length; i++) {
                this.expressions[i].dispose();
            }
            Array.clear(this.expressions);
            this.expressions = null;
        }
        this.aggregater = null;
    },
    //初始化助手类
    InitExpressions: function (cols, aggregater) {
        this.CollectExpressions(cols);
        this.aggregater = aggregater; //取得合计计算对象
    },

    //公式收集
    CollectExpressions: function (cols) {
        for (var i = 1; i < cols.length; i++) {
            if (cols[i].cusAttr('Formula') != this._owner.UNDEFINED_VALUE) {
                this.ExplainFormula(i, cols[i], cols);
            }
        }
        //按引用顺序排序公式
        if (this.expressions.length > 0) SortFormulas(this.expressions);
    },

    ExplainFormula: function (columnIndex, col, cols) {
        var formulaLine = col.cusAttr('Formula');
        if (formulaLine != "") {
            var formula = new ExpressionItem(this._owner);
            formula.line = formulaLine;
            formula.columnIndex = columnIndex;
            formula.hasSum = col.cusAttr('HasSum') != this._owner.UNDEFINED_VALUE;
            formula.fields = this.GetFieldsOfExpression(formulaLine);
            formula.indexs = this.GetColumnIDList(formula.fields, cols);
            this.expressions.push(formula); //对象压入数组
        }
    },

    GetColumnIDList: function (fields, cols) {
        var result = [];
        if (fields != null) {
            for (var i = 0; i < fields.length; i++) {
                for (j = 0; j < cols.length; j++) {
                    if (cols[j].cusAttr('FieldID') == fields[i]) {
                        result.push(j);
                        break;
                    }
                }
            }
        }
        return result;
    },

    GetFieldsOfExpression: function (expression) {
        var pattern = /([a-z]{1}\w+)/gi;
        return expression.match(pattern);
    },

    //计算指定行内容
    //列变化
    Calculating: function (columnIndex, row) {
        var formula = this.GetFormula(columnIndex);
        if (formula != null) {
            this.CalculateFormula(formula, row);
            if (formula.hasSum) {
                if (this.aggregater != null) { //计算合计
                    //mahx 20230707 多余合计行
                    this._owner.caculator.CalculateAggregations(row, formula.columnIndex, formula.oldValue, formula.newValue);
                    // if (this._owner.m_SumSelectedData && !this._owner.IsRowSelected(row)) { } else {
                    //     this.aggregater.Aggregating(formula.columnIndex, formula.oldValue, formula.newValue);
                    // }
                }
            }
            //嵌套计算
            this.Calculating(formula.columnIndex, row);
        }
    },

    CalculateFormula: function (formula, row) {
        var expression = formula.line;
        for (var i = 0; i < formula.fields.length; i++) {
            var value = this.GetColumnValue(row, formula.indexs[i]);
            if (value.substring(0, 1) === "-") //如果是负数，加空格 防止出现 两个减号相连的情况，语法错误， "200 --200"
                value = " " + value;
            expression = expression.replace(formula.fields[i], value);
        }
        //U9ZNZZ-70338 不使用eval解析表达式了，换成mathjs的计算规则，还可以解决浮点精度问题
        var result = "";
        if(typeof(math) == "object"){
            math.config({
                number: 'BigNumber'
            });
            result = math.evaluate(expression);
        }
        else{
            result = eval(expression);//防止获取不到math对象,保持原方案
        }
        //eval(expression);
        if (result == Number.POSITIVE_INFINITY || result == Number.NEGATIVE_INFINITY) result = 0;
        if (formula.hasSum && this._owner.m_SumAllData) {
            formula.oldValue = this.GetColumnValue(row, formula.columnIndex);
            formula.newValue = result;
        }
        this.SetColumnValue(row, formula.columnIndex, result);
    },

    SetColumnValue: function (row, columnIndex, value, rowIndex) {
        if (rowIndex == null)
            rowIndex = this._owner.m_currentRowIndex;
        if (columnIndex >= 0 && columnIndex < row.cells.length) {
            var cell = row.cells[columnIndex];
            var numValue = this._owner.m_formatHelper.FormatCellNumber(columnIndex, rowIndex, value, cell.cusAttr('Value'));
            cell.cusAttr('Value', numValue.Value);
            this._owner.setCellListValue(cell, numValue.Text, ControlType.Numberic);
        }
    },

    GetColumnValue: function (row, columnIndex) {
        var result = "0";
        if (columnIndex >= 0 && columnIndex < row.cells.length) {
            //result = row.cells[columnIndex].Value;
            result = row.cells[columnIndex].cusAttr('Value');
            if (isNaN(parseFloat(result))) result = "0";
        }
        return result;
    },

    //判断列内容的改变是否触发列间计算
    GetFormula: function (columnIndex) {
        if (this.expressions.length > 0) {
            for (var i = 0; i < this.expressions.length; i++) {
                if (IsOperationColumn(columnIndex, this.expressions[i].indexs)) {
                    return this.expressions[i];
                }
            }
        }
        return null;
    }

} //end ColumnExpressCalculateHelper class

//表达式引用排序
function SortFormulas(exps) {
    for (var i = 0; i < exps.length; i++) {
        SetFormulaRefDeep(i, exps, 0);
    }
    for (var i = 0; i < exps.length; i++) {
        if (exps[i].deep > 0) {
            for (var j = i + 1; j < exps.length; j++) {
                if (exps[i].deep < exps[j].deep) {
                    var temp = exps[i];
                    exps[i] = exps[j];
                    exps[j] = temp;
                }
            }
        }
    } //end for
} //end SortFormula

//设置引用深度
function SetFormulaRefDeep(index, exps, deep) {
    if (exps[index].deep == 0 && !exps[index].checked) {
        var indexs = exps[index].indexs;
        exps[index].deep = deep;
        exps[index].checked = true;
        if (indexs.length > 0) {
            for (var i = 0; i < indexs.length; i++) {
                var subIndex = GetSubFormulaIndex(indexs[i], exps);
                if (subIndex >= 0) SetFormulaRefDeep(subIndex, exps, deep + 1);
            }
        }
    }
} //end SetFormulaReferenceDeep

function GetSubFormulaIndex(columnId, exps) {
    for (var i = 0; i < exps.length; i++) {
        if (exps[i].columnIndex == columnId) {
            return i;
        }
    }
    return -1;
} //end GetSubFormulaIndex

//找到操作数列对应的公式列
function IsOperationColumn(colIndex, indexs) {
    for (var i = 0; i < indexs.length; i++) {
        if (indexs[i] == colIndex) return true;
    }
    return false;
} //end ISOperationColumn

//公式项目描述
ExpressionItem = function (owner) {
    this._owner = owner;
    this.columnIndex = 0; //公式位于的列号
    this.indexs = []; //列索引集合
    this.hasSum = false; //当前列是否需要合计
    this.fields = []; //公式中的字段操作数
    this.line = ""; //公式行
    this.deep = 0; //公式深度（用于引用排序）
    this.checked = false; //已检查公式
}
ExpressionItem.prototype = {
    dispose: function () {
        this._owner = null;
        if (this.indexs) {
            Array.clear(this.indexs);
            this.indexs = null;
        }
        if (this.fields) {
            Array.clear(this.fields);
            this.fields = null;
        }
    }
}
//创建表达式项目
ExpressionItem.Create = function (col) { //创建表达式项目
    return new ExpressionItem();
}

//聚合计算助手类
AggregationCalculateHelper = function (tableBody, tableFoot, owner) {
    this._owner = owner;
    this.tableBody = tableBody;
    this.tableFoot = tableFoot;
}
AggregationCalculateHelper.prototype = {
    dispose: function () {
        this._owner = null;
        this.tableBody = null;
        this.tableFoot = null;
    },
    //计算指定列的数值合计
    Aggregating: function (column, oldValue, newValue) {
        //yangkuna20110101:开发在CallBack中操作了合计值，改方案会出错
        /*if(this._owner.GetIsBatchModifyRunning()) {
            //yangkuna20101124:如果在批量修改中，则批量修改执行完成后再统一合计
            this._owner.m_batchModifyManager.addSumInfor(column,oldValue,newValue);
            return;
        }*/
        if (this.CanCalculate(column) && this.NeedCalculate(column)) {
            if (this._owner.m_SumAllData || this._owner.m_SumSelectedData) {
                var oldTotalValue = parseFloat(this._owner.GetTotalValue(this._owner.MainCols[column].cusAttr('FieldID')), 10);
                if (isNaN(oldValue) || oldValue == "") oldValue = 0;
                if (isNaN(newValue) || newValue == "") newValue = 0;
                //var newTotalValue = oldTotalValue - parseFloat(oldValue) + parseFloat(newValue);
                //mahx 因为Float型加减乘除的精度不正确，当某些数据需要全部进位操作的时候就会有问题 20150210 修改为使用自定义的方法进行运算
                var newTotalValue = FloatCalFun.floatAdd(FloatCalFun.floatSubtract(oldTotalValue, parseFloat(oldValue)), parseFloat(newValue));
                this.SetTotalValue(column, newTotalValue);
                return;
            }
            var totalValue = 0.0;

            if (this._owner.m_aggregateColumnFieldNameValues.length > 0) { //条件合计

                //根据当前合计列的index得到要合计列的列名
                var aggregateColumnName = this._owner.GetColumnFieldID(column);
                var index = -1;
                //根据合计列的列名，从m_aggregateColumnFieldNameValues中查找如否有合计条件
                for (var i = 0; i < this._owner.m_aggregateColumnFieldNameValues.length; i++) {
                    if (this._owner.m_aggregateColumnFieldNameValues[i].aggregateColumnName == aggregateColumnName) {
                        index = i;
                        break;
                    }
                }
                if (index >= 0) //当前合计列有合计条件
                {
                    for (var i = 0; i < this.tableBody.rows.length; i++) {
                        //得到当前行的条件列的值
                        var cFieldName = this._owner.m_aggregateColumnFieldNameValues[index].conditionFieldName;
                        if (cFieldName == "CustomerConditon") {

                            if (eval(this._owner.m_aggregateColumnFieldNameValues[index].conditionFieldValue)) {
                                totalValue += this.GetCellValue(this.tableBody.rows[i], column);
                            }
                        } else {
                            //得到当前行的条件列的值
                            var val = this._owner.GetCellValueByFieldAndRow(this._owner.m_aggregateColumnFieldNameValues[index].conditionFieldName, i); //值是否==conditionFiledValue
                            if (val.Value == this._owner.m_aggregateColumnFieldNameValues[index].conditionFieldValue) //相等的时候，才参与合计
                            {
                                totalValue += this.GetCellValue(this.tableBody.rows[i], column);
                            }
                        }
                    }
                } else //当前合计列没有合计条件，则完全合计
                {
                    for (var i = 0; i < this.tableBody.rows.length; i++) {
                        totalValue += this.GetCellValue(this.tableBody.rows[i], column);
                    }
                }
            } else //完全合计
            {
                for (var i = 0; i < this.tableBody.rows.length; i++) {
                    if ($(this.tableBody.rows[i]).hasClass('SelectedRow')) {
                        totalValue += this.GetCellValue(this.tableBody.rows[i], column);
                    }
                }
            }
            this.SetTotalValue(column, totalValue);
        }
    },

    SetTotalValue: function (column, value) {
        if (this.tableFoot != this._owner.UNDEFINED_VALUE) {
            var cell = this._owner.getFootOriginalRow().cells[column];
            var numValue = this._owner.m_formatHelper.FormatTotalNumber(column, value);
            cell.cusAttr('Value', numValue.Value);
            //this._owner.setCellListValue(cell,this._owner.GetNumberFormatedValue4TotalValue(value,column));
            this._owner.setCellListValue(cell, numValue.Text);
        }
    },
    //wanglei:设置  新的合计值 合计值
    SetNewTotalValue: function (column, value) {
        if (this.tableFoot != this._owner.UNDEFINED_VALUE) {
            var cell = this._owner.getFootNewRow().cells[column];
            var numValue = this._owner.m_formatHelper.FormatTotalNumber(column, value);
            cell.cusAttr('Value', numValue.Value);
            this._owner.setCellListValue(cell, numValue.Text);
        }
    },
    AggregatingNewSum: function (column, oldValue, newValue) {
        var oldTotalValue = parseFloat(this._owner.GetNewTotalValue(this._owner.MainCols[column].cusAttr('FieldID')), 10);
        if (isNaN(oldValue) || oldValue == "") oldValue = 0;
        if (isNaN(newValue) || newValue == "") newValue = 0;
        // var newTotalValue = oldTotalValue - parseFloat(oldValue) + parseFloat(newValue);
        var newTotalValue = FloatCalFun.floatAdd(FloatCalFun.floatSubtract(oldTotalValue, parseFloat(oldValue)), parseFloat(newValue));
        this.SetNewTotalValue(column, newTotalValue);
        return;
    },


    GetCellValue: function (row, column) {
        var value = parseFloat(row.cells[column].cusAttr('Value'));
        if (isNaN(value)) {
            return 0;
        } else {
            return value;
        }
    },
    CanCalculate: function (column) {
        if (this.tableFoot != this._owner.UNDEFINED_VALUE) {
            if (column > 0 && column < this._owner.MainCols.length) {
                if (!this._owner.MainCols[column].cusAttr('HasSum') || this._owner.MainCols[column].cusAttr('HasSum') == "false")
                    return false;
                var dataType = this._owner.MainCols[column].cusAttr('DataType');
                return dataType == DataType.Float || dataType == DataType.INT || dataType == DataType.Int16 || dataType == DataType.Int64 || dataType == DataType.Decimal || dataType == DataType.Single || dataType == DataType.Double;
            }
        }
        return false;
    },
    NeedCalculate: function (column) {
        //如果用户指定该列的合计值来源为，自定义，则不计算合计值。
        if (this._owner.MainCols[column].cusAttr('SumValueFrom') && this._owner.MainCols[column].cusAttr('SumValueFrom').toLowerCase() == "custom") {
            return false;
        }
        return true;
    }

} //end AggregationCalculateHelper class

/**************************************************************
 分页类显示功能，Pages类只控制分页状态条的显示样式、触发分页事件、
 标志当前页位置，具体数据的装载以及数据的刷新都需要由后台事件协作
 完成。
 ***************************************************************/
//初始化控件分页行为zjx要修改的地方
//var m_pageBreakManagerInstance =null;//gct20070702:应该在父类datagrid中声明
GridPageBreakManager = function (toolBar, element, tableBody, owner) //gct20070702:onwer为新加的datagrid实例
{
    var _this = this;
    this._owner = owner;
    this.toolBar = toolBar;
    //this.element = element ;
    this.tableBody = tableBody;
    this.firstHandle = null;
    this.lastHandle = null;
    this.previousHandle = null;
    this.nextHandle = null;
    this.txtGo = null;
    this.btnGo = null;
    this.chk = null;

    this.OnFirstPageReceive = function () {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        _this._owner.OnMovePage("FirstPage");
    }
    this.OnPreviousPageReceive = function () {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        _this._owner.OnMovePage("PreviousPage");
    }
    this.OnNextPageReceive = function () {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        _this._owner.OnMovePage("NextPage");
    }
    this.OnLastPageReceive = function () {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        _this._owner.OnMovePage("LastPage");
    }
    this.OnTxtGoKeyDown = function () {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        if (event.keyCode == KeyCode.enter) {
            var txt = event.srcElement;
            if (!txt || txt.value == "")
                return;
            var p;
            try {
                p = parseInt(txt.value, 10);
                if (--p < 0)
                    p = 0;
            } catch (e) {
                return;
            }
            _this._owner.OnMovePage("GotoPage", p);
            $Event(window.event).stopPropagation();
            $Event(window.event).preventDefault();
        } else if (event.keyCode == KeyCode.ESC) {
            _this._owner.Focus();
        }
    }
    this.OnChangePageSizeClick = function () {
        var pageSize = $(this).html();
        $(this).addClass("active");
        $(this).siblings().removeClass("active");
        _this._owner.OnChangePageSize(pageSize);
    }
    this.OnBtnGoClick = function () {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        var btn = event.srcElement;
        var txt = null;
        if (btn.offsetParent && btn.offsetParent.parentElement && btn.offsetParent.parentElement.cells[6]) {
            txt = btn.offsetParent.parentElement.cells[6].children[0];
        }
        if (txt == null)
            return;
        if (!txt || txt.value == "") {
            try {
                txt.focus();
            } catch (e) { };
            return;
        }
        var p;
        try {
            p = parseInt(txt.value, 10);
            if (--p < 0)
                p = 0;
            txt.focus();
        } catch (e) {
            return;
        }
        _this._owner.OnMovePage("GotoPage", p);
    }
    this.OnCheckBoxClick = function () {
        if (_this._owner.get_element().cusAttr('disabled')) return;
        /* 2009-5-13 Grid不处理所有页全选的客户端交互行为
    if(_this.chk.checked){
        var c = _this._owner.m_gridBodyEventsHandler.tableHead;
        if(c){
            var cell = c.rows[0].cells[0];
            var checkBox = cell.firstChild;
            if(checkBox && (checkBox.checked == false)){
                checkBox.checked = true;
                checkBox.fireEvent("onclick");
            }
        }
    }
    */
        _this._owner.OnSelectAllPage(_this.chk.checked);
    }
}
GridPageBreakManager.prototype = {
    dispose: function () {
        this._owner = null;
        this.DetachEvents();
        this.toolBar = null
        this.tableBody = null;
        this.firstHandle = null;
        this.lastHandle = null;
        this.previousHandle = null;
        this.nextHandle = null;
        this.txtGo = null;
        this.btnGo = null;
        this.chk = null;
        this.pageSize = null;
    },
    Initialize: function () {
        if (this.toolBar != null) {
            var cells = this.toolBar.rows[0].cells;
            if ((cells[0].children[0]) && (cells[0].children[0].type == "checkbox")) {
                this.chk = cells[0].children[0];
            }
            if (cells[5]) {
                this.firstHandle = cells[2].firstChild;
                this.previousHandle = cells[3].firstChild;
                this.nextHandle = cells[4].firstChild;
                this.lastHandle = cells[5].firstChild;
            }
            if (cells[6]) {
                this.txtGo = cells[6].children[0];
            }
            if (cells[7]) {
                this.btnGo = cells[7].children[0];
            }
            if (cells[8]) {
                this.pageSize = $(cells[8].children).splice(0, 3)
            }
            this.AttachEvents();
        }
    },
    AttachEvents: function () {
        if (this.chk)
            // this.chk.attachEvent("onclick",this.OnCheckBoxClick);
            $(this.chk).bind("click", this.OnCheckBoxClick);
        if (this.firstHandle) {
            // this.firstHandle.attachEvent("onclick",this.OnFirstPageReceive);
            // this.previousHandle.attachEvent("onclick",this.OnPreviousPageReceive);
            // this.nextHandle.attachEvent("onclick",this.OnNextPageReceive);
            // this.lastHandle.attachEvent("onclick",this.OnLastPageReceive);

            $(this.firstHandle).bind("click", this.OnFirstPageReceive);
            $(this.previousHandle).bind("click", this.OnPreviousPageReceive);
            $(this.nextHandle).bind("click", this.OnNextPageReceive);
            $(this.lastHandle).bind("click", this.OnLastPageReceive);
        }
        if (this.txtGo)
            // this.txtGo.attachEvent("onkeydown",this.OnTxtGoKeyDown);
            $(this.txtGo).bind("keydown", this.OnTxtGoKeyDown);
        if (this.btnGo)
            // this.btnGo.attachEvent("onclick",this.OnBtnGoClick);
            $(this.btnGo).bind("click", this.OnBtnGoClick);
        // this.pageSize=$(".pageBar .page-size");
        if (this.pageSize)
            $(this.pageSize).bind("click", this.OnChangePageSizeClick);
    },

    DetachEvents: function () {
        if (this.chk)
            $(this.chk).unbind("click", this.OnCheckBoxClick);
        if (this.firstHandle) {
            $(this.firstHandle).unbind("click", this.OnFirstPageReceive);
            $(this.previousHandle).unbind("click", this.OnPreviousPageReceive);
            $(this.nextHandle).unbind("click", this.OnNextPageReceive);
            $(this.lastHandle).unbind("click", this.OnLastPageReceive);
        }
        if (this.txtGo)
            $(this.txtGo).unbind("keydown", this.OnTxtGoKeyDown);
        if (this.btnGo)
            $(this.btnGo).unbind("click", this.OnBtnGoClick);
        if (this.pageSize)
            $(this.pageSize).unbind("click", this.OnChangePageSizeClick);
    },
    to_Help: function (index, func) {
        $(this.toolBar).parent().css("position", "relative");
        $(this.toolBar).after("<div class='controlBg1' z-index='" + index + "'></div>");
    },
    to_Translate: function () {
        $(this.toolBar).parent().css("position", "relative");
        $(this.toolBar).after("<div class='translateBg1' z-index='" + index + "'></div>");
    },
    set_translateName: function () {

    },
    to_Defualt: function () {
        $(this.toolBar).parent().css("position", "static");
        if ($(this.toolBar).next(".controlBg1").length > 0) {
            $(this.toolBar).next(".controlBg1").remove();
        }
        if ($(this.toolBar).next(".translateBg1").length > 0) {
            $(this.toolBar).next(".translateBg1").remove();
        }
    }
} //end Pagging

//取得对象实例
GridPageBreakManager.GetInstance = function (toolBar, element, tableBody, owner) {
    return new GridPageBreakManager(toolBar, element, tableBody, owner);
} //end GridPageBreakManager

/**************************************************************
 提示信息显示类
 **************************************************************/
GridMessageToolbarManager = function (owner) {
    var _this = this;
    this._owner = owner;
    this.toolBar = null;
    this.div = null;
    this.btn = null;
    this.msg = "";

}
GridMessageToolbarManager.prototype = {
    dispose: function () {
        _this = null;
        this._owner = null;
        this.toolbar = null;
        this.div = null;
        this.btn = null;
        this.msg = null;
    },
    Initialize: function () {
        if (this.toolBar != null)
            return;
        // this.toolBar = document.createElement("<div class='GridMessageToolBar' onclick='this.style.display=\"none\";'></div>");
        //2016.06.03跨浏览器兼容 -- weiyin
        var attributeObj = {
            "class": "GridMessageToolBar",
            "onclick": "this.style.display='none'"
        }
        this.toolBar = $E(window.document).createElement("div", attributeObj);
        this.toolBar.innerHTML = "<div class='msg'><div><div class='btn'></div>";
        this.div = this.toolBar.children[0];
        this.btn = this.toolBar.children[1];
        this._owner.get_element().appendChild(this.toolBar);
        if (this.toolBar.clientWidth > this._owner.get_element().clientWidth - 30) {
            this.toolBar.style.width = (this._owner.get_element().clientWidth - 30) + 'px';
        }
    },
    ShowMessage: function (msg) {
        if (this.div == null) {
            this.Initialize();
        }
        this.div.innerHTML = "<nobr>" + msg + "</nobr>";
        this.toolBar.title = msg;
        this.toolBar.style.display = "";
    }
}
GridMessageToolbarManager.GetInstance = function (owner) {
    return new GridMessageToolbarManager(owner);
} //end GridMessageToolbarManager

//20100419 by wangxiaoliang
//GridCustomFilterToolbarManager 相关代码统一移动到BasicInfor.js
///**************************************************************
//客户化筛选工具条管理类
//***************************************************************/
//GridCustomFilterToolbarManager = function(toolBar,owner)
//{
//    var _this = this;
//    this._owner=owner;
//    this.toolBar =toolBar ;
//    this.setFilterHandle = null;
//    this.firstHandle = null;
//    this.lastHandle = null;
//    this.previousHandle = null;
//    this.nextHandle = null;
//    this.checkHandle = null;
//    this.uncheckHandle = null;
//    this.div = null;

//    this.OnBtnSetFilterClick = function(p1,p2){

//        if(!_this || !_this._owner || !_this._owner.get_element() )
//            return;
//
//        if(_this._owner.m_rows <2)
//            return;
//
//        if(!p2){
//            _this._owner.OnCustomFilterClick("BuildFilter");
//            return;
//        }
//        var TaskID = _this._owner.get_element().TaskID;
//        var PFID= _this._owner.get_element().FormID;
//        var viewName = _this._owner.get_element().ViewName;
//
//        var FieldIDs= [];
//        var j=0;
//        for(var i=1;i < _this._owner.MainCols.length;i++)
//        {
//            if(_this._owner.MainCols[i].currentStyle.display != "none"){
//                 if ((_this._owner.MainCols[i].AllowFilter!=null)
//                 &&(_this._owner.MainCols[i].AllowFilter=="false")){
//                 //过滤不参与快速定位的列
//                 continue;
//                 }
//                if(_this._owner.GetColumnType(i)==ControlType.RefControl
//                 && (!_this._owner.MainCols[i].RefID || _this._owner.MainCols[i].RefID=="00000000-0000-0000-0000-000000000000" )){
//                    FieldIDs[j] = _this._owner.MainCols[i].NameField.replace(/\./g,"_");
//                }else{
//                    FieldIDs[j] = _this._owner.MainCols[i].FieldID;
//                }
//                j++;
//            }
//        }
//        var FieldIDList = FieldIDs.join(",");
//        //var url="simple.aspx?lnk=639f9280-954f-4506-b96f-470ffba84ab3&chromeType=4&ShowType=ShowModal&ParentTaskID=795eba6f-6f5f-42f3-9871-88811648947b&PFID=8704463d-d3d7-46a4-83e8-ec78bbf3ad57";
//        var url="simple.aspx?lnk=0d75ecdd-46ab-494d-8be0-b4ea8a18a427&chromeType=4&ShowType=ShowModal&ShowAtlasModalDialog=true&ParentTaskID="+TaskID+"&PFID="+PFID+"&viewname=" + viewName + "&FieldIDs=" + FieldIDList;
////        var title="查询定位";
//        var title = null;
//        var height="470";
//        var width="518";
//        var hideStatusBar=true;
//        var isModelessDialog=false;
//        var ret=ShowModalDialog(url,title,height,width,hideStatusBar,isModelessDialog);
//        if(ret == true ){
//            if(!top.ShowCustomFilter){
//               top.ShowCustomFilter = new Object();
//            }
//            top.ShowCustomFilter[_this._owner.get_id()] = true;
//            _this._owner.OnCustomFilterClick("SetFilter");
//        }
//    }
//    this.onBtnSetFilterRightClick = function(){
//        if(!top.ShowCustomFilter || !top.ShowCustomFilter[_this._owner.get_id()])
//            return;
//        if(event.button == 0)
//            return;
//        if(_this.div.style.visibility == "visible"){
//            _this.div.style.visibility = "hidden";
//        }else{
//            _this.div.style.visibility = "visible";
//        }
//        return false;
//    }

//    this.GetFieldList = function(){
//
//    }
//    this.OnCustromFilterFirstReceive = function(){
//        if($(_this._owner.get_element()).attr('disabled')) return;
//        _this._owner.OnCustomFilterClick("First");
//    }
//    this.OnCustromFilterPreviousReceive = function(){
//        if($(_this._owner.get_element()).attr('disabled')) return;
//        _this._owner.OnCustomFilterClick("Previous");
//    }
//    this.OnCustromFilterNextReceive = function(){
//        if($(_this._owner.get_element()).attr('disabled')) return;
//        _this._owner.OnCustomFilterClick("Next");
//    }
//    this.OnCustromFilterLastReceive = function(){
//        if($(_this._owner.get_element()).attr('disabled')) return;
//        _this._owner.OnCustomFilterClick("Last");
//    }
//    this.OnCustromFilterSelectReceive = function(){
//        if($(_this._owner.get_element()).attr('disabled')) return;
//        _this._owner.OnCustomFilterClick("select");
//        _this._owner.SetHeadCheckBoxState(true);
//    }
//    this.OnCustromFilterUnSelectReceive = function(){
//        if($(_this._owner.get_element()).attr('disabled')) return;
//        _this._owner.OnCustomFilterClick("unselect");
//    }
//}
//GridCustomFilterToolbarManager.prototype = {
//    dispose : function()
//    {
//        this._owner=null;
//        this.DetachEvents();
//        this.toolBar=null
//        this.setFilterHandle = null;
//        this.firstHandle = null;
//        this.lastHandle = null;
//        this.previousHandle = null;
//        this.nextHandle = null;
//        this.checkHandle = null;
//        this.uncheckHandle = null;
//        this.div = null;
//    },
//    Initialize : function()
//    {
//        if(this.toolBar!=null)
//        {
//            this.div = this.toolBar.cells[0].children[1];
//            var divCells = this.div.children[0].rows[0].cells;
//            this.setFilterHandle = this.toolBar.cells[0].firstChild;
//            this.firstLocateHandle =divCells[0].firstChild;
//            this.previousLocateHandle =divCells[2].firstChild;
//            this.nextLocateHandle =divCells[4].firstChild;
//            this.lastLocateHandle=divCells[6].firstChild;
//            if(divCells.length >10){
//                this.checkHandle=divCells[8].firstChild;
//                this.uncheckHandle=divCells[10].firstChild;
//            }
//            this.AttachEvents();
//        }
//    },
//    AttachEvents : function ()
//    {
//        this.setFilterHandle.attachEvent("onclick",this.OnBtnSetFilterClick);
//        this.setFilterHandle.attachEvent("onmousedown",this.onBtnSetFilterRightClick);
//        this.firstLocateHandle.attachEvent("onclick",this.OnCustromFilterFirstReceive);
//        this.previousLocateHandle.attachEvent("onclick",this.OnCustromFilterPreviousReceive);
//        this.nextLocateHandle.attachEvent("onclick",this.OnCustromFilterNextReceive);
//        this.lastLocateHandle.attachEvent("onclick",this.OnCustromFilterLastReceive);
//        if(this.checkHandle){
//            this.checkHandle.attachEvent("onclick",this.OnCustromFilterSelectReceive);
//            this.uncheckHandle.attachEvent("onclick",this.OnCustromFilterUnSelectReceive);
//        }
//        //整页刷新的时候，top.ShowCustomFilter会被清空，不能这么判断
//        //if(top.ShowCustomFilter && window.ShowCustomFilter[this._owner.get_id()]){
//            if(this.toolBar.CFHasData && this.toolBar.CFHasData == "false"){
//            }else{
//                this.div.style.visibility = "visible";
//            }
//        //}
//    },
//
//    DetachEvents : function ()
//    {
//        this.setFilterHandle.detachEvent("onclick",this.OnBtnSetFilterClick);
//        this.setFilterHandle.detachEvent("onmousedown",this.onBtnSetFilterRightClick);
//        this.firstLocateHandle.detachEvent("onclick",this.OnCustromFilterFirstReceive);
//        this.previousLocateHandle.detachEvent("onclick",this.OnCustromFilterPreviousReceive);
//        this.nextLocateHandle.detachEvent("onclick",this.OnCustromFilterNextReceive);
//        this.lastLocateHandle.detachEvent("onclick",this.OnCustromFilterLastReceive);
//        if(this.checkHandle){
//            this.checkHandle.detachEvent("onclick",this.OnCustromFilterSelectReceive);
//            this.uncheckHandle.detachEvent("onclick",this.OnCustromFilterUnSelectReceive);
//        }
//    }
//}//end Pagging

////取得对象实例
//GridCustomFilterToolbarManager.GetInstance = function(toolBar,owner)
//{
//    return new GridCustomFilterToolbarManager(toolBar,owner);
//}//end GridPageBreakManager


/*GridFormatHelper 开始
 * 数据格式化助手类
 * 处理数据的格式化信息，主要处理数字格式化值
 */
GridDataFormatHelper = function (owner) {
    this._owner = owner;
    this.num = null;
    this.jsNum = null;
    this.div = null;
}

GridDataFormatHelper.prototype = {

    dispose: function () {
        this._owner = null;
        this.jsNum = null;
        this.num = null;
        this.div = null;
    },

    Initialize: function () {
        if (this.div != null) {
            this.num.setAttribute("ZN", null);
            return;
        }
        //$E(this._owner.get_element()).createElement("NOBR");
        this.div = document.createElement("div");
        //this.num = document.createElement("<SPAN id=u_  R='n' CS='' ZN='false' TP='Currency' RV='5' RT='2' DT='8' FS='c0' V='0' Scale='0'></SPAN>");
        this.num = $E(document).createElement('span', { 'id': 'u_' });
        this.num.cusAttr({ 'R': 'n', 'CS': '', 'ZN': 'false', 'TP': 'Currency', 'RV': '5', 'RT': '2', 'DT': '8', 'FS': 'c0', 'V': '0', 'Scale': '0' })
        this.num.innerHTML = "<INPUT  id=u__textbox class='textbox number' value=0 maxLength=16  SourceValue='CNY0.0000'><INPUT id=u__HD>' type=hidden><INPUT id=u__HF type=hidden><INPUT id=u__HV type=hidden>";
        this._owner.get_element().appendChild(this.div);
        this.div.appendChild(this.num);
        $create(UF.UI.Number, null, null, null, this.num);
        this.jsNum = this.num.control;
        //防止全键盘时,获得焦点.
        this.jsNum.set_Visible(false);
    },

    _FormatNumberEx: function (value, scale, rt, rv, cs) {

        var nf = Sys.CultureInfo[getCultureName().toLowerCase()].NumberFormat;
        var nds = ".";
        if (nf != null) {
            nds = nf.NumberDecimalSeparator; // "."
        }
        var valueStr = value.toString();
        var valueInt = valueStr.split(nds)[0];
        var valueSub = "0";
        if (valueStr.split(nds).length > 1) {
            valueSub = "0" + nds + valueStr.split(".")[1];
        }
        if (scale == 0)
            return cs + vlaueInt;
        var valueSubFormat = this._FormatNumber(valueSub, 0, scale, rt, rv, cs, 9, -9, true).Text;
        if (eval("'" + valueSubFormat + "'.match(/0" + nds + "/) != null")) {
            value = eval("'" + valueSubFormat + "'.replace(/0" + nds + "/,'" + valueInt + ".')");
        } else if (eval("'" + valueSubFormat + "'.match(/1" + nds + "/g) != null")) {
            value = eval("'" + valueSubFormat + "'.replace(/1" + nds + "/,'" + parseInt(valueInt, 10) + 1 + ".')");
        } else {
            value = cs + valueInt;
        }
        return value;
    },

    _FormatNumber: function (value, oldValue, scale, rt, rv, cs, maxV, minV, fromEx) {

        var resultValue = value,
            resultText = value;
        var returnValue = new Object();
        returnValue.Value = value;
        returnValue.Text = value;
        if (value > 999999999999999) {
            return returnValue;
        }

        var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识
        this.jsNum.set_MaxValue(maxV);
        this.jsNum.set_MinValue(minV);
        var fs = this.jsNum.get_FormatString();
        if (fs.substring(0, 1).toLowerCase() == "p") {
            scale = parseInt(scale, 10) + 2;
        }
        this.jsNum.set_Scale(scale, true);
        this.jsNum.set_RoundType(rt, true);
        this.jsNum.set_RoundValue(rv, true);
        this.jsNum.set_CurrencySymbol(cs, true);

        //超出计算范围处理.......................
        var intPart = value.toString().split(".")[0];
        if (this.jsNum.filtrateChars(intPart, "-").length > this.jsNum._allowIntegerLength) {
            resultValue = value;
            if (fromEx != null) {
                resultText = cs + value;
            } else {
                resultText = this._FormatNumberEx(value, scale, rt, rv, cs);
            }
            returnValue.Value = resultValue;
            returnValue.Text = resultText;
            return returnValue;
        }
        //超出计算范围处理.......................

        this.jsNum.set_Value(oldValue);
        this.jsNum.set_Value(value);

        if (this._owner.Grid_IsDirtyData == true) //如果Grid本身的脏数据标识为true，则认为该页面全局的脏数据标识为true
            Set_Global_IsDirtyData_TheForm(this._owner.Grid_IsDirtyData);
        else
            Set_Global_IsDirtyData_TheForm(bDirtyDataFlag); //恢复以前的脏数据标识

        returnValue.Value = this.jsNum.get_Value().toString();
        returnValue.Text = this.jsNum.GetTextBoxValue().toString();
        return returnValue;
    },

    FormatCellNumber: function (colIndex, rowIndex, value, oldValue, isNewRowInit) {
        this.Initialize();
        var resultValue = new Object();
        resultValue.Value = value.toString();
        resultValue.Text = value.toString();
        if (this._owner.MainCols[colIndex].cusAttr('FieldID') == "ID") {
            return resultValue;
        }
        var col = this._owner.MainCols[colIndex];
        if (col == null)
            return resultValue;
        var fieldName = this._owner.GetColumnFieldID(colIndex);
        var scale, rt, rv, cs, maxV, minV;

        var ctrl = this._owner.GetColumnControl(colIndex, rowIndex);
        if (ctrl) {
            this.num.cusAttr("ZN", ctrl.cusAttr("ZN"));
        }
        if (ctrl && ctrl.control) {
            var jc = ctrl.control;
            scale = jc.get_Scale();
            rt = jc.get_RoundType();
            rv = jc.get_RoundValue();
            cs = jc.get_CurrencySymbol();
            maxV = jc.get_MaxValue();
            minV = jc.get_MinValue();

            var bDirtyDataFlag = Get_Global_IsDirtyData_TheForm(); //获取当前的脏数据标识

            this.jsNum.set_FormatString(jc.get_FormatString(), true);

            if (this._owner.Grid_IsDirtyData == true) //如果Grid本身的脏数据标识为true，则认为该页面全局的脏数据标识为true
                Set_Global_IsDirtyData_TheForm(this._owner.Grid_IsDirtyData);
            else
                Set_Global_IsDirtyData_TheForm(bDirtyDataFlag); //恢复以前的脏数据标识

            if (ctrl.parentElement.className == "tbc") {
                try {
                    jc._textbox.select();
                } catch (e) { }
            }
        }
        if (col.cusAttr("sf") != this.UNDEFINED_VALUE) {
            var sf_columnIndex = this._owner.GetColumnIndex(col.cusAttr("sf"));
            var tf_columnIndex = this._owner.GetColumnIndex(col.cusAttr("tf"));
            var vf_columnIndex = this._owner.GetColumnIndex(col.cusAttr("vf"));
            var cs_columnIndex = this._owner.GetColumnIndex(col.cusAttr("CS"));
            this._owner.SetDynamicScaleAndRoundType(colIndex, this.num, rowIndex, sf_columnIndex, tf_columnIndex, vf_columnIndex, cs_columnIndex, isNewRowInit);
            scale = this.jsNum.get_Scale();
            rt = this.jsNum.get_RoundType();
            rv = this.jsNum.get_RoundValue();
            cs = this.jsNum.get_CurrencySymbol();
        }
        return this._FormatNumber(value, oldValue, scale, rt, rv, cs, maxV, minV);
    },

    FormatTotalNumber: function (colIndex, value) {
        this.Initialize();
        var resultValue = new Object();
        resultValue.Value = value.toString();
        resultValue.Text = value.toString();
        if (this._owner.MainCols[colIndex].cusAttr('FieldID') == "ID") {
            return resultValue;
        }
        var col = this._owner.MainCols[colIndex];
        if (col == null)
            return resultValue;
        var fieldName = this._owner.GetColumnFieldID(colIndex);
        var scale, rt, rv, cs, maxV, minV;

        var ctrl = this._owner.GetColumnControl(colIndex);
        if (ctrl && ctrl.control) {
            var jc = ctrl.control;
            scale = jc.get_Scale();
            rt = jc.get_RoundType();
            rv = jc.get_RoundValue();
            cs = jc.get_CurrencySymbol();
            this.jsNum.set_FormatString(jc.get_FormatString());

            if (ctrl.parentElement.className == "tbc") {
                try {
                    jc._textbox.select();
                } catch (e) { }
            }
        }
        if (col.cusAttr("sf") != this.UNDEFINED_VALUE) {
            if (col.SumDataFormat != null) {
                scale = col.SumDataFormat.scale;
                rt = col.SumDataFormat.roundType;
                rv = col.SumDataFormat.roundValue;
                cs = col.SumDataFormat.currencySymbol;
            }
        }

        return this._FormatNumber(value, value, scale, rt, rv, cs, 999999999999999, -999999999999999);
    }

}
GridDataFormatHelper.GetInstance = function (owner) {
    return new GridDataFormatHelper(owner);
} //end GridPageBreakManager




/**************************************************************
 冻结行列
 **************************************************************/
GridFrozenColumnsHelper = function (layoutContainer, table, thead, fixedLength, scrollLeft, scrollTop) {
    //id为u_M_p0_DataGrid1_MainBody，class为dataGridMainBody
    this.layoutContainer = $(layoutContainer);
    this.scrollLeft = scrollLeft;
    this.scrollTop = scrollTop;
    //class为dataGridMainBody的孩子节点table
    this.table = table;
    this.thead = thead;
    //固定列的个数
    this.fixedLength = fixedLength;
    //是否刷新clone
    this.afreshCloneFlag = false;
    //所有固定列的总宽度，默认为0
    this.cellsWidth = 0;
}
GridFrozenColumnsHelper.prototype = {
    constructor: GridFrozenColumnsHelper,
    classes: {
        //clone 固定table
        cssFrozenClone: "frozen-clone",
        cssTheadWrapper: "thead-wrapper",
        //clone 冻结表头
        cssTheadFixed: "thead-fixed",
        //clone 固定列的数据单元格
        cssTbodyFixedWrapper: "tbody-fixed-wrapper",
        //class为dataGridMainBody父级的class
        cssParent: "frozen-container",
        cssFixedColumn: "fixedColumn"
    },
    default: function () {
    },
    init: function () {
        //是否存在纵向滚动条
        var vScroll = this.getVScroll();
        //是否存在横向滚动条
        var LScroll = this.getLScroll();
        //没有滚动条
        /*if(!vScroll && !LScroll){
             return false;
        }*/
        // 初始化设置用户自定义列宽
        this.setPersonalWidth()
        if (this.fixedLength == 0) {
            //没有垂直滚动条，不需要
            //if(!vScroll)return false; 新增行到一定高度，滚动条会出现 问题号：201708300116
            this.planB();

        } else {
            this.planA();
        }
    },
    // 初始化读取用户个性化列宽设置
    setPersonalWidth: function () {
        gridID = this.layoutContainer[0].id;
        if (!window.frameElement) return
        pageLnk = dealUrlPara("lnk", window.frameElement.src) + "_" + dealUrlPara("SO_Type", window.frameElement.src)
        userName = $("#UserName").val()
        GridSizeStorage = JSON.parse(window.localStorage.getItem(userName + "_cellWidth"));
        if (GridSizeStorage && GridSizeStorage[pageLnk]) {
            Object.keys(GridSizeStorage[pageLnk]).forEach(function (item) {
                if (item.split("_MainBody")[0] == gridID.split("_MainBody")[0]) {
                    var Main_Body_Table = $find(gridID.split("_MainBody")[0]);
                    var tableThead = Main_Body_Table ? Main_Body_Table.m_tableDimentionManager.TableHead : $("#" + gridID).children().children("thead");
                    for (var j = 0; j < $(tableThead).children().length; j++) {
                        var theadTr = $(tableThead).children()[j];
                        for (var i = 0; i < $(theadTr).children().length; i++) {
                            var td = $(theadTr).children()[i];
                            if (td.cusAttr("fieldId") == item.split("_MainBody_")[1]) {
                                td.width = GridSizeStorage[pageLnk][item];
                                break;
                            }
                        }
                    }
                    var cols = Main_Body_Table ? Main_Body_Table.m_tableDimentionManager.Cols : $("#" + gridID).children().children("colgroup");
                    for (var i = 0; i < cols.length; i++) {
                        var col = cols[i];
                        if (col.cusAttr("fieldId") == item.split("_MainBody_")[1]) {
                            col.width = GridSizeStorage[pageLnk][item] + "px";
                            break;
                        }
                    }
                }
            })
        }
    },
    //适用于所有情况
    planA: function () {
        //只init一次
        if (this.layoutContainer.siblings("." + this.classes.cssFrozenClone).length == 1) { return false; }
        //冻结行列主操作
        this.FrozenColumns();
        //事件绑定
        this.Events();
    },
    //只适用于this.fixedLength==0的情况
    planB: function () {
        var that = this;
        var thisTable = $(this.table);
        // 解决表格吞行的问题：判断当前表头是否存在，如果存在则删除该节点，重新克隆。
        //  that.thead.className === "thead-tr"  =>  目的：当前触发的表格是否有冻结列
        if (that.thead.className === "thead-tr" && $("tr").hasClass('thead-tr') && thisTable.attr("yetClone") === "yes") {
            $('.thead-tr').remove()
            thisTable.attr("yetClone", "no");
        }
        //渲染一次
        if (thisTable.attr("yetClone") != "yes") {
            this.planBCloneThead();
            this.planBCssThead();
            thisTable.attr("yetClone", "yes");
        }
        this.planBEvents();
    },
    planBCloneThead: function () {

        var theadClone = $(this.thead).clone();
        $('tr', theadClone).addClass("thead-tr");
        theadClone = this.ColumnsFilterForCloneThead(theadClone);
        //预测问题
        $(this.thead).before(theadClone[0].innerHTML);
    },
    ColumnsFilterForCloneThead: function (element) {
        //td上多余的属性去掉
        $('tr td', element).removeAttr("data-custom-attr").removeAttr("width");
        return element;
    },
    planBCssThead: function () {
        var thisThead = $(this.thead);
        if (thisThead.hasClass("positionThead")) {
            return
        }
        thisThead.addClass("positionThead");
        //多表头,两列 ，宽度重新计算
        if (thisThead.children().length > 1) {
            thisThead.parent().addClass("moreHeader"); //多表头没有省略号
            //修改为样式处理，以下仅供参考
            //   var theadTds=thisThead.children().children();
            //   for(var i=0;i<theadTds.length; i++){
            //        if(theadTds[i].colSpan > 1){
            //              theadTds[i].width=theadTds[i].width  * theadTds[i].colSpan;
            //        }
            //   }
        }
        //修改为样式处理 .positionThead{width:inherit}，以下仅供参考
        //var iehackWidth=this.getIehackWidth();
        //thisThead.width($(this.table)[0].offsetWidth/*+iehackWidth*/);
    },
    addHorizontalScrolling: function () {
        //横向滚动时，positionThead需要跟随table移动
        $(this.table).css("position", "relative");
    },
    removeHorizontalScrolling: function () {
        $(this.table).css("position", "relative");
    },
    planBEvents: function () {
        // 方案一
        var that = this;
        //默认横向滚动
        that.addHorizontalScrolling();
        // 纵向滚动时制空position属性会导致表头错位，为了平滑滚动表头移动，使用方案二scroll事件
        // $(this.layoutContainer).each(function () {
        //     $(this).data('slot', { sLevel: this.scrollLeft, st: this.scrollTop });
        // }).on('scrollstart scrollstop', { latency: 100 }, function (e) {
        //     var sLevel = this.scrollLeft,
        //         sVertical = this.scrollTop,
        //         dSlot = $(this).data('slot');
        //     if (e.type == "scrollstart" || e.type == "scrollstop") {
        //         //纵向滚动
        //         if (sVertical != dSlot.sVertical && sLevel == dSlot.sLevel) {
        //             // console.log("纵向滚动")
        //             that.removeHorizontalScrolling();
        //             $(that.thead).css("top", "");
        //             var scrollLeft = $(this).scrollLeft();
        //             $(that.thead).css("left", -1 * scrollLeft);
        //             //横向滚动
        //         } else if (sLevel != dSlot.sLevel && sVertical == dSlot.sVertical) {
        //             // console.log("横向滚动")
        //             that.addHorizontalScrolling();
        //             $(that.thead).css("left", "");
        //             var scrollTop = $(this).scrollTop();
        //             $(that.thead).css("top", scrollTop);
        //         }

        //     }
        //     $(this).data('slot', { sLevel: sLevel, sVertical: sVertical });
        // });
        // 方案二
        /* var that=this;
        $(this.layoutContainer).on("scroll",function(){
                 var scrollLeft=-1 * $(this).scrollLeft();
                 $(that.thead).css("left",scrollLeft)
        })*/
        $(this.layoutContainer).each(function () {
            $(this).data('slot', { sLevel: this.scrollLeft, st: this.scrollTop });
        }).on('scroll', { latency: 100 }, function (e) {
            var sLevel = this.scrollLeft,
                sVertical = this.scrollTop,
                dSlot = $(this).data('slot');
            if (e.type == "scroll") {
                //纵向滚动
                if (sVertical != dSlot.sVertical && sLevel == dSlot.sLevel) {
                    // console.log("纵向滚动")
                    that.removeHorizontalScrolling();
                    $(that.thead).css("top", sVertical);
                    var scrollLeft = $(this).scrollLeft();
                    $(that.thead).css("left", "");
                    //横向滚动
                } else if (sLevel != dSlot.sLevel && sVertical == dSlot.sVertical) {
                    // console.log("横向滚动")
                    that.addHorizontalScrolling();
                    $(that.thead).css("left", "");
                    var scrollTop = $(this).scrollTop();
                    $(that.thead).css("top", scrollTop);
                }

            }
            if (sVertical != dSlot.sVertical && sLevel == dSlot.sLevel) {
                // console.log("纵向滚动")
                $(that.thead).css("top", sVertical);
                //横向滚动
            }
            $(this).data('slot', { sLevel: sLevel, sVertical: sVertical });
        });
    },
    getIehackWidth: function () {
        //ie下差2像素
        var iehackWidth = 0;
        if (this.isIE()) {
            iehackWidth = 2;
        }
        return iehackWidth;
    },
    getLScroll: function () {
        var layoutContainerGet0 = this.layoutContainer.get(0);
        //是否存在横向滚动条
        var LScroll = layoutContainerGet0.offsetWidth < layoutContainerGet0.scrollWidth;
        return LScroll;
    },
    getVScroll: function () {
        var layoutContainerGet0 = this.layoutContainer.get(0);
        //是否存在纵向滚动条
        var vScroll = layoutContainerGet0.offsetHeight < layoutContainerGet0.scrollHeight;
        return vScroll;
    },
    //冻结行列
    FrozenColumns: function () {
        if (this.fixedLength > 0) {
            this.addFixedClass();
            this.initFixedCss();
        }
        //设置各个列的宽度
        this.setCellWidth();
        this.GetCellsWidth();
        //创建冻结相关的表格
        this.CreateTables();
        this.frozenCloneDefault();
        //克隆冻结头
        this.CloneThead();
        if (this.fixedLength > 0) {
            //克隆冻结列
            this.CloneTbodyFixed();
            //克隆冻结列的行头
            this.CloneTheadFixed();
        }
        //设置table的高度和宽度
        this.SetTableSize();
    },
    frozenCloneDefault: function () {
        this.frozenClone = this.layoutContainer.siblings("." + this.classes.cssFrozenClone);
        this.theadFixed = this.frozenClone.children("." + this.classes.cssTheadFixed);
        this.tbodyFixedWrapper = this.frozenClone.children("." + this.classes.cssTbodyFixedWrapper);
        this.theadWrapper = this.frozenClone.children("." + this.classes.cssTheadWrapper);
    },
    // addFixedClass:function(){
    //     var that=this;
    //     if($(that.table).find("."+that.classes.cssFixedColumn).length==0){
    //             $("tr",that.table).each(function(index,item){
    //                 $(item).children("td:not(:hidden)").slice(0,that.fixedLength).addClass(that.classes.cssFixedColumn);
    //             })
    //     }
    // },

    //lianglli 2020/4/13修改:解决多表头固定列问题，原写法多表头固定列会出现空白现象。修改为如有多表头，则固定跨列的行（原则上多表头表格只有跨行的列可以固定，如表头有3列，固定rowspan=3的列）
    addFixedClass: function () {
        var that = this;
        if ($(that.table).find("." + that.classes.cssFixedColumn).length == 0) {
            that.addFixedClassDom("thead")
            that.addFixedClassDom("tbody")
            that.addFixedClassDom("tfoot")
        }
    },
    addFixedClassDom: function (fixedClass) {
        var that = this;
        var theadLength = $(this.thead).children("tr").length;
        if (fixedClass == "thead") {
            if ($(this.thead).children("tr").length > 1) {
                $(that.table).children("thead").children("tr").each(function (index, item) {
                    $($(item).children("td")[0]).addClass(that.classes.cssFixedColumn);
                    $(item).children("td:not(:hidden)").filter(function (i, x) {
                        return $(x).attr("rowspan") == theadLength
                    }).slice(0, that.fixedLength - 1).addClass(that.classes.cssFixedColumn);
                })
            }
            else {
                $(that.table).children("thead").children("tr").each(function (index, item) {
                    $(item).children("td:not(:hidden)").slice(0, that.fixedLength).addClass(that.classes.cssFixedColumn);
                })
            }
        }

        else {
            $(that.table).children(fixedClass).children("tr").each(function (index, item) {
                $(item).children("td:not(:hidden)").slice(0, that.fixedLength).addClass(that.classes.cssFixedColumn);
            })
        }
    },
    //2020/4/13修改end
    initFixedCss: function () {
        //Clone前将定位移除
        $(this.layoutContainer).find("." + this.classes.cssFixedColumn).css("left", "");
        $(this.layoutContainer).find("thead  td").css("top", "");
    },
    setCellWidth: function () {
        var _this = this;
        //给thead里的每个td赋宽度值
        var theadTr = $(this.thead).find("tr");
        theadTr.find("td").each(function (index, item) {
            var _item = $(item);
            if (_item.css("display") != "none") {
                _item.width(_item.width());
            }
        })
        //给thead的tr赋高度值,保证滚动时高度统一
        theadTr.height(theadTr.height());
    },
    //设置各个列的宽度
    GetCellsWidth: function () {
        var _this = this;
        //所有固定列的总宽度
        _this.cellsWidth = 0;
        var titleCell = $(this.thead).find("." + this.classes.cssFixedColumn).slice(0, this.fixedLength);
        titleCell.each(function (index, item) {
            //宽度加到固定列总宽度里
            _this.cellsWidth += $(item).outerWidth(true);
        })
    },
    CreateTables: function () {
        var classes = this.classes;
        this.layoutContainer.addClass("dataGridMainBody");
        var parent = this.layoutContainer.parent().addClass(classes.cssParent);
        parent.width(parent.width());
        //frozentable还不存在，在layoutContainer兄弟节点之后插入一个div
        if (this.layoutContainer.siblings("." + classes.cssFrozenClone).length == 0) {
            var frozenCloneHtml = this.getFrozenCloneHtml();
            this.layoutContainer.after(frozenCloneHtml);
        }
    },
    getFrozenCloneHtml: function () {
        var classes = this.classes;
        var frozenCloneHtml =
            '<div class="' + classes.cssFrozenClone + '">'
            //有没有冻结列，头部都要固定住
            + '<div class="' + classes.cssTheadWrapper + '"></div>'
            + '<table class="' + classes.cssTheadFixed + '"></table>'
            //克隆列
            + '<div class="' + classes.cssTbodyFixedWrapper + '"></div>'
            + '</div>';
        return frozenCloneHtml;
    },
    //克隆冻结头
    CloneThead: function () {
        var theadClone = $(this.thead).clone();
        //冻结行的表格
        //.thead-wrapper
        this.theadWrapper.html('<table>' + theadClone[0].outerHTML + '</table>');
    },

    CloneTbodyFixed: function () {
        var tableClone = $(this.table).clone();
        tableClone = this.SetCloneTheadFixedHeight(tableClone);
        tableClone = this.ColumnsFilterASClass(tableClone);
        //.tbody-fixed-wrapper
        this.tbodyFixedWrapper.html('<table>' + tableClone[0].innerHTML + '</table>')
    },
    //克隆冻结列,头部冻结列数为3，则取前三列
    CloneTheadFixed: function () {
        //克隆冻结列部分的头部thead
        var theadFixedClone = this.frozenClone.children("." + this.classes.cssTbodyFixedWrapper).find("thead").clone();
        //.thead-fixed
        this.theadFixed.html(theadFixedClone);
    },
    SetCloneTheadFixedHeight: function (element) {
        var _this = this
        $('tr', element).each(function (index, item) {
            // if( $("#UFAutoFocusID").length > 0 ){
            //     item.style.height =  ($('tr', _this.table)[index].offsetHeight) + "px"
            // }else{
            //     item.style.height =  ($('tr', _this.table)[index].offsetHeight - 1 ) + "px"
            // }
            item.style.height = ($('tr', _this.table)[index].getBoundingClientRect().height - (1 / window.devicePixelRatio)) + "px"
        })
        return element
    },
    ColumnsFilterASClass: function (element, fliterClass) {
        //把固定行的竖向不需要固定的列过滤掉
        $("colgroup", element).remove();
        $('tr td', element).not('.' + this.classes.cssFixedColumn).remove();
        //tr上多余的属性去掉
        $('tr', element).removeAttr("data-ca");
        //td上多余的属性去掉
        $('tr td', element).removeAttr("data-ca").removeAttr("title");
        return element;
    },
    //设置table的高度和宽度
    SetTableSize: function () {
        // 浏览器默认滚动条高度是17px,后期谷歌浏览器修改成12px，而火狐不支持修改滚动条高度，所以写死17px就不对了。
        var scrollbarHeight = 17
        if (window.navigator.userAgent.indexOf("Chrome") > -1) {
            scrollbarHeight = 13
        }
        var layoutContainerHeight = this.layoutContainer.get(0).offsetHeight - scrollbarHeight;
        var layoutContainerWidth = this.layoutContainer.get(0).offsetWidth - scrollbarHeight;
        var tableWidth = $(this.table).get(0).offsetWidth;
        //.frozen-clone
        this.frozenClone.width(this.cellsWidth).height(layoutContainerHeight);
        //.thead-wrapper
        this.theadWrapper.width(layoutContainerWidth);
        //.thead-wrapper table
        this.theadWrapper.children("table").width(tableWidth)
        //.thead-fixed
        this.theadFixed.width(this.cellsWidth);
        //.tbody-fixed-wrapper
        this.tbodyFixedWrapper.width(this.cellsWidth).height(layoutContainerHeight);
    },
    Events: function () {

        var that = this;
        var scrollLeft;
        var scrollTop;
        this.setScrollPosition();
        this.layoutContainer.on("scroll", function (e) {
            that.FrozenTableDisplayShow();
            that.Scroll(this);
        });
        this.layoutContainer.on('scrollstart scrollstop', { latency: 400 }, function (e) {
            if (e.type == "scrollstart") {
            } else if (e.type == "scrollstop") {
                that.GetInstance(this).ScrollStop();
                that.FrozenTableDisplayHidden();
            }

        });
        this.layoutContainer.find("tbody").on("click", function () {
            that.afreshCloneFlag = true;
        });
        this.layoutContainer.find("thead").on("mouseup", function () {
            that.afreshCloneFlag = true;
        });
        this.ieHack();
        if (this.scrollLeft != 0 || this.scrollTop != 0) {
            that.GetInstance(this.layoutContainer).ScrollStop();
            that.FrozenTableDisplayHidden();
        }
        //初始化隐藏
        that.FrozenTableDisplayHidden();
    },
    Scroll: function (_this) {
        var that = this;
        var layoutContainer = $(_this);
        var frozenClone = layoutContainer.siblings("." + that.classes.cssFrozenClone);
        var tbodyFixed = frozenClone.children("." + that.classes.cssTbodyFixedWrapper).children("table");
        var thead = frozenClone.children("." + that.classes.cssTheadWrapper).children("table");
        tbodyFixed.css("top", -1 * layoutContainer.scrollTop());
        thead.css("left", -1 * layoutContainer.scrollLeft());
    },
    //判断是纵向滚动还是横向滚动
    GetscrollXY: function () {
        var scrollXY;
        var $this = $(this.layoutContainer);
        var preScrollPosition = $this.data("scrollPosition");
        var Left = $this.scrollLeft();
        var Top = $this.scrollTop();
        if (Left != preScrollPosition.scrollLeft) {
            scrollXY = "X";//横向滚动
            //console.log("横向滚动");
        } else if (Top != preScrollPosition.scrollTop) {
            scrollXY = "Y";//纵向滚动
            //console.log("纵向滚动");
        }
        $this.data('scrollPosition', { scrollLeft: Left, scrollTop: Top });
        return scrollXY;
    },
    ieHack: function () {
        var that = this;
        if (this.isIE()) {
            //点击的是滚动条ie下hack，解决定位延迟
            this.layoutContainer.bind("mousedown mouseup", function (e) {
                //解决ie下滚动中,头部因定位有延迟条,增加class滚动中，静态定位
                //.scrolling 所有固定列{position: static!important;}
                var layoutContainer = $(this);
                var frozenTable = layoutContainer.siblings(".frozen-clone");
                scrollLeft = layoutContainer.scrollLeft();
                scrollTop = layoutContainer.scrollTop();
                var pageX = e.pageX;
                var pageY = e.pageY;
                var layoutContainerLeft = layoutContainer.width() + layoutContainer.offset().left - 17;
                var layoutContainerTop = layoutContainer.height() + layoutContainer.offset().top - 17;
                //点击的是滚动条，则：
                if (pageX > layoutContainerLeft || pageY > layoutContainerTop) {
                    if (e.type == "mousedown") {
                        that.FrozenTableDisplayShow();
                    } else if (e.type == "mouseup") {
                        //滚动条没滚动
                        if (scrollLeft == layoutContainer.scrollLeft() && scrollTop == layoutContainer.scrollTop()) {
                            that.FrozenTableDisplayHidden();
                        }
                    }
                }

            });
        }
    },
    isIE: function () {
        if (!!window.ActiveXObject || "ActiveXObject" in window) {
            return true;
        } else {
            return false;
        }
    },
    FrozenTableDisplayHidden: function () {
        this.FrozenTableDisplay("none");
        $(this.layoutContainer).attr("yetPrecess", "");
    },
    FrozenTableDisplayShow: function () {
        //刷新克隆
        this.afreshClone();
        //iehack
        //解决滚动时固定部位延迟
        this.rePosition();
    },
    FrozenTableDisplay: function (_display) {

        var classes = this.classes;
        var frozenTables = this.layoutContainer.siblings("." + classes.cssFrozenClone);
        if (frozenTables.length != 0) {
            frozenTables.css("display", _display);
        }
    },
    //iehack
    //解决滚动时固定部位延迟
    rePosition: function () {
        var layoutContainer = $(this.layoutContainer);
        var data = layoutContainer.attr("yetPrecess");
        if (data != "yes") {
            layoutContainer.find(".thc").css("top", "");
            layoutContainer.find(".FixedColumnDataCell").css("left", "");
            layoutContainer.find(".FixedColumnSumCell").css("left", "");
            this.FrozenTableDisplay("block");
            layoutContainer.attr("yetPrecess", "yes");
        }
    },
    afreshClone: function () {
        if (this.afreshCloneFlag == true) {
            this.afreshCloneFlag = false;
            this.FrozenColumns();

        }
    },
    setScrollPosition: function () {
        $(this.layoutContainer).each(function () {
            var Left = $(this).scrollLeft();
            var Top = $(this).scrollTop();
            $(this).data('scrollPosition', { scrollLeft: Left, scrollTop: Top });
        })
    },
    GetInstance: function (_this) {
        var layoutContainer = $(_this);
        var thead = layoutContainer.find("thead");
        var fixedClass = this.classes.cssFixedColumn;
        var scrollLeft = layoutContainer.scrollLeft();
        var scrollTop = layoutContainer.scrollTop();
        var thisFrozen = GridFrozenEventsManager.GetInstance(layoutContainer, this.table, thead, fixedClass, scrollLeft, scrollTop);
        return thisFrozen;
    }

}

GridFrozenColumnsHelper.GetInstance = function (layoutContainer, table, thead, fixedLength, scrollLeft, scrollTop) {
    return new GridFrozenColumnsHelper(layoutContainer, table, thead, fixedLength, scrollLeft, scrollTop);

}

GridFrozenEventsManager = function (layoutContainer, table, thead, fixedClass, scrollLeft, scrollTop) {
    this.layoutContainer = layoutContainer;
    this.table = table;
    this.fixedThead = thead;
    this.fixedClass = fixedClass;
    this.scrollLeft = scrollLeft;
    this.scrollTop = scrollTop;
}
GridFrozenEventsManager.prototype = {
    constructor: GridFrozenEventsManager,
    init: function () {

    },
    ScrollStop: function () {
        this.positionTheadTop();
        this.positionFixedLeft();
    },
    positionTheadTop: function () {
        var fixedTheadTd = this.fixedThead.find("td");
        fixedTheadTd.css("top", this.scrollTop);
        //console.log("JSY")
    },
    positionFixedLeft: function () {
        $(this.table).find("." + this.fixedClass).css("left", this.scrollLeft)
    }

}
GridFrozenEventsManager.GetInstance = function (owner, table, thead, fixedClass, scrollLeft, scrollTop) {
    return new GridFrozenEventsManager(owner, table, thead, fixedClass, scrollLeft, scrollTop);
};
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');
UF.UI.RichImage = function (element) {
    UF.UI.RichImage.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    this._img;
    this._file;
    this._btnFakeFile;
    this._btnDelete;
    this._hidden;
    this._div;
    this._ReadOnly = false;
    this._AlertMsg1 = "请选择图片文件(jpg|jpeg|gif|bmp|png)";

    // Handler
    this._mouseEnterHandler;
    this._mouseLeaveHandler;
    this._btnDelete_mouseEnterHandler;
    this._btnDelete_mouseLeaveHandler;
    this._btnDelete_clickHandler;
    this._btnFakeFile_mouseEnterHandler;
    this._btnFakeFile_mouseLeaveHandler;
    this._file_mouseEnterHandler;
    this._file_mouseLeaveHandler;
    this._fileChangeHandler;

    this._willHidFile;
}

UF.UI.RichImage.prototype = {

    initialize: function () {
        UF.UI.RichImage.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        // Create delegates Attach events
        this._ReadOnly = this._element.cusAttr('ReadOnly');
        if (this._ReadOnly) {
            this.initControl();
            return;
        }

        this._mouseEnterHandler = Function.createDelegate(this, this.onMouseEnter);
        $addHandler(this._element, "mouseenter", this._mouseEnterHandler);
        this._mouseLeaveHandler = Function.createDelegate(this, this.onMouseLeave);
        $addHandler(this._element, "mouseleave", this._mouseLeaveHandler);

        this._btnDelete_mouseEnterHandler = Function.createDelegate(this, this.onMouseEnter_btnDelete);
        $addHandler(this.get_btnDelete(), "mouseenter", this._btnDelete_mouseEnterHandler);
        this._btnDelete_mouseLeaveHandler = Function.createDelegate(this, this.onMouseLeave_btnDelete);
        $addHandler(this.get_btnDelete(), "mouseleave", this._btnDelete_mouseLeaveHandler);
        this._btnDelete_clickHandler = Function.createDelegate(this, this.onClick_btnDelete);
        $addHandler(this.get_btnDelete(), "click", this._btnDelete_clickHandler);

        this._btnFakeFile_mouseEnterHandler = Function.createDelegate(this, this.onMouseEnter_btnFakeFile);
        $addHandler(this.get_btnFakeFile(), "mouseenter", this._btnFakeFile_mouseEnterHandler);
        this._btnFakeFile_mouseLeaveHandler = Function.createDelegate(this, this.onMouseLeave_btnFakeFile);
        $addHandler(this.get_btnFakeFile(), "mouseleave", this._btnFakeFile_mouseLeaveHandler);

        this._file_mouseEnterHandler = Function.createDelegate(this, this.onMouseEnter_file);
        $addHandler(this.get_file(), "mouseenter", this._file_mouseEnterHandler);
        this._file_mouseLeaveHandler = Function.createDelegate(this, this.onMouseLeave_file);
        $addHandler(this.get_file(), "mouseleave", this._file_mouseLeaveHandler);

        this._fileChangeHandler = Function.createDelegate(this, this.onFileChange);
        $addHandler(this.get_file(), "change", this._fileChangeHandler);

        this.initControl();
    },

    dispose: function () {
        // TODO: add your cleanup code here
        if (this._mouseEnterHandler) {
            // $removeHandler(this.get_element(), "mouseenter", this._mouseEnterHandler);
            this._mouseEnterHandler = null;
            $(this._element).unbind("mouseenter");
        }
        if (this._mouseLeaveHandler) {
            //$removeHandler(this.get_element(), "mouseleave", this._mouseLeaveHandler);
            this._mouseLeaveHandler = null;
            $(this._element).unbind("mouseleave");
        }

        if (this._btnDelete_mouseEnterHandler) {
            //$removeHandler(this.get_btnDelete(), "mouseenter", this._btnDelete_mouseEnterHandler);
            this._btnDelete_mouseEnterHandler = null;
            $(this.get_btnDelete()).unbind("mouseenter");
        }
        if (this._btnDelete_mouseLeaveHandler) {
            //$removeHandler(this.get_btnDelete(), "mouseleave", this._btnDelete_mouseLeaveHandler);
            this._btnDelete_mouseLeaveHandler = null;
            $(this.get_btnDelete()).unbind("mouseleave");
        }
        if (this._btnDelete_clickHandler) {
            //$removeHandler(this.get_btnDelete(), "click", this._btnDelete_clickHandler);
            this._btnDelete_clickHandler = null;
            $(this.get_btnDelete()).unbind("click");
        }

        if (this._btnFakeFile_mouseEnterHandler) {
            //$removeHandler(this.get_btnFakeFile(), "mouseenter", this._btnFakeFile_mouseEnterHandler);
            this._btnFakeFile_mouseEnterHandler = null;
            $(this.get_btnFakeFile()).unbind("mouseenter");
        }
        if (this._btnFakeFile_mouseLeaveHandler) {
            //$removeHandler(this.get_btnFakeFile(), "mouseleave", this._btnFakeFile_mouseLeaveHandler);
            this._btnFakeFile_mouseLeaveHandler = null;
            $(this.get_btnFakeFile()).unbind("mouseleave");
        }

        if (this._file_mouseEnterHandler) {
            //$removeHandler(this.get_file(), "mouseenter", this._file_mouseEnterHandler);
            this._file_mouseEnterHandler = null;
            $(this.get_file()).unbind("mouseenter");
        }
        if (this._file_mouseLeaveHandler) {
            //$removeHandler(this.get_file(), "mouseleave", this._file_mouseLeaveHandler);
            this._file_mouseLeaveHandler = null;

            $(this.get_file()).unbind("mouseleave");
        }

        if (this._fileChangeHandler) {
            //$removeHandler(this.get_file(), "change", this._fileChangeHandler);
            this._fileChangeHandler = null;
            $(this.get_file()).unbind("mouseleave");
        }
        this._btnDelete = null;
        this._btnFakeFile = null;
        this._file = null;
        this._img = null;
        this._willHidFile = null;

        UF.UI.RichImage.callBaseMethod(this, 'dispose');
    },

    initControl: function () {

        this.get_div();
        { //先将控件隐藏，以保证位置正确计算
            if (this.get_btnFakeFile() != null) {
                this._btnFakeFile.style.display = "none";
            }
            if (this.get_file() != null) {
                this._file.style.display = "none";
            }
            if (this.get_btnDelete() != null) {
                this._btnDelete.style.display = "none";
            }
            if (this.get_div() != null) {
                //this._div.style.display = "none";
                this._div.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale);width:" + this.get_element().clientWidth + ";height:" + this.get_element().clientHeight + ";";
                this._div.text = this._div.innerText;
                this._div.innerText = "";
            }
        }
        if (this._element.cusAttr('haspic') && this._element.cusAttr('haspic') == "1") {
            this._div.style.background = "transparent";
            this._div.style.border = "transparent 1px solid";
        } else {
            if (this.get_btnFakeFile() != null) {
                this._btnFakeFile.style.display = "";
            }
            if (this.get_file() != null) {
                this._file.style.display = "";
            }
            if (this.get_btnDelete() != null) {
                this._btnDelete.style.display = "";
            }
            if (this.get_div() != null) {
                this._div.innerText = this._div.text;
            }
        }
        if (this.get_img()) {
            this.onLoadImage();
            this.get_img().oldSrc = this.get_img().src;
            this.get_img().style.position = "absolute";
        }
        if (this.get_img() && this.get_file()) {
            this.get_img().filePath = this.get_file().value;
        }

        if (this._element.cusAttr('Msg1') && this._element.cusAttr('Msg1').length > 0) {
            this._AlertMsg1 = this._element.cusAttr('Msg1');
        }

        if (this.get_img()) {
            this._img.ondblclick = function () {
                if (this.parentElement.control._div.innerText.length > 0)
                    return;
                if (this.src && this.src.length > 0 && this.src.substring(0, 4) != "file") {
                    try {
                        window.open(this.src);
                    } catch (e) { }
                }
            };
        }
    },

    //wanglei: 相应load事件
    onLoadImage: function () {

        var img = this.get_img();
        var height = this._element.clientHeight;
        var width = this._element.clientWidth;
        this.drawImage(img, width, height);
    },
    //wanglei: 动态调整 图片尺寸
    drawImage: function (MyPic, W, H) {
        var image = new Image();
        image.src = MyPic.src;
        if (W === undefined) {
            W = MyPic.width;
            H = MyPic.height;
        }
        if (image.width <= 0 || image.height <= 0)
            return;
        if (W <= 0 || H <= 0)
            return;
        flag = true;
        if (image.width / image.height >= W / H) {
            if (image.width > W) {
                MyPic.style.width = W + 'px';  // 添加px -- weiyin
                MyPic.style.height = ((image.height * W) / image.width) + 'px';
            }
            else {
                MyPic.style.width = image.width + 'px';
                MyPic.style.height = image.height + 'px';
            }
        }
        else {
            if (image.height > H) {
                MyPic.style.height = H + 'px';
                MyPic.style.width = ((image.width * H) / image.height) + 'px';
            }
            else {
                MyPic.style.width = image.width + 'px';
                MyPic.style.height = image.height + 'px';
            }
        }
    },

    onMouseEnter: function () {
        this._willHidFile = false;
        this.get_file();
        this.get_btnFakeFile();
        this.get_btnDelete();
        this._file ? this._file.style.display = "" : "";
        this._btnFakeFile ? this._btnFakeFile.style.display = "" : "";
        this._btnDelete ? this._btnDelete.style.display = "" : "";
    },

    onMouseLeave: function () {
        if (this._element.cusAttr('haspic') && this._element.cusAttr('haspic') == "1") {
            this._willHidFile = true;
            window.setTimeout("$find('" + this._element.id + "').hidFakeFile()", 800);
        }
    },

    hidFakeFile: function () {
        if (this._willHidFile == false)
            return;
        this.get_file();
        this.get_btnFakeFile();
        this.get_btnDelete();
        this._file ? this._file.style.display = "none" : "";
        this._btnFakeFile ? this._btnFakeFile.style.display = "none" : "";
        this._btnDelete ? this._btnDelete.style.display = "none" : "";
    },

    onMouseEnter_btnDelete: function () {
        this.get_btnDelete().className = 'btnDelete_over';
    },

    onMouseLeave_btnDelete: function () {
        this.get_btnDelete().className = 'btnDelete';
    },

    onMouseEnter_btnFakeFile: function () {
        this.get_btnFakeFile().className = 'btnFakeFile_over';
    },
    onMouseLeave_btnFakeFile: function () {
        this.get_btnFakeFile().className = 'btnFakeFile';
    },

    onClick_btnDelete: function () {
        if (this.get_img().filePath && this.get_img().filePath.length > 0) {
            this.get_img().filePath = "";
            this.reset_file();
            this.get_img().src = this.get_img().oldSrc;
            if (!this._element.cusAttr('haspic') || this._element.cusAttr('haspic') != "1") {
                this._div.innerText = this._div.text;
                //this.get_div().style.display = "";
            } else {
                if (this._element.cusAttr('haspic') && this._element.cusAttr('haspic') == "1") {
                    this.get_img().style.display = 'none';
                    this.get_div().style.display = "none";
                }
            }
        } else {
            if (this._element.cusAttr('haspic') && this._element.cusAttr('haspic') == "1") {
                this.get_hidden().value = "true";
                // 跨浏览器兼容修改，2016.06.12 -- weiyin 
                // this.get_img().className = "imgdel";  //这个class控制的是点击删除按钮的时候，将当前要删除的图片给半透明化
                this.get_img().style.display = 'none'; //或者注释点上一行，点击删除按钮的时候，直接将当前的要删除额图片隐藏，会不会看起来更接近用户体验了？
                this._div.innerText = '点击确定按钮删除图片成功';
            }
        }
    },
    onMouseEnter_file: function () {
        // this.get_btnFakeFile().fireEvent("onmouseenter");
        // 跨浏览器兼容修改 -- 2016.5.19 -- weiyin
        this.get_btnFakeFile().className = 'btnFakeFile_over';   //此时file元素覆盖在此button上，所以需高亮这个button的背景

    },
    onMouseLeave_file: function () {
        // this.get_btnFakeFile().fireEvent("onmouseleave");

        // this._file.style.display = "none";  //隐藏file元素
        // 跨浏览器兼容修改 -- 2016.5.19 -- weiyin
        this.get_btnFakeFile().className = 'btnFakeFile';  //隐藏file标签的同时，移除掉覆盖在下面的选中高亮的classname
    },

    onFileChange: function () {
        var tmpPath = this.get_file().value.toLowerCase();
        if (tmpPath.length == 0) {
            return;
        }
        if (tmpPath.match(/(jpg|jpeg|gif|bmp|png)$/g) == null) {
            alert(this._AlertMsg1);
            //alert("Require Image with (jpg|jpeg|gif|bmp|png)");
            //this.get_file().select();
            //window.document.execCommand('Delete');
            this.reset_file();
        } else {
            this.get_hidden().value = "false";  
            this.get_img().className = "";
            this.get_img().filePath = this.get_file().value;
            this.get_img().src = "file:///" + tmpPath.replace(/\\/g, '/');
            if (this.get_div() != null) {
                this._div.text = this._div.innerText;
                this._div.innerText = "";
                // 2016.05.19 上传图片跨浏览器兼容 -- weiyin
                if(this._div.filters){   //IE
                    this._div.filters.item(0).src = this.get_file().value;
                }else{
                    var windowURL = window.URL || window.webkitURL;   //mozilla and chrome
                    var dataURL = windowURL.createObjectURL($(this.get_file())[0].files[0]);
                    var pvImg = new Image();
                    // pvImg.style.width = this._div.offsetWidth + 'px';
                    pvImg.style.width = this._element.offsetWidth + 'px';  //跨浏览器兼容 weiyin--2016.06.13
                    // pvImg.style.height = this._div.offsetHeight + 'px';
                    pvImg.style.height = this._element.offsetHeight + 'px';
                    pvImg.className = ' previewPic';
                    pvImg.src = dataURL;
                    // this._div.removeChild();
                    this._div.style.display = '';
                    this._div.innerHTML == '' ? true : this._div.removeChild();
                    this._div.appendChild(pvImg);
                }
            }
        }
        //20100518 by wangxiaoliang
        //设置页面全局的脏数据标识为true
        Set_Global_IsDirtyData_TheForm(true);
    },
    get_Type: function () {
        return ControlType.RichImage;
    },

    /*
    get_textbox : function(){
        if (this._textbox == null) {
            this._textbox =$E(this.get_element()).document.getElementById(this.get_element().id + "_fakefile_textbox");
        }
        return this._textbox;
    },
    get_button : function(){
        if (this._button == null) {        
            this._button =$E(this.get_element()).document.getElementById(this.get_element().id + "_fakefile_button");
        }
        return this._button;
    },
    */
    reset_file: function () {

        this.get_file();
        if (this._file_mouseEnterHandler) {
            $removeHandler(this.get_file(), "mouseenter", this._file_mouseEnterHandler);
            this._file_mouseEnterHandler = null;
        }
        if (this._file_mouseLeaveHandler) {
            $removeHandler(this.get_file(), "mouseleave", this._file_mouseLeaveHandler);
            this._file_mouseLeaveHandler = null;
        }

        if (this._fileChangeHandler) {
            $removeHandler(this.get_file(), "change", this._fileChangeHandler);
            this._fileChangeHandler = null;
        }

        // this._file.removeNode(true);  //此写法IE下ok但是在chrome下失效、报错,参见下一行兼容性写法
        this._file.parentNode.removeChild(this._file);  //删除当前节点   --  weiyin -- 2016.05.19

        var tmpFile = document.createElement("input");
        tmpFile.type = "file";
        tmpFile.id = this._element.id + "_file";
        tmpFile.name = tmpFile.id.replace(/_/g, "$");
        tmpFile.className = "file";
        this._element.insertAdjacentElement("BeforeEnd", tmpFile);

        this._file = tmpFile;

        this._file_mouseEnterHandler = Function.createDelegate(this, this.onMouseEnter_file);
        $addHandler(this.get_file(), "mouseenter", this._file_mouseEnterHandler);
        this._file_mouseLeaveHandler = Function.createDelegate(this, this.onMouseLeave_file);
        $addHandler(this.get_file(), "mouseleave", this._file_mouseLeaveHandler);

        this._fileChangeHandler = Function.createDelegate(this, this.onFileChange);
        $addHandler(this.get_file(), "change", this._fileChangeHandler);


    },
    get_div: function () {
        if (this._div == null) {
            this._div = document.getElementById(this._element.id + "_divNoPic");
        }
        return this._div;
    },
    get_file: function () {
        if (this._file == null) {
            this._file = document.getElementById(this._element.id + "_file");
        }
        return this._file;
    },
    get_img: function () {
        if (this._img == null) {
            this._img = document.getElementById(this._element.id + "_img");
        }
        return this._img;
    },

    get_btnFakeFile: function () {
        if (this._btnFakeFile == null) {
            this._btnFakeFile = document.getElementById(this._element.id + "_btnFakeFile");
        }
        return this._btnFakeFile;
    },

    get_btnDelete: function () {
        if (this._btnDelete == null) {
            this._btnDelete = document.getElementById(this._element.id + "_btnDelete");
        }
        return this._btnDelete;
    },

    get_hidden: function () {
        if (this._hidden == null) {
            this._hidden = document.getElementById(this._element.id + "_Hidden");
        }
        return this._hidden;
    },

    get_Enabled: function () {

        return !this._element.cusAttr("disabled");

    },

    set_Enabled: function (isEnabled) {
        isEnabled = ToBoolean(isEnabled);
        this._element.cusAttr("disabled", !isEnabled);
        for (var i = 0, len = this._element.children.length; i < len; i++) {
            $(this._element.children[i]).attr("disabled", !isEnabled);
        }
    },

    get_ReadOnly: function () {
        if (this.get_textbox()) {
            if (!$(this.get_textbox()).attr("readOnly"))
                return false;
            var readoo = $(this.get_textbox()).attr("readOnly").toString().toLowerCase();
            return (readoo == "true" || readoo == "readonly" || readoo == "");
        }
        return false;
    },

    set_ReadOnly: function (isReadOnly) {
        isReadOnly = ToBoolean(isReadOnly);
        if (this.get_textbox())
            $(this.get_textbox()).attr("readOnly", isReadOnly);
        if (this.get_btnFakeFile()) {
            if (isReadOnly) {
                $(this.get_btnFakeFile()).attr("disabled", true);
            }
            else {
                if (this.get_Enabled()) {
                    $(this.get_btnFakeFile()).attr("disabled", false);
                }
            }
        }
    },

    get_Visible: function () {
        return (this._element.style.visibility != "hidden");
    },

    set_Visible: function (isVisible) {
        this._element.style.visibility = isVisible ? "visible" : "hidden";
    }


}
UF.UI.RichImage.registerClass('UF.UI.RichImage', UF.UI.Control);;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');
/*
    对外事件接口 ： onclick   2007-9-10
  
*/

UF.UI.RadioButtonList = function(element) {

    UF.UI.RadioButtonList.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here 
    //this._focusHandler;
}

UF.UI.RadioButtonList.prototype = {

    initialize : function() {
        UF.UI.RadioButtonList.callBaseMethod(this, 'initialize');

        this._firstChild = null;
        this._focusHandler = null;
        this._clickHandler = null;

        if(this.get_element().rows[0] && this.get_element().rows[0].cells[0] 
            && this.get_element().rows[0].cells[0].children[0] 
            && this.get_element().rows[0].cells[0].children[0].type == "radio"){

            this._firstChild = this.get_element().rows[0].cells[0].children[0];
            this._focusHandler = Function.createDelegate(this, this.RadioButtonListFocus);
            $addHandler(this._firstChild, "focus", this._focusHandler);

            this._clickHandler = Function.createDelegate(this, this.raiseOnClick);
            $addHandler(this.get_element(), "click", this._clickHandler);
        }
    },

    dispose : function() {
        // TODO: add your cleanup code here
        if (this._focusHandler) 
        {
            $removeHandler(this._firstChild, "focus", this._focusHandler);
            this._focusHandler = null;
        }
        
        if (this._clickHandler) 
        {
            $removeHandler(this.get_element(), "click", this._clickHandler);
            this._clickHandler = null;
        }
        UF.UI.RadioButtonList.callBaseMethod(this, 'dispose');
    },
    
    RadioButtonListFocus : function() {  
        var control = this.get_element();
        if(control.tagName == "TABLE" && control.className == ControlClass.RadioList){
            if(control.disabled)
                return false;
            if(control.rows.length == 1){  //横向
                for(var i=0;i<control.rows[0].cells.length;i++){
                    if(i==0){
                        control.rows[0].cells[i].children[0].focus();
                    }else{
                        if(control.rows[0].cells[i].children[0].checked){
                            control.rows[0].cells[i].children[0].focus();
                        }
                    }
                }
            }else{ //纵向
                for(var i=0;i<control.rows.length;i++){
                    if(i==0){
                        control.rows[i].cells[0].children[0].focus();
                    }else{
                        if(control.rows[i].cells[0].children[0].checked){
                            control.rows[i].cells[0].children[0].focus();
                        }
                    }
                }
            }

            return true;
        }
    },

    raiseOnClick : function(args) 
    {           
        var eh = this.get_events().getHandler("onclick");
        if (eh) 
        {
            eh(this, args);
        }
    },
    MouseOver : function()
    {
        this.get_element().className=this.mouseOutClass;
    },
    
    //added by u9lkc
    //InputControl通用的GetType方法
    get_Type : function ()
    {
        return ControlType.RadioButtonList;
    }

}

UF.UI.RadioButtonList.registerClass('UF.UI.RadioButtonList', UF.UI.InputControl);
;
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.Button = function (element) {

    UF.UI.Button.initializeBase(this, [element]);

    // TODO : (Step 1) Add your property variables here
    this._datas;
    this._enabled = true;
    this._partID = "";
    this._onclickHandler = null;
    this._DDB = null;   //转换源 DDB ID
    this._MI = null;    //转换源 MenuItem ID
    this._ToDDB = null; //转换目标 DDB ID
    this._ToMI = null;  //转换目标 MenuItem ID
    this._isCancelButtonClick = false;
    this.$element;
}

UF.UI.Button.prototype = {

    initialize: function () {
        UF.UI.Button.callBaseMethod(this, 'initialize');
        // TODO: add your initalization code here
        this.$element = $(this._element);
        this.initControl();
        // Create delegates Attach events
        this.RemoveMouseHandler();
        //添加多语言tooltip 支持

        //mahx20160603 去掉此样式
       // $(this.get_element()).find("input").addClass("textEclipsis")
        if (this.$element.find("input").length == 0)
            return;
        var mainInput = this.$element.find("input")[0];
        if (mainInput.title === "") {
            this._element.title = mainInput.value;
        }

    },

    dispose: function () {
        // TODO: add your cleanup code here
        this.cleanupEvent();

        if (this._datas) {
            this._datas.dispose();
            this._datas = null;
        }
        this._enabled = true;
        this._isCancelButtonClick = false;
        UF.UI.Button.callBaseMethod(this, 'dispose');
    },
    //event    
    add_BeforeButtonClick: function (handler) {
        this.get_events().addHandler("BeforeLoadData", handler);
    },
    remove_BeforeButtonClick: function (handler) {
        this.get_events().removeHandler("BeforeLoadData", handler);
    },
    raiseBeforeButtonClick: function (args) {
        var eh = this.get_events().getHandler("BeforeButtonClick");
        if (eh) {
            eh(this, args);
        }
    },
    cleanupEvent: function () {
        if (this._onclickHandler) {
            $removeHandler(this._element, "click", this._onclickHandler);
            this._onclickHandler = null;
        }
    },

    // TODO: (Step 2) Add your property accessors here
    get_Type: function () {
        return ControlType.Button;
    },

    initControl: function () {
        //女侠为跨浏览器而修改
        this._enabled = !this._element.cusAttr('disabled');
        this._partID = this._element.cusAttr("PartID");
        this._button = this._element.children[0];
        this._DDB = this._element.cusAttr("DDB");
        this._MI = this._element.cusAttr("MI");
        this._ToDDB = this._element.cusAttr("ToDDB");
        this._ToMI = this._element.cusAttr("ToMI");

        if (this._partID || this._DDB) {
            this._onclickHandler = Function.createDelegate(this, this.onButtonClick);
            var _this = this;
            $addHandler(this._element, "click", this._onclickHandler);
        }
    },

    set_PartID: function (pID) {
        this._partID = pID;
        this._element.cusAttr('PartID', pID);
    },
    get_PartID: function () {
        return this._partID;
    },

    onButtonClick: function () {
        if (_ClientCallBackManager && _ClientCallBackManager.Runing)   //如果在Callback期间，不处理
            return false;

        //有DDB说明是从MenuItem转来，直接触发MenuItem的Click
        if (this._DDB) {
            var ddb = $find(this._DDB);
            ddb.fireItemClick(this._MI);
        }
        else if (this._partID) {
            if (this.get_IsCancelButtonClick() == false)//通常都走这里
            {
                //默认不中断后面的ShowButtonForm()，需要开发人员在JS中通过set_IsCancelButtonClick()设定中断
                var args = new UF.UI.ChangeEventArgs();
                args.EventSource = this.get_id();
                //this.raiseBeforeButtonClick(Sys.EventArgs.Empty);//如果BeforeLoadData中有JS，还可以通过set_IsCancelButtonClick设置为false，从而继续执行ShowRefForm的操作。
                this.raiseBeforeButtonClick(args); //如果BeforeLoadData中有JS，还可以通过set_IsCancelButtonClick设置为false，从而继续执行ShowRefForm的操作。

                if (this.get_IsCancelButtonClick() == true)
                    return;
            }
            this.ShowButtonForm();
            if (this.get_IsCancelButtonClick() == true)//如果是撤销ButtonClick的，需要恢复一下状态
                this.set_IsCancelButtonClick(false); //恢复状态            
        }
    },
    ShowButtonForm: function ()//这是个private函数，请不要在JS中直接调用该函数，否则会造成逻辑不完整
    {
        var ret = this.ShowRefForm();
        this.OnAfterWindowClose(ret);
    },
    ShowRefForm: function () {
        var url = this.GetUrl(this._element.cusAttr("PartID"), "TitleLink");
        var title = this._element.cusAttr('WinTitle');
        if (!title) title = "";
        var width = this._element.cusAttr('WinWidth');
        var height = this._element.cusAttr('WinHeight');
        var HideStatusBar = false;
        if (this._element.cusAttr('HideStatusBar') && this._element.cusAttr('HideStatusBar') == "y")
            HideStatusBar = true;
        return ShowModalDialog(url, title, height, width, HideStatusBar);
    },

    OnAfterWindowClose: function (ret) {
        if (!ret) return;
        this._datas = PopupFormHelper.TranslateInfor(ret);
        var args = new UF.UI.ChangeEventArgs();
        args.result = this._datas;
        this.raiseContentChanged(args);
    },
    get_Enabled: function () {
        return !this._element.cusAttr("disabled");
    },

    set_Enabled: function (isEnabled) {
        if (isEnabled && isEnabled.toString().toLowerCase() == "true") {
            if (this.visibleAuthority != null && this.visibleAuthority.toString().toLowerCase() == "false")//权限不可见
                return;
            if (this.enableAuthority != null && this.enableAuthority.toString().toLowerCase() == "false")//权限不可编辑
                return;
            this._enabled = true;
            //this.get_element().disabled = this._button.disabled = false;
            this.$element.addClass("disabled")
        }
        else {
            this._enabled = false;
            //this.get_element().disabled = this._button.disabled = true;
            this.$element.removeClass("disabled")
        }
        isEnabled = ToBoolean(isEnabled);
        $(this._button).attr("disabled", !isEnabled);
        this._element.cusAttr("disabled", !isEnabled);
        if (this._ToDDB) {
            $find(this._ToDDB).SetMenuItemEnableByItemID(this._ToMI, this._enabled);
        }
        this.set_HDValue("Enabled", isEnabled.toString().toLowerCase());
    },
    get_Visible: function () {
        return !(this._element.style.display == "none");
    },
    set_Visible: function (isVisible) {
        if (isVisible === false) {
            this._element.style.display = "none";
        } else if (isVisible === true) {
            this._button.style.display = "";
            this._element.style.display = "";
        }
    },

    set_Text: function (text) {
        this._button.value = text;
    },
    get_Text: function () {
        return this._button.value;
    },

    get_IsCancelButtonClick: function ()//一定是bool类型
    {
        return this._isCancelButtonClick;
    },
    set_IsCancelButtonClick: function (val) {
        if (val != null && val.toString().toLowerCase() == "true") {
            this._isCancelButtonClick = true;
        }
        else {
            this._isCancelButtonClick = false;
        }
    },

    fireClick: function () {
        this._button.fireEvent("onclick");
    },
    get_displayName: function () {
        
        return this.get_Text();
    },

}

UF.UI.Button.registerClass('UF.UI.Button', UF.UI.PopupForm);;
// JScript source code
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.FilterAdvCtrl = function(element) {

    UF.UI.FilterAdvCtrl.initializeBase(this, [element]);
        
    // TODO : (Step 1) Add your property variables here
    this._Controls;
    
    // Public Properties  
    
    // Handler   
    this._keydownHandler;
}

UF.UI.FilterAdvCtrl.prototype = {

    initialize : function() {      
        // TODO: add your initalization code here
        UF.UI.FilterAdvCtrl.callBaseMethod(this, 'initialize');
	    this.GetInputElements();
        this._keydownHandler = Function.createDelegate(this, this.onkeyDown);
        $addHandler(this.get_element(), "keydown", this._keydownHandler);

		this._focusinHandler = Function.createDelegate(this, this.onMouseDown);
        $addHandler(this.get_element(), "focusin", this._focusinHandler);

        this._clickHandler = Function.createDelegate(this, this.onMouseDown);
        $addHandler(this.get_element(), "click", this._clickHandler);
    },
       
    dispose : function() {
        // TODO: add your cleanup code here     
        this.cleanupEvent();
	    this._Controls = null;   
        UF.UI.FilterAdvCtrl.callBaseMethod(this, 'dispose'); 
    },

    cleanupEvent : function()
    {
        if (this._keydownHandler) {
            $removeHandler(this.get_element(), "keydown", this._keydownHandler);
            this._keydownHandler = null;
        }
    },

    GetInputElements : function()
    {
	  this._Controls = new Array();  

	  var inputs = new Array(); 

	  inputs=this.get_element().getElementsByTagName("input");
	   
	  for(var i=0,len=inputs.length;i<len;i++ )
	  {
	     var input = inputs[i];

	     //if(input.style.display!="none"&&input.type!="hidden"&& input.type!="button"&&(!(input.disabled))&&(!input.readOnly))
		if(input.style.display!="none"&&input.type!="hidden"&& input.type!="button"&&(!input.disabled))
	     {
		if(input.type!="image")
		{
		   this._Controls.push(input);
		}
	     }
	  }
     },

    onkeyDown: function ()
    {
      if (this.get_element().document.readyState!="complete") return;  
	  switch(window.event.keyCode) 
	  {  	

		case KeyCode.Zero:
        case 96:
		case KeyCode.G_B:
        case KeyCode.g_s: 

		case KeyCode.left:
        case KeyCode.right:
		  if(window.event.altKey || window.event.ctrlKey){  
            this.callParentMethod();
            return;
            }
		  break;

		case KeyCode.F2:
		    this.processF2Button();
                $Event(window.event).stopPropagation();
                $Event(window.event).preventDefault();
			break;

	    case KeyCode.enter:       	
	    case KeyCode.tab:    
	      if(window.event.ctrlKey)
		     return;   
	      this.Jump2Element(event,event.srcElement, window.event.shiftKey);  
	      break;
	  }
    },

	onMouseDown : function(){
		var tag = event.srcElement.tagName;
		var ele = event.srcElement;
        if( tag == "INPUT" && (ele.className == "DDBO" || ele.className == "TBI" )){
        }
		else if(tag == "TD" && event.srcElement.className){
		    //top.__UFCurrentFocusControl = null;V5 top不可以随意乱用
		    BaseTop.__UFCurrentFocusControl = null
        }
		else if(tag=="INPUT" && ele.parentElement && ele.parentElement && ele.parentElement.parentElement.tagName == "TD" 
			&& ele.parentElement.parentElement.className == "tbc"){
        }
		else if(tag == "INPUT" || tag == "TEXTAREA"){
		    //top.__UFCurrentFocusControl = event.srcElement.id;V5 top不可以随意乱用
		    BaseTop.__UFCurrentFocusControl = event.srcElement.id;
        }	
	},

    Jump2Element : function(curEvent,inputElement,direction)
    {
	  var subControls=this._Controls;   
	  var curControl=null;    
	  if(subControls.length>0)
	  {
	    curControl = this.getCurrentControl(inputElement,subControls,direction);
	  }
	  if(curControl==null)
	  {
		  this.callParentMethod();
		  return;
	  }
	  if(curControl!=null&&curControl.disabled)
	  {
	    this.Jump2Element(curEvent,curControl,direction);
	    return;
	  }
	  if(curControl!=null&&!curControl.disabled)
	  {  	
		if(curControl)
		{
		   try{
			    curControl.focus();		    
                    //mahx20160803 修改兼容性问题
                    $Event(curEvent).stopPropagation();
                    $Event(curEvent).preventDefault();
		      }
		      catch(e)
		      {
		      }
		 }
	  }
    },

    callParentMethod : function()
    {
        var pageID = this._element.document.parentWindow.parent.pageID;
        var obj = $("#" + pageID + '_TabPage9').length > 0 ? $("#" + pageID + '_TabPage9')[0] : null;
        if (obj != null) {
            obj.control.subIframeOnkeyDown(window.event, pageID);

            $Event(window.event).stopPropagation();
            $Event(window.event).preventDefault();
        }
    },

    processF2Button:function()
	{
		var textBoxId=window.event.srcElement.id;
		var textBoxIdTrail='_txtFilterItem_textbox';
		var filterItemIdTrail='_imgBtnOpenItem';
      
		var f_textIdTrail_1='_txtFilterValue1_textbox';
		var f_textIdTrail_2='_txtFilterValue2_textbox';
		var f_ReadOnlyValueTrail='ReadOnlyValue_textbox';
		var f_enuIdTrail_1='_ddlEnumCtrl1_textbox';
		var f_enuIdTrail_2='_ddlEnumCtrl2_textbox';
		var f_dateIdTrail_1='_datePicker1_textbox';
		var f_dateIdTrail_2='_datePicker2_textbox';
		var f_boolIdTrail='ddlBoolCtrl1_textbox';
        var filterValueIdTrail='_imgBtnOpenValue';

		if(this.processCase(textBoxId,textBoxIdTrail,filterItemIdTrail))
		{
			return;
		}
        
		if(this.processCase(textBoxId,f_textIdTrail_1,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_textIdTrail_2,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_ReadOnlyValueTrail,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_enuIdTrail_1,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_enuIdTrail_2,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_dateIdTrail_1,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_dateIdTrail_2,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_boolIdTrail,filterValueIdTrail))
		{
			return;
		}


	},
	
	processCase:function(sFullId,sIdTrail,tIdTrail)
	{
		var start=sFullId.length-sIdTrail.length;
		if(sFullId.substr(start,sIdTrail.length)==sIdTrail)
		{
			 var imageId=sFullId.replace(sIdTrail,tIdTrail);
			 var obj=this._element.document.all(imageId);
			 obj.click();
        	 return true;
		}
		return false;
	},

    getCurrentControl : function(inputElement,subControls,direction)
    {
	   var ctrlLength = subControls.length;
	   for(i=0;i<ctrlLength;i++)
	   {
	      if(subControls[i]==inputElement)
	      {
			 if(!direction)
			 {
				if(i<ctrlLength-1)
				{
				   return subControls[i+1];
				}
				else
				{
				   //return subControls[0];
                   return null;
				}
			 }
			 else
			 {
				if(i==0)
				{
				   //return subControls[ctrlLength-1];
				   return null;
				}
				else
				{
				   return subControls[i-1];
				}
			 }
	      }
	   }
    }
   }


   UF.UI.FilterAdvCtrl.registerClass('UF.UI.FilterAdvCtrl', UF.UI.Control);;
// JScript source code
Type.registerNamespace('UF');
Type.registerNamespace('UF.UI');

UF.UI.FilterBasicCtrl = function(element) {

    UF.UI.FilterBasicCtrl.initializeBase(this, [element]);
        
    // TODO : (Step 1) Add your property variables here
    this._Controls;
    
    // Public Properties  
    
    // Handler   
    this._keydownHandler;
}

UF.UI.FilterBasicCtrl.prototype = {

    initialize : function() {      
        // TODO: add your initalization code here
        UF.UI.FilterBasicCtrl.callBaseMethod(this, 'initialize');
	    this.GetInputElements();
        this._keydownHandler = Function.createDelegate(this, this.onkeyDown);
        $addHandler(this.get_element(), "keydown", this._keydownHandler);

		this._focusinHandler = Function.createDelegate(this, this.onMouseDown);
        $addHandler(this.get_element(), "focusin", this._focusinHandler);

        this._clickHandler = Function.createDelegate(this, this.onMouseDown);
        $addHandler(this.get_element(), "click", this._clickHandler);
    },
       
    dispose : function() {
        // TODO: add your cleanup code here     
        this.cleanupEvent();
	    this._Controls = null;   
        UF.UI.FilterBasicCtrl.callBaseMethod(this, 'dispose'); 
    },

    cleanupEvent : function()
    {
        if (this._keydownHandler) {
            $removeHandler(this.get_element(), "keydown", this._keydownHandler);
            this._keydownHandler = null;
        }
    },

    GetInputElements : function()
    {
	  this._Controls = new Array();  

	  var inputs = new Array(); 

	  inputs=this.get_element().getElementsByTagName("input");
	   
	  for(var i=0,len=inputs.length;i<len;i++ )
	  {
	     var input = inputs[i];

	     if(input.style.display!="none"&&input.type!="hidden"&& input.type!="button"&&(!(input.disabled))&&(!input.readOnly))
	     {
		if(input.type!="image")
		{
		   this._Controls.push(input);
		}
	     }
	  }
     },

    onkeyDown: function ()
    {
      if (this.get_element().document.readyState!="complete") return;  
	  switch(window.event.keyCode) 
	  {  	
		case KeyCode.Zero:
        case 96:
		case KeyCode.G_B:
        case KeyCode.g_s: 

		case KeyCode.left:
        case KeyCode.right:
		  if(window.event.altKey || window.event.ctrlKey){  
            this.callParentMethod();
            return;
            }
		  break;

		case KeyCode.F2:
		    this.processF2Button();
                $Event(window.event).stopPropagation();
                $Event(window.event).preventDefault();
			break;

	    case KeyCode.enter:       	
	    case KeyCode.tab:    
	      if(window.event.ctrlKey)
		     return;   
	      this.Jump2Element(event,event.srcElement, window.event.shiftKey);  
	      break;
	  }
    },

	onMouseDown : function(){
		var tag = event.srcElement.tagName;
		var ele = event.srcElement;
        if( tag == "INPUT" && (ele.className == "DDBO" || ele.className == "TBI" )){
        }
		else if(tag == "TD" && event.srcElement.className){
		    //top.__UFCurrentFocusControl = null;V5 top不可以随意乱用
		    BaseTop.__UFCurrentFocusControl = null;
        }
		else if(tag=="INPUT" && ele.parentElement && ele.parentElement && ele.parentElement.parentElement.tagName == "TD" 
			&& ele.parentElement.parentElement.className == "tbc"){
        }
		else if(tag == "INPUT" || tag == "TEXTAREA"){
		    //top.__UFCurrentFocusControl = event.srcElement.id;V5 top不可以随意乱用
		    BaseTop.__UFCurrentFocusControl = event.srcElement.id;
        }	
	},

    Jump2Element : function(curEvent,inputElement,direction)
    {
	  var subControls=this._Controls;   
	  var curControl=null;    
	  if(subControls.length>0)
	  {
	    curControl = this.getCurrentControl(inputElement,subControls,direction);
	  }
	  if(curControl==null)
	  {
		  this.callParentMethod();
		  return;
	  }
	  if(curControl!=null&&curControl.disabled)
	  {
	    this.Jump2Element(curEvent,curControl,direction);
	    return;
	  }
	  if(curControl!=null&&!curControl.disabled)
	  {  	
		if(curControl)
		{
		   try{
			    curControl.focus();		    
			    curEvent.cancelBubble=true;
			    curEvent.returnValue=false;
		      }
		      catch(e)
		      {
		      }
		 }
	  }
    },

    callParentMethod : function()
    {
        var pageID = this._element.document.parentWindow.parent.pageID;
        var obj = $("#" + pageID + '_TabPage9').length > 0 ? $("#" + pageID + '_TabPage9')[0] : null;
	   if(obj!=null)
		{
	       obj.control.subIframeOnkeyDown(window.event, pageID);
	       $Event(event).stopPropagation();
	       $Event(event).preventDefault();
		}
    },

    processF2Button:function()
	{
		var textBoxId=window.event.srcElement.id;
      
		var f_textIdTrail_1='_txtFilterValue1_textbox';
		var f_textIdTrail_2='_txtFilterValue2_textbox';
		var f_ReadOnlyValueTrail='ReadOnlyValue_textbox';
		var f_enuIdTrail_1='_ddlEnumCtrl1_textbox';
		var f_enuIdTrail_2='_ddlEnumCtrl2_textbox';
		var f_dateIdTrail_1='_datePicker1_textbox';
		var f_dateIdTrail_2='_datePicker2_textbox';
		var f_boolIdTrail='ddlBoolCtrl1_textbox';
        var filterValueIdTrail='_imgBtnOpen';


        
		if(this.processCase(textBoxId,f_textIdTrail_1,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_textIdTrail_2,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_ReadOnlyValueTrail,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_enuIdTrail_1,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_enuIdTrail_2,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_dateIdTrail_1,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_dateIdTrail_2,filterValueIdTrail))
		{
			return;
		}
		if(this.processCase(textBoxId,f_boolIdTrail,filterValueIdTrail))
		{
			return;
		}


	},
	
	processCase:function(sFullId,sIdTrail,tIdTrail)
	{
		var start=sFullId.length-sIdTrail.length;
		if(sFullId.substr(start,sIdTrail.length)==sIdTrail)
		{
			 var imageId=sFullId.replace(sIdTrail,tIdTrail);
            var obj = this._element.document.children(imageId);
			 obj.click();
        	 return true;
		}
		return false;
	},	

    getCurrentControl : function(inputElement,subControls,direction)
    {
	   var ctrlLength = subControls.length;
	   for(i=0;i<ctrlLength;i++)
	   {
	      if(subControls[i]==inputElement)
	      {
			 if(!direction)
			 {
				if(i<ctrlLength-1)
				{
				   return subControls[i+1];
				}
				else
				{
				   //return subControls[0];
                   return null;
				}
			 }
			 else
			 {
				if(i==0)
				{
				   //return subControls[ctrlLength-1];
				   return null;
				}
				else
				{
				   return subControls[i-1];
				}
			 }
	      }
	   }
    }
   }


   UF.UI.FilterBasicCtrl.registerClass('UF.UI.FilterBasicCtrl', UF.UI.Control);;


Advertisement = function() {

}
Advertisement.prototype = {
    init: function() {
        this.adserverInit();
        /*
        if(window.U9HubTool){
            this.getPrefers();
        }
        */
    },
    createAd:function(data){
        var _this = this;
        var id=22; //正式环境
        var u9hubUrl = 'http://u9ad.u9hub.com/www/delivery/asyncjs.php';
        $.ajax({
            url:"../../Scripts/NewPortal/AD/TestEnvironment.js",
            type:"GET",
            async:false,
            success:function(data){
                id=16;//测试环境
            },
            error:function(msg){
            }
        }); 
        //追加广告位
        var dom = "<ins data-revive-zoneid='"+id+"'  data-revive-id='c595e139effc3eddd4610588db2c7606' data-revive-withtext='1'  data-revive-tags="+data+"></ins>";
        $("#adserver").prepend(dom);
        if(!_this.isInclude('asyncjs')){
            var head = document.getElementsByTagName('head').item(0);
            var script = document.createElement('script');
            script.setAttribute('type', 'text/javascript');
            script.setAttribute('src', u9hubUrl);
            script.setAttribute('async', 'true');
            head.appendChild(script);
        }
        $.getScript(u9hubUrl, function() {
            $("#adserver").bind("DOMNodeInserted",function(){
                $("#adserver>ins>img").load(function(){
                    $("#adserver").animate({bottom:'20px'},1000);
                });
                $("#adserver>ins>a>img").load(function(){
                    $("#adserver").animate({bottom:'20px'},1000);
                });
                var title = $("#adserver ins .tags").attr("tags");
                _this.getDislikes(title);
                
                $(".adserver-mark").click(function(){
                    _this.postDislikes(title,function(){
                        _this.delAd();
                    });
                });

            });
        });
    },
    delAd:function(){
        $("#adserver").slideUp(1000,function(){
            $(this).closest("#adserver").remove();
        });
    },
    adserverInit:function(){  
        var _this = this;
        $(".adserver-close").click(function(){
            _this.delAd();
        });
        $("#adserver").draggable({
            cursor:"move",
            start:function(){
               
            },
            stop:function(){
           
            }
        })
    },
    getPrefers:function(data){
        var _this=this;
        U9HubTool.get({
            url:'api/feed/prefers',
            data:{
                causer:'ad',
                type:'tag'
            },
            success:function(data){
                _this.createAd(data.data);
            },
            error:function(error){
                console.log("getPrefers fail");
            }
        });  
    },
    getDislikes:function(title){
        var _this=this;
        U9HubTool.get({
            url:'api/feed/dislikes',
            data:{
                causer:'ad',
                type:'tag'
            },
            success:function(data){
                var arr = [];
                for(var index in data.data){
                    var tags = data.data[index].title;
                    if(tags.indexOf(",") > -1){
                        arr = arr.concat(tags.split(","));
                    }else{
                        arr.push(tags);
                    }
                }
                arr = _this.arrUnique(arr);
                _this.showOrHideDislike(title,arr);
            },
            error:function(error){
                console.log("getPrefers fail");
            }
        });
    },
    showOrHideDislike:function(title,dislike_list){
        var _this = this;            
        if(!title){
            $(".adserver-mark").hide();
        }
        if(title && title.toLowerCase() == "u9"){
            $(".adserver-mark").hide();
        }
        if(title && title.indexOf(",")>-1){
            var arr = title.split(",");
            var newArr = [];
            for(var i=0;i<arr.length;i++){
                arr[i] = arr[i].trim().toLowerCase();
                if(dislike_list.indexOf(arr[i]) != -1 ){
                    arr.splice(i,1);
                }
            }
            if(arr.length == 1 && arr[0].trim().toLowerCase() == "u9"){
                $(".adserver-mark").hide();
            }
        }
    },
    postDislikes:function(title,callback){
        if(title){
            if(title.indexOf(',')!=-1){
                var arr = title.split(",");
                var newArr = [];
                for(var i=0;i<arr.length;i++){
                    if(arr[i].trim().toLowerCase() != "u9"){
                        newArr.push(arr[i])
                    }
                }
                title = newArr.join(",");
            }
            if(title.trim().toLowerCase() == "u9"){
                title = '';
            }
        }
        U9HubTool.post({
            url:'api/feed/dislikes',
            data:{
                causer:'ad',
                type:'tag',
                title:title
            },
            success:function(data){
                console.log("getDislikes sucess");
                callback();
            },
            error:function(error){
                console.log("getPrefers fail");
            }
        });
    },
    isInclude:function(name){
        var es=document.getElementsByTagName('script');
        for(var i=0;i<es.length;i++)
        if(es[i]['src'].indexOf(name)!=-1)return true;
        return false;
    },
    arrUnique:function(array){ 
        var n = [];
        for(var i = 0; i < array.length; i++){ 
            array[i] = array[i].trim().toLowerCase();
            if (n.indexOf(array[i]) == -1){
                n.push(array[i]); 
            } 
        } 
        return n; 
    }

}
Advertisement.GetInstance = function() {
    return new Advertisement();
}

    
//右边侧栏 截屏（又称错误反馈） end

 $(function() {
    Advertisement.GetInstance().init();
            
 });


;
